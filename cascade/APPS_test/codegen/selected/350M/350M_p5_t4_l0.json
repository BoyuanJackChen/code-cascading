[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n",
        "test": "assert solution(3) == 5",
        "num_ids": 3654,
        "indeed": false
    },
    {
        "number": 4001,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    n = int(stdin)\n    for _ in range(n):\n        numbers = int(stdin)\n        d = 0\n        while numbers > 0:\n            if numbers % 10 == d:\n                d += 1\n            else:\n                answer.append(str(numbers // 10 ** d))\n                numbers = numbers // 10 ** d\n                d = 0\n        answer.append(str(numbers))\n    return \"\".join(answer)",
        "test": "assert solution('12 6 6 5 6 4 5 3 6') == '20 8'",
        "num_ids": 2093,
        "indeed": false
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n\n    for row in range(n):\n        for col in range(n):\n            if a[row][col] % k == 0:\n                max_sum = a[row][col] // k\n                for r in range(row, n):\n                    for c in range(col, n):\n                        if a[r][c] % k == 0:\n                            a[r][c] = a[r][c] // k\n                for r in range(row, n):\n                    for c in range(col, n):\n                        a[r][c] += max_sum\n    return str(max(a[0][0], a[n - 1][n - 1]))\n\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, k = map(int, stdin.split())\n        a = [list(map(int, stdin.split())) for _ in range(n)]\n\n        for row in range(n):\n            for col in range(n):\n                if a[row][col] % k == 0:\n                    max_sum = a[row][col] // k\n                    for r in range(row, n):\n                        for c in range(col, n):\n                            a[r][c] = a[r][c] // k\n                    a[r][col] += max_sum\n        return str(max(a[0][0], a[n - 1][n - 1]))\n",
        "test": "assert solution(stdin) == 24",
        "num_ids": 1355,
        "indeed": false
    },
    {
        "number": 4003,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    a = map(int, stdin.split())\n    k = len(a)\n    print(max(a))\n    print(a[0])\n    if a[0] == a[1]:\n        return \"L\" * k + \"R\" * k\n    else:\n        return \"R\" * k + \"L\" * (k - 1 - a[0])\n\nprint(solution(\"1 2 4 3 2\"))\nprint(solution(\"7\"))\nprint(solution(\"3 2 6 5 4 2\"))\nprint(solution(\"4\"))\nprint(solution(\"4 3 2\"))\nprint(solution(\"3 3 3 3\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"3 3 3 3 3 3 3 3 3 3\"))\n",
        "test": "assert solution(stdin) == \"LRRRRRR\"",
        "num_ids": 1858,
        "indeed": false
    },
    {
        "number": 4004,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(lambda x:int(x)-int(stdin), stdin)))\n",
        "test": "assert solution(stdin) == 3",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 4005,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split()]\n    x1, y1 = a, b\n    x2, y2 = c, d\n    A = x2 - x1\n    B = y2 - y1\n    if A > 0:\n        x3 = x2 + (2 * A)\n        if 0 < x3 < 10 ** 9 and 0 < y2 - y3 < 10 ** 9:\n            return 'YES'\n    elif A < 0:\n        x4 = x3 + (2 * A)\n        if 0 < x4 < 10 ** 9 and 0 < y2 - y4 < 10 ** 9:\n            return 'YES'\n    else:\n        return 'NO'\n\n\n\nExample 1:\n\nInput:\n3 3 5\n4 2 5\n7 1 6\n3 7 2\n\nOutput:\nNO\nExplanation:\nThe point $(5, 4)$ lies not strictly inside the white sheet and lies strictly outside of both black sheets.\n\nExample 2:\n\nInput:\n5 4 10\n4 3 7\n5 4 6\n7 1 3\n\nOutput:\nYES\nExplanation:\nThe point $(5, 4)$ lies not strictly inside the white sheet and lies strictly outside of the first black sheet.\n\nExample 3:\n\nInput:\n0 0 2\n0 0 9\n0 0 0\n0 0 0\n\nOutput:\nNO\nExplanation:\nThe point $(0, 0)$ lies not strictly inside the white sheet and lies strictly outside of the second black sheet.\n\n\nConstraints:\n\n1 <= x_1, x_2, y_1, y_2 <= 10^5\n-10^9 <= A, B, C, D <= 10^9\n\n\nFollow up:\n\nA non-zero coordinate value can be any of the three coordinate axes, not just the coordinate axes in the table, i.e. A, B, C.\n\"\"\"\n\nclass Solution:\n    def isRectangleCover(self, rect):\n        A, B = rect[0], rect[2]\n        C, D = rect[1], rect[3]\n        area = A * B\n        x = (D * (D - 1) + (C - 1)) * (C - B)\n        return x <= area",
        "test": "assert solution(stdin) == \"NO\"",
        "num_ids": 2015,
        "indeed": false
    },
    {
        "number": 4006,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return ''\n    # print(stdin)\n    n = int(stdin)\n    # print(n)\n    if n <= 0:\n        return ''\n    if n == 1:\n        return '0'\n    answer = '0'\n    count = 0\n    prev = -1\n    for i in range(1, n + 1):\n        # print(prev)\n        # print(i)\n        # print(str(i) +'' + str(prev))\n        if prev > 0:\n            # print(str(prev) +'' + str(i))\n            # print(prev + 1)\n            if count == prev:\n                # print('answer'+ answer +'' + str(i))\n                # print(answer +'' + str(i))\n                return str(i)\n        prev = i\n        answer += str(i)\n        count += 1\n    return answer\nprint(solution('1098'))",
        "test": "assert solution(\"2\") == \"2\"",
        "num_ids": 1299,
        "indeed": false
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n, f_lst, g_lst = map(int, stdin.split(\" \"))\n    nf_lst = [0] * n\n    nf_lst[0] = 1\n    g_lst.append(1)\n    for i in range(1, n):\n        nf_lst[i] = nf_lst[i - 1] + 1 if f_lst[i - 1]!= 0 else 1\n        g_lst.append(g_lst[i] + 1 if g_lst[i]!= 0 else 1)\n    return str(nf_lst[n - 1]) + \" \" + str(g_lst[n - 1])\n",
        "test": "assert solution(\"0 1 0\") == \"1 1 0\"",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 4008,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if (len(a) < k):\n        return \"NO\"\n    elif (len(a) == k):\n        return \"YES\"\n    else:\n        l = len(a)\n        c = [[] for i in range(l)]\n        for i in range(l):\n            c[i].append(a[i])\n        for i in range(l):\n            c[i].sort()\n        for i in range(k):\n            for j in range(l):\n                if c[j][i]!= c[j][i+1]:\n                    return \"NO\"\n        return \"YES\"",
        "test": "assert solution('5 2') == 'YES'",
        "num_ids": 1145,
        "indeed": false
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    return str(10**y%(n-x)//10**x)",
        "test": "assert solution(input()) == '4'",
        "num_ids": 2108,
        "indeed": false
    },
    {
        "number": 4010,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split()[0])\n    for _ in range(t):\n        n = int(stdin.strip().split()[1])\n        a = list(map(int, stdin.strip().split()[2:]))\n        l = 1\n        for i in range(n - 1, -1, -1):\n            if a[i]!= a[i + 1]:\n                if i + 1 <= n - 1:\n                    a[i + 1] = a[i]\n                    l += 1\n            else:\n                break\n        if l == 1:\n            return 'YES'\n        else:\n            return 'NO'\n",
        "test": "assert solution('1 2 3 4 4 4 3') == 'YES'",
        "num_ids": 1577,
        "indeed": false
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(len(a)):\n        a[i] = a[i].replace('1', '9').replace('2', '9').replace('3', '9').replace('4', '9').replace('5', '9').replace('6', '9').replace('7', '9').replace('8', '9').replace('9', '9')\n    for i in range(n - 1):\n        a[i + 1] = a[i + 1].replace('1', '9').replace('2', '9').replace('3', '9').replace('4', '9').replace('5', '9').replace('6', '9').replace('7', '9').replace('8', '9').replace('9', '9')\n    for i in range(n - 1):\n        a[i] = a[i].replace('1', '9').replace('2', '9').replace('3', '9').replace('4', '9').replace('5', '9').replace('6', '9').replace('7', '9').replace('8', '9').replace('9', '9')\n    for i in range(n - 1):\n        a[i] = a[i].replace('1', '9').replace('2', '9').replace('3', '9').replace('4', '9').replace('5', '9').replace('6', '9').replace('7', '9').replace('8', '9').replace('9', '9')\n    return str(int(sum(map(int, a))))",
        "test": "assert solution(stdin) == '99999'",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 4012,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    \n    A,B,C = map(int,stdin.split())\n    A, B = A, B % C\n    B = B % C\n    C = C % B\n    \n    \n    t = 0\n    while True:\n        if A == 0 and B == 0 and C == 0:\n            return str(t)\n        if A == 0:\n            t += 1\n            A += B\n            if A >= C:\n                A -= C\n            else:\n                break\n        if B == 0:\n            t += 1\n            B += A\n            if B >= C:\n                B -= C\n            else:\n                break\n        if C == 0:\n            t += 1\n            C += A\n            if C >= B:\n                C -= B\n            else:\n                break\n        \n        \n        if A * B * C == A * B * C:\n            t += 1\n            A += B + C\n            B += A\n            C = 0\n        else:\n            break\n    \n    print(str(t))\n    print(str(A))\n    print(str(B))\n    print(str(C))\n    \n    return str(t)\n\n-----Submission-----\n2\n8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\n----Time Limit----\nRuntime: 32 ms (32.67%)\nMemory Usage: 14.3 MB (29.48%)\n\nRuntime: 32 ms (28.56%)\nMemory Usage: 14.3 MB (27.91%)\n\nRuntime: 32 ms (28.74%)\nMemory Usage: 14.3 MB (27.55%)\n\nRuntime: 32 ms (28.63%)\nMemory Usage: 14.3 MB (26.09%)\n\nRuntime: 32 ms (28.53%)\nMemory Usage: 14.3 MB (26.05%)\n\nRuntime: 32 ms (28.45%)\nMemory Usage: 14.3 MB (26.13%)\n\nRuntime: 32 ms (28.41%)\nMemory Usage: 14.3 MB (26.11%)\n\nRuntime: 32 ms (28.39%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.34%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.33%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.32%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.29%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.26%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.25%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.23%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.21%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.19%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.16%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.14%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.13%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.12%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.10%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.07%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.06%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.05%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.03%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.02%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.01%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (27.93%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.02%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.01%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.33%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.31%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.28%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.27%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.26%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.25%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.23%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.21%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.19%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.16%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.14%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.13%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.12%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.10%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.07%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.06%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.05%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.03%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.02%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.01%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (29.009%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.99%)\nMemory Usage: 14.3 MB (26.08%)\n\nRuntime: 32 ms (28.98%)",
        "test": "assert solution(\"100 100 101\") == \"100\"",
        "num_ids": 4179,
        "indeed": false
    },
    {
        "number": 4013,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    num = [int(i) for i in stdin.split()]\n    num = sorted(num, reverse=True)\n    for i in range(len(num)):\n        num[i] = num[i]-1\n    return str(num[0])\n\n\ucd9c\ub825\n10\n\n-----Constraints-----\n1 <= n <= 10^5\na_1, a_2,..., a_n\n\n------\n\n\uc544\ub798 \uc608\uc678\ucc98\ub9ac\ub97c \uc704\ud574 \uc791\uc131\ud55c \ub2f5\uc548 \uc608\uc2dc\ub97c \ubcf4\uace0 \ucd9c\ub825\ud574\ubcf4\uc138\uc694.\n\"\"\"\n\nn, a = map(int, input().split())",
        "test": "assert solution(stdin) == '2'",
        "num_ids": 851,
        "indeed": false
    },
    {
        "number": 4014,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    s, d = list(map(int, stdin.split()))\n    s -= 1\n    d -= 1\n    c = []\n    for i in range(n):\n        c.append([0, 0])\n    \n    j = 0\n    while True:\n        if d == 0:\n            if s >= 0:\n                break\n            if c[j][0] == 0:\n                j = j + 1\n            else:\n                c[j][0] -= 1\n                c[j][1] = s\n        else:\n            if c[j][0] == 0:\n                j = j + 1\n            else:\n                c[j][0] -= 1\n                c[j][1] = s\n            if c[j][1] == d:\n                break\n    \n    for i in range(m):\n        c[i][0] = d + 1\n        c[i][1] = s\n    \n    while j < n:\n        print(c[j][1], end=\" \")\n        c[j][0] += 1\n        c[j][1] += 1\n        j += 1\n        \n    if c[0][0] == 0 and c[0][1] == 0:\n        return '0'\n    \n    for i in range(n):\n        if c[i][1] < d:\n            c[i][1] = c[i][1] + 1\n            \n    \n    for i in range(n):\n        print(c[i][1], end=\" \")\n        c[i][0] += 1\n        c[i][1] += 1\n    \n    print()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert solution(stdin) == \"2 2 1 1 1 0 4 3 4 4\"",
        "num_ids": 2973,
        "indeed": false
    },
    {
        "number": 4015,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solve(n,m,v):\n        # check n>m\n        if n==m:\n            return n\n        # check n>=2*m\n        if n>=2*m:\n            return -1\n        # check n>=2*m+1\n        if n>=2*m+1:\n            return -1\n        # transform n to m\n        n=m*v\n        n=str(n)\n        # check if m can be found\n        if len(n)==len(m):\n            return m\n        # find smallest m\n        for i in range(len(m)-1,-1,-1):\n            if n[i] in m:\n                if m[i]=='2':\n                    m[i]=2\n                    m=solve(n[:i]+'2',m,v+1)\n                    m[i]=1\n                else:\n                    m[i]=3\n                    m=solve(n[:i]+'3',m,v+1)\n                    m[i]=2\n        return m[0]\n    return solve(n,m,v)\n\nInput\n120 51840\nOutput\n7\n\nInput\n42 42\nOutput\n0\n\nInput\n48 72\nOutput\n-1\n\"\"\"\n\nn, m = map(int, input().split())\nprint(solution(n, m))",
        "test": "assert solution(\"48 72\") == 0",
        "num_ids": 2426,
        "indeed": false
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    s = stdin.strip()\n\n    res = \"\"\n    i = 0\n    while i < n:\n        if i < k:\n            res += s[i]\n        else:\n            res += res[-1]\n        i += 1\n    return res\n\nprint(solution(\"3 4\"))",
        "test": "assert solution(stdin) == \"ababababa\"",
        "num_ids": 2444,
        "indeed": false
    },
    {
        "number": 4017,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin)\n    answer = []\n    \n    for i in range(n):\n        s = 0\n        for j in range(n):\n            if a[j] == a[i] + 1:\n                s += 1\n        answer.append(s)\n    \n    print(*answer)",
        "test": "assert solution(stdin) == 3",
        "num_ids": 2061,
        "indeed": false
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    s = set(s)\n    if n < k:\n        print(-1)\n    else:\n        count = 0\n        for i in s:\n            if i not in s:\n                count += 1\n        print(count)\nsolution(stdin)\n\ns = set()\nfor i in range(int(stdin.strip())):\n    s.add(stdin.strip())\nprint(len(s))\n",
        "test": "assert solution(\"a\") == 10",
        "num_ids": 1280,
        "indeed": false
    },
    {
        "number": 4019,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    edges = {}\n    for i in range(1, len(stdin)+1):\n        stdin = stdin.split(sep=' ')\n        v1, v2, v3 = map(int, stdin[0].split(' '))\n        u1, u2, u3 = map(int, stdin[1].split(' '))\n        if u2-u1 == v3-v1:\n            edges[(v1, v3)] = (u1, u3)\n        if u3-u1 == v2-v1:\n            edges[(v2, v3)] = (u2, u3)\n    return 'YES' if len(edges) == 0 else 'NO'\n\"\"\"",
        "test": "assert solution(\"4 4 3\") == \"YES\"",
        "num_ids": 2473,
        "indeed": false
    },
    {
        "number": 4020,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = map(int, stdin.split())\n    h_2, m_2 = map(int, stdin.split())\n    h_3 = h_1 + h_2 - ((h_1 + h_2) // 2)\n    m_3 = m_1 + m_2 - ((m_1 + m_2) // 2)\n    print(h_3, m_3)\n    return \":\".join([str(h_3), str(m_3)])\n\n-----Constraints-----\n1 <= stdin.length <= 4\n0 <= stdin[i] <= 99\n1 <= m_1, m_2, h_1 <= 23\nh_1 <= h_2 <= 23\nm_1 < m_2 < 59\n1 <= h_3 <= 23\n\n-----See Also-----\nhttps://programmers.co.kr/learn/courses/30/lessons/42860\n'''\n\ndef",
        "test": "assert solution(\"01:02\") == \"02:02\"",
        "num_ids": 1545,
        "indeed": false
    },
    {
        "number": 4021,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    prime_array = [True] * N\n    if N == 2 or N == 3:\n        prime_array[0] = False\n    else:\n        prime_array[1] = False\n    for i in range(2, int(math.sqrt(N))):\n        if prime_array[i] == True:\n            for j in range(i*2, N+1, i):\n                prime_array[j] = False\n    if N == 2:\n        return '2'\n    for i in range(3, N):\n        if prime_array[i] == True:\n            for j in range(i*2, N+1, i):\n                prime_array[j] = False\n    if N == 3:\n        return '3'\n    for i in range(4, N):\n        if prime_array[i] == True:\n            for j in range(i*2, N+1, i):\n                prime_array[j] = False\n    for i in range(5, N):\n        if prime_array[i] == True:\n            for j in range(i*2, N+1, i):\n                prime_array[j] = False\n    return str(sum(prime_array))\n\n-------------------------------\n'''\n",
        "test": "assert solution(",
        "num_ids": 2668,
        "indeed": false
    },
    {
        "number": 4022,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, lines = [int(x) for x in stdin.split()]\n    \n    for i in range(n):\n        \n        lines.remove(i)\n    \n    \n    \n    for i in range(n):\n        print(i+1, lines)\n        \n        # if i > n-1:\n        #     break\n        #\n        # if i+2 < n and lines[i+1] == lines[i+2]:\n        #     lines.remove(i+2)\n        #\n        #     if i == n-1:\n        #         break\n        #     \n        #     if i+2 < n and lines[i+2] == lines[i+1]:\n        #         lines.remove(i+2)\n        #         print(lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print(i)\n        #         print(i+2)\n        #         print(i+1, lines)\n        #         print",
        "test": "assert solution(\"3 6\") == \"1\"",
        "num_ids": 2371,
        "indeed": false
    },
    {
        "number": 4023,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if int(stdin.strip()) == len(stdin.split()) else \"NO\"\n\ndef",
        "test": "assert solution(\"1 2\") == \"NO\"",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    string = stdin.split()\n    ans = 0\n    s = set()\n    for i in range(n):\n        s.add(string[i])\n    for i in range(n, n + k):\n        if len(s) == 0:\n            ans = -1\n            break\n        for j in range(len(s)):\n            t = string[i - j]\n            if t in s:\n                s.remove(t)\n                ans = max(ans, i - j + 1)\n                break\n    return str(ans)\n",
        "test": "assert solution(stdin) == -1",
        "num_ids": 2565,
        "indeed": false
    },
    {
        "number": 4025,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    import collections\n\n    n, a, b, c = map(int, stdin.split())\n    items = [int(i) for i in stdin.split()]\n    item_count = collections.Counter(items)\n    max_count = max(item_count.values())\n    new_count = [x for x in range(max_count+1)]\n    answer = 0\n\n    while True:\n        if len(new_count) == a:\n            break\n\n        while True:\n            if new_count[b] + new_count[c] + a < max_count:\n                new_count[b] += new_count[c]\n                new_count[c] = new_count[b]\n                answer += 1\n                b = (b-1) % n\n            elif new_count[b] + new_count[c] + a > max_count:\n                new_count[b] += new_count[c]\n                new_count[c] = new_count[b]\n                answer += 1\n                c = (c-1) % n\n            elif new_count[b] + new_count[c] + a == max_count:\n                break\n            else:\n                break\n    return str(answer)\n\n\nprint(solution(\"2 1 1\"))\nprint(solution(\"3 2 2\"))\nprint(solution(\"1 100 1\"))\nprint(solution(\"30 20 10\"))\nprint(solution(\"30 20 10\"))\n",
        "test": "assert solution(stdin) == \"7\"",
        "num_ids": 2579,
        "indeed": false
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    \n    # parse inputs\n    t = int(stdin.split()[1])\n    n = int(stdin.split()[2])\n    m = int(stdin.split()[3])\n\n    # construct a symmetric matrix and store in variable\n    matrix = [[0] * (n + 2) for _ in range(n + 2)]\n    for i in range(n):\n        for j in range(n):\n            matrix[j][j+1] = matrix[i][j+1] = matrix[i+1][j] = matrix[i+1][j+1] = int(stdin.split()[i+2])\n    \n    # construct the symmetric matrix\n    for i in range(1, n + 1):\n        matrix[i][i] = matrix[i][i] + matrix[i][i-1]\n        matrix[i][n] = matrix[i][n] + matrix[i][n-1]\n\n    # find the diagonal elements of the matrix\n    # while a diagonal element does not belong to the diagonal of the matrix, take it\n    diagonal_elements = []\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == matrix[i][j] and matrix[i][j]!= 0:\n                diagonal_elements.append(matrix[i][j])\n            elif matrix[i][j] == 0:\n                diagonal_elements.append(0)\n            else:\n                raise Exception(\"Matrix is not symmetric.\")\n    \n    # find the upper triangle elements\n    upper_triangle_elements = []\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == matrix[i][j] and matrix[i][j]!= 0:\n                upper_triangle_elements.append(matrix[i][j])\n            elif matrix[i][j] == 0:\n                upper_triangle_elements.append(0)\n            else:\n                raise Exception(\"Matrix is not symmetric.\")\n    \n    # find the lower triangle elements\n    lower_triangle_elements = []\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == matrix[i][j] and matrix[i][j]!= 0:\n                lower_triangle_elements.append(matrix[i][j])\n            elif matrix[i][j] == 0:\n                lower_triangle_elements.append(0)\n            else:\n                raise Exception(\"Matrix is not symmetric.\")\n    \n    # find the left triangle elements\n    left_triangle_elements = []\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] == matrix[i][j] and matrix[i][j]!= 0:\n                left_triangle_elements.append(matrix[i][j])\n            elif matrix[i][j] == 0:\n                left_triangle_elements.append(0)\n            else:\n                raise Exception(\"Matrix is not symmetric.\")\n    \n    # find the right triangle elements\n    right_triangle_elements = []\n    for i in range(n):\n        for j in range(n-1, i, -1):\n            if matrix[i][j] == matrix[i][j] and matrix[i][j]!= 0:\n                right_triangle_elements.append(matrix[i][j])\n            elif matrix[i][j] == 0:\n                right_triangle_elements.append(0)\n            else:\n                raise Exception(\"Matrix is not symmetric.\")\n    \n    # find the parallelogram elements\n    parallelogram_elements = []\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == matrix[i][j] and matrix[i][j]!= 0:\n                parallelogram_elements.append(matrix[i][j])\n            elif matrix[i][j] == 0:\n                parallelogram_elements.append(0)\n            else:\n                raise Exception(\"Matrix is not symmetric.\")\n    \n    # find the triangle elements\n    triangle_elements = []\n    for i in range(n):\n        for j in range(n-1):\n            if matrix[i][j] == matrix[i][j] and matrix[i][j]!= 0:\n                triangle_elements.append(matrix[i][j])\n            elif matrix[i][j] == 0:\n                triangle_elements.append(0)\n            else:\n                raise Exception(\"Matrix is not symmetric.\")\n    \n    # find the special square elements",
        "test": "assert solution(stdin) == \"NO\"",
        "num_ids": 2764,
        "indeed": false
    },
    {
        "number": 4027,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    if n == 1:\n        print(0)\n        return\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    sum_ = sum(A) - sum(B)\n    if sum_ % 2 == 0:\n        print(0)\n        return\n    l = len(A)\n    if l == 1:\n        print(s)\n        return\n    print(min(abs(s-sum_), l-sum_))\n    return\n\n-----Modifications-----\n\nn = int(input())\nsolution(input().split())\n",
        "test": "assert solution('4') == 1",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 4028,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    ans = 0\n    mod = 10**9+7\n    \n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == '(':\n                if s[j] == ')':\n                    if s[i+1] == '(':\n                        ans += 1\n                else:\n                    ans += 1\n            else:\n                ans += 1\n    return str(ans%mod)\n",
        "test": "assert solution(())",
        "num_ids": 1189,
        "indeed": false
    },
    {
        "number": 4029,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 25:\n        return -1\n    if n % 25 == 0:\n        return 1\n    def search(n):\n        possibilities = 0\n        while True:\n            move = 0\n            for i in range(1, n):\n                if i % 25 == 0 and i % 2 == 0:\n                    move += 1\n                elif i % 25 == 0 and i % 2!= 0:\n                    move += 1\n            if move > 0:\n                possibilities += 1\n            else:\n                break\n        return possibilities\n    while n % 25!= 0:\n        n -= 1\n    return search(n)\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == -1",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 4030,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = stdin\n    nums = list(map(int, s))\n    res = 0\n    i = 0\n    # print(nums)\n    while i < len(nums):\n        j = i + 1\n        while j < len(nums):\n            if nums[i] > nums[j]:\n                res += 1\n                nums[i], nums[j] = nums[j], nums[i]\n            j += 1\n        i += 1\n    return str(res)\n",
        "test": "assert solution('a'), \"string is not sorted\"",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 4031,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [input() for _ in range(n)]\n    a.sort()\n    b = [input() for _ in range(n)]\n    b.sort()\n    a = [list(i) for i in a]\n    b = [list(i) for i in b]\n    c = []\n    for i in range(1, n):\n        for j in range(i):\n            if a[i][j]!= b[j][i]:\n                break\n        else:\n            if len(a[i]) == len(b[i]):\n                c.append(a[i])\n                c.append(b[i])\n            else:\n                c.append(a[i])\n                c.append(b[i][:len(a[i]) - len(b[i])])\n                c.append(b[i][len(a[i]) - len(b[i]):])\n    for i in c:\n        print(''.join(i))\n    return 'YES'\n'''\nclass Solution:\n    def reorderString(self, s: str) -> str:\n        '''\n        Modify your solution so that you do not need to sort the substrings that\n        are not consecutive.\n        '''\n        a = []\n        for i in range(1, len(s)):\n            if s[i] == s[i-1] and s[i]!= s[i-1]:\n                a.append(s[i-1])\n                a.append(s[i])\n                a.append(s[i])\n            elif s[i] == s[i-1] and s[i] == s[i-2] and s[i-2] == s[i-1]:\n                continue\n            else:\n                break\n        a.sort()\n        b = []\n        for i in range(len(s)):\n            if s[i] == a[i] or s[i] == a[i] + a[i+1] or s[i] == a[i] + a[i+1]:\n                b.append(s[i])\n        a = [list(i) for i in a]\n        for i in range(len(a)):\n            a[i] = a[i] + a[i+1]\n        a = [list(i) for i in a]\n        return ''.join(a)\n",
        "test": "assert solution(5, \"qwerty\") == \"NO\"",
        "num_ids": 1853,
        "indeed": false
    },
    {
        "number": 4032,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n = n + 1\n    start = 0\n    end = n - 1\n    max = 0\n    while start <= end:\n        mid = (start + end) // 2\n        if solve(mid, n, k):\n            max = mid\n            end = mid - 1\n        else:\n            start = mid + 1\n    return str(max)\n\ndef",
        "test": "assert solution(",
        "num_ids": 1479,
        "indeed": false
    },
    {
        "number": 4033,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    tile_pairs = []\n    for _ in range(N):\n        tile_pairs.append(map(int, stdin.split()))\n\n    min_perimeter = 0\n    for pair in tile_pairs:\n        for x in range(pair[0], pair[0] + pair[1]):\n            for y in range(pair[1], pair[1] + pair[2]):\n                if (x + y) % 2 == 0:\n                    min_perimeter += 1\n    return str(min_perimeter)\n\n'''",
        "test": "assert solution('5 6') == '14'",
        "num_ids": 2432,
        "indeed": false
    },
    {
        "number": 4034,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    \n    s = ''.join([chr(ord(x) + 2) for x in stdin.strip()])\n    \n    s_new = ''\n    \n    for x in s:\n        if x not in 'abcdefghijklmnopqrstuvwxyz':\n            continue\n        s_new += x\n        \n    if s_new == 'ababecdefg':\n        return 'YES'\n    else:\n        return 'NO'",
        "test": "assert solution(\"8\") == \"NO\"",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 4035,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    p1, p2 = map(int, stdin.split())\n    A = p1\n    B = p2\n    diff = (A - B) // 100\n    if A < B:\n        A, B = B, A\n        diff = diff // 2\n    for i in range(diff):\n        print((A // (2 ** i)).__round__())\n    return '-1'\n\n-----Solution-----\n\n------\n1. N, p = map(int, input().split())\nN = str(N)\nN = list(N)\np = str(p)\nN.sort()\n",
        "test": "assert solution(\"3 5\") == 3",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 4036,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    \n    x = [int(x) for x in stdin.split()]\n    n, k = x[0], x[1]\n    \n    if n > k:\n        print(\"NO\")\n        return\n    \n    if n == 1:\n        print(\"YES\")\n        print(x[0])\n        return\n    \n    for i in range(n-1):\n        a = (n+1) // k\n        a -= 1\n        print(a)\n        \n        if a >= 1 and a < k:\n            print(x[0])\n            break\n        else:\n            print(\"NO\")\n            return\n        \n    else:\n        print(\"YES\")\n        print(x[0])\n        return\n",
        "test": "assert solution(\"23 11 21 24 33\") == \"YES\"",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 4037,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    answer = [i for i in range(1, n + 1)]\n    i = 0\n    while r > 0:\n        a.sort()\n        for j in a:\n            if i < n:\n                i += 1\n                answer[j - 1] -= j\n                r -= j\n                answer.insert(i, -j)\n        r -= a[n]\n    return str(len(set(answer)))\n",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 4038,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[0 for x in range(n)] for x in range(n)]\n    print(matrix)\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = stdin[i*m+j]\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = matrix[i][j].split(\" \")\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = int(matrix[i][j])\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = int(matrix[i][j])\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = int(matrix[i][j])\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = int(matrix[i][j])\n    print(matrix)\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = str(matrix[i][j])\n    print(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"Y\":\n                matrix[i][j] = \"YES\"\n            else:\n                matrix[i][j] = \"NO\"\n    print(\" \".join(matrix[0]))\n    return \" \".join(matrix[0])\n\nInput\n4\n1 8 8 1 2 2 2 2 2 2 2 2 2 1 8 8 1\n\nOutput\nYES\n1 3 1\n3 1 3\n1 3 1\n\nInput\n4\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\n\nOutput\nNO\n\nInput\n1\n10\n\nOutput\nYES\n10 \n'''\ndef",
        "test": "assert solution(stdin) == \"NO\"",
        "num_ids": 1356,
        "indeed": false
    },
    {
        "number": 4039,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n,r=map(int,stdin.split())\n    # d=dict(map(int,stdin.split()))\n    # r=d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    # d=dict(map(int,stdin.split()))\n    # r=d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    if r<0:\n        return \"NO\"\n    # d=dict(map(int,stdin.split()))\n    # r=d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # d=dict(map(int,stdin.split()))\n    # r=d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # d=dict(map(int,stdin.split()))\n    # r=d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # if r<0:\n    #     return \"NO\"\n    \n    # d=dict(map(int,stdin.split()))\n    # r=d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # d=dict(map(int,stdin.split()))\n    # r=d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # d=dict(map(int,stdin.split()))\n    # r=d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # d=dict(map(int,stdin.split()))\n    # r=d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # d=dict(map(int,stdin.split()))\n    # r=d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO\"\n    \n    # r=r+d.get(\"r\",0)\n    # if r<0:\n    #     return \"NO",
        "test": "assert solution(\"2 -2\") == \"NO\"",
        "num_ids": 3598,
        "indeed": false
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c_i = list(map(int, stdin.split()))\n    a = [0 for _ in range(n+1)]\n    for _ in range(m):\n        p_i = list(map(int, stdin.split()))\n        i = p_i[0]\n        j = p_i[1]\n        if i < n:\n            i = i + d\n            a[i] = j\n            \n    a_max = max(a)\n    a_min = min(a)\n    \n    while a_max > a_min:\n        if a_max == 0:\n            a_max = n\n        elif a_min == 0:\n            a_min = n\n        i = a_max - d\n        j = a_min + d\n        if j < n:\n            if i < n:\n                i = i + d\n            if j < n:\n                j = j + d\n            a[i] = j\n    \n    answer = []\n    for i in range(n):\n        answer.append(a[i])\n    return ''.join(map(str, answer))\n",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 1603,
        "indeed": false
    },
    {
        "number": 4041,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    def solution2(s: str, t: str) -> int:\n        l, r, ans = 0, 0, 0\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                if r - l > 1:\n                    l = i - r + 1\n                    r = i\n                    ans = max(ans, l)\n                else:\n                    r = i\n                    ans = max(ans, r - l)\n            else:\n                if r - l > 1:\n                    l = i - r + 1\n                    r = i\n                    ans = max(ans, l)\n        return ans\n\n    ans = 0\n    for i in range(len(stdin)):\n        if len(stdin[i]) > ans:\n            ans = len(stdin[i])\n    return ans\n",
        "test": "assert solution(input()) == 3",
        "num_ids": 2374,
        "indeed": false
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n = data[1]\n    b = data[2]\n    a = data[3]\n    for x in range(int(n)):\n        stdin = data[x+1]\n        if int(stdin) >= 5:\n            stdin = str(int(stdin) - 5) + stdin\n        if int(stdin) >= 3:\n            stdin = str(int(stdin) - 3) + stdin\n        if int(stdin) >= 1:\n            stdin = str(int(stdin) - 1) + stdin\n        print(stdin)\n        if int(stdin) >= 10:\n            print(int(stdin) - 10)\n        if int(stdin) >= 2:\n            print(int(stdin) - 2)\n        if int(stdin) >= 1:\n            print(int(stdin) - 1)\n        if int(stdin) >= 0:\n            print(int(stdin) - 0)\n        if int(stdin) == 0:\n            print(0)\n        print()\n    return str(int(stdin))\n\n\n-----Constraints-----\n1 <= n <= 105\n\n\n-----Time complexity-----\nO(N)\n\n\n-----Space complexity-----\nO(1)\n\n\n-----Constraints for Java and C++-----\n1 <= stdin.length <= 105\n\n\n-----Note: You can assume that the input will always contain exactly 6 digits.\n\n-----Example 1: Input:\n3.5\n\nOutput:\n3 2\n\nExample 2: Input:\n1.999999\n\nOutput:\n1 3\n\n-----Solution-----\n1.10001\n\n-----Constraints-----\n1 <= x <= 99\n\n\n-----Example 3: Input:\n2\n\nOutput:\n2 1\n\nExample 4: Input:\n100\n\nOutput:\n1 1\n\n\n-----Solution-----\n1.10001\n\n1.10001\n",
        "test": "assert solution(\"6.0\") == 2",
        "num_ids": 1079,
        "indeed": false
    },
    {
        "number": 4043,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    edges = {}\n    for _ in range(n - 1):\n        edges[stdin.split()[i]] = stdin.split()[i + 1]\n    edges = dict(sorted(edges.items(), key=lambda x: x[0]))\n    edges = set(edges.keys())\n    res = 0\n    while edges:\n        for i in edges:\n            if len(edges[i]) == 1:\n                res += 1\n            else:\n                res += len(edges[i])\n                if i in edges and i in edges[i]:\n                    edges.remove(i)\n                else:\n                    edges.remove(i)\n    if res < d:\n        return \"NO\"\n    elif res >= k:\n        print(f\"YES\")\n    else:\n        print(f\"YES {res - k}\")\n",
        "test": "assert solution(input()) == 'YES'",
        "num_ids": 1083,
        "indeed": false
    },
    {
        "number": 4044,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = a[:m] + list(map(int, stdin.split()))\n    s = [x] + a + b\n    \n    if s[0] - s[1] == 1:\n        return s[0]\n    else:\n        return '1' + solution(s)\n",
        "test": "assert solution(input
        "num_ids": 4111,
        "indeed": false
    },
    {
        "number": 4045,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    \n    if n == s or n == t: return \"NO\"\n    \n    string = str()\n    \n    for i in range(n):\n        string += s[i] + t[i]\n        string += 'a' * (n - i - 1)\n        string += 'b' * (n - i - 1)\n        string += 'c' * (n - i - 1)\n        \n    string = string.replace('a', 'b').replace('b', 'a')\n    string = string.replace('c', 'a').replace('a', 'c').replace('c', 'b')\n    string = string.replace('c', 'b').replace('b', 'c').replace('b', 'a')\n    \n    if string == s * n: return \"YES\"\n    \n    return \"NO\"",
        "test": "assert solution([\"a\", \"a\", \"c\"]) == \"YES\"",
        "num_ids": 1245,
        "indeed": false
    },
    {
        "number": 4046,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = map(int, stdin.split())\n    answer = []\n    for i in range(n):\n        answer.append(q[i] - q[i+1])\n    answer.sort()\n    if not answer:\n        return '-1'\n    return''.join([str(i) for i in answer[0:n-1]])\n",
        "test": "assert solution(stdin) == '1 1 1 1'",
        "num_ids": 2470,
        "indeed": false
    },
    {
        "number": 4047,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    x = 0\n    y = 0\n    for i in range(len(stdin)):\n        x += int(stdin[i])\n        y += int(stdin[i])\n        if x == y:\n            x -= 1\n            y -= 1\n            break\n        if x == y:\n            y -= 1\n            x -= 1\n            break\n    return str(x) + \" \" + str(y)\n    \n",
        "test": "assert solution(\"5 2 2 3 2\"), \"1\"",
        "num_ids": 2187,
        "indeed": false
    },
    {
        "number": 4048,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    if n < 1 or n > 10 ** 9:\n        return \"NO\"\n    elif n == 1:\n        return \"NO\"\n    nums = list(map(int,stdin.split()))\n    d = [1,2,3,4,5]\n    index = 0\n    res = 0\n    for i in range(1,len(nums)):\n        j = nums[i] - 1\n        if index == len(d):\n            index = 0\n            res += 1\n        elif index >= len(d):\n            index = 0\n        if i+j <= len(nums):\n            index += 1\n            if nums[i+j] == nums[i]:\n                index += 1\n            else:\n                res += 1\n    return str(res)\n\n(2,5)",
        "test": "assert solution(10) == 5",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 4049,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3 = map(int, stdin.split())\n    b_1, b_2, b_3 = map(int, stdin.split())\n    a_1 = a_1 + a_3\n    a_2 = a_2 + a_3\n    a_3 = a_3 + a_2\n    b_1 = b_1 + b_3\n    b_2 = b_2 + b_3\n    b_3 = b_3 + b_2\n    if a_1 >= b_1:\n        return 'Alice'\n    elif a_1 >= b_2:\n        return 'Alice'\n    elif a_1 >= b_3:\n        return 'Bob'\n    else:\n        return 'Bob'\n",
        "test": "assert solution(stdin) == \"0 15\"",
        "num_ids": 971,
        "indeed": false
    },
    {
        "number": 4050,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(x) for x in stdin.strip().split(' ')]\n    k = 1\n    while True:\n        if len(set(a)) == len(a):\n            return 'YES'\n        if a[0] < a[-1]:\n            a = a[1:]\n            k += 1\n        else:\n            a = a[1:]\n            k -= 1\n        if k == 0:\n            return 'NO'",
        "test": "assert solution(\"11\"), \"Invalid Input\"",
        "num_ids": 2018,
        "indeed": false
    },
    {
        "number": 4051,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    def get_stack(i, stack):\n        if i == len(stack):\n            return []\n        return [stack[i]] + get_stack(i+1, stack)\n\n    return 'YES' if all([all([stack[i] < stack[i+1] for i in range(len(stack)-1)]) for stack in get_stack(0, [])]) else 'NO'\n\n\n\"\"\"\nHere is the solution from the discussion on a website:\nhttps://www.hackerrank.com/challenges/slices/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=solutions\n\n\n\"\"\"",
        "test": "assert solution(\"5\") == \"YES\"",
        "num_ids": 2122,
        "indeed": false
    },
    {
        "number": 4052,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    s, t = map(lambda x: x.lower(), [s, t])\n    s = sorted(s)\n    for i in range(len(s)-2):\n        for j in range(i+1, len(s)):\n            c = s[i]\n            k = s[j]\n            s[i] = s[j]\n            s[j] = c\n            print(k)\n            t = s\n            if solution(stdin):\n                return t\n            s[i], s[j] = c, t[i]\n    return \"1\"\n\nprint(solution(stdin))",
        "test": "assert solution(\"abc\") == \"cde\"",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 4053,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split('\\n')\n    string = list(map(str.strip, string))\n    n = int(string[0])\n    string = string[1:]\n    for i in range(len(string)):\n        string[i] = string[i].lower()\n    string = list(map(str.lower, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.strip, string))\n    string = list(map(str.lower, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.upper, string))\n    string = list(map(str.lower, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.upper, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.upper, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n    string = list(map(str.capitalize, string))\n",
        "test": "assert solution(stdin) == \"S\"",
        "num_ids": 1963,
        "indeed": false
    },
    {
        "number": 4054,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    # Split the string in two lists.\n    a, b = stdin.split(\" \")\n\n    # Split a by, and b by,\n    a = a.split(\",\")\n    b = b.split(\",\")\n\n    # Convert to an integer.\n    a = int(a[0])\n    b = int(b[0])\n\n    # Calculate the largest of the two numbers.\n    return max(a, b)\n\n\n    # Time complexity: O(n).\n    # Space complexity: O(1).\n",
        "test": "assert solution(\"1 2 3 4 5\") == \"2\"",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 4055,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(len(list(set(map(int, list(stdin.split()))) - {0, 1}))) + 1)\n\ndef",
        "test": "assert solution([\"10\", \"1 1 1 1\"]) == \"1\"",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 4056,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(i) for i in stdin.split()]\n    arr = sorted(set(map(int, a)))\n    for num in arr:\n        if num % num == 0:\n            print(num)\n            return\n    return\n-----Constraints-----\n1 <= n <= 10^5\n0 <= a_i < 10^4\nn is always an integer\n\nTime Limit: O(n)\nSpace Limit: O(n)\n\n-----Personal Information-----\nIn this problem, there is one figure.\nThe array is sorted.\nThe answer will be the number of such common divisors.\n'''\ndef",
        "test": "assert solution(stdin) == 2",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 4057,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(i) for i in stdin.split()]\n    a_sorted = sorted(a)\n    pocket = []\n    for i in range(n):\n        pocket.append(a_sorted[i] - a_sorted[i+1])\n    return str(min(pocket))\n",
        "test": "assert solution(1, [1, 4, 4]) == 1",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 4058,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    heaters = list(map(int, stdin.split()))\n    heaters.sort()\n    i = 1\n    heaters_set = set(heaters)\n    while i < n and len(heaters_set) < r:\n        if i + 1 in hearts_set:\n            heaters_set.remove(i + 1)\n        if i + 1 in list(range(len(heaters))):\n            heaters_set.remove(i + 1)\n        heaters[i] = 1\n        heaters_set.add(i + 1)\n        i += 1\n    if len(heaters_set) == r:\n        return '0'\n    elif len(heaters_set) == r and r == 1:\n        return '0'\n    elif len(heaters_set) == r:\n        return '1'\n    elif len(heaters_set) == r:\n        return '1'\n    elif len(heaters_set) == r:\n        return '1'\n    else:\n        return -1\n",
        "test": "assert solution(\"3 3 3 3 3 3 3 3 3 3 3\") == \"3\"",
        "num_ids": 1289,
        "indeed": false
    },
    {
        "number": 4059,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    Answer = 0\n    for i in range(1, N+1):\n        Answer += i\n        for j in range(1, N+1):\n            Answer += j\n    return str(Answer)",
        "test": "assert solution(\"1\") == \"2\"",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 4060,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    brackets = []\n    for line in stdin:\n        if line == ')':\n            if brackets[-1] == '(':\n                brackets.pop()\n            else:\n                brackets.append(')')\n        elif line == '(':\n            brackets.append(')')\n        else:\n            if brackets[-1] == '(':\n                brackets.pop()\n            else:\n                brackets.append(')')\n    return ''.join(brackets)",
        "test": "assert solution(stdin) == 1, \"solution failed\"",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 4061,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    \n    def split_str(st):\n        # Split string into a list of strings\n        return [st[i:i+10] for i in range(0, len(st), 10)]\n    \n    # Now we're going to find the longest substring of $s$ which is contiguous and then remove all that from $s$\n    # This is a good way to find the longest substring.\n    # Time complexity: O(n * log(n))\n    # Space Complexity: O(n)\n    \n    def get_longest_substring(s):\n        s = list(s)\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if (i < len(s) and\n                        s[i] == s[j] and\n                        s[i]!= s[j]):\n                    s[i], s[j] = s[j], s[i]\n                    break\n        return ''.join(s)\n        \n    def get_longest_substring_2(s):\n        # dp[i] = the longest substring of $s_i$ which is contiguous and is a substring of $s_i$\n        # i = 0,..., len(s)\n        # dp[i][j] = longest substring of $s_j$ which is contiguous and is a substring of $s_j$\n        dp = [[0 for _ in range(len(s))] for _ in range(len(s))]\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if (i < len(s) and\n                        s[i] == s[j] and\n                        s[i]!= s[j]):\n                    dp[i][j] = dp[i][j-1] + 1\n                else:\n                    dp[i][j] = 0\n        return ''.join([''.join(str(i)) for i in dp])\n    \n    s = stdin.strip()\n    t = split_str(s)\n    \n    longest = 0\n    i = 0\n    while i < len(s):\n        curr_len = 0\n        for j in range(i, len(s)):\n            if s[i:j] == t[i:j]:\n                curr_len += 1\n                if curr_len > longest:\n                    longest = curr_len\n        i += 1\n    \n    return longest\n",
        "test": "assert solution('asdfasdf') == 0",
        "num_ids": 1482,
        "indeed": false
    },
    {
        "number": 4062,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n  a,b,c,d = [int(i) for i in stdin.split()]\n  x,y = min(a,b,c,d), max(a,b,c,d)\n  if x*y==x*d or x*y==y*d:\n    return str(x*y)\n  else:\n    return \"Not Possible\"\n\nSolution\nInput\n5 1 1\nOutput\n4\n3\n\nInput\n5 2 1\nOutput\n2\n3\n\n\"\"\"\n\n\"\"\"\n\nProblem:\n\nGiven are integers a,b,c and d.\nIf x and y are integers and a \\leq x \\leq b and c\\leq y \\leq d hold, what is the maximum possible value of x \\times y?\n\n-----Constraints-----\n - -10^9 \\leq a \\leq b \\leq 10^9\n - -10^9 \\leq c \\leq d \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na b c d\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n1 2 1 1\n\n-----Sample Output-----\n1\n\nIf x = 1 and y = 1 then x \\times y = 1.\nIf x = 2 and y = 1 then x \\times y = 2.\nTherefore, the answer is 2.\ndef",
        "test": "assert solution(stdin) == '2'",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 4063,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d_list = stdin.strip().split()\n    d_list = [int(i) for i in d_list]\n    k = int(d_list[0])\n    if k % 2 == 0:\n        for i in range(k, n + 1, 2):\n            if i > n:\n                return 'Error'\n            print(i)\n    else:\n        for i in range(k, n + 1, 2):\n            if i > n:\n                return 'Error'\n            print(i)\n    return 'Success'\n\nInput\n\n2\n1 2 3 4\n\nOutput\n\n2\nError\n\nInput\n\n6\n9 1 4 4 6 7\n\nOutput\n\n2\n\nInput\n\n2\n3 4 5 6\n\nOutput\n\n2\n\nInput\n\n2\n1 2 3 4\n\nOutput\n\nError\n\nInput\n\n3\n2 2 2 2\n\nOutput\n\nError\n\nInput\n\n6\n9 1 4 4 6 7\n\nOutput\n\n2\n\nInput\n\n2\n2 2 2 2\n\nOutput\n\n2\n\nInput\n\n2\n5 5 4 6\n\nOutput\n\n2\n\nInput\n\n3\n1 2 3 4\n\nOutput\n\n2\n\nInput\n\n1 1 2 3 4\n\nOutput\n\n2\n\nInput\n\n1\n1 2 3 4\n\nOutput\n\nError\n\nInput\n\n1\n1 2 3 4\n\nOutput\n\nError\n\nInput\n\n1\n1 1 2 3 4\n\nOutput\n\n3\n\nInput\n\n1 1 2 3 4\n\nOutput\n\nError\n\nInput\n\n4\n4 4 4 4 4\n\nOutput\n\n5\n\nInput\n\n3\n1 2 2 2\n\nOutput\n\nError\n\nInput\n\n5\n1 1 2 2\n\nOutput\n\n5\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.strip())\n        d_list = stdin.strip().split()\n        d_list = [int(i) for i in d_list]\n        k = int(d_list[0])\n        if k % 2 == 0:\n            for i in range(k, n + 1, 2):\n                if i > n:\n                    return 'Error'\n                print(i)\n        else:\n            for i in range(k, n + 1, 2):\n                if i > n:\n                    return 'Error'\n                print(i)\n        return 'Success'\n",
        "test": "assert solution(\"1 2 3 4 5 6 7\") == \"1 2 3 4 5 6 7\"",
        "num_ids": 2799,
        "indeed": false
    },
    {
        "number": 4064,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = list(map(int, stdin.split()))\n    print(n)\n    print(l)\n    print(r)\n    answer = 0\n    for i in range(n):\n        answer = max(answer, (i+l+r+1)//2)\n    print(answer)\n    return str(answer)\n",
        "test": "assert solution(\"1 2 3\") == \"3\"",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 4065,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    for i in range(n):\n        a = list(map(int, stdin.split()))\n        \n        if len(a) < 3:\n            continue\n        \n        if max(a) < a[0] or max(a[1:]) < a[0] or max(a[2:]) < a[1] or max(a[3:]) < a[2]:\n            continue\n        \n        sum_a = sum(a)\n        a.sort()\n        \n        if sum_a == 0:\n            return 1\n        \n        if sum_a == 1:\n            return sum(a)\n        \n        if sum_a == 2:\n            return sum(a)\n        \n        if sum_a == 3:\n            return sum(a)\n        \n        if sum_a == 4:\n            return sum(a)\n    \n    return 0\n\ndef",
        "test": "assert solution(\"1 2 3 4 5 6 7 10 21 23 24 49\") == \"4\"",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 4066,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    if a == b == c == d:\n        return '1'\n    elif a > b > c > d:\n        return str(a // b * b) +'' + str(c // d * d)\n    elif a > b > c > d:\n        return str(a // b * b) +'' + str(c // d * d)\n    elif a > b > c > d:\n        return str(a // b * b) +'' + str(c // d * d)\n    else:\n        return str(a // b * b) +'' + str(c // d * d)\n",
        "test": "assert solution('4 10 3 2'), '3'",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 4067,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    \n    if n % 3!= 0 or (n % 3 == 0 and s == '0'):\n        return ''\n    \n    dic = {'0': '0', '1': '1', '2': '2'}\n    \n    ans = '0'\n    min_num = 0\n    \n    for c in s:\n        ans = ans + dic[c]\n        if ans == '0' * n:\n            min_num += 1\n            \n    if min_num == n:\n        return ans\n    else:\n        return ''\n",
        "test": "assert solution(stdin) == \"211200\"",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    # print(N, M)\n    # print(stdin, N, M)\n    if (N < 2):\n        return str(N)\n    if (N < 4):\n        return \"\".join(map(str, range(N, N + 4)))\n    if (N < 5):\n        return \"\".join(map(str, range(N, N + 2)))\n    if (N < 6):\n        return \"\".join(map(str, range(N, N + 3)))\n    if (N < 7):\n        return \"\".join(map(str, range(N, N + 4)))\n    if (N < 8):\n        return \"\".join(map(str, range(N, N + 5)))\n    if (N < 9):\n        return \"\".join(map(str, range(N, N + 6)))\n    if (N < 10):\n        return \"\".join(map(str, range(N, N + 7)))\n    if (N < 11):\n        return \"\".join(map(str, range(N, N + 8)))\n    if (N < 12):\n        return \"\".join(map(str, range(N, N + 9)))\n    if (N < 13):\n        return \"\".join(map(str, range(N, N + 10)))\n    if (N < 14):\n        return \"\".join(map(str, range(N, N + 11)))\n    if (N < 15):\n        return \"\".join(map(str, range(N, N + 12)))\n    if (N < 16):\n        return \"\".join(map(str, range(N, N + 13)))\n    if (N < 17):\n        return \"\".join(map(str, range(N, N + 14)))\n    if (N < 18):\n        return \"\".join(map(str, range(N, N + 15)))\n    if (N < 19):\n        return \"\".join(map(str, range(N, N + 16)))\n    if (N < 20):\n        return \"\".join(map(str, range(N, N + 17)))\n    if (N < 21):\n        return \"\".join(map(str, range(N, N + 18)))\n    if (N < 22):\n        return \"\".join(map(str, range(N, N + 19)))\n    if (N < 23):\n        return \"\".join(map(str, range(N, N + 20)))\n    if (N < 24):\n        return \"\".join(map(str, range(N, N + 21)))\n    if (N < 25):\n        return \"\".join(map(str, range(N, N + 22)))\n    if (N < 26):\n        return \"\".join(map(str, range(N, N + 23)))\n    if (N < 27):\n        return \"\".join(map(str, range(N, N + 24)))\n    if (N < 28):\n        return \"\".join(map(str, range(N, N + 25)))\n    if (N < 29):\n        return \"\".join(map(str, range(N, N + 26)))\n    if (N < 30):\n        return \"\".join(map(str, range(N, N + 27)))\n    if (N < 31):\n        return \"\".join(map(str, range(N, N + 28)))\n    if (N < 32):\n        return \"\".join(map(str, range(N, N + 29)))\n    if (N < 33):\n        return \"\".join(map(str, range(N, N + 30)))\n    if (N < 34):\n        return \"\".join(map(str, range(N, N + 31)))\n    if (N < 35):\n        return \"\".join(map(str, range(N, N + 32)))\n    if (N < 36):\n        return \"\".join(map(str, range(N, N + 33)))\n    if (N < 37):\n        return \"\".join(map(str, range(N, N + 34)))\n    if (N < 38):\n        return \"\".join(map(str, range(N, N + 35)))\n    if (N < 39):\n        return \"\".join(map(str, range(N, N + 36)))\n    if (N < 40):\n        return \"\".join(map(str, range(N, N + 37)))\n    if (N < 41):\n        return \"\".join(map(str, range(N, N + 38)))\n    if (N < 42):\n        return \"\".join(map(str, range(N, N + 39)))\n    if (N < 43):\n        return \"\".join(map(str, range(N, N + 40)))\n    if (N < 44):\n        return \"\".join(map(str, range(N, N + 41)))\n    if (N < 45):\n        return \"\".join(map(str, range(N, N + 42)))\n    if (N < 46):\n        return \"\".join(map(str, range(N, N + 43)))\n    if (N < 47):\n        return \"\".join(map(str, range(N, N + 44)))\n    if (N < 48):\n        return \"\".join(map(str, range(N, N + 45)))\n    if (N < 49):\n        return \"\".join(map(str, range(N, N + 46)))\n    if (N < 50):\n        return \"\".join(map(str, range(N, N + 47)))\n    if (N < 51):\n        return \"\".join(map(str, range(N, N + 48)))\n    if (N < 52):\n        return \"\".join(map(str, range(N, N + 49)))\n    if (N < 53):\n        return \"\".join(map(str, range(N, N + 50)))\n    if (N < 54):\n        return \"\".join(map(str, range(N, N + 51)))\n    if (N < 55):\n        return \"\".join(map(str, range(N, N + 52)))\n    if (N < 56):\n        return \"\".join(map(str, range(N, N + 53)))\n    if (N < 57):\n        return \"\".join(map(str, range(N, N + 54)))\n    if (N < 58):\n        return \"\".join(map(str, range(N, N + 55)))\n    if (N < 59):\n        return \"\".join(map(str, range(N, N + 56)))\n    if (N < 60):\n        return \"\".join(map(str, range(N, N + 57)))\n    if (N < 61):\n        return \"\".join(map(str, range(N, N + 58)))\n    if (N < 62):\n        return \"\".join(map(str, range(N, N + 59)))\n    if (N < 63):\n        return \"\".join(map(str, range(N, N +",
        "test": "assert solution(stdin) == '8'",
        "num_ids": 2599,
        "indeed": false
    },
    {
        "number": 4069,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def read(stdin):\n        N, K, D = map(int, stdin.split())\n        n = list(map(int, stdin.split()))\n        return n, K, D\n    return solution(stdin)\n\n\n\n----------Time Complexity----------\n---Time---O(N^2 * logN)\n---Space---O(N)",
        "test": "assert solution(input()) == \"2\"",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 4070,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * 2)",
        "test": "assert solution(\"571576\") == 0",
        "num_ids": 2296,
        "indeed": false
    },
    {
        "number": 4071,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    res = \"\"\n    for i in stdin:\n        if i == \"H\":\n            res += \"h\"\n        elif i == \"M\":\n            res += \"m\"\n        elif i == \"S\":\n            res += \"s\"\n        else:\n            res += i\n    return res\n\ndef",
        "test": "assert solution(\"a\") == \"27\", \"solution should return 27\"",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 4072,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        return str(1)\n    else:\n        return str(0)\n",
        "test": "assert solution('1') == '1','solution should be True'",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 4073,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [[int(i) for i in input()] for _ in range(n)]\n    l = len(matrix)\n    ans = 0\n    for i in range(l):\n        for j in range(l):\n            ans += matrix[i][j]*matrix[j][i]\n    return str(ans)\n\nA = Solution()",
        "test": "assert solution('1 3 3 1') == '1'",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 4074,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = [1]\n    for i in range(2, k + 1):\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            res.append(i)\n    \n    return str(min(res))",
        "test": "assert solution(\"1 3\") == \"1\"",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 4075,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_i = [list(map(int, stdin.split())) for _ in range(n)]\n    p_i = [list(map(int, stdin.split())) for _ in range(m)]\n    for i in range(n):\n        for j in range(m):\n            for k in range(n):\n                for l in range(m):\n                    if p_i[j][k] == 1 and p_i[j][l] == 0:\n                        if (k_i[i][k] % 2 == 0 and k_i[i][l] % 2 == 0):\n                            p_i[j][k] = 1\n                            p_i[j][l] = 0\n                            break\n                        if (k_i[i][k] % 2!= 0 and k_i[i][l] % 2 == 0):\n                            p_i[j][k] = 1\n                            p_i[j][l] = 0\n                            break\n            if p_i[j][k] == 1:\n                return \"Yes\"\n            elif p_i[j][k] == 0:\n                return \"No\"\n    return \"No\"\n",
        "test": "assert solution(stdin) == 1",
        "num_ids": 2301,
        "indeed": false
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(",
        "num_ids": 1374,
        "indeed": false
    },
    {
        "number": 4077,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    if len(a) % 2 == 0:\n        return str(m*(m-1)/2)\n    else:\n        return str(m*a[len(a)//2])\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n\n\n-----Time Limit----\n1sec\n\n-----Bonus-----\nThe time limit is 2 seconds.\n\n### accepted example\n",
        "test": "assert solution(stdin) == '97', \"expected: 97, got: {stdin}\"",
        "num_ids": 1590,
        "indeed": false
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(x) for x in stdin.split(' ')]\n    a = [list(map(int, input().split(' '))) for _ in range(n)]\n    b = [[0 for _ in range(m)] for _ in range(n)]\n    for _ in range(q):\n        l, r, c = [int(x) for x in stdin.split(' ')]\n        c -= 1\n        if 0 <= l <= m:\n            b[l][r] = c\n        if 0 <= r <= m:\n            b[r][l] = c\n    max_min = [0, 0]\n    for j in range(n):\n        for i in range(n):\n            if 0 <= i < n:\n                for j in range(m):\n                    c = b[i][j]\n                    if c > 0:\n                        b[i][j] -= c\n                        if 0 <= i < n:\n                            if b[i][j] < max_min[0]:\n                                max_min[0] = b[i][j]\n                        if 0 <= j < m:\n                            if b[i][j] > max_min[1]:\n                                max_min[1] = b[i][j]\n    if max_min[0] > max_min[1]:\n        print(1)\n    else:\n        print(0)\n    for i in range(n):\n        print(b[i][0], b[i][1])\n\n    \n",
        "test": "assert solution(stdin) == '6'",
        "num_ids": 2078,
        "indeed": false
    },
    {
        "number": 4079,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    lst = list(stdin)\n    \n    for i in range(len(lst)):\n        lst[i] = lst[i].replace(\" \", \"\")\n        \n        for j in range(len(lst[i])):\n            if lst[i][j] == \"a\":\n                lst[i] = lst[i][0:j] + lst[i][j + 1:len(lst[i])]\n                \n    print(*lst)\n    return \"Yes\" if len(set(lst))==len(lst) else \"No\"\n    \n",
        "test": "assert solution(\"fced\") == \"Yes\"",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 4080,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    q = int(stdin.split()[1])\n    b = []\n    \n    for i in range(n):\n        b.append(a[i])\n        a[i] = a[i]%10000\n        \n    for _ in range(q):\n        l = int(stdin.split()[1])\n        r = int(stdin.split()[2])\n        \n        if l == r:\n            if r < n:\n                for i in range(l):\n                    a[i] = b[i]\n            else:\n                a[n-1] = b[l-1]\n            b = a[:n-1]\n        else:\n            for i in range(l, n):\n                a[i] = b[i-l]\n                b[i-l] = a[i]%10000\n                \n    for i in range(n):\n        print(a[i], end=\" \")\n        \n    return \" \".join(map(str,b))\n\n\n\ndef",
        "test": "assert solution(stdin) == '7'",
        "num_ids": 3882,
        "indeed": false
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    # whitespace\n    n = stdin.split()\n\n    # get length of the input array\n    # this is because we need to obtain \n    # the maximum element length for the sequence\n    # so we can use this information in the \n    # slicing function\n    \n    # the string is actually a list\n    # so for example, list[1,2,3,4,5,6,7,8]\n    # is actually a string\n    # which is a list of strings\n    \n    # we can do this using a list comprehension\n    # we do that because we are doing slicing\n    # so we are using a slice\n    n = list(map(int, n))\n    \n    # get the length of the sequence\n    # to add up all elements of the array\n    # we use a for loop to do that\n    # so that we are using an array\n    # which is a list\n    length = len(n)\n    \n    # for the first sequence we are \n    # slicing and adding elements to the list\n    # which is the maximum element length\n    \n    # we can do this using an for loop\n    # and then slicing\n    # to get the maximum element length\n    # we use the max function\n    # to get the maximum element length\n    \n    # and we use it to increment\n    # the index of the sequence\n    \n    # we are using a loop\n    # to add all elements of the array\n    # to the sequence\n    # which is a list\n    # we add 1 to the index\n    # which is the maximum element length\n    \n    # we can do this by slicing\n    # to get the maximum element length\n    # we add the length of the sequence\n    # to a list\n    \n    # to get the maximum element length\n    # we increment the index\n    # by 1\n    \n    # we are using a for loop\n    # to get the maximum element length\n    # with the index incremented\n    # by 1\n    \n    # we have reached the end of the sequence\n    # hence we return the string\n    \n    \n    return str(len(n))",
        "test": "assert solution(input) == '4'",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 4082,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    nums = list(map(int, stdin.split()))\n    if len(nums) <= 1:\n        return '1'\n    l = len(nums)\n    # print(l)\n    result = [0, 1]\n    for i in range(l-1):\n        result.append(max(nums[i:i+2]))\n    # print(result)\n    for i in result:\n        if i > 1:\n            return str(i)\n    return '1'\n\n--------Constraints----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\"\"\"\n\ndef",
        "test": "assert solution(",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 4083,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(input()) == \"0\"",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 4084,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    b, r = map(int, stdin.split())\n    if b == 0 or r == 0:\n        return ''\n    s1 = str(b) + ','\n    s2 = str(r) + ','\n    n = len(s1)\n    i = n\n    while i < n:\n        if i + 1 < n:\n            s1 += s2\n            s2 = str(b - s1[i]) + ','\n            i += 1\n        elif i + 1 == n:\n            s1 += s2\n            s2 = str(r - s1[i]) + ','\n            i += 1\n    return s1[:-1]\n",
        "test": "assert solution(\"10 0 0\") == \"5\"",
        "num_ids": 2825,
        "indeed": false
    },
    {
        "number": 4085,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    list_divisors = []\n    for i in range(2, N + 1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            list_divisors.append(i)\n    print(min(list_divisors))\n    return -1\n\n\n-----Constraints-----\n1 <= t <= 10^5\n1 <= n <= 10^5\n1 <= d_i < 10^6\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == 24",
        "num_ids": 1352,
        "indeed": false
    },
    {
        "number": 4086,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    x = []\n    y = []\n    for i in stdin.split(\" \"):\n        if i:\n            x.append(int(i))\n    x.sort()\n    for i in x:\n        y.append(i-1)\n    print(len(y))\n    print(*y)\n    return str(len(y))",
        "test": "assert solution('2 4 2 4 4') == '5'",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 4087,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a = int(stdin[0])\n    n = int(stdin[1])\n    for i in range(a,n+1):\n        if a%i == 0 and a/i == n/i:\n            print(i)\n            break\n    else:\n        print(-1)\n",
        "test": "assert solution(input()) == \"244\"",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 4088,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.strip()\n    n = len(stdin)\n    b = []\n    for i in range(n//2):\n        if stdin[i]!= stdin[n-1-i]:\n            b.append(stdin[i])\n    b.sort()\n    if b == stdin:\n        return ''.join(b)\n    else:\n        return ''.join(stdin[i] for i in range(n//2) if stdin[i] == b[i])\n",
        "test": "assert solution(\"aac\"), \"aac\"",
        "num_ids": 1232,
        "indeed": false
    },
    {
        "number": 4089,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    N = int(stdin)\n    for i in range(1,N+1):\n        answer += chr(i+97)\n    return answer\n",
        "test": "assert solution(\"1\") == \"b\"",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 4090,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n  w = stdin.splitlines()\n  w = sorted(w, key=lambda x: len(x))\n  n = len(w)\n  \n  result = 0\n  l = len(w[0])\n  for i in range(1, n):\n    for j in range(i, n):\n      if w[i]!= w[j]:\n        break\n    else:\n      break\n    \n    if w[i] == w[j]:\n      result += 1\n      if result > l:\n        break\n      \n    else:\n      result += 1\n      if result > l:\n        result = 0\n      \n      l = len(w[i])\n  \n  return str(result)",
        "test": "assert solution(\"to be or not to be\"), 12",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    a = [int(i) for i in stdin.split()]\n    dist = []\n    for i in range(len(a)):\n        if a[i] not in dist:\n            dist.append(a[i])\n    t = 0\n    for i in range(k):\n        for j in range(i+1,k):\n            if t == k-1:\n                break\n            if dist[j] - dist[i] + 2*dist[i] < t:\n                t = dist[j] - dist[i] + 2*dist[i]\n    print(t)\n    return str(t)\n\n\n-----Constraints-----\n\n1 <= n <= 2000\n1 <= k <= 2000\n\n1 <= a[i] <= 2000\n\nsolution is called at most $k$ times\n\nTime Limit: 10 seconds\n\nSample Cases:\ninput:\n4 1\n5 2\n2 2\n3 2\nOutput:\n0\n2\n\ninput:\n4 2\n1 2000 2\n2 2000 2\n3 2000 2\nOutput:\n0\n2\n\ninput:\n4 4\n1 2000 2\n2 2000 2\n3 2000 2\nOutput:\n0\n2\n\ninput:\n4 1\n1 1 1 1 1\n3 2\nOutput:\n0\n3\n\ninput:\n4 1\n1 1 1 1 1\n2 2\nOutput:\n0\n2\n\ninput:\n4 1\n1 1 1 1 1\n2 2\nOutput:\n0\n0\n\ninput:\n4 1\n1 1 1 1 1\n1 2\nOutput:\n1\n\ninput:\n4 2\n1 1 1 1 1\n2 2\nOutput:\n1\n\ninput:\n4 2\n1 2000 2\n2 2000 2\n3 2000 2\nOutput:\n0\n4\n\ninput:\n4 2\n1 2000 2\n2 2000 2\n3 2000 2\nOutput:\n1\n0\n\ninput:\n4 2\n1 1 1 1 1\n2 2\nOutput:\n2\n\ninput:\n4 2\n1 1 1 1 1\n2 2\nOutput:\n1\n\ninput:\n4 1\n1 1 1 1 1\n1 2\nOutput:\n1\n\ninput:\n4 1\n1 1 1 1 1\n2 2\nOutput:\n1\n\ninput:\n4 1\n1 1 1 1 1\n1 2\nOutput:\n2\n\ninput:\n4 2\n1 1 1 1 1\n2 2\nOutput:\n1\n\ninput:\n4 2\n1 1 1 1 1\n1 2\nOutput:\n2\n\n'''\n",
        "test": "assert solution(stdin) == \"4000\"",
        "num_ids": 1599,
        "indeed": false
    },
    {
        "number": 4092,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in input().split()]\n    total = 0\n    for i in range(n):\n        if a[i]!= 0:\n            total += a[i]\n        else:\n            break\n    a.append(total)\n    for i in range(n):\n        if a[i]!= 0:\n            total += a[i]\n        else:\n            break\n    for i in range(n-1, -1, -1):\n        if a[i]!= 0:\n            total += a[i]\n        else:\n            break\n    return str(total)\n\"\"\"\n\ndef",
        "test": "assert solution(\"8 16 -5 -11 -15 10 5 4 -4\") == 3",
        "num_ids": 2872,
        "indeed": false
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"\":\n        return \"\"\n    n, m = [int(i) for i in stdin.split()]\n    ret = []\n    for i in range(n):\n        if i == 0:\n            tmp = []\n            for j in range(m):\n                tmp.append(j + 1)\n            ret.append(tmp)\n        elif i == n - 1:\n            tmp = []\n            for j in range(m):\n                tmp.append(j + 1)\n            ret.append(tmp)\n        else:\n            tmp = []\n            for j in range(m):\n                tmp.append(j + 1)\n            ret.append(tmp)\n            ret.append([])\n    ret.sort(reverse = True)\n    for i in ret:\n        print(sum(i))\n\n-----Test-----\n\ninput:\n1\n5 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\noutput:\n2\n10\n1000000000\n2000000000\n\n\"\"\"\ndef",
        "test": "assert solution(",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 4094,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n",
        "test": "assert solution(stdin) == 4",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 4095,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    return str(len(set(p))-m)\n\nclass Solution:\n    def solve(self, n, m, p):\n        out = 0\n        i = 0\n        while i < m:\n            while i < n and p[i] == p[i+1]:\n                p.pop(i+1)\n                out += 1\n                i += 1\n            i += 1\n        return out\n        ",
        "test": "assert solution(0, 3) == 1",
        "num_ids": 2355,
        "indeed": false
    },
    {
        "number": 4096,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a1 = 0\n    a2 = 0\n    a3 = 0\n    a4 = 0\n    for i in range(n):\n        a, b, c = map(int, stdin.strip().split())\n        if a >= b:\n            a -= b\n        if a >= c:\n            a -= c\n        if b >= c:\n            b -= c\n        if a >= b:\n            a -= b\n        if a == 0:\n            a4 = a\n            if b == 0:\n                a2 = a1\n        elif b == 0:\n            a2 = a\n        else:\n            a1 = a\n            a2 = a\n            a4 = a\n    if a1!= 0:\n        return str(a1 + a2 + a3 + a4)\n    return -1\n\nprint(solution(\"5 5 5 5 5\"))\n",
        "test": "assert solution(",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 4097,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    n = int(arr[0])\n    b = []\n    for i in range(n):\n        b.append(int(arr[i+1]))\n    # print(b)\n    n = b[0]\n    m = b[1]\n    # print(n, m)\n    for i in range(2, len(b)):\n        if b[i] > m:\n            m = b[i]\n    # print(m)\n    # print(b)\n    for i in range(len(b)):\n        if m == b[i]:\n            n -= 1\n            # print(n)\n    # print(n)\n    if n == 0:\n        return -1\n    else:\n        return n\n\ndef",
        "test": "assert solution(stdin) == '1'",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 4098,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_l = len(str(a))\n    b_l = len(str(b))\n    if b_l > a_l:\n        return '0'\n    if b_l == a_l:\n        return str(a)\n    \n    a_l = a_l if a_l < b_l else b_l\n    b_l = b_l if b_l < a_l else a_l\n    t = b_l - a_l\n    if t == 1:\n        return str(a)\n    \n    if t == 2:\n        return str(b)\n    \n    if t == 0:\n        return str(a)\n    \n    if t == -1:\n        return str(b)\n    \n    return str(a) + str(b)\n",
        "test": "assert solution(\"6 1\") == \"6\"",
        "num_ids": 2179,
        "indeed": false
    },
    {
        "number": 4099,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m, A = map(int, stdin.split())\n    A_i = list(map(int, stdin.split()))\n    # A_i = [0,0,0,0,0,0,0,0,0,0]\n    # A_i = list(range(n+1))\n    # print(A_i)\n    # print(A_i)\n    # print(A_i)\n    # print(len(A_i))\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n    # print(A_i)\n    # print(len(A_i))\n",
        "test": "assert solution(",
        "num_ids": 2432,
        "indeed": false
    },
    {
        "number": 4100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A = [list(map(int, stdin.split())) for _ in range(N)]\n    A.sort(key=lambda x: (-x[1], x[0]))\n    \n    result = ''\n    for _ in range(N):\n        result += 'Yes' if A[0][0] <= 0 else 'No'\n        A.pop(0)\n    for i in range(N-1):\n        result += 'No' if A[i][0] < 0 else 'Yes'\n        A.pop(i)\n    for _ in range(Q):\n        result += 'Yes' if A[0][0] <= 0 else 'No'\n        A.pop(0)\n    return result\n\nThe first few lines of this challenge have been taken from the previous problem.\n\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 10^5\n - 1 \\leq K \\leq 10^9\n - 1 \\leq Q \\leq 10^5\n - 1 \\leq A_i \\leq N\\ (1 \\leq i \\leq Q)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K Q\nA_1\nA_2\n.\n.\nA_Q\n\n-----Output-----\nPrint N lines. The i-th line should contain Yes if Player i survived the game, and No otherwise.\n\n-----Sample Input-----\n6 3 4\n3\n1\n3\n2\n\n-----Sample Output-----\nNo\nNo\nNo\nNo\nNo\nNo\nNo\n\nIn the beginning, the players' scores are (3, 3, 3, 3, 3, 3).\n - Player 3 correctly answers a question. The players' scores are now (2, 2, 3, 2, 2, 2).\n - Player 1 correctly answers a question. The players' scores are now (2, 1, 2, 1, 1, 1).\n - Player 3 correctly answers a question. The players' scores are now (1, 0, 2, 0, 0, 0).\n - Player 2 correctly answers a question. The players' scores are now (0, 0, 1, -1, -1, -1).\nPlayers 1, 2, 4, 5 and 6, who have 0 points or lower, are eliminated, and Player 3 survives this game.\ndef",
        "test": "assert solution('6 4') == 'Yes'",
        "num_ids": 2642,
        "indeed": false
    },
    {
        "number": 4101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    sorted_a = sorted(a, reverse=True)\n    sorted_a = ''.join([str(sorted_a[i]) for i in range(n)])\n    sorted_a = ''.join([str(i) for i in sorted_a])\n    sorted_a = sorted_a.replace('0', '1').replace('1', '0')\n    result = 'YES' if sorted_a == sorted([str(i) for i in range(n)]) else 'NO'\n    print(result)\n    return result\n",
        "test": "assert solution(\"4 2\") == \"NO\"",
        "num_ids": 1809,
        "indeed": false
    },
    {
        "number": 4102,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"Yes\"\n    stack = list()\n    for i in range(1, len(stdin)):\n        num = int(stdin[i])\n        while stack and num >= stack[-1]:\n            stack.pop()\n        stack.append(num)\n        \n        if num == len(stdin):\n            answer = \"No\"\n            break\n    \n    return answer\n",
        "test": "assert solution(\"3\"), \"Yes\"",
        "num_ids": 2712,
        "indeed": false
    },
    {
        "number": 4103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s1 = list(map(int, stdin.split()))\n    s2 = list(map(int, stdin.split()))\n    s3 = list(map(int, stdin.split()))\n    s4 = list(map(int, stdin.split()))\n    s5 = list(map(int, stdin.split()))\n    s6 = list(map(int, stdin.split()))\n    s7 = list(map(int, stdin.split()))\n    s8 = list(map(int, stdin.split()))\n    s9 = list(map(int, stdin.split()))\n    s10 = list(map(int, stdin.split()))\n    s11 = list(map(int, stdin.split()))\n    s12 = list(map(int, stdin.split()))\n    s13 = list(map(int, stdin.split()))\n    s14 = list(map(int, stdin.split()))\n    s15 = list(map(int, stdin.split()))\n    s16 = list(map(int, stdin.split()))\n    s17 = list(map(int, stdin.split()))\n    s18 = list(map(int, stdin.split()))\n    s19 = list(map(int, stdin.split()))\n    s20 = list(map(int, stdin.split()))\n    s21 = list(map(int, stdin.split()))\n    s22 = list(map(int, stdin.split()))\n    s23 = list(map(int, stdin.split()))\n    s24 = list(map(int, stdin.split()))\n    s25 = list(map(int, stdin.split()))\n    s26 = list(map(int, stdin.split()))\n    s27 = list(map(int, stdin.split()))\n    s28 = list(map(int, stdin.split()))\n    s29 = list(map(int, stdin.split()))\n    s30 = list(map(int, stdin.split()))\n    s31 = list(map(int, stdin.split()))\n    s32 = list(map(int, stdin.split()))\n    s33 = list(map(int, stdin.split()))\n    s34 = list(map(int, stdin.split()))\n    s35 = list(map(int, stdin.split()))\n    s36 = list(map(int, stdin.split()))\n    s37 = list(map(int, stdin.split()))\n    s38 = list(map(int, stdin.split()))\n    s39 = list(map(int, stdin.split()))\n    s40 = list(map(int, stdin.split()))\n    s41 = list(map(int, stdin.split()))\n    s42 = list(map(int, stdin.split()))\n    s43 = list(map(int, stdin.split()))\n    s44 = list(map(int, stdin.split()))\n    s45 = list(map(int, stdin.split()))\n    s46 = list(map(int, stdin.split()))\n    s47 = list(map(int, stdin.split()))\n    s48 = list(map(int, stdin.split()))\n    s49 = list(map(int, stdin.split()))\n    s50 = list(map(int, stdin.split()))\n    s51 = list(map(int, stdin.split()))\n    s52 = list(map(int, stdin.split()))\n    s53 = list(map(int, stdin.split()))\n    s54 = list(map(int, stdin.split()))\n    s55 = list(map(int, stdin.split()))\n    s56 = list(map(int, stdin.split()))\n    s57 = list(map(int, stdin.split()))\n    s58 = list(map(int, stdin.split()))\n    s59 = list(map(int, stdin.split()))\n    s60 = list(map(int, stdin.split()))\n    s61 = list(map(int, stdin.split()))\n    s62 = list(map(int, stdin.split()))\n    s63 = list(map(int, stdin.split()))\n    s64 = list(map(int, stdin.split()))\n    s65 = list(map(int, stdin.split()))\n    s66 = list(map(int, stdin.split()))\n    s67 = list(map(int, stdin.split()))\n    s68 = list(map(int, stdin.split()))\n    s69 = list(map(int, stdin.split()))\n    s70 = list(map(int, stdin.split()))\n    s71 = list(map(int, stdin.split()))\n    s72 = list(map(int, stdin.split()))\n    s73 = list(map(int, stdin.split()))\n    s74 = list(map(int, stdin.split()))\n    s75 = list(map(int, stdin.split()))\n    s76 = list(map(int, stdin.split()))",
        "test": "assert solution(input().replace('\\n','')) == \"3\"",
        "num_ids": 3704,
        "indeed": false
    },
    {
        "number": 4104,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 4105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    n, k = map(int, stdin.split())\n    man = n\n    woman = n - (k - 1)\n    color = k - 1\n    answer = \"\"\n    \n    while man >= 0 and woman >= 0:\n        if color == k - 1:\n            answer = \"YES\"\n            break\n        elif man - 1 >= 0 and woman + 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man - 1 >= 0 and woman + 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman - 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman - 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman - 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman - 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man - 1 >= 0 and woman - 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man - 1 >= 0 and woman + 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man - 1 >= 0 and woman + 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man - 1 >= 0 and woman - 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man - 1 >= 0 and woman + 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man - 1 >= 0 and woman + 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man - 1 >= 0 and woman - 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man - 1 >= 0 and woman - 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man - 1 >= 0 and woman + 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman - 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman - 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman + 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman - 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman + 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman - 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman + 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman - 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman + 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman + 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman + 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman - 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman + 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman - 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman + 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman - 1 >= 0 and color - 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman + 1 >= 0 and color + 1 < k:\n            answer = \"YES\"\n            break\n        elif man + 1 >= 0 and woman - 1 >= 0",
        "test": "assert solution(inp) == 'YES'",
        "num_ids": 2709,
        "indeed": false
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_list = list(map(int, stdin.split()))\n    a_list.sort()\n    sum_value = 0\n    for i in range(k):\n        a = a_list[i]\n        b = a_list[i+1]\n        for j in range(n-1):\n            if a < b:\n                a, b = b, a\n            else:\n                a = a - b\n            if a <= 0:\n                break\n        sum_value += a\n    return str(sum_value)\n\n-----Constraints-----\n1 <= k <= 10^9\n0 <= n <= 10^9\n1 <= a_list[i] <= 10^9\n\n\n-----Time complexity-----\nO(nk) where n is the number of pictures and k is the minimum length of segment with at least one repost in it.\nO(k) to calculate the sum of beauty values of reposted pictures.\nO(k) to calculate the maximum possible sum of values of reposted pictures if Vova follows conditions described in the problem statement.\n",
        "test": "assert solution(stdin) == -1",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 4107,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int,stdin.split(' '))))\n",
        "test": "assert solution(\"6 1\") == \"7\"",
        "num_ids": 2189,
        "indeed": false
    },
    {
        "number": 4108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n  \n  def swap(l, r):\n    temp = l\n    l = r\n    r = temp\n    return l, r\n  \n  def expand(arr):\n    n = len(arr)\n    temp = [arr[i] for i in range(n)]\n    for i in range(1, n):\n      if i % 2 == 0:\n        temp[i] = arr[i-1]\n      else:\n        temp[i] = arr[i+1]\n    return temp\n  \n  def binary_search(arr, x):\n    # Find the start and end indices of the array.\n    start = 0\n    end = len(arr) - 1\n    \n    # Set a condition to prevent the search from happening again.\n    condition = True\n    \n    # Condition to check the range of indices.\n    while start <= end:\n      mid = (start + end) // 2\n      if arr[mid] < x:\n        start = mid + 1\n        # A start index has been found.\n        condition = True\n      elif arr[mid] > x:\n        end = mid - 1\n        # A end index has been found.\n        condition = True\n      else:\n        # Same value was found in both indexes.\n        if arr[mid] == x:\n          # A value is found at that index.\n          return mid\n        # A value is not found.\n        # Switch to next index.\n        condition = False\n    # No condition was found.\n    return -1\n  \n  def swap_2(arr):\n    temp = arr[:]\n    temp[0], temp[1] = temp[1], temp[0]\n    return temp\n  \n  def exp(arr):\n    n = len(arr)\n    temp = arr[:]\n    for i in range(n):\n      temp[i] = binary_search(temp[i], arr[i])\n    return temp\n  \n  def binary_search(arr, x):\n    # Find the start and end indices of the array.\n    start = 0\n    end = len(arr) - 1\n    \n    # Set a condition to prevent the search from happening again.\n    condition = True\n    \n    # Condition to check the range of indices.\n    while start <= end:\n      mid = (start + end) // 2\n      if arr[mid] < x:\n        start = mid + 1\n        # A start index has been found.\n        condition = True\n      elif arr[mid] > x:\n        end = mid - 1\n        # A end index has been found.\n        condition = True\n      else:\n        # Same value was found in both indexes.\n        if arr[mid] == x:\n          # A value is found at that index.\n          return mid\n        # A value is not found.\n        # Switch to next index.\n        condition = False\n    # No condition was found.\n    return -1\n  \n  def binary_search_2(arr, x):\n    n = len(arr)\n    temp = arr[:]\n    for i in range(n):\n      temp[i] = binary_search(temp[i], x)\n    return temp\n  \n  arr = list(map(int, stdin))\n  x = int(input())\n  \n  if len(arr) % 2 == 1:\n    arr.pop()\n  \n  # Condition to check the range of indices.\n  start = 0\n  end = len(arr) - 1\n  \n  # Condition to check the range of indices.\n  while start <= end:\n    mid = (start + end) // 2\n    if arr[mid] == x:\n      return mid\n    elif arr[mid] > x:\n      end = mid - 1\n      # A start index has been found.\n      # Swap to the middle.\n      arr[mid], arr[start] = arr[start], arr[mid]\n      # Swap the indices.\n      start = mid + 1\n    else:\n      # A start index has been found.\n      # Swap to the middle.\n      arr[mid], arr[end] = arr[end], arr[mid]\n      # Swap the indices.\n      start = mid + 1\n  \n  # No condition was found.\n  return -1\n\ns = input()\nt = input()",
        "test": "assert solution(stdin) == \"Yes\", \"solution(stdin) is wrong\"",
        "num_ids": 2007,
        "indeed": false
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 2389,
        "indeed": false
    },
    {
        "number": 4110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    bonus = 0\n    for i in range(N):\n        i, j, p_1, c_1 = map(int, stdin.split())\n        bonus += p_1*c_1\n        if i % 100 == 0 and i // 100!= N:\n            bonus += 100\n        if i % 100 == 0:\n            bonus -= 500\n        if i % 100!= 0:\n            bonus -= 800\n        if i % 100 == 0 and j % 100!= 0:\n            bonus -= 400\n    return str(bonus)\n\n-----Example 1-----\nInput:\n3 400\n3 500\n200\n700\nOutput:\n500\n\n-----Example 2-----\nInput:\n2 200\n3 400\n300\n700\nOutput:\n300\nExplanation:\nTakahashi's objective is to have a total score of 700 points or more.\nWe have solved all 100-point problems. So, 200 points.\nTherefore, we have 4 problems each with 100 points.\nTherefore, we have 4 problems each with 200 points.\nThus, we have 4 problems.\nTherefore, we have 200 points.\nTherefore, we have 200 points.\nTherefore, we have 700 points.\nTherefore, we have 700 points.\nThus, we have a total score of 700 points or more.\n\n-----Constraints-----\n - 1 \u2264 N \u2264 10^6\n - 1 \u2264 D \u2264 10\n - 1 \u2264 p_1 \u2264 100\n - 100 \u2264 c_1 \u2264 10^6\n - 100 \u2264 G\n - All values in input are integers.\n - c_i and G are all multiples of 100.\n - It is possible to have a total score of G or more points.\n\"\"\"\nclass Solution:\n    def solve(self, N, D, p_1, c_1):\n        return p_1 + (c_1 - (p_1 * D) + 1000)\n    def solve(self, N, D, p_1, c_1):\n        res = 0\n        for i in range(N):\n            i, j, p_2, c_2 = map(int, input().strip().split())\n            res += self.solve(i, D, p_1, c_1) + self.solve(i, N, p_1, c_1)\n        return res\n\nsolution(int(input()), int(input()), int(input()), int(input()))\n",
        "test": "assert solution(\"3 4\") == \"6\"",
        "num_ids": 1708,
        "indeed": false
    },
    {
        "number": 4111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_list = [int(x) for x in stdin.split()]\n    a_list = sorted(a_list)\n    good = 0\n    for i in range(1, n+1):\n        good += (a_list[i]-a_list[i-1])\n    return str(good)\n'''",
        "test": "assert solution('8 9') == '2'",
        "num_ids": 2506,
        "indeed": false
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    \n    A = list(map(int, stdin.split()))\n    \n    for i in range(len(A)):\n        A[i] = int(A[i])\n        \n    N = int(stdin.split()[0])\n    M = int(stdin.split()[1])\n    \n    N = N-1\n    M = M-1\n    \n    N_count = 0\n    M_count = 0\n    \n    while A:\n        if A[0] > A[1]:\n            A.pop(0)\n            N_count = N_count + 1\n        else:\n            A.pop(0)\n            M_count = M_count + 1\n            \n    if N_count > M_count:\n        return -1\n    \n    return N_count + M_count\n",
        "test": "assert solution('', -1) == -1",
        "num_ids": 961,
        "indeed": false
    },
    {
        "number": 4113,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 100:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution('5') == 'Yes'",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 4114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, *_ = map(int, stdin)\n    x = list(map(int, stdin))\n    h = list(map(int, map(int, stdin)))\n    X = sorted(x)\n    Y = sorted(h)\n    N_size = len(X)\n    for i in range(N_size):\n        if X[i]!= X[i + 1]:\n            return '\\n'.join([str(N - i)] + ['\\t'.join([str(x_i) for x_i in y]) for y in zip(Y[:i + 1], Y[i + 1:])])\n    return '\\n'.join([str(N - i) for i in range(N_size)])\n\n\ndef",
        "test": "assert solution(input) == 'C_X, C_Y, H'",
        "num_ids": 2593,
        "indeed": false
    },
    {
        "number": 4115,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n  def check(string: str) -> bool:\n    char_set = set()\n    for char in string:\n      char_set.add(ord(char))\n    return len(char_set) == len(string)\n\n  n = len(stdin)\n  palindromes = []\n  for i in range(1,n):\n    if check(stdin[i]):\n      palindromes.append(i)\n    else:\n      continue\n    palindromes.append(n-i)\n  if len(palindromes) == 0:\n    return 1\n  return min(palindromes)\n",
        "test": "assert solution('redcoder') == 1",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 4116,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    \n    for i in range(1, 10):\n        for j in range(1, 10):\n            n1 = i + j\n            n2 = i*j\n            if n1 <= 9 and n2 <= 9:\n                continue\n            else:\n                if n1 == n2:\n                    return 'Yes'\n    return 'No'\n\nN = 10\nprint(solution(N))",
        "test": "assert solution(13) == 'No'",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 4117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    sticks, limit = map(int, stdin.split())\n    n = len(sticks)\n    result = []\n    print(n, sticks, n // 3)\n    def rec(i):\n        if i == n:\n            return 0\n        if i < n:\n            result.append(rec(i + 1) + sticks[i])\n        if i < n // 3 and result[n // 3] > result[i]:\n            result[n // 3] = result[i]\n        if result[i] < result[i + 1]:\n            result[i + 1] = result[i]\n        return result[i]\n    rec(0)\n    return '\\n'.join(map(str, result))\n",
        "test": "assert solution(\"1 1 3 5\") == \"5\"",
        "num_ids": 1814,
        "indeed": false
    },
    {
        "number": 4118,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a * b < 0:\n        return str(abs(a * b))\n    else:\n        return '-1'\n",
        "test": "assert solution('2 3') == '-1'",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    X = list(map(int,stdin.split()))\n    X.sort()\n    X = [i+1 for i in X]\n    X.append(0)\n    visited = [[] for _ in range(n)]\n    \n    def dfs(x,c):\n        if x == m:\n            return c\n        visited[x].append(x+1)\n        return min(dfs(x+1,c)+1,dfs(x-1,c)+1,dfs(x,c)+1)\n        \n    ans = []\n    for i in range(n):\n        if i in visited[0]:\n            ans.append(1)\n            continue\n        ans.append(dfs(i,0))\n        \n    return str(min(ans))\n\nExplanation\nInput: N = 2, M = 5, X = [1, 10]\nOutput: 5\nExplanation:\nFrom the two pieces at coordinates 1 and 10, move the two pieces at coordinates 1 to 2.\nFrom the two pieces at coordinates 10, move the two pieces at coordinates 10 to 11.\nFrom the two pieces at coordinates 11, move the two pieces at coordinates 11 to 12.\nFrom the two pieces at coordinates 12, move the two pieces at coordinates 12 to 13.\nFrom the two pieces at coordinates 13, move the two pieces at coordinates 13 to 14.\nFrom the two pieces at coordinates 14, move the two pieces at coordinates 14 to 15.\nThe objective is achieved in 5 moves as follows, and this is the minimum number of moves required.\n - Initially, put the two pieces at coordinates 1 and 10.\n - Move the piece at coordinate 1 to 2.\n - Move the piece at coordinate 10 to 11.\n - Move the piece at coordinate 11 to 12.\n - Move the piece at coordinate 12 to 13.\n - Move the piece at coordinate 13 to 14.\n - Move the piece at coordinate 14 to 15.\ndef",
        "test": "assert solution(\"10 12 1 2 14\") == \"5\"",
        "num_ids": 2144,
        "indeed": false
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.splitlines()\n    n = int(stdin_lines[0])\n    m = int(stdin_lines[1])\n    k = int(stdin_lines[2])\n    roads = [int(stdin_lines[i]) for i in range(3, len(stdin_lines), 3)]\n    answer = []\n    ways = []\n    for i in range(n):\n        for j in range(m):\n            ways.append(ways[-1] + roads[i][j] + ways[-2])\n    for i in ways:\n        if i == 0:\n            answer.append(ways[-1])\n        else:\n            answer.append(ways[-1])\n            answer.append(ways[-2])\n            ways = answer\n            answer = []\n    ways.sort()\n    for i in ways:\n        if i == 0:\n            answer.append(ways[-1])\n        else:\n            answer.append(ways[-1])\n            answer.append(ways[-2])\n            ways = answer\n            answer = []\n    return str(ways[k])\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^6\n0 <= k <= 10^6\n\n-----Submissions-----\n\nTime Limit: 1 second\nMemory Limit: 1MB\n\nclass Solution:\n    def nCr(self, n: int, r: int) -> int:\n        \"\"\"\n        :type n: int\n        :type r: int\n        :rtype: int\n        \"\"\"\n        if n == 0 or r == 0:\n            return 0\n        return (self.nCr(n-1, r) + self.nCr(n-1, r-1)) % (10**9 + 7)",
        "test": "assert solution(input()) == \"1 2 1\"",
        "num_ids": 3138,
        "indeed": false
    },
    {
        "number": 4121,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"YES\"\n    if n == 3:\n        return \"NO\"\n    if n == 4:\n        return \"YES\"\n    if n == 5:\n        return \"NO\"\n    if n == 6:\n        return \"YES\"\n    \n    \n",
        "test": "assert solution(\"2\") == \"YES\"",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 4122,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, *stdin = map(int, stdin[0].split())\n    h = 0\n    for i in range(1, len(stdin)):\n        if stdin[i] < h:\n            h = stdin[i]\n        elif stdin[i] == h:\n            h = 0\n    if h == 0:\n        return -1\n    else:\n        if (stdin[-1] - stdin[0] == 1 and h == 0) or (stdin[-1] - stdin[0] == -1 and h!= 0):\n            return h\n        else:\n            return -1\n",
        "test": "assert solution('1000 6 -200 -300 125 77 -4') == -1",
        "num_ids": 1026,
        "indeed": false
    },
    {
        "number": 4123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    s = s.lower()\n    if len(s) > 3:\n        return \"\"\n    if len(s) < 3:\n        return \"\"\n    s = set(s)\n    # print(s)\n    if len(s) == 1:\n        return list(s)[0]\n    # print(s)\n    for i in range(len(s)):\n        if len(s) - 1 > i:\n            if s[i + 1]!= s[i]:\n                return list(s)[i]\n\n\n\ndef",
        "test": "assert solution(stdin) == \"AB\" or \"ZZZ\"",
        "num_ids": 2633,
        "indeed": false
    },
    {
        "number": 4124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    def solve(s, t):\n        # base cases\n        if s == \"\":\n            return len(t)\n        if t == \"\":\n            return len(s)\n        if s[0] == t[0]:\n            return solve(s[1:], t[1:])\n        # we take the index of s and add it with a full move.\n        # the index of t should be substracted with one so that we use the index of s\n        # i.e., when we apply the move one by one, we should only add the index of t that will be taken\n        # by s + 1 and not s + 1 - 1\n        return len(s) + solve(s[1:], t)\n    return solve(s, t)\n\ndef",
        "test": "assert solution(stdin) == \"est\"",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 4125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.split())\n    x -= 1\n    city_d = [0]\n    for i in range(N):\n        city_d.append(int(stdin[i]))\n    cur = x\n    while len(city_d) > 1:\n        if cur > 0:\n            city_d.append(int(city_d.pop(cur) + city_d.pop(cur - 1)))\n            cur += 1\n        else:\n            city_d.append(int(city_d.pop(cur - 1) + city_d.pop(cur)))\n            cur -= 1\n    return str(max(city_d))\n\n\"\"\"\nclass Solution:\n    def maxDistance(self, distances: List[int], K: int) -> str:\n        n = len(distances)\n        if n == 1:\n            return str(distances[0])\n\n        # always take D = 1\n        # and only travel to coordinate 1\n        d1, d2 = distances[0], distances[1]\n        min_d = max(distances)\n        for d in distances[2:n]:\n            min_d = min(d1 + d, min_d)\n            d1, d2 = d1 + d, d2 + d\n\n        if d2 > K:\n            return str(K) + \" \" + str(min_d)\n\n        # by default we move to the first city\n        return str(K) + \" \" + str(min_d)\n\"\"\"\n",
        "test": "assert solution(",
        "num_ids": 1105,
        "indeed": false
    },
    {
        "number": 4126,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    def isPalindrome(s):\n        return s == s[::-1]\n    \n    for i in range(int(len(stdin) / 2)):\n        if isPalindrome(stdin[i:i+3]):\n            return \"Yes\"\n    return \"No\"\n",
        "test": "assert solution(\"\") == \"No\"",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 4127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[:2]) / (10 ** int(stdin[2:])))",
        "test": "assert solution(",
        "num_ids": 2169,
        "indeed": false
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len(str(n)) - 1) + \" \" * (n + 2 - len(str(n))) + str(n)\n    \n    \n",
        "test": "assert solution(stdin) == 3",
        "num_ids": 2066,
        "indeed": false
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    k = 0\n    for i in range(n):\n        k += 1\n        for j in range(m):\n            k += 1\n            for k in range(s):\n                k += 1\n                print(k, end=',')\n    print(k)\n    return ''\n\n\n\"\"\"\ndef",
        "test": "assert solution(stdin) == 0",
        "num_ids": 1991,
        "indeed": false
    },
    {
        "number": 4130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    a = int(stdin.split(' ')[1])\n    \n    dp = [0] * n\n    \n    for i in range(n):\n        dp[i] = min(a, 150000)\n        \n    for i in range(n):\n        for j in range(i + 1):\n            if dp[j] >= a:\n                dp[i] = min(dp[i], dp[j] + 1)\n    \n    return str(n - dp[0])\n",
        "test": "assert solution(\"5 2 1 4\") == \"3\"",
        "num_ids": 2160,
        "indeed": false
    },
    {
        "number": 4131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    if b < 12:\n        print(b)\n        return\n    \n    for i in range(1, a+1):\n        print(i, end=' ')\n        if i % b == 0:\n            print(i)\n            break\n    else:\n        print()\n        \nsolution(input())\n",
        "test": "assert solution(input()) == \"00000001000\"",
        "num_ids": 1427,
        "indeed": false
    },
    {
        "number": 4132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    l.sort()\n    h = (l[0] + l[1]) // 2\n    answer = h\n    for i in range(2, N + 1):\n        A = (A * (l[i - 1] + 1)) // 2\n        if A > h:\n            answer = min(answer, h - A)\n            h = A\n    return str(answer)",
        "test": "assert solution(inp) == '2'",
        "num_ids": 2660,
        "indeed": false
    },
    {
        "number": 4133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    for line in lines:\n        words = line.split(',')\n        if len(words)!= 2:\n            print('false')\n            return\n        if words[0] == words[1]:\n            print('false')\n            return\n        if words[1][0:1] == '(' or words[1][0:1] == '[' or words[1][0:1] == '<' or words[1][0:1] == '>':\n            print('false')\n            return\n    print('true')\n    return\n\n-----Test-----\nTest 1\n?(____+___+___):-___>__.\n\nTest 2\n?(____+___+___):-___>__,_____<__.\n\nTest 3\n?(____+___+___):-___>__,___<__.\n\nTest 4\n?(____+___+___):-___>__,___<__.\n\nTest 5\n?(____+___+___):-___>__,___<__.\n\nTest 6\n?(____+___+___):-___>__,___<__.\n\nTest 7\n?(____+___+___):-___>__,___<__.\n\nTest 8\n?(____+___+___):-___>__,___<__.\n\nTest 9\n?(____+___+___):-___>__,___<__.\n\nTest 10\n?(____+___+___):-___>__,___<__.\n\nTest 11\n?(____+___+___):-___>__,___<__.\n\nTest 12\n?(____+___+___):-___>__,___<__.\n\nTest 13\n?(____+___+___):-___>__,___<__.\n\nTest 14\n?(____+___+___):-___>__,___<__.\n\nTest 15\n?(____+___+___):-___>__,___<__.\n\nTest 16\n?(____+___+___):-___>__,___<__.\n\nTest 17\n?(____+___+___):-___>__,___<__.\n\nTest 18\n?(____+___+___):-___>__,___<__.\n\nTest 19\n?(____+___+___):-___>__,___<__.\n\nTest 20\n?(____+___+___):-___>__,___<__.\n\nTest 21\n?(____+___+___):-___>__,___<__.\n\nTest 22\n?(____+___+___):-___>__,___<__.\n\nTest 23\n?(____+___+___):-___>__,___<__.\n\nTest 24\n?(____+___+___):-___>__,___<__.\n\nTest 25\n?(____+___+___):-___>__,___<__.\n\nTest 26\n?(____+___+___):-___>__,___<__.\n\nTest 27\n?(____+___+___):-___>__,___<__.\n\nTest 28\n?(____+___+___):-___>__,___<__.\n\nTest 29\n?(____+___+___):-___>__,___<__.\n\nTest 30\n?(____+___+___):-___>__,___<__.\n\nTest 31\n?(____+___+___):-___>__,___<__.\n\nTest 32\n?(____+___+___):-___>__,___<__.\n\nTest 33\n?(____+___+___):-___>__,___<__.\n\nTest 34\n?(____+___+___):-___>__,___<__.\n\nTest 35\n?(____+___+___):-___>__,___<__.\n\nTest 36\n?(____+___+___):-___>__,___<__.\n\nTest 37\n?(____+___+___):-___>__,___<__.\n\nTest 38\n?(____+___+___):-___>__,___<__.\n\nTest 39\n?(____+___+___):-___>__,___<__.\n\nTest 40\n?(____+___+___):-___>__,___<__.\n\nTest 41\n?(____+___+___):-___>__,___<__.\n\nTest 42\n?(____+___+___):-___>__,___<__.\n\nTest 43\n?(____+___+___):-___>__,___<__.\n\nTest 44\n?(____+___+___):-___>__,___<__.\n\nTest 45\n?(____+___+___):-___>__,___<__.\n\nTest 46\n?(____+___+___):-___>__,___<__.\n\nTest 47\n?(____+___+___):-___>__,___<__.\n\nTest 48\n?(____+___+___):-___>__,___<__.\n\nTest 49\n?(____+___+___):-___>__,___<__.\n\nTest 50\n?(____+___+___):-___>__,___<__.\n\nTest 51\n?(____+___+___):-___>__,___<__.\n\nTest 52\n?(____+___+___):-___>__,___<__.\n\nTest 53\n?(____+___+___):-___>__,___<__.\n\nTest 54\n?(____+___+___):-___>__,___<__.\n\nTest 55\n?(____+___+___):-___>__,___<__.\n\nTest 56\n?(____+___+___):-___>__,___<__.\n\nTest 57\n?(____+___+___):-___>__,___<__.\n\nTest 58\n?(____+___+___):-___>__,___<__.\n\nTest 59\n?(____+___+___):-___>__,___<__.\n\nTest 60\n?(____+___+___):-___>__,___<__.\n\nTest 61\n?(____+___+___):-___>__,___<__.\n\nTest 62\n?(____+___+___):-___>__,___<__.\n\nTest 63\n?(____+___+___):-___>__,___<__.\n\nTest 64\n?(____+___+___):-___>__,___<__.\n\nTest 65\n?(____+___+___):-___>__,___<__.\n\nTest 66\n?(____+___+___):-___>__,___<__.\n",
        "test": "assert solution('a_d,e_m,f_l,g_i') == '0101'",
        "num_ids": 4118,
        "indeed": false
    },
    {
        "number": 4134,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = [[0] * m for _ in range(n)]\n    for i in range(n):\n        grid[i][0] = i\n    for i in range(m):\n        grid[0][i] = i\n    for i in range(1, n):\n        for j in range(1, m):\n            grid[i][j] = (grid[i - 1][j] + grid[i][j - 1]) & k\n    return str(grid[n - 1][m - 1])\n",
        "test": "assert solution(\"3 4 1000000000000000000\") == \"0\"",
        "num_ids": 2210,
        "indeed": false
    },
    {
        "number": 4135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    # Convert each character in the string to a lowercase ASCII\n    # string and concatenate it with the last character of the string\n    string = []\n    for _ in range(n):\n        string.append(stdin[-1])\n        stdin = stdin[:-1]\n    \n    # Convert the string to a list of ints and combine the \n    # first string into the second string and join it with the space\n    string = [int(s) for s in string]\n    \n    # Split the list of ints into a list of strings\n    string_as_list = [str(s) for s in string]\n    \n    # Join the strings into a single string\n    string = ''.join(string_as_list)\n    \n    # Convert each int to a string and concatenate it with the space\n    string = string.replace('1','')\n    string = string.replace('2','')\n    string = string.replace('3','')\n    string = string.replace('4','')\n    string = string.replace('5','')\n    string = string.replace('6','')\n    string = string.replace('7','')\n    string = string.replace('8','')\n    string = string.replace('9','')\n    string = string.replace('0','')\n    string = string.replace(' ', '\\n')\n    \n    # Remove the last line ending '\\n'\n    string = string[:-1]\n    \n    # Convert the string to a list of ints and join the resulting list\n    # back together with '\\n'\n    string_as_list = string.split('\\n')\n    string_as_list = ''.join(string_as_list)\n    \n    # Return the string\n    return string_as_list",
        "test": "assert solution(stdin) == \"z\"",
        "num_ids": 1324,
        "indeed": false
    },
    {
        "number": 4136,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split())))",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 2365,
        "indeed": false
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    output = \"\"\n    buffer = []\n    i = 0\n    while i < len(stdin):\n        c = stdin[i]\n        buffer.append(ord(c))\n        if c == '>':\n            output += '+'\n        elif c == '<':\n            output += '-'\n        elif c == '+':\n            output +=''\n        elif c == '-':\n            output +=''\n        else:\n            output +=''\n        i += 1\n    output = output.strip()\n    # print(output)\n    return output\n\ndef",
        "test": "assert solution
        "num_ids": 8159,
        "indeed": false
    },
    {
        "number": 4138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    q = int(stdin.strip())\n    for i in range(q):\n        k = int(stdin.strip().split()[0])\n        answer += str(k)\n    return answer\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 2245,
        "indeed": false
    },
    {
        "number": 4139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    shichi_go_san = []\n    for i in range(1, N+1):\n        n = list(str(i))\n        shichi_go_san.append(\"\".join(n[1:]))\n        shichi_go_san.append(\"\".join(n[:-1]))\n    print(len(shichi_go_san))\n    return str(len(shichi_go_san))\n\ndef",
        "test": "assert solution(input()) == 4",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 4140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(map(int, stdin.split()))\n\n    for i in range(n//2):\n        if s[i] == 0:\n            s[i], s[n-i-1] = s[n-i-1], s[i]\n        else:\n            s[i], s[n-i-1] = s[n-i-1], s[i]\n    s = ''.join(map(str, s))\n    return s\n\ndef",
        "test": "assert solution(\"011\") == \"1\"",
        "num_ids": 1218,
        "indeed": false
    },
    {
        "number": 4141,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    def cal(n):\n        if n % 3 == 0:\n            return True\n        if n % 5 == 0:\n            return True\n        return False\n    def dfs(n):\n        if n == 1:\n            return True\n        else:\n            if dfs(n-1):\n                return dfs(n-1)\n            elif cal(n):\n                return cal(n)\n            else:\n                return False\n    for i in range(1, n+1):\n        if dfs(i):\n            return 'DENIED'\n    return 'APPROVED'\n",
        "test": "assert solution('6 7 9 10 31') == 'DENIED'",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 4142,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    str_to_int = {'L': 0, 'R': 1, 'U': 2, 'D': 3}\n    \n    current = 0\n    \n    for c in s:\n        if current % 2 == 1:\n            current = str_to_int[c]\n        else:\n            current = str_to_int[c] + 1\n    \n    return 'Yes' if current % 2 == 1 else 'No'\n",
        "test": "assert solution(\"RUDRU\") == \"No\"",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 4143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    people = list(map(int, stdin.split()))\n    cities = []\n    while people:\n        t = people.pop(0)\n        if t not in cities:\n            cities.append(t)\n    city = 0\n    count = 0\n    while city < N - 1:\n        city += 1\n        if city not in cities:\n            count += 1\n        if city == N - 1:\n            count += 1\n        if count == 4:\n            return str(count)\n        if city == N - 2:\n            city = 0\n            count += 1\n    return \"inf\"\n\n    return str(count)\n\ndef",
        "test": "assert solution(input()) == \"7\"",
        "num_ids": 1377,
        "indeed": false
    },
    {
        "number": 4144,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 9 == 0:\n        return str(9)\n    if N % 9 == 9:\n        return str(0)\n    for i in range(10):\n        if str(i) not in {str(9),str(0)}:\n            break\n    else:\n        return \"9\"\n    answer = \"9\"\n    for i in range(10,N,1):\n        if str(i) not in {str(9),str(0)}:\n            break\n    else:\n        answer = str(i)\n    return answer",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 4145,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  if n == 0 or n == 1:\n    return 0\n  for i in range(2,n):\n    if all(n % j for j in range(i*2, n)):\n      return i\n  return 0",
        "test": "assert solution(0) == 0",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 4146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    v_1 = int(stdin.split()[0])\n    v_2 = int(stdin.split()[1])\n    v_3 = int(stdin.split()[2])\n    v_4 = int(stdin.split()[3])\n    v_5 = int(stdin.split()[4])\n    result = 0\n    for i in range(1,n+1):\n        if i%2 == 1:\n            result += v_1\n            v_1 = v_2\n            v_2 = v_3\n            v_3 = v_4\n            v_4 = v_5\n        else:\n            result += v_1\n            v_1 = v_2\n            v_2 = v_3\n            v_3 = v_4\n            v_4 = v_5\n    result += v_1\n    return str(result)",
        "test": "assert solution(input) == \"1\"",
        "num_ids": 3466,
        "indeed": false
    },
    {
        "number": 4147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    l_1, l_2 = map(int, stdin.split())\n    l_N = l_1 + l_2\n    mp = A + B + C\n    mp -= l_1\n    mp -= l_2\n    mp -= l_N\n    return str(min(mp, abs(l_1 - l_2) + abs(l_N - l_1))) + 'MP'\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N, A, B, C = map(int, stdin.split())\n        l_1, l_2 = map(int, stdin.split())\n        l_N = l_1 + l_2\n        mp = A + B + C\n        mp -= l_1\n        mp -= l_2\n        mp -= l_N\n        print(mp)\n        return str(min(mp, abs(l_1 - l_2) + abs(l_N - l_1))) + 'MP'\n",
        "test": "assert solution(\"4 0\") == 0",
        "num_ids": 2444,
        "indeed": false
    },
    {
        "number": 4148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(sorted(stdin, key=lambda x: (x.isalpha(), x.isupper())))\n",
        "test": "assert solution(\"A\") == \"A\"",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 4149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prime = [2]\n    for _ in range(3,n+1):\n        for i in prime:\n            if i*i >= 2 and i*i < n:\n                prime.append(i*i)\n            elif i*i < n:\n                for p in prime:\n                    if p*p < n:\n                        break\n                else:\n                    prime.append(n)\n    a = []\n    for i in prime:\n        a.append(i)\n        a.sort(reverse=True)\n    return ''.join(a)\n",
        "test": "assert solution(stdin) == '6'",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 4150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    \n    students = list(map(int,stdin[2:]))\n    \n    row_left = []\n    row_right = []\n    \n    for student in students:\n        row_left.append(student-k)\n        row_right.append(student+k)\n    \n    answer = \"\"\n    \n    for i in range(1,n+1):\n        row = row_left[i-1]\n        row = row if row < row_right[i] else row_right[i]\n        answer += str(row)\n    \n    return answer\n",
        "test": "assert solution(\"7 2\") == \"22212\"",
        "num_ids": 3907,
        "indeed": false
    },
    {
        "number": 4151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    a = map(int, stdin.split())\n    sum = 0\n    while a:\n        sum += 1\n        if a[0] == a[-1]:\n            a.pop()\n        elif a[0] < a[-1]:\n            a.pop()\n            a.append(a.pop() + 1)\n        else:\n            a.append(a.pop() + 1)\n    print(sum)\n    return str(sum % 1000000007)\n\nprint(solution(input()))\n",
        "test": "assert solution(input()) == 4",
        "num_ids": 1115,
        "indeed": false
    },
    {
        "number": 4152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, a = map(int, stdin.split())\n    \n    def isGood(a):\n        return len(a)>0 and all(i%2==0 or a.count(i)==0 for i in a)\n    \n    l, r = 1, n-1\n    \n    while l <= r:\n        mid = (l + r) // 2\n        if isGood(a[mid-1:mid+1]):\n            l = mid + 1\n        else:\n            r = mid - 1\n    \n    return l\n\n\n\n-----Bug-----\n\nThe following are a good sequences:\n$[16, 16, 16, 16, 8, 8, 8]$ (for example, for $a_1=16$, we can delete $a_2=8$. Note that $a_i+a_j$ can't be used as an element of $a_2$ as it's already a power of two),  $[4, 16]$ (for $a_1=4$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[1, 3, 2, 8, 8, 8]$ (for $a_3=2$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[1, 3, 2, 8, 8, 8]$ (for $a_3=2$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[1, 3, 2, 8, 8, 8]$ (for $a_3=2$, it is impossible to find another element $a_j$ such that their sum is a power of two). \n\nThere are $n$ good sequences. We need $n$ smaller sequences:\n$[1, 2, 3]$ (for example, for $a_1=2$ we can delete $a_2=3$ because $a_i+a_j$ can't be used as an element of $a_2$ as it's already a power of two),  $[1, 2]$ (for $a_1=1$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[1]$ (for $a_1=1$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[1]$ (for $a_1=1$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[1]$ (for $a_1=1$, it is impossible to find another element $a_j$ such that their sum is a power of two). \n\nWe need $n$ smaller sequences (of length $n$):\n$[4, 16]$ (for $a_3=2$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[4, 16]$ (for $a_3=2$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[1, 3, 2, 8, 8, 8]$ (for $a_3=2$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[1, 3, 2, 8, 8, 8]$ (for $a_3=2$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[1, 3, 2, 8, 8, 8]$ (for $a_3=2$, it is impossible to find another element $a_j$ such that their sum is a power of two). \n\nWe need $n$ smaller sequences (of length $n$):\n$[16, 8, 8, 8, 8, 8, 8]$ (for $a_1=8$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[16, 8]$ (for $a_1=8$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[16, 8]$ (for $a_1=8$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[16, 8]$ (for $a_1=8$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[16, 8]$ (for $a_1=8$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[16, 8]$ (for $a_1=8$, it is impossible to find another element $a_j$ such that their sum is a power of two). \n\nWe need $n$ smaller sequences (of length $n$):\n$[16, 16, 8, 8, 8, 8, 8]$ (for $a_1=16$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[16, 16]$ (for $a_1=16$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[16, 16]$ (for $a_1=16$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[16, 16]$ (for $a_1=16$, it is impossible to find another element $a_j$ such that their sum is a power of two),  $[16, 16]$ (for $a_1=16$, it is impossible to find another element $a_j$ such that their sum is a power of two). \n\nWe need $n$ smaller sequences (of length $n$):\n$[16, 16, 8, 8, 8, 8, 8]$ (for $a_1=16",
        "test": "assert solution(stdin) == 3",
        "num_ids": 2112,
        "indeed": false
    },
    {
        "number": 4153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin)))\n\nThere are 4 cubes from the bottom that are adjacent and can be removed.\n'''\n\nclass Solution:\n    def removeCubes(self, s: str) -> int:\n        def remove_cubes(cubes):\n            curr = cubes[0]\n            cubes[0] = curr + cubes[1]\n            cubes[1] = curr + cubes[2]\n            cubes[2] = curr + cubes[3]\n            if cubes[0] == curr:\n                cubes.pop(0)\n            return cubes\n        \n        stack = []\n        for i in range(len(s)):\n            if s[i] == '0':\n                stack.append(0)\n            elif stack:\n                stack = remove_cubes(stack)\n            \n        return len(stack)",
        "test": "assert solution(stdin) == 4",
        "num_ids": 2759,
        "indeed": false
    },
    {
        "number": 4154,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n  N, M = [int(i) for i in stdin.split(\" \")]\n  L_1, R_1 = [int(i) for i in stdin.split(\" \")]\n  L_2, R_2 = [int(i) for i in stdin.split(\" \")]\n  l_1, r_1 = [int(i) for i in stdin.split(\" \")]\n  l_2, r_2 = [int(i) for i in stdin.split(\" \")]\n  gate_id_cards = [L_1, L_2, R_1, R_2]\n  \n  if M > 0:\n    for i in range(N):\n      for j in range(i+1, N):\n        if gate_id_cards[i] + gate_id_cards[j] > M:\n          break\n        else:\n          print(\"The gate between L_1 and L_2 cannot be considered\")\n          return \"\"\n  \n  print(len([i for i in range(N) if gate_id_cards[i] < M]) + len([i for i in range(N) if gate_id_cards[i] < M]) - len([i for i in range(N) if gate_id_cards[i] > M]) + len([i for i in range(N) if gate_id_cards[i] > M]))\n  \n  return \"\"",
        "test": "assert solution(inp) == \"2\"",
        "num_ids": 2984,
        "indeed": false
    },
    {
        "number": 4155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    h=list(map(int,stdin.split()))\n    watering=0\n    for i in range(len(h)):\n        l=i+1\n        r=len(h)-1\n        while l<r:\n            l+=1\n            r-=1\n            if h[l]<h[r]:\n                if h[l]<h[r]:\n                    h[l],h[r]=h[r],h[l]\n                    watering+=1\n                else:\n                    break\n            elif h[l]==h[r]:\n                break\n    return str(watering)\n",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 4156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    for i in range(1, n+1):\n        if sum(a[:i]) == w:\n            return str(sum(a[:i]))\n\n    return \"0\"",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [int(i) for i in stdin.split()]\n    x.sort()\n    x = ''.join(str(i) for i in x)\n    return x\n",
        "test": "assert solution(\"1000000000000000000\") == \"0\"",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        return 'NO'\n    if n == 0:\n        return ['']\n    i = 1\n    res = []\n    while i <= n:\n        x = int(stdin[i - 1])\n        y = int(stdin[i])\n        h = x + y\n        if h >= 2 ** n:\n            return [str(i) +'' + str(x) +'' + str(y)]\n        elif h % 2 == 0:\n            res.append(str(i) +'' + str(x) +'' + str(y))\n            i += 1\n        else:\n            res.append(str(i) +'' + str(x) +'' + str(y))\n            i += 1\n            if i == n:\n                return res\n    return res\n\nOutput\n1\n3\nOutput\n1 4 5 7 10 12\n\nExplanation\nThe three sets are:\n\nInput: 6\n5 2 4 7 10 12\n\nOutput: 3\n7 3 5\n\nThe subsets are:\n\nInput: 5\n-1 2 5 8 11\n\nOutput: 1\n8\n\"\"\"\n\nn = int(input())\n",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 2513,
        "indeed": false
    },
    {
        "number": 4159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    def F(k):\n        if k == 1:\n            return A\n        if k == 2:\n            return B\n        if k == 3:\n            return 0\n        \n        if k == 4:\n            return A\n        if k == 5:\n            return B\n        if k == 6:\n            return 0\n        \n        return -1\n    \n    return '{}'.format(F(K))\n\"\"\"\n\ndef",
        "test": "assert solution(input) == '2 3'",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 4160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def check_input(num):\n        def check(num):\n            c = 0\n            for i in range(len(num)):\n                if (num[i] >= '0' and num[i] <= '9') or num[i] == '.':\n                    c = c + 1\n            return c >= 1\n        return check(num) or check(num[::-1])\n    for _ in range(int(stdin.strip())):\n        num = stdin.strip()\n        # num = input()\n        if check_input(num):\n            if int(num) > 10**18:\n                print(int(num) / 100)\n                break\n        else:\n            print(0)\n            break\n            ",
        "test": "assert solution(stdin) == \"10\"",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 4161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    import itertools\n    K = int(stdin.strip())\n    from itertools import combinations\n    x = list(combinations(range(1,K+1),2))\n    answer = 1\n    d = defaultdict(int)\n    for i in x:\n        d[i[0] + i[1]] += 1\n    answer = sum(d.values())\n    return str(answer)\n\n'''\n\ndef",
        "test": "assert solution(",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 4162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(index: int, A: int, B: int):\n        if index == m:\n            return f(A) + f(B)\n        else:\n            ret = 0\n            if A < B:\n                ret = max(ret, dfs(index + 1, A, A % B))\n            elif A > B:\n                ret = max(ret, dfs(index + 1, B, B % A))\n            return ret\n    \n    return str(dfs(0, 1, 10))\n\ndef",
        "test": "assert solution(stdin) == 10",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 4163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    d1 = D % 3\n    d2 = (D+1) % 3\n    if d1 == d2:\n        return \"Yes\"\n    elif d1 == 1 and d2 == 1:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "test": "assert solution(10,1,1,1,1,1) == 'No', 'This sample test has failed'",
        "num_ids": 945,
        "indeed": false
    },
    {
        "number": 4164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin)//int(1))\n'''\n\ndef",
        "test": "assert solution(3) == 2",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 4165,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    def is_convex(L):\n        if sum(L) < L[0]:\n            return True\n        else:\n            return False\n    \n    L = list(map(int,stdin.split()))\n    answer = \"Yes\" if is_convex(L) else \"No\"\n    print(answer)\n    return answer",
        "test": "assert solution(\"2\"), \"Yes\"",
        "num_ids": 1360,
        "indeed": false
    },
    {
        "number": 4166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s_1, c_1 = map(int, stdin.split())\n    s_2 = s_1\n    c_2 = c_1\n    s_3 = s_2\n    c_3 = c_2\n    for _ in range(N):\n        s_1, c_1 = map(int, stdin.split())\n        s_2 = s_1\n        c_2 = c_1\n        s_3 = s_2\n        c_3 = c_2\n    s_4 = s_3\n    c_4 = c_3\n    s_5 = s_4\n    c_5 = c_4\n    s_6 = s_5\n    c_6 = c_5\n    s_7 = s_6\n    c_7 = c_6\n    s_8 = s_7\n    c_8 = c_7\n    s_9 = s_8\n    c_9 = c_8\n    s_10 = s_9\n    c_10 = c_9\n    s_11 = s_10\n    c_11 = c_10\n    s_12 = s_11\n    c_12 = c_11\n    s_13 = s_12\n    c_13 = c_12\n    s_14 = s_13\n    c_14 = c_13\n    s_15 = s_14\n    c_15 = c_14\n    s_16 = s_15\n    c_16 = c_15\n    s_17 = s_16\n    c_17 = c_16\n    s_18 = s_17\n    c_18 = c_17\n    s_19 = s_18\n    c_19 = c_18\n    s_20 = s_19\n    c_20 = c_19\n    s_21 = s_20\n    c_21 = c_20\n    s_22 = s_21\n    c_22 = c_21\n    s_23 = s_22\n    c_23 = c_22\n    s_24 = s_23\n    c_24 = c_23\n    s_25 = s_24\n    c_25 = c_24\n    s_26 = s_25\n    c_26 = c_25\n    s_27 = s_26\n    c_27 = c_26\n    s_28 = s_27\n    c_28 = c_27\n    s_29 = s_28\n    c_29 = c_28\n    s_30 = s_29\n    c_30 = c_29\n    s_31 = s_30\n    c_31 = c_30\n    s_32 = s_31\n    c_32 = c_31\n    s_33 = s_32\n    c_33 = c_32\n    s_34 = s_33\n    c_34 = c_33\n    s_35 = s_34\n    c_35 = c_34\n    s_36 = s_35\n    c_36 = c_35\n    s_37 = s_36\n    c_37 = c_36\n    s_38 = s_37\n    c_38 = c_37\n    s_39 = s_38\n    c_39 = c_38\n    s_40 = s_39\n    c_40 = c_39\n    s_41 = s_40\n    c_41 = c_40\n    s_42 = s_41\n    c_42 = c_41\n    s_43 = s_42\n    c_43 = c_42\n    s_44 = s_43\n    c_44 = c_43\n    s_45 = s_44\n    c_45 = c_44\n    s_46 = s_45\n    c_46 = c_45\n    s_47 = s_46\n    c_47 = c_46\n    s_48 = s_47\n    c_48 = c_47\n    s_49 = s_48\n    c_49 = c_48\n    s_50 = s_49\n    c_50 = c_49\n    s_51 = s_50\n    c_51 = c_50\n    s_52 = s_51\n    c_52 = c_51\n    s_53 = s_52\n    c_53 = c_52\n    s_54 = s_53\n    c_54 = c_53\n    s_55 = s_54\n    c_55 = c_54\n    s_56 = s_55\n    c_56 = c_55\n    s_57 = s_56\n    c_57 = c_56\n    s_58 = s_57\n    c_58 = c_57\n    s_59 = s_58\n    c_59 = c_58\n    s_60 = s_59\n    c_60 = c_59\n    s_61 = s_60\n    c_61 = c_60\n    s_62 = s_61\n    c_62 = c_61\n    s_63 = s_62\n    c_63 = c_62\n    s_64 = s_63\n    c_64 = c_63\n    s_65 = s_64\n    c_65 = c_64\n    s_66 = s_65\n    c_66 = c_65\n    s_67 = s_66\n    c_67 = c_66\n    s_68 = s_67\n    c_68 = c_67\n    s_69 = s_68\n    c_69 = c_68\n    s_70 = s_69\n    c_70 = c_69\n    s_71 = s_70\n    c_71 = c_70\n    s_72 = s_71\n    c_72 = c_71\n    s_73 = s_72\n    c_73 = c_72\n    s_74 = s_73\n    c_74 = c_73\n    s_75 = s_74\n    c_75 = c_74\n    s_76 = s_75\n    c_76 = c_75\n    s_77 = s_76\n    c_77 = c_76\n    s_78 = s_77\n    c_78 = c_77\n    s_79 = s_78\n    c_79 = c_78\n    s_80 = s_79\n    c_80 = c_79\n    s_81 = s_80\n    c_81 = c_80\n    s_82 = s_81\n    c_82 = c_81\n    s_83 = s_82\n    c_83 = c_82\n    s_84 = s_83\n    c_84 = c_83\n    s_85 = s_84\n    c_85 = c_84\n    s_86 = s_85\n    c_86 = c_85\n    s_87 = s_86\n    c_87 = c_86\n    s_88 = s_87\n    c_88 = c_87\n    s_89 = s_88\n    c_89 = c_88\n    s_90 = s_89\n    c_90 = c_89\n    s_91 = s_90\n    c_91 = c_90\n    s_92 = s_91\n    c_92 = c_91\n    s_93 = s_92\n    c_93 = c_92\n    s_94 = s_93\n    c_94",
        "test": "assert solution([\"2\",\"5\",\"2\",\"9\",\"1\",\"3\",\"2\"]) == \"-1\"",
        "num_ids": 4429,
        "indeed": false
    },
    {
        "number": 4167,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    if N%K!= 0:\n        return '0'\n    sol = 0\n    for i in range(1,(N//K)*K):\n        sol += (N - (i*K))*(i*K)\n    return str(sol)\n    \n",
        "test": "assert solution(input()) == \"9\"",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 4168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    N = int(stdin)\n    answer = []\n    q = deque([[N]])\n    while q:\n        cur = q.popleft()\n        for i in range(len(cur)):\n            if cur[i] == '0':\n                if len(cur[:i]) == 1 and cur[i]!= '0':\n                    answer.append(int(cur[:i]))\n            if cur[i] == '1':\n                if len(cur[:i]) == 1 and cur[i]!= '0':\n                    answer.append(-2)\n                if i == len(cur)-1:\n                    answer.append(int(cur[:i]))\n                else:\n                    answer.append(cur[:i])\n                    answer.append(int(cur[i+1:]))\n        if not q:\n            q = deque([cur])\n    return \"\".join(map(str, answer))\n",
        "test": "assert solution(solution) == '1', 'Wrong result'",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 4169,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_1, B_1 = map(int, stdin.split())\n    A_2, B_2 = map(int, stdin.split())\n    A_3, B_3 = map(int, stdin.split())\n    A_4, B_4 = map(int, stdin.split())\n    A_5, B_5 = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_i, B_i = map(int, stdin.split())\n    A_j, B_j = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_j, B_j = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_j, B_j = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_j, B_j = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_j, B_j = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_j, B_j = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_j, B_j = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_j, B_j = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_j, B_j = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_j, B_j = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_j, B_j = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_m, B_m = map(int, stdin.split())\n    A_k, B_k = map(int, stdin.split())\n    A_l, B_l = map(int, stdin.split())\n    A_n, B_n = map(int, stdin.split())\n    A_j, B_",
        "test": "assert solution(inp) == '12'",
        "num_ids": 5763,
        "indeed": false
    },
    {
        "number": 4170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, H = map(int, stdin.split())\n    return str(solution(N, H, H))\n",
        "test": "assert solution(input) == 5",
        "num_ids": 989,
        "indeed": false
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    a=[i for i in range(1,n+1)]\n    for _ in range(k):\n        a=sorted(a)\n        a=[a[i]+1 for i in range(len(a)) if a[i]-1>=0]\n    return str(len(a))\n",
        "test": "assert solution(sys.stdin.readline().strip()) == '0'",
        "num_ids": 1052,
        "indeed": false
    },
    {
        "number": 4172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n,k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    result = []\n    d = {\n        \"min\": min,\n        \"max\": max,\n        \"add\": lambda a,b:a+b\n    }\n    d2 = {\n        \"min\": lambda a,b:a-b\n    }\n    for i in range(n):\n        result.append(d[a[i]](a[i+1],k))\n    for i in range(n-k+1):\n        result.append(d2[a[i+k]](a[i+k+1],k))\n    return str(min(result))\n",
        "test": "assert solution(\"1\") == 1",
        "num_ids": 1150,
        "indeed": false
    },
    {
        "number": 4173,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    \n    q,a,b = stdin.split()\n    a,b = int(a),int(b)\n    \n    min = a\n    max = max(a,b)\n    \n    for i in range(int(q)):\n        n,t = map(int,input().split())\n        t = int(t)\n        \n        for j in range(1,n+1):\n            if (a+t*j) < min:\n                min = a+t*j\n            if (a+t*j) > max:\n                max = a+t*j\n                \n    print(min)\n    print(max)\n",
        "test": "assert solution(stdin) == '10'",
        "num_ids": 2374,
        "indeed": false
    },
    {
        "number": 4174,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n\ndef",
        "test": "assert solution(\"3 4 5\") == \"1\"",
        "num_ids": 1291,
        "indeed": false
    },
    {
        "number": 4175,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    N, W_1, W_2, W_N = map(int, stdin.split())\n    lst = list(map(str, stdin.split()))\n    lst.sort()\n    for _ in range(N):\n        print(\"Yes\" if lst[-1] == lst[-2] else \"No\")\n        \n\"\"\"\n\nfrom collections import defaultdict\n\ndef",
        "test": "assert solution(5, \"enigma\"), \"5 is not a valid number of words.\"",
        "num_ids": 2191,
        "indeed": false
    },
    {
        "number": 4176,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().rstrip().split())))\n    for i in range(n):\n        arr[i][1] = arr[i][1] // arr[i][0]\n        arr[i][2] = arr[i][2] // arr[i][0]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i][0] < arr[j][0] and arr[i][1] <= arr[j][1]:\n                count += 1\n    return str(count)",
        "test": "assert solution(raw_input) == \"6\"",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 4177,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join([chr(ord(x) - ord(\"a\") + 97) for x in stdin.replace(\"s\", \"x\")])\n",
        "test": "assert solution(\"xzx\") == \"xzx\"",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 4178,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    H = []\n    for i in range(1, N + 1):\n        H.append(int(stdin.split()[i]))\n    for i in range(N):\n        for j in range(i, N):\n            if H[i] >= H[j]:\n                H[i], H[j] = H[j], H[i]\n    for h in range(N - 1):\n        if H[h] == 0:\n            return 'No'\n        else:\n            H[h] -= 1\n    return 'Yes'",
        "test": "assert solution(\"1 2 1 3\") == \"Yes\"",
        "num_ids": 1123,
        "indeed": false
    },
    {
        "number": 4179,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    B = B[::-1]\n    flag = 0\n    for i in range(M):\n        for j in range(i+1, M):\n            if A[i] + B[j] > 0:\n                flag = 1\n                break\n    if flag:\n        print(flag)\n    else:\n        print(0)\n'''\n\ndef",
        "test": "assert solution([\"3 2 1\", \"1 2 2\"]) == \"2\"",
        "num_ids": 1186,
        "indeed": false
    },
    {
        "number": 4180,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n  price = 0\n  for line in stdin:\n    price += int(line)\n  return str(price - price // 1000 * 100)\n\ndef",
        "test": "assert solution(stdin) == 100",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 4181,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    \n    def div_s(num):\n        return int(num / 2) if num % 2 == 0 else num - (int(num / 2))\n        \n    result = 0\n    \n    for i in range(N):\n        A_i = A[i]\n        B_i = B[i]\n        num_heroes = A_i + B_i\n        \n        if num_heroes < A_i * B_i:\n            result += A_i * B_i\n        elif num_heroes < (A_i * B_i) + B_i:\n            result += (A_i * B_i) + B_i\n        elif A_i * B_i == num_heroes:\n            result += (A_i * B_i)\n            \n    return str(div_s(result))\n\nprint(solution(\"3 5 2\"))\n\nhttps://www.codewars.com/kata/5a13dfc5d634a9a06c7000cee/train/python\n\nsolution\n\ndef",
        "test": "assert solution(5, 50) == 100",
        "num_ids": 2786,
        "indeed": false
    },
    {
        "number": 4182,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    from math import gcd\n\n    N, M, X, Y = map(int, stdin.split())\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3, y_3 = x_2, y_1\n\n    # L = (N * M) / 2\n    L = gcd(N, M)\n\n    if L == 1:\n        x_1, y_1 = (X - x_1) / L, (Y - y_1) / L\n        x_2, y_2 = (X - x_2) / L, (Y - y_2) / L\n        x_3, y_3 = (X - x_3) / L, (Y - y_3) / L\n        y_1, y_2, y_3 = (y_1 - x_1) / L, (y_2 - x_2) / L, (y_3 - x_3) / L\n    else:\n        if (X - X) % L == 0:\n            x_1, y_1 = (X - X) / L, (Y - Y) / L\n            x_2, y_2 = (X - X) / L, (Y - Y) / L\n            x_3, y_3 = (X - X) / L, (Y - Y) / L\n            y_1, y_2, y_3 = (y_1 - x_1) / L, (y_2 - x_2) / L, (y_3 - x_3) / L\n        elif (X - X) % L > 0:\n            y_1, y_2 = (Y - Y) / L, (Y - Y) / L\n            x_1, x_2 = (X - X) / L, (X - X) / L\n            x_3, x_3 = (X - X) / L, (X - X) / L\n            y_1, y_2, y_3 = (y_1 - x_1) / L, (y_2 - x_2) / L, (y_3 - x_3) / L\n        else:\n            x_1, y_1 = (X - X) / L, (Y - Y) / L\n            x_2, y_2 = (X - X) / L, (Y - Y) / L\n            y_1, y_2, y_3 = (y_1 - x_1) / L, (y_2 - x_2) / L, (y_3 - x_3) / L\n    if x_1 < x_3 and y_1 < y_3:\n        return \"No War\"\n    else:\n        return \"War\"\n",
        "test": "assert solution(\"3 2 10 20\") == \"War\"",
        "num_ids": 3333,
        "indeed": false
    },
    {
        "number": 4183,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    N, T = stdin.split()\n    N = int(N)\n    T = int(T)\n    a, b = [], []\n    for i in range(N):\n        x = list(map(int, input().split()))\n        a.extend(x[:-1])\n        b.extend(x[1:])\n    for i in range(N):\n        a.sort()\n        b.sort(reverse=True)\n        if a[i] >= b[i]:\n            answer += T - a[i]\n            answer += T - b[i]\n        else:\n            answer += T - b[i]\n            answer += T - a[i]\n    return str(answer)\nprint(solution(stdin))\n=======\n",
        "test": "assert solution([\"2\", \"6\", \"9\"]) == 6",
        "num_ids": 2438,
        "indeed": false
    },
    {
        "number": 4184,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(int(stdin) - int(stdin + \"0\")))\n",
        "test": "assert solution(\"4\") == 1",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 4185,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n",
        "test": "assert solution(\"7 8\") == \"0\"",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 4186,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n % 2!= 0:\n        return \"error\"\n    a_i = int(stdin.split(' ')[1])\n    if a_i < 0 or a_i % 2!= 0:\n        return \"error\"\n    if a_i > n // 2:\n        return \"error\"\n    num_teams = (a_i // 2) + 1\n    teams = []\n    for i in range(num_teams):\n        teams.append(i)\n    for i in range(n // 2):\n        if int(stdin.split(' ')[1]) in teams:\n            teams.remove(int(stdin.split(' ')[1]))\n            teams.append(int(stdin.split(' ')[1]))\n    return \"\".join(map(str, teams))\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= n <= 10^6\n\n-----Time Limit: O(n) -----\n\nIn the worst case for two teams, we will solve it in two steps:\n\n1. Find the minimum number of problems students (i.e. the sum of all the numbers is even) that are equal to n / 2.\n2. Find the minimum number of problems students (i.e. the sum of all the numbers is odd) that are equal to n / 2.\n\n3. Compute the total number of problems that will be solved by the first team.\n4. Compute the total number of problems that will be solved by the second team.\n5. Return the minimum total number of problems that will be solved by the first team and the second team.\n\nComplexity\nlog(n) = O(n) for each input\nn = len(stdin)\n\nRuntime: 188 ms, faster than 74.53% of Python3 online submissions for Find the Minimum Problems with Equal Total Numbers.\nMemory Usage: 14.8 MB, less than 6.91% of Python3 online submissions for Find the Minimum Problems with Equal Total Numbers.\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin)\n        if n < 2 or n % 2!= 0:\n            return \"error\"\n        a_i = int(stdin.split(' ')[1])\n        if a_i < 0 or a_i % 2!= 0:\n            return \"error\"\n        if a_i > n // 2:\n            return \"error\"\n        num_teams = (a_i // 2) + 1\n        teams = []\n        for i in range(num_teams):\n            teams.append(i)\n        for i in range(n // 2):\n            if int(stdin.split(' ')[1]) in teams:\n                teams.remove(int(stdin.split(' ')[1]))\n                teams.append(int(stdin.split(' ')[1]))\n        return \"\".join(map(str, teams))\n\n\ndef",
        "test": "assert solution(4, \"5 10 2 3 14 5\") == 5",
        "num_ids": 1334,
        "indeed": false
    },
    {
        "number": 4187,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(map(int, stdin.split()))))",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 4188,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    max_height = 0\n    for i in stdin:\n        if i.isdigit():\n            if max_height < int(i):\n                max_height = int(i)\n        else:\n            if max_height < int(i):\n                max_height = int(i)\n    return str(max_height)\n\nprint(solution(\"4\"))\n",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    \n    cheeses = stdin.split()\n\n    # for n in cheeses:\n    #     print(int(n[0]), end=\" \")\n    \n    # a = input()\n    # for cheese in cheeses:\n    #     if a.find(cheese) >= 0:\n    #         print(int(cheese))\n    #         break\n    \n    # return \"impossible\"\n    \n    cheeses.sort()\n    for cheese in cheeses:\n        if cheese.find(stdin[0]) >= 0:\n            print(int(stdin[0]) + 1)\n            break\n    \n    return \"impossible\"\n\n    pass\n",
        "test": "assert solution(\"9\") == \"2\"",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = []\n    for i in range(n):\n        c.append((a[i] + b[i]) % n)\n    c.sort()\n    print(\"\".join(map(str, c)))\n    return \"\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a[i] <= n\n1 <= b[i] <= n\n0 <= c[i] <= n\n\n-----Elements-----\n1\n0\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == \"1 0 0 2\"",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 4191,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(input) == '1'",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 4192,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nfrom collections import deque\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 4193,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, b_1, b_2, b_3, b_4, b_5, b_6 = map(int, stdin.split())\n    for i in range(1, n+1):\n        if i % b_1 == 0:\n            print('Yes')\n        elif i % b_2 == 0:\n            print('Yes')\n        elif i % b_3 == 0:\n            print('Yes')\n        elif i % b_4 == 0:\n            print('Yes')\n        elif i % b_5 == 0:\n            print('Yes')\n        elif i % b_6 == 0:\n            print('Yes')\n    return 'Yes'\n\ndef",
        "test": "assert solution(input) == \"No\"",
        "num_ids": 2873,
        "indeed": false
    },
    {
        "number": 4194,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a = map(int, stdin.split())\n    days = [0] * m\n    for _ in range(n):\n        days[a - 1] += 1\n    for d in range(m):\n        print(days[d])\n    return '-1'\n",
        "test": "assert solution(stdin) == 30",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 4195,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    l = list(stdin)\n    if len(l) % 2 == 1:\n        return int(l[-1])\n    \n    D = int(l[0])\n    N = int(l[1])\n    for i in range(N, len(l), 2):\n        l[i] = int(l[i])\n    while l[-1] % D == 0:\n        l.pop(-1)\n    res = l[-1] // D\n    for i in range(N, len(l), 2):\n        l[i] = int(l[i])\n        if l[i] % D == 0:\n            l[i] -= 1\n    return res\n",
        "test": "assert solution(stdin) == 5",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 4196,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n  return '2'",
        "test": "assert solution(\"7 6 8\") == \"2\"",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 4197,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n,a = map(int,stdin.split())\n    students = list(map(int,stdin.split()))\n    answer = []\n    visit = set()\n    for i in range(n):\n        visit.add(students[i])\n    while len(visit)!=n:\n        while len(visit)>=n:\n            answer.append(visit.pop())\n        visit.add(students[i])\n        students.append(visit.pop())\n    for i in range(n):\n        answer[i] += 1\n    print(*answer)\n    return''.join(str(i) for i in answer)\n",
        "test": "assert solution(input) == '1 3'",
        "num_ids": 1018,
        "indeed": false
    },
    {
        "number": 4198,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    A, B = map(int, stdin.split())\n    if (A * N * B) <= X:\n        print(A * N * B)\n        return\n    else:\n        print(0)\n        return\n",
        "test": "assert solution(\"1234\") == \"0\"",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 4199,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h_1, h_2 = map(int, stdin.split())\n    answer = []\n    for i in range(N):\n        answer.append(h_1//(K**i))\n        h_1 %= K**i\n    return str(len(answer))",
        "test": "assert solution('2 2') == '2'",
        "num_ids": 1184,
        "indeed": false
    },
    {
        "number": 4200,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a_list = []\n    for i in range(n):\n        a_list.append(int(stdin[i]))\n    a_list.sort()\n    if m % 4!= 0:\n        return 'No'\n    m = int(m/4)\n    count = 0\n    for i in range(m, n, m):\n        count += 1\n        if count >= m:\n            return 'Yes'\n        for j in range(i, i+m):\n            if a_list[j] > a_list[j-m]:\n                count += 1\n                if count >= m:\n                    return 'Yes'\n                a_list[j-m] = a_list[j]\n                a_list[j] = 0\n                count = 0\n    return 'No'\n",
        "test": "assert solution(inp) == 'No'",
        "num_ids": 777,
        "indeed": false
    },
    {
        "number": 4201,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    \n    #To help with solution, we can use the following two variables, which are\n    # 1. Each iteration of the while-loop, i, is responsible of checking\n    # whether there are any rows that satisfy the conditions\n    # 2. Each iteration of the while-loop, i, is responsible of checking\n    # whether there is any columns that satisfy the conditions\n    # In order to improve efficiency we can use a stack to store the possible \n    # combinations of conditions and the row index.\n    # We have a stack of size K and a stack of size M.\n    # The while-loop will keep checking conditions and store the combination in\n    # the stack until the stack is empty.\n    # Initially, we have 5 rows and 5 columns.\n    # So, we check whether there is any row whose values are. or #.\n    # If there is, we check whether there is any column whose values are. or #.\n    # If there is, we check whether there is any square with at least one. or #.\n    # If there is, we add 1 to the number of times that square has been painted.\n    # If the number is less than K, then we add 1 to the number of times\n    # that square has not been painted.\n    # If the number is greater than K, then we add 1 to the number of times\n    # that square has painted.\n    # Return the number of combinations of rows and columns satisfying\n    # the condition.\n    \n    #The stack will be initialized with the empty strings.\n    #We will store all the possible combinations\n    #of rows and columns\n    #The stack will be initialized with the empty strings\n    \n    #Initialize the empty string to store the combination.\n    #Initialize the index to zero\n    \n    #While the stack is not empty, we start\n    #checking whether there is any square with at least one value.\n    #If there is, we push the combination into the stack.\n    #If there is, we continue checking whether there is any square\n    #with at least one value.\n    \n    #Then, we return the number of possibilities.\n    #If there is not, then we return 'empty'.\n    \n    #For each iteration, we push the current index into the stack.\n    #Then we check whether the stack is empty or not\n    #If it is, we return the number of possibilities.\n    #If it is not, then we return 'empty'.\n    \n    #We also check whether there are any empty stacks.\n    #If so, we return the number of possibilities.\n    #If not, then we return 'empty'.\n    \n    #For each iteration, we check whether the stack is empty or not.\n    #If the stack is empty, then we return the number of possibilities.\n    #If not, then we return 'empty'.\n    #Finally, we return 'empty'.\n    \n    #In order to improve efficiency, we only need to push the empty string\n    #into the stack.\n    \n    #The while-loop is terminated when there is no more \n    #rows or columns.\n    #After that, we check whether there is any empty string.\n    #If so, we return 'empty'.\n    \n    #In order to improve efficiency, we only need to check whether the empty \n    #string is in the stack.\n    #We can check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #The while-loop is terminated when there is no more \n    #rows or columns.\n    #After that, we check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #In order to improve efficiency, we only need to check whether the empty\n    #string is in the stack.\n    #We can check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #The while-loop is terminated when there is no more \n    #rows or columns.\n    #After that, we check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #In order to improve efficiency, we only need to check whether the empty\n    #string is in the stack.\n    #We can check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #The while-loop is terminated when there is no more \n    #rows or columns.\n    #After that, we check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #In order to improve efficiency, we only need to check whether the empty\n    #string is in the stack.\n    #We can check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #The while-loop is terminated when there is no more \n    #rows or columns.\n    #After that, we check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #In order to improve efficiency, we only need to check whether the empty\n    #string is in the stack.\n    #We can check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #The while-loop is terminated when there is no more \n    #rows or columns.\n    #After that, we check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #The while-loop is terminated when there is no more \n    #rows or columns.\n    #After that, we check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #The while-loop is terminated when there is no more \n    #rows or columns.\n    #After that, we check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #The while-loop is terminated when there is no more \n    #rows or columns.\n    #After that, we check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #The while-loop is terminated when there is no more \n    #rows or columns.\n    #After that, we check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #The while-loop is terminated when there is no more \n    #rows or columns.\n    #After that, we check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #The while-loop is terminated when there is no more \n    #rows or columns.\n    #After that, we check whether there is any empty string or not.\n    #If so, we return 'empty'.\n    \n    #The while-loop is terminated when there is no more \n    #rows or columns.\n    #After that, we check whether there is any empty string or not.\n    ",
        "test": "assert solution(input) == \"5\"",
        "num_ids": 3672,
        "indeed": false
    },
    {
        "number": 4202,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    L, R = list(map(int, stdin.split()))\n    print(solution(L, R))",
        "test": "assert solution(input()) == '2'",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 4203,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    for i in range(len(s)):\n        c = s[i][0]\n        if c not in 'ABC':\n            return c\n    return 'WA'\n\ndef",
        "test": "assert solution(input()) == \"WA\"",
        "num_ids": 2467,
        "indeed": false
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin[-5:])\n    string = ''\n    for i in s:\n        string += i\n    for j in range(k-1):\n        string += '2'\n    return string\n",
        "test": "assert solution
        "num_ids": 2182,
        "indeed": false
    },
    {
        "number": 4205,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    p, N = [int(i) for i in stdin.split()]\n    p = list(str(p))\n    perm = []\n    for i in range(N):\n        if p.count(str(i)) == 1:\n            perm.append(i)\n            perm.sort()\n    if len(perm) == 1:\n        return \"NO\"\n    else:\n        return \"YES\"",
        "test": "assert solution(\"1 2 4 3 1\") == \"NO\"",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 4206,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return str(len(s)-s.count('0'))\n",
        "test": "assert solution('6') == '1'",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = map(int, stdin.strip().split())\n    b = map(int, stdin.strip().split())\n    s = 0\n    for i in range(n):\n        a[i] = a[i] if a[i] >= 0 else abs(a[i])\n        b[i] = b[i] if b[i] >= 0 else abs(b[i])\n        s += a[i] + b[i]\n    return str(s)\n\nprint(solution(\"1 -2 3 -4 -5 -6\"))\n\n\ndef",
        "test": "assert solution(inp) == out",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace('\\n', '').split(' ')\n    n = int(stdin[0])\n    l = [list(i.lower()) for i in stdin[1:n]]\n    r = [list(i.lower()) for i in stdin[n:n + 2]]\n    color_l = []\n    color_r = []\n    for i in l:\n        if '?' in i:\n            color_l.append(i)\n            color_l.append('?')\n            color_r.append(i)\n        else:\n            color_l.append(i)\n            color_l.append('?')\n            color_r.append('?')\n    color_l.sort()\n    color_r.sort()\n    k = 0\n    for i in range(len(color_l)):\n        if color_l[i] not in color_r:\n            k += 1\n    return str(k)",
        "test": "assert solution(stdin) == 8",
        "num_ids": 2175,
        "indeed": false
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    res = []\n    for l, r in zip(*map(lambda x: [x] + [sum(i) for i in zip(list(a[:n]), a[n:])], range(n + 1))):\n        if l + r < n:\n            res.append(l + r)\n    if len(res) > 0:\n        print(min(res))\n    else:\n        print(0)\n",
        "test": "assert solution(stdin) == \"3 4 2 4 4 3\"",
        "num_ids": 1905,
        "indeed": false
    },
    {
        "number": 4210,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\ndef",
        "test": "assert solution(stdin) == \"123456\"",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 4211,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N,B = map(int,stdin.split())\n    A = [int(i) for i in stdin.split()]\n    max_sum = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            temp = max(A[i]+A[j],A[i]+A[j+1])\n            max_sum = max(max_sum,temp)\n    print(max_sum)\n    \n        \n    \n",
        "test": "assert solution(input) == '9'",
        "num_ids": 731,
        "indeed": false
    },
    {
        "number": 4212,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip().split()[-1])\n  q = int(stdin.strip().split()[-2])\n  a = [int(i) for i in stdin.strip().split()[1:-1]]\n  for _ in range(q):\n    a, b, c = map(int, stdin.strip().split()[1:-1])\n    if c == b:\n      return str(sum(a) - sum(b))\n    if b < c < a:\n      return '0'\n  return '0'\n",
        "test": "assert solution(input) == \"110\"",
        "num_ids": 2416,
        "indeed": false
    },
    {
        "number": 4213,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    # In the range of A_1, A_2,..., A_n, we always have two differences between A[i-1] and A[i].\n    # Each difference must be positive and all the elements must be in the range of the range of A[i-1], A[i], A[i+1],..., A[n-1].\n    # In other words, we have n - 1 differences.\n    # In A[i], the differences between A[i-1] and A[i], A[i+1] and..., A[n-1] must be positive.\n    # In other words, the first difference between A[i] and A[i+1] must be positive.\n    # Thus, we want to find the maximum absolute difference of two elements.\n    \n    # Input will come in the form of an integer array A[i] = A[i-1], A[i], A[i+1],..., A[n-1]\n    # A[i] is a value in the range of A[i-1], A[i], A[i+1],..., A[n-1].\n    \n    # We want to find the maximum absolute difference of two elements.\n    # If A[i] = A[i-1] + A[i+1], we can always find it by choosing A[i] = A[i-1] + A[i+1].\n    # But it may not always be possible.\n    # A[i] = A[i-1] + A[i+1] = A[i-1] + A[i+1] + A[i-1] = A[i-1] + A[i-1] + A[i+1] + A[i+1] = A[i-1] + A[i-1] + A[i+1] + A[i+1] = A[i-1] + A[i-1] + A[i+1] + A[i+1] + A[i+1] = A[i-1] + A[i-1] + A[i+1] + A[i+1] = A[i-1] + A[i-1] + A[i+1] + A[i+1]\n    # Thus, we can find the maximum absolute difference of two elements.\n    \n    def maxAbsDifference(A: List[int], i: int, j: int):\n        if i == 0:\n            return A[j]\n        if A[i-1] + A[i] == A[i-1] + A[i]:\n            return maxAbsDifference(A, i-1, j)\n        if A[i-1] + A[i+1] == A[i-1] + A[i+1]:\n            return maxAbsDifference(A, i-1, i+1)\n        if A[i-1] + A[i] == A[i-1] + A[i+1]:\n            return maxAbsDifference(A, i-1, i+1)\n        return max(A[j], A[i-1], A[i+1], A[i+1], A[j])\n    \n    return maxAbsDifference(A, n-1, 0)",
        "test": "assert solution(inp) == '5'",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"",
        "test": "assert solution(\"5 5\") == \"5\"",
        "num_ids": 1882,
        "indeed": false
    },
    {
        "number": 4215,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    A = abs(a - 100)\n    B = abs(b - 100)\n    return str(A+B)",
        "test": "assert solution(input()) == 4",
        "num_ids": 2053,
        "indeed": false
    },
    {
        "number": 4216,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N,*A,B = map(int,stdin)\n    m = max(A,B)\n    for num in str(N):\n        A,B = int(num),max(A,B)\n        if A<=B:\n            return str(A*B)\n    return str(N)\n\nimport math\n\ndef",
        "test": "assert solution('10000') == '3'",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 4217,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    k, m = map(int, stdin.split())\n    foods = list(map(int, stdin.split()))\n    a, b = k, m\n    while a:\n        if a % b == 0:\n            a //= b\n        else:\n            b //= a\n    if a:\n        a -= 1\n    for food in foods:\n        if a % food == 0:\n            a //= food\n        else:\n            food //= a\n    return str(a)\n",
        "test": "assert solution(input) == \"3 4\"",
        "num_ids": 961,
        "indeed": false
    },
    {
        "number": 4218,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    return str(round(1/(1+10**(-6)), 7))\n'''\nclass Solution:\n    def judge_odd(self, N: int) -> bool:\n        even=0\n        odd=0\n        \n        for i in range(N):\n            if i%2==0:\n                even+=1\n            else:\n                odd+=1\n        \n        if(even>odd):\n            return True\n        else:\n            return False",
        "test": "assert solution(input) == \"0.5\"",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 4219,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    A_1 = list(map(int,stdin.split()))\n    A_2 = list(map(int,stdin.split()))\n    A_N = list(set(A_1+A_2))\n    A_N.sort()\n    A_N = [i+1 for i in A_N]\n    x_11 = 0\n    x_12 = 0\n    x_21 = 0\n    x_22 = 0\n    y_11 = 0\n    y_12 = 0\n    y_21 = 0\n    y_22 = 0\n    for a in A_N:\n        if a == 1:\n            x_11 += 1\n        elif a == 2:\n            x_12 += 1\n        elif a == 1 and y_22 == 0:\n            y_11 += 1\n        elif a == 2 and y_21 == 0:\n            y_12 += 1\n        elif a == 2 and y_21 == 1:\n            y_12 += 1\n        elif a == 1 and y_21 == 1:\n            y_22 += 1\n        elif a == 2 and y_22 == 1:\n            y_21 += 1\n        elif a == 3:\n            y_22 += 1\n    if x_11 > x_12:\n        x_22 += x_12\n    elif x_11 > x_12:\n        x_21 += x_11\n    elif x_11 == x_12:\n        x_12 += x_11\n        x_21 += x_12\n    elif x_11 == x_12:\n        x_11 += x_12\n        x_12 += x_11\n    elif x_11 == x_12:\n        x_12 += x_11\n        x_11 += x_12\n    else:\n        x_11 += x_12\n        x_12 += x_11\n        x_21 += x_12\n        x_22 += x_11\n    if y_11 > y_12:\n        y_22 += y_11\n    elif y_11 > y_12:\n        y_21 += y_11\n    elif y_11 == y_12:\n        y_11 += y_12\n        y_21 += y_12\n    elif y_11 == y_12:\n        y_11 += y_12\n        y_12 += y_11\n    elif y_11 == y_12:\n        y_11 += y_12\n        y_12 += y_11\n    else:\n        y_11 += y_12\n        y_12 += y_11\n    y_11 = y_12 = 0\n    if x_21 > x_22:\n        x_22 += x_21\n    elif x_21 > x_22:\n        x_21 += x_22\n    elif x_21 == x_22:\n        x_21 += x_22\n        x_22 += x_21\n    elif x_21 == x_22:\n        x_21 += x_22\n        x_22 += x_21\n    else:\n        x_21 += x_22\n        x_22 += x_21\n    return str(x_11+x_12+x_21+x_22+y_11+y_12+y_21+y_22)\n",
        "test": "assert solution(\"1 1\") == 2",
        "num_ids": 1747,
        "indeed": false
    },
    {
        "number": 4220,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    length = len(S)\n    if length >= K:\n        return ''.join(S[:K])\n    elif length <= K:\n        return ''.join(S)\n    else:\n        return 'nikoand...'\n    \n",
        "test": "assert solution(4) == \"nikoand,\"",
        "num_ids": 2636,
        "indeed": false
    },
    {
        "number": 4221,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"\": return\n    print(stdin[-1])\n    print(stdin[:-1])\n    return stdin[-1][::-1] + stdin[:-1]",
        "test": "assert solution(\"a\") == \"a\"",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 4222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d_i = sorted(list(map(int, stdin.split())))\n    p = d_i.index(n) + 1\n    while k > 0:\n        nums = d_i[p:k + 1]\n        if nums[0] < nums[-1]:\n            k -= nums[p:k + 1].index(nums[0]) + 1\n            nums = d_i[:k] + [nums[k]] + d_i[k:]\n            p = d_i.index(n) + 1\n        else:\n            nums = d_i[:k] + [nums[k]] + d_i[k:]\n            p = d_i.index(n) + 1\n            k -= 1\n    return str(nums.count(n))\n\"\"\"",
        "test": "assert solution(input) == '1'",
        "num_ids": 1272,
        "indeed": false
    },
    {
        "number": 4223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    if not 0 < N < 10**5:\n        return \"?\"\n    if not 0 < len(S) < N:\n        return \"?\"\n    if not all(S[i] in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'] for i in range(N)):\n        return \"?\"\n    s = \"\"\n    j = 0\n    for i in range(N):\n        if S[i] == 'a':\n            if not j <= 2:\n                s += 'a'\n                j += 1\n            else:\n                s += 'b'\n                j += 1\n        elif S[i] == 'b':\n            if j == 1:\n                s += 'a'\n                j = 0\n            elif j == 2:\n                s += 'c'\n                j = 0\n            else:\n                s += 'd'\n                j += 1\n        elif S[i] == 'c':\n            if j == 0:\n                s += 'a'\n                j += 1\n            elif j == 1:\n                s += 'b'\n                j = 0\n            else:\n                s += 'd'\n                j += 1\n        elif S[i] == 'd':\n            if j == 0:\n                s += 'a'\n                j += 1\n            elif j == 1:\n                s += 'c'\n                j = 0\n            else:\n                s += 'd'\n                j += 1\n        elif S[i] == 'e':\n            if j == 0:\n                s += 'b'\n                j += 1\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'd'\n                j += 1\n        elif S[i] == 'f':\n            if j == 0:\n                s += 'a'\n                j += 1\n            elif j == 1:\n                s += 'b'\n                j = 0\n            else:\n                s += 'd'\n                j += 1\n        elif S[i] == 'g':\n            if j == 0:\n                s += 'c'\n                j += 1\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'd'\n                j += 1\n        elif S[i] == 'h':\n            if j == 0:\n                s += 'd'\n                j = 0\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'b'\n                j += 1\n        elif S[i] == 'i':\n            if j == 0:\n                s += 'c'\n                j += 1\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'd'\n                j += 1\n        elif S[i] == 'j':\n            if j == 0:\n                s += 'd'\n                j = 0\n            elif j == 1:\n                s += 'c'\n                j = 0\n            else:\n                s += 'a'\n                j += 1\n        elif S[i] == 'k':\n            if j == 0:\n                s += 'c'\n                j += 1\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'd'\n                j += 1\n        elif S[i] == 'l':\n            if j == 0:\n                s += 'd'\n                j = 0\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'b'\n                j += 1\n        elif S[i] =='m':\n            if j == 0:\n                s += 'b'\n                j = 0\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'd'\n                j += 1\n        elif S[i] == 'n':\n            if j == 0:\n                s += 'b'\n                j = 0\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'd'\n                j += 1\n        elif S[i] == 'o':\n            if j == 0:\n                s += 'd'\n                j = 0\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'b'\n                j += 1\n        elif S[i] == 'p':\n            if j == 0:\n                s += 'b'\n                j = 0\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'd'\n                j += 1\n        elif S[i] == 'q':\n            if j == 0:\n                s += 'd'\n                j = 0\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'b'\n                j += 1\n        elif S[i] == 'r':\n            if j == 0:\n                s += 'c'\n                j = 0\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'd'\n                j += 1\n        elif S[i] =='s':\n            if j == 0:\n                s += 'd'\n                j = 0\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'b'\n                j += 1\n        elif S[i] == 't':\n            if j == 0:\n                s += 'd'\n                j = 0\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'b'\n                j += 1\n        elif S[i] == 'u':\n            if j == 0:\n                s += 'b'\n                j = 0\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'd'\n                j += 1\n        elif S[i] == 'v':\n            if j == 0:\n                s += 'd'\n                j = 0\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'b'\n                j += 1\n        elif S[i] == 'w':\n            if j == 0:\n                s += 'd'\n                j = 0\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'b'\n                j += 1\n        elif S[i] == 'x':\n            if j == 0:\n                s += 'd'\n                j = 0\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:\n                s += 'b'\n                j += 1\n        elif S[i] == 'y':\n            if j == 0:\n                s += 'd'\n                j = 0\n            elif j == 1:\n                s += 'a'\n                j = 0\n            else:",
        "test": "assert solution(solution) == 5",
        "num_ids": 5705,
        "indeed": false
    },
    {
        "number": 4224,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    num_list = [int(x) for x in stdin.split()]\n    for i in range(N):\n        if num_list[i] % 2 == 0:\n            num_list[i] = num_list[i]/2\n        else:\n            num_list[i] = num_list[i]*3\n    max = 0\n    for i in range(N):\n        if num_list[i] > max:\n            max = num_list[i]\n    return str(max)\n",
        "test": "assert solution(4) == 9",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 4225,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    cards = [i for i in range(1, 10 ** 9 + 1)]\n    count = 0\n    for i in stdin:\n        if i in cards:\n            count += cards.count(i)\n    return str(count)\n\ndef",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 881,
        "indeed": false
    },
    {
        "number": 4226,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    crane, turtle = 0, 0\n    legs = 0\n    for s in stdin:\n        if s == \"X\":\n            crane += 1\n        elif s == \"Y\":\n            turtle += 1\n        else:\n            legs += 1\n    if crane < 3 or turtle < 3 or legs < 4:\n        return \"No\"\n    return \"Yes\" if crane == 3 and turtle == 3 and legs == 4 else \"No\"",
        "test": "assert solution(\"4 5\") == \"No\"",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 4227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    edges,N,M = stdin.split()\n    edges = edges.split(' ')\n    edges = [list(map(int, edge.split('-'))) for edge in edges]\n    edges = {(int(edge[0]),int(edge[1])):edge for edge in edges}\n    edges = {edge[0]:edge[1] for edge in edges.values()}\n    visited = set()\n    def dfs(start,visited):\n        if start == N-1:\n            return 1\n        if start in visited:\n            return 0\n        visited.add(start)\n        for end in range(M):\n            if end not in visited and start!= end:\n                ans = dfs(end,visited)\n                if ans == 1:\n                    return 1\n                if ans == 0:\n                    return 0\n        return ans\n    return str(dfs(0,visited))\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import permutations\n\n\nclass Solution:\n    def numPaths(self, n: int, edges: List[List[int]]) -> int:\n        graph = defaultdict(list)\n        for edge in edges:\n            a,b = edge\n            graph[a].append(b)\n            graph[b].append(a)\n        graph = {key: list(graph[key]) for key in graph}\n        return len(graph.values())\n",
        "test": "assert solution(input) == \"2\"",
        "num_ids": 1446,
        "indeed": false
    },
    {
        "number": 4228,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N,L = map(int,stdin.split())\n    \n    # Option 1: use sorted\n    return (L+((L-1)*N-1))//2",
        "test": "assert solution('3 2') == 2",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 4229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = list(map(int, stdin.strip().split(' ')))\n    a.sort()\n    result = 0\n    for i in range(N-1):\n        if a[i] == 0:\n            result += (N-i)\n        else:\n            if a[i] % 3 == 0 and a[i] % 5 == 0:\n                result += a[i]\n            else:\n                result += (a[i] * N)\n    return str(result)\n",
        "test": "assert solution(\"1,3,4,5,6,7,8,9,10\") == \"48\"",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 4230,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.rstrip())\n    N = len(str(X))\n    for i in range(0, N):\n        p_i = int(stdin.rstrip())\n        if p_i == 0:\n            print(X)\n            return\n        elif X < p_i:\n            print(X)\n            return\n        elif p_i == X:\n            print(X)\n            return\n",
        "test": "assert solution('4 7 10 6 5') == '8'",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 4231,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    white = 0\n    for i in range(int(stdin[0])):\n        for j in range(int(stdin[1])):\n            if matrix[i][j]!= '0':\n                white += 1\n    return str(white)\n\nSample Input\n3 2\n2 1\nSample Output\n2\n",
        "test": "assert solution(input) == \"2\"",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    num_lst = list(map(int,stdin.split()))\n    num_lst.sort()\n    n = num_lst[0]\n    k = num_lst[1]\n    if n*(n+1)//2 > k:\n        return '-1'\n    if n*(n+1)//2 < k:\n        return '-1'\n    for i in range(n):\n        if num_lst[i] < k:\n            return str(num_lst[i])\n    return '-1'\n\"\"\"\nn, k = map(int,input().split())\nprint(solution(input()))",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: your code here\n    pass\n\"\"\"\n\n\ndef",
        "test": "assert solution(stdin) == 3",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 4234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N = int(stdin)\n    s = list(stdin)\n    for i in range(N):\n        if s[i] == 'a':\n            s[i] = 'b'\n        elif s[i] == 'c':\n            s[i] = 'd'\n        elif s[i] == 'e':\n            s[i] = 'f'\n        elif s[i] == 'f':\n            s[i] = 'g'\n    return ''.join(s)\n\ndef",
        "test": "assert solution(input()) == 'def'",
        "num_ids": 1110,
        "indeed": false
    },
    {
        "number": 4235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = {}\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        if u in edges and v in edges:\n            edges[u].append(v)\n        else:\n            edges[u] = [v]\n    graph = [[] for _ in range(n)]\n    for u, v in edges.items():\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(1, n):\n        graph[i] = sorted(graph[i])\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            if graph[i].index(graph[j]) == graph[i].index(graph[j]):\n                graph[i] = graph[i] + graph[j]\n    for i in range(n - 2):\n        if graph[i].index(i) == graph[i].index(i):\n            graph[i] = graph[i] + graph[i]\n    return ''.join(map(str, graph))\n\ndef",
        "test": "assert solution(stdin) == \"NO\"",
        "num_ids": 3174,
        "indeed": false
    },
    {
        "number": 4236,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n        n, m = map(int, stdin.split())\n        l, r = map(int, stdin.split())\n        \n        if l == 0 and r == 0:\n            return '0'\n        \n        if l == r:\n            return str(0)\n        \n        if (l+r) == 2:\n            return str(2)\n        \n        if (l+r) % 2!= 0:\n            return str(0)\n        \n        if l >= m or r <= l:\n            return str(0)\n        \n        if l == m:\n            return str(2)\n        \n        if l == r:\n            return str(2)\n        \n        if l == m + 1:\n            return str(0)\n        \n        if l == m - 1:\n            return str(0)\n        \n        if l == m + 2:\n            return str(0)\n        \n        if l == m - 2:\n            return str(0)\n        \n        if l == m + 3:\n            return str(0)\n        \n        if l == m - 3:\n            return str(0)\n        \n        if l == m + 4:\n            return str(0)\n        \n        if l == m - 4:\n            return str(0)\n        \n        if l == m + 5:\n            return str(0)\n        \n        if l == m - 5:\n            return str(0)\n        \n        if l == m + 6:\n            return str(0)\n        \n        if l == m - 6:\n            return str(0)\n        \n        if l == m + 7:\n            return str(0)\n        \n        if l == m - 7:\n            return str(0)\n        \n        if l == m + 8:\n            return str(0)\n        \n        if l == m - 8:\n            return str(0)\n        \n        if l == m + 9:\n            return str(0)\n        \n        if l == m - 9:\n            return str(0)\n        \n        if l == m + 10:\n            return str(0)\n        \n        if l == m - 10:\n            return str(0)\n        \n        if l == m + 11:\n            return str(0)\n        \n        if l == m - 11:\n            return str(0)\n        \n        if l == m + 12:\n            return str(0)\n        \n        if l == m - 12:\n            return str(0)\n        \n        if l == m + 13:\n            return str(0)\n        \n        if l == m - 13:\n            return str(0)\n        \n        if l == m + 14:\n            return str(0)\n        \n        if l == m - 14:\n            return str(0)\n        \n        if l == m + 15:\n            return str(0)\n        \n        if l == m - 15:\n            return str(0)\n        \n        if l == m + 16:\n            return str(0)\n        \n        if l == m - 16:\n            return str(0)\n        \n        if l == m + 17:\n            return str(0)\n        \n        if l == m - 17:\n            return str(0)\n        \n        if l == m + 18:\n            return str(0)\n        \n        if l == m - 18:\n            return str(0)\n        \n        if l == m + 19:\n            return str(0)\n        \n        if l == m - 19:\n            return str(0)\n        \n        if l == m + 20:\n            return str(0)\n        \n        if l == m - 20:\n            return str(0)\n        \n        if l == m + 21:\n            return str(0)\n        \n        if l == m - 21:\n            return str(0)\n        \n        if l == m + 22:\n            return str(0)\n        \n        if l == m - 22:\n            return str(0)\n        \n        if l == m + 23:\n            return str(0)\n        \n        if l == m - 23:\n            return str(0)\n        \n        if l == m + 24:\n            return str(0)\n        \n        if l == m - 24:\n            return str(0)\n        \n        if l == m + 25:\n            return str(0)\n        \n        if l == m - 25:\n            return str(0)\n        \n        if l == m + 26:\n            return str(0)\n        \n        if l == m - 26:\n            return str(0)\n        \n        if l == m + 27:\n            return str(0)\n        \n        if l == m - 27:\n            return str(0)\n        \n        if l == m + 28:\n            return str(0)\n        \n        if l == m - 28:\n            return str(0)\n        \n        if l == m + 29:\n            return str(0)\n        \n        if l == m - 29:\n            return str(0)\n        \n        if l == m + 30:\n            return str(0)\n        \n        if l == m - 30:\n            return str(0)\n        \n        if l == m + 31:\n            return str(0)\n        \n        if l == m - 31:\n            return str(0)\n        \n        if l == m + 32:\n            return str(0)\n        \n        if l == m - 32:\n            return str(0)\n        \n        if l == m + 33:\n            return str(0)\n        \n        if l == m - 33:\n            return str(0)\n        \n        if l == m + 34:\n            return str(0)\n        \n        if l == m - 34:\n            return str(0)\n        \n        if l == m + 35:\n            return str(0)\n        \n        if l == m - 35:\n            return str(0)\n        \n        if l == m + 36:\n            return str(0)\n        \n        if l == m - 36:\n            return str(0)\n        \n        if l == m + 37:\n            return str(0)\n        \n        if l == m - 37:\n            return str(0)\n        \n        if l == m + 38:\n            return str(0)\n        ",
        "test": "assert solution(\"1 7\") == \"0\"",
        "num_ids": 2509,
        "indeed": false
    },
    {
        "number": 4237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    num = 0\n    for i in range(0, 10):\n        for j in range(0, 10):\n            for k in range(0, 10):\n                if i * j * k == stdin:\n                    num += 1\n                    break\n    print(num)\n    return str(num)\n\n\n----Sample Output----\n3\n----Sample Explanation----\n1\n2\n3\n4\n\n2 and 4 satisfy the condition.\n'''\n\nimport math\ndef",
        "test": "assert solution(input) == \"5\"",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 4238,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    def func(x):\n        x = str(x)\n        for i in range(len(x) - 1, -1, -1):\n            if x[i] == '9':\n                break\n        else:\n            return x[:i] + '0' + x[i + 1:]\n        return x[:i] + '1' + x[i + 1:]\n\n    def f(n):\n        return (n & (n - 1) == 0) and not((n & (n - 1)) >> 1)\n    n = int(stdin)\n    m = f(n)\n    if m:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert solution(\"123456789\") == \"No\"",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 4239,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for i in range(N):\n        n = int(stdin.strip())\n        if n < 10000:\n            count += 1\n    return str(count)\n",
        "test": "assert solution(\"9\") == \"9\"",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 4240,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if len(s) % 2:\n        return \"No\"\n    s = \"\".join(s[::2])\n    return \"Yes\" if len(s) % 2 == 0 else \"No\"\n",
        "test": "assert solution(\"tokyo\") == \"No\", \"Yes\"",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 4241,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    max_char_diff = 0\n    for i in range(len(t)):\n        if t[i]!= s[i]:\n            max_char_diff = max(max_char_diff, (len(t)-i)//2)\n    print(len(s)-(max_char_diff*2) if len(t) - (max_char_diff*2) > 0 else 0)\n    return str(len(s)-(max_char_diff*2))\n\nSample Output:\n3\nExplanation:\nCase 1: If the first character of S is 'c', it can be changed to 'a' by changing only two characters, so the maximum number of characters to change - one - is 3.\nCase 2: If the second character of S is 'a', the maximum number of characters to change - one - is 2, so the maximum number of characters to change is 3.\n\n'''\nimport collections\n\ndef",
        "test": "assert solution(stdin) == 1",
        "num_ids": 934,
        "indeed": false
    },
    {
        "number": 4242,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split(' ')]\n    while B!= 0:\n        B = B // A\n        A, B = A, B\n    for _ in range(K - 1):\n        B = B - A * A\n    return str(B)\n",
        "test": "assert solution(stdin) == '5'",
        "num_ids": 2575,
        "indeed": false
    },
    {
        "number": 4243,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X == 1:\n        return '1'\n    \n    return str(len(str(X)) - 1)\n",
        "test": "assert solution(\"3\") == \"0\"",
        "num_ids": 2363,
        "indeed": false
    },
    {
        "number": 4244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N, X = [int(s) for s in stdin.split()]\n    return str(min(len(str(pow(N, 2) - X)) for p in range(1, len(str(N)))))\n",
        "test": "assert solution(stdin) == 5",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 4245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    A, B = map(int, arr[0].split())\n    power_strip = {}\n    for i in range(len(arr)-1):\n        k = int(arr[i+1].split()[0])\n        v = int(arr[i+1].split()[1])\n        if k in power_strip:\n            power_strip[k] += v\n        else:\n            power_strip[k] = v\n    if A in power_strip:\n        power_strip[A] += power_strip[A]\n        power_strip[B] -= power_strip[A]\n    else:\n        power_strip[A] = power_strip[A]\n    power_strip[0] -= power_strip[1]\n    power_strip[1] -= power_strip[2]\n    power_strip[2] -= power_strip[3]\n    power_strip[3] -= power_strip[4]\n    power_strip[4] -= power_strip[5]\n    power_strip[5] -= power_strip[6]\n    power_strip[6] -= power_strip[7]\n    power_strip[7] -= power_strip[8]\n    power_strip[8] -= power_strip[9]\n    power_strip[9] -= power_strip[10]\n    power_strip[10] -= power_strip[11]\n    power_strip[11] -= power_strip[12]\n    power_strip[12] -= power_strip[13]\n    power_strip[13] -= power_strip[14]\n    power_strip[14] -= power_strip[15]\n    power_strip[15] -= power_strip[16]\n    power_strip[16] -= power_strip[17]\n    power_strip[17] -= power_strip[18]\n    power_strip[18] -= power_strip[19]\n    power_strip[19] -= power_strip[20]\n    power_strip[20] -= power_strip[21]\n    power_strip[21] -= power_strip[22]\n    power_strip[22] -= power_strip[23]\n    power_strip[23] -= power_strip[24]\n    power_strip[24] -= power_strip[25]\n    power_strip[25] -= power_strip[26]\n    power_strip[26] -= power_strip[27]\n    power_strip[27] -= power_strip[28]\n    power_strip[28] -= power_strip[29]\n    power_strip[29] -= power_strip[30]\n    power_strip[30] -= power_strip[31]\n    power_strip[31] -= power_strip[32]\n    power_strip[32] -= power_strip[33]\n    power_strip[33] -= power_strip[34]\n    power_strip[34] -= power_strip[35]\n    power_strip[35] -= power_strip[36]\n    power_strip[36] -= power_strip[37]\n    power_strip[37] -= power_strip[38]\n    power_strip[38] -= power_strip[39]\n    power_strip[39] -= power_strip[40]\n    power_strip[40] -= power_strip[41]\n    power_strip[41] -= power_strip[42]\n    power_strip[42] -= power_strip[43]\n    power_strip[43] -= power_strip[44]\n    power_strip[44] -= power_strip[45]\n    power_strip[45] -= power_strip[46]\n    power_strip[46] -= power_strip[47]\n    power_strip[47] -= power_strip[48]\n    power_strip[48] -= power_strip[49]\n    power_strip[49] -= power_strip[50]\n    power_strip[50] -= power_strip[51]\n    power_strip[51] -= power_strip[52]\n    power_strip[52] -= power_strip[53]\n    power_strip[53] -= power_strip[54]\n    power_strip[54] -= power_strip[55]\n    power_strip[55] -= power_strip[56]\n    power_strip[56] -= power_strip[57]\n    power_strip[57] -= power_strip[58]\n    power_strip[58] -= power_strip[59]\n    power_strip[59] -= power_strip[60]\n    power_strip[60] -= power_strip[61]\n    power_strip[61] -= power_strip[62]\n    power_strip[62] -= power_strip[63]\n    power_strip[63] -= power_strip[64]\n    power_strip[64] -= power_strip[65]\n    power_strip[65] -= power_strip[66]\n    power_strip[66] -= power_strip[67]\n    power_strip[67] -= power_strip[68]\n    power_strip[68] -= power_strip[69]\n    power_strip[69] -= power_strip[70]\n    power_strip[70] -= power_strip[71]\n    power_strip[71] -= power_strip[72]\n    power_strip[72] -= power_strip[73]\n    power_strip[73] -= power_strip[74]\n    power_strip[74] -= power_strip[75]\n    power_strip[75] -= power_strip[76]\n    power_strip[76] -= power_strip[77]\n    power_strip[77] -= power_strip[78]\n    power_strip[78] -= power_strip[79]\n    power_strip[79] -= power_strip[80]\n    power_strip[80] -= power_strip[81]\n    power_strip[81] -= power_strip[82]\n    power_strip[82] -= power_strip[83]\n    power_strip[83] -= power_strip[84]\n    power_strip[84] -= power_strip[85]\n    power_strip[85] -= power_strip[86]\n    power_strip[86] -= power_strip[87]\n    power_strip[87] -= power_strip[88]\n    power_strip[88] -= power_strip[89]\n    power_strip[89] -= power_strip[90]\n    power_strip[90] -= power_strip[91]\n    power_strip[91] -= power_strip[92]\n    power_strip[92] -= power_strip[93]\n    power_strip[93] -= power_strip[94]\n    power_strip[94] -= power_strip[95]\n    power_strip[95] -= power_strip[96]\n    power_strip[96] -= power_strip[97]\n    power_strip[97] -= power_strip[98]\n    power_strip[98] -= power_strip[99]\n    power_strip[99] -= power_strip[100]\n    power_strip[100] -= power_strip[101]\n    power_strip[101] -= power_strip[102]\n    power_strip[102] -= power_strip[103]\n    power_strip[103] -= power_strip[104]\n    power_strip[104] -= power_strip[105]\n    power_strip[105] -= power_strip[106]\n    power_strip[106] -= power_strip[107]\n    power_strip[107] -= power_strip[108]\n    power_strip[108] -= power_strip[109]\n    power_strip[109] -= power_strip[110]\n    power_strip[110] -= power_strip[111]\n    power_strip[111] -= power_strip[112]\n    power_strip[112] -= power_",
        "test": "assert solution([]), \"Error: No solution\"",
        "num_ids": 2843,
        "indeed": false
    },
    {
        "number": 4246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, solution()))",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 4247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = [int(i) for i in stdin.strip().split()]\n\n    if len(p) < 3 or len(p) > 20:\n        return \"error\"\n    \n    answer = set(p)\n\n    for i in range(3, n):\n        s = set(p)\n        s.remove(answer[i - 3])\n        answer.update(s)\n\n    return str(len(answer))\n\nn = int(input())\np = [int(i) for i in input().split()]\nprint(solution(n))",
        "test": "assert solution(stdin) == 2",
        "num_ids": 1203,
        "indeed": false
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = []\n    y = []\n    for i in range(n):\n        x.append(float(input()))\n        y.append(float(input()))\n    \n    answer = abs(x[0]*y[0] - x[1]*y[1])\n    \n    for i in range(2, n):\n        answer += abs(x[i]*y[i] - x[i-1]*y[i-1])\n    \n    answer = round(answer, 2)\n    \n    return str(answer)\n\ndef",
        "test": "assert solution(\"8\") == \"5.410\"",
        "num_ids": 1249,
        "indeed": false
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    cups = list(map(int, stdin.split()))\n    k = 0\n    for i in range(m):\n        if cups[i] < 0:\n            cups[i] = 0\n            k -= 1\n    answer = 0\n    cups[0] = 0\n    cups.sort()\n    for i in range(m):\n        if cups[i] > 0:\n            answer += 1\n            if k > 0:\n                cups[k] = cups[i]\n                k -= 1\n    return str(answer)\n\nTime Limit: O(n^2)\n\n\n\n------Solution-----\n\ndef",
        "test": "assert solution(inp) == min(inp)",
        "num_ids": 728,
        "indeed": false
    },
    {
        "number": 4250,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = [int(s) for s in stdin.split()]\n    t = sorted(t, reverse=True)\n    if n == k:\n        return \" \".join(map(str, t))\n    if n >= 2*k:\n        return \"\"\n    if t[-1]!= t[-2]:\n        if t[-1] < t[-2]:\n            return \" \".join(map(str, t[:-2]))\n        else:\n            return \" \".join(map(str, t[:-1]))\n    if t[-1] < t[-2]:\n        return \" \".join(map(str, t[:-1]))\n    return \" \".join(map(str, t[:-1]))\n",
        "test": "assert solution(\"1 1\") == \"1 1\"",
        "num_ids": 2042,
        "indeed": false
    },
    {
        "number": 4251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(input()) for _ in range(m)] for _ in range(n)]\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] > k:\n                k = a[i][j]\n    answer = k\n    return str(answer)\n\n\ndef",
        "test": "assert solution(\"1 5\") == \"3\"",
        "num_ids": 2456,
        "indeed": false
    },
    {
        "number": 4252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    min_len = 0\n    # if len(stdin) == 0:\n    #     print(0)\n    #     return ''\n    \n    for i in range(0,len(stdin)):\n        # print(i)\n        if len(stdin[i]) < 3:\n            # print('xx')\n            # print(stdin[i])\n            min_len += len(stdin[i])\n        else:\n            # print('xxx')\n            # print(stdin[i])\n            if stdin[i].isupper() == False:\n                min_len += 1\n                continue\n            if stdin[i] == 'x':\n                # print('xx')\n                # print(stdin[i])\n                if stdin[i+1].isupper() == False:\n                    min_len += 1\n                else:\n                    min_len += 1\n                    continue\n            else:\n                # print('xxx')\n                # print(stdin[i])\n                if stdin[i+1].isupper() == False:\n                    min_len += 1\n                else:\n                    min_len += 1\n                    continue\n    # if min_len == 0:\n    #     print(0)\n    #     return ''\n    print(min_len)\n    return min_len\n\nimport re\ndef",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 4253,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    return str(3*(4**2))",
        "test": "assert solution(input) == '48'",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 4254,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    num_sheeps = 0\n    num_wolves = 0\n    for s in range(1, N+1):\n        for w in range(1, M+1):\n            if (s % 2 == 0):\n                num_wolves += 1\n            if (w % 2 == 0):\n                num_sheeps += 1\n            if (num_wolves > num_sheeps):\n                return \"unsafe\"\n            if (num_wolves < num_sheeps):\n                return \"safe\"",
        "test": "assert solution(\"10 10\") == \"safe\"",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 4255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(abs(sum(map(lambda x: int(x), stdin.split()))))/3)\n\ndef",
        "test": "assert solution(\"2 2\") == 6",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 4256,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(x,y):\n        return x*y//gcd(x,y)\n    \n    B = int(stdin.split(' ')[0])\n    A = int(stdin.split(' ')[1])\n    C = int(stdin.split(' ')[2])\n    \n    lcm = 1\n    for i in range(C, A, -1):\n        lcm *= lcm(B, i)\n    \n    return str(lcm)",
        "test": "assert solution(\"1 1 1\") == \"1\"",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 4257,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split())\n  arr = [list(map(int, input().split())) for _ in range(n)]\n  arr.sort()\n  print(arr[m-1][m-1])\n  return arr[m-1][m-1]\n\n\"\"\"\ndef",
        "test": "assert solution(stdin) == 10",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 4258,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split()[1])\n    B = int(stdin.split()[2])\n    T = int(stdin.split()[3])\n    for _ in range(T+0.5):\n        A += 1\n    print(A)\n    return str(A)\n\nprint(solution(\"3 5 7\"))\n",
        "test": "assert solution(stdin) == '10'",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 4259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n  for i in range(len(stdin)):\n    num = list(stdin)\n    num.remove(num[i])\n    # print(num)\n    for j in range(i,len(stdin)):\n      num[j] = int(num[j])\n      if num[j]%K!= 0:\n        # print(num)\n        if num[j]<=A and num[j]>B:\n          return \"NG\"\n        elif num[j]<=B and num[j]>A:\n          return \"NG\"\n        else:\n          # print(num)\n          # print(i,j)\n          # print(num[j])\n          # print(i,j,num[j]%K)\n          # print(num[j])\n          if num[j]%K == 0:\n            num[j] = num[j]//K\n          else:\n            num[j] = num[j] - ((num[j]//K)*K)\n  return \"OK\"\n  \n  \n  \n  \n",
        "test": "assert solution(\"10 100\") == \"NG\"",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 4260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    S = []\n    for t, x in enumerate(stdin.split()):\n        if x.isdigit():\n            S.append(int(x))\n        elif x.isalpha():\n            if len(x) >= 3:\n                S.append(int(x) * t)\n            elif x.startswith(\"-\"):\n                S.append(int(x) * t)\n    return '\\n'.join([str(i) for i in S])",
        "test": "assert solution(inp) == \"2.6666666667\"",
        "num_ids": 2359,
        "indeed": false
    },
    {
        "number": 4261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    if C > B:\n        C, B = B, C\n    if B > C:\n        B, C = C, B\n    print((A + B + C)/2)",
        "test": "assert solution(\"5 3 4 5\") == \"25\"",
        "num_ids": 1054,
        "indeed": false
    },
    {
        "number": 4262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = map(int, stdin.split())\n    \n    def check(perm, k):\n        p_ind = perm[k]\n        q_ind = perm[k+1]\n        \n        if p_ind!= q_ind:\n            return True\n        \n        for i in range(k, k+2):\n            if perm[i]!= p_ind and perm[i+1]!= q_ind:\n                return False\n        \n        return True\n        \n    \n    def solve():\n        n = len(P)\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                if not check(P[i:j+1], i):\n                    return Q[i]-Q[j]\n                    \n    answer = solve()\n    print(answer)\n\"\"\"\n",
        "test": "assert solution(\"3 3\") == \"2\"",
        "num_ids": 2384,
        "indeed": false
    },
    {
        "number": 4263,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n  S = stdin\n  length = 0\n  max_len = 0\n  cnt = 0\n  for i in range(len(S)):\n    j = i + 1\n    while j < len(S) and S[i] == S[j]:\n      if j - i + 1 > max_len:\n        max_len = j - i + 1\n        cnt = 1\n      j += 1\n    cnt = cnt * (len(S) - i - 1)\n    length += cnt\n  if max_len > 0:\n    length = length + max_len * (max_len - 1) // 2\n  return str(length)\n",
        "test": "assert solution(input) == 3",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 4264,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = 1\n    for i in range(1, n+1):\n        p *= 10\n        p %= 10\n        if p % 2!= 0:\n            p //= 10\n        if p == 1:\n            p += 1\n        if i % 10 == 0:\n            p -= 1\n    return str(p)\n",
        "test": "assert solution('1'), 1",
        "num_ids": 4236,
        "indeed": false
    },
    {
        "number": 4265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    \n    # We can use the above functions to solve this problem.\n    # Since the number of operations is 4, we can use the following functions.\n    def process(input):\n        \"\"\"\n        Process input using the above functions\n        \"\"\"\n        if len(input) < 4:\n            return input\n        \n        # For example, suppose the input is \"fhttcc\"\n        # and there are 4 operations.\n        # After processing the input, it becomes \"htcc\",\n        # and so on.\n        # But since we are going to process the input\n        # as many times as we can.\n        # We can calculate the maximum number of operations in the input\n        # to do so.\n        # In this case, it would be 4.\n        # So the solution would be 4.\n        \n        # If there are only two operations:\n        #   - replace the sixth character from input with h.\n        #   - replace the eighth character from input with t.\n        #   - replace the ninth character from input with t.\n        #   - replace the eleventh character from input with a.\n        # Then, after the operations, we are going to calculate the max number of operations\n        # so that it would be 4.\n        \n        # For example, if we process the input as follows:\n        # \"fhttcc\"\n        # \"htcc\"\n        # \"cce\"\n        # \"tcc\"\n        # \"cct\"\n        # and we calculate that the maximum number of operations would be 4.\n        # We are going to calculate it as follows:\n        #   - replace the sixth character from input with h.\n        #   - replace the eighth character from input with t.\n        #   - replace the ninth character from input with t.\n        #   - replace the eleventh character from input with a.\n        # Then, after the operations, we are going to calculate the max number of operations\n        # so that it would be 4.\n        \n        # We can calculate the maximum number of operations by using two\n        # nested loops.\n        # So the maximum number of operations is 4.\n        \n        # So in the above example, we are going to calculate the max number of operations\n        # by subtracting the max number of operations before and after the operations.\n        max = 0\n        for i in range(len(input) - 1):\n            curr = input[i]\n            pre = input[i + 1]\n            if pre == 'h':\n                max += 1\n            if pre == 't':\n                max -= 1\n            if pre == 'c':\n                max -= 1\n            if pre == 'a':\n                max += 1\n        return max\n    \n    def find_best(input):\n        \"\"\"\n        Find the best number of operations\n        \"\"\"\n        return process(input)\n    \n    return find_best(stdin)\n    \n",
        "test": "assert solution(\"russ\") == \"t\"",
        "num_ids": 2119,
        "indeed": false
    },
    {
        "number": 4266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    # you can write to stdout for debugging purposes, e.g.\n    # print(\"\\n\".join(l.rstrip() for l in input().splitlines()))\n    K, X = map(int, stdin.split())\n    stones = []\n    while True:\n        if K == 0:\n            break\n        if K > 0:\n            K -= 1\n            stones.append(X)\n            X -= 1\n            if X == 0:\n                break\n            else:\n                X += 1\n        else:\n            K += 1\n            stones.append(X)\n            X += 1\n            if X == 99:\n                break\n            else:\n                X += 1\n    for stone in stones:\n        print(stone, end=\" \")\n    return \" \".join(map(str, stones))\n",
        "test": "assert solution(input) == \"5 6 7 8 9\"",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 4267,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X < 40 or X > 40:\n        return \"No\"\n    if X >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('0') == 'No'",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 4268,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    pairs = []\n    for i in range(N):\n        for j in range(i + 1, N):\n            dist = 1 if i!= j else math.sqrt((i - j) ** 2 + (j - i) ** 2)\n            if dist < D:\n                pairs.append((i, j))\n    return str(len(pairs))\n",
        "test": "assert solution(\"2 2\") == \"1\"",
        "num_ids": 2125,
        "indeed": false
    },
    {
        "number": 4269,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    d = {}\n    for c in stdin:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    for k, v in d.items():\n        if v % 2 == 0:\n            return k\n    return \"Good\"\n",
        "test": "assert solution(\"5678\") == \"Good\"",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 4270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    return str(\n        (int(stdin) + int(stdin) - (int(stdin) - int(stdin)) ** 2) / 2\n    )\n",
        "test": "assert solution(input) == \"3.5\"",
        "num_ids": 2425,
        "indeed": false
    },
    {
        "number": 4271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E, F = map(int, stdin.split())\n    satisfaction = (B - A) * (C + E) * (D + F)\n    return str(satisfaction)\n\n\ucc38\uace0: https://coding-challenge.tistory.com/116\n\n\uc7ac\ub8cc :\n \ubb38\uc81c\ub97c \ud480\uae30 \uc704\ud55c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uc800\uc7a5\ud558\ub294 \ubc29\ubc95\uc744 \uac00\uc838\uc628\ub2e4.\n\ubb38\uc81c\ub97c \ubaa9\ud45c \uba54\ubaa8\ub9ac \uacf5\uac04 \uc0ac\uc774\uc5d0 \uc0c8\ub85c\uc6b4 \uadf8\ub8f9 \ub610\ub294 \ud29c\ud50c\ub85c \uc0ac\uc6a9\ud55c\ub2e4.\n\ud30c\uc774\uc36c\uc5d0\uc11c\ub294 \ubb38\uc81c\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ubb38\uc81c\ub97c \uc0dd\uac01\ud558\ub294 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 \ud14c\uc2a4\ud2b8\ub97c \ud558\uae30 \ub54c\ubb38\uc5d0 \uc774\uac70\ub97c \ub9cc\ub4e4\uc5b4\ubcf4\uc790.\n\n\uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub9c8\ub2e4, \ud30c\uc774\uc36c\uc5d0\uc11c\ub294 \uacf5\uac1c \uadf8\ub8f9\uc744 \uc81c\uc57d\uc0ac\ud56d\uc774 \ub2e4\ub978 \ubb38\uc81c\ub97c \ub9cc\ub4e4\uc5b4\ubcf4\uc790.\n\ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub9c8\ub2e4, \uadf8\ub8f9\uc744 \uc81c\uc57d\uc0ac\ud56d\uc774 \ub2e4\ub978 \uac1c\uc218\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574 \ud654\uba74\uc758 \uac00\ub85c\uc640 \uc138\ub85c\uc758 \uac1c\uc218\ub97c \uc800\uc7a5\ud558\ub294 \ubc29\ubc95\uc744 \ud558\ub824\uace0 \ud55c\ub2e4.\n\uc774\ub97c \ud1b5\ud574 \ud30c\uc774\uc36c\uc5d0\uc11c\ub294 \uc815\uc218\uac12\ub4e4\uc744 \ubc18\ud658\ud560 \uc218 \uc788\uc9c0\ub9cc, \ud504\ub85c\uadf8\ub7a8\uc758 \uc2dc\uac04 \ubcf5\uc7a1\ub3c4\ub97c \uacc4\uc0b0\ud558\ub294 \ubc29\ubc95\uc774 \uc788\ub2e4.\n\uc774\ub97c \uc774\uc6a9\ud574 \uadf8\ub8f9\uc744 \uacf5\uac1c \uadf8\ub8f9\uc744 \uc81c\uc57d\uc0ac\ud56d \uc5ec\ubd80\ub97c \uac80\uc0ac\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc815\uc218\ub97c \uacf5\uac1c \uadf8\ub8f9\uc744 \uacf5\uac1c \uadf8\ub8f9\uc744 \uc81c\uc57d\uc0ac\ud56d\uc5d0 \uac78\ub838\ub2e4.\n\n\ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \uc131\uacf5\ud588\uc73c\uba74 1\uc744 \ucd9c\ub825\ud558\uace0 \ub2e4\ub978 \ucf00\uc774\uc2a4\ub294 \uc2e4\ud328\ud588\ub2e4.\n\n\uc608\uc2dc\ub294 \ubb38\uc81c \uc2dc\uc791\ud558\uc9c0\ub9cc, \uadf8\ub8f9\uc744 \uacf5\uac1c \uadf8\ub8f9\uc744 \uc81c\uc57d\uc0ac\ud56d\uc5d0 \uac78\ub838\ub2e4.\n\ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uc785\ub825\uc774 \uc8fc\uc5b4\uc84c\uc744 \ub54c, \uacf5\uac1c \uadf8\ub8f9\uc744 \uc81c\uc57d\uc0ac\ud56d\uc5d0 \uac78\ub838\uc744 \ub54c \uadf8\ub8f9\uc758 \uc218\ub97c \ucd9c\ub825\ud558\uc2dc\uc624.\n\n\uc785\ub825\n\uccab\uc9f8 \uc904\uc5d0 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc758 \uc218 N(1 \u2264 N \u2264 100,000)\uc774 \uc8fc\uc5b4\uc9c4\ub2e4.\n\n\ucd9c\ub825\n\uccab\uc9f8 \uc904\ubd80\ud130 N\uc904\uc5d0 \uac78\ub838\uc744 \ub54c \uacf5\uac1c \uadf8\ub8f9\uc758 \uc218\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\"\"\"",
        "test": "assert solution(input) == 18,'solution does not work'",
        "num_ids": 2328,
        "indeed": false
    },
    {
        "number": 4272,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.splitlines()\n    n = len(S)\n    occurrences = [0] * (n+1)\n    for i in range(n):\n        c = S[i]\n        j = i\n        while j < n and c >= S[j]:\n            occurrences[j] += 1\n            j += 1\n    return \" \".join([f\"{x} {y} {z}\" for x, y, z in zip(occurrences, range(1, n+1), range(n+1, n+1+occurrences[-1]))])",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 1689,
        "indeed": false
    },
    {
        "number": 4273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \ndef",
        "test": "assert solution('HABORO') == 3",
        "num_ids": 1246,
        "indeed": false
    },
    {
        "number": 4274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    def check_pass(n, m):\n        if (n + m) % 2!= 0:\n            return False\n        else:\n            return True\n        \n    def check(a, b):\n        return a % b == 0 and a + b == m\n        \n    def is_passed(a, b):\n        return check(a, b) and check_pass(a, b)\n    \n    for i in range(1, n+1):\n        if is_passed(i, n):\n            return \"Yes\"\n        \n    for i in range(1, n+1):\n        if is_passed(i, m):\n            return \"Yes\"\n        \n    return \"No\"\n",
        "test": "assert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]) == \"No\"",
        "num_ids": 2616,
        "indeed": false
    },
    {
        "number": 4275,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    s = []\n    for i in range(6):\n        s.append(stdin[i])\n    for i in range(4):\n        if len(s[i]) == 3 and s[i + 1][0] == s[i][0] and s[i + 1][1] == s[i][1] and s[i + 1][2] == s[i][2]:\n            return \"Yes\"\n        else:\n            return \"No\"\n",
        "test": "assert solution(\"bcdfghjk\") == \"No\", \"Expected 'No', got 'Yes'\"",
        "num_ids": 2586,
        "indeed": false
    },
    {
        "number": 4276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    c_1 = list(map(int, stdin.split()))\n    c_2 = list(map(int, stdin.split()))\n    c_N = c_2[:N]\n    c_N.sort()\n    t_N = c_N[0] + c_N[N - 1]\n    t_i = T - t_N\n    for i in range(1, N):\n        c_i = c_1[i] + c_2[i]\n        if c_i < t_i:\n            t_i = c_i\n    if t_i < T:\n        print(t_i)\n    return t_i\n",
        "test": "assert solution(\"0 0\") == \"0\"",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 4277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total = A * B\n    if total >= N:\n        return str(total)\n    else:\n        return \"Error\"",
        "test": "assert solution(9, 9) == 8",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 4278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [0] * (n + 1)\n    b = [0] * (n + 1)\n    for i in range(1, n + 1):\n        a[i] = a[i - 1] + 1\n        b[i] = b[i - 1] + 1\n    for i in range(2, n + 1):\n        for j in range(2, n + 1):\n            if a[i] == a[j] and b[i] == b[j] and a[j] == 0:\n                print(i, j)\n                return i\n    return '0'\n\n\"\"\"\nInput:\nN\ns_1\ns_2\n:\ns_N\nOutput:\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
        "test": "assert solution('s_1') == 1",
        "num_ids": 5452,
        "indeed": false
    },
    {
        "number": 4279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    n = [int(i) for i in input().split()]\n    \n    cnt = 0\n    \n    for i in range(q):\n        k, s = map(int, input().split())\n        if n[k-1] == s:\n            cnt += 1\n    \n    print(cnt)\n    \nsolution(5)\nsolution(4)",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 2215,
        "indeed": false
    },
    {
        "number": 4280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(\"\\n\")[0])\n    k = int(stdin.strip().split(\"\\n\")[1])\n    answer = ''\n    r = 1\n    while k <= n:\n        answer += str(r)\n        k += r\n        r = r * 2\n    for i in range(1, k - 1):\n        answer +=''\n        k = r * 2\n    answer += str(r)\n    return answer\n",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 3484,
        "indeed": false
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(i) for i in stdin.split(' ')]\n    result = n\n    for _ in range(n - 1):\n        # print(x)\n        # print(x, x % n)\n        # print(x % n)\n        # print(x % n)\n        result -= x % n\n        result += x % n\n        # print(result)\n        if result < 0:\n            result += n\n        elif result > 0:\n            result -= n\n        # print(result)\n        # print('a')\n        # print(n, x, result)\n        # print('b')\n    return str(result)\n\n\n-----Solution-----\n\ndef",
        "test": "assert solution(stdin) == \"3 6\"",
        "num_ids": 1817,
        "indeed": false
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    return [p.pop(0),*p]\n\ndef",
        "test": "assert solution(input()) == \"3 1 2\"",
        "num_ids": 2009,
        "indeed": false
    },
    {
        "number": 4283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    A = [int(x) for x in stdin.split()]\n    B = [[int(y) for y in x.split(' ')] for x in stdin.split()]\n    \n    final = [0] * (len(A)+1)\n    for x in range(len(A)):\n        final[x] = final[x] + A[x] + B[x][1]\n        final[x+1] = final[x+1] + A[x] + B[x][2]\n\n    answer = max(final)\n    return str(answer)\n\nInput\n6\n1 1000 10000 10 100 1000000000\n\nOutput\n10\n\nInput\n6\n1 1000 10000 10 100 1000000000\n\nOutput\n1\n\nInput\n10\n
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 2856,
        "indeed": false
    },
    {
        "number": 4284,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    l.sort()\n    max = k-a-b\n    q = n+1\n    for x in l:\n        if x > max:\n            return '-1'\n        if x < 0:\n            return '-1'\n        if x == max:\n            q -= 1\n    if q == 0:\n        return '0'\n    else:\n        return '%d' % (q)\n\ndef",
        "test": "assert solution(stdin) == '4'",
        "num_ids": 2000,
        "indeed": false
    },
    {
        "number": 4285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(' ')[0])\n    s = ''.join(stdin.strip().split(' ')[1:])\n    queries = []\n    queries.append([n, len(s)])\n    for i in range(n - 1):\n        for j in range(n - 1 - i):\n            if s[j:j + len(queries[-1][0])] == queries[-1][0]:\n                queries.append([j + 1 + len(queries[-1][0]), len(queries[-1][0])])\n    answer = 0\n    for k in range(len(queries) - 1):\n        for j in range(len(queries[k]) - 1 - k):\n            if s[j:j + queries[k][0] + 1] == queries[k][0]:\n                answer += 1\n    return str(answer)\n\n\n'''\n",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 2072,
        "indeed": false
    },
    {
        "number": 4286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = {}\n    # print(n, m)\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        # print(x, y, w)\n        edges[x] = y\n        edges[y] = x\n    \n    def get_possible_edges(x, y):\n        possible_edges = []\n        for i in range(n):\n            if edges[i] == x or edges[i] == y:\n                possible_edges.append(i)\n        return possible_edges\n\n    \n    def get_min_cost(edges):\n        edges = list(edges.values())\n        n = n - 1\n        def get_possible_edges_in_first(i):\n            possible_edges = get_possible_edges(edges[i], edges[n])\n            if len(possible_edges) == 0:\n                return False\n            else:\n                return get_min_cost(edges)\n        if len(edges) == 0:\n            return False\n        elif get_possible_edges_in_first(0) == True:\n            return False\n        else:\n            return edges[n]\n    \n    return get_min_cost(edges)\n\n\n\n\n______________________________________________________________\n\nclass Solution:\n    def minimumCost(self, houses: List[int], cost: List[int]) -> int:\n        houses.sort()\n        houses.append(houses[-1]+cost[-1])\n        min_cost = 0\n        for h in houses:\n            for i in range(h):\n                min_cost += cost[i]\n        return min_cost",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    rain = list(map(int, stdin.split()))\n    mid = (rain[1] + rain[0]) // 2\n    \n    def sol(start: int):\n        fat = 0\n        for i in range(start, N):\n            if rain[i] <= mid:\n                fat += rain[i]\n        return fat\n    return str(sol(N//2))\n\n-----Done-----\n\n\"\"\"",
        "test": "assert solution(\"10 1 1\") == \"20\"",
        "num_ids": 1549,
        "indeed": false
    },
    {
        "number": 4288,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    answer = 'No'\n\n    # A,B,C are numbers between 1 and 9, inclusive\n    A,B,C = map(int,stdin.split())\n\n    if A == B and B!= C:\n        answer = 'Yes'\n    elif A!= B and A!= C:\n        answer = 'No'\n    elif B == C:\n        answer = 'Yes'\n    else:\n        answer = 'No'\n\n    return answer",
        "test": "assert solution(\"1 1 1\") == \"Yes\"",
        "num_ids": 2475,
        "indeed": false
    },
    {
        "number": 4289,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2:\n        return ''\n    N = int(stdin[0])\n    T = int(stdin[1])\n    H_1 = int(stdin[2])\n    H_2 = int(stdin[3])\n    n = 2\n    while n <= N:\n        if H_1 < T:\n            H_1 += H_2\n        else:\n            H_1 -= T\n        n += 1\n    H_1 += H_2\n    if H_1 < T:\n        H_1 += H_2\n    elif H_1 == T:\n        return 'H_1'\n    else:\n        return 'H_2'\n",
        "test": "assert solution(stdin) == 1",
        "num_ids": 4440,
        "indeed": false
    },
    {
        "number": 4290,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    def sum_odd_even(n):\n        return sum(i for i in range(1, n) if i % 2 == 0) + sum(i for i in range(1, n) if i % 2!= 0) + sum(i for i in range(1, n) if i % 4 == 0)\n    answer = 0\n    numbers = list(map(int, stdin.split()))\n    for n in numbers:\n        answer += sum_odd_even(n)\n    return str(answer)",
        "test": "assert solution(\"2 1\") == \"1\"",
        "num_ids": 1006,
        "indeed": false
    },
    {
        "number": 4291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    T, N, Q = map(int, stdin.split())\n    l, r = map(int, stdin.split())\n    A = set(list(stdin.split()))\n    C = set(list(stdin.split()))\n    G = set(list(stdin.split()))\n    substring = list(A.intersection(C.intersection(G.intersection(['C', 'A', 'G'])), set(['A', 'C', 'G'])))\n    count = 0\n    for i in range(l, r + 1):\n        if substring[i - l] == 'C':\n            count += 1\n    for i in range(Q):\n        l_i, r_i = map(int, stdin.split())\n        if l <= l_i <= r and r <= r_i <= N:\n            print(count)",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 4292,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n  N, K = map(int, stdin.split())\n  p = map(int, stdin.split())\n  def gcd(a,b):\n    while a!=0:\n      a, b = b % a, a\n    return b\n  p_1 = gcd(p[0],p[1])\n  p_2 = gcd(p[1],p[2])\n  p_3 = gcd(p[2],p[3])\n  p_4 = gcd(p[3],p[4])\n  p_5 = gcd(p[4],p[5])\n  def get_total(a,b):\n    return a*b*(p_1+p_2+p_3+p_4+p_5)\n  min_price = get_total(p_1,p_2) + get_total(p_2,p_3) + get_total(p_3,p_4) + get_total(p_4,p_5)\n  return str(min_price)",
        "test": "assert solution([\"50\",\"100\",\"80\",\"120\",\"80\",\"120\",\"80\",\"120\",\"80\",\"120\",\"80\"]) == \"200\"",
        "num_ids": 1506,
        "indeed": false
    },
    {
        "number": 4293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    A, B, C = map(int, stdin.split())\n    D = [P, Q, R]\n    D.sort()\n    dp = [0 for _ in range(D[1]-D[0]+1)]\n    for i in range(D[0], D[1]):\n        dp[i] = (D[0] + D[1])\n    for i in range(D[1], D[2]):\n        dp[i] = (D[0])\n    for i in range(D[2], D[3]+1):\n        dp[i] = (D[1])\n    for i in range(D[3], D[4]+1):\n        dp[i] = (D[2])\n    sum = 0\n    for i in range(D[4], D[5]+1):\n        sum = sum + dp[i]\n    if sum >= R:\n        return str(sum)\n    else:\n        return '0'",
        "test": "assert solution(stdin) == '5'",
        "num_ids": 2539,
        "indeed": false
    },
    {
        "number": 4294,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A, B = map(int, stdin.split())\n    \n    if A <= B and A <= n:\n        return str(A)\n    elif B <= A and B <= n:\n        return str(B)\n    elif n <= A and n <= B:\n        return str(n)\n    else:\n        return \"10\"",
        "test": "assert solution(0, 3) == 10",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 4295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a = abs(N-K)\n    if N == 0:\n        print(a)\n        return\n    for i in range(2, a):\n        if N % i == 0:\n            break\n    else:\n        print(a)\n        return\n    if N == 0:\n        print(a)\n        return\n    for _ in range(2):\n        N -= i\n    return solution(str(N))\n\n-----Time complexity-----\nO(N) because we iterate through the array each time and we change the minimum value for the new value.\nO(N) because we iterate through the array each time and we change the value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(1) because the new minimum value is the max(1, K) - max(0, K)\n\nO(N) because we iterate through the array each time and we change the minimum value for the new value.\nO(N) because we iterate through the array each time and we change the value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\n\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(1) because the new minimum value is the max(1, K) - max(0, K)\n\nIn the above notes, we learned how to iterate through the array and change the minimum value for each operation.\n\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(1) because the new minimum value is the max(1, K) - max(0, K)\n\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(1) because the new minimum value is the max(1, K) - max(0, K)\n\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\nO(N) because we iterate through the array each time and we change the minimum value for the new minimum value.\n",
        "test": "assert solution(\"2\") == \"0\"",
        "num_ids": 2175,
        "indeed": false
    },
    {
        "number": 4296,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(num) for num in stdin.split()]\n    n = len(nums)\n    if max(nums) >= 22:\n        return 'win'\n    else:\n        return 'bust'",
        "test": "assert solution(\"123 456 789\") == \"win\"",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 4297,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    def check(n):\n        if n < 2: return False\n        if n % 2!= 0: return False\n        return True\n    \n    def valid(n):\n        if n == 2: return True\n        if n < 3: return False\n        if n % 3!= 0: return False\n        return True\n    \n    for i in range(1, int(stdin) + 1):\n        if valid(i):\n            for j in range(2, n + 1):\n                if not check(j) and valid(j):\n                    return i\n    return \"No\"\n\nN = int(stdin)\nprint(solution(N))",
        "test": "assert solution(4) == 2",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 4298,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin.split('\\n')[0])\n    N = int(stdin.split('\\n')[1])\n    return str(min(2 * D + 2 * N, N + 1))\n",
        "test": "assert solution(",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 4299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 0:\n        return \"\"\n    if N == 0:\n        return \"pon\"\n    elif N == 1:\n        return \"bon\"\n    elif N == 2:\n        return \"hon\"\n    elif N == 3:\n        return \"pon\"\n    elif N == 4:\n        return \"bon\"\n    elif N == 5:\n        return \"hon\"\n    elif N == 6:\n        return \"pon\"\n    elif N == 7:\n        return \"bon\"\n    elif N == 8:\n        return \"hon\"\n    elif N == 9:\n        return \"pon\"\n    else:\n        return \"pon\"\n\n\nprint(solution(\"16\"))\n\ndef",
        "test": "assert solution(input) == \"pon\", \"solution test failed\"",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 4300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, *rest = map(int, stdin.split())\n    d_i = [int(item) for item in rest]\n    return str(sum(d_i))\n",
        "test": "assert solution(\"3 1 2\") == \"3\"",
        "num_ids": 1115,
        "indeed": false
    },
    {
        "number": 4301,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    A_N = list(map(int, stdin.split()))\n    max = A_N[0]\n    max_1 = 0\n    max_2 = 0\n    max_3 = 0\n    for i in range(1, len(A_N)):\n        if A_N[i] > max:\n            max = A_N[i]\n        if A_N[i] > max_1:\n            max_1 = A_N[i]\n        if A_N[i] > max_2:\n            max_2 = A_N[i]\n        if A_N[i] > max_3:\n            max_3 = A_N[i]\n    if max_2 > max_1 and max_2 > max_3:\n        max = max_2\n    elif max_1 > max_2 and max_1 > max_3:\n        max = max_1\n    return str(max)\n",
        "test": "assert solution(\"2 4 3\") == \"4\"",
        "num_ids": 778,
        "indeed": false
    },
    {
        "number": 4302,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split()]\n    ans = max(A, B)\n    while True:\n        if ans == B:\n            return str(ans)\n        ans += 1\n        if ans > B:\n            return str(ans)\n",
        "test": "assert solution('2 4') == '4'",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 4303,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split(' ')[0])\n    K = int(stdin.strip().split(' ')[1])\n    x_list = list(map(int, stdin.strip().split(' ')[2:]))\n    x_list.sort()\n    x = 0\n    answer = 0\n    for i in range(N):\n        answer += x_list[i]\n        x += 1\n        if x > K:\n            x -= K\n            answer += K\n    return str(answer)\n\n\"\"\"\ndef",
        "test": "assert solution(input()) == \"40\"",
        "num_ids": 1460,
        "indeed": false
    },
    {
        "number": 4304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if (a >= 10) or (b >= 15):\n        return \"error\"\n    if (a > b):\n        return \"error\"\n    result = 0\n    for i in range(a, b + 1):\n        if i > 99:\n            break\n        if i < 100:\n            if i % 10 == 0:\n                result += i\n    return str(result)\n",
        "test": "assert solution(\"1 3\") == \"0\"",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 4305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n",
        "test": "assert solution(2,4) == \"2\"",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 4306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    num_of_seconds = 0\n    lines = stdin.split()\n    for i in range(len(lines)):\n        A = int(lines[i])\n        B = int(lines[i+1])\n        C = int(lines[i+2])\n        D = int(lines[i+3])\n        if A == B and C == D:\n            num_of_seconds += 1\n    return str(num_of_seconds)",
        "test": "assert solution(input) == \"50\"",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 4307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    from math import floor, sqrt\n    N, T = map(int, stdin.split())\n    divs = list(map(int, stdin.split()))\n    even_divs = [div for div in divs if div % 2 == 0]\n    odd_divs = [div for div in divs if div % 2!= 0]\n    odds = list(set(odd_divs) - set(even_divs))\n    ans = floor(sqrt(len(odds)))\n    if T < ans:\n        print(len(odds))\n    else:\n        print(ans)\n",
        "test": "assert solution(999) == 3",
        "num_ids": 4153,
        "indeed": false
    },
    {
        "number": 4308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    minimum = max(n,k)\n    for i in range(1,k+1):\n        minimum = min(minimum,n//i)\n    return str(minimum)\n\nTest.assert_equals(solution(\"7 3\"), \"1\")\nTest.assert_equals(solution(\"2 2 4 2\"),\"1\")\nTest.assert_equals(solution(\"0 0 0 0 0\"),\"1\")\nTest.assert_equals(solution(\"1 0 0 0 0\"),\"0\")\nTest.assert_equals(solution(\"0 0 0 0 0 0\"),\"0\")",
        "test": "assert solution(\"7 3\") == \"1\"",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 4309,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 2100,
        "indeed": false
    },
    {
        "number": 4310,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    cost = 0\n    for _ in range(A_1):\n        a, b = map(int, input().split())\n        cost += abs(b - a)\n    for _ in range(A_2):\n        a, b = map(int, input().split())\n        cost += abs(b - a)\n    for _ in range(A_3):\n        a, b = map(int, input().split())\n        cost += abs(b - a)\n    print(cost)\n\n-----Sample Output-----\n5\n\nWhen the tasks are completed in the following order, the total cost will be 5, which is the minimum:\n - Complete the first task at cost 0.\n - Complete the third task at cost 2.\ndef",
        "test": "assert solution(\"3 6\") == 6, \"The minimum cost should be 6\"",
        "num_ids": 1622,
        "indeed": false
    },
    {
        "number": 4311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def f(n):\n        if n%2==0:\n            return n/2\n        else:\n            return 3*n+1\n    for i in range(1,n+1):\n        print(f(i))\n        \n",
        "test": "assert solution(stdin) == 5",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 4312,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int,stdin.split())\n    if a>=c and c>=d:\n        return \"Yes\"\n    elif a>=c:\n        return \"No\"\n    elif c>=d:\n        return \"No\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"10 9 10 10\") == \"Yes\"",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 4313,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[-1])\n    C = list(map(int, stdin.split()[:-1]))\n    G = list(map(int, stdin.split()[1:]))\n    C.sort()\n    G.sort()\n    \n    answer = 0\n    for i in range(len(C)):\n        for j in range(i+1, len(C)):\n            answer = max(answer, C[i]+C[j])\n    return str(answer)\n",
        "test": "assert solution(\"5 10 2 3 4 5\") == \"15\"",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 4314,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    H, W = map(int, stdin.split())\n    a_grid = [[0 for _ in range(W)] for _ in range(H)]\n    for i in range(N):\n        a_grid[i][0] = int(stdin[i])\n    for i in range(1, H):\n        for j in range(M):\n            if a_grid[i][j] == 1:\n                a_grid[i][j+1] = 0\n    for i in range(1, H):\n        for j in range(1, W):\n            if a_grid[i][j] == 1:\n                a_grid[i-1][j] = 0\n                a_grid[i][j-1] = 0\n    for i in range(H):\n        a_grid[i][W-1] = 0\n    for i in range(H-1, -1, -1):\n        a_grid[i][0] = 0\n    for i in range(M):\n        a_grid[0][i] = 0\n    for i in range(M):\n        a_grid[H-1][i] = 0\n    for i in range(1, H):\n        a_grid[i][W-1] = 0\n    for i in range(1, H):\n        a_grid[i][0] = 0\n    for i in range(1, H):\n        a_grid[i][W-1] = 0\n    answer = \"\"\n    for i in range(1, H):\n        for j in range(1, W):\n            if a_grid[i][j] == 1:\n                answer += \".\"\n            else:\n                answer += \"#\"\n        answer += \" \"\n    return answer\n\n-----Sample Output-----\n#####\n",
        "test": "assert solution(stdin) == \"####\"",
        "num_ids": 2982,
        "indeed": false
    },
    {
        "number": 4315,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    r=int(input())\n    result=6*(r**2)\n    return f'{result:.2f}'\n\ndef",
        "test": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"6.28318530717958623200\"",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 4316,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    dic = dict()\n    for i in stdin:\n        dic[i] = dic.get(i, 0) + 1\n    for i in dic:\n        if dic[i] % 2 == 1:\n            return \"No\"\n    return \"Yes\"",
        "test": "assert solution(\"ASSA\") == \"Yes\"",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 4317,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(i) for i in stdin.split()]\n    nums.sort(reverse=True)\n    return str(nums[-1]*nums[-2])",
        "test": "assert solution(input()) == \"10\"",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 4318,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    h_min = 100\n    h_max = 0\n    for i in range(n):\n        h_max = max(h_max, int(stdin[i].strip()))\n    for i in range(n):\n        h_min = min(h_min, int(stdin[i].strip()))\n    for i in range(n):\n        if int(stdin[i].strip()) < h_min:\n            print(0)\n            return\n    print(n-1)\n    return",
        "test": "assert solution(",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 4319,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    steps = 0\n    for i in range(n-1):\n        if a[i+1] - a[i] == 1:\n            steps += 1\n        else:\n            break\n    return str(steps)\n\n'''\n",
        "test": "assert solution(stdin) == \"4\"",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    x = n + 2**(t - 1)\n    k = 2\n    while True:\n        if not (k <= x <= n):\n            break\n        x = x + 2**(t - 1)\n        k += 1\n    return str(x)\n\n-----Test-----\nInput\n5\n1 3 3 3 4\n5\n5\n1\n3\n1\n5\n1\n3\n1\n1\n2\n1\nOutput\n5\n3\n3\n1\n\n------Explanation------\n\nInput:\n5\n5\n2\n2\n1\n1\n3\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\n------Explanation------\n\nInput:\n5\n5\n2\n2\n1\n1\n3\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\n------Explanation------\n\nInput:\n5\n5\n2\n2\n1\n1\n1\n3\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:\n\nOutput:",
        "test": "assert solution(stdin) == 6",
        "num_ids": 4643,
        "indeed": false
    },
    {
        "number": 4321,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = str(n - 1)\n    b = str(k)\n    if len(b) > 1:\n        n = a + b[1:]\n    elif b == '0':\n        n = a + '1'\n    else:\n        n = a + b\n    return n\n\ndef",
        "test": "assert solution(\"0 0\") == 0",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    res_1 = max(n//2-1, 0)\n    for i in range(1, n//2 + 1):\n        res_2 = max(n//i-1, 0)\n        print(f\"{res_1} {res_2}\")\n        if res_1 == res_2:\n            break\n    else:\n        return \"0\"\n    print(f\"{res_1} {res_2}\")\n    print(f\"{res_1} {res_2}\")\n    return \"0\"",
        "test": "assert solution(stdin) == '3'",
        "num_ids": 2349,
        "indeed": false
    },
    {
        "number": 4323,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = []\n    count = 0\n    b.sort(reverse=True)\n    if (a[0] + a[n - 1]) >= m:\n        count += n - 1\n    for i in range(1, n):\n        if a[i - 1] + a[i] <= m:\n            count += 1\n    return str(count)\n\n-----Constraints-----\n0 < stdin.length <= 100\n1 <= stdin.length <= 10^5\n1 <= n, m <= 100\n-100 <= a[i] <= 100\n\nTime Limit: 1sec\n\nExample:\nInput:\n4 21\n10 8\n7 4\n3 1\n5 4\n\nOutput:\n2\n'''",
        "test": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"1\"",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [0] * n\n    b = [0] * n\n    answer = ''\n    for i in range(n):\n        a[i] = int(stdin[i])\n        b[i] = len(set(stdin[i]))\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if a[j] == a[i] and b[j] == b[i]:\n                    answer += 'qwerty'\n                elif a[j] == a[i] and b[j] > b[i]:\n                    answer += 'qwerty'\n                elif a[j] == a[i] and b[j] == b[i]:\n                    answer += 'qwerty'\n                else:\n                    answer += 'qwerty'\n            else:\n                if a[i] == a[j] and b[i] == b[j]:\n                    answer += 'qwerty'\n                elif a[i] == a[j] and b[i] > b[j]:\n                    answer += 'qwerty'\n                elif a[i] == a[j] and b[i] == b[j]:\n                    answer += 'qwerty'\n                else:\n                    answer += 'qwerty'\n    return answer\n",
        "test": "assert solution(stdin) == \"leet\"",
        "num_ids": 1632,
        "indeed": false
    },
    {
        "number": 4325,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, T = [int(i) for i in stdin.split()]\n    sum_minutes = 0\n    for t in range(T):\n        sum_minutes += max(N, T - t - 1)\n    return str(sum_minutes)\n\"\"\"\n\ndef",
        "test": "assert solution(s) == \"12\"",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 4326,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    group = []\n    for i in range(len(stdin)):\n        if stdin[i] =='':\n            group.append(stdin[i])\n        elif len(group) >= 3:\n            ans += 1\n            break\n        else:\n            group.append(stdin[i])\n    if ans == len(group):\n        return \"x\"\n    return \"\".join(group)\n\nfor i in range(int(input())):\n    x = input().split()\n    print(solution(x))",
        "test": "assert solution(4) == \"2\"",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 4327,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    pieces = [int(x) for x in stdin.split()]\n    apples = [pieces[i] for i in range(len(pieces) - 1)]\n    peice = pieces[-1]\n    pieces = pieces[:-1]\n    pieces.extend([peice, pieces[-1]])\n    pieces = sorted(pieces, key=lambda x: x * (-1))\n    print(pieces)\n    return str(len(pieces))",
        "test": "assert solution(\"1 1\"), \"1 1\"",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 4328,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(x) for x in stdin.split()]\n    divisor = arr[0]\n    for i in range(1, len(arr)):\n        divisor = divisor - arr[i]\n    if divisor % int(arr[1]) == 0:\n        return str(int(arr[1]) + divisor)\n    else:\n        return str(divisor - arr[1])",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 4329,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"No\"\n    T = stdin[0]\n    S = stdin[1]\n    if not(T.isalpha()):\n        answer = \"No\"\n    else:\n        for i in range(len(S)):\n            if T[i] == S[i]:\n                T = T[:i] + S[i + 1:]\n                break\n        if len(T) == len(S):\n            answer = \"Yes\"\n    print(answer)\n    return answer\n\nprint(solution(\"chokudai\"))\n",
        "test": "assert solution(\"chokudai\") == \"Yes\"",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 4330,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    \n    lst = [int(x) for x in list(stdin)]\n    \n    for i in range(len(lst)):\n        if lst[i] - K < 0:\n            return 'IMPOSSIBLE'\n        lst[i] -= K\n    \n    return str(int(\"\".join(str(y) for y in lst)))\n\n'''\ndef",
        "test": "assert solution([\"1\", \"0\"]) == \"IMPOSSIBLE\"",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 4331,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(100, 1000):\n        if stdin.count(str(i)[-1]) == 1:\n            return 'Yes'\n    return 'No'\n\n###############",
        "test": "assert solution(str(117)) == \"Yes\"",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 4332,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"Yes\" if n % n == 0 else \"No\"",
        "test": "assert solution(12) == 'Yes','solution(12) must return Yes'",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 4333,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return ('-1','-1','-1','-1')",
        "test": "assert solution('aabbb') == 'cba'",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 4334,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    S, T = map(str, stdin.split())\n    U = stdin.split()\n    if len(S)!= len(T):\n        return -1\n    if S[0] == T[0]:\n        return len(U) - 2\n    return len(U) - 1\n",
        "test": "assert solution(\"red blue\") == \"2 4\"",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 4335,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N = int(input())\n    s = str(input())\n    T = list(s)\n    T1 = list(T)\n    for i in range(N):\n        T1.append(T1.pop())\n    if T == T1:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(\"abcabc\"))",
        "test": "assert solution(input) == 'Yes'",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 4336,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 1 or n == 2:\n        return str(0)\n    \n    dp = [1 for i in range(n)]\n    for j in range(n-1, -1, -1):\n        left, right = 0, n-1\n        while left < right:\n            if left + (j+1)*dp[j] >= n:\n                break\n            dp[left] = dp[left+j]\n            left += j\n        if left == n-1:\n            dp[right] = dp[n-1] + 1\n            break\n        if dp[right] < dp[n-1]:\n            dp[right] = dp[n-1] + 1\n    return str(max(dp))\n\"\"\"\nclass Solution:\n    def solve(self, matrix: List[List[int]]) -> int:\n        return max(solve(row) for row in matrix)\n    \n    def solve2(self, matrix: List[List[int]]) -> int:\n        \n",
        "test": "assert solution('2 2') == '0.000000'",
        "num_ids": 2480,
        "indeed": false
    },
    {
        "number": 4337,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = []\n    for i in range(1, n+1):\n        numbers.append(i)\n    \n    for i in range(n):\n        if(numbers[i] % 2 == 0):\n            numbers[i] = \"P\"\n        elif(numbers[i] % 2 == 1):\n            numbers[i] = \"W\"\n        else:\n            numbers[i] = \"G\"\n    \n    for i in range(n-1, -1, -1):\n        if numbers[i] % 3 == 0:\n            numbers[i] = \"P\"\n        elif numbers[i] % 3 == 1:\n            numbers[i] = \"W\"\n        elif numbers[i] % 3 == 2:\n            numbers[i] = \"G\"\n        else:\n            numbers[i] = \"Y\"\n            \n    return \"\".join(numbers)",
        "test": "assert solution(input) == \"Four\"",
        "num_ids": 2417,
        "indeed": false
    },
    {
        "number": 4338,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.split()]\n    doors = [int(d) for d in stdin.split()]\n    \n    def solve():\n        if (d := min(d := (x + y) - doors[0], (x + y) - doors[1])):\n            print(min(x, y) + d)\n        else:\n            print(0)\n        \n    solve()\n\n    return\n-----Solution-----\n5\n\n'''\n\ndef",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 1537,
        "indeed": false
    },
    {
        "number": 4339,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return solution_two()\n    \n    # solution(stdin.readline().rstrip())\n",
        "test": "assert solution(stdin) == 0",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = a[::-1]\n    res = \"\"\n    for i in range(n - 1):\n        res += str(int(a[i])) + \" \"\n    return res + str(int(a[-1]))\n\nprint(solution(input()))",
        "test": "assert solution(input()[:-1]) == solution(input()[:-1])",
        "num_ids": 1844,
        "indeed": false
    },
    {
        "number": 4341,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = []\n    for _ in range(n):\n        graph.append(list(map(int, input().split())))\n    for _ in range(m):\n        edges = list(map(int, input().split()))\n        graph[edges[0]][edges[1]] = 1\n    result = 0\n    for k in range(n):\n        if graph[k][k] == 0:\n            pass\n        else:\n            result += 1\n            for j in range(k+1, n):\n                if graph[j][k] == 0:\n                    break\n                else:\n                    result += 1\n    return str(result)\n",
        "test": "assert solution(stdin) == 1",
        "num_ids": 1321,
        "indeed": false
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a = [0] * n\n    b = [0] * n\n    for i in range(n):\n        a[i], b[i] = map(int, stdin.split())\n    \n    edges = []\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            edges.append((a[i], b[i], a[j], b[j]))\n    \n    good_edges = []\n    for edge in edges:\n        if edge[1] == edge[2]:\n            continue\n        good_edges.append(edge)\n        \n    print(len(good_edges))\n    print('\\n'.join(map(str, sorted(good_edges))))\n    return '\\n'.join(map(str, sorted(good_edges)))\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\ndef",
        "test": "assert solution(\"2 4\"), \"4\"",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 4343,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    \n    s = sorted(list(set(input().split())))\n    \n    if len(s) % 2!= 0:\n        return s[(len(s)//2) - 1]\n    \n    else:\n        return s[(len(s)//2) + 1]\n\n\n-----Examples-----\n\nInput\n2\naz\nbf\n\nOutput\nbc\n\nInput\n5\nafogk\nasdji\n\nOutput\nalvuw\n\nInput\n6\nnijfvj\ntvqhwp\n\nOutput\nqoztvz\ndef",
        "test": "assert solution(stdin) == \"bc\"",
        "num_ids": 1061,
        "indeed": false
    },
    {
        "number": 4344,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip().split()[-1])\n    student_list = list(map(int, stdin.strip().split()))\n    \n    def sort(student_list):\n        if len(student_list) == 0:\n            return student_list\n        else:\n            return sorted(student_list, key=lambda student: student_list.count(student))\n\n    def is_unique(student_list):\n        for student in student_list:\n            if student_list.count(student) > 1:\n                return False\n        return True\n\n    def two_sum(student_list):\n        temp = []\n        for student in student_list:\n            if student in temp:\n                return student\n            else:\n                temp.append(student)\n\n    def remove_duplicates(student_list):\n        new_student_list = []\n        for student in student_list:\n            if student not in new_student_list:\n                new_student_list.append(student)\n        return new_student_list\n\n    answer = list(map(two_sum, student_list))\n    answer = remove_duplicates(answer)\n    answer = sort(answer)\n    answer = sort(answer)\n    answer = sort(answer)\n    answer = sort(answer)\n    answer = sort(answer)\n\n    if is_unique(answer) and is_unique(answer):\n        answer = list(answer)\n    elif is_unique(answer) and is_unique(remove_duplicates(answer)):\n        answer = list(answer)\n    elif is_unique(answer) and is_unique(remove_duplicates(remove_duplicates(answer))):\n        answer = list(answer)\n    else:\n        answer = [answer]\n\n    answer = list(map(str, answer))\n    print(answer)\n\n    return answer[0] if len(answer) == 1 else \"NO\"\n",
        "test": "assert solution('{1 2 5}') == 'YES'",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 4345,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    for i in range(n):\n        if a[i] < 0:\n            a[i] *= -1\n    \n    for i in range(n):\n        if a[i] < 0:\n            a[i] *= -1\n        for j in range(i+1, n):\n            if a[i] < 0 and a[j] < 0:\n                a[i] *= -1\n                a[j] *= -1\n    \n    res = \"\"\n    \n    for i in range(n):\n        if a[i]!= 0:\n            res += str(a[i])\n    \n    if res[0] == res[1] == res[2] == res[3] or res[0] == res[1] == res[3] == res[4] or res[2] == res[4] == res[6] == res[8] or res[2] == res[8] == res[6] == res[0] == res[4] or res[4] == res[8] == res[6] == res[2] == res[0] == res[1]:\n        return \"YES\"\n    \n    return \"NO\"\n",
        "test": "assert solution(input()) == \"YES\"",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 4346,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    t, *L, *v, *t_ = list(map(int, stdin.split()))\n\n    if len(v) == 1:\n        print(t)\n    else:\n        result = [0] * (t + 1)\n        s = 0\n        for i in range(len(v)):\n            s += v[i] * t_[i]\n            result[s % (t + 1)] += 1\n        print(sum(result) % (t + 1))\n",
        "test": "assert solution(inp) == answer, \"Your code failed to solve this problem.\"",
        "num_ids": 2451,
        "indeed": false
    },
    {
        "number": 4347,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return int(n/2)\n    else:\n        return int(n/2) + 1\n",
        "test": "assert solution(2) == 1",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 4348,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    # Modify the pseudocode below\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    res = ''\n    while s:\n        a = s.find('a')\n        b = s.find('b')\n        c = s.find('c')\n        d = s.find('d')\n        e = s.find('e')\n        f = s.find('f')\n        g = s.find('g')\n        h = s.find('h')\n        i = s.find('i')\n        j = s.find('j')\n        k = s.find('k')\n        if a!= -1 and b!= -1 and c!= -1 and d!= -1 and e!= -1 and f!= -1 and g!= -1 and h!= -1 and i!= -1 and j!= -1 and k!= -1:\n            res += s[a:b]\n            s = s[b:c]\n            s = s[c:d]\n            s = s[d:e]\n            s = s[e:f]\n            s = s[f:g]\n            s = s[g:h]\n            s = s[h:i]\n            s = s[i:j]\n            s = s[j:k]\n            break\n        else:\n            s = s[:n]\n    if res:\n        res += s\n    else:\n        return ''\n    return res\n\n\nprint(solution(stdin))\n",
        "test": "assert solution(stdin) == \"u\", \"should return u\"",
        "num_ids": 2668,
        "indeed": false
    },
    {
        "number": 4349,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    s = set()\n    for i in range(1, n + 1):\n        s.add(t[i - 1] * k)\n    print(s)\n    return min(s)\n\ndef",
        "test": "assert solution(stdin) == 20",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 4350,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    k = 0\n    for _ in range(int(stdin)):\n        k += 1\n        n, m = map(int, stdin.split())\n        grid = []\n        for i in range(n):\n            grid.append(stdin.split(\"\\n\")[i].split(\" \")[1:])\n        \n        k += 1\n        \n        # arrange\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"*\":\n                    grid[i][j] = \".\"\n                elif grid[i][j] == \".\":\n                    grid[i][j] = \"*\"\n        \n        # draw\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"*\":\n                    grid[i][j] = \".\"\n                elif grid[i][j] == \".\":\n                    grid[i][j] = \"*\"\n        \n        # check\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"*\":\n                    grid[i][j] = \".\"\n                elif grid[i][j] == \".\":\n                    grid[i][j] = \"*\"\n    \n    return str(k)\n\n\n----------------------",
        "test": "assert solution(input()) == \"3 3 1\"",
        "num_ids": 1116,
        "indeed": false
    },
    {
        "number": 4351,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    num = [int(i) for i in stdin.split()]\n    if num[0] < 10 or num[-1] < 10:\n        return \"No\"\n    num = num[1:-1]\n    for i in range(0,len(num)-1):\n        if num[i] > num[i+1]:\n            return \"No\"\n    return \"Yes\"\n\n\"\"\"\nGiven a string, find if the input string is a palindromic or not.\n\nA palindromic string is one where every other char of the string is a palindromic char.\n\"\"\"\n\nclass Solution:\n    def isPalindrome(self, str: str) -> bool:\n        if len(str) == 1:\n            return True\n        \n        return str == str[::-1]\n",
        "test": "assert solution(\"6\") == \"No\"",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 4352,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    k = int(stdin[1])\n    # A,B,C,D,E,F\n    # B,D,F,C,A,E\n    # D,F,A,C,E,F\n    # E,F,D,A,C,E\n    # F,D,E,A,C,F\n    # F,E,D,A,C,E\n    # C,E,F,A,C,E\n    # A,E,F,D,C,E\n    # D,F,E,A,C,E\n    # E,F,D,A,C,E\n\n    l = len(stdin)\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    for i in range(l):\n        if stdin[i].isdigit() and int(stdin[i]) >= 1 and int(stdin[i]) <= 13:\n            a += 1\n        elif stdin[i].isdigit() and int(stdin[i]) >= 1 and int(stdin[i]) <= 13:\n            b += 1\n        elif stdin[i].isdigit() and int(stdin[i]) >= 1 and int(stdin[i]) <= 13:\n            c += 1\n        elif stdin[i].isdigit() and int(stdin[i]) >= 1 and int(stdin[i]) <= 13:\n            d += 1\n        elif stdin[i].isdigit() and int(stdin[i]) >= 1 and int(stdin[i]) <= 13:\n            e += 1\n        elif stdin[i].isdigit() and int(stdin[i]) >= 1 and int(stdin[i]) <= 13:\n            f += 1\n\n    if a == 1:\n        return 'A'\n    if b == 1:\n        return 'B'\n    if c == 1:\n        return 'C'\n    if d == 1:\n        return 'D'\n    if e == 1:\n        return 'E'\n    if f == 1:\n        return 'F'\n    if a == 2 and b == 2 and c == 2 and d == 2 and e == 2 and f == 2:\n        return 'D'\n    if a == 3 and b == 3 and c == 3 and d == 3 and e == 3 and f == 3:\n        return 'F'\n    if a == 4 and b == 4 and c == 4 and d == 4 and e == 4 and f == 4:\n        return 'D'\n    if a == 5 and b == 5 and c == 5 and d == 5 and e == 5 and f == 5:\n        return 'F'\n    if a == 6 and b == 6 and c == 6 and d == 6 and e == 6 and f == 6:\n        return 'D'\n    if a == 7 and b == 7 and c == 7 and d == 7 and e == 7 and f == 7:\n        return 'F'\n    if a == 8 and b == 8 and c == 8 and d == 8 and e == 8 and f == 8:\n        return 'D'\n    if a == 9 and b == 9 and c == 9 and d == 9 and e == 9 and f == 9:\n        return 'F'\n    if a == 10 and b == 10 and c == 10 and d == 10 and e == 10 and f == 10:\n        return 'D'\n    if a == 11 and b == 11 and c == 11 and d == 11 and e == 11 and f == 11:\n        return 'F'\n    if a == 12 and b == 12 and c == 12 and d == 12 and e == 12 and f == 12:\n        return 'D'\n    if a == 13 and b == 13 and c == 13 and d == 13 and e == 13 and f == 13:\n        return 'F'\n    if a == 1 and b == 1 and c == 1 and d == 1 and e == 1 and f == 1:\n        return 'A'\n    if a == 2 and b == 2 and c == 2 and d == 2 and e == 2 and f == 2:\n        return 'B'\n    if a == 3 and b == 3 and c == 3 and d == 3 and e == 3 and f == 3:\n        return 'C'\n    if a == 4 and b == 4 and c == 4 and d == 4 and e == 4 and f == 4:\n        return 'D'\n    if a == 5 and b == 5 and c == 5 and d == 5 and e == 5 and f == 5:\n        return 'E'\n    if a == 6 and b == 6 and c == 6 and d == 6 and e == 6 and f == 6:\n        return 'F'\n    if a == 7 and b == 7 and c == 7 and d == 7 and e == 7 and f == 7:\n        return 'D'\n    if a == 8 and b == 8 and c == 8 and d == 8 and e == 8 and f == 8:\n        return 'E'\n    if a == 9 and b == 9 and c == 9 and d == 9 and e == 9 and f == 9:\n        return 'F'\n    if a == 10 and b == 10 and c == 10 and d == 10 and e == 10 and f == 10:\n        return 'D'\n    if a == 11 and b == 11 and c == 11 and d == 11 and e == 11 and f == 11:\n        return 'E'\n    if a == 12 and b == 12 and c == 12 and d == 12 and e == 12 and f == 12:\n        return 'F'\n    if a == 13 and b == 13 and c == 13 and d == 13 and e == 13 and f == 13:\n        return 'D'\n    if a == 1 and b == 1 and c == 1 and d == 1 and e == 1 and f == 1:\n        return 'A'\n    if a == 2 and b == 2 and c == 2 and d == 2 and e == 2 and f == 2:\n        return 'B'\n    if a == 3 and b == 3 and c == 3 and d == 3 and e == 3 and f == 3:\n        return 'C'\n    if a == 4 and b == 4 and c == 4 and d == 4 and e == 4 and f == 4:\n        return 'D'\n    if a == 5 and b == 5 and c == 5 and d == 5 and e == 5 and f == 5:\n        return 'E'\n    if a == 6 and b == 6 and c == 6 and d == 6 and e == 6 and f == 6:\n        return 'F'\n    if a == 7 and b == 7 and c == 7 and d == 7 and e == 7 and f == 7:\n        return 'D'\n    if a == 8 and b == 8 and c == 8 and d == 8 and e == 8 and f == 8:\n        return 'E'\n    if a == 9 and b == 9 and c == 9 and d == 9 and e == 9 and f == 9:\n        return 'F'\n    if a == 10 and b == 10 and c == 10 and d == 10 and e == 10 and f == 10:\n        return 'D'\n    if a == 11 and b == 11 and c == 11 and",
        "test": "assert solution(\"3 3\") == \"Alice\"",
        "num_ids": 2495,
        "indeed": false
    },
    {
        "number": 4353,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(list(map(''.join, list(map(''.join, list(stdin.replace(',','').split(' ')))))))",
        "test": "assert solution(",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 4354,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s = [list(map(int, input().split())) for _ in range(N)]\n    s.sort()\n    answer = ''\n    for i in range(N):\n        for j in range(M):\n            if i == s[j][0] and j == s[j][1]:\n                answer += '1'\n                break\n        else:\n            answer += '0'\n    return answer[::-1]",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 1152,
        "indeed": false
    },
    {
        "number": 4355,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)\n    \n    pass\n",
        "test": "assert solution(2) == '14'",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 4356,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(str, stdin))\n    m, n = len(a), len(a[0])\n    \n    for i in range(m):\n        for j in range(n):\n            if a[i][j] == \"#\":\n                b = a[i+1:i+n, j+1:j+m]\n                if b.count(\"#\") == 1:\n                    return \"Yes\"\n                elif b.count(\"#\") == 0:\n                    return \"No\"\n    return \"No\"\n",
        "test": "assert solution(\"2 4 4 3 2 2\") == \"No\"",
        "num_ids": 991,
        "indeed": false
    },
    {
        "number": 4357,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    m, n = list(map(int, stdin.split(\" \")))\n    panel = [list(map(int, input().split())) for _ in range(n)]\n    panel.insert(0, [0]*(n+1))\n    panel.append([0]*(n+1))\n\n    result = 0\n    for i in range(n):\n        result = result + panel[i][i] + panel[i][n-1]\n    print(result)\n    return str(result)\n\nprint(solution(input()))\n\ndef",
        "test": "assert solution('10 20') == '10'",
        "num_ids": 2387,
        "indeed": false
    },
    {
        "number": 4358,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    p_i = max(a)\n    p_j = a[0]\n    q = a[0]\n    p = p_i\n    for i in range(1, n):\n        q = p_j\n        p = p_i + p_j\n        p_j = p\n        p_i = q - p_j\n    return str(p)\n",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    d1 = list(map(int, stdin.split()))\n    d2 = list(map(int, stdin.split()))\n    d3 = list(map(int, stdin.split()))\n    d4 = list(map(int, stdin.split()))\n    d5 = list(map(int, stdin.split()))\n    d6 = list(map(int, stdin.split()))\n    d7 = list(map(int, stdin.split()))\n    d8 = list(map(int, stdin.split()))\n    d9 = list(map(int, stdin.split()))\n    d10 = list(map(int, stdin.split()))\n    d11 = list(map(int, stdin.split()))\n    d12 = list(map(int, stdin.split()))\n    d13 = list(map(int, stdin.split()))\n    d14 = list(map(int, stdin.split()))\n    d15 = list(map(int, stdin.split()))\n    d16 = list(map(int, stdin.split()))\n    d17 = list(map(int, stdin.split()))\n    d18 = list(map(int, stdin.split()))\n    d19 = list(map(int, stdin.split()))\n    d20 = list(map(int, stdin.split()))\n    d21 = list(map(int, stdin.split()))\n    d22 = list(map(int, stdin.split()))\n    d23 = list(map(int, stdin.split()))\n    d24 = list(map(int, stdin.split()))\n    d25 = list(map(int, stdin.split()))\n    d26 = list(map(int, stdin.split()))\n    d27 = list(map(int, stdin.split()))\n    d28 = list(map(int, stdin.split()))\n    d29 = list(map(int, stdin.split()))\n    d30 = list(map(int, stdin.split()))\n    d31 = list(map(int, stdin.split()))\n    d32 = list(map(int, stdin.split()))\n    d33 = list(map(int, stdin.split()))\n    d34 = list(map(int, stdin.split()))\n    d35 = list(map(int, stdin.split()))\n    d36 = list(map(int, stdin.split()))\n    d37 = list(map(int, stdin.split()))\n    d38 = list(map(int, stdin.split()))\n    d39 = list(map(int, stdin.split()))\n    d40 = list(map(int, stdin.split()))\n    d41 = list(map(int, stdin.split()))\n    d42 = list(map(int, stdin.split()))\n    d43 = list(map(int, stdin.split()))\n    d44 = list(map(int, stdin.split()))\n    d45 = list(map(int, stdin.split()))\n    d46 = list(map(int, stdin.split()))\n    d47 = list(map(int, stdin.split()))\n    d48 = list(map(int, stdin.split()))\n    d49 = list(map(int, stdin.split()))\n    d50 = list(map(int, stdin.split()))\n    d51 = list(map(int, stdin.split()))\n    d52 = list(map(int, stdin.split()))\n    d53 = list(map(int, stdin.split()))\n    d54 = list(map(int, stdin.split()))\n    d55 = list(map(int, stdin.split()))\n    d56 = list(map(int, stdin.split()))\n    d57 = list(map(int, stdin.split()))\n    d58 = list(map(int, stdin.split()))\n    d59 = list(map(int, stdin.split()))\n    d60 = list(map(int, stdin.split()))\n    d61 = list(map(int, stdin.split()))\n    d62 = list(map(int, stdin.split()))\n    d63 = list(map(int, stdin.split()))\n    d64 = list(map(int, stdin.split()))\n    d65 = list(map(int, stdin.split()))\n    d66 = list(map(int, stdin.split()))\n    d67 = list(map(int, stdin.split()))\n    d68 = list(map(int, stdin.split()))\n    d69 = list(map(int, stdin.split()))\n    d70 = list(map(int, stdin.split()))\n    d71 = list(map(int, stdin.split()))\n    d72 = list(map(int, stdin.split()))\n    d73 = list(map(int, stdin.split()))\n    d74 = list(map(int, stdin.split()))\n    d75 = list(map(int, stdin.split()))\n    d76 = list(map(int, stdin.split()))\n    d77 = list(map(int, stdin.split()))\n    d78 = list(map(int, stdin.split()))\n    d79 = list(map(int, stdin.split()))\n    d80 = list(map(int, stdin.split()))\n    d81 = list(map(int, stdin.split()))\n    d82 = list(map(int, stdin.split()))\n    d83 = list(map(int, stdin.split()))\n    d84 = list(map(int, stdin.split()))\n    d85 = list(map(int, stdin.split()))\n    d86 = list(map(int, stdin.split()))\n    d87 = list(map(int, stdin.split()))\n    d88 = list(map(int, stdin.split()))\n    d89 = list(map(int, stdin.split()))\n    d90 = list(map(",
        "test": "assert solution('3 15 20') == '1'",
        "num_ids": 3751,
        "indeed": false
    },
    {
        "number": 4360,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n  A_1, *A_n = map(int, stdin.split())\n  return str(1 / (1 + sum(map(lambda x: 1 / (x + 1), range(2, A_n + 1)))))\n\nPrinting 2, 3, and 4, 6, and so on will also be accepted.\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef",
        "test": "assert solution('2') == '7.5'",
        "num_ids": 2563,
        "indeed": false
    },
    {
        "number": 4361,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h_i = [int(i) for i in stdin.split()]\n    h_i.sort()\n    h_i = [i - min(h_i) for i in h_i]\n    h_i.sort()\n    h_i = [max(h_i) - i for i in h_i]\n    h_i.sort()\n    h_i = [i - min(h_i) for i in h_i]\n    \n    if h_i[0] == 1:\n        return str(h_i[1])\n    else:\n        return str(h_i[-1])\n",
        "test": "assert solution('5 3') == '2'",
        "num_ids": 2434,
        "indeed": false
    },
    {
        "number": 4362,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.split(' ')[0]\n    if alpha.isupper():\n        return 'A'\n    else:\n        return 'a'",
        "test": "assert solution(\"A\") == \"A\"",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 4363,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    \n    for _ in range(int(stdin)):\n        x, y, z = map(int, input().split())\n        if x+y+z == s:\n            print(1)\n        elif x+y+z < s:\n            print(2)\n        elif x+y+z > s:\n            print(3)\n        else:\n            print(0)\n",
        "test": "assert solution(stdin) == 6",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 4364,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split(' ')\n    if len(s)!= 4:\n        return 'NA'\n    i = 0\n    while i < len(s):\n        j = i + 1\n        if s[i].isdigit():\n            n = int(s[i])\n            m = s[j].split('-')\n            if len(m)!= 2:\n                return 'NA'\n            if m[0]!= '01' or m[1]!= 'MM':\n                return 'NA'\n            try:\n                j = int(s[j])\n                if j < 31:\n                    j = 31\n                i += 1\n                continue\n            except:\n                return 'NA'\n        return 'NA'\n    return 'NA'",
        "test": "assert solution('1905') == 'NA'",
        "num_ids": 4097,
        "indeed": false
    },
    {
        "number": 4365,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n   n = int(stdin)\n   numbers = []\n   if n % 2 == 0:\n       numbers.append(2)\n   else:\n       numbers.append(2)\n   for i in range(1, n):\n       numbers.append(numbers[i-1] * 2 + 1)\n   return str(len(numbers))\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n\n\nhttps://www.interviewbit.com/problems/solve-the-problem/\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n\ndef",
        "test": "assert solution(input()) == \"5\"",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 4366,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(stdin.split(','))\n    lst = [int(e) for e in lst]\n    return '21'[lst[0] - 1]\n",
        "test": "assert solution(\"1 2 4 5 8\") == \"9\"",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 4367,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    inner_ratings = []\n    for _ in range(N):\n        inner_ratings.append(int(stdin.strip()))\n    for _ in range(N, N*10):\n        inner_ratings.append(inner_ratings[-1] - 10*(10-_))\n    for i in range(N, N*10):\n        if inner_ratings[i] <= R:\n            inner_ratings[i] += 100\n    return str(sum(inner_ratings))",
        "test": "assert solution(input) == \"3719\"",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 4368,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n,k = list(map(int,stdin.split()))\n    if n == 1:\n        return str(n)\n    else:\n        a,b = n//(10**k),n%(10**k)\n        #print(a,b)\n        num = str(a**b)\n        #print(num)\n        return num\n\n\"\"\"",
        "test": "assert solution(stdin) == 2",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 4369,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return \"0\"\n    if n < 100:\n        return str(n)\n    \n    # N = 1,2,3,4,5,6,7,8,9\n    # 2 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    \n    # N = 2,3,4,5,6,7,8,9,10\n    # 2 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    \n    # N = 3,4,5,6,7,8,9,10,11\n    # 2 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2 3 4 5 6 7 8 9\n    # 1 2",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 2711,
        "indeed": false
    },
    {
        "number": 4370,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    def init(L, n):\n        if n == L:\n            if n == 1:\n                return '1'\n            return '2' * n\n        return '2' * (L - n) + '1' * (n - 1) + '2' * n\n\n    def operate(curr_str, curr_num, val):\n        if len(curr_str) == L:\n            if val == curr_num:\n                return curr_str\n            else:\n                return 'NO'\n\n        if val >= curr_num:\n            curr_str = curr_str + curr_str[:len(curr_str) - 1]\n            if curr_num == 1:\n                return curr_str\n            else:\n                return 'NO'\n\n        if val == curr_num + 1:\n            curr_str = curr_str + curr_str[:len(curr_str) - 1]\n            curr_num = curr_num - 1\n            return curr_str, curr_num\n\n        if val == curr_num - 1:\n            curr_str = curr_str + curr_str[:len(curr_str) - 1]\n            curr_num = curr_num - 1\n            return curr_str, curr_num\n\n    def solve(curr_str, curr_num, val):\n        if curr_num == 1:\n            return 'YES'\n        if val >= curr_num:\n            curr_str, curr_num = operate(curr_str, curr_num, val - curr_num)\n            return solve(curr_str, curr_num, val)\n\n        if val == curr_num + 1:\n            curr_str = curr_str + curr_str[:len(curr_str) - 1]\n            curr_num = curr_num - 1\n            return solve(curr_str, curr_num, val)\n\n        if val == curr_num - 1:\n            curr_str = curr_str + curr_str[:len(curr_str) - 1]\n            curr_num = curr_num - 1\n            return solve(curr_str, curr_num, val)\n\n    L = int(input())\n    curr_str = ''\n    curr_num = 0\n    curr_val = 0\n    val = 0\n    answer = solve(curr_str, curr_num, val)\n    print(answer)\n    return answer\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        operations = stdin.split()\n        n = int(operations[0])\n        L = int(operations[1])\n        curr_val = 0\n        curr_str = ''\n        result = ''\n        for i in range(L):\n            operations = stdin.split()\n            if operations[0] == 'Yay!':\n                result = operations[1] + result\n                curr_val = 1\n            elif operations[0] == 'NO':\n                result = operations[1] + result\n                curr_val = 0\n            elif operations[0] == '2':\n                result = operations[1] + result\n                curr_str = operations[2] + curr_str\n                curr_num = int(operations[3])\n                if curr_num == 0:\n                    curr_val = 1\n            elif operations[0] == '1':\n                result = operations[1] + result\n                curr_str = operations[2] + curr_str\n                curr_num = int(operations[3])\n                if curr_num == 0:\n                    curr_val = 1\n            else:\n                result = operations[1] + result\n                curr_str = operations[2] + curr_str\n                curr_num = int(operations[3])\n                if curr_num == 0:\n                    curr_val = 1\n        return result\n\n\ndef",
        "test": "assert solution(\"1 2\") == \"Yay!\"",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 4371,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(i) for i in stdin.split()))",
        "test": "assert solution(\"12\") == \"12\"",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  a = [int(x) for x in stdin.split()]\n  y = sum(a)\n  z = 0\n  for i in range(n):\n    for j in range(n):\n      if a[i]!= a[j]:\n        z += 1\n  return f'{y}{z}'\n\ndef",
        "test": "assert solution(stdin) == \"2999999987 2\"",
        "num_ids": 2321,
        "indeed": false
    },
    {
        "number": 4373,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 2307,
        "indeed": false
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n!= m:\n        print(1)\n        return\n    g = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            g[i][j] = 1\n            g[j][i] = 1\n    \n    def dfs(v):\n        for u in g[v]:\n            g[u][v] = 0\n            if dfs(u) == 1:\n                return 1\n        return 0\n\n    if dfs(0) == 1:\n        return 1\n    else:\n        print(2)\n        return\n\n\n-----Constraints-----\n\n1 <= n <= 200\n1 <= m <= 100\n1 <= v <= n\n\n------Problem Statement-------\n\ndef",
        "test": "assert solution(\"2 3\"), \"1\"",
        "num_ids": 2082,
        "indeed": false
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    def get_adjacents(tree, v):\n        for u in range(1, n+1):\n            if u == v:\n                continue\n            if tree[u][v]!= -1:\n                yield tree[u][v]\n            if tree[v][u]!= -1:\n                yield tree[v][u]\n    tree = [[-1 for _ in range(n)] for _ in range(n)]\n    edges = []\n    for _ in range(n):\n        line = list(map(int, stdin.split()))\n        u = line[0]\n        v = line[1]\n        weight = line[2]\n        if weight == 0:\n            continue\n        edges.append((u, v, weight))\n        tree[u][v] = weight\n        tree[v][u] = weight\n    for k in range(k):\n        edges = list(get_adjacents(tree, u) for u in range(n))\n        edges.sort(key=lambda x: x[2])\n        edges.sort(key=lambda x: x[1])\n        # print(edges)\n        # print('Edges:', edges)\n        for i, v in enumerate(edges):\n            if v[0] == v[1]:\n                continue\n            if v[0] < v[1]:\n                v[0] += v[2]\n            else:\n                v[1] += v[2]\n        for i, v in enumerate(edges):\n            if v[0] == v[1]:\n                continue\n            if v[0] > v[1]:\n                v[0] -= v[2]\n            else:\n                v[1] -= v[2]\n        print(edges)\n    return str(sum(tree[u][v] for u, v in edges))\n",
        "test": "assert solution(stdin) == \"11\"",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    m = int(stdin.split(\" \")[1])\n    a_i = [int(num) for num in stdin.split(\" \")[2:]]\n    b_i = [int(num) for num in stdin.split(\" \")[3:]]\n    \n    for i in range(n):\n        for a in range(1, n):\n            for b in range(1, n):\n                k = a_i[a]*b_i[b]\n                print(k, b, a)\n    return \"\"\n\nTime complexity: O(n + m)\nSpace Complexity: O(n)\n\n\"\"\"\nclass Solution:\n    def spellChecker(self, code: str) -> str:\n        n = len(code)\n        a = n // 3\n        b = 3*a\n        \n        stored_letters = set()\n        for i in range(1, a+1):\n            stored_letters.add(code[i-1])\n        for j in range(1, b+1):\n            stored_letters.add(code[j-1])\n        \n        for i in range(a):\n            for j in range(b):\n                if code[j] not in stored_letters:\n                    stored_letters.add(code[j])\n                    break\n        for i in range(a+b):\n            if code[i] not in stored_letters:\n                stored_letters.add(code[i])\n                break\n        \n        for i in range(1, a+1):\n            if code[i] not in stored_letters:\n                stored_letters.add(code[i])\n                break\n        for j in range(1, b+1):\n            if code[j] not in stored_letters:\n                stored_letters.add(code[j])\n                break\n        \n        for i in range(1, a+b):\n            if code[i] not in stored_letters:\n                stored_letters.add(code[i])\n                break\n        \n        s = ''\n        for i in range(1, n+1):\n            if code[i] not in stored_letters:\n                s += code[i]\n                stored_letters.add(code[i])\n        \n        return s\n",
        "test": "assert solution(\"5 2 12\") == \"2 1\"",
        "num_ids": 1453,
        "indeed": false
    },
    {
        "number": 4377,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(i) for i in stdin.split()]\n    ans = [numbers[0]+numbers[1]+numbers[2], numbers[3]+numbers[4]+numbers[5], numbers[6]+numbers[7]+numbers[8]]\n    print(*ans)\n    return str(ans[0]) + str(ans[1]) + str(ans[2])\n",
        "test": "assert solution(stdin) == \"1 100 100\", \"fail\"",
        "num_ids": 1436,
        "indeed": false
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lamps = [list(map(int, input().split())) for _ in range(n)]\n    s = [list(map(int, input().split())) for _ in range(n-1)]\n    return solve(lamps, s)\n\ndef",
        "test": "assert solution(input()) == \"4\"",
        "num_ids": 1614,
        "indeed": false
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    print(min(a))\n\n    i = 0\n    while True:\n        if a[i] <= a[i + 1]:\n            i += 1\n        else:\n            break\n    while i < n - 1:\n        print(a[i], end=\" \")\n        i += 1\n    print(a[i - 1], end=\" \")\n    print(a[n - 1])\n    return \" \".join(map(str, a[:i] + a[i + 1:]))\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(min(a))",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 4380,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('1') == 'Yes'",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 4381,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, p = map(int, stdin.split())\n    fare = 100\n    \n    if n % 2!= 0:\n        return 'Impossible'\n    \n    if p!= 1:\n        fare /= 2\n    \n    if p % 2 == 1:\n        fare -= 1\n    \n    if fare % 2 == 0:\n        return 'Impossible'\n    \n    if n == 1:\n        return str(fare)\n    else:\n        return str(fare) + '.' + str(fare)\n",
        "test": "assert solution(\"1 1 0\") == \"1\"",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 4382,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    #using a set to keep track of possible passwords\n    passwords = set()\n    #using a dict to keep track of the characters that can be used to connect the password\n    char_sets = dict()\n    #using a dict to keep track of the remaining characters\n    remaining = set()\n    \n    N = int(stdin)\n    for _ in range(N):\n        #print(stdin)\n        #print(input())\n        #get the character from stdin\n        char = stdin[-1]\n        #print(char)\n        #put it in char_sets\n        char_sets[char] = char_sets.get(char, 0) + 1\n        #print(char_sets)\n        #check the possible characters that can be used to connect the password\n        for char in char_sets:\n            #if the character can be used to connect the password, add the remaining characters to the remaining set\n            if char_sets[char] > 3:\n                remaining.add(char)\n            #else, if it can't, keep the character\n            else:\n                passwords.add(char)\n    #print(char_sets)\n    #print(remaining)\n    print(len(passwords))\n    return ','.join(sorted(passwords))\n\ndef",
        "test": "assert solution(\"s4\") == \"2222\"",
        "num_ids": 3375,
        "indeed": false
    },
    {
        "number": 4383,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X == 1:\n        return \"YES\"\n    if X == 2:\n        return \"NO\"\n    if X == 3:\n        return \"NO\"\n    if X == 4:\n        return \"NO\"\n    if X == 5:\n        return \"YES\"\n",
        "test": "assert solution(\"1\") == \"YES\"",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 4384,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:3]\n",
        "test": "assert solution(\"abc\"), \"abc\"",
        "num_ids": 2098,
        "indeed": false
    },
    {
        "number": 4385,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    # ===Modify here to complete this challenge\n    pass",
        "test": "assert solution(\"8\") == \"Yay!\"",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 4386,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    word = []\n    for line in stdin:\n        line = line.rstrip()\n        if line.isalpha() and len(line) <= 3:\n            word.append(line)\n    if len(word) == 0:\n        return'red'\n    if len(word) == 1:\n        return word[0]\n    return ''.join(word)\n\n-----Sample Output-----\npink\n\na = 3200 is not less than 3200, so we print s = pink.\n'''\n",
        "test": "assert solution(10) == \"red\"",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 4387,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    r = [int(i) for i in stdin.split()]\n    print(r)\n    if R == 0:\n        print('ABC')\n        return 'ABC'\n    elif R < 1200:\n        print('ARC')\n        return 'ARC'\n    elif R < 2800:\n        print('AGC')\n        return 'AGC'\n    else:\n        print('ARC')\n        return 'ARC'\n",
        "test": "assert solution('00000') == 'ABC'",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 4388,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def knap(n):\n        if n == 9:\n            return 0\n        elif n == 0:\n            return 9\n        else:\n            result = 0\n            for i in range(1, 10):\n                result += i\n            result += 9\n            for i in range(2, 10):\n                result += i\n            result += 9\n            return result\n    \n    def replace(i, k):\n        return (i + k) % 10\n    \n    ans = ''\n    for i in range(n // 9):\n        ans = ans + str(replace(knap(n//9), 9))\n    return ans\n",
        "test": "assert solution(111) == \"11111\"",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 4389,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    a, b = [], []\n    for i in range(len(string)):\n        if string[i] == 'a':\n            a.append(i)\n        elif string[i] == 'b':\n            b.append(i)\n        elif string[i] == 'c':\n            a.sort()\n            b.sort()\n            if a == b:\n                return string[a[0]+1:a[-1]]\n    return string\n        \n",
        "test": "assert solution(\"ac\") == \"ac\"",
        "num_ids": 1407,
        "indeed": false
    },
    {
        "number": 4390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    res = float('inf')\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if i % j == 0:\n                break\n            else:\n                res = min(res, i + j)\n    return str(res)\n",
        "test": "assert solution(stdin) == 0",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(' ', '')\n    n = int(stdin[:len(stdin) - 1])\n    k = int(stdin[len(stdin) - 1])\n    a = [int(i) for i in stdin[len(stdin) - 2:].split(' ')]\n    res = a[0] * a[1] * a[2] * a[3]\n    for i in range(4, n + 1):\n        a[i] = a[i - 1] + a[i - 2] * a[i - 3] * a[i - 4] * a[i - 5]\n        if a[i] < 1e+9:\n            res = max(res, a[i])\n    return str(res)\n\n-----Constraints-----\n1 <= k <= 5000\n1 <= n <= 1000\n\nTime Limit: 80 ms\n\nExample\nInput\n1\n1 1\n2 1 1 2\n\nOutput\n1.666666666666667\n\nExplanation\nWe have the following answers, given the input:\n4 3\n3 4 1 2\n\nThe heat intensity value is 2.6666667\n\"\"\"\ndef",
        "test": "assert solution(\"1 1\") == \"1.25\"",
        "num_ids": 1027,
        "indeed": false
    },
    {
        "number": 4392,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(\" \")[0])\n    a = []\n    p = []\n    for i in range(n):\n        a.append(int(stdin.strip().split(\" \")[1]))\n    for i in range(n-1):\n        p.append(int(stdin.strip().split(\" \")[i+1].strip()))\n    p.sort()\n    for i in p:\n        a[i] = a[i+1]\n    print(\"\".join(str(x) for x in a))\n    return \"YES\"\n",
        "test": "assert solution('1 2 3 4 5') == 'YES'",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 4393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin.lower())\n    m = int(n/2)\n    s[m:n] = s[m:n].replace('o', 'e')\n    s[n:n] = s[n:n].replace('p','s')\n    s[n:n] = s[n:n].replace('r', 'r')\n    s[n:n] = s[n:n].replace('s', 't')\n    for i in range(m, n+m):\n        print(s[i], end=' ')\n    return ''.join(s)\n\nprint(solution(input()))\n",
        "test": "assert solution(\"bbbb\") == \"bbbb\"",
        "num_ids": 2396,
        "indeed": false
    },
    {
        "number": 4394,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = map(int, stdin.split())\n    \n    cost = edges[0] + edges[1]\n    edges = [(u, v, w) for u, v, w in edges]\n    \n    result = sum(edges) - cost\n    \n    if m == 1 and n == 1:\n        print(result)\n        return\n    \n    for i in range(len(edges)):\n        result += edges[i][2]\n        if result > cost:\n            m -= 1\n            if m == 0:\n                return result\n        result -= edges[i][2]\n        if result > cost:\n            n -= 1\n            if n == 0:\n                return result\n    \n    return \"NO\"\n\nprint(solution(stdin))\n",
        "test": "assert solution(stdin) == '1'",
        "num_ids": 2333,
        "indeed": false
    },
    {
        "number": 4395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    lamps = []\n    for line in stdin:\n        lamps.append(list(line))\n    n = len(lamps)\n    s = ''.join(lamps)\n    s = s.replace('BRB', 'GRB').replace('RGBG', 'GRB').replace('R', 'G').replace('GRB', 'G').replace('B', 'R').replace('GRB', 'R').replace('R', 'G').replace('G', 'B')\n    lamps = [s[i:i + 3] for i in range(0, len(s), 3)]\n    n = len(lamps)\n    s = ''.join(lamps)\n    s = s.replace('BRB', 'GRB').replace('RGBG', 'GRB').replace('R', 'G').replace('GRB', 'G').replace('B', 'R').replace('GRB', 'R').replace('R', 'G').replace('G', 'B')\n    lamps = [s[i:i + 3] for i in range(0, len(s), 3)]\n    n = len(lamps)\n    s = ''.join(lamps)\n    s = s.replace('BRB', 'GRB').replace('RGBG', 'GRB').replace('R', 'G').replace('GRB', 'G').replace('B', 'R').replace('GRB', 'R').replace('R', 'G').replace('G', 'B')\n    lamps = [s[i:i + 3] for i in range(0, len(s), 3)]\n    n = len(lamps)\n    s = ''.join(lamps)\n    s = s.replace('BRB', 'GRB').replace('RGBG', 'GRB').replace('R', 'G').replace('GRB', 'G').replace('B', 'R').replace('GRB', 'R').replace('R', 'G').replace('G', 'B')\n    s = s.replace('R', 'G').replace('G', 'B')\n    lamps = [s[i:i + 3] for i in range(0, len(s), 3)]\n    n = len(lamps)\n    s = ''.join(lamps)\n    s = s.replace('BRB', 'GRB').replace('RGBG', 'GRB').replace('R', 'G').replace('GRB', 'G').replace('B', 'R').replace('GRB', 'R').replace('R', 'G').replace('G', 'B')\n    s = s.replace('R', 'G').replace('G', 'B')\n    s = s.replace('R', 'G').replace('B', 'R').replace('G', 'R')\n    s = s.replace('G', 'B').replace('B', 'R').replace('G', 'R')\n    lamps = [s[i:i + 3] for i in range(0, len(s), 3)]\n    n = len(lamps)\n    s = ''.join(lamps)\n    s = s.replace('BRB', 'GRB').replace('RGBG', 'GRB').replace('R', 'G').replace('GRB', 'G').replace('B', 'R').replace('GRB', 'R').replace('R', 'G').replace('G', 'B')\n    s = s.replace('R', 'G').replace('G', 'B')\n    s = s.replace('R', 'G').replace('B', 'R').replace('G', 'R')\n    s = s.replace('G', 'B').replace('B', 'R').replace('G', 'R')\n    lamps = [s[i:i + 3] for i in range(0, len(s), 3)]\n    n = len(lamps)\n    s = ''.join(lamps)\n    s = s.replace('BRB', 'GRB').replace('RGBG', 'GRB').replace('R', 'G').replace('GRB', 'G').replace('B', 'R').replace('GRB', 'R').replace('R', 'G').replace('G', 'B')\n    s = s.replace('R', 'G').replace('G', 'B')\n    s = s.replace('R', 'G').replace('B', 'R').replace('G', 'R')\n    s = s.replace('G', 'B').replace('B', 'R').replace('G', 'R')\n    s = s.replace('G', 'B').replace('B', 'R').replace('G', 'R')\n    lamps = [s[i:i + 3] for i in range(0, len(s), 3)]\n    n = len(lamps)\n    s = ''.join(lamps)\n    s = s.replace('BRB', 'GRB').replace('RGBG', 'GRB').replace('R', 'G').replace('GRB', 'G').replace('B', 'R').replace('GRB', 'R').replace('R', 'G').replace('G', 'B')\n    s = s.replace('R', 'G').replace('G', 'B')\n    s = s.replace('R', 'G').replace('B', 'R').replace('G', 'R')\n    s = s.replace('G', 'B').replace('B', 'R').replace('G', 'R')\n    s = s.replace('G', 'B').replace('B', 'R').replace('G', 'R')\n    s = s.replace('G', 'B').replace('B', 'R').replace('G', 'R')\n    lamps = [s[i:i + 3] for i in range(0, len(s), 3)]\n    n = len(lamps)\n    s = ''.join(lamps)\n    s = s.replace('BRB', 'GRB').replace('RGBG', 'GRB').replace('R', 'G').replace('GRB', 'G').replace('B', 'R').replace('GRB', 'R').replace('R', 'G').replace('G', 'B')\n    s = s.replace('R', 'G').replace('G', 'B')\n    s = s.replace('R', 'G').replace('B', 'R').replace('G', 'R')\n    s = s.replace('G', 'B').replace('B', 'R').replace('G', 'R')\n    s = s.replace('G', 'B').replace('B', 'R').replace('G', 'R')\n    s =",
        "test": "assert solution(",
        "num_ids": 2733,
        "indeed": false
    },
    {
        "number": 4396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    \n    u_1, u_2, u_N = map(float, stdin.split(\" \"))\n    \n    if abs(u_1 - int(u_1)) <= 10 ** -5 and abs(u_2 - int(u_2)) <= 10 ** -5:\n        return str(u_1*u_2)\n    \n    if u_1 == 0.10000000 and u_2 == 0.10000000:\n        return str(int(u_N))\n    else:\n        x_1 = int(u_1)\n        x_2 = int(u_2)\n        \n        return str(x_1 + x_2)\n",
        "test": "assert solution(inp) == \"48000.0\"",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 4397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    cars = list(map(int,stdin.strip().split()[1:]))\n\n    #map(int,stdin.strip().split())\n    def partition(array, left, right):\n        if left >= right:\n            return\n        \n        i = (left + right)//2\n        car = array[i]\n        \n        #remaining\n        pivot = array[i+1]\n        array[i+1] = array[i]\n        array[i] = car\n        partition(array, left, i-1)\n        partition(array, i+1, right)\n        \n        \n    partition(cars, 0, len(cars))\n    print(array)\n    return str(array[n-1])\n",
        "test": "assert solution(input() == \"5\") == \"No\"",
        "num_ids": 1235,
        "indeed": false
    },
    {
        "number": 4398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    s = []\n    for _ in stdin:\n        s.append(str(stdin.index(_)))\n    return ''.join(s)\n\nprint(solution(['ip','cc'])\n",
        "test": "assert solution('pccp') == 'pppcc'",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 4399,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    # Step 1: check whether the length of the given string is 3 or less.\n    # Step 2: if the length is 3, check whether the input string is of the following:\n    # - A. bus service\n    # - B. same station\n    # - C. same station\n    # Step 3: if the length of the input string is 3, check whether the input string is of the following:\n    # - A. same station\n    # - B. same station\n    # - C. same station\n    if len(stdin) < 3:\n        return 'No'\n    # Step 1: find the stations with the same input string\n    a, b, c = 0, 0, 0\n    for char in stdin:\n        if char.isalpha():\n            if char == 'A':\n                a += 1\n            elif char == 'B':\n                b += 1\n            elif char == 'C':\n                c += 1\n    # Step 2: if the input string is of the following:\n    # - A. bus service\n    # - B. same station\n    # - C. same station\n    # Step 3: if the input string is of the following:\n    # - A. same station\n    # - B. same station\n    # Step 4: if the input string is of the following:\n    # - A. same station\n    # - B. same station\n    # Step 5: if the input string is of the following:\n    # - A. same station\n    # - B. same station\n    # Step 6: if the input string is of the following:\n    # - A. same station\n    # - B. same station\n    # Step 7: if the input string is of the following:\n    # - B. same station\n    # Step 8: if the input string is of the following:\n    # - A. same station\n    # Step 9: if the input string is of the following:\n    # - B. same station\n    # Step 10: if the input string is of the following:\n    # - B. same station\n    # Step 11: if the input string is of the following:\n    # - B. same station\n    # Step 12: if the input string is of the following:\n    # - B. same station\n    # Step 13: if the input string is of the following:\n    # - C. same station\n    # Step 14: if the input string is of the following:\n    # - C. same station\n    # Step 15: if the input string is of the following:\n    # - C. same station\n    if a > 0:\n        return 'Yes'\n    elif b > 0:\n        return 'Yes'\n    elif c > 0:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert solution(\"ABA\"), \"ABA is not possible\"",
        "num_ids": 1610,
        "indeed": false
    },
    {
        "number": 4400,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    day_record = []\n    temporary = []\n    day_list = list(stdin)\n    day_list.reverse()\n    for i in range(0, len(day_list) - 1):\n        if day_list[i] == 'R':\n            day_record.append(day_list[i])\n            temporary.append('R')\n        if day_list[i] == 'S':\n            day_record.append(day_list[i])\n            temporary.append('S')\n    print(len(set(temporary)))\n    return len(set(temporary))\n",
        "test": "assert solution([\"RRS\",\"R\",\"S\"]) == 2",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 4401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    X, Y, Z = map(int, stdin.split())\n    ans = X + Y + Z\n    a =''\n    b =''\n    c =''\n    for i in range(len(ans)):\n        if ans[i] == 'X':\n            a = a + ans[i] +''\n        if ans[i] == 'Y':\n            b = b + ans[i] +''\n        if ans[i] == 'Z':\n            c = c + ans[i] +''\n    answer = a + b + c\n    return answer",
        "test": "assert solution(\"1 5 7\") == \"3 1 2\"",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 4402,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(' ')\n    A = int(line[0])\n    B = int(line[1])\n    c = 1\n    if A % 2!= 0:\n        c = B\n    else:\n        c = A\n    return str(c)\n",
        "test": "assert solution(\"2 2\") == \"2\"",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 4403,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    _, solution = map(str, stdin.split())\n    solution = solution[::-1]\n    answer = int(''.join(solution))\n    return str(answer)\n\"\"\"\nimport sys\ninput = sys.stdin.readline\n\ndef",
        "test": "assert solution(input()) == \"2\"",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 4404,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    \n    input = stdin.split(\"/\")\n    \n    if input[0][-1] == \"2\":\n        print(\"TBD\")\n        return\n    \n    n = len(input)\n    start = input[1][:2]\n    end = input[1][2:]\n    \n    if n == 2:\n        if start[1] == \"0\":\n            print(\"TBD\")\n        else:\n            print(\"Heisei\")\n        \n        return\n    \n    for i in range(n-2):\n        #start = input[i][:2]\n        #end = input[i][2:]\n        if start[1] == \"0\":\n            start = input[i][:2]\n            end = input[i][2:]\n            if start[1] == \"0\":\n                print(\"TBD\")\n            else:\n                print(\"Heisei\")\n            \n        elif end[1] == \"0\":\n            if int(start[1]) < 4:\n                start = start[:2]\n                end = end[2:]\n                if start[1] == \"0\":\n                    print(\"TBD\")\n                else:\n                    print(\"Heisei\")\n            else:\n                if int(start[1]) == 4:\n                    start = start[:2]\n                    end = end[:2]\n                    if end[1] == \"0\":\n                        print(\"TBD\")\n                    else:\n                        print(\"Heisei\")\n                else:\n                    print(\"TBD\")\n        else:\n            if int(end[1]) < 4:\n                start = start[:2]\n                end = end[2:]\n                if start[1] == \"0\":\n                    print(\"TBD\")\n                else:\n                    print(\"Heisei\")\n            else:\n                if int(end[1]) == 4:\n                    start = start[:2]\n                    end = end[:2]\n                    if end[1] == \"0\":\n                        print(\"TBD\")\n                    else:\n                        print(\"Heisei\")\n                else:\n                    print(\"TBD\")\n        \n    print(\"TBD\")\n",
        "test": "assert solution(\"2019/04/30\") == \"TBD\"",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 4405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, a_1, a_2, a_3, a_4, a_5 = map(int, stdin.split())\n    if a_1 == a_2 == a_3 == a_4 == a_5 == 0:\n        return '0'\n    else:\n        return str(n * (n+1)//2) + str(n * (n-1)//2)\n\n\nn = int(stdin.strip())\na_1, a_2, a_3, a_4, a_5 = map(int, stdin.split())\nprint(solution(n))\n",
        "test": "assert solution(input().strip()) == '10'",
        "num_ids": 2145,
        "indeed": false
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    stdin = stdin.split()\n    stdin.sort()\n    conversations = []\n    for message in stdin:\n        conversations.append(message)\n    conversations.sort()\n    for i in range(k - 1):\n        if len(conversations) > i:\n            conversations.pop(i)\n    answer = \"\"\n    for conversation in conversations:\n        answer += conversation\n        for _ in range(len(conversation)):\n            answer += \" \"\n    return answer\n",
        "test": "assert solution(1000,10) == \"3\"",
        "num_ids": 2322,
        "indeed": false
    },
    {
        "number": 4407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    #lines=stdin.split()\n    #n=int(lines[0])\n    #q=int(lines[1])\n    #a=[]\n    #for i in range(2,n+1):\n        #a.append([int(lines[i])])\n        \n    n=int(input())\n    q=int(input())\n    a=[]\n    for i in range(q):\n        line=input().split()\n        a.append([int(a) for a in line])\n        \n    ans=[]\n    \n    def coin_value(val):\n        ans=0\n        while val>0:\n            val,rem=divmod(val,2)\n            ans+=rem\n            val=val//2\n        return ans\n    \n    def solution(a,b):\n        ans=1\n        for i in a:\n            ans=min(ans,coin_value(b-i))\n        return ans\n    \n    def verify(i,ans):\n        if i==ans:\n            return True\n        for j in range(i,i+n):\n            ans=min(ans,coin_value(b-j))\n            if not verify(j,ans):\n                return False\n        return ans\n    \n    if verify(a[n-1][0],a[n-1][n-1]):\n        print(a[n-1][0])\n    else:\n        print(-1)\n        return\n        \n    \n",
        "test": "assert solution(stdin) == \"-1\"",
        "num_ids": 2840,
        "indeed": false
    },
    {
        "number": 4408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    cards = list(map(int, stdin.split()))\n    return str(max(cards))\n\n'''\n\n\ndef",
        "test": "assert solution(",
        "num_ids": 1328,
        "indeed": false
    },
    {
        "number": 4409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    i = n // 2\n    j = n - i\n    l = 0\n    r = len(a)\n    \n    while i < r:\n        if (l < j) and (a[l] + a[l+1] + a[r-j]) < (a[l] + a[r-j]):\n            l += 1\n        elif (r-j) < l:\n            r -= 1\n        else:\n            break\n    return str(l + 1) +'' + str(r - l)\n'''\n\ndef",
        "test": "assert solution(stdin) == \"2 1 2 3\"",
        "num_ids": 1195,
        "indeed": false
    },
    {
        "number": 4410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) / 2 + 1)\n\nTime: O(N)\nSpace: O(N)\n\"\"\"\n\nclass Solution:\n    def numTables(self, n: int, k: int) -> int:\n        dp = [0 for _ in range(n + 1)]\n        dp[0] = 1\n        for i in range(1, n + 1):\n            dp[i] = (dp[i - 1] + (k - 1)) % (10 ** 9 + 7)\n        return dp[-1]\n\n\ndef",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = n * (n + 1) // 2\n    count = 0\n    p1, p2, p3 = 0, 0, 0\n    while count < m:\n        l1, r1 = map(int, input().split())\n        l2, r2 = map(int, input().split())\n        inter = r2 - l2 + 1\n        count += inter\n        if l1 < l2:\n            p1, p2 = p1 + 1, p2\n        else:\n            p3 += 1\n    while p2 < n:\n        if p2 == n:\n            break\n        if p2 < n and (p2!= 0 or p2!= n):\n            l1, r1 = map(int, input().split())\n            inter = r1 - l1 + 1\n            count += inter\n            if l1 < l2:\n                p1, p2 = p1 + 1, p2\n            else:\n                p3 += 1\n    print(count)\n    if p3 >= k:\n        print(p1, p2, p3)\n        print('Yes')\n    else:\n        print(p1, p2, p3)\n        print('No')\n",
        "test": "assert solution(stdin) == \"3\", \"Expected a minimum of three segments, got: {}\".format(stdin)",
        "num_ids": 2946,
        "indeed": false
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum = 0\n    for i in range(1, n + 1):\n        if i in {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}:\n            sum += i\n        else:\n            sum += 2 ** i\n    print(sum)\n    return str(sum)\n\n-----Algorithm-----\n\nIn each of the given queries, if the prettiness of the given problem is $a_i$, then we can reach it with the following following logic:\n\nFor $i$-th problem, we need to reach $i$-th position in the answer table.\n\nIf $i$-th position in the answer table is $i$-th position in the answer table, then we can reach $i$-th position in the answer table in the following manner:\n\nIf $i$-th position in the answer table is $i$-th position in the answer table, then we can reach $i$-th position in the answer table in the following way:\n\nIf $i$-th position in the answer table is $i$-th position in the answer table, then we can reach $i$-th position in the answer table in the following way:\n\nIf $i$-th position in the answer table is $i$-th position in the answer table, then we can reach $i$-th position in the answer table.\n\n\nThe goal of this program is to solve the problem described in the example above and find the answer.\n\n\n-----Input-----\n\nThe first line of the input contains an integer $q$ (1\u2264q\u226410000) \u2014 the number of queries.\n\nThe second line of the query contains an integer $n$ (1\u2264n\u22642,000,000) \u2014 the number of problems.\n\nThe third line of the query contains $n$ integers $a_1, a_2, \\dots, a_n$ (1\u2264a_i\u22642,000,000) \u2014 the prettinesses of the $i$-th problem.\n\n\n-----Output-----\n\nFor each query print one integer \u2014 the maximum possible cumulative prettiness of the contest composed of at most three problems from the given pool of problems in the query.\n\n\n-----Example-----\nInput\n3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n\nOutput\n31\n31\n10\ndef",
        "test": "assert solution(stdin) == 31",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 4413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    answer = []\n    \n    for _ in range(N):\n        a = int(stdin.strip())\n        b = stdin.strip()\n        \n        if a%2!= b%2:\n            answer.append(1)\n        else:\n            a1 = a%2\n            b1 = b%2\n            c = a1 + b1\n            if a1 + b1 == 2:\n                answer.append(2)\n            elif a1 + b1 > 2:\n                answer.append(2)\n                answer.append(3)\n            else:\n                answer.append(4)\n                answer.append(5)\n    answer.sort()\n    answer = answer[1:]\n    answer.append(1)\n    return '\\n'.join(map(str, answer))",
        "test": "assert solution(\"2 3 5 100 100\") == \"1\"",
        "num_ids": 1289,
        "indeed": false
    },
    {
        "number": 4414,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, q = stdin.split()\n    n, q = int(n), int(q)\n    # print(q, n, n/q)\n    x = (n//q) * q\n    # print(x, x*n)\n    y = (n//q) * (n//q)\n    # print(y, y*n)\n    # print(x, y*n)\n    if x > y:\n        return 'YES'\n    else:\n        return 'NO'\n\n\n\nsolution(\"1 2 3 4\", \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 219 220 221 222 223 224 225 226 227 228 229 229 230 231 231 232 233 234 235 236 237 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245",
        "test": "assert solution(4,1,3,2,5,6,27,18), \"NO\"",
        "num_ids": 2790,
        "indeed": false
    },
    {
        "number": 4415,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    seq = stdin.split()\n    n = len(seq)\n    nums = [int(x) for x in seq]\n    nums.sort()\n    if len(nums) == 1:\n        return \"YES\"\n    if len(nums) == 2:\n        if nums[0] == nums[1]:\n            return \"YES\"\n    if nums[0] < nums[1]:\n        nums = nums[1:]\n    if nums[-1] < nums[0]:\n        nums = nums[0:]\n    if nums[-1] < nums[0]:\n        nums = nums[:len(nums)-1]\n    for i in range(n-1, 0, -1):\n        if nums[i] < nums[i-1]:\n            break\n    else:\n        return \"NO\"\n    for i in range(n-1, 0, -1):\n        if nums[i] > nums[i-1]:\n            break\n    else:\n        return \"YES\"\n    return \"NO\"\n",
        "test": "assert solution(\"3 0 0 0 0 0 0 0 0\") == \"NO\"",
        "num_ids": 1818,
        "indeed": false
    },
    {
        "number": 4416,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(len(a)):\n        if i % 2 == 0:\n            b.append(a[i])\n        else:\n            b.append(a[i] + a[i+1])\n    t = sorted(b)\n    s = 0\n    for i in range(len(t)):\n        s += t[i]\n    return s\n\n\n### Basic idea of a set is that we need to choose the smallest set and put it in a set called subsets. (For the worst case, we have to choose the smallest set of books in the family, and put the smallest set in a set called subset.) \n",
        "test": "assert solution(stdin) == -1",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 4417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    a = max(nums)\n    for i in range(k, n + 1):\n        diff = abs(nums[i] - a)\n        if diff == 0:\n            return str(nums[i])\n        if diff > 2:\n            a = a + 1\n    return str(a)\n",
        "test": "assert solution(\"1 5\") == \"5\"",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 4418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(list(set(map(lambda x: int(x), stdin.split()))))-1)\n",
        "test": "assert solution(stdin) == 0",
        "num_ids": 1307,
        "indeed": false
    },
    {
        "number": 4419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\n-----Constraints-----\n\n1 <= t <= 10^4\n\n\n-----Example-----\n\nInput\n1\n1 2\n2 3\n2 4\n2 5\n3 4\n4 3\n3 5\n5 4\n6 7\n8 9\n9 10\n\nOutput\n2\n3\n4\n\n\"\"\"",
        "test": "assert solution(1, 10) == 0, \"1,10\"",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 4420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    \n    t = int(stdin)\n    for case in range(t):\n        print(solution_recursive(case))\n\ndef",
        "test": "assert solution([\"7\", \"5\", \"12345\", \"5\", \"4\", \"99999993\", \"10\", \"5\", \"187\", \"0\"]) == \"12339\"",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    box_nums = sorted([int(stdin.split()[i]) for i in range(n)], reverse=True)\n    \n    answer = 0\n    for i in range(len(box_nums)):\n        for j in range(len(box_nums)):\n            if box_nums[i] + box_nums[j] <= k:\n                answer += 1\n                \n    return str(answer)\n",
        "test": "assert solution(stdin) == \"8\"",
        "num_ids": 1921,
        "indeed": false
    },
    {
        "number": 4422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    \n    answer = ''\n    \n    for i in range(len(stdin)):\n        \n        if i+1 < len(stdin):\n            if stdin[i].isalpha():\n                answer += stdin[i].lower() + stdin[i+1].lower()\n            elif stdin[i].isnumeric():\n                answer += stdin[i].lower() + '0' + stdin[i+1].lower()\n            else:\n                answer += stdin[i].lower()\n    return answer\n",
        "test": "assert solution(",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 4423,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, P, S = map(int, stdin.split())\n    city = list(map(int, stdin.split()))\n    city = sorted(city, reverse=True)\n    city = city[:N]\n    for i in range(N-1):\n        if city[i] == city[i+1]:\n            city[i] = 1\n            city[i+1] = 0\n            city[i+2] = 0\n        elif city[i]!= city[i+1]:\n            city[i] = 0\n            city[i+1] = 0\n            city[i+2] = 1\n    city = city[:N]\n    for j in range(N-1):\n        if city[j] == city[j+1]:\n            city[j] = 2\n            city[j+1] = 1\n            city[j+2] = 0\n        elif city[j]!= city[j+1]:\n            city[j] = 0\n            city[j+1] = 0\n            city[j+2] = 2\n    city = city[:N]\n    for k in range(N):\n        if city[k]!= 0:\n            city[k] = city[k]+1\n    if S%2 == 0:\n        city = city[:N]\n    if P%2 == 0:\n        city = city[:N]\n    else:\n        city = city[:N] + [0,0]\n    city = list(map(int, str(city)))\n    city = sorted(city, reverse=True)\n    for i in range(N-1):\n        if city[i] == city[i+1]:\n            city[i] = 3\n            city[i+1] = 0\n            city[i+2] = 0\n        elif city[i]!= city[i+1]:\n            city[i] = 0\n            city[i+1] = 0\n            city[i+2] = 3\n    city = city[:N]\n    for j in range(N-1):\n        if city[j] == city[j+1]:\n            city[j] = 4\n            city[j+1] = 0\n            city[j+2] = 0\n        elif city[j]!= city[j+1]:\n            city[j] = 0\n            city[j+1] = 0\n            city[j+2] = 4\n    city = city[:N]\n    city = [str(x) for x in city]\n    city = [str(x) for x in sorted(city, reverse=True)]\n    city = city[:N]\n    city = ''.join(city)\n    if city[-1]!= '0':\n        city = city[:-1]\n    return city",
        "test": "assert solution(\"khabarovsk 20\", \"moscow 10\", \"kazan 50\", \"kazan 35\", \"moscow 60\", \"khabarovsk 40\") == '3 4 6 1'",
        "num_ids": 1855,
        "indeed": false
    },
    {
        "number": 4424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n\n    yen = (K*X + 1) // 2\n\n    if yen < 1000:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(7) == 'No'",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 4425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    snuke = (N * K) / 10\n    result = 0\n    for i in range(K,N+1):\n        result += (1/48) * (1/24) * (1/12) * (1/48)\n    if result > snuke:\n        result = snuke\n    return \"%.2f\" % (result)",
        "test": "assert solution(['2 3', '2 1']) == '1'",
        "num_ids": 3152,
        "indeed": false
    },
    {
        "number": 4426,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    lst = []\n    for i in range(len(stdin)):\n        if stdin[i] == \"S\":\n            lst.append(i)\n    lst.pop()\n    print(len(lst))\n    return \"\".join(lst)\n",
        "test": "assert solution(input()) == 7",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 4427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x = map(int, stdin.split())\n    r_sum = r\n    while r_sum > x:\n        r_sum -= D\n        x -= r_sum\n    answer = x + r_sum\n    return str(answer)\n",
        "test": "assert solution(stdin) == '17030'",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 4428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = map(int, stdin.split())\n\n    d = list(d)\n    answer = ''\n\n    sum = 0\n\n    for i in range(n):\n        # sum = sum + d[i]\n\n        # a = (sum - d[i]) % 10\n        # sum = (sum + (a - d[i])) % 10\n        sum += d[i]\n\n        # if sum == 0:\n        #     break\n\n        if sum == 0:\n            answer = str(sum)\n            break\n\n    if not answer:\n        return '0'\n\n    return answer",
        "test": "assert solution(\"4 1 2\") == \"0\"",
        "num_ids": 1669,
        "indeed": false
    },
    {
        "number": 4429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def solve(x, y, z):\n        val = 0\n        if x <= y:\n            val = max(x, y)\n        elif x <= z:\n            val = max(x, z)\n        if y <= z:\n            val = max(y, z)\n        return val\n    \n    if len(stdin) % 2!= 0:\n        return \"NO\"\n    inputs = []\n    for idx, line in enumerate(stdin.split('\\n')):\n        inputs.append(list(map(int, line.split(' '))))\n    \n    return \"YES\" if solve(*inputs) == solve(inputs[0][0], inputs[0][1], inputs[0][2]) else \"NO\"\n",
        "test": "assert solution(2) == \"YES\"",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 4430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    for _ in range(n):\n        a_i = map(int, input().split())\n        a_i = sorted(a_i)\n        b_i = a_i[0] - a_i[1] if len(a_i) >= 2 else 0\n        a_i = a_i[1] - a_i[0] if len(a_i) >= 2 else 0\n        if b_i + m > k:\n            print(0)\n            return\n        a = []\n        for i in range(a_i[0], a_i[1] + 1):\n            a.append(i)\n        if m == 1:\n            print(a[0])\n            return\n        m -= 1\n        for i in range(m, 0, -1):\n            if a[i] - a[i - 1] <= b_i:\n                a[i - 1], a[i] = a[i], a[i - 1]\n        a = sorted(a)\n        for i in range(m, len(a)):\n            a[i] = a[i - 1] + 1\n        for i in range(m, len(a) - 1):\n            if a[i] - a[i + 1] >= k:\n                a[i + 1] = a[i]\n        a = sorted(a)\n        a_i = a[0] - a[1]\n        if a_i > k:\n            print(0)\n            return\n        a = a[1] - a[0]\n        if a + m > k:\n            print(0)\n            return\n        a = a + m\n    print(a)\n    return",
        "test": "assert solution(",
        "num_ids": 881,
        "indeed": false
    },
    {
        "number": 4431,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n = n + 1\n    c_mapping = list(map(int, stdin.split()))\n    c_mapping.sort()\n    c_mapping_set = set(c_mapping)\n    a, b = 0, 0\n    for i in range(len(c_mapping)):\n        if c_mapping[i] == 0:\n            a = i + 1\n            break\n        elif c_mapping[i] == 1:\n            b = i + 1\n    if a == b:\n        return ''\n    if a >= len(c_mapping_set):\n        return ''\n    if b >= len(c_mapping_set):\n        return ''\n    for i in range(len(c_mapping)):\n        if c_mapping[i] == 0:\n            if i == a:\n                c_mapping[i] = 1\n            elif i == b:\n                c_mapping[i] = 1\n            else:\n                c_mapping[i] = 0\n    for i in range(len(c_mapping)):\n        if c_mapping[i] == 0:\n            if i == a:\n                c_mapping[i] = b\n            elif i == b:\n                c_mapping[i] = c_mapping[a]\n            else:\n                c_mapping[i] = 0\n    return str(c_mapping.count(1))\n    \n\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == 12",
        "num_ids": 1939,
        "indeed": false
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    max_sum = 0\n    for i in range(a, b+1):\n        s = str(i)\n        sum_possible = 0\n        for i in range(1, len(s)):\n            sum_possible += int(s[:i])\n        sum_possible += int(s[-1])\n        if sum_possible > max_sum:\n            max_sum = sum_possible\n    return str(max_sum)\n    pass\n'''\n\nclass Solution:\n    def solution(self,stdin: str) -> str:\n        def sum_of_possible(num: int) -> int:\n            possible = 1\n            for i in range(1,num):\n                possible *= i\n            return possible\n        a, b = map(int,stdin.split())\n        max_sum = 0\n        for i in range(a, b+1):\n            sum_possible = sum_of_possible(i)\n            if sum_possible > max_sum:\n                max_sum = sum_possible\n        return str(max_sum)\n        pass\n",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 1742,
        "indeed": false
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    # print(len(stdin))\n    # print(type(stdin))\n    # print(list(map(int, stdin.split())))\n    n = int(stdin.strip())\n    m = int(stdin.strip().split()[-1])\n    # print(m, n)\n    edges = list(map(int, stdin.split()[1:-1]))\n    # print(edges)\n    # print(len(edges))\n    # print(type(edges))\n    # print(list(map(int, edges.split())))\n    # print(edges)\n    # print(edges[0], edges[1])\n    # print(edges[0], edges[-1])\n    # print(edges[1], edges[-1])\n    # print(edges[1], edges[0])\n    # print(edges[0])\n    # print(edges[1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges)\n    # print(edges[0])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges)\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges)\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-2])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-2])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-2])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-1])\n    # print(edges[-",
        "test": "assert solution(stdin) == \"3 5\"",
        "num_ids": 2678,
        "indeed": false
    },
    {
        "number": 4434,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n^2)",
        "test": "assert solution(\"3\") == \"1\"",
        "num_ids": 2293,
        "indeed": false
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n,a = map(int,stdin.split())\n    dp = [0] * (n+1)\n    ans = []\n    for i in range(n):\n        x = int(a[i])\n        dp[i+1] = dp[i]\n        ans.append(dp[i+1]*i)\n        for j in range(i+1, n+1):\n            dp[j] = max(dp[j], dp[j-x] + 1)\n    print(*ans)\n    return str(max(ans))\n\ndef",
        "test": "assert solution(lines) == '1 1 1 2 -1 1 1 3 1 1'",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 4436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    def has_consec(li):\n        i = 0\n        for j in li:\n            if j in li[i:i+2]:\n                return True\n            i = j\n        return False\n    \n    def solve(li):\n        if len(li) == 3:\n            if has_consec(li):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            temp = []\n            for j in li:\n                if j in li[0:2]:\n                    temp.append(j)\n                else:\n                    temp.append(j*2)\n            temp.sort()\n            \n            print(temp[-3], temp[-2], temp[-1])\n            solve(temp)\n    \n    \n    stdin = stdin.split()\n    answer = []\n    solve(list(map(int, stdin)))\n",
        "test": "assert solution(int(input())) == \"NO\"",
        "num_ids": 1252,
        "indeed": false
    },
    {
        "number": 4437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.strip().split()[0])\n    s = stdin.strip().split()[1]\n    stdout = \"\"\n    for i in range(l):\n        a = \"\".join(s[i].split(\"a\"))\n        b = \"\".join(s[i].split(\"b\"))\n        stdout += a + \" \" + b + \" \"\n    print(stdout)\n    return stdout\n\nsolution(\"bbbb\")\nsolution(\"aaaa\")\nsolution(\"bbaaabbbbbbbbbbaa\")\n\nsolution(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "test": "assert solution(input()) == \"ababab\"",
        "num_ids": 2542,
        "indeed": false
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    \n    def get_distance(a: int, b: int) -> int:\n        return abs(a-b)\n    \n    def get_direction(a: int, b: int) -> int:\n        return 1 if a==b else 2\n    \n    def get_points(x: int, y: int) -> tuple:\n        return x, y\n    \n    def get_point(a: int, b: int) -> tuple:\n        return (a, b)\n    \n    def get_line_end(a: int, b: int) -> tuple:\n        return (a, b)\n    \n    def is_valid(a: int, b: int) -> bool:\n        return a < 10**9 and b < 10**9\n    \n    def check(line_idx: int, direction: int, points: tuple) -> bool:\n        a, b = points\n        if a == 0 or b == 0:\n            return False\n        elif line_idx > 3:\n            return False\n        else:\n            return direction == get_direction(a, b) and is_valid(a, b)\n    \n    def cal_direction(line_idx: int, direction: int, points: tuple) -> int:\n        a, b = points\n        return direction if a == b else (direction + get_direction(a, b)) % 4\n    \n    def get_key_points(x: int, y: int) -> list:\n        return [get_point(x, y) for _ in range(len(x))]\n    \n    def distance_from_line(a: int, b: int, lines: list) -> int:\n        cur_line = [line_idx for line_idx in lines if check(line_idx, a, get_key_points(x, y))]\n        cur_direction = cur_line[0] if cur_line else 0\n        cur_distance = 0\n        for line_idx in cur_line:\n            a, b = get_key_points(x, y)\n            cur_direction = cur_direction + cal_direction(line_idx, a, get_key_points(x, y))\n            cur_distance += get_distance(x, y)\n        return cur_distance\n    \n    def solution(stdin: str) -> str:\n        x, y = [int(n) for n in stdin.split()]\n        if not is_valid(x, y):\n            return 'No valid input'\n        \n        lines = [list(map(int, line.split())) for line in stdin.split('\\n')]\n        points = get_key_points(x, y)\n        return distance_from_line(x, y, lines)\n    \n    return solution\n",
        "test": "assert solution(stdin) == '15'",
        "num_ids": 1435,
        "indeed": false
    },
    {
        "number": 4439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1:\n        if b == 1:\n            return '1'\n        else:\n            return '2'\n    else:\n        if b == 1:\n            return '3'\n        else:\n            return '2'\n",
        "test": "assert solution(\"#.#.#\") == \"3\"",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 4440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    l, r, r1, l1 = map(int, stdin.split())\n    return str(abs(r1 - l1) * l * r)\n",
        "test": "assert solution(s) == \"1.000000000000\", \"solution() failed\"",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 4441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split()[-1]\n    if N == 1:\n        return 'Hello World'\n    elif N == 2:\n        return f'A+B'\n\nIn the previous problem, N was given as the last integer in the input. But here we will give the input as an int, N.\n\nIn the previous problem, N was given as the last integer in the input. But here we will give the input as a string, N.\n\"\"\"\n\nN = 1\n\ndef",
        "test": "assert solution(input()) == 'A+B'",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 4442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n  return ''",
        "test": "assert solution('2 1') == '1'",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 4443,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for ch in stdin:\n        if ch in alphabet:\n            answer += alphabet[alphabet.find(ch)+1]\n        else:\n            answer += ch\n    return answer\n",
        "test": "assert solution(\"a\") == \"b\", \"The solution function does not return expected value.\"",
        "num_ids": 539,
        "indeed": false
    },
    {
        "number": 4444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin.split())\n    def solve(left, right):\n        if left == right:\n            return left\n        m = left + right\n        for i in range(left, m):\n            s[i], s[i + left] = s[i + left], s[i]\n        if m % 2 == 0:\n            return solve(left, right)\n        else:\n            return solve(right, left)\n    return solve(0, len(s)-1)",
        "test": "assert solution({\"T\": \"ATC\", \"A\": \"A\", \"T\": \"T\"}) == \"TatTTtat\"",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d,e,f,g,h,i,j,k,l,m,n=list(map(int,stdin.split()))\n    s=0\n    while True:\n        if (a+b+c+d+e+f+g+h+i+j+k+l+m+n)!=(a+b+c+d+e+f+g+h+i+j+k+l+m+n):\n            s=max(s,0)\n            break\n        elif (a%2==0 and b%2==0 and c%2==0 and d%2==0 and e%2==0 and f%2==0 and g%2==0 and h%2==0 and i%2==0 and j%2==0 and k%2==0 and l%2==0 and m%2==0 and n%2==0):\n            s=max(s,0)\n            break\n        else:\n            pass\n    return str(s)\n",
        "test": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"], [5, 4, 3, 2, 1, 0, 7, 6, 8]) == 6",
        "num_ids": 1178,
        "indeed": false
    },
    {
        "number": 4446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    \n    if n % 2 == 0:\n        print(max(int((n + 1)**(1/2) * (a*k + b*k**2 + (n-1)*(n+1)*k**3) + (n-1)*(n+1)*(n-1)*k*a*b) - 2))\n    else:\n        print(max(int((n+1)*(n+1)*k**2 - (n-1)*(n+1)*k*a*b) - 2))\n    \n",
        "test": "assert solution(stdin) == '1'",
        "num_ids": 1243,
        "indeed": false
    },
    {
        "number": 4447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = [0] * n\n    c = [0] * n\n    for i in range(n):\n        while a[i] % m!= 0:\n            p[a[i] % m] += 1\n            a[i] //= m\n            c[a[i] % m] += 1\n            a[i] %= m\n    print(*c, sep=\"\\n\")\n    print(*p, sep=\"\\n\")\n    return min(n - min(p), n - sum(c))\n",
        "test": "assert solution(stdin) == '3 2 0 7 10 14'",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 4448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    budget = list(map(int, stdin.split()))\n    answer = 0\n\n    def isBought(budget, t):\n        for x in range(m):\n            for y in range(n):\n                if budget[x] >= budget[y] + t[x][y]:\n                    return True\n        return False\n\n    def buyAll(budget, t):\n        for x in range(m):\n            for y in range(n):\n                budget[x] -= t[x][y]\n                if budget[x] < 0:\n                    return False\n        return True\n\n    def buyBought(budget, t):\n        for x in range(m):\n            for y in range(n):\n                budget[x] += t[x][y]\n        return True\n\n    def buyBoughtAll(budget, t):\n        for x in range(m):\n            for y in range(n):\n                if budget[x] >= budget[y] + t[x][y]:\n                    budget[x] -= t[x][y]\n        return True\n\n    def buyAll(budget, t):\n        for x in range(m):\n            for y in range(n):\n                if t[x][y] > 0:\n                    budget[x] += t[x][y]\n        return True\n\n    def buyAllAll(budget, t):\n        for x in range(m):\n            for y in range(n):\n                if t[x][y] > 0:\n                    budget[x] += t[x][y]\n        return True\n\n    def buyBought(budget, t):\n        for x in range(m):\n            for y in range(n):\n                if t[x][y] > 0:\n                    budget[x] -= t[x][y]\n        return True\n\n    def buyAll(budget, t):\n        for x in range(m):\n            for y in range(n):\n                if t[x][y] > 0:\n                    budget[x] -= t[x][y]\n        return True\n\n    def buyAllAll(budget, t):\n        for x in range(m):\n            for y in range(n):\n                if t[x][y] > 0:\n                    budget[x] -= t[x][y]\n        return True\n\n    budget = list(map(int, budget))\n    t = [[0 for _ in range(n)] for _ in range(m)]\n    if isBought(budget, budget):\n        answer = min(budget)\n    elif buyAll(budget, budget):\n        answer = min(budget) + budget[0]\n    elif buyBought(budget, budget):\n        answer = min(budget) + budget[0] + budget[1]\n    elif buyAllAll(budget, budget):\n        answer = min(budget) + budget[0] + budget[1] + budget[2]\n    elif buyBoughtAll(budget, budget):\n        answer = min(budget) + budget[0] + budget[1] + budget[2] + budget[3]\n\n    print(answer)",
        "test": "assert solution(['5', '3', '0', '2', '0', '0', '2', '0', '2', '0', '0']) == '10'",
        "num_ids": 4034,
        "indeed": false
    },
    {
        "number": 4449,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"NO\"\n",
        "test": "assert solution(\"2 2 2 2 2 2 2 2\") == \"NO\"",
        "num_ids": 1374,
        "indeed": false
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = list(map(int, stdin.split()))\n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        x, y, w = list(map(int, stdin.split()))\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n    \n    # print(graph)\n\n    def find_smallest_path(v: int, n: int) -> int:\n        return min(n - len(path) for (path, _) in graph[v])\n    \n    # print(graph)\n\n    def dfs(v: int, n: int) -> int:\n        # print(v, n)\n        # print(graph[v])\n        if len(graph[v]) == 0:\n            return 0\n        if n == 0:\n            return 1\n        return dfs(graph[v][0][0], n-1) + dfs(graph[v][0][1], n)\n    \n    # print(dfs(0, N))\n    # print(dfs(N, N))\n    \n    def dfs_compare(v: int, n: int) -> int:\n        # print(v, n)\n        if len(graph[v]) == 0:\n            return 0\n        if n == 0:\n            return 1\n        if n == 1:\n            return dfs_compare(graph[v][0][0], n-1) + dfs_compare(graph[v][0][1], n)\n        return dfs_compare(graph[v][0][0], n) + dfs_compare(graph[v][0][1], n-1)\n    \n    # print(dfs_compare(0, N))\n    # print(dfs_compare(N, N))\n    \n    # print(dfs(0, N))\n    # print(dfs(N, N))\n    \n    # print(dfs_compare(0, N))\n    # print(dfs_compare(N, N))\n    \n    return str(dfs(0, N))[::-1][:-1]\n\n\nprint(solution(input()))\n",
        "test": "assert solution(\"3 3 2\") == 7",
        "num_ids": 1700,
        "indeed": false
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    a = list(map(int, stdin.split(' ')[1:]))\n    print(n)\n    print(a)\n    a_min = min(a)\n    a_max = max(a)\n    k = len(a)\n    # if n == 1:\n    #     print(k)\n    #     return '3'\n    # elif k == 1:\n    #     print(k)\n    #     return '4'\n    # elif k < 8:\n    #     return '6'\n    # else:\n    #     return '7'\n\n    while k < len(a):\n        a_min += a[k]\n        k += 1\n    print(a_min, a_max)\n    return str(a_min - a_max)",
        "test": "assert solution(stdin) == str(solution(stdin))",
        "num_ids": 1872,
        "indeed": false
    },
    {
        "number": 4452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    n = int(lines[0])\n    a = [int(n % 10**i) for i in range(int(n/10))]\n    b = [n % 10**i for i in range(int(n/10))]\n    a = [str(i) for i in a]\n    a = a[::-1]\n    if len(a) == 1:\n        return a[0]\n    else:\n        s = 0\n        for i in range(len(a)-1):\n            s += a[i]\n            s += b[i]\n            s += a[i+1]\n        return s\n\n-----Constraints-----\n1 <= t <= 100\n0 <= k <= 10^4\n\n----Time Limit----\n10000000\n",
        "test": "assert solution(",
        "num_ids": 556,
        "indeed": false
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(i) for i in stdin.split()]\n    kid_p = [int(i) for i in stdin.split()]\n    book = [[i for i in range(1, n+1)] for j in range(n)]\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n+1):\n            book[i][j] = kid_p[i]\n\n    for _ in range(n):\n        for _ in range(n):\n            print(*book[i][j] for i, j in enumerate(reversed(book[i])))\n\n-----Constraints-----\n1 <= q <= 10^5\n0 <= n <= 200\n0 <= p_i < p\n1 <= p < n\n0 <= a_i < n\na_i + 1 <= n\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Alternatives-----\nUse two stacks.\n\n'''\n\ndef",
        "test": "assert solution == \"1 1 1 1 1\"",
        "num_ids": 911,
        "indeed": false
    },
    {
        "number": 4454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, q, *prices = list(map(int, stdin.split()))\n    total = sum(prices)\n    for i in range(q):\n        price = prices[i]\n        min_price = price\n        for j in range(n):\n            total -= (price * j)\n            if total < 0:\n                total = 0\n            if total < min_price:\n                min_price = price * j\n        print(min_price)\n    return str(min_price)\n\n---Wikipedia---\n\ndef",
        "test": "assert solution(stdin) == \"1 1 1 1\"",
        "num_ids": 2480,
        "indeed": false
    },
    {
        "number": 4455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pairs = [map(int, stdin.split()) for _ in range(n)]\n    for pair in pairs:\n        if pair[0] < pair[1]:\n            pair[0], pair[1] = pair[1], pair[0]\n    answer = 0\n    for i in range(n):\n        answer += max(pairs[i])\n        for j in range(i+1, n):\n            if pairs[i][1] > pairs[j][0]:\n                answer -= max(pairs[i][1], pairs[j][1])\n    return str(answer)\n\n\n-----Constraints-----\n1 <= n <= 2 * 10^4\n2 <= k <= 10^5\n1 <= r_i <= 10^{9}\n\nExample 1:\n\nInput:\n4 2\n5 4 1 5 4 3 7 1 2 5\n6 3\n2 1\n5 8\n3 5\n\nOutput:\n2\n\nExample 2:\n\nInput:\n4 2\n10 4 10 15\n1 2\n4 3\n5 4\n\nOutput:\n2\n\n\n-----Constraints-----\n1 <= n <= 2 * 10^4\n2 <= k <= 10^5\n1 <= r_i <= 10^9\n\nInput:\n2\n2\n2\n2\n\nOutput:\n1\n\n\n-----Constraints-----\n1 <= n <= 2 * 10^4\n2 <= k <= 10^5\n1 <= r_i <= 10^9\n\nInput:\n2\n2\n3\n2\n\nOutput:\n1\n\nInput:\n3\n1\n1 1\n\nOutput:\n2\n\n\n-----Constraints-----\n1 <= n <= 2 * 10^4\n2 <= k <= 10^5\n1 <= r_i <= 10^9\n\nInput:\n2\n3\n2\n2 1\n\nOutput:\n2\n\n\n------My Solution------\n\nsolution(input)\n\nimport heapq\n\n\nclass Solution:\n    def solution(self, n: int, k: int) -> int:\n        # \u5148\u982d\u5074\u3092\u5c0f\u3055\u3044\u9806\u306b\u56de\u8ee2\n        # n\u306e\u500b\u6570\u3092k\u6841\u3068\u3057\u3066\u9806\u306b\u57fa\u6e96\u5024\u3092\u63a2\u3059\n        # \u8fba\u3092\u5927\u304d\u3055\u3067\u53d6\u308a\u51fa\u3059\n        # \u8fba\u304c\u7a7a\u306a\u3089\u3001\u5c0f\u3055\u3044\u9806\u306b\u56de\u8ee2\n        # \u5bfe\u7b56\u3059\u308b\n        # \u9806\u306b\u30ea\u30b9\u30c8\u304c\u5f53\u305f\u308a\n        # \u4e00\u3064\u4e0a\u9650\u6841\u3092\u6700\u521d\u306e\u5024\u3068\u3057\u3066\u63a2\u3059\n        # \u65b0\u3057\u304f\u5927\u304d\u3055\n        # \u5148\u982d\u5074\u306b\u6574\u5217\u3057\u3066\u6700\u77ed\u7684\u306b\u57fa\u6e96\u5024\u3092\u63a2\u3059\n        # \u4e00\u3064\u4e0a\u9650\u6841\u3092\u6700\u521d\u306e\u5024\u3068\u3057\u3066\u63a2\u3059\n        # \u79fb\u52d5\u5148\u304c\u8fba\u304c\u7a7a\u306a\u3089\u91cd\u8907\u6570\n        nums = [0] * (2 * k + 1)\n        nums[1] = 1\n        k -= 1\n        while k:\n            # \u5bfe\u7b56\n            # \u7a7a\u304b\u3089\u5207\u308c\u305f\u306e\u3067\u3001\u5c0f\u3055\u3044\u9806\u306b\u57fa\u6e96\u5024\u3092\u63a2\u3059\n            # \u79fb\u52d5\u5148\u304c\u6700\u5c0f\u7684\u306b\u57fa\u6e96\u5024\u3092\u63a2\u3059\n            # \u6700\u5c0f\u7684\u306b\u57fa\u6e96\u5024\u3092\u63a2\u3059\n            # \u8fba\u304c\u7a7a\u306a\u3089\u91cd\u8907\u6570\n            # \u5148\u982d\u5074\u306b\u6574\u5217\u3057\u3066\u6700\u77ed\u7684\u306b\u57fa\u6e96\u5024\u3092\u63a2\u3059\n            # \u4e00\u3064\u4e0a\u9650\u6841\u3092\u6700\u521d\u306e\u5024\u3068\u3057\u3066\u63a2\u3059\n            # \u65b0\u3057\u304f\u5927\u304d\u3055\n            # \u5bfe\u7b56\u3059\u308b\n            # \u9806\u306b\u30ea\u30b9\u30c8\u304c\u5f53\u305f\u308a\n            # \u4e00\u3064\u4e0a\u9650\u6841\u3092\u6700\u521d\u306e\u5024\u3068\u3057\u3066\u63a2\u3059\n            # \u65b0\u3057\u304f\u5927\u304d\u3055\n            # \u5bfe\u7b56\u3059\u308b\n            # \u9806\u306b\u30ea\u30b9\u30c8\u304c\u5f53\u305f\u308a\n            k -= 1\n            if nums[k + 1] < nums[k + 1 + nums[k]]:\n                nums[k] += nums[k + 1]\n                k += 1\n            else:\n                nums[k] += nums[k + 1 + nums[k]]\n                k += 2\n        return nums[0]\n\n\n-----Time complexity-----\n\n\u6642\u9593\u304c\u9ad8\u304f\u306a\u3044\u306e\u3067\n\n\u7cfb\u65701\u6841\u3067\u5272\u3063\u305f\u89e3\n\n\u7cfb\u65701\u6841\u3067\u542b\u307e\u308c\u308b\u89e3\n\n\u8003\u616e2\u6841\u3067\u542b\u307e\u308c\u305f\u89e3\n\n\u8003\u616e3\u6841\u3067\u542b\u307e\u308c\u305f\u89e3\n\n\u8003\u616e4\u6841\u3067\u542b\u307e\u308c\u305f\u89e3\n\n\u8003\u616e5\u6841\u3067\u542b\u307e\u308c\u305f\u89e3\n\n\u8003\u616e6\u6841\u3067\u542b\u307e\u308c\u305f\u89e3\n\n\u8003\u616e7\u6841\u3067\u542b\u307e\u308c\u305f\u89e3\n\n\u8003\u616e8\u6841\u3067\u542b\u307e\u308c\u305f\u89e3\n\n\u8003\u616e9\u6841\u3067\u542b\u307e\u308c\u305f\u89e3\n\n\ufffd",
        "test": "assert solution(\"5 4 3 6 5 7 2 4 6 3\") == \"3 0 4 6 7\"",
        "num_ids": 2415,
        "indeed": false
    },
    {
        "number": 4456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    for i in range(k):\n        if i + 1!= n:\n            p[p.index(i+1)] = p[p.index(i+1)] + 1\n            p[p.index(i)] = p[p.index(i)] - 1\n    \n    for i in range(k):\n        if i + 1!= n:\n            q[q.index(i+1)] = q[q.index(i+1)] + 1\n            q[q.index(i)] = q[q.index(i)] - 1\n    \n    ans = \"\"\n    for i in range(n):\n        ans += p[p.index(i+1)]\n        ans += q[q.index(i+1)]\n    \n    return ans if ans!= \"NO\" else \"YES\"\n",
        "test": "assert solution(\"leetcode\") == \"YES\"",
        "num_ids": 2170,
        "indeed": false
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    nums = [1]\n    for i in range(1, n):\n        nums.append(nums[i - 1] * a[i])\n    ans = 0\n    for j in range(len(nums) - 1, -1, -1):\n        if nums[j] >= ans:\n            ans = nums[j]\n    print(ans)\n    return str(ans)\n\n-----Constraints-----\n\n1 <= n <= 10^6\n1 <= a[i] <= 10^6\n\nExample 1:\n\nInput\n\n3\n20 10 20\n\nOutput\n\n43\n1 3 2 \n\nExample 2:\n\nInput\n\n5\n10 10 10 10\n\nOutput\n\n69\n6 1 3 5 2 4 \n\nExample 3:\n\nInput\n\n4\n10 4 5 4 4 5\n\nOutput\n\n3\n2 1 4 3 \n\nExample 4:\n\nInput\n\n1\n100 1000\n\nOutput\n\n3\n1 2 1\n\n\n\n-----Constraints-----\n\n0 <= n <= 10^6\na[i] <= 10^6\n\"\"\"\n\ndef",
        "test": "assert solution(\"2 3 1 1 2\") == \"3\"",
        "num_ids": 1366,
        "indeed": false
    },
    {
        "number": 4458,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n**2)\n\n\"\"\"\n\ndef",
        "test": "assert solution(myInput) == \"3\"",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 4459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    answer = n\n    answer2 = []\n    \n    for _ in range(n):\n        answer2.append(int(stdin.strip()))\n    answer2.sort()\n    answer2 = answer2[1:]\n    \n    return \",\".join(str(i) for i in answer2)\n    \"\"\"\n    if len(a) == 0:\n        return \",\".join(str(i) for i in a)\n    \n    return \",\".join(str(i) for i in sorted(a, key = lambda x : x*x)[0:len(a)-1])\n    \"\"\"\n",
        "test": "assert solution(inp) == 3",
        "num_ids": 2220,
        "indeed": false
    },
    {
        "number": 4460,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    snuke = 0\n    for i in a:\n        if i == 0:\n            snuke += 1\n    return str(snuke)\n",
        "test": "assert solution('0 2 3 4 5') == '1'",
        "num_ids": 2202,
        "indeed": false
    },
    {
        "number": 4461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef",
        "test": "assert solution('3 6 5 3') == '3'",
        "num_ids": 2786,
        "indeed": false
    },
    {
        "number": 4462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split(\" \")]\n    \n    def product_multiple(nums: list) -> list:\n        if len(nums) == 0:\n            return []\n        elif len(nums) == 1:\n            return [nums[0]]\n        \n        curr_product = 1\n        for i in range(len(nums) - 1):\n            curr_product = curr_product * nums[i + 1]\n        \n        return [curr_product] + product_multiple(nums[: len(nums) - 1])\n    \n    return \"Yes\" if product_multiple(a) else \"No\"\n\n-----SAMPLE INPUT-----\n3\n1 10 100\n\n-----SAMPLE OUTPUT-----\nYes\n\nOne solution is (1, 100, 10).\ndef",
        "test": "assert solution(\"\") == \"No\"",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 4463,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().lower()\n    t = stdin.strip().lower()\n    m = len(s)\n    n = len(t)\n    if not m <= n:\n        return 'No'\n    \n    a, b = sorted(sorted(s), key = lambda x : x.lower())\n    if a!= b:\n        return 'No'\n    \n    for i in range(1, n):\n        if a[i]!= b[i]:\n            return 'No'\n    \n    for i in range(m - n + 1):\n        temp = sorted(t[i:i+n])\n        if a == temp:\n            return 'Yes'\n    \n    return 'No'",
        "test": "assert solution('xy') == 'No'",
        "num_ids": 2666,
        "indeed": false
    },
    {
        "number": 4464,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if (C % B) % A == 0:\n        print('YES')\n    else:\n        print('NO')\n\ninput()",
        "test": "assert solution(\"5 2\") == \"NO\"",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 4465,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int,stdin.split()))\n    for i in range(1,len(l)//2):\n        if l[i]!= l[-i]:\n            return str(l[i])\n    return str(l[-1])\n",
        "test": "assert solution('5 2') == '2'",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 4466,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(len(stdin)):\n        if len(stdin[i]) == 3:\n            count += len(str(int(stdin[i]) + 1))\n        else:\n            count += 1\n    return count\n",
        "test": "assert solution('') == 0",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 4467,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    # min(n,m)  #<-- remove\n    a,b = list(map(int, input().split()))\n    c,d = list(map(int, input().split()))\n    # a,b = list(map(int, input().split()))\n    # c,d = list(map(int, input().split()))\n    # a,b,c,d = map(int, input().split())\n    pairs = 0\n    for i in range(n):\n        # print(i)\n        for j in range(n):\n            # print(j)\n            if a>=m and b>=m and a<=m and c<=m and d<=m:\n                if a<=m and b<=m and c<=m and d<=m:\n                    if i<j:\n                        if a<b and c<d and a<c and d<b:\n                            if a<b:\n                                if c<d:\n                                    pairs += 1\n                            else:\n                                if d<b:\n                                    pairs += 1\n                    if i>j:\n                        if a<b and c<d and a<c and d<b:\n                            if a<b:\n                                if c<d:\n                                    pairs += 1\n                            else:\n                                if d<b:\n                                    pairs += 1\n                    if j>i:\n                        if a<b and c<d and a<c and d<b:\n                            if a<b:\n                                if c<d:\n                                    pairs += 1\n                            else:\n                                if d<b:\n                                    pairs += 1\n                        else:\n                            if a<b:\n                                if c<d:\n                                    pairs += 1\n                            else:\n                                if d<b:\n                                    pairs += 1\n    return str(pairs)\n\n\nprint(solution(\"3 4 5\"))\n\ndef",
        "test": "assert solution(\"1 1 1 1 1 2 0 0 1 2 0\") == \"1\"",
        "num_ids": 3778,
        "indeed": false
    },
    {
        "number": 4468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    t_1, t_2 = map(int, stdin.split())\n    t_3 = t_2 + T\n    t_4 = N - t_1 - 1\n    t_5 = t_1 + t_3 - 1\n    t_6 = t_1 + t_3\n    print(min(t_1 + t_3 - 1, t_2 + t_3 - 1))",
        "test": "assert solution(\"1 3\") == \"2\"",
        "num_ids": 3987,
        "indeed": false
    },
    {
        "number": 4469,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    q, r, n = m, 0, n + 1\n    ids = [int(stdin.split()[i]) for i in range(n)]\n    res = []\n    while q > 0:\n        if q == 1:\n            res.append(1)\n        elif r == 0:\n            res.append(n)\n            q -= 1\n            r = n\n        else:\n            q -= 1\n            r -= 1\n    for i in range(m):\n        if q == 1:\n            res.append(i + 1)\n            break\n        q = r\n        if r == 0:\n            q -= 1\n            r = n\n    for i in range(m, n):\n        if r == 0:\n            q -= 1\n            r = n\n        if r == 1:\n            q -= 1\n        if q == 1:\n            break\n    return \",\".join(map(str, res))\n\n\ndef",
        "test": "assert solution(input()) == '0'",
        "num_ids": 2140,
        "indeed": false
    },
    {
        "number": 4470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = n\n    p = 1\n    while p!= 1:\n        if n % p == 0:\n            m = n // p\n        else:\n            m = n // (p+1)\n            n = n % (p+1)\n    print(m)\n    return -1\n    \n",
        "test": "assert solution(stdin) == -1",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 4471,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n        \n    n = int(stdin)\n    if n < 1 or n > 100:\n        return \"NO\"\n    a = [0] * n\n    for i in range(1, n):\n        a[i] = (i - 1) * 2\n    for i in range(1, n):\n        a[i] = a[i] + 2\n    for i in range(2, n):\n        if a[i] > 100:\n            a[i] = 0\n    if a[0] > 100:\n        a[0] = 0\n    if a[n-1] > 100:\n        a[n-1] = 0\n    if a[n-2] > 100:\n        a[n-2] = 0\n    if a[n-3] > 100:\n        a[n-3] = 0\n    if a[n-4] > 100:\n        a[n-4] = 0\n    return \"YES\"\n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n",
        "test": "assert solution(4) == \"YES\"",
        "num_ids": 3781,
        "indeed": false
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    st = stdin.split()\n    a, b = st[0], st[1]\n    a, b = a[::-1], b[::-1]\n    a, b = a.replace('a', ''), b.replace('a', '')\n\n    n = len(a)\n    dp = [1 for _ in range(n)]\n\n    for i in range(1, n):\n        dp[i] = (dp[i - 1] + 1) * 2\n        \n    \n    res = 2 ** 32 - 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == b[j]:\n                res = min(res, dp[i] + dp[j])\n\n    return str(res)\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\na and b consist of only lowercase English letters.\n\n\nExample 1:\n\nInput:\n\na = \"abacaba\"\nb = \"bbcabaa\"\n\nOutput:\n\n7\n\nExplanation:\n\nFor $a$, $b$ consist of only lowercase English letters, so we can obtain the string: \"bbcabaa\".\n\nFor $a$ and $b$ consists of exactly $n$ lowercase English letters, so we can obtain the string: \"abacaba\".\n\nFor $a$, $b$ consist of only lowercase English letters, so we can obtain the string: \"bbcabaa\".\n\nWe can apply these changes so that it is equal to string \"bbcabaa\".\n\nExample 2:\n\nInput:\n\na = \"zcabd\"\nb = \"dbacz\"\n\nOutput:\n\n1\n\nExplanation:\n\nFor $a$, $b$ consist of only lowercase English letters, so we can obtain the string: \"dbacz\".\n\nFor $a$ and $b$ consist of exactly $n$ lowercase English letters, so we can obtain the string: \"dbacz\".\n\nFor $a$ and $b$ consists of only lowercase English letters, so we can obtain the string: \"zcabd\".\n\n\n\"\"\"\n\n\n\ndef",
        "test": "assert solution([\"5\", \"abacaba\", \"bacabaa\", \"zcabd\"]) == \"0\"",
        "num_ids": 2875,
        "indeed": false
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"1 2 3 1 100000 100 1 4 5 100 100000000 1 6 1 7 1000000000 2 4 3 5 1 1 1\"), \"10\"",
        "num_ids": 2140,
        "indeed": false
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, m: int, d: int):\n        res = []\n        for i in range(n, m+1, d):\n            if i % d == 0:\n                res.append(i)\n            else:\n                solve(i+1, i, d//2)\n        return \" \".join(map(str, res))\n    return solve(n, m, 10**18)\n",
        "test": "assert solution(input()) == \"13\"",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, t = list(map(int, stdin.split()))\n    a = [int(x) for x in list(stdin.split())]\n    b = [int(x) for x in list(stdin.split())]\n    for i in range(t):\n        a[i] = a[i] - a[i] % 3\n        b[i] = b[i] - b[i] % 3\n    x = sum(a)\n    y = sum(b)\n    for i in range(t):\n        if a[i] >= x:\n            a[i] = a[i] - x % 3\n        if b[i] >= y:\n            b[i] = b[i] - y % 3\n    return '{0:.6f}'.format(sum(a) * sum(b))",
        "test": "assert solution(stdin) == \"999999999\"",
        "num_ids": 1761,
        "indeed": false
    },
    {
        "number": 4476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a,b):\n        x = abs(a - b)\n        y = abs(a+b)\n        if (x+y) % 2 == 0:\n            return x\n        else:\n            return y\n\n    n = int(stdin.strip())\n    x = 0\n    for i in range(n):\n        a, b = map(int, input().split())\n        if a > b:\n            x += solve(a,b)\n        else:\n            x += solve(b,a)\n    print(x)\n\n\n\n    return x\n\n\n-----Bug fix-----\n\nIn the second test case, you can just add $2$ two times.\n\nIn the third test case, you can subtract $4$ and add $2$.\n\nIn the fourth test case, you can subtract $6$, or add $4$ two times.\n\nIn the fifth test case, you can subtract $2$ two times.\n\nIn the sixth test case, you can subtract $6$ two times.\n\nIn the seventh test case, you can subtract $2$ two times.\n\nIn the eighth test case, you can subtract $6$ two times.\n\nIn the ninth test case, you can subtract $6$ two times.\n\nIn the tenth test case, you can subtract $2$ two times.\n\nIn the eleventh test case, you can subtract $6$ two times.\n\nIn the twelfth test case, you can subtract $6$ two times.\n\nIn the thirteenth test case, you can subtract $2$ two times.\n\nIn the fourthteenth test case, you can subtract $6$ two times.\n\nIn the fifthteenth test case, you can subtract $6$ two times.\n\nIn the sixthteenth test case, you can subtract $2$ two times.\n\nIn the seventhteenth test case, you can subtract $6$ two times.\n\nIn the eighth15 test case, you can subtract $6$ two times.\n\nIn the nineth test case, you can subtract $2$ two times.\n\nIn the tenthtwenty test case, you can subtract $6$ two times.\n\nIn the vinteenth test case, you can subtract $6$ two times.\n\nIn the eighteenth test case, you can subtract $2$ two times.\n\nIn the nineteenth test case, you can subtract $6$ two times.\n\nIn the twentiethtest case, you can subtract $2$ two times.\n\n\n-----Bug fix-----\n\nIn the fourth test case, you can subtract $6$ two times.\n\nIn the fifth test case, you can subtract $2$ two times.\n\nIn the sixth test case, you can subtract $6$ two times.\n\nIn the seventh test case, you can subtract $2$ two times.\n\nIn the eighth test case, you can subtract $6$ two times.\n\nIn the ninth test case, you can subtract $2$ two times.\n\nIn the tenthtest case, you can subtract $6$ two times.\n\nIn the thirthtest case, you can subtract $2$ two times.\n\nIn the fourteenthtest case, you can subtract $6$ two times.\n\nIn the fifthteenthtest case, you can subtract $6$ two times.\n\nIn the sixthtest case, you can subtract $2$ two times.\n\nIn the seventhtest case, you can subtract $6$ two times.\n\nIn the eighthtest case, you can subtract $6$ two times.\n\nIn the ninethtest case, you can subtract $2$ two times.\n\nIn the tenthtwentytest case, you can subtract $6$ two times.\n\nIn the vinteenthtest case, you can subtract $6$ two times.\n\nIn the eighteenthtest case, you can subtract $2$ two times.\n\nIn the nineteenthtest case, you can subtract $6$ two times.\n\n\n\"\"\"\n",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 3825,
        "indeed": false
    },
    {
        "number": 4477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    answer = 0\n    for i in A:\n        if i % 10 == 0:\n            answer += i // 10\n    return str(answer)",
        "test": "assert solution('t4'), '4'",
        "num_ids": 2060,
        "indeed": false
    },
    {
        "number": 4478,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = len(stdin)\n    if n % 2 == 0:\n        return \"NO\"\n    elif n % 2 == 1:\n        return \"YES\"\n    elif k > 2:\n        seq = list(map(int, stdin.split()))\n        i = 0\n        j = 0\n        i_min = None\n        i_max = None\n        j_min = None\n        j_max = None\n        while j < n:\n            if seq[j]!= seq[j + 1]:\n                j += 1\n                continue\n            j_min = seq[j]\n            j_max = seq[j]\n            i_min = i\n            i_max = i\n            while j < n:\n                if seq[j]!= seq[j + 1]:\n                    j += 1\n                    continue\n                j_min = min(j_min, seq[j])\n                j_max = max(j_max, seq[j])\n                i_min = min(i_min, seq[j])\n                i_max = max(i_max, seq[j])\n            seq.remove(seq[j + 1])\n            seq.remove(seq[j])\n            seq.remove(seq[j])\n            seq.remove(seq[j + 1])\n            i += 1\n            j += 1\n        if i == 0:\n            return \"NO\"\n        elif i_min == i_max:\n            return \"YES\"\n        else:\n            return \"YES\"\n    else:\n        return \"YES\"\n",
        "test": "assert solution('3') == 'YES'",
        "num_ids": 2106,
        "indeed": false
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([int(i) for i in stdin.split()]))\n",
        "test": "assert solution(",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    def is_equal(arr):\n        return set(map(int, map(str,arr))) == set(map(int, map(str,stdin)))\n    return \"\".join(sorted(list(map(str,map(int,stdin))))) if is_equal(list(map(int,stdin))) else None",
        "test": "assert solution('3 0') == '3 0'",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 4481,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S_1 = stdin.split()\n    S_N = list(map(str, S_1))\n    S_1.sort(key=lambda x: (len(x), x))\n    S_N.sort()\n    for i in range(N):\n        if i < N // 2:\n            print(S_N[i])\n        else:\n            print(S_1[i])\n    return''.join(S_N)\n",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 1454,
        "indeed": false
    },
    {
        "number": 4482,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, a_1, a_2, a_N = map(int, stdin.split())\n    b = a_1 + a_2\n    if N > 100000:\n        return 'IMPOSSIBLE'\n    elif a_N == 0:\n        return 'IMPOSSIBLE'\n    else:\n        return min(a_N * (a_1 + a_2) ** 2, b ** 2 - (a_2 + a_1) * a_N)",
        "test": "assert solution('2') == '8'",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 4483,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    # A, B = map(int, input().split())\n    # X = int(input())\n    \n    print(int(A/B) * X)\n    return '{:.2f}'.format(int(A/B) * X)\n\"\"\"\n\nclass Solution:\n    def __init__(self, A, B, X):\n        self.A, self.B, self.X = A, B, X\n    \n    def __repr__(self):\n        return f'A = {self.A}, B = {self.B}, X = {self.X}'\n    \n    def solution(self, A, B, X):\n        return (int(A/B) * X)\n    \n    def __str__(self):\n        return str(self.A/self.B)",
        "test": "assert solution(input()) == \"84\"",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 4484,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    D = []\n    for _ in range(N):\n        D.append(list(map(int, list(stdin.split()[0]))))\n    \n    D = [list(map(str, row)) for row in D]\n    for row in D:\n        for i in range(N):\n            if row[i] == row[i+1] and row[i] == row[i-1]:\n                row[i], row[i+1] = row[i+1], row[i]\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if row[i] == row[j]:\n                row[i], row[j] = row[j], row[i]\n    \n    D.sort(key=lambda x: x.count(x[-1]))\n    \n    result = 1\n    for dog in D:\n        for index in range(len(dog)):\n            if index == len(dog) - 1:\n                result *= index\n            else:\n                result *= index + 1\n                \n    print(result)\n\n----Constraints----\n 1 \u2264 N, M \u2264 10^5\n\n---Time---\nO(N * M)\n\n---Space---\nO(1)\n'''\n\ndef",
        "test": "assert solution('D') == '8'",
        "num_ids": 1213,
        "indeed": false
    },
    {
        "number": 4485,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a_list, b_list = [], []\n    for _ in range(N):\n        a_list.append(list(map(int, stdin.split())))\n    for _ in range(M):\n        b_list.append(list(map(int, stdin.split())))\n    a_list.sort(key=lambda x: x[0])\n    b_list.sort(key=lambda x: x[1])\n    a_len = len(a_list)\n    b_len = len(b_list)\n    visited = [False for _ in range(a_len)]\n    path = [[] for _ in range(a_len)]\n    solve(a_list, b_list, 0, 0, visited, path)\n    return 'POSSIBLE' if all(visited) else 'IMPOSSIBLE'\n\ndef",
        "test": "assert solution(",
        "num_ids": 2973,
        "indeed": false
    },
    {
        "number": 4486,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    s = stdin.split()\n    odd_index = list(range(len(s)))\n    \n    for i in range(len(s)):\n        if i%2 == 0:\n            odd_index[i//2] = s[i]\n            \n    for i in range(len(s)):\n        if i%2 == 1:\n            odd_index[i//2] = odd_index[i//2] + s[i]\n            \n    for i in range(len(s)):\n        answer += odd_index[i]\n    \n    return answer",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 4487,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()\n    B = A[0][::-1]\n    C = A[1]\n    if B!= C:\n        return 'NO'\n    else:\n        return 'YES'\n",
        "test": "assert solution(\"rng\") == \"YES\"",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 4488,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for i in range(len(stdin)):\n        num = int(stdin[i])\n        if i==0:\n            answer = str(num)\n        elif num<0:\n            answer = str(num*-1)\n        elif num > 0:\n            answer = str(num)\n    return answer",
        "test": "assert solution(33) == \"GREATER\"",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 4489,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, S = [int(i) for i in stdin.split()]\n    A = [list(input()) for i in range(N)]\n    B = [list(input()) for i in range(N)]\n    if (N == 1 or N == 2) and (S == 2 or S == 3):\n        return '0'\n    X = 0\n    for i in range(N):\n        for j in range(N):\n            if A[i][j]!= B[i][j]:\n                break\n            if A[i][j] == S:\n                X += 1\n                if X == S:\n                    return X\n            if A[j][i]!= S:\n                break\n            if A[j][i] == S:\n                X += 1\n                if X == S:\n                    return X\n    return X\n'''\n\ndef",
        "test": "assert solution(input) == \"1\"",
        "num_ids": 2779,
        "indeed": false
    },
    {
        "number": 4490,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n",
        "test": "assert solution(stdin) == \"G\"",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 4491,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = [list(map(int, input().split())) for _ in range(N)]\n    candies = [0] * (N)\n    visited = [0] * (N)\n    max_candies = 0\n\n    def helper(i, j, n):\n        nonlocal max_candies, visited\n        if i < 0 or j < 0 or i >= n or j >= n or visited[i][j] == 1:\n            return\n        visited[i][j] = 1\n        candies[i] += A[i][j]\n        if n == 1:\n            max_candies = max(max_candies, candies[i])\n        elif n == 2:\n            if candies[i] < candies[i+1]:\n                max_candies = max(max_candies, candies[i] + candies[i+1])\n            else:\n                max_candies = max(max_candies, candies[i] + candies[i+1])\n        else:\n            helper(i-1, j, n//3)\n            helper(i-1, j+1, n//3)\n            helper(i-1, j+2, n//3)\n            helper(i-1, j, n//3)\n        visited[i][j] = 0\n        candies[i] -= A[i][j]\n\n    for i in range(N):\n        helper(i, 0, N)\n    for i in range(N-1, 0, -1):\n        helper(i, 0, N)\n    return str(max_candies)\n",
        "test": "assert solution(stdin) == 14",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 4492,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin)\n    res = 0\n    for x in A:\n        if x > 1:\n            res += x\n    return str(res)\n",
        "test": "assert solution(input) == \"2\"",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 4493,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    ints = [int(x) for x in stdin.split()]\n    a = ints[0]\n    b = ints[1]\n    c = ints[2]\n    a_1 = c - a\n    b_1 = b - b\n    if a_1 == b_1:\n        return \"No\"\n    if a_1 == b_1 == c:\n        return \"Yes\"\n    if a_1 > b_1:\n        return \"No\"\n    if a_1 < b_1:\n        return \"No\"\n    if a_1 == b_1 == c:\n        return \"No\"\n    if a_1 == b_1 == c:\n        return \"Yes\"\n",
        "test": "assert solution('1 0 1') == 'No', 'Please enter correct input.'",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 4494,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split(' ')[0])\n    y = int(stdin.split(' ')[1])\n    if x == 1:\n        return 'ARC'\n    elif x == 2:\n        return 'ABC'\n    else:\n        return 'ARC'\n    \n    return\n\ndef",
        "test": "assert solution(123) == \"ABC\"",
        "num_ids": 2251,
        "indeed": false
    },
    {
        "number": 4495,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(sum([int(i) for i in str(x)]))\n",
        "test": "assert solution(\"3\"), \"The solution function has an incorrect syntax!\"",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 4496,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return(\n        'Christmas'\n    )\n",
        "test": "assert solution(\"25\") == \"Christmas\"",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 4497,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    for num in nums:\n        if num % 2 == 1:\n            nums.remove(num)\n    return str(sum(nums))\n",
        "test": "assert solution(\"2\") == \"2\"",
        "num_ids": 2569,
        "indeed": false
    },
    {
        "number": 4498,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    # take input from stdin\n    print('Enter:')\n    a, b, c, d = map(int, stdin.split())\n\n    if a == b and b == c and c == d:\n        return 'Yes'\n\n    if a == b or a == c or b == c:\n        if a == b:\n            return 'Yes'\n        else:\n            return 'No'\n\n    if abs(b - c) <= d:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution('4 7 9 3') == 'Yes'",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 4499,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin.lower()))\n",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 4500,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    from itertools import combinations\n\n    toy = Counter(map(int, stdin.split()))\n    answer = 'Yes'\n    for pair in combinations(toy.keys(), 2):\n        if pair[0] + pair[1] <= 500:\n            answer = 'No'\n            break\n    return answer\n",
        "test": "assert solution(\"1 3 2\") == \"No\"",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 4501,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  A = int(stdin.split()[0])\n  x = [int(x) for x in stdin.split()[1::2]]\n  ans = 0\n  for i in range(N):\n    if x[i] == A:\n      ans += 1\n    elif A == x[i]:\n      ans += 1\n  return str(ans)\n\n-----Sample Output-----\n1\n\n - The following are the 5 ways to select cards such that the average is 8:\n - Select the 3-rd card.\n - Select the 1-st and 2-nd cards.\n - Select the 1-st, 2-nd and 3-th cards.\n - Select the 1-st, 3-th and 4-th cards.\ndef",
        "test": "assert solution(\"2 3 2\") == \"2\"",
        "num_ids": 1422,
        "indeed": false
    },
    {
        "number": 4502,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1::2]]\n    b = a[::-1]\n    b = b[1::]\n    b = [b[i] for i in range(n)]\n    b = b[::-1]\n    print(' '.join(b))\n    return''.join(b)\n\n-----Sample Output-----\n2 1 1 1 1 1 1\n2 1 1 2 3 2 3\n2 1 1 3 3 2\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2",
        "test": "assert solution(input()) == \"4 2 1 3\"",
        "num_ids": 2122,
        "indeed": false
    },
    {
        "number": 4503,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N, H = map(int, stdin.split())\n    A = [int(x) for x in stdin.split()]\n    result = ['No' if H == 0 else 'Yes' for H in A]\n    return ''.join(result)",
        "test": "assert solution(input) == \"Yes\"",
        "num_ids": 3373,
        "indeed": false
    },
    {
        "number": 4504,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, S = len(stdin), ''.join(stdin)\n    len_odd = 0\n    for char in reversed(S):\n        if char == 'a' or char == 'b':\n            if char == 'a':\n                len_odd += 1\n            else:\n                len_odd -= 1\n        else:\n            break\n    print(len_odd)\n    return len_odd\n\n\"\"\"\ndef",
        "test": "assert solution('aaabbbaaabb') == 0",
        "num_ids": 2764,
        "indeed": false
    },
    {
        "number": 4505,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    i = n // 3 - 1\n    if (n % 3!= 0) or (n % 3 == 0):\n        return 'No'\n    if stdin[i] == 'a':\n        return 'No'\n    if stdin[i] == 'b':\n        return 'Yes'\n    if stdin[i] == 'c':\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert solution(\"bac\") == \"No\"",
        "num_ids": 2740,
        "indeed": false
    },
    {
        "number": 4506,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    numbers = [int(i) for i in stdin.strip().split()]\n    arrays = []\n    for i in numbers:\n        arrays.append(i)\n    numbers = sorted(arrays)\n    m = len(arrays)\n    j = 0\n    while j < m:\n        if numbers[j] == numbers[j+1]:\n            numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n            j += 2\n        else:\n            j += 1\n    \n    return str(sum(numbers))\n\n\n-----Examples-----\nInput\n2\n4 3 2\n\nOutput\n10\ndef",
        "test": "assert solution(stdin) == 7857",
        "num_ids": 3819,
        "indeed": false
    },
    {
        "number": 4507,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 4:\n        return str(n)\n    elif n > n:\n        return solution(stdin)\n\n    a, b = list(map(int, stdin.split()))\n    for i in range(4):\n        for j in range(a, a+b):\n            a_j = a*j\n            for k in range(4):\n                for l in range(b):\n                    x_l = k*a_j + l\n                    y_l = k*b + l\n                    if 0 <= x_l <= n and 0 <= y_l <= n:\n                        if x_l == i or y_l == i:\n                            return str(a_j+b)\n    return \"17\"\n\n\nExplanation\n\nInput\n5 1 4\n2 5 7 4 6\n5 4\n\nOutput\n7\n\nInput\n9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n\nOutput\n17\n\nInput\n5 1 4\n2 5 7 4 6\n5 4\n\nOutput\n17\n'''\nimport sys\n\nn = int(sys.stdin.readline())\na,b = map(int,sys.stdin.readline().split())\na_j = a*n\nfor i in range(b):\n    a_l = a*i\n    for j in range(n):\n        x_l = i*a_j + j\n        if 0 <= x_l <= n and 0 <= a_l <= n:\n            if x_l == i or a_l == i:\n                return str(a_j+b)",
        "test": "assert solution(\"4 5\") == \"3\"",
        "num_ids": 2311,
        "indeed": false
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, edges = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    visited = [False for _ in range(n)]\n    visited[1] = True\n    \n    distance = 0\n    \n    for i in range(1, n):\n        for u in range(n):\n            for v in graph[u]:\n                if visited[v] == False and len(graph[v]) > 1 and not visited[v]:\n                    visited[v] = True\n                    visited[u] = False\n                    distance += 1\n                    break\n    \n    if distance == n - 1:\n        return 2\n    elif distance == 2:\n        return 0\n    else:\n        return distance\n",
        "test": "assert solution(",
        "num_ids": 3017,
        "indeed": false
    },
    {
        "number": 4509,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    \n    for i in range(k, n+1):\n        if i % n!= 0:\n            break\n        print(i)",
        "test": "assert solution(stdin) == '113'",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    phonebook = []\n    for _ in range(n):\n        phonebook.append(list(map(int, stdin.split())))\n\n    answer = []\n    for _ in range(k):\n        answer.append(phonebook.pop(0))\n\n    return '\\n'.join(answer)\n\n-----Constraints-----\n\n1 <= n, k <= 10^5\n0 <= id_1, id_2 <= 10^9\n0 <= id_i \\le 10^9\n\n\n-----Submissions-----\n\n1\n\n\n------PART 2-----\n\nOutput\n\n\n\nTime Limit: 1 second\nMemory Limit: 1MB\n\nConcept\n\nThe number of messages and the number of conversations are both at most $k$. There is no conversation with the friend whose ID is $id_i$ has been displayed by the phone. After a conversation with $id_i$ is displayed, there is no conversation with any of your friends.\n\nThe number of messages is only odd in a conversation. A conversation consists of either $1 \\le id_i \\le 10^9$ or $i \\le id_i \\le k$ where $i$ is the position of the conversation with the friend $id_i$.\n\n\nExample 1:\nInput\n1 2\n1 2\n3 4\n3 4\n4 3\n4 3\nOutput\n2\n2\n4\n4\n\nExplanation:\nWe start the conversation with friend 1 with ID 1.\nWe send message \"1\" to friend 2, and we show second message \"3\", which is displayed on the screen at position 3 of the conversation.\nWe send message \"3\" to friend 4, and we show first message \"4\", which is displayed at position 3 of the conversation.\nAfter receiving all the messages, we have displayed the conversation which is at position $i$, the conversation with the friend $id_i$ is displayed.\n\nExample 2:\nInput\n1 3\n1 2\n3 4\n3 4\n4 3\nOutput\n2\n2\n4\n4\n\nExplanation:\nWe start the conversation with friend 1 with ID 1.\nWe send message \"3\" to friend 2, and we send message \"4\" to friend 3.\nWe show first message \"4\", which is displayed at position $i$.\nAfter receiving all the messages, we have displayed the conversation which is at position $i$, the conversation with the friend $id_i$ is displayed.\n\nExample 3:\nInput\n1 2 3\n1 2 3\n2 3 4\n3 4 5\n4 5 6\nOutput\n2\n2\n4\n4\n\nExplanation:\nWe start the conversation with friend 1 with ID 1.\nWe send message \"2\" to friend 2, and we show second message \"3\", which is displayed at position $i$.\nAfter receiving all the messages, we have displayed the conversation which is at position $i$.\nWe start the conversation with friend 1 with ID 1.\nWe send message \"3\" to friend 3, and we show first message \"4\", which is displayed at position $i$.\nAfter receiving all the messages, we have displayed the conversation which is at position $i$.\n\n\nExample 4:\nInput\n10 4\n1 3 2 1 1 3 2\n1 3 2 1 1 3 2\n1 3 2 1 1 3 2\n1 3 2 1 1 3 2\n2 1 3 2 1 1 3 2\n2 1 3 2 1 1 3 2\n2 1 3 2 1 1 3 2\n3 2 1 3 2 1 1 3 2\n3 2 1 3 2 1 1 3 2\n4 3 2 1 3 2 1 1 3 2\n4 3 2 1 3 2 1 1 3 2\n4 3 2 1 3 2 1 1 3 2\n3 3 2 1 3 2 1 1 3 2\n\nOutput\n10\n1\n2\n3\n4\n\n\n\n-----Constraints-----\n\n1 <= n, k <= 10^5\n0 <= id_1, id_2 <= 10^9\n0 <= id_i \\le 10^9\n\n\"\"\"\nfrom itertools import permutations\nfrom collections import defaultdict\nimport math\nimport copy\n\n\nclass Solution:\n    def __init__(self, n: int, k: int):\n        self.n = n\n        self.k = k\n        self.nums = []\n        self.nums2 = []\n\n        def find(idx, nums):\n            if idx == len(nums):\n                self.nums.append(copy.deepcopy(nums))\n                return\n            if idx == len(nums):\n                self.nums2.append(copy.deepcopy(nums))\n                return\n            if nums[idx] == idx:\n                find(idx+1, nums)\n                return\n            find(idx+1, nums)\n            find(idx+1, nums)\n\n        find(0, self.nums)\n        find(0, self.nums2)\n\n        self.nums.sort()\n        self.nums2.sort()\n        # print(self.nums, self.nums2)\n        self.nums2.sort()\n\n    def find(self, idx, nums):\n        if idx ==",
        "test": "assert solution
        "num_ids": 3328,
        "indeed": false
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, k, c, d = list(map(int, stdin.strip().split()))\n    cost_pile = list(map(int, stdin.strip().split()))\n    cost_pile.sort()\n    result = cost_pile[n//2]\n    dmg = 0\n    for i in range(n//2):\n        dmg += cost_pile[i] + cost_pile[n-i-1]\n    result = max(result, dmg)\n    for i in range(n-1):\n        for j in range(i+1,n-1):\n            if cost_pile[i] + cost_pile[j] == cost_pile[n-1] and i!= j:\n                cost_pile[j] += cost_pile[i]\n                dmg += cost_pile[j]\n    for i in range(n-1):\n        for j in range(n-1,i, -1):\n            if cost_pile[i] + cost_pile[j] == cost_pile[n-1] and i!= j:\n                cost_pile[j] += cost_pile[i]\n                dmg += cost_pile[j]\n    for i in range(n):\n        if cost_pile[i] + cost_pile[n-i-1] == cost_pile[n-1] and i!= n-1:\n            cost_pile[n-1] += cost_pile[i]\n            dmg += cost_pile[n-1]\n    for i in range(n):\n        if cost_pile[i] + cost_pile[n-i-1] == cost_pile[n-1] and i!= n-1:\n            cost_pile[n-2] += cost_pile[i]\n            dmg += cost_pile[n-2]\n    result = max(result, dmg)\n    if c < 9:\n        return '%d' % result\n    if c == 9:\n        return '%d' % cost_pile[0]\n    return '%d' % result",
        "test": "assert solution(\"2 5 3 5 4 6 5 1 3 1\") == \"42\"",
        "num_ids": 4335,
        "indeed": false
    },
    {
        "number": 4512,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    \n    s=stdin.split()\n    #print(s)\n    if len(s)<2:\n        return 'error'\n    else:\n        def replace(s):\n            if s=='c':\n                return 'c'\n            elif s=='f':\n                return 'f'\n            elif s=='o':\n                return 'o'\n            elif s=='a':\n                return 'a'\n            elif s=='e':\n                return 'e'\n            elif s=='g':\n                return 'g'\n            else:\n                return s\n            \n        q=int(s[0])\n        l=int(s[1])\n        r=int(s[2])\n        s=''.join(sorted(s[3:],reverse=True))\n        #print(s)\n        #print(q,l,r)\n        #print(replace(s))\n        answer=1\n        #print(replace(s))\n        for i in range(q):\n            if l<=r:\n                a=l-i\n                if s[l:r+1]==s[:a+1]:\n                    answer+=1\n                else:\n                    l+=1\n            else:\n                r+=1\n        return answer\n",
        "test": "assert solution(\"abacaba\"), 5",
        "num_ids": 3366,
        "indeed": false
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        ans = []\n        for line in range(9):\n            line_ans = []\n            for col in range(9):\n                curr = int(stdin[line*9 + col])\n                for i in range(1, 10):\n                    if curr == i:\n                        line_ans.append(i)\n                    else:\n                        if curr in range(1, 10):\n                            line_ans.append(i)\n                        else:\n                            line_ans.append(0)\n            ans.append(line_ans)\n        stdin =''.join(map(''.join, ans))\n    return stdin\n        \n",
        "test": "assert solution(\"2\\n3\\n5\\n3\\n5\\n1\\n\") == \"3345\"",
        "num_ids": 3292,
        "indeed": false
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    p_i = [int(stdin.split()[i]) for i in range(n)]\n    k_i = p_i[q-1]\n    p_i.sort()\n    k_i += 1\n    l = []\n    for i in range(n):\n        if p_i[i] < k_i:\n            l.append(i+1)\n    l.sort()\n    print(\"\".join(str(k_i-i) for i in l))\n    return \"-1\"\n\n-----TEST-----\nprint(solution(\"4 3 2 5 1 5\"))\nprint(solution(\"2 2 3 1 4\"))\nprint(solution(\"2 1 2\"))\nprint(solution(\"3 2 5 4 6 7\"))\nprint(solution(\"1 5\"))\nprint(solution(\"3 3 3 3\"))\nprint(solution(\"6 4 4\"))\nprint(solution(\"2 7 6\"))\nprint(solution(\"4 1 3 7 3\"))\nprint(solution(\"7 8 6 9 8 8\"))\nprint(solution(\"3 5 4 6 8 7\"))\nprint(solution(\"1 1 1 7 7\"))\n",
        "test": "assert solution(input()) == \"0\"",
        "num_ids": 2358,
        "indeed": false
    },
    {
        "number": 4515,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"5\\n10\\n20\\n15\\n14\\n13\\n12\\n\") == \"NO\"",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 4516,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    n = int(stdin[0])\n    m = int(stdin[1])\n    \n    x = list(map(int, stdin[2:]))\n    \n    x_1 = []\n    x_2 = []\n    for i in range(m):\n        x_1.append(x[i] - x[i+1])\n        x_2.append(x[i] - x[i+1])\n    \n    f = 0\n    for i in range(n):\n        f += (x_1[i] * x_2[i])\n    return str(f)\n\n\n-----Algorithm-----\n\nInput\n4 4\n1 2 3 4\n\nOutput\n3 4 6 5 \n\nInput\n5 5\n2 1 5 3 5\n\nOutput\n9 8 12 6 8 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\n\n\n-----Algorithm-----\n\nInput\n5 5\n2 1 5 3 5\n\nOutput\n3 3 \n\n\n\n-----Algorithm-----\n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\n\n\n-----Algorithm-----\n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\n\n\n-----Algorithm-----\n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\n\n\n-----Algorithm-----\n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\n\n\n-----Algorithm-----\n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\n\n\n-----Algorithm-----\n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\n\n\n-----Algorithm-----\n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2",
        "test": "assert solution(input()) == 12",
        "num_ids": 1580,
        "indeed": false
    },
    {
        "number": 4517,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = [int(x) for x in stdin.split()]\n    # print(q)\n    u = q[0]\n    v = q[1]\n    k = q[2]\n    # print(k)\n    # print(u,v)\n    # print(k)\n    for i in range(1, k+1):\n        u = u * i\n        v = v * i\n    # print(u,v)\n    if u >= n or v >= n:\n        return \"NO\"\n    # print(v,u)\n    path = [u]\n    temp = 0\n    i = 1\n    while i <= k:\n        # print(u,v)\n        temp = v - u + 1\n        # print(temp)\n        temp = temp * i\n        # print(temp)\n        path.append(temp)\n        if temp == v:\n            break\n        i += 1\n    # print(path)\n    # print(\"YES\")\n    path.reverse()\n    # print(path)\n    answer = \"YES\"\n    for i in range(1, k):\n        # print(v - u + 1)\n        path.pop(0)\n        # print(path)\n        answer = answer + \"YES\"\n        # print(answer)\n        if path[-1] == u:\n            answer = answer + \"YES\"\n        else:\n            answer = answer + \"NO\"\n        # print(answer)\n    return answer\n",
        "test": "assert solution(stdin) == \"NO\"",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 4518,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    n = len(a)\n    if n <= 1:\n        return \"NO\"\n    s = set(a)\n    for i in range(1, n-1):\n        for j in range(i+1, n):\n            if a[i] + a[j] in s:\n                return \"NO\"\n            s.add(a[j] + a[i])\n    return \"YES\"\n",
        "test": "assert solution(\"2\") == \"NO\"",
        "num_ids": 1141,
        "indeed": false
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    return min(min(str(int(stdin[0]) + int(stdin[1]) + int(stdin[2])) - int(stdin[3]), max(str(int(stdin[0]) + int(stdin[1]) + int(stdin[2])) - int(stdin[3])) + int(stdin[4]),\n               min(str(int(stdin[0]) + int(stdin[1]) + int(stdin[2])) - int(stdin[3])) + int(stdin[4]),\n               min(str(int(stdin[0]) + int(stdin[1]) + int(stdin[2])) - int(stdin[3]), max(str(int(stdin[0]) + int(stdin[1]) + int(stdin[2])) - int(stdin[3]), int(stdin[4])))\n'''\n\n\ndef",
        "test": "assert solution(\"1111100\") == \"011011010\"",
        "num_ids": 2540,
        "indeed": false
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        segments.append((x, y))\n    for i in range(k):\n        index = i\n        while index < n:\n            if not segments[index][1] > segments[i][0]:\n                segments.remove((index, segments[i][0]))\n            index += 1\n    if segments:\n        print(n - len(set(i for _, i in segments)))\n    else:\n        print(0)\n\n-----Constraints-----\n1 <= n, k <= 200\n-10^6 <= stdin.length <= 10^6\nstdin contains only digits.\n0 <= l_i < r_i <= n\n\n-------------------------------\n\nfrom itertools import combinations\nfrom collections import defaultdict\n\n\ndef",
        "test": "assert solution(",
        "num_ids": 2816,
        "indeed": false
    },
    {
        "number": 4521,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 2 or n > 9:\n        return 0\n    x, y = map(int, stdin.split())\n    if (x-y) % 2!= 0:\n        return 0\n    else:\n        return (x-y) // 2\n\nprint(solution(stdin))\n",
        "test": "assert solution(stdin) == 22",
        "num_ids": 1931,
        "indeed": false
    },
    {
        "number": 4522,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = [[0] * (n + 1) for _ in range(n + 1)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        g[u][v] = w\n    # build graph\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if g[i][j] > 0:\n                g[i][j] += g[i][j - 1]\n                g[j][i] += g[i][j - 1]\n    # find all possible pairs of vertices\n    pair_list = list()\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if g[i][j] + g[i][k] + g[k][j] < g[i][j] + g[k][j] + g[j][k]:\n                    pair_list.append((i, j, k))\n    # sort by weight\n    sorted_list = sorted(pair_list, key=lambda x: x[2])\n    # print(pair_list)\n    # print(sorted_list)\n    answer = []\n    for i in range(len(sorted_list)):\n        if i % 2 == 0:\n            answer.append(sorted_list[i][0])\n        else:\n            answer.append(sorted_list[i][1])\n    return \" \".join(map(str, answer))\n\n-----Note-----\n\nThe picture shows the tree from the first example: [Image]\ndef",
        "test": "assert solution == '21 7 15 21 3 ', 'Incorrect solution'",
        "num_ids": 2615,
        "indeed": false
    },
    {
        "number": 4523,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a=list(map(int,stdin.split()))\n    m=a[0]\n    n=a[1]\n    if n==1:\n        return 'YES'\n    if n==2:\n        return 'YES'\n    i=0\n    j=0\n    while i<m:\n        if a[i]!=a[i+1]:\n            a[i],a[i+1]=a[i+1],a[i]\n        else:\n            i+=2\n    while j<n:\n        if a[j]!=a[j+1]:\n            a[j],a[j+1]=a[j+1],a[j]\n        else:\n            j+=2\n    if a[0]==a[-1]:\n        return 'NO'\n    return 'YES'",
        "test": "assert solution(\"3 2\") == \"YES\"",
        "num_ids": 1132,
        "indeed": false
    },
    {
        "number": 4524,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(s) for s in stdin.split()]\n    b = [int(s) for s in stdin.split()]\n\n    a_b_a = []\n    for a_b in a:\n        a_b_a.append(a_b * 2)\n    a_b_a = list(map(lambda x: x * 2, a_b_a))\n    a_b_a = [str(x) for x in a_b_a]\n\n    a_b_a = \"\".join(a_b_a)\n    \n    def solution(a, b):\n        def cnt(a, b):\n            if b == 0:\n                return 0\n            if b == 1:\n                return 1\n            return a * cnt(a, b // 2) + cnt(a, b // 2)\n        c = cnt(a, b)\n        return a[0:c] + a[c:]\n    \n    return solution(a_b_a, b)\n",
        "test": "assert solution(stdin) == \"11\"",
        "num_ids": 2056,
        "indeed": false
    },
    {
        "number": 4525,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    if n % 2 == 0:\n        a = list(map(int, stdin.split()))\n        a.sort()\n        for i in range(q):\n            a = list(map(int, stdin.split()))\n            if sum(a)%2 == 0:\n                if a[0] == a[-1]:\n                    print('NO')\n                else:\n                    print('YES')\n            else:\n                print('NO')\n    else:\n        a = list(map(int, stdin.split()))\n        a.sort()\n        for i in range(q):\n            if a[i] % 2 == 0:\n                if a[0] == a[-1]:\n                    print('NO')\n                else:\n                    print('YES')\n            else:\n                print('NO')\n",
        "test": "assert solution(\"1 4\") == \"NO\"",
        "num_ids": 971,
        "indeed": false
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b=map(int,stdin.split())\n    p=[0]*(n+1)\n    for i in range(n):\n        if i<a or b<a:\n            p[i]=i+1\n    print(sum(p[a:b+1])-sum(p[a+1:b+1]))\n\n-----Constraints-----\n1 <= t <= 10^5\n1 <= n <= 100\n1 <= a_1, a_2, a_3, a_4 <= n\n1 <= a_1 < a_n\n0 <= b <= n\n\n-----Time complexity-----\nO(n*n)\n\nO(n^2)\n\n'''\n\nt = int(input())\n\nfor _ in range(t):\n    n,a,b=map(int,input().split())\n    p=[0]*(n+1)\n    for i in range(n):\n        if i<a or b<a:\n            p[i]=i+1\n    print(sum(p[a:b+1])-sum(p[a+1:b+1]))\n",
        "test": "assert solution(stdin) == 9",
        "num_ids": 2168,
        "indeed": false
    },
    {
        "number": 4527,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n,s=map(int,stdin.split())\n    assert(n>=1 and n<=2000)\n    l=list(map(int,stdin.split()))\n    l.sort()\n    t=0\n    max_size=0\n    for i in range(n):\n        s=l[i]\n        for j in range(i+1,n):\n            if s==l[j]:\n                max_size+=1\n            elif s<=l[j]:\n                t+=1\n                break\n    return str(max_size)\n\ndef",
        "test": "assert solution(stdin) == 5, \"incorrect answer\"",
        "num_ids": 2234,
        "indeed": false
    },
    {
        "number": 4528,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    hh = int(stdin.split()[1])\n    mm = int(stdin.split()[2])\n    if (hh < 0 or hh >= 24) or (mm < 0 or mm >= 60):\n        return 'Error'\n    if (hh == 0) or (mm == 0):\n        return str(60 * 60 * 24 + hh * 60 + mm)\n    if (hh + hh) % 24 == 0 or (mm + mm) % 60 == 0:\n        return str(60 * 60 * 24 + hh * 60 + mm)\n    return 'Error'\n",
        "test": "assert solution(stdin) == 16, \"Error\"",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    l = len(s)\n    if n >= 2:\n        ans = l - (n - 1) * 2\n    else:\n        ans = n\n    \n    s = s[::-1]\n    l = len(s)\n    if n >= 2:\n        ans = l - (n - 1) * 2\n    else:\n        ans = l\n\n    for i in range(l):\n        if s[i] == 'L':\n            ans = min(ans, n - i)\n        if s[i] == 'R':\n            ans = min(ans, i)\n    \n    if ans == l:\n        print(-1)\n    else:\n        print(ans)\n",
        "test": "assert solution(stdin) == 2, 'There is a problem'",
        "num_ids": 3270,
        "indeed": false
    },
    {
        "number": 4530,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    n,k=map(int,stdin.split())\n    n=n-1\n    d=dict()\n    for i in range(n):\n        d[i]=[]\n    for i in range(k):\n        stdin=stdin.replace(\" \",\"\")\n        for j in range(n):\n            if(len(stdin[j])==1):\n                if(stdin[j] in d[j]):\n                    d[j].remove(stdin[j])\n            else:\n                if(stdin[j] not in d[j]):\n                    d[j].append(stdin[j])\n    for i in range(n):\n        if(len(d[i])==1):\n            d[i]=d[i]\n    a=[i for i in range(n)]\n    l=[]\n    for i in range(n):\n        for j in range(n):\n            if(j!=i):\n                if(d[j].count(d[i])==1):\n                    l.append(j)\n    if(len(l)==n):\n        return \"0\"\n    else:\n        for i in range(n):\n            if(len(l)==i):\n                return str(len(l))\n            else:\n                l[i]=l[i]+str(len(l)-1)\n        return str(len(l))\n            \n",
        "test": "assert solution(test_case_input) == '1'",
        "num_ids": 1864,
        "indeed": false
    },
    {
        "number": 4531,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    c = 0\n    for i in range(n):\n        c += a[i] * (2 ** i)\n    return str(c)\n\n\ndef",
        "test": "assert solution(stdin) == '121'",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(stdin[i]) for i in range(n)]\n    # a = [i for i in a]\n    x = 0\n    for i in range(n):\n        if a[i] % k!= 0:\n            x = a[i]\n            break\n    print(str(x))\n    return str(x)",
        "test": "assert solution(\"0 0 1 2 3 4 5\") == \"0\"",
        "num_ids": 1798,
        "indeed": false
    },
    {
        "number": 4533,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    dp = [1] * (n + 1)\n    max_ = 0\n    answer = 0\n    for i in range(1, n + 1):\n        flag = True\n        for j in range(1, i):\n            if dp[j] < dp[i] + 1:\n                flag = False\n                break\n        if flag:\n            answer += 1\n            dp[i] = 1\n        else:\n            answer += 2\n            dp[i] = 2\n    print(answer)\n    return answer",
        "test": "assert solution('1000') == 1",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 4534,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # \"\"\"\n    # We follow the pattern of Pascal's triangle.\n    # \"\"\"\n    # arr = [0]*(33-1)\n    # for n in range(1,33):\n    #     arr[n] = (arr[n-1]+arr[n-2])\n    # return arr[int(stdin)]\n    # \"\"\"\n    # We follow the pattern of Pascal's triangle.\n    # \"\"\"\n    # a,b = 0,0\n    # for n in range(1,33):\n    #     a,b = b, a+b\n    # return a\n    # \"\"\"\n    # We follow the pattern of Pascal's triangle.\n    # \"\"\"\n    # if n == 0 or n == 1:\n    #     return [1]\n    # a,b = 0,0\n    # for n in range(2, n+1):\n    #     a,b = b, a+b\n    # return [a]\n    # \"\"\"\n    # We follow the pattern of Pascal's triangle.\n    # \"\"\"\n    # a,b = 0,0\n    # for n in range(1, n+1):\n    #     a,b = b, a+b\n    # return [a]\n    # \"\"\"\n    # We follow the pattern of Pascal's triangle.\n    # \"\"\"\n    # if n == 0 or n == 1:\n    #     return [1]\n    # arr = [[0 for _ in range(n+1)] for _ in range(33)]\n    # for n in range(2, n+1):\n    #     for i in range(1, n+1):\n    #         arr[i][0] = arr[0][i-1]\n    #         arr[0][i] = arr[i-1][0] + arr[i-1][i]\n    # return [arr[-1][0]]\n    # \"\"\"\n    # We follow the pattern of Pascal's triangle.\n    # \"\"\"\n    # if n == 0 or n == 1:\n    #     return [1]\n    # arr = [[0 for _ in range(n+1)] for _ in range(33)]\n    # for n in range(2, n+1):\n    #     for i in range(1, n+1):\n    #         arr[i][0] = arr[0][i-1]\n    #         arr[0][i] = arr[i-1][0] + arr[i-1][i]\n    #         arr[i][i] = arr[0][i]\n    # return [arr[-1][0]]\n    # \"\"\"\n    # We follow the pattern of Pascal's triangle.\n    # \"\"\"\n    # if n == 0 or n == 1:\n    #     return [1]\n    # a,b = 0,0\n    # for n in range(2, n+1):\n    #     a,b = b, a+b\n    # return [a]\n\n\nprint(solution(\"3\"))\nprint(solution(\"4\"))\nprint(solution(\"2\"))",
        "test": "assert solution(20) == [1,3,3,3,3,1,2,1,1,1]",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 4535,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lst = []\n    for i in range(n):\n        lst.append(bin(i))\n    for i in range(len(lst)):\n        lst[i] = lst[i][2:]\n    zero_lst = []\n    for i in range(len(lst)):\n        if len(lst[i]) == 0:\n            zero_lst.append(lst[i])\n    answer = 0\n    for i in zero_lst:\n        answer += len(i)\n    return str(answer)\n",
        "test": "assert solution('111101111010110010110111001') == \"1\"",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 4536,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    digits = [int(i) for i in stdin]\n    digits.sort(reverse=True)\n    for i in digits:\n        digits[-1] += i\n    return str(digits[0])",
        "test": "assert solution([\"0\"]) == \"0\"",
        "num_ids": 2071,
        "indeed": false
    },
    {
        "number": 4537,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,stdin.split())\n    print(a+b)\n    print(a-b)\n    print(a*b)\n    return str(max(a,b))\n",
        "test": "assert solution(\"1 1\") == \"1\", \"incorrect answer\"",
        "num_ids": 528,
        "indeed": false
    },
    {
        "number": 4538,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N,D=map(int,stdin.split())\n    X_1,Y_1=map(int,stdin.split())\n    X_n=set([X_1])\n    Y_n=set([Y_1])\n    for i in range(1,N+1):\n        X_1=X_1-i\n        Y_1=Y_1-i\n        if (X_1,Y_1) in X_n:\n            break\n        X_n.add((X_1,Y_1))\n        if X_1 in Y_n:\n            Y_n.remove(X_1)\n            Y_n.remove(Y_1)\n        if X_1**2+Y_1**2<=D:\n            return str(len(Y_n))\n        if X_1**2+Y_1**2>D:\n            break\n    return '0'\n",
        "test": "assert solution('3 5'), 'There is no point on the origin'",
        "num_ids": 1497,
        "indeed": false
    },
    {
        "number": 4539,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == 1 or N % 10 == 2:\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "test": "assert solution(121) == \"No\"",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    \n    def go_north(pos: int):\n        return pos - 1\n    def go_south(pos: int):\n        return pos + 1\n    def go_west(pos: int):\n        return pos - 2\n    def go_east(pos: int):\n        return pos + 2\n    \n    def all_visited():\n        return (1, 2, 3)\n    \n    visited = set()\n    cur_pos = 0\n    cur_cost = 0\n    \n    for line in stdin:\n        if cur_pos in all_visited():\n            print(cur_cost)\n            exit()\n        \n        cur_pos += int(line)\n        cur_cost += int(line)\n        if cur_pos == cur_cost:\n            if cur_pos not in visited:\n                visited.add(cur_pos)\n                cur_cost -= 1\n                cur_pos = 0\n            else:\n                cur_pos = cur_pos - 1\n                cur_cost = cur_cost - 1\n            \n        if cur_pos in all_visited():\n            print(cur_cost)\n            exit()\n        \n    print(-1)\n    \n    \n\n----- Sample Input -----\n4\n1 -1\n1 -1 1\n1 -1 -1\n1 -1 -1 -1\n4 -1 -1 1\n4 1 -1 -1 -1\n4 -1 -1 1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n\n----- Output -----\n13\n\nThe total cost of travel is 50 + 15 + 10 + 5 + 1 = 40 yen.\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        answer = 0\n        for i in range(int(len(stdin) / 2)):\n            spot_1 = go_north(i)\n            spot_2 = go_south(i)\n            spot_3 = go_west(i)\n            spot_4 = go_east(i)\n            spot_1, spot_2, spot_3, spot_4 = map(int, (spot_1, spot_2, spot_3, spot_4))\n            answer += spot_1 * spot_2 * spot_3 * spot_4\n        return str(answer)\n\ndef",
        "test": "assert solution(5) == -1, \"incorrect\"",
        "num_ids": 1218,
        "indeed": false
    },
    {
        "number": 4541,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if stdin[i] == 'a':\n            print('vowel')\n        else:\n            print('consonant')\n",
        "test": "assert solution(s) == \"vowel\"",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 4542,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n  stones = [i for i in stdin.split()]\n  columns = len(stones)\n  if columns % 2!= 0:\n    return -1\n  black_stones = 0\n  white_stones = 0\n  for i in range(columns//2):\n    black_stones += int(stones[i])\n    white_stones += int(stones[i+columns//2])\n    if black_stones > white_stones:\n      black_stones = white_stones\n      stones[i:i+columns//2] = stones[i:i+columns//2][::-1]\n    else:\n      white_stones = black_stones\n      stones[i:i+columns//2] = stones[i:i+columns//2][::-1]\n  return black_stones + white_stones\n\nprint(solution(\"BBBWW\"))\n",
        "test": "assert solution('BBBWW') == '3'",
        "num_ids": 2503,
        "indeed": false
    },
    {
        "number": 4543,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"\":\n        return \"Yes\"\n    a,b = map(int,stdin.split())\n    if not (a%2 == 0 and b%2 == 0):\n        return \"No\"\n    s = a*b\n    if s == 0:\n        return \"No\"\n    square_root = int(math.sqrt(s))\n    if square_root%2 == 0:\n        return \"No\"\n    if square_root == 1:\n        return \"Yes\"\n    return solution(str(square_root*square_root))",
        "test": "assert solution('2 1') == 'No'",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 4544,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        b.append(a[i] - 1)\n        a[i] = b[-1]\n    b.sort()\n    return str(b[-1])",
        "test": "assert solution(a) == '4'",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 4545,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if n!= a * b:\n        return \"0\"\n    if n == a * b and a!= b:\n        return \"1\"\n    a -= b\n    c -= a\n    if c <= 0:\n        return \"0\"\n    if n == a * b:\n        return \"0\"\n    return str(int(a / b * c))\n\"\"\"\n\ndef",
        "test": "assert solution(input) == \"5\"",
        "num_ids": 1004,
        "indeed": false
    },
    {
        "number": 4546,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return 'YES'\n    if a + b == c - a:\n        return 'NO'\n    return 'NO'\n",
        "test": "assert solution(\"4 4 6\") == \"NO\"",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 4547,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num > 9:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"29\") == \"Yes\", \"Your code does not pass the test!\"",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 4548,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n        N, M = map(int, stdin.split())\n        A_1, A_2, A_3, A_4, A_5 = map(int, stdin.split())\n        queries = [[A_1, A_2]] + [[A_1+1, A_2+1, A_3+1, A_4+1, A_5+1]]\n        answer = []\n        for i in queries:\n            ans = i[0] + i[1]\n            answer.append(ans)\n        return \" \".join(map(str, answer))\n\"\"\"\n",
        "test": "assert solution(input()) == \"1\"",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 4549,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes'\n",
        "test": "assert solution(\"..#.#\") == \"Yes\"",
        "num_ids": 3188,
        "indeed": false
    },
    {
        "number": 4550,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    return \"Yes\" if (a*b*c == (a*b) + (a*c)) else \"No\"",
        "test": "assert solution(\"5 20 3\") == \"No\"",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 4551,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D=map(int,stdin.split())\n    l=max(A,B,C,D)\n    if A+B+C>=l:\n        answer='Left'\n    elif A+B+C<=l:\n        answer='Balance'\n    else:\n        answer='Right'\n    return answer\n",
        "test": "assert solution('3 4 7 1') == 'Left'",
        "num_ids": 1189,
        "indeed": false
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, F, P, c = map(int, stdin.split())\n    \n    # Initialise variables\n    f = [0] * (N+1)\n    p = [0] * (N+1)\n    for i in range(N):\n        f[i+1] = c * P[i]\n        p[i+1] = c * P[i] * F[i]\n    \n    # Open the shops\n    for i in range(1, N+1):\n        if f[i] == 0:\n            continue\n        for j in range(N-i+1):\n            k = j+i\n            if k >= N:\n                k = N\n            if f[k]!= 0:\n                continue\n            if P[j] == 0:\n                p[k] += P[j]\n            if P[k] == 0:\n                p[k] += P[j] * F[j]\n            f[k] = 1\n    \n    # Buy all the shops\n    for i in range(N):\n        if p[i] == 0:\n            continue\n        for j in range(i+1, N+1):\n            if f[j] == 0:\n                continue\n            for k in range(j+1, N+1):\n                if p[k] == 0:\n                    continue\n                if p[k] + p[j] > p[i] + p[j]:\n                    continue\n                if f[k] + p[j] < p[i] + p[j]:\n                    p[k] = p[i] + p[j]\n    \n    # Process if no open periods\n    if c > 0 and f[N] == 0:\n        return 'inf'\n    else:\n        return p[N]",
        "test": "assert solution('1 0 0 0 0 1 0 1 1') == '8'",
        "num_ids": 2786,
        "indeed": false
    },
    {
        "number": 4553,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('A') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('B') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('C') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('D') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('E') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('F') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('G') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('H') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('I') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('J') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('K') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('L') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('M') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('N') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('O') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('P') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('Q') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('R') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('S') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('T') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('U') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('V') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('W') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('X') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('Y') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('Z') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('0') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('-')))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], chr(ord('+') + i))\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '0')\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '+')\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '.')\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '-' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '-.' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '-' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '+.' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '+.' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '+.' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '+.' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '+.' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '+.' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '+.' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '+.' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '+.' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '+.' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '+.' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '+.' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '+.' + stdin[i])\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '+.' + stdin[i])\n    for i in range(len(",
        "test": "assert solution(a = \"B\",b = 4) == \"No\", \"Should be No\"",
        "num_ids": 2625,
        "indeed": false
    },
    {
        "number": 4554,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    W,a,b = map(int,stdin.split())\n    width=W\n    height=a+b\n    for i in range(1,height):\n        if width==0:\n            break\n        if i>=width:\n            width=i\n    if width==0:\n        return \"0\"\n    for i in range(1,height):\n        if a+i<=b:\n            a=a+i\n        else:\n            b=b+i\n    return str(min(a,b))\n\n\"\"\"",
        "test": "assert solution(\"1 2 3 4\") == \"1\"",
        "num_ids": 2263,
        "indeed": false
    },
    {
        "number": 4555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n  a, b, k = map(int, stdin.split())\n  if a == b:\n    print(a)\n    return\n\n  if a > b:\n    if a >= k:\n      print(a)\n    else:\n      print(b)\n  else:\n    if b >= k:\n      print(b)\n    else:\n      print(a)\n\n  solution(stdin)\n\n\"\"\"\n\ndef",
        "test": "assert solution(input) == \"3\"",
        "num_ids": 1245,
        "indeed": false
    },
    {
        "number": 4556,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    # Declare a variable that holds the contents of the string from stdin\n    s = stdin.split()\n\n    # Convert the contents of s to a list\n    # Check if there are duplicates\n    # Check if there is a pair of duplicates\n    # Replace the first duplicate with the first\n    # If there are more duplicates, print them\n    # Otherwise, print the last element of the list\n    # Replace the last element with the last element of the list\n    # Return the result\n    #\n    # Print the last element of the list\n    # if there are duplicates, print the last element of the list\n\n    # This solution uses O(n) time complexity and O(n) space complexity,\n    # where n is the number of elements in the list.\n    #\n    # Since we are only interested in the first character of the input,\n    # return the first character of the string.\n    if not s:\n        return 'ABC'\n    else:\n        return s[0][0].upper() + s[0][1:]\n",
        "test": "assert solution(\"Abc\") == \"Abc\"",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 4557,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n  A, B, X = list(map(int, stdin.split()))\n  \n  for x in range(B):\n    for y in range(X):\n      if A > B:\n        return 'NO'\n      else:\n        if y + 1 <= X and A + B <= X:\n          if A > B:\n            return 'YES'\n          else:\n            return 'NO'\n        else:\n          return 'NO'\n    \n  return 'YES'\n",
        "test": "assert solution(\"2 1 1\") == \"NO\"",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 4558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X == 1:\n        return \"1\"\n    t = int(stdin.strip())\n    if t == 1:\n        return \"0\"\n    upper = 1\n    for i in range(1, t+1):\n        upper *= X\n    return str(upper)\n\nprint(solution
        "test": "assert solution(stdin) == '83'",
        "num_ids": 4168,
        "indeed": false
    },
    {
        "number": 4559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n):\n        a = str(i)\n        b = a * n\n        if int(b) > 10**18:\n            print(int(b))\n        else:\n            print(-1)\n        \n        \n",
        "test": "assert solution(stdin) == -1 or solution(stdin) == 1, \"incorrect answer\"",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 4560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    return 'No' if E869120 < 0 else 'Yes'\n\n\ndef",
        "test": "assert solution('2019') == 'No'",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 4561,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a > b: a, b = b, a\n    n //= 2\n    return'safe' if n % 2 == 1 and a % 2 == 0 else 'not safe'\n\"\"\"\n\n\ndef",
        "test": "assert solution(input()) == \"safe\"",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 4562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(1, n):\n        for _ in range(1, n//2):\n            if (n % _)**2 >= n:\n                break\n            else:\n                n //= _\n    return str(n)\n\ndef",
        "test": "assert solution('1') == '1','solution should return 1'",
        "num_ids": 2319,
        "indeed": false
    },
    {
        "number": 4563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    A, T = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n    votes.sort()\n    if A > T:\n        print(0)\n    elif A == T:\n        answer = votes[T-A+1]\n        print(answer)\n    elif A < T:\n        answer = votes[T-A]\n        print(answer)\n    else:\n        return '?'\n\nsolution('4 7')\n",
        "test": "assert solution([\"2\",\"3\",\"4\",\"4\",\"4\"]) == 3",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 4564,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    \n    count = {}\n    for c in stdin:\n        if c not in count:\n            count[c] = 1\n        else:\n            count[c] += 1\n    \n    for c, count in count.items():\n        if count == len(stdin):\n            return c\n    \n    return \"no\"\n",
        "test": "assert solution(\"uncopyrightable\") == \"no\"",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 4565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin.split(' ')\n    answer = [1, 0]\n    for i in range(len(S)):\n        for j in range(len(S)):\n            if S[i] == 'W' and j == 0:\n                answer[0] -= 1\n                S[i], S[j] = S[j], S[i]\n            if S[i] == 'E' and j == len(S) - 1:\n                answer[1] += 1\n                S[i], S[j] = S[j], S[i]\n    return str(answer[0]) + str(answer[1])\n'''\n\ndef",
        "test": "assert solution(input()) == '1'",
        "num_ids": 2464,
        "indeed": false
    },
    {
        "number": 4566,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a_1 = list(map(int, stdin.split()))\n    a_2 = list(map(int, stdin.split()))\n    a_3 = list(map(int, stdin.split()))\n    a_4 = list(map(int, stdin.split()))\n\n    ans = 0\n\n    # find the city with the minimum count\n    if len(set(a_1)) == N and len(set(a_2)) == M and len(set(a_3)) == M and len(set(a_4)) == M:\n        ans = min(a_1 + a_2 + a_3 + a_4)\n        print(ans)\n    else:\n        print(-1)",
        "test": "assert solution(input()) == \"1\"",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 4567,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    s = [int(i) for i in stdin.split()]\n    score = 0\n    for i in range(N):\n        if s[i]%10 == 0:\n            score+=s[i]\n        elif s[i]%10 > 0:\n            score+=s[i]//10\n    return str(score)\n\"\"\"\nclass Solution:\n    def maximumTotal(self, nums: List[int]) -> int:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n",
        "test": "assert solution(",
        "num_ids": 2428,
        "indeed": false
    },
    {
        "number": 4568,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    max_len = 0\n    curr_len = 0\n    for line in stdin.split(\"\\n\"):\n        curr_len += len(line)\n        if len(line) > max_len:\n            max_len = len(line)\n            curr_len = 0\n    if curr_len < 2:\n        return \"0\"\n    return max_len\n",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 2614,
        "indeed": false
    },
    {
        "number": 4569,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return 'Cloudy'\n    \n",
        "test": "assert solution('Sunny') == 'Cloudy'",
        "num_ids": 2278,
        "indeed": false
    },
    {
        "number": 4570,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    A,B = list(map(int,stdin.split()))\n    answer = 0\n    for hour in range(A,B+1):\n        answer += hour * 7\n    print(answer)\n        \n    return str(answer)\n\n-----Brute force-----\nTime: O(N) (each hour)\nSpace: O(1) (each hour)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\n-----Submissions-----\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\n-----Submissions-----\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccepted.\n\nTime: O(N) (N=N)\nSpace: O(1) (N=1)\n\n--------Min: 1\n--------Max: 2\n--------Sum: 3\n\nAccept",
        "test": "assert solution(string) == \"120\"",
        "num_ids": 5712,
        "indeed": false
    },
    {
        "number": 4571,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    # print(lst)\n    print(sum(lst) / lst[0] * (lst[0] / 2) + (lst[0] * (lst[0] / 2) / 2) + (lst[0] * (lst[0] * (lst[0] / 2) / 2) / 2) + sum(lst) / lst[0] * (lst[0] / 2) + (lst[0] * (lst[0] * (lst[0] * (lst[0] / 2) / 2) / 2) / 2) + (lst[0] * (lst[0] * (lst[0] * (lst[0] * (lst[0] / 2) / 2) / 2) / 2) / 2) + sum(lst) / lst[0] * (lst[0] * (lst[0] * (lst[0] * (lst[0] * (lst[0] / 2) / 2) / 2) / 2) / 2))\n    # print(lst)\n    return str(sum(lst) / lst[0])\n",
        "test": "assert solution(2,4) == 7200",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 4572,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s):\n        if not s:\n            return False\n        return s[0] == s[-1]\n    s = []\n    for i in range(len(stdin)):\n        if stdin[i].isalpha():\n            s.append(stdin[i])\n        else:\n            if not is_valid(s):\n                return None\n    return s[0]",
        "test": "assert solution(\"kfcdsf\") == \"k\"",
        "num_ids": 2494,
        "indeed": false
    },
    {
        "number": 4573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    x = [0 for i in range(26)]\n    for s in stdin:\n        if s =='':\n            continue\n        elif s in 'abcdefghijklmnopqrstuvwxyz':\n            x[ord(s)-65] += 1\n    y = []\n    for i in range(26):\n        y.append(x[i] // 2)\n    return''.join([str(i) for i in y])\n'''",
        "test": "assert solution(\"4 4 4 3\") == \"4\"",
        "num_ids": 2928,
        "indeed": false
    },
    {
        "number": 4574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d,e,f = map(int,stdin.split())\n    if a<b<c<d<e<f:\n        return str(max(a,b,c,d,e,f))\n    else:\n        return 0\n",
        "test": "assert solution(input()) == \"2\"",
        "num_ids": 1320,
        "indeed": false
    },
    {
        "number": 4575,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = map(int, stdin.split())\n    if (N % 2 == 1):\n        N -= 1\n    if (D % 2 == 1):\n        D -= 1\n    if (D == 0):\n        return '0'\n    N //= 2\n    A_i = (D // 2) + 1\n    A_j = (D // 2) + 1\n    A_p = X - (D % 2) + 1\n    A_q = X - (D % 2)\n    A_l = A_p - A_i\n    A_r = A_q - A_j\n    if (A_q == A_l == A_r == 1):\n        return '0'\n    elif (A_l == A_r == A_q == 1):\n        return '0'\n    elif (A_q == A_l == A_r == 0):\n        return '0'\n    else:\n        return str(A_q) + str(A_l) + str(A_r) + str(A_q) + str(A_p) + str(A_l) + str(A_q) + str(A_p) + str(A_l) + str(A_r)",
        "test": "assert solution(\"1\\n1\\n\") == \"1\"",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 4576,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n",
        "test": "assert solution(str) == \"2\"",
        "num_ids": 2163,
        "indeed": false
    },
    {
        "number": 4577,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = map(int,stdin.split())\n    if(C<A and B<B):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1 5 10\") == \"No\"",
        "num_ids": 2309,
        "indeed": false
    },
    {
        "number": 4578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(stdin) == \"9\"",
        "num_ids": 3952,
        "indeed": false
    },
    {
        "number": 4579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n  \n  def solution(a,b):\n    count=0\n    for i in range(min(a,b),max(a,b)+1):\n      if(i%10==a or i%10==b):\n        count+=1\n    return count\n  \n  return solution(int(input()),int(input()))\n\"\"\"\n",
        "test": "assert solution((\"appl\", \"oar\")) == \"apple\"",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 4580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    answer = 'green'\n\n    for i in range(1,len(stdin)+1):\n        answer = min(answer,max(map(int,stdin[i-1].split())))\n    \n    return answer\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert solution(",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 4581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(' ')\n    for i in range(0,len(inp)):\n        inp[i] = int(inp[i])\n    print(inp)\n    #inp = list(map(int,inp))\n    #print(inp)\n    #print(inp)\n    #inp = list(map(lambda x:x-1 if x<0 else x,inp))\n    #print(inp)\n    print(inp[0]*inp[1])\n    return str(inp[0]*inp[1])",
        "test": "assert solution(input) == \"800\"",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 4582,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(str, stdin.split())\n    if b == 'H':\n        if a == 'H':\n            return 'H'\n        else:\n            return 'D'\n    else:\n        if a == 'D':\n            return 'H'\n        else:\n            return 'D'\n",
        "test": "assert solution(\"H H\") == \"H\"",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 4583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(stdin) == \"1+2+2+2=7\"",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 4584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    li = [0 for _ in range(n+1)]\n    for i in range(n+1):\n        li[i] = 0\n    for i in range(2,n+1):\n        for j in range(1,n):\n            if li[i-1]!= 0:\n                li[i] += li[j]\n    for j in range(n-1,0,-1):\n        for i in range(j+1,n+1):\n            if li[i]!= 0:\n                li[i] += li[j]\n    return ('0' if li[-1] == 0 else '1' if li[-1] == 1 else '2')\n\n-----Sample Output-----\n2\n0\n0\n\nThe member numbered 1 has two immediate subordinates: the members numbered 2 and 3.\nThe member numbered 2 has two immediate subordinates: the members numbered 4 and 5.\nThe members numbered 3, 4, and 5 do not have immediate subordinates.\n\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i < i\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_2... A_N\n\n-----Output-----\nFor each of the members numbered 1, 2,..., N, print the number of immediate subordinates it has, in its own line.\n\n-----Sample Input-----\n5\n1 1 2 2\n\n-----Sample Output-----\n2\n0\n0\n0\n\nThe member numbered 1 has two immediate subordinates: the members numbered 2 and 3.\nThe member numbered 2 has two immediate subordinates: the members numbered 4 and 5.\nThe members numbered 3, 4, and 5 do not have immediate subordinates.\ndef",
        "test": "assert solution == 0, \"incorrect result\"",
        "num_ids": 1435,
        "indeed": false
    },
    {
        "number": 4585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n  num = int(stdin)\n  if num <= 10**9:\n    return str(num)\n  x = 10**9+1\n  for i in range(2, num):\n    x = (x-i)%x\n  return str(x)\n",
        "test": "assert solution(\"4\") == \"4\"",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 4586,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(i) for i in stdin]\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == 2020:\n                return str(numbers[i] * numbers[j])\n    return 'No'\n",
        "test": "assert solution(\"1111\") == \"No\"",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 4587,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, A, B, C = [int(x) for x in stdin.split()]\n    if A == 1 and B == 1 and C == 1:\n        return 'No'\n    if A == 1 or B == 1 or C == 1:\n        return 'Yes'\n    altar = [[A, B, C], [A, B, C], [A, B, C], [A, B, C], [A, B, C]]\n    total = 0\n    for i in range(n):\n        if altar[i][0] >= A and altar[i][1] >= B and altar[i][2] >= C:\n            total += 1\n    return str(total)",
        "test": "assert solution(\"2 1 2 4\"), \"1 2\"",
        "num_ids": 3165,
        "indeed": false
    },
    {
        "number": 4588,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b = map(str, stdin.split())\n    \n    for i in range(len(a)):\n        if a[i] < b[i]:\n            return '<'\n        elif a[i] > b[i]:\n            return '>'\n        else:\n            continue\n    return '='\n    \n\ntest = solution('A B')\nprint(test)\n",
        "test": "assert solution('A B') == '<'",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 4589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    H,W = map(int, stdin.split())\n    S_1 = stdin[:W].split()\n    S_H = S_1[::-1]\n    \n    for i in range(1,H+1):\n        S_H.insert(0, '.'*i)\n    S_H.append('.'*W)\n    \n    answer = []\n    \n    for i in range(H):\n        answer.append(str(len(S_H[i])))\n        \n    answer = ''.join(answer)\n    \n    return answer\n\n'''",
        "test": "assert solution(",
        "num_ids": 2294,
        "indeed": false
    },
    {
        "number": 4590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([int(i) for i in stdin.split()]))\n",
        "test": "assert solution(stdin) == \"8\"",
        "num_ids": 2099,
        "indeed": false
    },
    {
        "number": 4591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = [int(i) for i in stdin.split()]\n    pizza_array = []\n    for i in range(X):\n        pizza_array.append(list(map(int, stdin.split())))\n\n    result = min(pizza_array[0][0], pizza_array[0][1], pizza_array[0][2], pizza_array[0][3])\n    for i in range(X-1):\n        if pizza_array[i][0] < result:\n            result = pizza_array[i][0]\n\n    result += pizza_array[X-1][0]\n\n    if Y > result:\n        return str(Y-result)\n    else:\n        return str(result)\n\n\"\"\"\nimport sys\ninput = sys.stdin.readline",
        "test": "assert solution(\"1 5 7 2 4\") == \"81\"",
        "num_ids": 2447,
        "indeed": false
    },
    {
        "number": 4592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        return '0'\n    else:\n        def isprime(n):\n            if n==1:\n                return False\n            if n==2:\n                return True\n            if n%2==0:\n                return False\n            for i in range(3,int(math.sqrt(n)+1),2):\n                if n%i==0:\n                    return False\n            return True\n        prime_list = [i for i in range(3,n+1,2)]\n        for i in prime_list:\n            if isprime(i):\n                prime_list.remove(i)\n        return ''.join(str(i) for i in prime_list)\n\"\"\"\n\ndef",
        "test": "assert solution(solution) == \"4\"",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 4593,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a positive integer X, find the largest perfect power that is at most X.\n    Return the largest perfect power that is at most X.\n    The largest perfect power that is at most X is guaranteed to be a power of 2.\n    \"\"\"\n    \n    x = int(stdin)\n    \n    if x == 0:\n        return '0'\n    \n    \n    def is_perfect_power(n):\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        \n        if n % 3 == 0:\n            return False\n        \n        if n % 5 == 0:\n            return False\n        \n        return True\n    \n    \n    def is_perfect_power_2(n):\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n % 2 == 0:\n            return False\n        \n        if n % 3 == 0:\n            return False\n        \n        if n % 5 == 0:\n            return False\n        \n        if n % 3 == 2:\n            return False\n        \n        return True\n    \n    \n    def is_perfect_power_3(n):\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n % 3 == 0:\n            return False\n        \n        if n % 5 == 0:\n            return False\n        \n        if n % 3 == 1:\n            return False\n        \n        return True\n    \n    \n    def is_perfect_power_4(n):\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        \n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return False\n        \n        if n % 3 == 2:\n            return False\n        \n        return True\n    \n    \n    def is_perfect_power_5(n):\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return False\n        \n        if n % 3 == 1:\n            return False\n        \n        if n % 5 == 2:\n            return False\n        \n        return True\n    \n    \n    def is_perfect_power_6(n):\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        \n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return False\n        \n        if n % 3 == 1:\n            return False\n        \n        if n % 5 == 2:\n            return False\n        \n        return True\n    \n    \n    def is_perfect_power_7(n):\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        \n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return False\n        \n        if n % 3 == 1:\n            return False\n        \n        if n % 5 == 2:\n            return False\n        \n        return True\n    \n    \n    def is_perfect_power_8(n):\n        if n == 1:\n            return True\n        \n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return False\n        \n        if n % 3 == 1:\n            return False\n        \n        if n % 5 == 2:\n            return False\n        \n        return True\n    \n    \n    def is_perfect_power_9(n):\n        if n == 1:\n            return True\n        \n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return False\n        \n        if n % 3 == 1:\n            return False\n        \n        if n % 5 == 2:\n            return False\n        \n        return True\n    \n    \n    def is_perfect_power_10(n):\n        if n == 1:\n            return True\n        \n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return False\n        \n        if n % 3 == 1:\n            return False\n        \n        if n % 5 == 2:\n            return False\n        \n        return True\n    \n    \n    perfect_powers = [is_perfect_power(n) for n in range(1, x+1)]\n    \n    return max(perfect_powers)\n    \n    \n    \n    ",
        "test": "assert solution(2) == 1",
        "num_ids": 1638,
        "indeed": false
    },
    {
        "number": 4594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N, d_1, d_N = map(int, stdin.split())\n    layers = []\n    for _ in range(N):\n        layers.append(map(int, stdin.split()))\n    return max(layers) + 1\n",
        "test": "assert solution('4') == 4",
        "num_ids": 5534,
        "indeed": false
    },
    {
        "number": 4595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    s = input()\n    m = s[0] + s[2] + s[4] + s[6] + s[8]\n    if m not in \"AEIOUaeiou\":\n        return \"no\"\n    d = s.find(m)\n    n = s.replace(m, \"\")\n    if n.endswith(m) and s[d:d+len(m)].startswith(m):\n        return m\n    else:\n        return \"no\"\n",
        "test": "assert solution(sting) == 5",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 4596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    board = [0] * n\n    answer = 0\n    for i in range(n):\n        board[i] = int(stdin[i])\n    for i in range(n):\n        if board[i] % 2 == 0:\n            answer += 2 ** i\n        else:\n            answer += 2 ** i\n    return str(answer)",
        "test": "assert solution(\"1 2\") == 2",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 4597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 10 + 7)",
        "test": "assert solution(stdin) == str(6)",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 4598,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return str(N*(N+1))",
        "test": "assert solution(input()) == \"6\"",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 4599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11 = map(int, stdin.split())\n    a_1 = a_1 + a_2\n    a_2 = a_3 + a_4\n    a_3 = a_5 + a_6\n    a_4 = a_7 + a_8\n    a_5 = a_9 + a_10\n    a_6 = a_11 + a_10\n    b_1 = a_1 - a_2\n    b_2 = a_3 - a_4\n    b_3 = a_5 - a_6\n    b_4 = a_7 - a_8\n    b_5 = a_9 - a_10\n    b_6 = a_11 - a_10\n    if a_1 + a_2 + a_3 + a_4 + a_5 + a_6 + a_7 + a_8 + a_9 + a_10 + a_11 >= n:\n        return str(min(b_1,b_2,b_3,b_4,b_5,b_6))\n    else:\n        return str(min(b_1, b_2, b_3, b_4, b_5, b_6))\n",
        "test": "assert solution(\u201c5\u201d) == 2",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 4600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N, M, p_i = map(int, stdin.split())\n    A, B = map(int, stdin.split())\n    a_i = A//M\n    b_i = B//M\n    a_p = 0\n    b_p = 0\n    \n    for i in range(a_i):\n        if A%M==0:\n            A=A//M\n            a_p += 1\n        else:\n            A-=1\n        \n    for i in range(b_i):\n        if B%M==0:\n            B=B//M\n            b_p += 1\n        else:\n            B-=1\n    \n    \n    answer = a_p + b_p\n    \n    return str(answer)\n\"\"\"\ndef",
        "test": "assert solution(stdin) == \"2 2\"",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 4601,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    H = list(map(int,stdin.split()))\n    result = 0\n    #print(H)\n    while N!=0:\n        for i in range(len(H)):\n            if H[i]==1:\n                #print(H)\n                H[i]=0\n                #print(H)\n                N-=1\n                break\n        result+=1\n    print(result)\n    return str(result)\n\nprint(solution(input()))\n",
        "test": "assert solution(input) == '5'",
        "num_ids": 1608,
        "indeed": false
    },
    {
        "number": 4602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    global type_A_cnt\n    global type_B_cnt\n    type_A_cnt = 0\n    type_B_cnt = 0\n    for _ in range(N):\n        type_A = list(map(int, stdin.split()))\n        for y in range(1, len(type_A)+1):\n            if y < len(type_A):\n                if type_A[y] == 1:\n                    type_A_cnt += 1\n                else:\n                    type_B_cnt += 1\n        if type_A_cnt == K:\n            return str(type_A_cnt)\n    return str(type_B_cnt)\n\ndef",
        "test": "assert solution('2 3') == '10'",
        "num_ids": 1315,
        "indeed": false
    },
    {
        "number": 4603,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(\" \")\n    n = int(inp[0])\n    m = int(inp[1])\n    if n == 1:\n        print(m)\n        return m\n    if m == 1:\n        print(n)\n        return n\n    l = [int(i) for i in inp[2:]]\n    total = 0\n    if sum(l) == 0:\n        total = sum(l)\n    else:\n        total = sum(l) + l[0]\n    print(total)\n    return total\n",
        "test": "assert solution(\"5 200 100\"), \"Invalid Input\"",
        "num_ids": 795,
        "indeed": false
    },
    {
        "number": 4604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    result = [0] * 1001\n    n = int(input())\n    for i in range(n):\n        start, end = map(int, input().split())\n        result[start] += 1\n        result[end] -= 1\n    return ''.join(map(str, result))\n",
        "test": "assert solution('5') == 0, \"should be 0\"",
        "num_ids": 2321,
        "indeed": false
    },
    {
        "number": 4605,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    ans = [0] * n\n    ans[a-1] = 10 ** (b-1) + 1\n    # print(ans)\n    for x in ans:\n        if x >= 10:\n            if x >= a:\n                ans[x-a] = 1\n            else:\n                ans[x-a] = 0\n    return str(sum(ans))\n",
        "test": "assert solution(\"2 4 5 10\") == \"84\"",
        "num_ids": 2416,
        "indeed": false
    },
    {
        "number": 4606,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    for _ in range(N):\n        print(str(ABC%10) + str(ABC//10 % 10 + 1))\n        ABC += 10\n    return str(ABC%10) + str(ABC//10 % 10 + 1)\n",
        "test": "assert solution(input) == 'ABC', 'Unable to solve'",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 4607,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split())\n  for x in range(m, n, 2):\n    if x < 0:\n      break\n    elif x == 0:\n      print(x, end='')\n    else:\n      print(x, end=' ')\n    \n  return str(x)",
        "test": "assert solution(\"5 1\") == \"3\"",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 4608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split() if i.isdigit()]\n    a = list(set(a))\n    a.sort()\n    res = 0\n    for i in a:\n        res += i * (n - i)\n    print(res)\n    return str(res)\n\n-----Sample Input-----\n2\n2\n1\n\n-----Sample Output-----\n1\n\nPress Button 2.\ndef",
        "test": "assert solution(stdin) == -1",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 4609,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    n_list = []\n    for i in a:\n        if i in n_list:\n            return str(n_list.count(i))\n        else:\n            n_list.append(i)\n    return str(n_list.count(1))\n\nprint(solution(input()))",
        "test": "assert solution(string_input) == \"1\"",
        "num_ids": 3854,
        "indeed": false
    },
    {
        "number": 4610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A_list = [int(i) for i in stdin.split()]\n    count = 0\n    for i in range(N):\n        count += A_list[i] * (K - 1)\n    return str(count)\n",
        "test": "assert solution(",
        "num_ids": 2654,
        "indeed": false
    },
    {
        "number": 4611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    if abs(x1 - x2) <= 1 and abs(y1 - y2) <= 1:\n        print('Yes')\n    else:\n        print('No')\n    return ''\n\nInput\n2\n3 1 2\n6 1 1\n\nSample Output\nNo\n",
        "test": "assert solution(\"6 1 1\") == \"No\"",
        "num_ids": 3057,
        "indeed": false
    },
    {
        "number": 4612,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    x = round(a + b - (a * b) / 2)\n    return str(x)",
        "test": "assert solution(\"2 2\"), 2",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n   \n  N, M = map(int, stdin.split())\n  graph = [list(map(int, stdin.split())) for _ in range(N)]\n\n  visited = [[0 for _ in range(M)] for _ in range(N)]\n  \n  def dfs(i, j):\n    visited[i][j] = 1\n\n    for k in range(M):\n      if graph[i][k] == 1 and visited[k][j] == 0:\n        dfs(k, j)\n\n  for i in range(N):\n    if visited[i][i] == 0:\n      dfs(i, i)\n\n  for i in range(N):\n    for j in range(M):\n      if graph[i][j] == 1 and visited[i][j] == 0:\n        dfs(i, j)\n\n  return str(len(visited)-1)",
        "test": "assert solution(\"{3 4}\") == \"4 6\"",
        "num_ids": 2842,
        "indeed": false
    },
    {
        "number": 4614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C=map(int,stdin.split())\n    if A>B and A>C:\n        print(B)\n    elif B>A and B>C:\n        print(B)\n    elif B<C and B<A:\n        print(A)\n    elif B<C and A<B:\n        print(A)\n    else:\n        print(C)",
        "test": "assert solution(input) == '7'",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 4615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\ndef",
        "test": "assert solution(\"4 0 0 0 0\") == \"100\"",
        "num_ids": 3130,
        "indeed": false
    },
    {
        "number": 4616,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    \n    def abbreviate(s):\n        i = 0\n        \n        while i < len(s):\n            j = 0\n            \n            while j < len(s):\n                if s[j] == \"i\" or s[j] == \"n\":\n                    if s[j+1] == \"a\" or s[j+1] == \"e\" or s[j+1] == \"l\" or s[j+1] == \"o\" or s[j+1] == \"r\" or s[j+1] == \"u\":\n                        s = s[:j+1] + s[j+2:]\n                        j += 1\n                    else:\n                        j += 1\n                else:\n                    j += 1\n            i += 1\n        \n        return s\n    \n    abbreviated = abbreviate(s)\n    \n    return abbreviated\n",
        "test": "assert solution(\"Anser is so standard\") == \"Anser is so standard\"",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 4617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n  \n    i,j = 0, 0\n    while i < len(stdin) and j < len(stdin[0]):\n        if stdin[i][j] == 'C':\n            if abs(i-j) % 2!= 0:\n                return 'NO'\n            else:\n                i += 1\n                j += 1\n        elif stdin[i][j] == 'G':\n            i += 1\n        elif stdin[i][j] == 'C':\n            j += 1\n        else:\n            return 'NO'\n    return 'YES'\n",
        "test": "assert solution(\"top\") == \"NO\"",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 4618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    return min(stdin.splitlines(), key=lambda x: len(x))\n\nTest Input\nSample Input:\n2\n3\n3\n\nSample Output:\nba\n3\n\nExplanation:\nFor K = 2, the substrings are:\na, b, ab, ba and aba.\nb has a and b and a and a and b, and so on.\nThe smallest substring is a.\n\nNote:\n1 \u2264 |s| \u2264 5000\n\n1 \u2264 K \u2264 5\ns has at least K substrings.\n\"\"\"\n\nimport collections\n\n\ndef",
        "test": "assert solution(pass) == \"b\"",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, N = map(int, stdin.split())\n\n    # construct the corners\n    x_left = 0\n    x_right = x\n    y_left = 0\n    y_right = y\n\n    # check if a_i = 1, a_j = 1, and a_k = 1, and a_m = 2, if so paint the left rectangle\n    # check if a_i = 1, a_j = 2, and a_k = 1, and a_m = 2, if so paint the right rectangle\n    # check if a_i = 2, a_j = 2, and a_k = 1, and a_m = 2, if so paint the bottom rectangle\n    # check if a_i = 2, a_j = 2, and a_k = 2, and a_m = 2, if so paint the top rectangle\n\n    for i in range(1, N + 1):\n        # find the bottom left corner\n        if a == 1:\n            if a_j == 1:\n                if y_j == 1:\n                    x_left = x_right\n                else:\n                    x_left = x_left + 1\n            else:\n                x_left = x_left + 1\n\n        if a == 2:\n            if a_k == 1:\n                if y_k == 1:\n                    x_right = x_left\n                else:\n                    x_right = x_right + 1\n            else:\n                x_right = x_right + 1\n\n        if a == 3:\n            if a_m == 2:\n                if y_m == 1:\n                    y_left = y_right\n                else:\n                    y_left = y_left + 1\n            else:\n                y_left = y_left + 1\n\n    print(f\"area of the rectangle after Snuke finished painting is {(x_right - x_left) * (y_right - y_left) * a}\")\n    return str(f\"{(x_right - x_left) * (y_right - y_left) * a}\")\n\nprint(solution(input()))\n",
        "test": "assert solution(stdin) == \"9\"",
        "num_ids": 3854,
        "indeed": false
    },
    {
        "number": 4620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  C_1 = [int(x) for x in stdin.split()]\n  F_1 = [int(x) for x in stdin.split()]\n  C_2 = C_1[0:N-1]\n  F_2 = F_1[0:N-1]\n  C_3 = C_1[N-1:]\n  F_3 = F_1[N-1:]\n  A = []\n  for i in range(len(C_2)):\n    A.append(C_2[i]*F_2[i]*C_3[i]*F_3[i])\n  A = sorted(A)\n  print(A[0])\n",
        "test": "assert solution(",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    rows = [0]*int(input())\n    cols = [0]*int(input())\n    for line in stdin:\n        for i,val in enumerate(line):\n            if val == '*':\n                rows[i] += 1\n            elif val == '.':\n                cols[i] += 1\n            elif val == 'C':\n                rows[i] *= 2\n                cols[i] *= 2\n    for i in range(int(input())):\n        rows[i] *= 2\n        cols[i] *= 2\n    return '.'.join([str(x) for x in rows]) + '.' + '.'.join([str(x) for x in cols])",
        "test": "assert solution(\"0 0\") == \"*\\n.\\n.\\n\"",
        "num_ids": 1029,
        "indeed": false
    },
    {
        "number": 4622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1\n    arr = list(map(int, stdin.split()))\n    s = \"\"\n    for i in arr:\n        if arr.count(i) == len(set(arr)):\n            s += \"YES\"\n        else:\n            s += \"NO\"\n    return s",
        "test": "assert solution('5') == 'YES'",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    weights = [int(i) for i in stdin.split()]\n    s = max(weights)\n    k = weights.count(s)\n    print(s)\n    print(k)\n    return '%d%d'%(k, s)",
        "test": "assert solution(5) == 2",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 4624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    if n > 1:\n        print(n)\n        print(x)\n    if n == 1 and x > 2:\n        print(2)\n    elif n == 1 and x == 2:\n        print(2)\n    else:\n        print(x)\n    return\n\n\nprint(solution(stdin))\n",
        "test": "assert solution(stdin) == '3'",
        "num_ids": 1174,
        "indeed": false
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p_1, p_2, p_3 = map(int, stdin.split())\n    p_4, p_5 = map(int, stdin.split())\n    p_6 = p_1 + p_2 + p_3 + p_4 + p_5\n    p_7 = p_1 * m + p_2 * n + p_3 * (n + 1) + p_4 * (m + 1) + p_5 * (m + 1) + p_6 * n\n    print(p_7)\n    return str(p_7)\n\nIf your implementation is correct, then you should see the correct result in the box.\n\n\"\"\"\nimport math\n\n\ndef",
        "test": "assert solution(\"a\") == \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
        "num_ids": 3924,
        "indeed": false
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    q, a, b, c = list(map(int, stdin.split(\" \")))\n    res = min(abs(a - b), abs(a - c), abs(b - c))\n    for i in range(q):\n        a, b, c = list(map(int, input().split()))\n        res = min(res, abs(a - b), abs(a - c), abs(b - c))\n    return str(res)\n",
        "test": "assert solution(stdin) == 0, 'incorrect'",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 4627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = len(stdin.split())\n    par = []\n    for i in range(1, a+1):\n        if n % i == 0:\n            par.append(i)\n    for i in range(n//2):\n        if par[i]!= par[i+1]:\n            return 'YES'\n    return 'NO'\n\n'''\ndef",
        "test": "assert solution(\"2 3 2 1\") == \"NO\"",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n < m:\n        n, m = m, n\n    districts = [int(stdin) for _ in range(n)]\n    districts.sort()\n    couriers = list(map(int, stdin.split()))\n    couriers.sort()\n    couriers = set(couriers)\n    if len(couriers) <= 1:\n        return str(sum(couriers))\n    elif len(couriers) == 2:\n        if districts[0]!= districts[1]:\n            return str(sum(couriers))\n        else:\n            return str(sum(couriers) - 1)\n    else:\n        return str(sum(couriers) - 1)\n",
        "test": "assert solution(stdin) == '13'",
        "num_ids": 2250,
        "indeed": false
    },
    {
        "number": 4629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    q=int(stdin.split()[-1])\n    arr=[]\n    for i in range(q):\n        arr.append(map(int,input().split()))\n    for i in arr:\n        print(min(m,abs(i[0]*i[1])))",
        "test": "assert solution(\"4\") == \"1\"",
        "num_ids": 2203,
        "indeed": false
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    res = []\n    for _ in range(q):\n        n, *p = list(map(int, input().strip().split()))\n        res.append(n)\n        res += p\n    print(*res)\n    return '\\n'.join(map(str, res))\n",
        "test": "assert solution(\"1 2 3 4 5\") == \"2\"",
        "num_ids": 1862,
        "indeed": false
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    nums = list(map(int, stdin.strip().split()))\n    res = [nums[0]]\n    # print(nums)\n    for i in range(1, len(nums)):\n        d = abs(nums[i] - nums[i - 1])\n        # print(d)\n        res.append(res[-1] + d)\n    print(res[-1])\n    return '\\n'.join(map(str, res))",
        "test": "assert solution(input().strip()) == 7",
        "num_ids": 2560,
        "indeed": false
    },
    {
        "number": 4632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()\n    print(s[0][1:])\n    print(s[1][1:])\n    print(s[2][1:])\n    print(s[3][1:])\n    print(s[4][1:])\n    print(s[5][1:])\n    print(s[6][1:])\n    print(s[7][1:])\n    print(s[8][1:])\n    print(s[9][1:])\n    print(s[10][1:])\n    print(s[11][1:])\n    print(s[12][1:])\n    print(s[13][1:])\n    print(s[14][1:])\n    print(s[15][1:])\n    print(s[16][1:])\n    print(s[17][1:])\n    print(s[18][1:])\n    print(s[19][1:])\n    print(s[20][1:])\n    print(s[21][1:])\n    print(s[22][1:])\n    print(s[23][1:])\n    print(s[24][1:])\n    print(s[25][1:])\n    print(s[26][1:])\n    print(s[27][1:])\n    print(s[28][1:])\n    print(s[29][1:])\n    print(s[30][1:])\n    print(s[31][1:])\n    print(s[32][1:])\n    print(s[33][1:])\n    print(s[34][1:])\n    print(s[35][1:])\n    print(s[36][1:])\n    print(s[37][1:])\n    print(s[38][1:])\n    print(s[39][1:])\n    print(s[40][1:])\n    print(s[41][1:])\n    print(s[42][1:])\n    print(s[43][1:])\n    print(s[44][1:])\n    print(s[45][1:])\n    print(s[46][1:])\n    print(s[47][1:])\n    print(s[48][1:])\n    print(s[49][1:])\n    print(s[50][1:])\n    print(s[51][1:])\n    print(s[52][1:])\n    print(s[53][1:])\n    print(s[54][1:])\n    print(s[55][1:])\n    print(s[56][1:])\n    print(s[57][1:])\n    print(s[58][1:])\n    print(s[59][1:])\n    print(s[60][1:])\n    print(s[61][1:])\n    print(s[62][1:])\n    print(s[63][1:])\n    print(s[64][1:])\n    print(s[65][1:])\n    print(s[66][1:])\n    print(s[67][1:])\n    print(s[68][1:])\n    print(s[69][1:])\n    print(s[70][1:])\n    print(s[71][1:])\n    print(s[72][1:])\n    print(s[73][1:])\n    print(s[74][1:])\n    print(s[75][1:])\n    print(s[76][1:])\n    print(s[77][1:])\n    print(s[78][1:])\n    print(s[79][1:])\n    print(s[80][1:])\n    print(s[81][1:])\n    print(s[82][1:])\n    print(s[83][1:])\n    print(s[84][1:])\n    print(s[85][1:])\n    print(s[86][1:])\n    print(s[87][1:])\n    print(s[88][1:])\n    print(s[89][1:])\n    print(s[90][1:])\n    print(s[91][1:])\n    print(s[92][1:])\n    print(s[93][1:])\n    print(s[94][1:])\n    print(s[95][1:])\n    print(s[96][1:])\n    print(s[97][1:])\n    print(s[98][1:])\n    print(s[99][1:])\n    print(s[100][1:])\n    print(s[101][1:])\n    print(s[102][1:])\n    print(s[103][1:])\n    print(s[104][1:])\n    print(s[105][1:])\n    print(s[106][1:])\n    print(s[107][1:])\n    print(s[108][1:])\n    print(s[109][1:])\n    print(s[110][1:])\n    print(s[111][1:])\n    print(s[112][1:])\n    print(s[113][1:])\n    print(s[114][1:])\n    print(s[115][1:])\n    print(s[116][",
        "test": "assert solution(stdin) == \"YES\", \"Check\"",
        "num_ids": 3596,
        "indeed": false
    },
    {
        "number": 4633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(stdin.strip()),int(stdin.strip())*2,int(stdin.strip())*3,int(stdin.strip())*4,int(stdin.strip())*5))\n",
        "test": "assert solution(\"5\"), 8",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 4634,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin)//2)\n",
        "test": "assert solution(\"2\") == \"0\"",
        "num_ids": 1803,
        "indeed": false
    },
    {
        "number": 4635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    n = int(stdin)\n    s_list = [input() for _ in range(n)]\n    \n    for s in s_list:\n        num = list(map(int, s))\n        num.sort()\n        answer += ''.join(map(str,num))\n        \n    return answer\n    \n\"\"\"\n\ndef",
        "test": "assert solution(\"abcbaabab\") == \"ababab\"",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, d = map(int, stdin.split())\n    p, q = 1, 1\n    def move(left, right):\n        nonlocal n, a, b, d\n        if left == right:\n            return [0, 0]\n        left_idx = (left - 1) % n\n        right_idx = (right - 1) % n\n        if a[left_idx] + b[right_idx] > d:\n            return [left_idx, right_idx]\n        elif a[left_idx] + b[right_idx] <= d:\n            return [left_idx, right_idx]\n        elif a[right_idx] + b[left_idx] <= d:\n            return [right_idx, left_idx]\n        else:\n            return [left_idx, right_idx]\n\n    for i in range(n):\n        a[i] += p\n        b[i] += q\n        d -= (a[i] + b[i])\n    for i in range(n):\n        for j in range(n):\n            if a[i] + b[j] <= d:\n                p += a[i]\n                q += b[j]\n    for i in range(1, n):\n        a[i] += (a[i] + p)\n        b[i] += (b[i] + q)\n    for i in range(n):\n        a[i] -= p\n        b[i] -= q\n    result = []\n    for i in range(n):\n        result += move(i, i)\n    print(result)\n    return ''.join(map(str, result))\n\nprint(solution(stdin))",
        "test": "assert solution(\"3 2 4 2 1 4 1 6 5 3\") == \"1 6\"",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = list(map(int, stdin.split()))\n    b.sort()\n    i = 0\n    j = 0\n    ans = 0\n    while i < n and j < n:\n        if a[i] < b[j]:\n            a[i], a[j] = a[j], a[i]\n            j += 1\n            ans += b[j]\n            i += 1\n        else:\n            i += 1\n    while i < n:\n        a[i], a[n] = a[n], a[i]\n        i += 1\n    while j < n:\n        b[j], b[n] = b[n], b[j]\n        j += 1\n    return str(ans)\n",
        "test": "assert solution(",
        "num_ids": 2371,
        "indeed": false
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n, c, k, x, y = map(int, input().split())\n        \n        a = x + (y - x) * (n - 1) * c\n        b = k * (n - 1) * c + (n - 1) * c * (x + (y - x) * k)\n        \n        if c < 0:\n            print(a)\n            continue\n        \n        print(a + a + b)\n        \n        \n",
        "test": "assert solution('2 3 3 3 3 3 3 2 2 1 2') == '0'",
        "num_ids": 2436,
        "indeed": false
    },
    {
        "number": 4639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    if k>n or k<1: return \"fail\"\n    s=[]\n    for i in range(1,n+1):\n        l=list(map(int,input().split()))\n        if len(l)>k: return l[k]\n        s.append(l)\n    return \"\".join(sorted(map(str,l)))\n",
        "test": "assert solution(stdin) == \"ab\"",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = []\n    for i in range(n):\n        nums.append(int(stdin.split(' ')[i].split(',')[0]))\n    answer = 0\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if nums[j] + nums[j+1] == k:\n                answer += 1\n    return str(answer)\n",
        "test": "assert solution(stdin) == \"6\"",
        "num_ids": 3229,
        "indeed": false
    },
    {
        "number": 4641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    q, *a = map(int, stdin.split())\n    for _ in range(q):\n        y, x = map(int, input().split())\n        a.append(y+x)\n    return''.join(map(str, sorted(a, reverse=True)))",
        "test": "assert solution(input()) == \"5\"",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the minimum possible maximum element in the given array.\n    \"\"\"\n    n = int(stdin)\n    x = int(stdin[0])\n    y = int(stdin[1])\n    nums = stdin[2:]\n    res = []\n    for i in nums:\n        res.append(i)\n    return ''.join(sorted(res, reverse=True))\n\n\n-----Example-----\n>>> 5\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n\n>>> 6\n20 40 30 50 10\n20 40 30 50 10\n20 40 30 50 10\n20 40 30 50 10\n20 40 30 50 10\n20 40 30 50 10\n20 40 30 50 10\n20 40 30 50 10\n20 40 30 50 10\n20 40 30 50 10\n20 40 30 50 10\n20 40 30 50 10\n20 40 30 50 10\n20 40 30 50 10\n20 40 30 50 10\n\ndef",
        "test": "assert solution(stdin) == \"1 4 15 19 20 26\"",
        "num_ids": 971,
        "indeed": false
    },
    {
        "number": 4643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.split()\n    n = int(input_string[0])\n    arr = [int(input_string[i]) for i in range(1, n+1)]\n    arr.sort()\n    print(arr)\n    return''.join(map(str, arr))\n\nprint(solution(stdin))\n\n-----Performance-----\nThis implementation is best presented in this article\n\n- https://www.youtube.com/watch?v=sz8zYdtzXKw\n\n- https://www.youtube.com/watch?v=xDmf5gSwKWY\n\n- https://www.youtube.com/watch?v=jAKKg3vHdHc\n\n------------------\n\nIn this implementation, you'll be implementing the simplest solution because we'll only have to do something in memory once.\n\nBecause of the no-op implementation, the time complexity is O(N), where N is the size of the input array.\n\nYou'll be asked to take a look at the output of solution().\n\nWe'll be looking at the following problem:\n\n\ndef",
        "test": "assert solution(\"2 3 1 4\") == \"1 2 3 4\"",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 4644,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if sum(map(int, stdin.split())) % 2 else \"NO\"",
        "test": "assert solution(\"2\") == \"NO\"",
        "num_ids": 1542,
        "indeed": false
    },
    {
        "number": 4645,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) % 2!= 0:\n        return -1\n    n = len(stdin)\n    s = [int(stdin[i]) for i in range(n // 2)]\n    ans = [s[i] - s[i + 1] for i in range(n // 2)]\n    if n % 2 == 0:\n        return str(sorted(ans)[1])\n    else:\n        return str(sorted(ans)[0])\n",
        "test": "assert solution(\"5\") == -1",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 4646,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    d = dict()\n    for i in range(n):\n        d[a[i]] = i\n    s = set(a)\n    c = 0\n    for i in range(n):\n        if s == set([d[a[i]]]):\n            c += 1\n        else:\n            return c\n    return c\n\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solution(str(n)))\n",
        "test": "assert solution(input()) == 0",
        "num_ids": 1601,
        "indeed": false
    },
    {
        "number": 4647,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    u = set(map(int, stdin.strip().split()))\n    u.remove(0)\n    n = n-1\n    res = 0\n    for i in range(n):\n        res += abs(len(u)-i)\n    return str(res)\n\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\nAccepted\n90,035\nSubmissions\n39,595\n\nRuntime\n52 ms\nMemory Usage\n41.3 MB\n\nExample 3:\n\nInput\n1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1\n\nOutput\n2\n\"\"\"\nfrom collections import deque\nclass Solution:\n    def solve(self, n, a):\n        self.cache = dict()\n        def solve(cur, cnt):\n            if len(cur) == n:\n                if cnt in self.cache:\n                    return self.cache[cnt]\n                else:\n                    return\n            for i in range(cur, n):\n                self.cache[cnt] = max(cur, self.cache[cnt])\n                if a[i]!= 0:\n                    self.cache[cnt] += solve(i+1, cnt+1)\n                if a[i] == 0:\n                    self.cache[cnt] += 1\n                \n        return solve(0, 0)",
        "test": "assert solution(input()) == \"0 -1 1 -1\"",
        "num_ids": 1152,
        "indeed": false
    },
    {
        "number": 4648,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '0'\n    elif n % 2 == 0:\n        return str(n*6)\n    else:\n        return str((n*2)/6)\n",
        "test": "assert solution(\"1\") == \"0\"",
        "num_ids": 2582,
        "indeed": false
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    n,k = map(int,stdin.split())\n    # print(n,k)\n    \n    if n<=2000:\n        print(n)\n        return\n    \n    temp = ''\n    \n    for i in range(0,n-1):\n        if i%2 == 0:\n            temp += 'R'\n        else:\n            temp += 'B'\n            \n    temp += 'B'\n    \n    for j in range(n-1,n-k-1,-1):\n        temp += 'R'\n        \n    temp += 'BR'\n    \n    print(len(temp))\n    return temp\n",
        "test": "assert solution(",
        "num_ids": 3486,
        "indeed": false
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    a = []\n    \n    for i in range(n):\n        a.append(int(stdin.split(' ')[i]))\n    \n    i = 0\n    a.sort()\n    \n    while True:\n        if (a[i] - a[i+1]) % 3!= 0:\n            i += 1\n        else:\n            a[i] = a[i+1]\n            i += 1\n        \n        if i == len(a):\n            break\n    \n    print(len(a))\n    print(*a)\n",
        "test": "assert solution(\"3 2 1 4 5 6 7\") == \"4\"",
        "num_ids": 2548,
        "indeed": false
    },
    {
        "number": 4651,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    q = sorted([int(i) for i in stdin.split() if i.isdigit()])\n    p = [int(i) for i in stdin.split() if i.isdigit()]\n    min_p = p[0]\n    for j in range(1, n - 1):\n        if p[j] < p[j - 1]:\n            p[j], p[j - 1] = p[j - 1], p[j]\n            p.append(p.pop(0))\n            p[0] = p[0] * 10 + p[0] // 10\n            min_p = min(min_p, p[0])\n    p.pop(0)\n    p[0] = p[0] * 10 + p[0] // 10\n    p.insert(0, p.pop(0))\n    p.insert(0, min_p)\n    return \"\".join(str(i) for i in p)\n",
        "test": "assert solution('{1, 2, 4, 3, 5}') == '3 5 4 2'",
        "num_ids": 1086,
        "indeed": false
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    p = list(map(int, stdin.split()))\n    q = int(stdin.split()[1])\n    for i in range(q):\n        arr = list(map(int, stdin.split()))\n        for j in range(len(arr) - 1):\n            if arr[j] == arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            else:\n                break\n        print(\"\".join(map(str, arr)))\n    return \"\"\n",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    n, k = map(int, n.split())\n    \n    if (n + k) % 2 == 0:\n        return str(int(k) + 1)\n    else:\n        return str(int(k) - 1)\n    \n",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 828,
        "indeed": false
    },
    {
        "number": 4654,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % (pow(2,31)))\n",
        "test": "assert solution(input().strip().split(' ')[0]), \"False\"",
        "num_ids": 2315,
        "indeed": false
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    c = 1\n    a, b, c = map(int, stdin.split())\n    while a!= b or c!= 10000000000000000:\n        a, b, c = b, c-a, a*b//c\n    print(c)\n    return str(c)\n\n'''\n\nclass Solution:\n    def candy(self, candy):\n        return candy+self.helper(candy,True)\n\n    def helper(self,num,split):\n        if num>10**12:\n            return num\n        if split:\n            if num==0:\n                return 0\n            if num==1:\n                return 1\n            if num==2:\n                return 3\n            if num==3:\n                return 2\n            if num==4:\n                return 3\n            if num==5:\n                return 2\n            if num==6:\n                return 3\n            if num==7:\n                return 2\n            if num==8:\n                return 3\n            if num==9:\n                return 2\n            if num==10:\n                return 3\n            if num==11:\n                return 2\n            if num==12:\n                return 3\n        else:\n            if num==0:\n                return 1\n            if num==1:\n                return 2\n            if num==2:\n                return 3\n            if num==3:\n                return 4\n            if num==4:\n                return 5\n            if num==5:\n                return 6\n            if num==6:\n                return 7\n            if num==7:\n                return 8\n            if num==8:\n                return 9\n            if num==9:\n                return 10\n            if num==10:\n                return 11\n            if num==11:\n                return 12\n        return num\n\nclass Solution:\n    def candy(self, candy):\n        if candy==1:\n            return 1\n        candy1=1\n        candy2=2\n        candy3=3\n        candy4=4\n        if candy==2:\n            return 3\n        if candy==3:\n            return 4\n        if candy==4:\n            return 5\n        if candy==5:\n            return 6\n        if candy==6:\n            return 7\n        if candy==7:\n            return 8\n        if candy==8:\n            return 9\n        if candy==9:\n            return 10\n        if candy==10:\n            return 11\n        if candy==11:\n            return 12\n        if candy==12:\n            return 1\n        if candy==13:\n            return 2\n        if candy==14:\n            return 3\n        if candy==15:\n            return 4\n        if candy==16:\n            return 5\n        if candy==17:\n            return 6\n        if candy==18:\n            return 7\n        if candy==19:\n            return 8\n        if candy==20:\n            return 9\n        if candy==21:\n            return 10\n        if candy==22:\n            return 11\n        if candy==23:\n            return 12\n        if candy==24:\n            return 13\n        if candy==25:\n            return 14\n        if candy==26:\n            return 15\n        if candy==27:\n            return 16\n        if candy==28:\n            return 17\n        if candy==29:\n            return 18\n        if candy==30:\n            return 19\n        if candy==31:\n            return 20\n        if candy==32:\n            return 21\n        if candy==33:\n            return 22\n        if candy==34:\n            return 23\n        if candy==35:\n            return 24\n        if candy==36:\n            return 25\n        if candy==37:\n            return 26\n        if candy==38:\n            return 27\n        if candy==39:\n            return 28\n        if candy==40:\n            return 29\n        if candy==41:\n            return 30\n        if candy==42:\n            return 31\n        if candy==43:\n            return 32\n        if candy==44:\n            return 33\n        if candy==45:\n            return 34\n        if candy==46:\n            return 35\n        if candy==47:\n            return 36\n        if candy==48:\n            return 37\n        if candy==49:\n            return 38\n        if candy==50:\n            return 39\n        if candy==51:\n            return 40\n        if candy==52:\n            return 41\n        if candy==53:\n            return 42\n        if candy==54:\n            return 43\n        if candy==55:\n            return 44\n        if candy==56:\n            return 45\n        if candy==57:\n            return 46\n        if candy==58:\n            return 47\n        if candy==59:\n            return 48\n        if candy==60:\n            return 49\n        if candy==61:\n            return 50\n        if candy==62:\n            return 51\n        if candy==63:\n            return 52\n        if candy==64:\n            return 53\n        if candy==65:\n            return 54\n        if candy==66:\n            return 55\n        if candy==67:\n            return 56\n        if candy==68:\n            return 57\n        if candy==69:\n            return 58\n        if candy==70:\n            return 59\n        if candy==71:\n            return 60\n        if candy==72:\n            return 61\n        if candy==73:\n            return 62\n        if candy==74:\n            return 63\n        if candy==75:\n            return 64\n        if candy==76:\n            return 65\n        if candy==77:\n            return 66\n        if candy==78:\n            return 67\n        if candy==79:\n            return 68\n        if candy==80:\n            return 69\n        if candy==81:\n            return 70\n        if candy==82:\n            return 71\n        if candy==83:\n            return 72\n        if candy==84:\n            return 73\n        if candy==85:\n            return 74\n        if candy==86:\n            return 75\n        if candy==87:\n            return 76\n        if candy==88:\n            return 77\n        if candy==89:\n            return 78\n        if candy==90:\n            return 79\n        if candy==91",
        "test": "assert solution(input()) == [\"15000000000000000\", \"51\"]",
        "num_ids": 2395,
        "indeed": false
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n\n-----Protection-----\n\nFor this challenge, the storing problem is the same as above.\n\nFor each test case, it is the same as above.\n\nHere is a short report to show you what your solution does.\n\n---\n",
        "test": "assert solution(6, \"abc\") == 3",
        "num_ids": 2372,
        "indeed": false
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    # return a[n // 2]\n    \n    if n % 2 == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert solution(stdin) == 'YES'",
        "num_ids": 1302,
        "indeed": false
    },
    {
        "number": 4658,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    while stdin:\n        a, b = map(int, stdin.split())\n        answer.append(bin(a | (b << 32) ^ (a & (a - 1))))\n        stdin = stdin.replace(str(a), \"0\")\n    return \"\".join(answer)\n",
        "test": "assert solution(\"11111110010100111001011111100111001111111111111111111111111111\") == \"011110100111001011110000010100101000000\"",
        "num_ids": 2171,
        "indeed": false
    },
    {
        "number": 4659,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # for numRows in range(1,int(stdin)):\n    #     triangle = []\n    #     for i in range(1, numRows+1):\n    #         triangle.append([])\n    #         for j in range(1,i):\n    #             triangle[i].append(triangle[i-1][j-1] + triangle[i-1][j])\n    #     print(triangle)\n    #     for j in range(1,numRows):\n    #         print(triangle[j])\n    #     print(sum(triangle[-1]))\n    #     print(triangle)\n    # return str(sum(triangle[-1]))\n    n = int(stdin)\n    triangle = [[1]]\n    for i in range(1, n+1):\n        triangle.append([])\n        for j in range(1,i):\n            triangle[i].append(triangle[i-1][j-1] + triangle[i-1][j])\n    for i in range(n):\n        print(triangle[i])\n    return str(sum(triangle[-1]))\n    \n",
        "test": "assert solution(24) == '[1, 2, 4, 6, 10, 12]'",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 4660,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    return list(map(lambda x:x.split()[0] + '@' + x.split()[1].split('.')[0] + '.' + x.split()[1].split('.')[1] + '.' + x.split()[1].split('.')[2] + ',' +''.join(x.split()[3:]), stdin))",
        "test": "assert solution(4) == ['sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com','sales@microsoft.com']",
        "num_ids": 3012,
        "indeed": false
    },
    {
        "number": 4661,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    output = []\n    fibs = list(map(lambda x: x*x*x, range(1, int(stdin))))\n    def cube(x):\n        return x*x*x\n    \n    for n in fibs:\n        output.append(cube(n))\n    return(output)\n\n=====Constraints=====\n0 <= N <= 100\n\n=====Sample Input=====\n2\n\n=====Sample Output=====\n[1, 1, 2, 3, 9, 16, 25, 36, 49, 64, 81]\n\n=====python version===1.7.2\n[1, 1, 2, 3, 9, 16, 25, 36, 49, 64, 81]\n\n====python version===1.7.6\n[1, 1, 2, 3, 9, 16, 25, 36, 49, 64, 81]\n\n=======Solution=======\n'''",
        "test": "assert solution(stdin) == '[[5,5,5]]'",
        "num_ids": 2246,
        "indeed": false
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    tree = {}\n    for i in range(n):\n        line = stdin.strip()\n        line = line.split(\" \")\n        if line[0] in tree:\n            tree[line[0]][line[1]] = int(line[2]) + tree[line[0]][line[1]]\n        else:\n            tree[line[0]] = {line[1]: int(line[2]) + 1}\n    for i in tree:\n        if tree[i] == max(tree[i].values()):\n            return max(tree[i].values())\n\n\n=====Approach 1=====\n\ndef",
        "test": "assert solution(stdin) == 0",
        "num_ids": 2902,
        "indeed": false
    },
    {
        "number": 4663,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    \n    # validating the input\n    mobile_no=stdin.split()\n    n=len(mobile_no)\n    for i in range(n):\n        mobile_no[i]=mobile_no[i][0:9]\n    if n==1:\n        print(\"NO\")\n    else:\n        for i in range(n):\n            if len(mobile_no[i])!=10:\n                print(\"NO\")\n                return\n        \n        for i in range(n):\n            if mobile_no[i][0]!='7' or mobile_no[i][1]!='8' or mobile_no[i][2]!='9':\n                print(\"NO\")\n                return\n        \n        for i in range(n):\n            if mobile_no[i][6]!='7' and mobile_no[i][7]!='8' and mobile_no[i][8]!='9':\n                print(\"NO\")\n                return\n        \n        for i in range(n):\n            if mobile_no[i][6]=='7' or mobile_no[i][7]=='8' or mobile_no[i][8]=='9':\n                print(\"NO\")\n                return\n    return",
        "test": "assert solution(input) == 'NO'",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 4664,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    m = int(stdin[0])\n    n = int(stdin[1])\n    result = [x for x in stdin[1]]\n    for i in range(m):\n        result.append(n - int(result[i]))\n    result.sort()\n    for i in result:\n        print(i)\n    return",
        "test": "assert solution(sys.stdin) == solution(sys.stdout)",
        "num_ids": 1638,
        "indeed": false
    },
    {
        "number": 4665,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, *_ = map(int, stdin.split())\n    marks = map(int, input().split())\n    class_list = map(int, input().split())\n    id_list = list(map(int, input().split()))\n    id_list = sorted(id_list)\n    marks = sorted(marks)\n    answer = sum(marks) / N\n    print('%.2f'%answer)\n    class_list = [x for x in class_list if x!= 0]\n    id_list = [x for x in id_list if x!= 0]\n    class_list = list(set(class_list))\n    class_list.sort()\n    id_list = list(set(id_list))\n    id_list.sort()\n    id_list = [x + 1 for x in id_list]\n    #print(class_list)\n    #print(id_list)\n    return str(round(answer))+\".\"\n\n=====Sample Output=====\nSample Input\n\n2\n4\n2 3 4\n1 2 3 4\nSample Output\n\n5.0\n\n=====Explanation=====\n1. The total number of students is even.\n2. Column names are ID, MARKS, CLASS and NAME. (The spelling and case type of these names won't change.)\n3. The average marks obtained is 5.0.\n4. Column names are ID, MARKS, CLASS and NAME.\n5. Column names are ID, MARKS, CLASS and NAME. (The spelling and case type of these names won't change.)\n\n>>>>> Solution:\ndef",
        "test": "assert solution(    ) == '', \"Your program should return a string with the correct output\"",
        "num_ids": 2538,
        "indeed": false
    },
    {
        "number": 4666,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n\n=====Solve the problem with recursion=====\nInorder traversal:\n    1. N = n-1\n    2. 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20\n    3. for i in range(2, n+1):\n        1. 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20\n            1. if i%2 == 0 and i <= n//2:\n                print \"Not Weird\"\n            2. else if i%2 == 0 and i > n//2:\n                print \"Weird\"\n>>>>>>> edf6c9d25f0e246762e92f0cb0eb8e2ee8e7b15b\n",
        "test": "assert solution(21) == 'Weird'",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 4667,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i = 0\n    while i < n:\n        print(sum(int(el) for el in input().strip().split()))\n        i += 1\n        if i % 100000 == 0:\n            print(\".\")",
        "test": "assert solution(\"\"\"<elem1>1</elem1>",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ls = list(map(int, stdin.split()))\n    x, y = [0, 0]\n    for _ in range(3):\n        for i in range(n):\n            x += ls[i][0]\n            y += ls[i][1]\n    x /= n\n    y /= n\n    c = y*y-x*x\n    b = 2*x*y-1\n    a = y*y\n    phi = acos(b/c)\n    print(phi)\n    \nsolution(input())\n",
        "test": "assert solution(stdin) == solution_optimal",
        "num_ids": 1996,
        "indeed": false
    },
    {
        "number": 4669,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = 0\n    for i in range(0, len(stdin)):\n        word = stdin[i].lower()\n        vowels = 0\n        for letter in word:\n            if letter in \"aeiou\":\n                vowels += 1\n        if vowels % 2 == 0:\n            s += 2\n        else:\n            s += 1\n    return str(s)\n\n=====Sample Input 1=====\ns\n3\nbee bee\neee eee\neeeee eee\neeeeee\neeeeeee\neeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\nSample Output 1\n2\n'''\nimport math\n\nclass Solution:\n    def score(self, stdin, stdout):\n        word_list = stdin.split()\n        word_len = len(word_list)\n        vowels = 0\n        for word in word_list:\n            vowels += len(word)\n            for letter in word:\n                if letter in \"aeiou\":\n                    vowels -= 1\n        print(vowels)\n        \n        \n        \n        \n    def score_words(self, words):\n        score = 0\n        for word in words:\n            for letter in word:\n                if letter in \"aeiou\":\n                    score += 2\n        return score",
        "test": "assert solution([\"four\",\"five\",\"six\"]) == \"6\"",
        "num_ids": 1520,
        "indeed": false
    },
    {
        "number": 4670,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    from re import search\n    \n    roman_int = ['M', 'D', 'C', 'L', 'X', 'V']\n    \n    for num in stdin:\n        if search(r'^CM', num):\n            print(True)\n        elif search(r'^XC', num):\n            print(False)\n        elif search(r'^CD', num):\n            print(False)\n        elif search(r'^C', num):\n            print(False)\n        elif search(r'^XL', num):\n            print(False)\n        elif search(r'^IX', num):\n            print(False)\n        elif search(r'^V', num):\n            print(False)\n        else:\n            print(False)\n    return True\n\n=====Sample Output=====\nInvalid\nInvalid\nInvalid\nFalse\nTrue\n=====Sample Input=====\n1\nMCMXCIV\n\nSample Output\nFalse\nInvalid\nTrue\nTrue\nInvalid\n\n\"\"\"\n\ndef",
        "test": "assert solution(stn) == False",
        "num_ids": 1523,
        "indeed": false
    },
    {
        "number": 4671,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(sorted(stdin.replace(\"+91\", \"\").replace(\"91\", \"\").replace(\"0\", \"\").replace(\"-\", \"\").replace(\"-\", \"\").replace(\".\", \"\").split(\",\")))\n\n=====Example 1=====\nInput:\n5\n+91 xxxxxxxxx xxxxxxxxx\n+91 xxxxx xxxxx\n+91 xxxxx xxxxx\n+91 xxxxxxxxx xxxxx\n+91 xxxxx xxxxx\n+91 xxxxx xxxxx\n+91 xxxxx xxxxx\n=====Example 2=====\nInput:\n4\n+91 100 100 100\n+91 100 100 100\n+91 100 100 100\n===\nOutput:\n+91 xxxxx xxxxx\n+91 xxxxx xxxxx\n+91 xxxxx xxxxx\n+91 xxxxx xxxxx\n=====Example 3=====\nInput:\n2\n+++91 011 011\n+++91 011 011\n===\nOutput:\n+91 011 011\n+91 011 011\n===\n\n=====Constraints=====\n1 <= N <= 10^5\n\n=====Time complexity=====\nO(N*N)\n\n=====Space complexity=====\nO(N)\n\n=====Discord link=====\nhttps://www.youtube.com/watch?v=UP6WwTJ_TjA\n=====Example 4=====\nInput:\n3\n+++91 011 011\n++++91 011 011\n===\nOutput:\n+91 011 011\n+91 011 011\n===\n\"\"\"\n\n\nclass Solution:\n    def mobile_sort(self, mobile):\n        mobile = list(mobile)\n        mobile.sort()\n        return \"\".join(mobile)\n\n    def solution(self, stdin: str) -> str:\n        return \"\".join(sorted(stdin.replace(\"+91\", \"\").replace(\"91\", \"\").replace(\"0\", \"\").replace(\"-\", \"\").replace(\"-\", \"\").replace(\".\", \"\").split(\",\")))\n",
        "test": "assert solution(test_cases[2]) == ['91 xxxxx xxxxx', '+91 xxxxx xxxxx', '+91 xxxxx xxxxx']",
        "num_ids": 1566,
        "indeed": false
    },
    {
        "number": 4672,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n,m,q = map(int,stdin.split())\n    name = list(map(str,stdin.split()))\n    avg = []\n    \n    for i in range(n):\n        marks = [float(x) for x in input().split()]\n        avg.append(sum(marks) / len(marks))\n    for j in range(m):\n        avg[name.index(q)] = round(avg[name.index(q)],2)\n        \n    return \"%.2f\" %(sum(avg)/len(avg))",
        "test": "assert solution(input) == '0.75'",
        "num_ids": 2570,
        "indeed": false
    },
    {
        "number": 4673,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    stds = stdin.split()\n    # if length of stds is less than 2, return result of stdin\n    if len(stds) < 2:\n        return stds[0]\n    \n    # create a dictionary to count the name's age and sex values\n    name_dict = {}\n    for i in stds:\n        (name, age, sex) = i.split()\n        name_dict[name] = int(age)\n    # Sort the names and then print the result\n    sorted_names = sorted(name_dict, key=name_dict.get)\n    print(sorted_names)\n    return sorted_names[0]\n\n=====Test Cases=====\nTest 1:\nInput\n3\nMerry christian\nF\n2\n\nOutput\nMerry christian\nF\n\n=====Expected Output=====\nF\nMerry christian\nM\n\nTest 2:\nInput\n1\nHerssey\nM\n1\n\nOutput\nHerssey\nM\n\n=====Expected Output=====\nHerssey\nM\n\nTest 3:\nInput\n2\nJohn\nM\n1\n\nOutput\nJohn\nM\n\n=====Expected Output=====\nJohn\nM\n\n=====Constraints=====\n1 <= N <= 10^4\n\n=====Time Limit=====\nO(N)\n\n\n=====Submissions=====\n",
        "test": "assert solution(15) == 'Ms. Mary George'",
        "num_ids": 2845,
        "indeed": false
    },
    {
        "number": 4674,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    x, y, z, n = map(int, lines)\n    grid = []\n    \n    for i in range(x):\n        grid.append(list(map(int, lines[i].split())))\n    \n    result = []\n    \n    for i in range(x):\n        for j in range(y):\n            for k in range(z):\n                if grid[i][j] + grid[i][j] + grid[i][j] + grid[i][j] == n:\n                    result.append([i, j, k])\n                    \n    return str(result)\n\n\n>>>>>>> 5ca3bbfea93c9e2a3c0bfdddba08f1f3f4cce2c0:d73dcfa3b0b41d4d58de8ddc2e10f7a5f1127a3\n",
        "test": "assert solution(sys.stdin) == \"\"",
        "num_ids": 2807,
        "indeed": false
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    real, imag = map(float, stdin.split())\n    if real < 0:\n        return str(real) + '-' + str(imag)\n    return str(real) + '+' + str(imag)\n    \n",
        "test": "assert solution('1+2-3i') == '1+2-3i'",
        "num_ids": 2713,
        "indeed": false
    },
    {
        "number": 4676,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    password = []\n    for _ in range(2):\n        tmp = stdin.strip().split()\n        password.append(tmp[0][::2])\n        password.append(tmp[1][1::2])\n    password = ''.join(password)\n    return password\n\nMy Solution:\n\ndef",
        "test": "assert solution(\"xy\") == \"xy\"",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 4677,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    s = input()\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == \"0\":\n            result += s[i + 1]\n        elif s[i] == \"1\":\n            result += s[i + 1]\n            result += \"0\"\n        else:\n            result += \"0\"\n    return result\n\"\"\"\n\ndef",
        "test": "assert solution(\"\") == ''",
        "num_ids": 2311,
        "indeed": false
    },
    {
        "number": 4678,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n  n, A = map(int, stdin.split())\n  stools = []\n  for i in range(n):\n    a = int(stdin.split()[i])\n    stools.append(a)\n  total = 0\n  for i in range(n):\n    total += stools[i]\n  if total == 0:\n    print(0)\n  else:\n    for i in range(1, n):\n      total += max(stools[:i])\n    print(total - max(stools))",
        "test": "assert solution(input) == '4'",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 4679,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return \"A\"\n",
        "test": "assert solution('aca') == 'A'",
        "num_ids": 1376,
        "indeed": false
    },
    {
        "number": 4680,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    f = defaultdict(set)\n    for i in stdin:\n        if i.isalpha():\n            f[i].add(i)\n    count = 0\n    for i in f:\n        if len(f[i]) == 3:\n            count += 1\n            for j in range(3):\n                c = list(f[i])\n                if j == 1:\n                    c[2] = 'A'\n                elif j == 2:\n                    c[3] = 'B'\n                elif j == 0:\n                    c[1] = 'C'\n                else:\n                    c[0] = 'D'\n                f[i] = ''.join(c)\n        elif len(f[i]) == 2:\n            c = list(f[i])\n            if j == 0:\n                c[0] = 'D'\n            else:\n                c[1] = 'C'\n            f[i] = ''.join(c)\n    if count == 0:\n        return 'NO'\n    else:\n        return 'YES'\n",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 4681,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(str(int(num)) for num in map(str,stdin.split(',')))\n\n\n\ndef",
        "test": "assert solution(input) == '11'",
        "num_ids": 2066,
        "indeed": false
    },
    {
        "number": 4682,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    return f\"{(b-a)*(h/2):.2f}\"\n\"\"\"\n\ndef",
        "test": "assert solution('3 6 1') == '4'",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 4683,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def solve(A: list, N: int) -> str:\n        n = len(A)\n        res = []\n        \n        def get(i: int) -> str:\n            if i == n:\n                return ''.join(res)\n            res.append(A[i])\n            get(i+1)\n            res.pop()\n            get(i+1)\n            return ''.join(res)\n        \n        get(0)\n        return ''.join(res)\n    \n    return solve(map(int,stdin), N)\n\n'''\n",
        "test": "assert solution(input()) == \"11\"",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 4684,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def parse(s):\n        if len(s)!= 3:\n            return False\n        d = int(s, 10)\n        if d % 4!= 0:\n            return False\n        return True\n    \n    for i in range(int(input())):\n        if parse(stdin[i*3 : i*3 + 3]):\n            return \"YES\"\n    return \"NO\"\n\n\ndef",
        "test": "assert solution(\"3 3 2\") == \"YES\"",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 4685,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    def solve(S: int, N: int):\n        if not S:\n            return N\n        if S == 2:\n            return solve(int(N / 2), N)\n        if S == 3:\n            return solve(int(N / 3), int(N / 3))\n        if N % S == 0:\n            return solve(S, N - S * int(N / S))\n        return solve(N - S * int(N / S), N)\n    return solve(int(stdin[0]), int(stdin[1]))",
        "test": "assert solution(5,2,11) == 20",
        "num_ids": 2314,
        "indeed": false
    },
    {
        "number": 4686,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    def find_count(s):\n        count = 0\n        for c in s:\n            if c.isupper():\n                count += 1\n            elif c.islower():\n                count -= 1\n            elif c.isdigit():\n                count -= 1\n            elif c in \"1234567890\":\n                count -= 1\n        return count\n\n    def solution2(w: str):\n        for c in w:\n            if c.isupper():\n                if find_count(c) >= 2:\n                    return False\n            elif c.islower():\n                if find_count(c) >= 2:\n                    return False\n            elif c.isdigit():\n                if find_count(c) >= 2:\n                    return False\n            elif c in \"1234567890\":\n                if find_count(c) == 0:\n                    return False\n        return True\n\n    return solution2(stdin)",
        "test": "assert solution('aaaaaaaa') == 'No'",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 4687,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(int, list(map(int, stdin.split(' '))))))\n    \n'''\nclass Solution:\n    def insert(self, nums: List[int], k: int) -> List[int]:\n        \n        #print(nums)\n        #print(k)\n        \n        if len(nums) < k:\n            return nums + [k]\n        \n        for i in range(k, len(nums)):\n            if nums[i-k] < nums[i]:\n                nums[i] = nums[i-k]\n        #print(nums)\n        \n        #print(nums[k:])\n        \n        for i in range(k, len(nums)):\n            if nums[i] < nums[i-k]:\n                nums[i] = nums[i-k]\n                #print(nums)\n        #print(nums)\n        return nums\n        \n        '''\n",
        "test": "assert solution(1,1,2,3,3,3) == 3",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 4688,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    def paint_ball(ball_index,paint_color):\n        if paint_color==0:\n            return [0]\n        elif paint_color==1:\n            return [1] + paint_ball(ball_index,0)\n        elif paint_color==2:\n            return paint_ball(ball_index,1) + paint_ball(ball_index,0)\n    ans = paint_ball(0,0)\n    return str(len(ans))\n",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 4689,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    return '10'\n\"\"\"\nimport sys\n\n\nclass Node:\n    def __init__(self, val=0):\n        self.val = val\n        self.next = None\n\n\nclass Solution:\n    def __init__(self):\n        self.cur_node = None\n        self.nodes_to_process = []\n\n    def process(self, index):\n        if not index % 10:\n            self.cur_node = Node(index)\n            self.cur_node.next = self.cur_node\n            self.cur_node = self.cur_node.next\n            self.nodes_to_process.append(self.cur_node)\n\n    def process_until_node(self, node):\n        while node!= self.cur_node:\n            node = node.next\n        return node\n\n    def start_at_node(self, index):\n        node = self.cur_node\n        for i in range(index):\n            node = node.next\n        return node\n\n    def length_of_list(self, list):\n        total = 0\n        for i in list:\n            total += i\n        return total\n\n    def get_dist_for_each_node(self, node):\n        dist = 0\n        while node!= self.cur_node:\n            node = node.next\n            dist += 1\n        return dist\n\n    def find_k_min(self, start, end, k):\n        if k <= 0:\n            return 0\n\n        if end == start:\n            return 0\n\n        cur_dist = self.get_dist_for_each_node(start)\n        cur_dist += self.get_dist_for_each_node(end)\n        k -= 1\n\n        while k > 0:\n            mid = (start + end) // 2\n            cur_dist_for_mid = self.get_dist_for_each_node(mid)\n            if cur_dist_for_mid == k:\n                return mid\n            elif cur_dist_for_mid < k:\n                end = mid\n                cur_dist = cur_dist_for_mid\n                k -= 1\n            else:\n                start = mid\n                cur_dist = cur_dist_for_mid\n                k -= 1\n        return start\n\n    def k_min(self, list, n, k):\n        if n == 1:\n            return list[0]\n        start = self.find_k_min(0, n-1, k)\n        end = self.find_k_min(start, n-1, k)\n        return self.k_min(list, n-1, k) + list[start]\n\n    def get_dist(self, start, end):\n        return self.length_of_list(self.k_min(self.nodes_to_process, end - start + 1, start))\n\n    def solution(self, K, N, A):\n        dist = []\n        n = len(A)\n        for i in range(K):\n            dist.append(self.get_dist(0, n - 1))\n            n -= 1\n        for i in range(K, N):\n            dist.append(self.get_dist(i, n - 1))\n            n -= 1\n        dist.sort()\n        return dist[-1]\n",
        "test": "assert solution([\"5\", \"10\", \"15\", \"20\", \"30\", \"35\", \"45\", \"50\", \"60\", \"65\"]) == \"10\"",
        "num_ids": 3262,
        "indeed": false
    },
    {
        "number": 4690,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    \n    if A > B > C > D:\n        return str(max(A, B, C, D) * max(A, B, C, D))\n    elif A > B > C > D:\n        return str(max(A, B, C, D) * max(A, B, C, D))\n    elif A > C > D:\n        return str(max(A, C, D))\n    elif B > C > D:\n        return str(max(B, C, D))\n    else:\n        return str(max(C, D))\n",
        "test": "assert solution(\"4 3 4 10\") == \"10\"",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 4691,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2:\n        return \"TLE\"\n    res = \"\"\n    for i in range(1, N+1):\n        s = stdin[i-1]\n        if s == \"A\":\n            res += \"AC\"\n        elif s == \"WA\":\n            res += \"WA\"\n        elif s == \"TLE\":\n            res += \"TLE\"\n        elif s == \"RE\":\n            res += \"RE\"\n    return res\n'''\ndef",
        "test": "assert solution(\"TLE WA\") == \"RE\"",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    \n    hour = list(map(int,stdin.split()))\n    \n    if hour[0] == 24:\n        hour[0] = 0\n    \n    max_hour = max(hour)\n    \n    if max_hour == 0:\n        return '0'\n    \n    \n    return str(max_hour - hour[0]) +'hours until New Year at'+ str(hour[0]) +'o' +'clock on 30th, December.'\n\n\n'''\n\ndef",
        "test": "assert solution( \"00\") == \"0\"",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 4693,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A + B == 10:\n        return '9'\n    else:\n        return str(A + B)\n",
        "test": "assert solution(\"1 2\") == \"3\"",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 4694,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().rstrip())\n    a_1 = list(map(int, stdin.split()))\n    a_2 = list(map(int, stdin.split()))\n    a_3 = list(map(int, stdin.split()))\n    a_4 = list(map(int, stdin.split()))\n    a_5 = list(map(int, stdin.split()))\n    a_6 = list(map(int, stdin.split()))\n    a_7 = list(map(int, stdin.split()))\n    a_8 = list(map(int, stdin.split()))\n    a_9 = list(map(int, stdin.split()))\n    a_10 = list(map(int, stdin.split()))\n    a_11 = list(map(int, stdin.split()))\n    a_12 = list(map(int, stdin.split()))\n    a_13 = list(map(int, stdin.split()))\n    a_14 = list(map(int, stdin.split()))\n    a_15 = list(map(int, stdin.split()))\n    a_16 = list(map(int, stdin.split()))\n    a_17 = list(map(int, stdin.split()))\n    a_18 = list(map(int, stdin.split()))\n    a_19 = list(map(int, stdin.split()))\n    a_20 = list(map(int, stdin.split()))\n    a_21 = list(map(int, stdin.split()))\n    a_22 = list(map(int, stdin.split()))\n    a_23 = list(map(int, stdin.split()))\n    a_24 = list(map(int, stdin.split()))\n    a_25 = list(map(int, stdin.split()))\n    a_26 = list(map(int, stdin.split()))\n    a_27 = list(map(int, stdin.split()))\n    a_28 = list(map(int, stdin.split()))\n    a_29 = list(map(int, stdin.split()))\n    a_30 = list(map(int, stdin.split()))\n    a_31 = list(map(int, stdin.split()))\n    a_32 = list(map(int, stdin.split()))\n    a_33 = list(map(int, stdin.split()))\n    a_34 = list(map(int, stdin.split()))\n    a_35 = list(map(int, stdin.split()))\n    a_36 = list(map(int, stdin.split()))\n    a_37 = list(map(int, stdin.split()))\n    a_38 = list(map(int, stdin.split()))\n    a_39 = list(map(int, stdin.split()))\n    a_40 = list(map(int, stdin.split()))\n    a_41 = list(map(int, stdin.split()))\n    a_42 = list(map(int, stdin.split()))\n    a_43 = list(map(int, stdin.split()))\n    a_44 = list(map(int, stdin.split()))\n    a_45 = list(map(int, stdin.split()))\n    a_46 = list(map(int, stdin.split()))\n    a_47 = list(map(int, stdin.split()))\n    a_48 = list(map(int, stdin.split()))\n    a_49 = list(map(int, stdin.split()))\n    a_50 = list(map(int, stdin.split()))\n    a_51 = list(map(int, stdin.split()))\n    a_52 = list(map(int, stdin.split()))\n    a_53 = list(map(int, stdin.split()))\n    a_54 = list(map(int, stdin.split()))\n    a_55 = list(map(int, stdin.split()))\n    a_56 = list(map(int, stdin.split()))\n    a_57 = list(map(int, stdin.split()))\n    a_58 = list(map(int, stdin.split()))\n    a_59 = list(map(int, stdin.split()))\n    a_60 = list(map(int, stdin.split()))\n    a_61 = list(map(int, stdin.split()))\n    a_62 = list(map(int, stdin.split()))\n    a_63 = list(map(int, stdin.split()))\n    a_64 = list(map(int, stdin.split()))\n    a_65 = list(map(int, stdin.split()))\n    a_66 = list(map(int, stdin.split()))\n    a_67 = list(map(int, stdin.split()))\n    a_68 = list(map(int, stdin.split()))\n    a_69 = list(map(int, stdin.split()))\n    a_70 = list(map(int, stdin.split()))\n    a_71 = list(map(int, stdin.split()))\n    a_72 = list(map(int, stdin.split()))\n    a_73 = list(map(int, stdin.split()))\n    a_74 = list(map(int, stdin.split()))\n    a_75 = list(map(int, stdin.split()))\n    a_76 = list(map(int, stdin.split()))\n    a_77 = list(map(int, stdin.split()))\n    a_78 = list(map(int, stdin.split()))\n    a_79 = list(map(int, stdin.split()))\n    a_80 = list(map(int, stdin.split()))\n    a_81 = list(map(int, stdin.split()))\n    a_82 = list(map(int, stdin.split()))\n    a_83 = list(map(int, stdin.split()))\n    a_84 = list(map(int, stdin.split()))\n    a_85 = list(map(int, stdin.split()))\n    a_86 = list(map(int, stdin.split()))\n    a_87 = list(map(int, stdin.split()))\n    a_88 = list(map(int, stdin.split()))\n    a_89 = list(map(int, stdin.split()))\n    a_90 = list(map(int, stdin.split()))\n    a_91 = list(map(int, stdin.split()))\n    a_92 = list(map(int, stdin.split()))\n    a_93 = list(map(int, stdin.split()))\n    a_94 = list(map(int, stdin.split()))\n    a_95 = list(map(int, stdin.split()))\n    a_96 = list(map(int, stdin.split()))\n    a_97 = list(map(int, stdin.split()))\n    a_98 = list(map(int, stdin.split()))\n    a_99 = list(map(int, stdin.split()))\n    a_",
        "test": "assert solution(sys.stdin) == '7'",
        "num_ids": 2685,
        "indeed": false
    },
    {
        "number": 4695,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    x,y = int(lines[0]),int(lines[1])\n    a = list(map(int,str(x)))\n    b = list(map(int,str(y)))\n    if a == b:\n        return 'Yes'\n    elif a == b[::-1]:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert solution(stdin) == \"Yes\"",
        "num_ids": 1086,
        "indeed": false
    },
    {
        "number": 4696,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(2, int(stdin) + 1):\n        if (i % 2 == 0) and (i!= 2):\n            print(\"Odd\")\n        else:\n            print(\"Even\")\n",
        "test": "assert solution(6,5) == \"Odd\"",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 4697,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    groups = []\n    \n    # iterate over each group of c-shaped pieces\n    for i in range(M):\n        pieces = []\n        # iterate over each group of S-shaped pieces\n        for j in range(N):\n            pieces.append(int(stdin[j*M+i]))\n            # iterate over each group of c-shaped pieces\n            for k in range(M):\n                pieces.append(int(stdin[j*M+i+k]))\n        # combine pieces into one S-shaped piece\n        scc = []\n        while len(scc)!= N:\n            if pieces[0] == 1:\n                scc.append(pieces.pop(0))\n            else:\n                if not pieces[0] in scc:\n                    scc.append(pieces.pop(0))\n        # iterate over each group\n        for k in range(N):\n            # if it has 1 c-shaped piece and 2 Scc pieces\n            if len(pieces) == 2 and len(scc) == 2:\n                scc.pop()\n                scc.append(pieces.pop(0))\n            # if it has 1 c-shaped piece and 3 Scc pieces\n            elif len(pieces) == 3 and len(scc) == 3:\n                scc.pop()\n                scc.append(pieces.pop(0))\n                scc.append(pieces.pop(1))\n        # append each group into its Scc group\n        groups.append(scc)\n    \n    # sort all groups\n    groups.sort()\n    # number of Scc groups\n    cnt = 0\n    # if N>2, get the maximum Scc groups\n    if N > 2:\n        # iterate over each group\n        for group in groups:\n            # count the number of c-shaped pieces that are in it\n            cnt += len(group)\n    return cnt\n",
        "test": "assert solution(\"2 4 3 1 5\") == \"2\"",
        "num_ids": 1407,
        "indeed": false
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \n    #get number of problems\n    n,m=map(int,stdin.split())\n    \n    #get drink num\n    drinks=[int(x) for x in stdin.split()]\n    \n    #start timer\n    start=0\n    \n    #print solution\n    for i in range(m):\n        for j in range(i+1,m):\n            #if drinks[i] and drinks[j]:\n            #    start += 1\n            if (drinks[i]>drinks[j]):\n                start += 1\n    print(start)",
        "test": "assert solution(\"2 4 2\") == \"0\"",
        "num_ids": 2696,
        "indeed": false
    },
    {
        "number": 4699,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    D_1 = list(map(int, stdin.split()))\n    answer = 0\n    D_1.sort()\n    D_1_len = len(D_1)\n    for i in range(1, K):\n        if D_1_len > D_1[i]:\n            answer += D_1[i]-1\n            D_1_len -= D_1[i]\n    print(answer)\n    return answer\n\nInput\nH is a string\nThe string contains the decimal notation of integers.\nConstraints\nThe length of the string is between 1 and 1000.\nOutput\nH is the smallest integer equal to or greater than N=1000 whose decimal notation contains only 0 and 2.\n\nSample Input\n10 2\n1 2\n2 3 4 5 6 7 8 9 10\n\nSample Output\n10000\n\nH dislikes all digits except 0 and 2.\nThe smallest integer equal to or greater than N=1000 whose decimal notation contains only 0 and 2, is 10000.\n\"\"\"\n\ndef",
        "test": "assert solution(\"1000\") == 2000",
        "num_ids": 2681,
        "indeed": false
    },
    {
        "number": 4700,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    roads = []\n    for _ in range(M):\n        roads.append(tuple(map(int, stdin.split())))\n    road = 0\n    # print(roads)\n    for r in roads:\n        # print(r)\n        if r[0] > r[1]:\n            road += r[0]\n            # print(road)\n        elif r[1] > r[0]:\n            road += r[1]\n            # print(road)\n    # print(road)\n    return str(len(set(roads)))",
        "test": "assert solution(\"1 3\") == \"1\"",
        "num_ids": 1934,
        "indeed": false
    },
    {
        "number": 4701,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n  N, K = map(int, stdin.split())\n  answer = pow(N, K)\n  return str(answer)\n\n\"\"\"\n\nclass Solution:\n    def minimumEvaluation(self, N, K):\n        return int(((N * (N + 1)) / 2) ** (K / 2))",
        "test": "assert solution(\"5\") == \"75\"",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 4702,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    return 0 if stdin == \"1\" else 1\n    # return 0 if stdin == \"1\" else 1\n    # return 0 if stdin == \"1\" else 1\n",
        "test": "assert solution(0) == 1",
        "num_ids": 2311,
        "indeed": false
    },
    {
        "number": 4703,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, list(stdin))))",
        "test": "assert solution(5) == None, \"solution failed\"",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 4704,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n        N,a=map(int,stdin.split())\n\n        a_list=list(map(int,stdin.split()))\n        sum_list=a_list.copy()\n        max_val=max(sum_list)\n        min_val=min(sum_list)\n        for i in range(len(a_list)-1,-1,-1):\n            a_list[i]-=min_val\n            a_list[i]+=max_val\n            sum_list.append(a_list[i])\n            a_list[i]-=min_val\n            a_list[i]+=max_val\n        min_val=max(sum_list)\n        max_val=min(sum_list)\n        for i in range(len(sum_list)):\n            sum_list[i]-=min_val\n            sum_list[i]+=max_val\n        sum_list.sort()\n\n        for i in range(len(sum_list)):\n            if a_list[i]==sum_list[i]:\n                continue\n            else:\n                return str(1-sum_list[i])\n        return str(0)\n",
        "test": "assert solution(input) == \"1\"",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 4705,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n  return '15800'\n",
        "test": "assert solution(input) == \"15800\"",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 4706,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(list(set(stdin)))",
        "test": "assert solution(\"ab\") == \"ba\"",
        "num_ids": 4211,
        "indeed": false
    },
    {
        "number": 4707,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    q = deque([1,2,3])\n    while q:\n        if len(q) == 1:\n            s = q.popleft()\n            break\n        else:\n            s = q.popleft()\n            q.append(s+1)\n            q.append(s-1)\n            q.append(s+2)\n            q.append(s-2)\n    return str(q.pop())",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 4708,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    X = int(stdin.split()[1])\n    Y = int(stdin.split()[2])\n    \n    if N == 1:\n        return str(X * Y)\n    \n    elif K == 1:\n        return str(X * Y)\n    \n    elif K == K + 1:\n        return str(X * (K+1))\n    \n    else:\n        return str(K * X * Y)\n",
        "test": "assert solution(\"1 2 4\") == \"0\"",
        "num_ids": 2467,
        "indeed": false
    },
    {
        "number": 4709,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    sum = 0\n    n = len(s)\n    for i in range(n):\n        if s[i] == '+':\n            sum += int(s[i])\n        elif s[i] == '-':\n            sum -= int(s[i])\n    return str(sum)\n",
        "test": "assert solution(\"\") == \"0\"",
        "num_ids": 2292,
        "indeed": false
    },
    {
        "number": 4710,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    Smeke = int(stdin)\n    if Smeke <= 1200:\n        return 'ABC'\n    else:\n        return 'ARC'\n",
        "test": "assert solution(123) == \"ABC\"",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 4711,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int,stdin.split())\n    if a > b and a > c:\n        return str(a)\n    elif b > a and b > c:\n        return str(b)\n    elif c > a and c > b:\n        return str(c)",
        "test": "assert solution(inp) == '1300'",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 4712,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    P = 0\n    N = 0\n    T = 0\n    \n    for i in range(len(stdin)):\n        if stdin[i] == '#':\n            N += 1\n        elif stdin[i] == 'a':\n            P += 1\n        elif stdin[i] == 'c':\n            T += 1\n    \n    if N > P:\n        return \"##\"\n    elif N == P:\n        return \"##\"\n    else:\n        if T < 3:\n            return \"#\"\n        elif T == 3:\n            return \"#\"\n        else:\n            return \"##\"\n",
        "test": "assert solution(\"2 2\") == \"##\"",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 4713,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    x = 0\n    for i in range(N):\n        if S[i] == \"I\":\n            x += 1\n    print(x)\n    return str(x)",
        "test": "assert solution(n,s) == 5",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 4714,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n  \n  #A palindrome number is a number which reads the same forward and backward.\n  #Convert the number to its base 10 representation.\n  number = int(stdin)\n  \n  def palindromic(number):\n    reversedNumber = str(number)[::-1]\n    \n    if reversedNumber == number:\n      return True\n    return False\n  \n  #Checking each pair of numbers.\n  for a in range(2, int(len(stdin)**0.5)+1):\n    for b in range(a, len(stdin), a):\n      if palindromic(int(stdin[a:b+1])) and palindromic(int(stdin[b:b+a+1])):\n        return str(a*b*(b+1))\n    \n  return '0'\n",
        "test": "assert solution('12345') == '0'",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 4715,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    paint_cans = set()\n    for i in stdin:\n        paint_cans.add(i.split(' ')[0])\n    return len(paint_cans)",
        "test": "assert solution('1 2 3') == '3'",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 4716,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    l_list = list(map(int, stdin.split()))\n    l_list.sort()\n    for k in range(K):\n        l_list[k+1] += l_list[k]\n    l_list = list(map(int, str(l_list[0])))\n    return str(l_list[0])\n\n-----Sample Output-----\n3\n0\n\n------Sample Input-----\n5 3\n3 3 3 3 3 3\n\n-----Sample Output-----\n8\n\ntips:\n\n1:\n13:\n14:\n15:\n16:\n17:\n18:\n19:\n20:\n21:\n22:\n23:\n24:\n25:\n26:\n27:\n28:\n29:\n30:\n31:\n32:\n33:\n34:\n35:\n36:\n37:\n38:\n39:\n40:\n41:\n42:\n43:\n44:\n45:\n46:\n47:\n48:\n49:\n50:\n51:\n52:\n\ntips:\n\n1:\n13:\n14:\n15:\n16:\n17:\n18:\n19:\n20:\n21:\n22:\n23:\n24:\n25:\n26:\n27:\n28:\n29:\n30:\n31:\n32:\n33:\n34:\n35:\n36:\n37:\n38:\n39:\n40:\n41:\n42:\n43:\n44:\n45:\n46:\n47:\n48:\n49:\n50:\n51:\n52:\n53:\n54:\n55:\n56:\n\ntips:\n\n1:\n13:\n14:\n15:\n16:\n17:\n18:\n19:\n20:\n21:\n22:\n23:\n24:\n25:\n26:\n27:\n28:\n29:\n30:\n31:\n32:\n33:\n34:\n35:\n36:\n37:\n38:\n39:\n40:\n41:\n42:\n43:\n44:\n45:\n46:\n47:\n48:\n49:\n50:\n51:\n52:\n53:\n54:\n\ntips:\n\n1:\n13:\n14:\n15:\n16:\n17:\n18:\n19:\n20:\n21:\n22:\n23:\n24:\n25:\n26:\n27:\n28:\n29:\n30:\n31:\n32:\n33:\n34:\n35:\n36:\n37:\n38:\n39:\n40:\n41:\n42:\n43:\n44:\n45:\n46:\n47:\n48:\n49:\n50:\n51:\n52:\n53:\n54:\n55:\n56:\n\ntips:\n\n1:\n13:\n14:\n15:\n16:\n17:\n18:\n19:\n20:\n21:\n22:\n23:\n24:\n25:\n26:\n27:\n28:\n29:\n30:\n31:\n32:\n33:\n34:\n35:\n36:\n37:\n38:\n39:\n40:\n41:\n42:\n43:\n44:\n45:\n46:\n47:\n48:\n49:\n50:\n51:\n52:\n53:\n54:\n55:\n56:\n57:\n58:\n59:\n60:\n61:\n62:\n63:\n64:\n65:\n66:\n67:\n68:\n69:\n70:\n71:\n72:\n73:\n74:\n75:\n76:\n77:\n78:\n79:\n80:\n81:\n82:\n83:\n84:\n85:\n86:\n87:\n88:\n89:\n90:\n91:\n92:\n93:\n94:\n95:\n96:\n97:\n98:\n99:\n100:\n101:\n102:\n103:\n104:\n105:\n106:\n107:\n108:\n109:\n110:\n111:\n112:\n113:\n114:\n115:\n116:\n117:\n118:\n119:\n120:\n121:\n122:\n123:\n124:\n125:\n126:\n127:\n128:\n129:\n130:\n131:\n132:\n133:\n134:\n135:\n136:\n137:\n138:\n139:\n140:\n141:\n142:\n143:\n144:\n145:\n146:\n147:\n148:\n149:\n150:\n151:\n152:\n153:\n154:\n155:\n156:\n157:\n158:\n159:\n160:\n161:\n162:\n163:\n164:\n165:\n166:\n167:\n168:\n169:\n170:\n171:\n172:\n173:\n174:\n175:\n176:\n177:\n178:\n179:\n180:\n181:\n182:\n183:\n184:\n185:\n186:\n187:\n188:\n189:\n190:\n191:\n192:\n193:\n194:\n195:\n196:\n197:\n198:\n199:\n200:\n201:\n202:\n203:\n204:\n205:\n206:\n207:\n208:\n209:\n210:\n211:\n212:\n213:\n214:\n215:\n216:\n217:\n218:\n219:\n220:\n221:\n222:\n223:\n224:\n225:\n226:\n227:\n228:\n229:\n230:\n231:\n232:\n233:\n234:\n235:\n236:\n237:\n238:\n239:\n240:\n241:\n242:\n243:\n244:\n245:\n246:\n247:\n248:\n249:\n250:\n251:\n252:\n253:\n254:\n255:\n256:\n257:\n258:\n259:\n260:\n261:\n262:\n263:\n264:\n265:\n266:\n267:\n268:\n269:\n270:\n271:\n272:\n273:\n274:\n275:\n276:\n277:\n278:\n279:\n280:\n281:\n282:\n283:\n284:\n285:\n286:\n287:\n288:\n289:\n290:\n291:\n292:\n293:\n294:\n295:\n296:\n297:\n298:\n299:\n300:\n301:\n302:\n303:\n304:\n305:\n306:\n307:\n308:\n309:\n310:\n311:\n312:\n313:\n314:\n315:\n316:\n317:\n318:\n319:\n320:\n321:\n322:\n323:\n324:\n325:\n326:\n327:\n328:\n329:\n330:\n331:\n332:\n333:\n334:\n335:\n336:\n337:\n338:\n339:\n340:\n341:\n342:\n343:\n344:\n345:\n346:\n347:\n348:\n349:\n350:\n351:\n352:\n353:\n354:\n355:\n356:\n357:\n358:\n359:\n360:\n361:\n362:\n363:\n364:\n365:\n366:\n367:\n368:\n369:\n370:\n371:\n372:\n373:\n374:\n375:\n376:\n377:\n378:\n379:\n380:\n381:\n382:\n383:\n384:\n385:\n386:\n387:\n388:\n389:\n390:\n391:\n392:\n393:\n394:\n",
        "test": "assert solution(",
        "num_ids": 2383,
        "indeed": false
    },
    {
        "number": 4717,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    pass\n-----Constraints-----\n - 1 \\leq x \\leq 1000\n - 1 \\leq a \\leq 1000\n - 1 \\leq b \\leq 1000\n - x, a and b are pairwise distinct.\n - The distances between Snuke's residence and stores A and B are different.\n'''",
        "test": "assert solution(input()) == \"A\"",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 4718,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(stdin.split(\"/\")[0]), list(stdin.split(\"/\")[1])\n    c = ''.join(a[:4]) + '/' + str(int(a[4:8]) - 1) + '/' + str(int(a[8:10]) - 1) + '/' + str(int(a[10:14]) - 1)\n    return c[:4] + c[4:8] + c[8:10] + c[10:14]\n",
        "test": "assert solution(",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 4719,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  s = list(stdin.strip().split(\"\\n\"))\n  answer = \"\"\n  for i in range(n):\n    for j in range(i+1, n):\n      if len(set(s[i]).intersection(set(s[j]))) == len(set(s[i]).intersection(set(s[j]))):\n        answer = s[j]\n        break\n  return answer\n\n-----Sample Output-----\ncbaa\ndaacc\nacacac\n\nn = 3\ns = [\"cbaa\", \"daacc\", \"acacac\"]\n\nanswer = \"cbaa\"\n\ns = \"cbaa\"\n\ns = \"acacac\"\n\ns = \"aaaaaaaa\"\n",
        "test": "assert solution('abc') == 'abc'",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 4720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    people = stdin.split(\"\\n\")\n    N = int(people[0])\n    l_i = int(people[1].split(\":\")[0])\n    r_i = int(people[1].split(\":\")[1])\n    s = (l_i + r_i) // 2\n    answer = 0\n    group_size = s * N\n    while group_size > 0:\n        group_size -= 1\n        s += 1\n        answer += 1\n    return str(answer)\n\nprint(solution(input()))\n\ndef",
        "test": "assert solution('N 1 100000') == 'J'",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 4721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    blocks = []\n    for _ in range(n):\n        blocks.append(list(map(int, stdin.split())))\n    area = 0\n    visited = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if not visited[i][j] and blocks[i][j] == 1:\n                area += 1\n                visited[i][j] = 1\n                for x in range(i, n):\n                    for y in range(j, m):\n                        if (blocks[x][y] == 1 and not visited[x][y]):\n                            visited[x][y] = 1\n                            blocks[x][y] = area\n    return str(area)\n'''\n\ndef",
        "test": "assert solution([\"1\",\"0\",\"1\",\"2\"]) == \"2\"",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 4722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n  b = []\n  d = {}\n  for i in range(2, 1000):\n    if i not in d:\n      d[i] = []\n    for j in range(1, 1000):\n      if i*j not in d:\n        d[i*j] = []\n      d[i*j].append(i)\n  for i in range(1, 1000):\n    b.append(i)\n  a = 1\n  while a <= 100:\n    if len(b) > a:\n      b = b[:a]\n    if len(d) > a:\n      d = d[:a]\n    if len(d) > a and a*len(b) == sum(d.values()):\n      print(a)\n      return\n    for i in range(1, 1000):\n      if a*i in d:\n        b.append(a*i)\n      elif a*i in d and len(d[a*i]) == len(b):\n        print(a)\n        return\n      elif a*i not in d and a*i in d:\n        d = d[a*i]\n      elif a*i not in d and a*i not in d:\n        d = d.get(a*i, [])\n    a += 1\n  print(f\"Impossible\")\n  return\n",
        "test": "assert solution(stdin) == \"Impossible\"",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 4723,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n <= 2:\n        return stdin[0]\n    elif n == 2:\n        return stdin[0] + stdin[1]\n    else:\n        L = [c for c in stdin]\n        S = Sorted(L, key = lambda x: int(x[:-1]))\n        T = Sorted(L, key = lambda x: int(x[:-1]))\n        a = []\n        for t in T:\n            c = 0\n            while c < len(L):\n                if int(t[-1])!= L[c][0]:\n                    break\n                c += 1\n            a.append(L[c][0] + t[-1])\n        a.sort()\n        c = 0\n        while c < len(L):\n            if int(L[c][-1])!= a[c]:\n                break\n            c += 1\n        return a[c]\n",
        "test": "assert solution(\"a\") == \"a\"",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 4724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    k = int(stdin[1])\n    sum = 0\n    # print(n, k)\n    for i in range(n):\n        sum += int(stdin[i+2])\n    sum = sum/n\n    sum = int(sum)\n    # print(sum)\n    if sum > k:\n        answer = sum-k\n    elif sum < k:\n        answer = k - (sum-k)\n    else:\n        answer = k\n    return str(answer)\n\nprint(solution(input()))",
        "test": "assert solution(\"2\") == \"1\"",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 4725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    s = input()\n    s = s.replace('a', 'A')\n    s = s.replace('b', 'B')\n    s = s.replace('c', 'C')\n    s = s.replace('d', 'D')\n    s = s.replace('e', 'E')\n    s = s.replace('f', 'F')\n    s = s.replace('g', 'G')\n    s = s.replace('h', 'H')\n    s = s.replace('i', 'I')\n    s = s.replace('j', 'J')\n    s = s.replace('k', 'K')\n    s = s.replace('l', 'L')\n    s = s.replace('m', 'M')\n    s = s.replace('n', 'N')\n    s = s.replace('o', 'O')\n    s = s.replace('p', 'P')\n    s = s.replace('q', 'Q')\n    s = s.replace('r', 'R')\n    s = s.replace('s', 'S')\n    s = s.replace('t', 'T')\n    s = s.replace('u', 'U')\n    s = s.replace('v', 'V')\n    s = s.replace('w', 'W')\n    s = s.replace('x', 'X')\n    s = s.replace('y', 'Y')\n    s = s.replace('z', 'Z')\n    return int(s)\n\ndef",
        "test": "assert solution(",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 4726,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    return 'TLE'",
        "test": "assert solution(\"100000000 50 3\") == \"TLE\"",
        "num_ids": 2495,
        "indeed": false
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    dx = [1, -1, 0, 0]\n    dy = [0, 0, 1, -1]\n    grid = [[0 for _ in range(n)] for _ in range(n)]\n    for _ in range(s):\n        y, x = map(int, input().split())\n        grid[y][x] = 1\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    for d in range(4):\n                        tx, ty = i + dx[d], j + dy[d]\n                        if 0 <= tx < n and 0 <= ty < n and grid[tx][ty] == 1:\n                            grid[tx][ty] = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 2:\n                grid[i][j] = 0\n    answer = []\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                temp = [i, j]\n                while grid[temp[0]][temp[1]] == 0:\n                    temp[0], temp[1] = temp[1], temp[0]\n                answer.append(temp[1] + 1)\n                grid[temp[0]][temp[1]] = 2\n    return''.join(map(str, answer))\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.dx = [1, -1, 0, 0]\n        self.dy = [0, 0, 1, -1]\n    \n    def move(self, x, y, direction):\n        if direction == 0:\n            if y > 0:\n                y = y - 1\n            elif y < n - 1:\n                y = y + 1\n            if x > 0:\n                x = x - 1\n            elif x < n - 1:\n                x = x + 1\n        else:\n            if y < 0:\n                y = y + 1\n            elif y > n - 1:\n                y = y - 1\n            if x > 0:\n                x = x - 1\n            elif x < n - 1:\n                x = x + 1\n        \n        return (y, x)\n    \n    def merge(self, x, y, direction):\n        if direction == 0:\n            if y > 0:\n                y = y - 1\n            elif y < n - 1:\n                y = y + 1\n            if x > 0:\n                x = x - 1\n            elif x < n - 1:\n                x = x + 1\n        else:\n            if y < 0:\n                y = y + 1\n            elif y > n - 1:\n                y = y - 1\n            if x > 0:\n                x = x - 1\n            elif x < n - 1:\n                x = x + 1\n        \n        return (y, x)\n    \n    def legalMoves(self, x, y):\n        moves = []\n        if x > 0 and y > 0:\n            for d in range(4):\n                if self.dx[d] * 2 <= x and self.dx[d] * 2 <= y:\n                    temp = self.move(x, y, d)\n                    if temp[1]!= y:\n                        moves.append(temp)\n        if x > 0:\n            for d in range(4):\n                if self.dx[d] * 2 <= x and self.dx[d] * 2 <= y:\n                    temp = self.move(x, y, d)\n                    if temp[0]!= x:\n                        moves.append(temp)\n        if y > 0:\n            for d in range(4):\n                if self.dx[d] * 2 <= x and self.dx[d] * 2 <= y:\n                    temp = self.move(x, y, d)\n                    if temp[1]!= y:\n                        moves.append(temp)\n        if y < n - 1:\n            for d in range(4):\n                if self.dx[d] * 2 <= x and self.dx[d] * 2 <= y:\n                    temp = self.move(x, y, d)\n                    if temp[0]!= x:\n                        moves.append(temp)\n        if x < n - 1:\n            for d in range(4):\n                if self.dx[d] * 2 <= x and self.dx[d] * 2 <= y:\n                    temp = self.move(x, y, d)\n                    if temp[1]!= y:\n                        moves.append(temp)\n        return moves\n    \n    def moveAround(self, x, y, direction):\n        if direction == 0:\n            if y > 0:\n                y = y - 1\n            elif y < n - 1:\n                y = y + 1\n            if x > 0:\n                x = x - 1\n            elif x < n - 1:\n                x = x + 1\n        else:\n            if y < 0:\n                y = y + 1\n            elif y > n - 1:\n                y = y - 1\n            if x > 0:\n                x = x - 1\n            elif x < n - 1:\n                x = x + 1\n        \n        return (y, x)\n    \n    def mergeAround(self, x, y, direction):\n        if direction == 0:\n            if y > 0:\n                y = y - 1\n            elif y < n - 1:\n                y = y + 1\n            ",
        "test": "assert solution(stdin) == '4 0 0 0', \"solution: wrong result\"",
        "num_ids": 3730,
        "indeed": false
    },
    {
        "number": 4728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_main(stdin))\ndef",
        "test": "assert solution(stdin) == '12'",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 4729,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    P, S = map(int, stdin.split())\n    if (S * (S - 1) >= P):\n        return 'FAIL'\n    if (S + P >= 10 * P):\n        return 'FAIL'\n    if (P % 3 == 0):\n        return 'FAIL'\n    return 'PASS'\n",
        "test": "assert solution(\"ABCHAPPYBIRTHDAYTRAGICBIRTHDAYCACEY\") == \"FAIL\"",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 4730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    opening_delimiters = []\n    closing_delimiters = []\n    \n    \n    for line in stdin:\n        \n        if line[0] == '(':\n            closing_delimiters.append(line)\n        else:\n            if len(opening_delimiters)!= 0:\n                if opening_delimiters[0][0]!= '(' and closing_delimiters[0][0]!= '(' and opening_delimiters[0][0]!= '[' and closing_delimiters[0][0]!= '[' and closing_delimiters[0][0]!= '(':\n                    closing_delimiters.pop(0)\n                    if closing_delimiters == []:\n                        opening_delimiters.pop(0)\n                elif closing_delimiters[0][0] == '(':\n                    closing_delimiters.pop(0)\n            else:\n                opening_delimiters.append(line)\n    \n    if len(closing_delimiters)!= 0:\n        if closing_delimiters[0][0]!= '(' and closing_delimiters[0][0]!= '[' and closing_delimiters[0][0]!= '(' and closing_delimiters[0][0]!= '[' and closing_delimiters[0][0]!= ')':\n            closing_delimiters.pop(0)\n            if closing_delimiters == []:\n                opening_delimiters.pop(0)\n        elif closing_delimiters[0][0] == '(':\n            closing_delimiters.pop(0)\n    \n    if len(opening_delimiters)!= 0:\n        if opening_delimiters[0][0]!= '(' and opening_delimiters[0][0]!= '[' and opening_delimiters[0][0]!= ')' and opening_delimiters[0][0]!= ']' and opening_delimiters[0][0]!= '{' and opening_delimiters[0][0]!= '}':\n            opening_delimiters.pop(0)\n            if opening_delimiters == []:\n                closing_delimiters.pop(0)\n        elif opening_delimiters[0][0] == '(':\n            opening_delimiters.pop(0)\n    \n    if len(opening_delimiters)!= 0:\n        if opening_delimiters[0][0]!= '(' and opening_delimiters[0][0]!= '[' and opening_delimiters[0][0]!= ')' and opening_delimiters[0][0]!= ']' and opening_delimiters[0][0]!= '{' and opening_delimiters[0][0]!= '}':\n            opening_delimiters.pop(0)\n            if opening_delimiters == []:\n                closing_delimiters.pop(0)\n    \n    for del_i in range(0,len(closing_delimiters)):\n        if closing_delimiters[del_i][0] == '(' and closing_delimiters[del_i][0] == '[' and closing_delimiters[del_i][0] == ')' and closing_delimiters[del_i][0] == '{':\n            opening_delimiters[del_i] = opening_delimiters[del_i] + \")\"\n        elif closing_delimiters[del_i][0] == '(' and closing_delimiters[del_i][0] == '[' and closing_delimiters[del_i][0] == ')':\n            opening_delimiters[del_i] = opening_delimiters[del_i] + \")\"\n    \n    for del_i in range(0,len(closing_delimiters)):\n        if closing_delimiters[del_i][0] == '(' and closing_delimiters[del_i][0] == '[' and closing_delimiters[del_i][0] == ')' and closing_delimiters[del_i][0] == '{':\n            closing_delimiters[del_i] = closing_delimiters[del_i] + \")\"\n        elif closing_delimiters[del_i][0] == '(' and closing_delimiters[del_i][0] == '[' and closing_delimiters[del_i][0] == ')':\n            closing_delimiters[del_i] = closing_delimiters[del_i] + \")\"\n    \n    if len(opening_delimiters)!= 0:\n        del_index = opening_delimiters.index('(')\n        del_index2 = opening_delimiters.index('[')\n        if del_index == del_index2:\n            del_index += 1\n        del_index += 1\n        del_index2 += 1\n        del_i = del_index\n        \n        while del_i < len(opening_delimiters):\n            if del_i == del_index:\n                if opening_delimiters[del_index] == '(':\n                    del_i += 1\n                elif opening_delimiters[del_index] == '[':\n                    del_i += 1\n                elif opening_delimiters[del_index] == ')':\n                    del_i += 1\n                elif opening_delimiters[del_index] == ']':\n                    del_i += 1\n                elif opening_delimiters[del_index] == '{':\n                    del_i += 1\n                elif opening_delimiters[del_index] == '}':\n                    del_i += 1\n            else:\n                if opening_delimiters[del_index] == '(':\n                    del_i += 1\n                elif opening_delimiters[del_index] == '[':\n                    del_i += 1\n                elif opening_delimiters[del_index] == ')':\n                    del_i += 1\n                elif opening_delimiters[del_index] == ']':\n                    del_i += 1\n                elif opening_delimiters[del_index] == '{':\n                    del",
        "test": "assert solution(\"[]{()}\") == \"ok so far\"",
        "num_ids": 2435,
        "indeed": false
    },
    {
        "number": 4731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, len(stdin)):\n        if stdin[i-1] not in ('a', 'e', 'i', 'o', 'u'):\n            return 'Player {0} lost'.format(i-1)\n    return 'Fair Game'\n",
        "test": "assert solution('5') == 'Fair Game', 'Fail'",
        "num_ids": 2271,
        "indeed": false
    },
    {
        "number": 4732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[0])\n    B = int(stdin[1])\n    result = str(A + B)\n    return result\n\ndef",
        "test": "assert solution('10*10*10') == '100000'",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 4733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(map(int,stdin.split()))-1)\n'''\ndef",
        "test": "assert solution(inp) == \"3\"",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 4734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(2, len(stdin)):\n        if stdin[i] == 'e':\n            if i - 2 >= 0:\n                stdin = stdin[:i - 2] + 'x' + stdin[i + 2:]\n        elif stdin[i] == 'p':\n            if i - 1 >= 0:\n                stdin = stdin[:i - 1] + 'x' + stdin[i + 1:]\n        else:\n            stdin = stdin[:i] + 'x' + stdin[i:]\n    return stdin\n\n-----Examples-----\nprint(solution(\"menolaxios mox\"))\nprint(solution(\"alemaxe maxos\"))\nprint(solution(\"pamoli toxes\"))\nprint(solution(\"alemaxexmaxos\"))\n",
        "test": "assert solution(\"pamoli toxes\") == \"pamolextoxes\"",
        "num_ids": 2299,
        "indeed": false
    },
    {
        "number": 4735,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n\n    n = int(stdin.strip())\n\n    dic = defaultdict(list)\n    for i in range(n):\n        dic[i + 1].append(i + 1)\n\n    for key, value in dic.items():\n        for i in value:\n            if i % 4!= 0:\n                continue\n\n            # 3 : 1, 4 : 2, 5 : 3, 6 : 4\n            dic[i] = sorted(dic[i])\n\n    for key, value in dic.items():\n        if key % 4!= 0:\n            continue\n\n        # 4 : 1, 5 : 2, 6 : 3\n        dic[key] = sorted(dic[key])\n\n    for i in dic:\n        if i % 4!= 0:\n            continue\n        if i == 26:\n            return 'yes'\n        if i % 4 == 0:\n            return 'no'\n\n    return 'no'",
        "test": "assert solution(\"2020\") == \"no\"",
        "num_ids": 1106,
        "indeed": false
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    #print(N, K)\n    if N == K:\n        return str(K)\n    if K - N <= 0:\n        return 0\n    N_set = set(range(1, K+1))\n    for num in range(N, K+1):\n        #print(num)\n        N_set = N_set - set(range(num, num+10))\n        #print(N_set)\n    N_set = list(N_set)\n    N_set.sort()\n    return str(len(N_set))\n\ndef",
        "test": "assert solution(stdin) == 1820000",
        "num_ids": 2565,
        "indeed": false
    },
    {
        "number": 4737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N, p = map(int, stdin.split())\n    infos = [list(map(int, input().split())) for _ in range(N)]\n    infos.sort()\n    answer = 0\n    for i in range(N-1):\n        current = infos[i][p-1]\n        next = infos[i+1][p-1]\n        if next <= current:\n            answer += next-current\n        else:\n            answer += current-next\n    return str(answer)\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == '0 0'",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 4738,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    k = n\n    answer = 0\n    for i in range(0, n - 1):\n        for j in range(i + 1, n - 1):\n            if stdin[i] == stdin[j]:\n                if stdin[j] == stdin[j + 1]:\n                    answer += 1\n            else:\n                break\n    return str(answer)\n",
        "test": "assert solution(\"bbbabbbab\") == \"2\"",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 4739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    M,N = map(int, stdin.split())\n    times = list(map(int, stdin.split()))\n    distances = [[0] * (N+1) for _ in range(M+1)]\n    for i in range(len(times)):\n        times[i] = abs(times[i]-1)\n    for i in range(1,M+1):\n        distances[i][0] = 0\n    for i in range(1,N+1):\n        distances[0][i] = 0\n    for i in range(1,len(times)):\n        for j in range(1,len(times)):\n            if times[i] < times[j]:\n                distances[i][j] = distances[i][j-1]\n            else:\n                distances[i][j] = distances[i-1][j]\n    print(sum(distances[M][N]))\n    return str(sum(distances[M][N]))\n\"\"\"\ndef",
        "test": "assert solution(input()) == '0'",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 4740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 7 == 0:\n        return \"0\"\n    elif n % 7 == 1:\n        return \"1\"\n    elif n % 7 == 2:\n        return \"2\"\n    elif n % 7 == 3:\n        return \"3\"\n    elif n % 7 == 4:\n        return \"4\"\n    elif n % 7 == 5:\n        return \"5\"\n    elif n % 7 == 6:\n        return \"6\"\n    else:\n        return \"0\"\n\ndef",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 2115,
        "indeed": false
    },
    {
        "number": 4741,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n,m = stdin.split()\n    n,m = int(n),int(m)\n    a,b = 0,0\n    for i in range(int(n)):\n        a,b = b,a+int(m)\n    \n    if b==0:\n        print('-40/1')\n    else:\n        print(b//abs(b-a))\n    return\n\"\"\"",
        "test": "assert solution(stdin) == '0/1'",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 4742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    string1 = str(stdin.strip())\n    string2 = str(stdin.strip())\n    if n%2==1:\n        string1,string2 = string2,string1\n    for i in range(0,n,2):\n        string1 = string1[-1]+string1[-2]\n    for i in range(0,n,2):\n        string2 = string2[::-1]+string2[::-2]\n    if string2 == string1:\n        return 'Transposition'\n    if string2[0]==string1[0] or string1[-1]==string1[-2] or string2[0]==string2[-1] or string2[-2]==string2[-3]:\n        return 'Retrograde'\n    return 'Inversion'\n",
        "test": "assert solution(stdin) == \"Nonsense\"",
        "num_ids": 2486,
        "indeed": false
    },
    {
        "number": 4743,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    words = [line.strip().upper() for line in stdin.splitlines()]\n    \n    word = None\n    for word in words:\n        word = word.strip().upper()\n        if word.startswith(\"H\"):\n            word = word[2:]\n        if word == \"Dach\":\n            word = word[3:]\n        elif word[0].isupper():\n            word = word[1:]\n        elif word[1].isupper():\n            word = word[0].upper() + word[1:]\n        \n        if word:\n            if word.endswith(\"K\"):\n                word = word[:-1] + \"ah\"\n            elif word[0].isupper():\n                word = word[1:]\n        \n    return word",
        "test": "assert solution(\"I love ba-na-na\"), \"I love ba-na-na\"",
        "num_ids": 6680,
        "indeed": false
    },
    {
        "number": 4744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = [[0]*n for _ in range(n)]\n    for i in range(n):\n        f[i][i] = 1\n        for j in range(i+1, n):\n            f[i][j] = f[i][j-1] * 3 + f[i][j]\n    # f = [\n    #     [0] + [1] * n,\n    #     [0] + [0] * n,\n    #     [0] + [0] * n,\n    #     [0] + [0] * n,\n    #     [0] + [0] * n,\n    #     [0] + [0] * n,\n    #     [0] + [0] * n,\n    #     [0] + [0] * n\n    # ]\n    # print(f)\n    print(f[0][0]*f[0][1]*f[0][2]*f[0][3])\n    return '{:.5f}'.format(f[0][0]*f[0][1]*f[0][2]*f[0][3])\n",
        "test": "assert solution(3) == \"14\"",
        "num_ids": 2596,
        "indeed": false
    },
    {
        "number": 4745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, X = list(map(int, stdin.split()))\n    prices = [int(stdin[i]) for i in range(n)]\n    if sum(prices) <= X: return '0'\n    if sum(prices) > X:\n        return str(n - (prices.index(max(prices)) + 1))\n    return str(n - (prices.index(max(prices)) + 1))",
        "test": "assert solution([\"1 3 1 7\"]) == \"4\"",
        "num_ids": 2201,
        "indeed": false
    },
    {
        "number": 4746,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    C, n = map(int, stdin.split())\n    res = []\n    for i in range(n):\n        res.append(int(stdin.split()[i]))\n    if n == 1:\n        return str(0)\n    if sum(res) < C:\n        return 'impossible'\n    return 'possible'\n",
        "test": "assert solution(\"1 2\") == \"possible\"",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 4747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    dice_num = int(stdin.strip())\n    dice_num_sorted = list(map(int, sorted(str(dice_num))))\n    k = int(stdin.strip())\n    return str(sum(dice_num_sorted[:k]))",
        "test": "assert solution(stdin) == '6'",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 4748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    for i in range(int(stdin)):\n        h, n = map(int, input().split())\n        answer.append(h + 2*n + 4*n*2*i)\n    return str(max(answer))\n",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 2092,
        "indeed": false
    },
    {
        "number": 4749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    arr = [list(i) for i in stdin.split()]\n    black_num = 0\n    white_num = 0\n    for row in range(len(arr)):\n        for col in range(len(arr)):\n            if arr[row][col] == 'B':\n                black_num += 1\n            elif arr[row][col] == 'W':\n                white_num += 1\n    if black_num == white_num:\n        return '1'\n    return '0'\n\n'''\n",
        "test": "assert solution(input()) == \"1\"",
        "num_ids": 2741,
        "indeed": false
    },
    {
        "number": 4750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    q = int(stdin.strip().split(' ')[0])\n    for i in range(q):\n        l, r = map(int, stdin.strip().split(' ')[1::2])\n        answer.append(l)\n        answer.append(r)\n    return '\\n'.join(map(str, answer))",
        "test": "assert solution(stdin) == \"2 3 5\"",
        "num_ids": 5055,
        "indeed": false
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    import collections\n    \n    li = [int(i) for i in stdin.split()]\n    head = li[0]\n    pos = -1\n    \n    if head == -1:\n        return \"no cycle\"\n    \n    for i in range(1, len(li)):\n        if li[i]!= head:\n            if pos == -1:\n                pos = i\n            elif li[pos] == li[i]:\n                return \"no cycle\"\n            else:\n                return \"no cycle\"\n    \n    return \"no cycle\"\n",
        "test": "assert solution(stdin) == \"false\" or solution(stdin) == \"true\"",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 4752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    for i in range(len(stdin)):\n        for j in range(i, len(stdin)):\n            temp = stdin[i:j+1]\n            if temp == stdin[i:j+1] and temp[0]!= temp[1]:\n                answer.append([i,j])\n    return str(answer)",
        "test": "assert solution('8 10 8') == '1 2'",
        "num_ids": 1404,
        "indeed": false
    },
    {
        "number": 4753,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    def is_same(a: int, b: int) -> bool:\n        if a <= 0:\n            return False\n        elif b <= 0:\n            return True\n        else:\n            return a + b == a * b\n\n    N = int(stdin)\n    if N == 1:\n        return '1'\n    if N == 2:\n        return '2'\n    if N == 3:\n        return '3'\n\n    intersection = 0\n    count = 0\n    for i in range(N):\n        a = i + 1\n        for j in range(N - i):\n            b = j + 1\n            if is_same(a, b):\n                intersection += 1\n    count = intersection\n    return str(count)\n",
        "test": "assert solution(\"6\") == \"1\"",
        "num_ids": 1442,
        "indeed": false
    },
    {
        "number": 4754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    aux_piles = [[]]\n    for i in range(1,n+1):\n        a = list(map(int, input().split()))\n        aux_piles.append(a)\n    aux_piles.sort()\n    max_len = 0\n    for i in range(n):\n        nums = 0\n        for j in range(n):\n            if aux_piles[i][j] == aux_piles[i][j+1]:\n                nums += 1\n        if nums < 2:\n            max_len = i\n    if max_len == 0:\n        return \"impossible\"\n    return str(len(aux_piles[i])-1-max_len)\n\nSample Input 3:\n4\n10 10 10 10 10 10\nSample Output 3:\n7\n\ndef",
        "test": "assert solution(input()) == \"impossible\"",
        "num_ids": 2379,
        "indeed": false
    },
    {
        "number": 4755,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    answer = -1\n    count = int(stdin[0])\n    n = 1\n    while count > 0:\n        count -= n\n        n += 1\n        n = n % 10\n    if count >= 10:\n        answer = count * 10\n    else:\n        answer = count\n    return answer\n\ndef",
        "test": "assert solution(stdin) == \"192\"",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 4756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    data = []\n    for i in range(n):\n        data.append(list(map(int, input().split())))\n    \n    x = int(input())\n    y = int(input())\n    \n    d = abs(x - y)\n    for i in range(n):\n        for j in range(n):\n            d = min(d, abs(data[j][i] - data[i][j]))\n    \n    print(d)\n    return str(d)\n",
        "test": "assert solution(stdin) == '0.000000'",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    E, N = map(int, stdin.split())\n    \n    for i in range(1, N+1):\n        num_list = stdin.split()\n        for j in range(0, len(num_list), 2):\n            num = int(num_list[j])\n            num_list[j] = '{:0>3d}'.format(num)\n        num_list = list(filter(None, num_list))\n        \n        if len(num_list) == N:\n            num_list = list(map(int, num_list))\n            \n            if sum(num_list) == 1:\n                return ''.join(num_list)\n            else:\n                continue\n    return '1'",
        "test": "assert solution('5 6 6 2 7 8') == '6'",
        "num_ids": 1248,
        "indeed": false
    },
    {
        "number": 4758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    res = set()\n    for i in range(2, int(stdin.strip())+1):\n        res.add(i)\n    return str(len(res))",
        "test": "assert solution('2 2 2') == '8'",
        "num_ids": 1755,
        "indeed": false
    },
    {
        "number": 4759,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    return '%.1f' % (b/a)\n\n-----Constraints-----\n1 <= n <= 10^5\n-10^5 <= stdin[i] <= 10^5\nstdin contains only digits.\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == \"1.6666666666666667\"",
        "num_ids": 1966,
        "indeed": false
    },
    {
        "number": 4760,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    K = int(stdin[::-1])\n    nums = list(map(int, stdin.split()))\n    for i in range(1, N+1):\n        for j in range(i, N+1):\n            if nums[i] * nums[j] > K:\n                return str(i)\n    return str(K)\n\nSample Input 3:\n6\n2 3 6 5 4\n3 4 5 6\nSample Output 3:\n6\n\nSample Input 4:\n4 7 8\nSample Output 4:\n1\n'''\n\ndef",
        "test": "assert solution(input()) == '6'",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 4761,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = []\n    for i in range(1, n+1):\n        x.append(str(i))\n    c = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            c.append(str(i * j))\n    c = set(c)\n    for i in x:\n        for j in c:\n            if i == j:\n                return i\n    return \"0\"\n\nSample Input 3:\n12345 6789\nSample Output 3:\n6\n\"\"\"\n\ndef",
        "test": "assert solution(input()) == 6",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 4762,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        stdin = stdin.replace(str(i+1), str(i))\n    return stdin\n",
        "test": "assert solution(\"0\") == \"0\"",
        "num_ids": 2181,
        "indeed": false
    },
    {
        "number": 4763,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return \"impossible\"\n",
        "test": "assert solution(11) == \"impossible\"",
        "num_ids": 3868,
        "indeed": false
    },
    {
        "number": 4764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    h = int(s[1])\n    v = int(s[2])\n    res = 0\n    if (n % 4) == 0:\n        res = (n ** 2) / 2\n    else:\n        res = (n ** 2 - (n - 1) ** 2) / 2\n    if v % 2!= 0:\n        res = res * 2\n    res += res * (h / 100)\n    if v % 2!= 0:\n        res = res * 2\n    res += res * (v / 100)\n    return str(res)\n",
        "test": "assert solution(\"4 3\") == \"138\", \"Test failed\"",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 4765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    s = []\n    b = []\n    n = int(stdin.split()[0])\n    for i in range(n):\n        s.append(int(stdin.split()[i + 1]))\n    for i in range(n, len(stdin.split())):\n        b.append(int(stdin.split()[i]))\n    answer = int(s[0]) - int(b[0])\n    for i in range(1, n):\n        answer = answer + int(s[i]) - int(b[i])\n    return str(abs(answer))\n",
        "test": "assert solution(input()), \"invalid\"",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 4766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    words = []\n    lines = []\n    for i in range(N):\n        words.append(stdin[i])\n        lines.append(stdin[i + 1:])\n    for i in range(N):\n        if words[i][0] == \"s\":\n            words[i] = \"raise\"\n        elif words[i][0] == \"r\":\n            words[i] = \"raise\"\n        elif words[i][0] == \"l\":\n            words[i] = \"raise\"\n        else:\n            words[i] = words[i][1:]\n    answer = \"\"\n    for i in range(N):\n        answer += words[i] + \" \"\n    return answer\n\"\"\"\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        N = int(stdin)\n        words = []\n        lines = []\n        for i in range(N):\n            words.append(stdin[i])\n            lines.append(stdin[i + 1:])\n        for i in range(N):\n            if words[i][0] == \"s\":\n                words[i] = \"raise\"\n            elif words[i][0] == \"r\":\n                words[i] = \"raise\"\n            elif words[i][0] == \"l\":\n                words[i] = \"raise\"\n            else:\n                words[i] = words[i][1:]\n        answer = \"\"\n        for i in range(N):\n            answer += words[i] + \" \"\n        return answer\n\"\"\"\n",
        "test": "assert solution([\"Simon says\",\"says\",\"raise\",\"hands\",\"raise\",\"hands\"]) == \" raise hands raise right hand\"",
        "num_ids": 1759,
        "indeed": false
    },
    {
        "number": 4767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin[0])\n    v_2 = int(stdin[1])\n    v_3 = int(stdin[2])\n    v_5 = int(stdin[3])\n    v_7 = int(stdin[4])\n    v_11 = int(stdin[5])\n    v_13 = int(stdin[6])\n    v_17 = int(stdin[7])\n    v_19 = int(stdin[8])\n    N = 1\n    while N <= p:\n        N = N + 1\n        v_2 = v_2 + 1\n        v_3 = v_3 + 2\n        v_5 = v_5 + 3\n        v_7 = v_7 + 4\n        v_11 = v_11 + 5\n        v_13 = v_13 + 6\n        v_17 = v_17 + 7\n        v_19 = v_19 + 8\n        N = N + 1\n    return str(v_2) + \" \" + str(v_3) + \" \" + str(v_5) + \" \" + str(v_7) + \" \" + str(v_11) + \" \" + str(v_13) + \" \" + str(v_17) + \" \" + str(v_19)\n",
        "test": "assert solution(input()) == '5'",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    alphabet = list(map(str, stdin.strip().split()))\n    alphabet.sort(key=lambda x: ord(x))\n    tree = ''\n    for i in range(n-k+1):\n        tree += alphabet[i+k-1] + '-'\n    return tree + alphabet[-1]\n",
        "test": "assert solution(inp) == \"3\"",
        "num_ids": 2227,
        "indeed": false
    },
    {
        "number": 4769,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    a=list(stdin.split())\n    st=\"\"\n    for i in a:\n        a=list(i)\n        for j in range(len(a)-1):\n            if a[j]==a[j+1]:\n                a[j]=a[j+1]\n                a[j+1]=0\n            else:\n                break\n        st+=str(a[-1])\n    return st\n",
        "test": "assert solution(\"bbb\"), -1",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 4770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, M = map(int, stdin.split())\n    if N >= M:\n        return \"Dr. Chaz needs $Q$ more piece[s]\"\n    else:\n        return \"Dr. Chaz will have $P$ pieces of chicken left over!\"",
        "test": "assert solution(",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 4771,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    Items = []\n    for _ in range(N):\n        Items.append(list(map(int,stdin.split())))\n    Items.sort(reverse=True)\n    \n    for i in range(len(Items)):\n        if Items[i][0] >= Items[i][1] or Items[i][1] >= Items[i][2]:\n            Items[i].append(Items[i][0] + Items[i][1])\n            Items[i].append(Items[i][2] + Items[i][1])\n            Items[i].append(Items[i][0] + Items[i][2])\n            break\n    \n    answer = 0\n    for i in range(len(Items)):\n        for j in range(len(Items)):\n            if i!= j:\n                if Items[i][0] == Items[j][0] and Items[i][1] == Items[j][1] and Items[i][2] == Items[j][2]:\n                    answer = max(answer, Items[i][0] - Items[j][0] + Items[i][1] - Items[j][1] + Items[i][2] - Items[j][2])\n    return str(answer)\n\nsolution(stdin)",
        "test": "assert solution(\"2 3\") == 0",
        "num_ids": 1276,
        "indeed": false
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin[0])\n    cols = int(stdin[1])\n    grid = []\n    for _ in range(rows):\n        grid.append(list(stdin[2:]))\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \" \"\n            elif grid[i][j] == \"a\":\n                grid[i][j] = \"l\"\n            elif grid[i][j] == \"o\":\n                grid[i][j] = \"#\"\n    for r in grid:\n        r.sort()\n    # print(grid)\n    ans = \"\"\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j]!= \" \":\n                ans += grid[i][j]\n            else:\n                if grid[i][j] == \"l\":\n                    ans += \"#\"\n                else:\n                    ans += \" \"\n    return ans\n\nSample Output 3:\nSample Input:\n6 3\nluka\no#a#\nkula\ni#a#\n",
        "test": "assert solution(\"lucas\") == \"kula\", \"test3\"",
        "num_ids": 4299,
        "indeed": false
    },
    {
        "number": 4773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    print(input_list[0].count('N'))\n    print(input_list[1].count('S'))\n    print(input_list[2].count('E'))\n    print(input_list[3].count('W'))\nsolution(\"NSEW\")\n",
        "test": "assert solution(stdin) == 4",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = list(map(int, list(str(min(a)) + \" \" + str(max(a)))) + list(map(int, list(str(min(a)) + \" \" + str(max(a)) + \" \" + str(min(a)) + \" \" + str(max(a)) + \" \" + str(min(a)) + \" \" + str(max(a))))))\n    c = list(map(int, list(str(min(b)) + \" \" + str(max(b)) + \" \" + str(min(b)) + \" \" + str(max(b)) + \" \" + str(min(b)) + \" \" + str(max(b)) + \" \" + str(min(b)) + \" \" + str(max(b)) + \" \" + str(min(b)) + \" \" + str(max(b)) + \" \" + str(min(b)) + \" \" + str(max(b))))\n    d = list(map(int, list(str(min(c)) + \" \" + str(max(c)) + \" \" + str(min(c)) + \" \" + str(max(c)) + \" \" + str(min(c)) + \" \" + str(max(c)) + \" \" + str(min(c)) + \" \" + str(max(c)) + \" \" + str(min(c)) + \" \" + str(max(c)) + \" \" + str(min(c)) + \" \" + str(max(c)) + \" \" + str(min(c)) + \" \" + str(max(c)) + \" \" + str(min(c)) + \" \" + str(max(c)) + \" \" + str(min(c)) + \" \" + str(max(c)) + \" \" + str(min(c)) + \" \" + str(max(c)) + \" \" + str(min(c))))\n    a = sorted(a, reverse=True)\n    b = sorted(b, reverse=True)\n    c = sorted(c, reverse=True)\n    d = sorted(d, reverse=True)\n    answer = str(a[0]) + \" * \" + str(b[0]) + \" + \" + str(c[0]) + \" * \" + str(d[0])\n    return answer\n",
        "test": "assert solution(stdin) == \"problems ahead\"",
        "num_ids": 1909,
        "indeed": false
    },
    {
        "number": 4775,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a.sort()\n    b = []\n    for i in a:\n        if len(i) == 1:\n            b.append(i)\n        else:\n            b = [i[1:]] + b\n    return '\\n'.join(b)\n",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 4776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    days, free_food = [int(i) for i in stdin.split()]\n    \n    s, t = [], []\n    for _ in range(days):\n        s.append(int(input()))\n    for _ in range(free_food):\n        t.append(int(input()))\n    s.sort()\n    t.sort()\n    \n    days = days // 365 + (days % 365 > 0)\n    \n    return str(days) + \" \" + str(len(set(s) & set(t)) // 2)\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        days, free_food = [int(i) for i in stdin.split()]\n        \n        s, t = [int(i) for i in stdin.split()], []\n        for _ in range(days):\n            s.append(int(input()))\n        for _ in range(free_food):\n            t.append(int(input()))\n        \n        s.sort()\n        t.sort()\n        \n        days = days // 365 + (days % 365 > 0)\n        \n        return str(days) + \" \" + str(len(set(s) & set(t)) // 2)\n",
        "test": "assert solution(stdin) == \"12\"",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 4777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    letters = {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0, 'G': 0, 'H': 0, 'I': 0, 'J': 0, 'K': 0, 'L': 0, 'M': 0, 'N': 0, 'O': 0, 'P': 0, 'Q': 0, 'R': 0, 'S': 0, 'T': 0, 'U': 0, 'V': 0, 'W': 0, 'X': 0, 'Y': 0, 'Z': 0}\n    \n    for i in stdin:\n        letters[i] += 1\n    \n    answer = ''\n    \n    for i in letters.values():\n        answer += str(i)\n    \n    return answer",
        "test": "assert solution([\"a\",\"a\",\"b\",\"a\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\"]) == \"0 1\"",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    P, D = list(map(int, input[0].split()))\n    precincts = []\n    for i in range(1, D + 1):\n        precincts.append(int(input[i].split(' ')[0]))\n        \n    n = len(precincts)\n    all_waste_votes = 0\n    \n    for i in range(1, n):\n        for j in range(0, i):\n            if precincts[i] > precincts[j] and precincts[i] > 0:\n                waste = (precincts[i] - precincts[j]) / precincts[i]\n                precincts[i] = waste\n                all_waste_votes += waste\n            \n    all_waste_votes += (precincts[-1] - precincts[-2]) / n\n    \n    if all_waste_votes > 0:\n        return 'A'\n    elif all_waste_votes < 0:\n        return 'B'\n    elif all_waste_votes == 0:\n        return 'A'\n    else:\n        return 'B'",
        "test": "assert solution('3 100 98') == 'A 1 197'",
        "num_ids": 2716,
        "indeed": false
    },
    {
        "number": 4779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"0\"\n    a = [int(i) for i in str(n) if i!= \"0\"]\n    a.sort(reverse=True)\n    \n    print(\"\".join(map(str, a)))\n    return \"\".join(map(str, a))\n\nSample\nInput\n5\n2\n1\n4\n3\n5\nOutput\n168\nExplanation\nThe maximum value of the given expression is,\nbecause the maximal value of the expression is the sum of all the positive integers,\nplus the sum of the integers:\n2\n+\n+\n+\n+\n5\nThe sum of the positive integers is 10.\nThe sum of the negative integers is 40.\nThe sum of the positive integers is 1 + 2 + 3 + 4 = 10.\nThe sum of the positive integers is 1 + 4 + 5 + 6 = 20.\nThe maximal value of the expression is the sum of all the positive integers,\nplus the sum of the integers:\n10\n+\n+\n+\n+\n+\n5\nExample 2\n2\n1\n1\nInput\n2\n5\n2\nOutput\n6\nExplanation\nThe maximum value of the given expression is,\nbecause the maximal value of the expression is the sum of all the positive integers,\nplus the sum of the integers:\n2\n+\n+\n+\n+\n2\nThe sum of the positive integers is 10 + 2 + 1 = 11.\nThe sum of the negative integers is 40 + 5 = 19.\nThe sum of the positive integers is 1 + 4 + 2 = 22.\nThe sum of the positive integers is 1 + 2 + 3 = 27.\nThe maximal value of the expression is the sum of all the positive integers,\nplus the sum of the integers:\n11\n+\n+\n+\n+\n5\n\"\"\"\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        #result, i = nums[0], 1\n        result, res = nums[0], nums[0]\n        for i in range(1, len(nums)):\n            result = max(result * nums[i], nums[i])\n            res = max(res, result)\n        return res",
        "test": "assert solution(\\\"\\\"\\\"\\\"\\\"",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(i) for i in stdin.split()]\n    answer = ''\n    for _ in range(n):\n        answer += stdin[t+1].upper() + stdin[t+1].lower() + stdin[t+2].upper() + stdin[t+2].lower() +''\n    return answer\n\n-----Constraints-----\n1 <= N_1, N_2 <= 100\n0 <= T <= 50\n\n---CODE---\nN_1, N_2 = int(input()), int(input())\nfor i in range(N_2):\n    answer = ''\n    for j in range(N_1):\n        answer += input().upper() + input().lower() +''\n    print(answer)\n",
        "test": "assert solution([\"ABC\", \"AB\", \"C\", \"A\", \"B\", \"B\", \"B\"]) == \"CDDEF\"",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    from heapq import heappush, heappop\n    from itertools import combinations\n    N, T = map(int, stdin.strip().split())\n    answer = []\n    heap = []\n    for _ in range(N):\n        heappush(heap, (0, _))\n    for _ in range(N, T):\n        answer.append(heappop(heap)[1])\n    answer.sort()\n    heap = [None] * N\n    for i, a in enumerate(answer):\n        heappush(heap, (a, i))\n    right = True\n    wrong = 0\n    for i in range(N):\n        if right:\n            answer.remove(heappop(heap)[1])\n            right = False\n            wrong += 1\n        else:\n            heappush(heap, (heappop(heap)[1], i))\n            right = True\n    return \"\".join(str(answer[i]) for i in range(wrong))",
        "test": "assert solution(stdin) == \"5\"",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 4782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    roads=[]\n    for _ in range(n):\n        roads.append(list(map(int,stdin.split())))\n    ans=''\n    for i in range(n-1):\n        for j in range(n-1):\n            for k in range(n-1):\n                if k<j:\n                    for l in range(j,k):\n                        if l<j:\n                            if roads[j][k]>roads[k][l]:\n                                roads[l][k]=roads[j][k]\n                elif k>j:\n                    for l in range(k,j):\n                        if l<j:\n                            if roads[j][l]>roads[k][l]:\n                                roads[l][j]=roads[j][k]\n                else:\n                    if roads[j][k]>roads[k][j]:\n                        roads[j][k]=roads[j][k]\n    for r in roads:\n        ans=ans+str(r[0])+' '+str(r[1])+' '\n    return ans[:-1]\n",
        "test": "assert solution(inp) == \"22\"",
        "num_ids": 1426,
        "indeed": false
    },
    {
        "number": 4783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    #n = 1\n    #m = 1\n    dp = [0 for _ in range(n)]\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(m):\n            dp[i] = max(dp[i-1], dp[i-1] + 1)\n    for i in range(1, n):\n        for j in range(m):\n            dp[i] = max(dp[i-1], dp[i-1] + 1)\n    return str(dp[n-1])",
        "test": "assert solution(sys.stdin) == 2",
        "num_ids": 1570,
        "indeed": false
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    n = len(x)\n    def divide(x):\n        dividend, divisor = 1, 1\n        for i in range(1, n):\n            dividend += x[i] / (i + 1)\n            divisor *= (i + 1)\n        return divisor\n    y = list(map(divide, x))\n    def is_int(x):\n        try:\n            int(x)\n            return True\n        except:\n            return False\n    for i in range(1, n):\n        if is_int(y[i]):\n            y[i] = int(y[i])\n    return str(sum(y) * (n + 1))\n",
        "test": "assert solution(input()) == \"16\"",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 4785,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    # trivial solution\n    # solution(stdin.strip())\n    '''\n    # solution(stdin.strip())\n    stdin = stdin.strip().lower()\n    idx = 0\n    s = 0\n    for c in stdin:\n        if c == \"s\":\n            s += 1\n        else:\n            idx += 1\n            s -= 1\n            if s == 0:\n                s = idx\n    return \"hiss\" * s if s > 0 else \"no hiss\"\n",
        "test": "assert solution(\"octopuses\") == \"no hiss\"",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 4786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    k = 0\n    for s in stdin:\n        if s =='' or s == '-':\n            k = k + 1\n    return str(k)\n\"\"\"\n\ndef",
        "test": "assert solution(f) == solution(g) == solution(h) == solution(i) == solution(j) == solution(k) == solution(l) == solution(m) == solution(o) == solution(p) == solution(q) == solution(r) == solution(s) == solution(t) == solution(u) == solution(v) == solution(w) == solution(x) == solution(y) == solution(z)",
        "num_ids": 2548,
        "indeed": false
    },
    {
        "number": 4787,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(50):\n        if i%3!=0:\n            print(i)\n    return \"21\"\n",
        "test": "assert solution([\"CGC\", \"CCG\", \"CGC\", \"CCG\", \"CG\"]) == \"21\"",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 4788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    a,b,direction,change,path=0,0,0,0,0\n    for line in stdin:\n        a=int(line.split(\" \")[0])\n        b=int(line.split(\" \")[1])\n        direction=int(line.split(\" \")[2])\n        if direction==0:\n            path+=a\n        else:\n            path-=b\n    if path<=360:\n        change=path\n        path=360-path\n    if change>90:\n        change=90-change\n        if change>0:\n            change=360-change\n    else:\n        change=change\n    return str(change)\n\nprint(solution(\"315 90 180 180\"))\n",
        "test": "assert solution(input()) == '180'",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    \n    N,M=map(int,stdin.split())\n    assert(N<=100)\n    assert(M<=100)\n    \n    def get_perm(x):\n        if x==0:\n            return 'abcdefghijklmnopqrstuvwxyz'\n        perm=get_perm(x-1)\n        return perm[x-1]+perm[x]\n        \n    perm=get_perm(M)\n    \n    result=0\n    for i in range(1,N):\n        result=max(result,perm.count(str(i)))\n    \n    return str(result)\n",
        "test": "assert solution(input()) == '3'",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 4790,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin[0])\n    stones = [None] * n\n    for _ in range(n):\n        stones[0] = stdin[2 * _]\n        stones[-1] = stdin[2 * _ + 1]\n    \n    for i in range(1, n):\n        stones[i] = stones[i - 1] + stones[i]\n    \n    for i in range(n - 2, -1, -1):\n        stones[i] = stones[i + 1] + stones[i]\n    \n    for i in range(n - 2, -1, -1):\n        stones[i] = stones[i + 1] + stones[i]\n    \n    return str(sum(stones) % 10)\n\ndef",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 4179,
        "indeed": false
    },
    {
        "number": 4791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    result = float('inf')\n    for s in stdin.split(' '):\n        try:\n            result = max(result, float(s))\n        except ValueError as e:\n            print('Error: {}'.format(e))\n    return str(result)\n\nSample Input 3:\n1 1 1 2 1\nSample Output 3:\n2.988418021902188\n\nSample Input 4:\n1 2 1 1 2\nSample Output 4:\n3.5\n\n'''\n\ndef",
        "test": "assert solution(stdin) == '1.299038105676658'",
        "num_ids": 1256,
        "indeed": false
    },
    {
        "number": 4792,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin))\n",
        "test": "assert solution(\"rooobert\") == \"robert\"",
        "num_ids": 2077,
        "indeed": false
    },
    {
        "number": 4793,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    v = list(map(int, stdin.split()))\n    p = v.index(min(v))\n    return str(p+1) if p+1<len(v) and v[p+1]>v[p] else 'Impossible'\n",
        "test": "assert solution('0') == 'Impossible'",
        "num_ids": 2480,
        "indeed": false
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.strip().split())\n    visited = [[False for _ in range(C)] for _ in range(R)]\n    result = 0\n\n    for i in range(R):\n        for j in range(C):\n            if stdin[i][j] == \"#\":\n                result += 1\n                visited[i][j] = True\n    \n    return str(result)\n",
        "test": "assert solution(\"0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0",
        "num_ids": 2858,
        "indeed": false
    },
    {
        "number": 4795,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int,stdin.split()))\n    sum = 0\n    for i in numbers:\n        sum += pow(i,2)\n    return str(sum)\n",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 2069,
        "indeed": false
    },
    {
        "number": 4796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    _, stds = [int(x) for x in stdin.split()]\n    leftovers, leftovers_ratio = [int(x) for x in stds.split(',')], 0\n    for i in range(stds):\n        leftovers[i] += leftovers_ratio\n        leftovers_ratio += 1 if leftovers_ratio % 2 == 0 else -1\n    return \"%.3f\" % sum(leftovers)\n\nSample Input 3:\n4 4 4\n3 2 2\nSample Output 3:\n0.000000 0.000000 0.000000\n",
        "test": "assert solution(input()) == \"3.000000 5.000000 6.000000\"",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 4797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    x=stdin\n    x=x.replace(\" \",\"\")\n    x=x.replace(\"<\",\"\")\n    print(x)\n    return x\nprint(solution(input()))\n",
        "test": "assert solution(stdin) == \"foss<<rritun\"",
        "num_ids": 1212,
        "indeed": false
    },
    {
        "number": 4798,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        if line == '-':\n            return 'MS'\n        elif line[0].isupper():\n            line = line.replace(line[0], '-')\n            line = line.replace('-','')\n        else:\n            line = line.replace(line[0], '-')\n            line = line.replace('-','')\n        print(line)\n        \n",
        "test": "assert solution(\"Mirko-Slavko\") == \"MS\"",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 4799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    Gold = int(stdin)\n    Silver = int(stdin[0])\n    Copper = int(stdin[1])\n    \n    Gold_count = Gold // 3\n    Silver_count = Silver // 3\n    Copper_count = Copper // 3\n    \n    if Gold_count > Silver_count and Gold_count > Copper_count:\n        return Gold_count\n    elif Silver_count > Gold_count and Silver_count > Copper_count:\n        return Silver_count\n    elif Copper_count > Gold_count and Copper_count > Silver_count:\n        return Copper_count\n    \n    if Gold_count > Silver_count:\n        return Gold_count\n    elif Gold_count > Copper_count:\n        return Gold_count\n    else:\n        return Copper_count\n\n-----Constraints-----\n1 <= stdin.length <= 10^3\n0 <= Gold <= 10^6\n0 <= Silver <= 10^6\n0 <= Copper <= 10^6\n\n\"\"\"\n\ndef",
        "test": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"Gold\"",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d, s = map(int, stdin.split())\n    if not (n % 10**9 == 0 or n % 10**6 == 0):\n        return 'impossible'\n    \n    return str(round(d*s/(n**k+s**(n-k+1))**(1/k), 2))\n",
        "test": "assert solution(stdin) == \"75.7142857\"",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 4801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(i) for i in stdin.split()]\n    g = [0]*N\n    l = len(A)\n    for i in range(l):\n        g[A[i]-1] += 1\n    g.sort()\n    for i in g:\n        if g[i-1] > 1:\n            g[i-1] -= 1\n    return str(l)\n\n-----Examples-----\nSample Input 1:\n1 2 3 4 5\nSample Output 1:\n3\n2 3 4 5\n\nSample Input 2:\n6\n1 2 3 4 5 6 7\nSample Output 2:\n1\n2\n7\n\nNote:\n\n1 <= N <= 1000\n0 <= A[i] <= 1000\n\"\"\"\n\ndef",
        "test": "assert solution(sys.stdin) == '7'",
        "num_ids": 2476,
        "indeed": false
    },
    {
        "number": 4802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    H = int(stdin[0])\n    M = int(stdin[1])\n    if H == 0 and M == 0:\n        return \"00:00\"\n    elif H == 23 and M == 59:\n        return \"23:59\"\n    elif H == 23 and M >= 60:\n        return str(H-23) + \":\" + str(M-60) + \":00\"\n    elif H < 23 and M >= 59:\n        return str(H-23) + \":\" + str(M-60) + \":00\" + \" \" + str(H-23) + \":\" + str(M-60)\n    else:\n        return str(H-23) + \":\" + str(M-60) + \":00\" + \" \" + str(H-23) + \":\" + str(M-60)\n",
        "test": "assert solution(input()) == '23 45'",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 4803,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    return str(1e10 + 1)\ndef",
        "test": "assert solution(input()), \"Invalid Input\"",
        "num_ids": 2055,
        "indeed": false
    },
    {
        "number": 4804,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return \",\".join(map(str,stdin[::-1]))\n",
        "test": "assert solution(solution('3')) == '3'",
        "num_ids": 6269,
        "indeed": false
    },
    {
        "number": 4805,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    return \"no\" if len(stdin) % 3 == 0 else \"yes\"\n",
        "test": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 4806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(['L', 'R', 'B', 'L', 'B', 'R', 'R', 'H', 'B', 'L', 'R', 'R', 'L', 'R', 'B', 'R', 'R', 'B', 'R', 'B', 'L', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R",
        "test": "assert solution(stdin) == \"CHCS\"",
        "num_ids": 2181,
        "indeed": false
    },
    {
        "number": 4807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    for case in stdin:\n        num,n,m = map(int,case.split(\" \"))\n        if m%n == 0 and m%num == 0:\n            print(fizzbuzz(num,n,m))\n        elif num%n == 0 and num%m == 0:\n            print(fizzbuzz(num,n,m))\n        elif num%m == 0 and num%n == 0:\n            print(fizzbuzz(num,n,m))\n        else:\n            print(fizzbuzz(num,n,m))\n        \n\ndef",
        "test": "assert solution(inp) == stdout",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 4808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    i = 0\n    for k in range(d + 1):\n        while d - i >= 0:\n            d -= k\n            i += 1\n        if k > 0:\n            print(f\"It hadn't snowed this early in {d - i} years.\")\n        else:\n            print(f\"It had never snowed this early.\")\n        i = 0\n    return \"It hadn't snowed this early!\\n\"\n\nSample Input 3:\n1\n100\n1 1 2 3 4 5 6 7 8 9 10\n7\n\nSample Output 3:\nIt hadn't snowed this early!",
        "test": "assert solution(input()) == 'It had never snowed this early!', 'incorrect input'",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 4809,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    n_syl = int(stdin.split()[1])\n    tot_syl = n_syl\n    p = 1\n    for i in range(1, n):\n        if tot_syl == 3:\n            break\n        tot_syl -= 1\n        p += 1\n    for j in range(n, 1, -1):\n        if tot_syl == 0:\n            break\n        tot_syl -= 1\n        p += 1\n    return str(p)",
        "test": "assert solution(input()) == 7",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 4810,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().rstrip())\n    char_matrix = []\n    for _ in range(n):\n        string = stdin.strip()\n        char_matrix.append(string.replace(' ', ''))\n\n    char_matrix.sort()\n\n    for row in range(n):\n        if char_matrix[row][0] =='s':\n            char_matrix[row].remove('s')\n        elif char_matrix[row][0] == 'd':\n            char_matrix[row].remove('d')\n            for elem in range(row, n):\n                if char_matrix[elem][0] =='s':\n                    char_matrix[elem].remove('s')\n                elif char_matrix[elem][0] == 'd':\n                    char_matrix[elem].remove('d')\n                    break\n    return ''.join(char_matrix[n - 1]).strip('s')\n\"\"\"\n\n\ndef",
        "test": "assert solution(stdin) == 'bok'",
        "num_ids": 1373,
        "indeed": false
    },
    {
        "number": 4811,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    preamble_size = int(stdin.strip())\n    preamble_blocks = preamble_size // (preamble_size + 2)\n    answer = 0\n    for i in range(preamble_size):\n        answer += preamble_blocks * 2\n        preamble_blocks += 1\n    return str(answer)\n\nSample Input 3:\n10\nSample Output 3:\n8\n\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        preamble_size = int(stdin.strip())\n        preamble_blocks = preamble_size // (preamble_size + 2)\n        answer = 0\n        for i in range(preamble_size):\n            answer += preamble_blocks * 2\n            preamble_blocks += 1\n        return str(answer)\n",
        "test": "assert solution(input()) == \"8 2\"",
        "num_ids": 1106,
        "indeed": false
    },
    {
        "number": 4812,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n\n    string = stdin\n    st = list(string)\n    while ',' in st:\n        st = list(st)\n        for i in st:\n            if st.count(i) == 2:\n                st.remove(i)\n                st.append(i)\n\n    while st:\n        p_i = st.pop()\n        for p in st:\n            if p_i == p:\n                break\n        else:\n            continue\n        p_i = ''.join(st)\n        answer += 'YES'\n        for i in st:\n            if p_i == i:\n                answer += ','\n                break\n        if p_i == ''.join(st[:-1]):\n            answer += 'NO'\n\n    return answer\n\nprint(solution(input()))\n",
        "test": "assert solution('a'), 'NO'",
        "num_ids": 3214,
        "indeed": false
    },
    {
        "number": 4813,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    #d = dict()\n    d = dict([(i,j) for i in range(26) for j in range(26)])\n    word = s.upper()\n    for i in word:\n        if i in d.keys():\n            d[i] += 1\n    #print(d)\n    #for i in d.keys():\n    #    d[i] = d[i]/len(word)\n    #print(d)\n    for i in range(26):\n        if i not in d.keys():\n            d[i] = 0\n    d = sorted(d.items(),key=lambda x: x[1],reverse=True)\n    #print(d)\n    #for i in d:\n    #    if i[0] in d.keys():\n    #        d[i[0]] += 1\n    #print(d)\n    #d = sorted(d, key=lambda x: x[1],reverse=True)\n    #for i in d:\n    #    if i[0] in d.keys():\n    #        d[i[0]] += 1\n    #print(d)\n    #for i in d:\n    #    if d[i] >= d[26]:\n    #        d[i] = 26\n    #print(d)\n    x = []\n    for i in d:\n        x.append(d[i])\n    x.sort(reverse=True)\n    #print(x)\n    #x = sorted(x, reverse=True)\n    #print(x)\n    if x[0] >= len(word):\n        return \"LOSE\"\n    else:\n        return \"WIN\"\n",
        "test": "assert solution(stdin) == \"WIN\" or \"LOSE\"",
        "num_ids": 3289,
        "indeed": false
    },
    {
        "number": 4814,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    names = stdin.strip().split(' ')\n    names = [i.strip() for i in names]\n    answer = 'INCREASING' if sorted(names) == names else 'DECREASING'\n    return answer\n",
        "test": "assert solution(stdin) == \"NEITHER\"",
        "num_ids": 4264,
        "indeed": false
    },
    {
        "number": 4815,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, p, m = map(int, stdin.split())\n    names = []\n    scores = []\n    for _ in range(n):\n        names.append(stdin.rstrip())\n    for _ in range(m):\n        scores.append(int(stdin.rstrip()))\n    scores = sorted(scores)\n    names.sort()\n    answer = ''\n    for name in names:\n        index = scores.index(name)\n        if index >= p:\n            answer += name\n            p -= index\n    return answer\n",
        "test": "assert solution(stdin) == \"Nina wins!\"",
        "num_ids": 1061,
        "indeed": false
    },
    {
        "number": 4816,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    y = [list(map(int, line.split())) for line in stdin.splitlines()]\n    # print(x, y)\n    return str(min(x) - min(y[0])) + '.' + str(min(x) + max(y[1])) + '.' + str(min(y[2] + x[3])) + '.' + str(min(y[4] + x[5]))\n",
        "test": "assert solution(stdin) == \"2.0\"",
        "num_ids": 1604,
        "indeed": false
    },
    {
        "number": 4817,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    for i in range(1, int(a[0])+1):\n        if str(i) in stdin:\n            return str(i)\n    return '0'\n    \n",
        "test": "assert solution(\"1880\") == \"1\"",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 4818,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def f(i, j, stdin):\n        for t in range(i+1, j):\n            if t%2==0 and stdin[j]>stdin[i]:\n                stdin[i], stdin[j] = stdin[j], stdin[i]\n                i += 1\n                f(i, j, stdin)\n                i -= 1\n            elif t%2==1 and stdin[j]<stdin[i]:\n                stdin[j], stdin[i] = stdin[i], stdin[j]\n                j -= 1\n                f(i, j, stdin)\n                j += 1\n    f(0, len(stdin), stdin)\n    return ''.join(map(str, stdin))\n'''\n\ndef",
        "test": "assert solution(stdin) == \"4\"",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 4819,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    str_s = list(map(int, stdin.split()))\n    res = 1\n    for i in range(1,len(str_s)):\n        if str_s[i]%str_s[i-1]!= 0:\n            res += 1\n        else:\n            break\n    return str(res)\n",
        "test": "assert solution(\"10 10 4 1\") == \"1\"",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 4820,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N, b = map(int, stdin.split())\n    N = N + 1\n    bit_string = '0' * N\n    bit_string = bit_string.zfill(N)\n    \n    while int(bit_string, 2) == b:\n        bit_string = '0' * N\n        bit_string = bit_string.zfill(N)\n        \n    if int(bit_string, 2) == b:\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution(stdin) == 'no'",
        "num_ids": 1139,
        "indeed": false
    },
    {
        "number": 4821,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[2:-2])\n    if n == 0: return \"GRESKA\"\n    return str(n - 1) + \" \" * (n - 2)\n",
        "test": "assert solution(\"H02H10P11H02\") == 12, 'Error'",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    R, S, K = map(int, stdin.split())\n    rk = sorted(range(R * S), key = lambda x : (x % R, x // R))\n    res = []\n    for r in rk:\n        res.append(r % K)\n    return \"\".join(res)\n\nSample Input 3:\n7 6 4\n....\n..*..\n.*..\n.*..\n..*..\n..*..\n..*..\n..*..\n\nSample Output 3:\n7\n.\n....\n..*..\n.\n.\n.\n..*..\n\ndef",
        "test": "assert solution([\"7 6 4\", \"..\", \"..\", \"....\"]) == \"2\"",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 4823,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    from collections import defaultdict\n    cnt = defaultdict(int)\n    d = deque()\n    for std in stdin:\n        d.append(std)\n        if len(d) > 5:\n            if not cnt[d[-5]]:\n                d.popleft()\n                cnt[d[-5]] += 1\n            elif cnt[d[-5]] >= 1:\n                cnt[d[-5]] -= 1\n    if len(d) == 0:\n        return \"0\"\n    if len(d) == 1:\n        return str(cnt[d[0]])\n    return str(cnt[d[0]]) + \" \" + str(cnt[d[1]]) + \" \" + str(cnt[d[2]]) + \" \" + str(cnt[d[3]]) + \" \" + str(cnt[d[4]])\n\nn = int(input())\nfor _ in range(n):\n    print(solution(input()))\n",
        "test": "assert solution(['2C', '4D', '4H', '2D', '2H']) == '3'",
        "num_ids": 2755,
        "indeed": false
    },
    {
        "number": 4824,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    C = int(stdin.strip().split()[0])\n    P = int(stdin.strip().split()[1])\n    return str(sum(map(lambda x:x**C, range(1,C+1))))\n",
        "test": "assert solution(\"1 0 0 0 0\") == \"1\"",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for line in stdin.split('\\n'):\n        if line:\n            result.append(line.replace('\\n','').replace(' ', '').upper())\n        else:\n            result.append(' ')\n    return '\\n'.join(result)\n\n-----Examples-----\nInput:\nAll your base are belong to us.\nOutput:\n''\nExplanation:\nThe new alphabet is a one-to-many translation (one character of the English alphabet translates to anywhere between $1$ and $6$ other characters), with each character translation as follows:\n\nOriginal\n\nNew\n\nEnglish Description\n\nOriginal\n\nNew\n\nEnglish Description\n\na\n\n@\n\nat symbol\n\nn\n\n[]\\[]\n\nbrackets, backslash, brackets\n\nb\n\n8\n\ndigit eight\n\no\n\n0\n\ndigit zero\n\nc\n\n(\n\nopen parenthesis\n\np\n\n|D\n\nbar, capital D\n\nd\n\n|)\n\nbar, close parenthesis\n\nq\n\n(,)\n\nparenthesis, comma, parenthesis\n\ne\n\n3\n\ndigit three\n\nr\n\n|Z\n\nbar, capital Z\n\nf",
        "test": "assert solution(\"This is the sample input.\\nThis is the sample output.\") == \"@11 '\\\\./\\[]'[\\''\\[]\\[]\\[]\\[]\\[]3!\\\\/'\\[]'[\\''\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]\\[]",
        "num_ids": 3691,
        "indeed": false
    },
    {
        "number": 4826,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j = map(int, stdin.split())\n    m = n - m\n    sum_ = 0\n    if m % 2 == 0:\n        sum_ += n - m\n        sum_ += n - m - 1\n    else:\n        sum_ += n - m + 1\n        sum_ += n - m - 1\n    if sum_ % 2 == 0:\n        return 'Alice'\n    else:\n        return 'Bob'",
        "test": "assert solution(stdin) == \"Alice\"",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    val = []\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == '$':\n            count += 1\n        elif count == 0:\n            val.append(arr[i])\n        else:\n            val.append(arr[i])\n            count -= 1\n    val.sort()\n    return ''.join(val)\n    \n",
        "test": "assert solution(stdin) == \"this sentence has thirtyone letters is the number of letters here\"",
        "num_ids": 1920,
        "indeed": false
    },
    {
        "number": 4828,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    num_bytes = 200\n    num_operations = 0\n    num_cycles = 0\n    \n    i = 0\n    j = 0\n    \n    while i < len(stdin):\n        if stdin[i]!='':\n            j = 0\n            while j < num_bytes:\n                if stdin[i]!='':\n                    num_operations += 1\n                    j += 1\n                else:\n                    num_bytes -= 1\n                    j = 0\n                    num_cycles += 1\n                    num_operations += 1\n                    break\n            if num_bytes == 0:\n                return num_cycles\n            i += 1\n        else:\n            num_bytes -= 1\n    return num_cycles\n",
        "test": "assert solution(\".....\") == 0",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 4829,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n    s = sorted(s)\n    if len(s) % 2 == 0:\n        return 'Odd'\n    elif len(s) % 2 == 1:\n        return 'Even'\n    else:\n        return 'Not a moose'\n\nSample Input 3:\n3 3\nSample Output 3:\nOdd 6\n\nSample Input 4:\n4 4\nSample Output 4:\nEven 6\n\nSample Input 5:\n3 3\nSample Output 5:\nOdd 6\n\n\"\"\"\ndef",
        "test": "assert solution('2 3') == 'Odd 6', 'Expected \"Odd 6\" but got \"2 3\"'",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 4830,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    words = stdin.split(' ')\n    lst = []\n    for i in range(len(words)):\n        lst.append(words[i].split('-'))\n    \n    S = ''.join([str(int(l[0])-int(l[1])) if l[1].isdigit() else l[1] for l in lst])\n    lst = [l[0] for l in lst]\n    print(len(lst))\n    print(S)\n    print(lst)\n    lst = [l[::-1] for l in lst]\n    print(lst)\n    return''.join(lst)\n\ndef",
        "test": "assert solution(\"ja\") == \"52\"",
        "num_ids": 3649,
        "indeed": false
    },
    {
        "number": 4831,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    string = ''\n    for i in range(len(stdin)):\n        string += stdin[i]*2\n    return string\n\nSample Input 3:\nDDD\nSample Output 3:\nX.X.X.X.\nX.X.X.\nX.X\nSample Input 4:\n8\nSample Output 4:\nX.X\nSample Input 5:\n5\nSample Output 5:\nX.X.X.X\nSample Input 6:\n1\nSample Output 6:\nX.\n",
        "test": "assert solution(\"DOGXD\") == \"X\"",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n-----Test Cases-----\nSample Test Case 1:\nInput:\n1\nOutput:\n3.141593\n2.000000\n\nSample Test Case 2:\nInput:\n21\nOutput:\n1385.442360\n882.000000\n-----\n\nExample 2:\nInput:\n3\nOutput:\n882.000000\n3.141593\n2.000000\n\"\"\"\nimport math\n\ndef",
        "test": "assert solution(stdin) == '882.000000'",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 4833,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip().split()[0])\n    n = int(stdin.strip().split()[1])\n    incomes = list(map(int, stdin.strip().split()[2:]))\n    ex_sum = 0\n    for i in range(0, n + 1):\n        sum = 0\n        for j in range(0, k):\n            sum += incomes[i - j]\n        ex_sum += sum\n    return str(ex_sum)\n\n\nSample Input 3:\n5\n1 1 5 1 1 2 2\nSample Output 3:\n1\n\n\"\"\"\n\ndef",
        "test": "assert solution(\"4\") == \"0\"",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 4834,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.rstrip())\n    \n    if N == 1:\n        return '2'\n    \n    table = []\n    for i in range(1, N + 1):\n        table.append(i)\n    for i in range(N-1, 1, -1):\n        table.append(i)\n    table.pop()\n    \n    for i in range(1, N):\n        table.append(i + 1)\n    for i in range(N-1, 1, -1):\n        table.append(i + 1)\n    \n    for i in range(N-2, 1, -1):\n        table.append(i + 2)\n    \n    for i in range(1, N-2):\n        table.append(i + 2)\n    \n    return str(table[N-1]) + \" \" + str(table[N-2])\n",
        "test": "assert solution(",
        "num_ids": 2358,
        "indeed": false
    },
    {
        "number": 4835,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, m, f, g = map(int, stdin.split())\n    stair = []\n    for i in range(n):\n        stair.append(list(map(int, stdin[i].split())))\n    start = [0] * n\n    end = [0] * n\n    visit = [False] * n\n    count = 0\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    for r in range(n):\n        for c in range(n):\n            if visit[c] == False and stair[r][c] == 1:\n                visit[c] = True\n                start[r] = c\n                end[c] = r\n                count += 1\n    \n    for i in range(count):\n        if visit[start[i]] == False:\n            visit[start[i]] = True\n            f.append(i)\n        if visit[end[i]] == False:\n            visit[end[i]] = True\n            g.append(i)\n    \n    while f and g:\n        if f[0] < g[0]:\n            f.pop(0)\n            g.pop(0)\n        elif f[0] > g[0]:\n            f.pop(0)\n            g.pop(0)\n        else:\n            f.pop(0)\n            g.pop(0)\n    \n    if f:\n        print(f[0])\n        return\n    elif g:\n        print(g[0])\n        return\n    else:\n        print('NOT POSSIBLE')\n        return\n\n    return 'NOT POSSIBLE'\n\nn = int(input())\nprint(solution(input()))",
        "test": "assert solution(inp) == 'NOT POSSIBLE'",
        "num_ids": 2441,
        "indeed": false
    },
    {
        "number": 4836,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    weight_list = list(map(int, stdin.strip().split()))\n    answer = 0\n    if m < 0 or n < 0:\n        return str(0)\n    for i in range(len(weight_list)):\n        if m == 0:\n            answer += weight_list[i]\n        elif m >= weight_list[i]:\n            answer += m - weight_list[i]\n        else:\n            answer -= m - weight_list[i]\n    return str(answer)",
        "test": "assert solution([\"4\", \"4\", \"2\", \"3\", \"1\"]) == \"4\"",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 4837,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    N, R, S, P, score = map(int, stdin.split())\n    r = ['R', 'S', 'P']\n    s = ['S', 'P']\n    score_list = []\n    for i in range(N):\n        score_list.append(score[i] * 2 ** (R - i))\n    for i in range(N):\n        if score_list[i] == score[i]:\n            score_list[i] += score[i]\n    for i in range(N):\n        if score_list[i] == score[i] or score_list[i] == score[i] * 2 ** (R - i):\n            score_list[i] -= score[i]\n    for i in range(N):\n        if s[i] in r:\n            score_list[i] += score[N + i]\n        if s[N + i] in r:\n            score_list[i] += score[N + i]\n    for i in range(N):\n        if s[i] in s:\n            score_list[i] += score[N + i]\n        if s[N + i] in s:\n            score_list[i] += score[N + i]\n    max_score = max(score_list)\n    for i in range(N):\n        if score_list[i] == max_score:\n            score_list[i] += score[i]\n    for i in range(N):\n        if score_list[N + i] == max_score:\n            score_list[N + i] += score[N + i]\n    for i in range(N):\n        if score_list[N + i] == max_score:\n            score_list[N + i] += score[N + i]\n    max_score = max(score_list)\n    for i in range(N):\n        if score_list[i] == max_score:\n            score_list[i] += score[N + i]\n    for i in range(N):\n        if score_list[N + i] == max_score:\n            score_list[N + i] += score[N + i]\n    max_score = max(score_list)\n    for i in range(N):\n        if score_list[N + i] == max_score:\n            score_list[N + i] += score[N + i]\n    for i in range(N):\n        if score_list[N + i] == max_score:\n            score_list[N + i] += score[N + i]\n    max_score = max(score_list)\n    for i in range(N):\n        if score_list[N + i] == max_score:\n            score_list[N + i] += score[N + i]\n    max_score = max(score_list)\n    for i in range(N):\n        if score_list[N + i] == max_score:\n            score_list[N + i] += score[N + i]\n    for i in range(N):\n        if score_list[N + i] == max_score:\n            score_list[N + i] += score[N + i]\n    max_score = max(score_list)\n    for i in range(N):\n        if score_list[N + i] == max_score:\n            score_list[N + i] += score[N + i]\n    for i in range(N):\n        if score_list[N + i] == max_score:\n            score_list[N + i] += score[N + i]\n    return ''.join(map(str, score_list))\n\n\nprint(solution(input()))\n",
        "test": "assert solution([\"SSPPR\", \"SSPPR\", \"SSPPR\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\", \"PPRRS\"]) == \"15\"",
        "num_ids": 1990,
        "indeed": false
    },
    {
        "number": 4838,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    a=list(map(int,stdin.split()))\n    answer=[]\n    if a[0]>=a[1]:\n        answer.append(0)\n        answer.append(a[0]-a[1])\n    else:\n        answer.append(a[0]-a[1])\n        answer.append(a[1]-a[0])\n        answer.append(a[0]-a[1])\n    answer.sort()\n    answer=answer[-1]\n    return answer\n",
        "test": "assert solution(\"5\\n11\\n4\\n5\\n9\\n10\\n17\"), \"5\\n11\\n4\\n5\\n9\\n10\\n17\" == \"17\"",
        "num_ids": 2540,
        "indeed": false
    },
    {
        "number": 4839,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if (k%2==1):\n        return \"impossible\"\n    elif (n % k == 0):\n        return \"impossible\"\n    else:\n        return str(round((n/k*100) - (n/k*100), 6))\n",
        "test": "assert solution(input()) == \"impossible\"",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 4840,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b = map(int, stdin.split(\" \"))\n    for i in range(a, b+1):\n        if i % a == 0:\n            if i % b == 0:\n                return 'Tie'\n            else:\n                continue\n    return 'Emma'\n",
        "test": "assert solution(stdin) == 'Tie'",
        "num_ids": 2187,
        "indeed": false
    },
    {
        "number": 4841,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(' ')[0])\n    mumble = [int(i) for i in stdin.strip().split(' ')[1:]]\n    a = [i for i in mumble if i > 0]\n    a.sort()\n    if len(a) > 0:\n        if a[-1] < 1000000:\n            return'makes sense'\n        else:\n            return'something is fishy'\n    else:\n        return'something is fishy'\n\"\"\"",
        "test": "assert solution(stdin) =='mumble'",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 4842,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, d, v, m = map(int, stdin.split())\n    arr = [list(map(int, list(stdin[i:i + m]))) for i in range(0, len(stdin), m)]\n    for i in range(n - 2, -1, -1):\n        for j in range(i, n):\n            if arr[i][j]!= arr[j][i]:\n                return str(d + 1)\n    return str(d + 1)\n\n-----Examples-----\ninput:\n3 2 6 9 12 15\n3 1 6 9 12 15\ninput:\n3 3 6 9 12 15\n2 1 4 7 8 9\ninput:\n4 4 4\noutput:\n2 3\n3 1\ninput:\n4 4 4\noutput:\n2 3\n3 1\ninput:\n4 9\noutput:\n2\n\ndef",
        "test": "assert solution(\"9x^2 + 9x^2 + 9x^2 + 9x^2 + 9x^2 + 9x^2\") == \"3 9 8 25\"",
        "num_ids": 1373,
        "indeed": false
    },
    {
        "number": 4843,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    row = [int(i) for i in range(n)]\n    col = [int(i) for i in range(n)]\n    dir = (0, 1, 1, 0, -1, -1, -1, 0, 1)\n    for _ in range(n ** 2):\n        i, j = 0, 0\n        for _ in range(n):\n            i, j = i + dir[0], j + dir[1]\n            if (i < 0 or i >= n or j < 0 or j >= n or (i % 2 == j % 2 and i // 2 == j // 2)) and abs(row[i] - col[j])!= 1:\n                return \"INCORRECT\"\n    return \"CORRECT\"\n-----Explanation-----\nThe input is as follows:\n\nSample Input:\n4\n2 3\n1 0\n1 5\nSample Output:\nCORRECT\n\nSample Input:\n6\n2 3\n1 0\n1 2\n1 5\nSample Output:\nCORRECT\n\nSample Input:\n4\n2 3\n1 0\n0 1\n2 1\nSample Output:\nCORRECT\n\nSample Input:\n5\n1 3\n1 0\n0 2\n0 1\nSample Output:\nCORRECT\n\nSample Input:\n10\n3 7 9 4 2 1 8 1 0 1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572",
        "test": "assert solution(stdin) == 'INCORRECT'",
        "num_ids": 2414,
        "indeed": false
    },
    {
        "number": 4844,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n,*lst=map(int,stdin.split())\n    M=[]\n    for i in range(n):\n        M.append(list(map(int,list(stdin[i:i+n]))))\n    for i in range(n):\n        if n==1:\n            for j in range(n):\n                M[i][j]=lst[j]\n        else:\n            for j in range(n):\n                if lst[j]%2==0:\n                    M[i][j]=lst[j]\n                else:\n                    M[i][j]=lst[j]+lst[j+1]\n    for i in range(n):\n        for j in range(n-1):\n            M[i][j],M[i][j+1]=M[i][j+1],M[i][j]\n    return ''.join(map(str,M))\n",
        "test": "assert solution(stdin) == \"1 2 3 11\"",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 4845,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    #1) convert string to int, int to string\n    list1=stdin.split(' ')\n    #2) Split string from list1 to a list\n    D,M=list1\n    #3) convert string to int, int to string\n    D=int(D)\n    #4) Convert string to int, int to string\n    M=int(M)\n    #5) convert int to string, string to int\n    D=str(D)\n    #6) convert int to string, string to int\n    M=str(M)\n    #7) replace '0' with '0' to int, int to string\n    D=D.replace('0','0')\n    M=M.replace('0','0')\n    #8) Replace all '-' with '-', replace '-' with '-'\n    D=D.replace('-','-')\n    M=M.replace('-','-')\n    #9) Convert int to string, string to int\n    D=D.replace(str(int(D)),'0')\n    M=M.replace(str(int(M)),'0')\n    #10) Concatenate D and M, remove extra spaces\n    D=D+M\n    #11) Find '1'\n    D=D.find('1')\n    #12) Return string\n    if D==0:\n        return 'Saturday'\n    elif D==1:\n        return 'Sunday'\n    else:\n        return 'Monday'\n",
        "test": "assert solution(\"12 3\") == \"Monday\"",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 4846,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = map(int, stdin.split())\n    return str(N + (D ** 2 - X) // D)\n",
        "test": "assert solution('23') == '5'",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N, D, P = map(int, stdin.split())\n    trees = []\n    for _ in range(N):\n        trees.append(list(map(int, stdin.split())))\n    answer = 0\n    for tree in trees:\n        area = 0\n        for i in range(len(tree) - 1):\n            d = tree[i] - tree[i+1]\n            if d % 2 == 0:\n                area += d / 2\n            else:\n                area += d / 2 + 1\n        answer = max(answer, abs(area - D))\n    return str(answer)",
        "test": "assert solution(stdin) == 3",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 4848,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return \"1\"\n    square = n**2\n    while square % 2 == 0:\n        square //= 2\n    return str(square)\n\nSample Input 3:\n1\nSample Output 3:\n1\n\nSample Input 4:\n11\nSample Output 4:\n0\n\nSample Input 5:\n6\nSample Output 5:\n5\n\nInput:\nThe number of test cases is in the first line.\nThe first line contains a single integer $n$, denoting the number of rows of squares in a single row.\nThe next $n$ lines contains $m$ integers, where $m$ is a positive integer.\n\nOutput:\nFor each row of the square, print the number of squares that are divisible by $2\\leq m \\leq n$, followed by the square with the number of beats in the row.\n\nExample:\nInput:\n3\n3\n5\n4\n5\n6\n7\n8\n9\n10\nOutput:\n1 2\n3 4\n5 6\n7 8\n9 10\n\"\"\"\n\nimport math",
        "test": "assert solution(30) == 7, \"stdin: 30\"",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 4849,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef",
        "test": "assert solution(\"KRIJUMCAR1\") == \"4\"",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    triangles = [list(map(int, input().split())) for _ in range(int(stdin.strip()))]\n    \n    def get_rod_len(triangle):\n        rod_len = 0\n        \n        for idx, s in enumerate(triangle):\n            if idx == 0:\n                rod_len += s\n            elif idx == 1:\n                rod_len += s + triangle[idx+1]\n            else:\n                rod_len += s + max(triangle[idx-1], triangle[idx+1])\n        return rod_len\n    \n    def get_common_length(triangles):\n        common_length = 0\n        \n        for i in range(len(triangles) - 1):\n            common_length += max(triangles[i][1], triangles[i][2])\n            common_length += min(triangles[i][0], triangles[i+1][0])\n        \n        return common_length\n        \n    def get_min_length(triangles):\n        common_length = get_common_length(triangles)\n        \n        if common_length == 0:\n            return get_rod_len(triangles)\n        \n        return common_length + 1\n    \n    return str(get_min_length(triangles))",
        "test": "assert solution(",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 4851,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n -= n % 10\n    d = {}\n    for i in range(1, n+1):\n        d[i] = i\n    for i in range(2, n+1):\n        if (i % 10)!= 0:\n            d[i] = max(d[i//10] + i, i)\n        else:\n            d[i] = max(d[i//10] + 1, i)\n    return str(d[n])\n",
        "test": "assert solution(stdin) == \"27\"",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 4852,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u5bf9\u4e8eplus\uff0c\u4f7f\u7528\u52a0\u6cd5\uff0c\u52a0\u4e0a\u8ba1\u7b97\uff0c\u52a0\u4e0a\u5b57\u7b26\u4e32\u76f8\u52a0\n    \u5bf9\u4e8eplus\uff0c\u4f7f\u7528string concatenation\uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u76f8\u52a0\n    '''\n    strlst = stdin.split()\n    plus = strlst[0].replace(\"+\",\"\")\n    strlst[0] = plus\n    plus = plus[::-1]\n    strlst[0] = plus\n    # \u5217\u8868\u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4e2a\u6570\u4e3a0\u7684\u5b57\u7b26\u4e32\n    if not strlst:\n        return strlst[0]\n    plus = plus[::-1]\n    strlst[0] = plus\n    # \u5217\u8868\u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4e2a\u6570\u4e3a0\u7684\u5b57\u7b26\u4e32\n    if not strlst:\n        return strlst[0]\n    plus = plus[::-1]\n    result = strlst[0]\n    count = 0\n    for i in range(1,len(strlst)):\n        plus_item = strlst[i][::-1]\n        plus_item = plus_item.replace(\"+\",\"\")\n        if plus_item == plus:\n            count += 1\n        else:\n            result += strlst[i]\n            count = 1\n        result += strlst[i]\n    return count\n    \n    \n",
        "test": "assert solution(\"1+9+8+4\") == 0",
        "num_ids": 2311,
        "indeed": false
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    p = list(map(int, stdin.split()))\n    n = len(p)\n    m = len(p)\n    answer = ['' for _ in range(m)]\n    result = ['' for _ in range(m)]\n    for i in range(m-1):\n        if p[i]!= 0:\n            for j in range(i, m):\n                result[j] += str(int(p[i] * (j-i-1))+1)\n    for i in range(m):\n        answer[i] = result[i].rstrip('0')\n    return '\\n'.join(answer)\n\nSample Output 2:\n5 -2 4\nExplanation:\n1 0 2\n2 0 4\n3 1 0\n4 1 0\n5 2 0\nExplanation:\n1 0 2\n1 2 0\n1 4 0\n1 0 1\n1 0 2\n1 0 3\n1 0 4\n2 0 4\n2 0 0\n2 0 0\n2 0 0\n2 0 1\n2 0 2\n2 0 3\n2 0 4\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n3 0 0\n3 0 0\n4 0 0\n4 0 0\n5 0 0\nExplanation:\n1 0 2\n2 0 4\n3 1 0\n4 1 0\n5 2 0\nExplanation:\n1 0 2\n1 2 0\n1 4 0\n1 0 1\n1 0 2\n1 0 3\n1 0 4\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 1\n2 0 2\n2 0 3\n2 0 4\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n3 0 0\n3 0 0\n4 0 0\n4 0 0\n5 0 0\nExplanation:\n1 0 2\n1 2 0\n1 4 0\n1 0 1\n1 0 2\n1 0 3\n1 0 4\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 1\n2 0 2\n2 0 3\n2 0 4\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n3 0 0\n3 0 0\n4 0 0\n4 0 0\n5 0 0\nExplanation:\n1 0 2\n1 2 0\n1 4 0\n1 0 1\n1 0 2\n1 0 3\n1 0 4\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 1\n2 0 2\n2 0 3\n2 0 4\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n3 0 0\n3 0 0\n4 0 0\n4 0 0\n5 0 0\nExplanation:\n1 0 2\n1 2 0\n1 4 0\n1 0 1\n1 0 2\n1 0 3\n1 0 4\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 1\n2 0 2\n2 0 3\n2 0 4\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n3 0 0\n3 0 0\n4 0 0\n4 0 0\n5 0 0\nExplanation:\n1 0 2\n1 2 0\n1 4 0\n1 0 1\n1 0 2\n1 0 3\n1 0 4\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 1\n2 0 2\n2 0 3\n2 0 4\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n2 0 0\n3 0 0\n3 0 0\n4 0 0\n4 0 0\n5 0 0\nExplanation:\n1 0 2\n1 2 0\n1 4 0\n1 0 1\n1 0 2\n1 0 3\n1 0 4\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0",
        "test": "assert solution(stdin) == \"11 11\"",
        "num_ids": 2207,
        "indeed": false
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, c, msg = map(int, stdin.split())\n    msg = list(map(int, msg.split()))\n    msg.sort()\n    msg = [x for x in msg if x!= 0]\n    if len(msg) == c:\n        for i in msg:\n            msg.remove(i)\n        msg = sorted(msg)\n    else:\n        msg = msg + [0 for _ in range(c - len(msg))]\n    return ''.join(map(str, msg))\n\"\"\"",
        "test": "assert solution(",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 4855,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    n, m = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    B = list(map(int, stdin.split()))\n    B.sort()\n    if n == 1:\n        answer = str(m // B[0])\n    elif m % B[0] == 0:\n        answer = str(n // B[0])\n    else:\n        answer = str((n - m) // B[0] + 1)\n    return answer",
        "test": "assert solution('3 5') == '0'",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 4856,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    if A < B:\n        A, B = B, A\n    if A > B:\n        A, B = B, A\n    if A == B:\n        return str(B) + str(A)\n    else:\n        return str(A) + str(B)\n",
        "test": "assert solution(stdin) == '437'",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 4857,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    def is_weight_valid(l: str, w: str) -> bool:\n        if len(l) == len(w):\n            return True\n        \n        for i in range(0, len(l)):\n            if (l[i] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") and (l[i] not in \"abcdefghijklmnopqrstuvwxyz\"):\n                return False\n        \n        for i in range(0, len(w)):\n            if (w[i] not in \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") and (w[i] not in \"abcdefghijklmnopqrstuvwxyz\"):\n                return False\n        \n        return True\n    \n    def is_valid_word(l: str, w: str) -> bool:\n        if len(l) == len(w):\n            return True\n        \n        for i in range(0, len(l)):\n            if (l[i] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") and (l[i] not in \"abcdefghijklmnopqrstuvwxyz\"):\n                return False\n        \n        for i in range(0, len(w)):\n            if (w[i] not in \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") and (w[i] not in \"abcdefghijklmnopqrstuvwxyz\"):\n                return False\n        \n        return True\n    \n    def get_valid_word(l: str, w: str) -> str:\n        valid_word = \"\"\n        for i in range(0, len(l)):\n            if is_weight_valid(l[i], w[i]):\n                valid_word += w[i]\n        \n        return valid_word\n    \n    return get_valid_word(stdin, stdin)\n    \n    \n",
        "test": "assert solution(\"programming\") == \"programming\"",
        "num_ids": 1580,
        "indeed": false
    },
    {
        "number": 4858,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    sil = [list(map(int, map(str, input().strip().split()))) for _ in range(m)]\n    sil[0][0] *= -1\n    for i in range(1, m):\n        for j in range(n):\n            sil[i][j] += sil[i-1][j]\n    sil[n][0] *= -1\n    for i in range(1, n):\n        for j in range(m):\n            sil[j][i] += sil[j][i-1]\n    for i in range(m):\n        for j in range(n):\n            sil[i][j] -= sil[j][i]\n    for i in range(1, m):\n        for j in range(m):\n            for k in range(n):\n                print(sil[i][j], end=\"\")\n            print(\"\")\n        print()\n    return \"\".join(list(\"\".join(map(str, row))) for row in sil)\n",
        "test": "assert solution(stdin) == 'ABAAABABAB'",
        "num_ids": 1829,
        "indeed": false
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    line = list(map(int, stdin.split()))\n    line.sort()\n    answer = ''\n    for i in range(line[0]):\n        answer += str(i+1)\n    answer +=''\n    for i in range(1, line[-1]):\n        answer += str(i+1)\n    answer +=''\n    for i in range(line[-2], line[-1]):\n        answer += str(i+1)\n    return answer[:-1]\n",
        "test": "assert solution(stdin) == \"0 0 3\\n0 3 0\\n1 1 0\\n3 0 1\\n1 1 1\\n1 2 0\\n3 0 2\\n4 0 3\\n5 1 0\\n7 0 0\\n\\noutput
        "num_ids": 2497,
        "indeed": false
    },
    {
        "number": 4860,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    for i in range(1,n+1):\n        answer = answer + str(lst[i-1]+lst[i])+\" \"\n    return answer[:-1]\n\"\"\"\nimport sys\n\ndef",
        "test": "assert solution(\"10 20\") == \"20\"",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 4861,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = map(float, stdin.split())\n    c = 1 + 1 / p\n    if n % s == 0 or c < 10 ** 9:\n        return 'inf'\n    if s % n == 0:\n        return 'inf'\n    return round(1 + (1 / c) * (s / v) * (n / s), 10)",
        "test": "assert solution(\"1 2 3 4\"), \"1 2 3 4\"",
        "num_ids": 1145,
        "indeed": false
    },
    {
        "number": 4862,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = ''\n    for i in range(n):\n        answer = answer + str(i) + ','\n    return answer[:-1]\n\nSample Input:\n1\nSample Output:\n\"1,2,3\"\ndef",
        "test": "assert solution(17) == 5, \"Expected 5; got {!r}\".format(17)",
        "num_ids": 2559,
        "indeed": false
    },
    {
        "number": 4863,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = []\n    for i in range(n):\n        string = stdin.split()\n        string[0] = int(string[0])\n        ans.append(string)\n    return str(len(ans[0][0]))\n\n\nSample Output:\n4\ndef",
        "test": "assert solution(a) == \"0\"",
        "num_ids": 2537,
        "indeed": false
    },
    {
        "number": 4864,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    # complete this function\n    pass\n",
        "test": "assert solution(\".x.xx.x.x\") == \"x.x.x.x.x\"",
        "num_ids": 2750,
        "indeed": false
    },
    {
        "number": 4865,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a[1] = int(a[1])\n    if a[2] == 'F':\n        a[1] += 1\n    else:\n        a[1] -= 1\n    if a[3] == 'B':\n        a[3] += 1\n    else:\n        a[3] -= 1\n    return''.join(str(i) for i in a)\n\nSample Output:\n14 20\n\nRuntime: 36 ms, faster than 20.05% of Python3 online submissions for Date after Minutes.\nMemory Usage: 14.1 MB, less than 13.45% of Python3 online submissions for Date after Minutes.\n\n\"\"\"\n\nclass Solution:\n    def change(self, hour, minutes, base_time):\n        if base_time >= base_time % 60 and base_time >= base_time % 60 + 1:\n            hour += 1\n        if base_time >= base_time % 60:\n            minute = hour % 60\n            hour = hour % 24\n        else:\n            minute = 0\n        if hour == 24:\n            return f'{hour:0>2}:{minute:0>2}'\n        else:\n            return f'{hour:0>2}:{minute:0>2}:{hour:0>2}'\n\n    def solution(self, stdin: str) -> str:\n        a = stdin.split()\n        a[1] = int(a[1])\n        if a[2] == 'F':\n            a[1] += 1\n        else:\n            a[1] -= 1\n        if a[3] == 'B':\n            a[3] += 1\n        else:\n            a[3] -= 1\n        return''.join(str(i) for i in a)\n\nsolution = Solution()\n",
        "test": "assert solution(input()) == '14 20'",
        "num_ids": 4059,
        "indeed": false
    },
    {
        "number": 4866,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    date = input(stdin)\n    month = date[0]\n    date = date[2:]\n    day = 0\n    if int(month) == 1:\n        if int(date) == 31:\n            answer = 'yup'\n        else:\n            answer = 'nope'\n    elif int(month) == 2:\n        if int(date) == 28:\n            answer = 'yup'\n        else:\n            answer = 'nope'\n    elif int(month) == 3:\n        if int(date) == 31:\n            answer = 'yup'\n        else:\n            answer = 'nope'\n    elif int(month) == 4:\n        if int(date) == 30:\n            answer = 'yup'\n        else:\n            answer = 'nope'\n    elif int(month) == 5:\n        if int(date) == 31:\n            answer = 'yup'\n        else:\n            answer = 'nope'\n    elif int(month) == 6:\n        if int(date) == 31:\n            answer = 'yup'\n        else:\n            answer = 'nope'\n    elif int(month) == 7:\n        if int(date) == 28:\n            answer = 'yup'\n        else:\n            answer = 'nope'\n    elif int(month) == 8:\n        if int(date) == 31:\n            answer = 'yup'\n        else:\n            answer = 'nope'\n    elif int(month) == 9:\n        if int(date) == 30:\n            answer = 'yup'\n        else:\n            answer = 'nope'\n    else:\n        return 'nope'\n    return answer\n",
        "test": "assert solution('01 9') == 'nope'",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    \n    puzzle_data = []\n    \n    for _ in range(len(stdin)):\n        puzzle_data.append(stdin[0])\n        stdin.pop(0)\n        \n    \n    puzzle_data.append('#')\n    \n    for index in range(len(puzzle_data)):\n        if puzzle_data[index] == '.':\n            puzzle_data.pop(index)\n            puzzle_data.pop(index)\n            puzzle_data.insert(index, '.')\n    \n    print(puzzle_data)\n    \n    return '#'.join(puzzle_data)",
        "test": "assert solution(input().strip()) == \"\".join(sorted(input().strip())), \"input should be as follows\"",
        "num_ids": 4247,
        "indeed": false
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N,P,R,H,O = list(map(int,stdin.split()))\n    K = N - P - R - H - O\n    pairs = [(H,O), (O,H), (H,R), (R,H), (R,O), (O,R), (O,R), (R,O), (O,O), (O,R), (O,H), (O,R), (O,O)]\n    for i in range(K):\n        pairs.sort()\n        if pairs[i] == (H,O):\n            pairs[i] = (O,H)\n        elif pairs[i] == (O,R):\n            pairs[i] = (R,O)\n        elif pairs[i] == (H,O):\n            pairs[i] = (O,R)\n        elif pairs[i] == (R,O):\n            pairs[i] = (R,H)\n    answer = \"\".join(pairs[K-1])\n    return answer\n\n\n-----Constraints-----\n0 \u2264 N \u2264 1000\n0 \u2264 P \u2264 1000\n0 \u2264 R \u2264 1000\n0 \u2264 H \u2264 1000\n0 \u2264 O \u2264 1000\n\n-----Time Limit: 1 seconds per test case\n\n-----Example Input\n\n-----Example Output\n\n-----Example Explanation\n\n-----Explanation Example 1:\n\nInput: N = 3, P = 2, R = 2, H = 3, O = 2\nOutput: \"AB\"\nExplanation:\nThe two pairs are (2,2) and (2,3) as the four keys are used to connect the game.\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N,P,R,H,O = list(map(int,stdin.split()))\n        K = N - P - R - H - O\n        pairs = [(H,O), (O,H), (H,R), (R,H), (R,O), (O,R), (O,R), (R,O), (O,O), (O,R), (O,H), (O,R), (O,O)]\n        for i in range(K):\n            pairs.sort()\n            if pairs[i] == (H,O):\n                pairs[i] = (O,H)\n            elif pairs[i] == (O,R):\n                pairs[i] = (R,O)\n            elif pairs[i] == (H,O):\n                pairs[i] = (O,R)\n            elif pairs[i] == (R,O):\n                pairs[i] = (R,H)\n        answer = \"\".join(pairs[K-1])\n        return answer",
        "test": "assert solution(stdin) == \"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"",
        "num_ids": 3945,
        "indeed": false
    },
    {
        "number": 4869,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(float, stdin.split()))\n    if (A[0] + A[1] + A[2]) <= 100:\n        print(\"Need more materials\")\n        return\n    if A[0] < A[1]:\n        A[0], A[1] = A[1], A[0]\n    print(\"Diablo is happy!\")\n    return\n\nSample Input:\n3.2\nSample Output:\nNeed more materials\nSample Input:\n4.00000\nSample Output:\nNeed more materials\nSample Input:\n1.5\nSample Output:\nNeed more materials\n",
        "test": "assert solution('1,200') == 'Need more materials!', 'Fail'",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 4870,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    floors = list(map(int,stdin.split()))\n    s = floors[0]\n    g = floors[1]\n    u = floors[2]\n    d = floors[3]\n    if s > g or s > g or u > d or d > g:\n        return \"use the stairs\"\n    \n    if s > g:\n        if s - g > u:\n            return \"use the stairs\"\n        else:\n            up = s - g - u\n            down = s - g - u + (g - s) * (u - down)\n            return up + down - (u - d) + (d - u) * (s - down)\n    else:\n        up = s - g - u\n        down = s - g - u + (g - s) * (u - down)\n        return up + down - (u - d) + (d - u) * (s - down)\n",
        "test": "assert solution(\"10 1 10 2 1\") == \"use the stairs\"",
        "num_ids": 2002,
        "indeed": false
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(float(stdin) / 5 + (float(stdin[:-1]) / 5)))\n'''\n\nimport sys\nimport math",
        "test": "assert solution(",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 4872,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    pushes = []\n    for _ in range(n):\n        pushes.append(int(stdin.strip()))\n    \n    d = dict()\n    for i in pushes:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    \n    print(sum(d.values()))\n    return str(sum(d.values()))\n\nSample Output:\n1\n",
        "test": "assert solution(stdin) == 3, 'incorrect answer'",
        "num_ids": 1242,
        "indeed": false
    },
    {
        "number": 4873,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    h,w = map(int,stdin.split())\n    n = 0\n    for i in range(h):\n        for j in range(w):\n            if (i+j)%2 == 0:\n                n += 'P'\n            else:\n                n += '.'\n        n += '\\n'\n    return n",
        "test": "assert solution(\"G..G..\") == 1, \"The length of the string 'G..G..' is incorrect\"",
        "num_ids": 2139,
        "indeed": false
    },
    {
        "number": 4874,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip().split()\n    for i in range(len(n)):\n        n[i] = int(n[i])\n    n = list(map(int, n))\n    m = n[0]\n    c = []\n    for i in range(len(n)):\n        c.append(n[i]*(i+1))\n    c = sorted(c, reverse=True)\n    ans = 0\n    for i in range(len(c)):\n        ans += c[i]\n    return str(ans)\n\"\"\"\n\ndef",
        "test": "assert solution(5) == 5",
        "num_ids": 2847,
        "indeed": false
    },
    {
        "number": 4875,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return''.join([pig_latin(word) for word in stdin.split()])\n",
        "test": "assert solution(stdin) == \"i can't speak pig latin\"",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 4876,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    \n    s = re.findall(r'\\w+',stdin)\n    \n    if not s:\n        return \"Anywhere is fine\"\n    \n    if not s[0] == \"pancakes\" and not s[0] == \"salad\" and not s[0] == \"puntsch\" and not s[0] == \"q\":\n        return s[0]\n    \n    for i in s:\n        if not i == \"q\" and not i == \"salad\" and not i == \"punsch\":\n            return i\n    \n    return \"Anywhere is fine\"\n",
        "test": "assert solution('q') == 'Anywhere is fine'",
        "num_ids": 2733,
        "indeed": false
    },
    {
        "number": 4877,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    if a >= b and a >= h:\n        return str(a//(b-a)*h)\n    if b >= h:\n        return str(b//(h-b)*h)\n    return str(1)\n    \n\nTest case 1:\n\nInput:\n5 0 15\nSample Output:\n3\n'''\n\ndef",
        "test": "assert solution(input()), \"The function does not work\"",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 4878,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0]) + int(stdin[1]))\n\ndef",
        "test": "assert solution(\"2 2\") == \"12\"",
        "num_ids": 2414,
        "indeed": false
    },
    {
        "number": 4879,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    a = list(stdin)\n    b = a.pop(0)\n    c = a.pop(0)\n    if a[0]==b:\n        a.append(b)\n        a.append(c)\n    elif a[0]==c:\n        a.append(c)\n        a.append(b)\n    else:\n        return 'No'\n    return 'Yes'\n",
        "test": "assert solution('south west west') == 'No'",
        "num_ids": 919,
        "indeed": false
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1\n    # n, m = stdin.split()\n    # return ''.join(chr(int(n) + ord(m[i]) - ord('a')) for i in range(len(m)))\n    \n    # Solution 2\n    return \"\".join(str(ord(c) - 97 + 26) for c in stdin.lower())\n\ndef",
        "test": "assert solution(stdin) == \"marywasnosyagain\"",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 4881,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    sum = 0\n    for word in stdin:\n        if int(word) > sum:\n            sum += int(word)\n            answer.append('Even')\n        elif int(word) < sum and int(word) % 2 == 0:\n            sum -= int(word)\n            answer.append('Odd')\n        elif int(word) < sum and int(word) % 2 == 1:\n            sum += int(word)\n            answer.append('Odd')\n        else:\n            answer.append('Either')\n\n    return \"\".join(answer)",
        "test": "assert solution(\"10\"), \"Even\"",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 4882,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 0:\n        n //= 10\n    return str(n)\n",
        "test": "assert solution([\"314\", \"1\", \"5926\", \"5\", \"35897\"]) == \"3\"",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(stdin.split())\n    b = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            b.append(a[i] + a[j])\n    b.sort()\n    for i in b:\n        if i in a:\n            a.remove(i)\n        else:\n            return \"no\"\n    return \"yes\"\n\"\"\"",
        "test": "assert solution(input()) == \"no\"",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 4884,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    contest = int(stdin.strip().split(' ')[0])\n    huffle = int(stdin.strip().split(' ')[1])\n    answer = ''\n    \n    for i in range(contest):\n        answer += str(huffle) +''\n        huffle -= 1\n    answer = answer[:-1]\n    return answer\n\nprint(solution(\"2 1\"))\nprint(solution(\"3 4\"))\nprint(solution(\"5 9\"))\nprint(solution(\"3 5\"))\n",
        "test": "assert solution(\"2 1\") == \"1\"",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    pawns = ['K','Q','R','B','N']\n    kings = ['K','Q','R','B','N']\n    bishops = ['B','N','R','Q','K']\n    rooks = ['R','B','N','Q','K']\n    queens = ['Q','B','N','R','K']\n    knights = ['N','K','R','Q','B']\n    pawns_lower_case = pawns[0].lower() + pawns[1].lower() + pawns[2].lower() + pawns[3].lower() + pawns[4].lower() + pawns[5].lower() + pawns[6].lower() + pawns[7].lower() + pawns[8].lower()\n    kings_lower_case = kings[0].lower() + kings[1].lower() + kings[2].lower() + kings[3].lower() + kings[4].lower() + kings[5].lower() + kings[6].lower() + kings[7].lower() + kings[8].lower() + kings[9].lower()\n    bishops_lower_case = bishops[0].lower() + bishops[1].lower() + bishops[2].lower() + bishops[3].lower() + bishops[4].lower() + bishops[5].lower() + bishops[6].lower() + bishops[7].lower() + bishops[8].lower() + bishops[9].lower() + bishops[10].lower()\n    rooks_lower_case = rooks[0].lower() + rooks[1].lower() + rooks[2].lower() + rooks[3].lower() + rooks[4].lower() + rooks[5].lower() + rooks[6].lower() + rooks[7].lower() + rooks[8].lower() + rooks[9].lower() + rooks[10].lower()\n    queens_lower_case = queens[0].lower() + queens[1].lower() + queens[2].lower() + queens[3].lower() + queens[4].lower() + queens[5].lower() + queens[6].lower() + queens[7].lower() + queens[8].lower() + queens[9].lower() + queens[10].lower()\n    knights_lower_case = knights[0].lower() + knights[1].lower() + knights[2].lower() + knights[3].lower() + knights[4].lower() + knights[5].lower() + knights[6].lower() + knights[7].lower() + knights[8].lower() + knights[9].lower() + knights[10].lower()\n    pawns_lower_case = pawns_lower_case.lower()\n    kings_lower_case = kings_lower_case.lower()\n    bishops_lower_case = bishops_lower_case.lower()\n    rooks_lower_case = rooks_lower_case.lower()\n    queens_lower_case = queens_lower_case.lower()\n    knights_lower_case = knights_lower_case.lower()\n    \n    position_pawns = pawns_lower_case.index('p')\n    position_queens = queens_lower_case.index('q')\n    position_rooks = rooks_lower_case.index('r')\n    position_bishops = bishops_lower_case.index('b')\n    position_rooks_pawns = rooks_lower_case.index('rp')\n    position_rooks_queens = rooks_lower_case.index('rq')\n    position_rooks_bishops = rooks_lower_case.index('rbb')\n    position_bishops_pawns = bishops_lower_case.index('rb')\n    position_bishops_rooks = bishops_lower_case.index('rbr')\n    position_bishops_rooks_pawns = bishops_lower_case.index('rbp')\n    position_bishops_rooks_queens = bishops_lower_case.index('rbrq')\n    position_bishops_rooks_bishops",
        "test": "assert solution(\"+---+---+---+---+---+---+---+\") == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"",
        "num_ids": 5495,
        "indeed": false
    },
    {
        "number": 4886,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    def get_int(s):\n        if s.isnumeric():\n            return int(s)\n        elif s.isalpha():\n            return int(s)\n        elif s.isdigit():\n            return int(s)\n        else:\n            return -1\n\n    def next_number(i, j):\n        return (i+1)**j\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n % 2 == 0:\n            return False\n        if n % 10 == 9:\n            return True\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    N, K = map(get_int, stdin.split())\n    if K < 10 or N < 10:\n        return \"Error\"\n    if K < K//10:\n        return \"Error\"\n\n    res = \"true\"\n    if is_prime(N):\n        for _ in range(K//2):\n            res = \"false\"\n    else:\n        if (N + next_number(N, K//2)) % 2 == 0:\n            res = \"false\"\n        else:\n            res = \"false\"\n    return res\n\ndef",
        "test": "assert solution(\".# #.",
        "num_ids": 3624,
        "indeed": false
    },
    {
        "number": 4887,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    a = float(stdin)\n    return str(int(math.ceil(a/10)))\n\nSample Input:\n13\nSample Output:\n4\n\"\"\"\ndef",
        "test": "assert solution(input()) == '5'",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 4888,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    T, n, k = list(map(int, stdin.split()))\n    task_queue = [int(i) for i in range(n)]\n    score_dict = {}\n    for i in range(1, n + 1):\n        for j in range(k):\n            score = task_queue[i] + task_queue[i - 1]\n            if score in score_dict:\n                score_dict[score] += 1\n            else:\n                score_dict[score] = 1\n    \n    return str(len(score_dict))\n\n\n-----Brute Force Approach-----\n\ndef",
        "test": "assert solution(\"4 100 5\") == \"3\"",
        "num_ids": 786,
        "indeed": false
    },
    {
        "number": 4889,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    lengths = map(int, stdin.split())\n    sorted_lengths = sorted(lengths)\n    for i in sorted_lengths:\n        l = i\n        x = i\n        while (i+x)<=sorted_lengths[-1]:\n            i += l\n            x += l\n        print(i)\n    return \"\"\n\nsolution(input())",
        "test": "assert solution([\"34\", \"34\"]) == \"5\"",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 4890,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    sodas = [list(map(int, input().split())) for _ in range(n)]\n    capacity = [int(input()) for _ in range(d)]\n    sodas = sorted(sodas, reverse=True)\n    answer = 0\n    for i in range(d):\n        tasks = [0] * m\n        for j in range(m):\n            tasks[j] = capacity[sodas[j][i]]\n        sodas[i] = tasks\n        answer = max(answer, sum(tasks))\n    return answer\n\n\"\"\"\ndef",
        "test": "assert solution(stdin) == \"2 3 0\"",
        "num_ids": 1809,
        "indeed": false
    },
    {
        "number": 4891,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def minMax(x):\n        if x == 1:\n            return -1\n        if x == 2:\n            return 1\n        if x == 3:\n            return -1\n        if x == 4:\n            return 1\n        if x == 5:\n            return -1\n        if x == 6:\n            return 1\n        if x == 7:\n            return -1\n\n    min, max = -1, 10**9\n    for i in range(n):\n        k, q, r, b, n, p = map(int, stdin.split())\n        temp = minMax(k) + minMax(q) + minMax(r) + minMax(b) + minMax(n) + minMax(p)\n        if temp > max:\n            max = temp\n        if temp < min:\n            min = temp\n    return str(max - min)\n",
        "test": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'",
        "num_ids": 6079,
        "indeed": false
    },
    {
        "number": 4892,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n,p = map(int,stdin.split())\n    if n%1000==0:\n        print(int(n/1000))\n    else:\n        print(int(n/1000))\n    \n    def w(d,n):\n        w = 0\n        for i in range(0,len(d)):\n            w += int(p**(len(d)-i-1))\n        return w\n    l = list(map(float,stdin.split()))\n    if l[0]<1:\n        print(0)\n    else:\n        l.sort(reverse=True)\n        for i in range(0,len(l)):\n            if l[i]==1:\n                j=i+1\n                while j<len(l):\n                    if l[j]==1:\n                        break\n                    j+=1\n                if l[i]==l[j]:\n                    print(w(l[i],n),end='')\n                    return\n                else:\n                    return\n    print(0)\nsolution(stdin)\n",
        "test": "assert solution(stdin) == 1.3334, 'The solution does not return correct number of attempts'",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 4893,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin[0])\n    n = int(stdin[1])\n    dp = [1] + [0] * n\n    for i in range(1, n+1):\n        for j in range(n):\n            if p > 0:\n                dp[j] += dp[j+1] * (p - j)\n            if i > 0:\n                dp[j] += dp[j-1] * (p - i)\n    return str(max(dp))",
        "test": "assert solution([\"1\",\"2\",\"4\"]) == \"1\"",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 4894,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    out = \"\"\n    for line in stdin.splitlines():\n        out += \" \".join(line.split()) + \" \"\n    return out.rstrip()",
        "test": "assert solution('') == ''",
        "num_ids": 3484,
        "indeed": false
    },
    {
        "number": 4895,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for _ in range(N):\n        s = list(stdin.split(' '))\n        if len(s)!= 3:\n            return \"possible\"\n        a, b, c = s\n        if a >= b and a >= c:\n            a = a - b - c\n        if b >= a and b >= c:\n            b = b - a - c\n        if c >= a and c >= b:\n            c = c - a - b\n        if (a + b + c)!= 2 * a * b * c:\n            return \"possible\"\n    return \"possible\"\n\nprint(solution(\"1 4 1 1\"))",
        "test": "assert solution(input) == \"possible\"",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 4896,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    lst = [map(int, stdin.split()) for _ in range(int(stdin))]\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    lst = lst[::2]\n    for i in range(len(lst)):\n        if lst[i][0] > lst[i + 1][0]:\n            lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return str(len(lst))\n'''\n\ndef",
        "test": "assert solution(\"1 4 2 2 3\") == 2",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    runners = {}\n    for i in range(len(data)):\n        runners[data[i].split()[0]] = data[i].split()[1]\n    runners = sorted(runners.items(), key=lambda x: float(x[1]))\n    max_gap = 0\n    for runner in runners:\n        if runner[1] == runners[0][1]:\n            continue\n        else:\n            max_gap += abs(int(runner[1]) - int(runners[0][1]))\n    return str(round(abs(max_gap / 2), 3)) + \"ms\"",
        "test": "assert solution([\"ASHMEADE\", \"9.90\", \"8.83\", \"8.83\", \"8.90\", \"8.92\", \"8.83\", \"8.90\", \"8.93\", \"8.85\", \"8.83\"]) == \"35.54\"",
        "num_ids": 3719,
        "indeed": false
    },
    {
        "number": 4898,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    minions = []\n    \n    for i in stdin.split():\n        minions.append(int(i))\n    \n    minion1, minion2 = minions[0], minions[-1]\n    \n    n = len(minions)\n    \n    for i in range(n):\n        if minions[i] == minion1:\n            if minion2 - minions[i] < 2:\n                minion2 = minions[i]\n            else:\n                minion2 = minions[i] - 2\n        elif minions[i] == minion2:\n            if minion1 - minions[i] < 2:\n                minion1 = minions[i]\n            else:\n                minion1 = minions[i] - 2\n    \n    return str(minion1) + \" \" + str(minion2)\n",
        "test": "assert solution(stdin) == 2",
        "num_ids": 2767,
        "indeed": false
    },
    {
        "number": 4899,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"heey\", \"\")\n",
        "test": "assert solution(\"hi\") == \"hi\"",
        "num_ids": 2230,
        "indeed": false
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    map = [list(map(int, stdin[i:i+n].split())) for i in range(0, n, n)]\n    table = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = max(map[i][j], map[i][j + 1]) + map[i][j + 1]\n    for i in range(n-1):\n        for j in range(i+1, n):\n            table[j][i] = max(map[i][j], map[i+1][j]) + map[i+1][j]\n    return \"\".join(str(i) for i in table)",
        "test": "assert solution('a3') == 'a2'",
        "num_ids": 1784,
        "indeed": false
    },
    {
        "number": 4901,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    h = len(stdin)\n    result = ''\n    # Split string and count\n    for i in range(h):\n        stdin = stdin.replace(stdin[i], stdin[(i + 1) % h])\n    # Rotate by 90 degrees and sum up to get answer\n    for i in range(h):\n        stdin = stdin[i] + stdin[i] + stdin[i] + stdin[i]\n        result += stdin\n    # Rotate by 90 degrees and sum up to get answer\n    for i in range(h):\n        stdin = stdin[i] + stdin[i] + stdin[h - i - 1] + stdin[h - i - 1]\n        result += stdin\n    return result\n",
        "test": "assert solution(input()) == 'ABCD', 'Expected string: ABCD'",
        "num_ids": 2683,
        "indeed": false
    },
    {
        "number": 4902,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(set(stdin)))\n\"\"\"\n    from collections import Counter\n    \n    count = Counter(stdin)\n    \n    d = 0\n    \n    for i in count:\n        if count[i] <= d:\n            d = count[i]\n            \n    return str(d)\n",
        "test": "assert solution(\"abc\") == \"abc\"",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 4903,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    res = \"\"\n    for i in stdin:\n        if i == 'h':\n            if res == \"go\":\n                res = \"no\"\n            else:\n                res = \"go\"\n        else:\n            res += i\n    return res",
        "test": "assert solution(\"aaaaah\") == \"go\"",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 4904,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.strip().split()))\n    a = a - a + a + a\n    b = b - b + b + b\n    answer = []\n    while a > 0:\n        answer.append('A')\n        a = a // b\n    answer.reverse()\n    if a > 0:\n        answer.append('B')\n    return ''.join(answer)\n\nSample Output:\nB\n",
        "test": "assert solution([\"A2B1A2B2A1A2A2A2\", \"A2B1A2B2A1A2A2A2\", \"A2B1A2B2A1A2A2A2\"]) == \"B\"",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 4905,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, g = map(int, stdin.split())\n    visit = list(map(int, stdin.split()))\n    \n    min_time = n * (k - (n - g) * g)\n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if visit[j - 1] - 1 >= 0:\n                visit[j - 1] -= 1\n            else:\n                visit[j - 1] = -1\n    \n    for i in range(m):\n        min_time += visit[i] * visit[i] * visit[i]\n        \n    return str(min_time)",
        "test": "assert solution('5 3 2 4'), \"14\"",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 4906,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    \n    from collections import deque\n    \n    stdin = deque(stdin)\n    answer = ''\n    \n    while len(stdin)!= 0:\n        answer += stdin.popleft()\n        if len(stdin)!= 0:\n            if stdin[0] in ['!', '.', '?'] and stdin[-1] in ['!', '.', '?']:\n                answer += stdin.pop()\n            else:\n                answer += stdin.pop()\n            \n    return answer\n\n\"\"\"",
        "test": "assert solution(",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 4907,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(i) for i in stdin.split()]\n    answer = 0\n    \n    def canBreak(n):\n        if n < 2: return True\n        if n < 5: return True\n        if n < 10: return True\n        if n < 25: return True\n        if n < 40: return True\n        return False\n    \n    for i in range(data[0]):\n        if canBreak(i + 1) and canBreak(i + 2):\n            answer = i + 2\n            return answer\n    return answer\n\nSample Output:\nAlice\n\nExplanation:\n1 and 2 are good moves.\n2 and 4 are good moves.\n6 is not a good move.\n\nInput:\n5\n1 4\n\nOutput:\nAlice\n4\n",
        "test": "assert solution(\"4\") == \"Alice\"",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 4908,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n    \n    if b + c == a:\n        return str(a) + '+' + str(b) + '=' + str(c)\n    else:\n        return 'error'\n\nSample Output:\n5+3=8\n\nExplanation:\nMirko\u2019s solution is a valid equation, but he\u2019s not completely correct.\n\n-----Constraints-----\n0 \u2264 stdin.length \u2264 100\n1 \u2264 a,b,c \u2264 100\n\n-----Submissions-----\nSample Execution Example 1:\nInput:\n5 3 8\nOutput:\n5+3=8\n\nExplanation:\nMirko\u2019s solution is a valid equation, but he\u2019s not completely correct.\n\n-----Constraints-----\n0 \u2264 stdin.length \u2264 100\n1 \u2264 a,b,c \u2264 100\n\n-----Submissions-----\nSample Execution Example 2:\nInput:\n9 3 8\nOutput:\n9+3=8\n\nExplanation:\nMirko\u2019s solution is a valid equation, but he\u2019s not completely correct.\n\n------Constraints------\n0 \u2264 stdin.length \u2264 100\n1 \u2264 a,b,c \u2264 100\n\n------Submissions------\nSample Execution Example 3:\nInput:\n10 3 8\nOutput:\n10+3=8\n\nExplanation:\nMirko\u2019s solution is a valid equation, but he\u2019s not completely correct.\n\n------Constraints------\n0 \u2264 stdin.length \u2264 100\n1 \u2264 a,b,c \u2264 100\n\n------Submissions------\nSample Execution Example 4:\nInput:\n12 3 8\nOutput:\n12+3=8\n\nExplanation:\nMirko\u2019s solution is a valid equation, but he\u2019s not completely correct.\n\n------Constraints------\n0 \u2264 stdin.length \u2264 100\n1 \u2264 a,b,c \u2264 100\n\n------Submissions------\nSample Execution Example 5:\nInput:\n3 3 4\nOutput:\n3+4=8\n\nExplanation:\nMirko\u2019s solution is a valid equation, but he\u2019s not completely correct.\n\n------Constraints------\n0 \u2264 stdin.length \u2264 100\n1 \u2264 a,b,c \u2264 100\n\n------Submissions------\nSample Execution Example 6:\nInput:\n3 3 3\nOutput:\n3+3=8\n\nExplanation:\nMirko\u2019s solution is a valid equation, but he\u2019s not completely correct.\n\n------Constraints------\n0 \u2264 stdin.length \u2264 100\n1 \u2264 a,b,c \u2264 100\n\n------Submissions------\n\"\"\"\n\nclass Solution:\n    def solve(self, A, B, C):\n        if A+B+C == 0:\n            return \"error\"\n        else:\n            return str(A+B+C) + '+' + str(A) + '=' + str(B+C)",
        "test": "assert solution(",
        "num_ids": 2998,
        "indeed": false
    },
    {
        "number": 4909,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nSample Input:\n3\n3 4 1\n3 2 1 2 3\nSample Output:\nNO\n\"\"\"\n\n\"\"\"\nAlgorithm:\n    Let A is the upperbound of the first room, B is the lowerbound of the first room, and C and D are the upperbound of the room in which the two rooms are connected.\n    Then, if C = D, then A and B are not included in the overall answer.\n    Then, if C = D, then B is not included in the overall answer.\n    If C = D, then A and B are not included in the overall answer.\n    Otherwise, A and B are not included in the overall answer.\n    For example, if the first room has 2 rooms, and the second room has 2 rooms, then, if C = D, then the answer will be NO.\n    Then, if C = D, then the answer will be YES.\n\n\"\"\"\n\nclass Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        n = len(rooms)\n        visited = [0] * n\n        for i in range(n):\n            if visited[i] == 0:\n                self.dfs(rooms, i, visited)\n        return True\n        \n    def dfs(self, rooms, i, visited):\n        for j in range(i):\n            if visited[j] == 0:\n                visited[j] = 1\n                self.dfs(rooms, j, visited)\n        \n            \nclass Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        n = len(rooms)\n        visited = [0] * n\n        for i in range(n):\n            if visited[i] == 0:\n                self.dfs(rooms, i, visited)\n            \n        return True\n        \n    def dfs(self, rooms, i, visited):\n        if i >= len(rooms):\n            return True\n        if visited[i] == 0:\n            visited[i] = 1\n            for j in range(i + 1, len(rooms)):\n                if visited[j] == 0:\n                    if self.dfs(rooms, j, visited):\n                        return True\n            \n        return False",
        "test": "assert solution('2 3 2') == 'NO'",
        "num_ids": 2687,
        "indeed": false
    },
    {
        "number": 4910,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.strip().split()[0])\n    cat = stdin.strip().split()[1:]\n    nums = [str(i) for i in range(num+1)]\n    cat.sort()\n    nums.sort()\n    categories = []\n    for i in cat:\n        nums.remove(i)\n        categories.append(nums)\n    return categories[nums.index(str(num))]\n",
        "test": "assert solution(stdin), \"Expected 'demon' to be printed but got '%s'\" % stdin",
        "num_ids": 678,
        "indeed": false
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    return(str(sorted(stdin.split())))\n\n-----See https://docs.python.org/3/library/stdtypes.html for more details on sorting/sorting data types\n\n'''\n",
        "test": "assert solution(\"5 10 10 2 4\") == \"2 4 5 10\"",
        "num_ids": 1884,
        "indeed": false
    },
    {
        "number": 4912,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solve(h, w, n, x):\n        if x == 1:\n            return True\n        elif x == 2:\n            return n % (h + 1) == 0 or n % (w + 1) == 0\n        else:\n            return solve(h, w, n, x - 1) or solve(h, w, n, x - 2) or solve(h, w, n, x - 3) or solve(h, w, n, x - 4) or solve(h, w, n, x - 5) or solve(h, w, n, x - 6)\n        \n    if stdin == 'YES':\n        return 'YES' if solve(int(input()), int(input()), int(input()), int(input())) else 'NO'\n    else:\n        print(\"NO\")\n        return \"NO\"",
        "test": "assert solution('1 1 1') == 'NO'",
        "num_ids": 975,
        "indeed": false
    },
    {
        "number": 4913,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = stdin.strip().split()\n    \n    vaccine_status = [\"Y\", \"N\"]\n    if (N[0] == \"Y\"):\n        vaccine_status.pop(0)\n        \n    if (N[0] == \"N\"):\n        vaccine_status.append(\"Y\")\n        vaccine_status.pop(0)\n        \n    for i in range(1, len(N)):\n        if(N[i] == \"Y\"):\n            vaccine_status[0] = vaccine_status[0] + \"Y\"\n        else:\n            vaccine_status[0] = vaccine_status[0] + \"N\"\n            \n    for j in range(1, len(N)):\n        if(N[j] == \"Y\"):\n            vaccine_status[j] = vaccine_status[j] + \"Y\"\n        else:\n            vaccine_status[j] = vaccine_status[j] + \"N\"\n    \n    print(''.join(vaccine_status))\n    return ''.join(vaccine_status)\n    \n    \n",
        "test": "assert solution(\"4\") == \"1\"",
        "num_ids": 2466,
        "indeed": false
    },
    {
        "number": 4914,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    c = stdin[1]\n    d = stdin[2]\n    \n    for i in range(n):\n        c,d = d,c\n        for j in range(i+1):\n            if c == d:\n                break\n            elif j == 0:\n                c = c + stdin[i+1]\n            else:\n                c = c + stdin[i+1]\n                d = d + stdin[j]\n        else:\n            if c == d:\n                print(d, end=\" \")\n            else:\n                print(c,end=\" \")\n\ndef",
        "test": "assert solution(input) == \"3\"",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    time = [0] * n\n    for i in range(n):\n        x = stdin.splitlines()[i].split()\n        time[i] = int(x[0])\n    return str(sum(time))",
        "test": "assert solution(stdin) == '3 543'",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin[:n])\n    x = int(stdin[n:])\n    x = [0] * x + [1]\n    y = [0] * x[n]\n    for i in range(n):\n        for j in range(x[i]):\n            y[j] = i\n    x[n] = y[n]\n    for j in range(k):\n        for i in range(x[j], x[j + 1]):\n            y[i] = j\n    return \"\".join(str(i) for i in y)",
        "test": "assert solution
        "num_ids": 2946,
        "indeed": false
    },
    {
        "number": 4917,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a, b = map(int, stdin.split())\n    answer = -1\n    \n    def counting(a, b):\n        count = 0\n        for i in range(a, b+1):\n            count += 1 if i == 0 else count\n            \n        return count\n    \n    def check(s):\n        global answer\n        \n        if s == 'gunilla':\n            answer = counting(a, b)\n        elif s == 'def':\n            answer = min(answer, counting(a, b-1))\n        else:\n            answer = min(answer, counting(a+1, b))\n        \n    for i in range(N):\n        if i == 0:\n            check(stdin.split()[1])\n        else:\n            check(stdin.split()[1]+' '+stdin.split()[0])\n        \n    return str(answer)\n",
        "test": "assert solution(stdin) == 'gunilla has a point'",
        "num_ids": 4099,
        "indeed": false
    },
    {
        "number": 4918,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    if q == 0:\n        return '0'\n    print(solution([(n, 1), (n, 2), (n, 3), (n, 4), (n, 5), (n, 6)]))\n    return '0'\n'''\n\ndef",
        "test": "assert solution(\"10 3\") == \"2\"",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, q, k = map(int, stdin.split())\n    country = list(stdin.split())\n    \n    if n <= 0 or k <= 0 or len(country) <= 0 or len(country[0]) > 20:\n        return \"\"\n    \n    # assume y in n is < y < y + n\n    y = n\n    \n    # to start from the beginning of y\n    if n == 1:\n        y -= 1\n    \n    answer = []\n    \n    for i in range(n):\n        # find the country's name\n        # if country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Norway']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Sweden'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Norway'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland', 'Iceland']:\n        #     country[i] = 'Iceland'\n        # elif country[i] in ['Iceland', 'Sweden', 'Norway', 'Iceland', 'Iceland', 'Iceland',",
        "test": "assert solution(",
        "num_ids": 3782,
        "indeed": false
    },
    {
        "number": 4920,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    lst = [0] * 26\n    for i in range(n):\n        lst[ord(stdin[i]) - ord('a')] += 1\n    for i in range(1, 26):\n        lst[i] = lst[i] % n\n    return str(lst[1] * lst[2])\n",
        "test": "assert solution(\"aabbccddeeffgfg\"), \"aabbccddeeffgfg\"",
        "num_ids": 874,
        "indeed": false
    },
    {
        "number": 4921,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(x.lower() for x in stdin.strip().split() if x.lower().replace(' ', '').isalpha())\n",
        "test": "assert solution(\"Inefficiency is a blight on the world and its humanity\") == \". is a blight on..\" and its humanity\"",
        "num_ids": 2437,
        "indeed": false
    },
    {
        "number": 4922,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    \n    def check(x, y):\n        if y == x:\n            return True\n        \n        for i in range(len(x)):\n            if check(x[:i] + x[i + 1 :], y):\n                return True\n        return False\n    \n    return 'unsatisfactory' if check([], 0) else'satisfactory'",
        "test": "assert solution('1 -2 -3') =='satisfactory'",
        "num_ids": 2354,
        "indeed": false
    },
    {
        "number": 4923,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n < n:\n        a = list(map(int, map(str, map(str, str(a)))))\n    elif n < n*n:\n        a = list(map(int, map(str, map(str, map(str, str(a)))))[:n])\n    else:\n        a = list(map(int, map(str, map(str, map(str, str(a))))))\n    a.sort()\n    a.append(a[-1] + a[-2])\n    return str(a.index(a[-1]))\n",
        "test": "assert solution(",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 4924,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(lower, upper, target):\n        while lower <= upper:\n            mid = (lower + upper) // 2\n            if (mid % 2) == 1:\n                mid += 1\n            if target == mid:\n                return mid\n            elif target < mid:\n                upper = mid - 1\n            else:\n                lower = mid + 1\n        return lower + 1\n    def count_target(lower, upper, target):\n        count = 0\n        while lower <= upper:\n            mid = (lower + upper) // 2\n            if target == mid:\n                return mid\n            elif target < mid:\n                upper = mid - 1\n            else:\n                lower = mid + 1\n        return lower + 1\n    n = stdin.split()\n    print(binary_search(int(n[0]), int(n[1]), int(n[2])))\n    print(count_target(int(n[0]), int(n[1]), int(n[2])))\n",
        "test": "assert solution(\"05:00:00\") == \"23:59:59\"",
        "num_ids": 1187,
        "indeed": false
    },
    {
        "number": 4925,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return '4'\n'''\n\nimport sys",
        "test": "assert solution(\"4\") == 1",
        "num_ids": 3661,
        "indeed": false
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    from math import log2\n    n = int(stdin)\n    from fractions import Fraction\n    from sys import stdin\n    def solution(n):\n        if n == 0:\n            return 1.0\n        elif n <= 1:\n            return int(n)\n        elif n % 2 == 0:\n            return int(Fraction(2, n)) * solution(n//2) + solution(n//2) + (n-1)\n        elif n % 2 == 1:\n            return int(Fraction(2, n)) * solution(n//2 - 1) + solution(n//2) + (n-1)\n    return str(solution(n))\n\nSample Input:\n2\nSample Output:\n1\n\nSample Input:\n4\nSample Output:\n0.3333333333333333\n\"\"\"\n\ndef",
        "test": "assert solution(",
        "num_ids": 2130,
        "indeed": false
    },
    {
        "number": 4927,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        N,P,Q = map(int,input().split())\n        if N > P or N > Q or P > Q:\n            print('invalid')\n            continue\n        if N % 2 == 1 and P % 2 == 1:\n            print('invalid')\n            continue\n        if N % 2!= 1 and P % 2 == 1:\n            print('invalid')\n            continue\n        if N == P or P == Q or Q == N:\n            print('invalid')\n            continue\n        if N % 2!= 1 and P % 2 == 1:\n            print('invalid')\n            continue\n        if N % 2!= 1:\n            print('invalid')\n            continue\n        if P % 2!= 1:\n            print('invalid')\n            continue\n        if Q % 2!= 1:\n            print('invalid')\n            continue\n        if N!= P + Q or P!= Q + N:\n            print('invalid')\n            continue\n        print('paul')\n    return 'paul'\n\n-----Constraints-----\n1 <= N, P, Q <= 10^9\n\n-----Constraints Accepted-----\nTime Limit: 1 second\n\n-----Bug Fixes-----\n-1 for Q in [1, 2] is not allowed to be used when N is odd\n-1 for P in [1, 2] is not allowed to be used when N is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4] is not allowed to be used when N is even\n\n-----Bug Fixes-----\n-1 for P in [1, 2] is not allowed to be used when P is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4] is not allowed to be used when N is odd\n\n-----Bug Fixes-----\n-1 for Q in [1, 2] is not allowed to be used when Q is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4] is not allowed to be used when N is odd\n\n-----Bug Fixes-----\n-1 for P in [1, 2] is not allowed to be used when P is even\n\n-----Bug Fixes-----\n-1 for Q in [1, 2] is not allowed to be used when Q is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4] is not allowed to be used when N is odd\n\n-----Bug Fixes-----\n-1 for P in [1, 2] is not allowed to be used when P is even\n\n-----Bug Fixes-----\n-1 for Q in [1, 2] is not allowed to be used when Q is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4] is not allowed to be used when N is odd\n\n-----Bug Fixes-----\n-1 for P in [1, 2] is not allowed to be used when P is even\n\n-----Bug Fixes-----\n-1 for Q in [1, 2] is not allowed to be used when Q is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4] is not allowed to be used when N is odd\n\n-----Bug Fixes-----\n-1 for P in [1, 2] is not allowed to be used when P is even\n\n-----Bug Fixes-----\n-1 for Q in [1, 2] is not allowed to be used when Q is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4] is not allowed to be used when N is odd\n\n-----Bug Fixes-----\n-1 for P in [1, 2] is not allowed to be used when P is even\n\n-----Bug Fixes-----\n-1 for Q in [1, 2] is not allowed to be used when Q is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4] is not allowed to be used when N is odd\n\n-----Bug Fixes-----\n-1 for P in [1, 2] is not allowed to be used when P is even\n\n-----Bug Fixes-----\n-1 for Q in [1, 2] is not allowed to be used when Q is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4] is not allowed to be used when N is odd\n\n-----Bug Fixes-----\n-1 for P in [1, 2] is not allowed to be used when P is even\n\n-----Bug Fixes-----\n-1 for Q in [1, 2] is not allowed to be used when Q is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4] is not allowed to be used when N is odd\n\n-----Bug Fixes-----\n-1 for P in [1, 2] is not allowed to be used when P is even\n\n-----Bug Fixes-----\n-1 for Q in [1, 2] is not allowed to be used when Q is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4] is not allowed to be used when N is odd\n\n-----Bug Fixes-----\n-1 for P in [1, 2] is not allowed to be used when P is even\n\n-----Bug Fixes-----\n-1 for Q in [1, 2] is not allowed to be used when Q is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4] is not allowed to be used when N is odd\n\n-----Bug Fixes-----\n-1 for P in [1, 2] is not allowed to be used when P is even\n\n-----Bug Fixes-----\n-1 for Q in [1, 2] is not allowed to be used when Q is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4] is not allowed to be used when N is odd\n\n-----Bug Fixes-----\n-1 for P in [1, 2] is not allowed to be used when P is even\n\n-----Bug Fixes-----\n-1 for Q in [1, 2] is not allowed to be used when Q is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4] is not allowed to be used when N is odd\n\n-----Bug Fixes-----\n-1 for P in [1, 2] is not allowed to be used when P is even\n\n-----Bug Fixes-----\n-1 for Q in [1, 2] is not allowed to be used when Q is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4] is not allowed to be used when N is odd\n\n-----Bug Fixes-----\n-1 for P in [1, 2] is not allowed to be used when P is even\n\n-----Bug Fixes-----\n-1 for Q in [1, 2] is not allowed to be used when Q is even\n\n-----Bug Fixes-----\n-1 for N in [3, 4]",
        "test": "assert solution(\"2 1 2\") == \"opp\"",
        "num_ids": 5158,
        "indeed": false
    },
    {
        "number": 4928,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # N - 1\n    # N - 2\n    #...\n    # N\n    \n    # N - (N-1)\n    # N - (N-2)\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N\n    \n    # N - (N-1)\n    # N - (N-2)\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    # N - 1\n    # N - 2\n    #...\n    ",
        "test": "assert solution(test_input) == answer",
        "num_ids": 3826,
        "indeed": false
    },
    {
        "number": 4929,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    phoneNum = []\n    password = []\n    for line in stdin:\n        phoneNum.append(line[:3])\n        password.append(line[4:])\n    \n    for index in range(len(password)):\n        if len(password[index]) < 3 or len(password[index]) > 12:\n            return \"No\"\n        if password[index][0] in phoneNum:\n            continue\n        else:\n            if len(password[index]) < 3 or len(password[index]) > 12:\n                return \"No\"\n            if password[index][:3].isalpha() and password[index][3].isalpha():\n                continue\n            else:\n                return \"No\"\n    return \"Yes\"\n",
        "test": "assert solution(\"123abcdef\") == \"No\"",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 4930,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(sorted(list(set(stdin.split()))))\n",
        "test": "assert solution(\"abcde\") == \"abcde\"",
        "num_ids": 2232,
        "indeed": false
    },
    {
        "number": 4931,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,stdin.split())\n    for i in range(min(a,b),max(a,b)+1):\n        if i == 0:\n            return 'IMPOSSIBLE'\n        elif i == 1:\n            return str(i) + '.'\n        elif i == 2:\n            return str(i) + '0'\n        else:\n            return str(i) + '0' + solution(str(i))\n",
        "test": "assert solution(input()) == \"IMPOSSIBLE\"",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 4932,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    P, M, G = map(int, stdin.split())\n    if (A+B+C+D) == P*(M+G) or (A+B+C+D) == (P+M+G) or (A+B+C+D) == (P+M+G) * C + G:\n        return \"both\"\n    elif (A+B+C+D) == P*(M+G) or (A+B+C+D) == (P+M+G) * C or (A+B+C+D) == (P+M+G) * C * D:\n        return \"one\"\n    else:\n        return \"none\"\n\nThe first line contains the standard input, the second line contains the standard input, the third line contains the standard input, the fourth line contains the standard input.\n\nThe fourth line contains the integer $P$, $M$ and $G$.\n\nThe fifth line contains the integer $A$, $B$ and $D$.\n\nThe sixth line contains the integer $A$ and $B$ and $D$.\n\nThe seventh line contains the integer $A$ and $B$ and $D$ and $E$.\n\nThe eighth line contains the standard input.\n\"\"\"\n\nfrom typing import List\nimport math\n\n\ndef",
        "test": "assert solution(input()) == \"none\"",
        "num_ids": 1695,
        "indeed": false
    },
    {
        "number": 4933,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    nums = list(map(int, stdin.split()))\n    for i in range(1, len(nums), 2):\n        answer = answer + str(nums[i] - nums[i-1])\n    return answer\n",
        "test": "assert solution(f(9,9,9,99)) == 9",
        "num_ids": 2323,
        "indeed": false
    },
    {
        "number": 4934,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    h, v = map(int, stdin.split())\n    l = abs(v - (h + 1) % 360)\n    return str(l)\n",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n,g = map(int,stdin.split())\n    answer = 0\n    for _ in range(n):\n        a,b = map(int,stdin.split())\n        answer += (b - a) / g\n    return str(answer)\nprint(solution(input()))\n-----------------------------------------------------------------------------------------------------------------------------------------------------\n\ndef",
        "test": "assert solution
        "num_ids": 3590,
        "indeed": false
    },
    {
        "number": 4936,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(stdin[0]), int(stdin[1]))) +'' + str(max(int(stdin[0]), int(stdin[2])))\n",
        "test": "assert solution(['23', '27', '31', '28', '30', '']), '1'",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 4937,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    def get_num(a: int, b: int) -> int:\n        if a == 0:\n            if b % 2 == 0:\n                return (b + 1) // 2\n            else:\n                return (b + 1) // 2\n        elif b == 0:\n            if a % 2 == 0:\n                return (a + 1) // 2\n            else:\n                return (a + 1) // 2\n        elif a % 2 == 0:\n            return (a + b) // 2\n        else:\n            return (a + b) // 2\n\n    def get_ship_no(a: int) -> int:\n        if a == 0:\n            return 0\n        else:\n            return (a + 1) * (a + 1) // 2\n\n    N, A = map(int, stdin.split())\n    ship_no = A\n    ship_list = list()\n    num_ship = 0\n\n    for _ in range(N):\n        a, b = map(int, stdin.split())\n        ship_list.append(a)\n        ship_list.append(b)\n        num_ship += a * b\n        num_ship += get_num(a, b)\n\n    max_num_ship = max(num_ship, ship_no)\n    # If the number of ships exceeds one, the solution is the solution of the problem\n\n    for i in range(1, max_num_ship + 1):\n        if i % 2 == 0:\n            num_ship = i\n            ship_no = get_ship_no(i)\n            ship_list = list()\n            for a in range(1, ship_no + 1):\n                ship_list.append(a)\n            ship_list = sorted(ship_list, reverse=True)\n            # Sort the ships by their no.\n            ship_list.sort(key=lambda x: x * -1)\n            # Shift the ships to the left\n            for x in range(len(ship_list)):\n                ship_list[x] += 1\n            # Sum the amount of ships needed\n            num_ship = ship_list[0]\n            ship_no = get_ship_no(num_ship)\n            ship_list = list()\n            for a in range(1, ship_no + 1):\n                ship_list.append(a)\n            ship_list = sorted(ship_list, reverse=True)\n            ship_list.sort(key=lambda x: x * -1)\n            # Shift the ships to the left\n            for x in range(len(ship_list)):\n                ship_list[x] += 1\n            ship_list.sort(key=lambda x: x * -1)\n            if ship_list[0] > ship_list[1]:\n                num_ship = ship_list[0]\n                ship_no = get_ship_no(num_ship)\n                ship_list = list()\n                for a in range(1, ship_no + 1):\n                    ship_list.append(a)\n                ship_list = sorted(ship_list, reverse=True)\n                ship_list.sort(key=lambda x: x * -1)\n                # Shift the ships to the left\n                for x in range(len(ship_list)):\n                    ship_list[x] += 1\n                ship_list.sort(key=lambda x: x * -1)\n                if ship_list[0] > ship_list[1]:\n                    num_ship = ship_list[0]\n                    ship_no = get_ship_no(num_ship)\n                    ship_list = list()\n                    for a in range(1, ship_no + 1):\n                        ship_list.append(a)\n                    ship_list = sorted(ship_list, reverse=True)\n                    ship_list.sort(key=lambda x: x * -1)\n                    # Shift the ships to the left\n                    for x in range(len(ship_list)):\n                        ship_list[x] += 1\n                    ship_list.sort(key=lambda x: x * -1)\n                    if ship_list[0] > ship_list[1]:\n                        num_ship = ship_list[0]\n                        ship_no = get_ship_no(num_ship)\n                        ship_list = list()\n                        for a in range(1, ship_no + 1):\n                            ship_list.append(a)\n                        ship_list = sorted(ship_list, reverse=True)\n                        ship_list.sort(key=lambda x: x * -1)\n                        if ship_list[0] > ship_list[1]:\n                            num_ship = ship_list[0]\n                            ship_no = get_ship_no(num_ship)\n                            ship_list = list()\n                            for a in range(1, ship_no + 1):\n                                ship_list.append(a)\n                            ship_list = sorted(ship_list, reverse=True)\n                            ship_list.sort(key=lambda x: x * -1)\n                            if ship_list[0] > ship_list[1]:\n                                num_ship = ship_list[0]\n                                ship_no = get_ship_no(num_ship)\n                                ship_list = list()\n                                for a in range(1, ship_no + 1):\n                                    ship_list.append(a)\n                                ship_list = sorted(ship_list, reverse=True)\n                                ship_list.sort(key=lambda x: x * -1)\n                                if ship_list[0] > ship_list[1]:\n                                    num_ship = ship_list[0]\n                                    ship_no = get_ship_no(num_ship)\n                                    ship_list = list()\n                                    for a in range(1, ship_no + 1):\n                                        ship_list.append(a)\n                                    ship_list = sorted(ship_list, reverse=True)\n                                    ship_list.sort(key=lambda x: x * -1)\n                                    if ship_list[0] > ship_list[1]:\n                                        num_ship = ship_list[0]\n                                        ship_no = get_ship_no(num_ship)\n                                        ship_list = list()\n                                        for a in range(1, ship_no + 1):\n                                            ship_list.append(a)\n                                        ship_list = sorted(ship_list, reverse=True)\n                                        ship_list.sort(key=lambda x: x * -1)\n                                        if ship_list[0] > ship_list[1]:\n                                            num_ship = ship_list[0]\n                                            ship_no = get_ship_no(num_ship)\n                                            ship_list = list()\n                                            for a in range(1, ship_no + 1):\n                                                ship_list.append(a)\n                                            ship_",
        "test": "assert solution(\"3 5\") == \"0\"",
        "num_ids": 3499,
        "indeed": false
    },
    {
        "number": 4938,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = [line.strip() for line in stdin.split('\\n')]\n    c = 0\n    for line in stdin_lines:\n        line = list(line)\n        if line[0] == 'W':\n            for i in range(1, len(line)):\n                line[i] = 'M'\n        else:\n            for i in range(1, len(line)):\n                if line[i] == 'W':\n                    line[i] = 'M'\n                elif line[i] == 'M':\n                    line[i] = 'W'\n        c += 1\n        if c == len(stdin_lines):\n            break\n    return ''.join(line)\n",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 4939,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    for _ in range(n):\n        stdin = stdin.replace(str(_), str(m))\n    return stdin\n\nSample Output:\n3\ndef",
        "test": "assert solution([\"3\", \"3\", \"0\", \"2\"]) == \"3\"",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    a = list(map(int,stdin.split()))\n    q=[]\n    q.append(a[0])\n    i = 1\n    for x in a[1:]:\n        if i == n:\n            i = 0\n        if x==q[-1]:\n            i+=1\n            q.append(x)\n        else:\n            q.append(x)\n            i+=1\n    for x in q:\n        print(x,end=' ')\n    return '\\n'\n\n\nsolution(\"2 3\")\n\n\n'''\n\nimport sys\nimport random\n\nN = int(input())\nM = int(input())\ntimes = [0] * M\n\nfor _ in range(N):\n    times[int(input())-1] += 1\n\nfor i in range(M):\n    print(times[i], end=' ')\n\nprint('\\n')\nprint(sum(times))\nprint('\\n')\n\nfor i in range(N):\n    if times[i] == 0:\n        print(i, end=' ')\n\n'''",
        "test": "assert solution('3 2 2 4') == '6 7'",
        "num_ids": 1329,
        "indeed": false
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(stdin) == \"64 correct\"",
        "num_ids": 2799,
        "indeed": false
    },
    {
        "number": 4942,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    day = 0\n    tree = [0] * 1000001\n    for line in stdin:\n        tree[int(line)] += 1\n        if tree[int(line)] > 2:\n            day += 1\n    return str(day)\n",
        "test": "assert solution(stdin) == \"7\"",
        "num_ids": 2253,
        "indeed": false
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N,A = map(int,stdin.split())\n    s = []\n    while N:\n        s.append(list(map(int,input().split())))\n        N-=1\n    s.sort()\n    a = []\n    for i in range(N):\n        a.append((s[i][0],s[i][1]))\n    c = []\n    for i in range(N):\n        c.append((-s[i][1],s[i][0]))\n    l,r = a[0],a[-1]\n    for i in range(1,N):\n        l = l[0]\n        r = r[1]\n        l[0],l[1] = (l[0] - r[0],l[1] - r[1])\n        l[1],l[2] = (l[1],l[2] - r[1])\n        l[3],l[4] = (l[3],l[4] - r[3])\n        l[5],l[6] = (l[5],l[6] - r[5])\n        l[7],l[8] = (l[7],l[8] - r[7])\n        l[9],l[10] = (l[9],l[10] - r[9])\n        l[11],l[12] = (l[11],l[12] - r[11])\n    while l[0] == 0 and l[1] == 0:\n        l = l[2]\n    while r[0] == 0 and r[1] == 0:\n        r = r[2]\n    c.sort()\n    l[0],l[1] = (l[1] - l[0],l[0])\n    l[3],l[4] = (l[3] - l[1],l[1])\n    l[5],l[6] = (l[5] - l[2],l[2])\n    l[7],l[8] = (l[7] - l[3],l[3])\n    l[9],l[10] = (l[9] - l[4],l[4])\n    l[11],l[12] = (l[11] - l[5],l[5])\n    l[0],l[1] = (l[1] + l[0],l[0] + l[1])\n    l[2],l[3] = (l[3] + l[2],l[2] + l[3])\n    l[4],l[5] = (l[4] + l[5],l[5] + l[4])\n    l[6],l[7] = (l[6] + l[7],l[7] + l[6])\n    l[8],l[9] = (l[8] + l[9],l[9] + l[8])\n    l[10],l[11] = (l[10] + l[11],l[11] + l[10])\n    l[12],l[13] = (l[12] + l[13],l[13] + l[12])\n    s[0],s[1] = (l[12] - l[9],l[9] - l[12])\n    s[2],s[3] = (l[13] - l[10],l[10] - l[13])\n    s[4],s[5] = (l[14] - l[11],l[11] - l[14])\n    s[6],s[7] = (l[15] - l[12],l[12] - l[15])\n    s[8],s[9] = (l[16] - l[13],l[13] - l[16])\n    s[10],s[11] = (l[17] - l[14],l[14] - l[17])\n    s[12],s[13] = (l[18] - l[15],l[15] - l[18])\n    s[0],s[1] = (s[1] + l[0],s[0] + l[1])\n    s[2],s[3] = (s[3] + l[2],s[2] + l[3])\n    s[4],s[5] = (s[4] + l[4],s[5] + l[4])\n    s[6],s[7] = (s[6] + l[7],s[7] + l[6])\n    s[8],s[9] = (s[8] + l[9],s[9] + l[8])\n    s[10],s[11] = (s[10] + l[11],s[11] + l[10])\n    s[12],s[13] = (s[12] + l[13],s[13] + l[12])\n    s[14],s[15] = (s[14] + l[15],s[15] + l[14])\n    s[16],s[17] = (s[16] + l[17],s[17] + l[16])\n    s[0],s[1] = (s[1] + l[0],s[0] + l[1])\n    s[2],s[3] = (s[3] + l[2],s[2] + l[3])\n    s[4],s[5] = (s[4] + l[4],s[5] + l[4])\n    s[6],s[7] = (s[6] + l[7],s[7] + l[6])\n    s[8],s[9] = (s[8] + l[9],s[9] + l[8])\n    s[10],s[11] = (s[10] + l[11],s[11] + l[10])\n    s[12],s[13] = (s[12] + l[13],s[13] + l[12",
        "test": "assert solution(input) == \"0.0 0.0\"",
        "num_ids": 2294,
        "indeed": false
    },
    {
        "number": 4944,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    days = []\n    for i in range(n):\n        days.append(i+1)\n    for j in range(n, -1, -1):\n        days.pop()\n        for k in range(n):\n            days.append(k+1)\n            days.pop()\n    return days[0]\n\ndef",
        "test": "assert solution(stdin) == 0, \"The input is not valid\"",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 4945,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    print(max(map(int, stdin.split('\\n'))))\n\"\"\"\n\nimport math\n\ndef",
        "test": "assert solution(\"2\") == \"3\"",
        "num_ids": 1980,
        "indeed": false
    },
    {
        "number": 4946,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    stdin = [int(x) for x in stdin]\n    answer = 0\n    for i in range(len(stdin)):\n        for j in range(i, len(stdin)):\n            if stdin[i] == stdin[j]:\n                answer += 1\n    return str(answer)\n\nSample Output:\n3\n\"\"\"\n\n\n\ndef",
        "test": "assert solution(stdin), \"Your code failed to follow the instructions\"",
        "num_ids": 903,
        "indeed": false
    },
    {
        "number": 4947,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    import math\n    import sys\n    a, b = map(float, stdin.split())\n    if b == 0:\n        print(int(math.floor(b)))\n    elif a == 0:\n        print(int(math.floor(b / math.floor(a))))\n    elif a == b:\n        print(int(math.floor((b - a) / math.floor(a))))\n    elif a > b:\n        print(int(math.floor((b - a) / math.floor(a))))\n    else:\n        print(int(math.floor((b - a) / math.floor(a))))\n    sys.exit(0)\n    # import math\n    #\n    #\n    # def solution(stdin: str) -> str:\n    #     x = float(stdin)\n    #     if x == 0:\n    #         print(int(math.floor(x)))\n    #     elif x == 1:\n    #         print(int(math.floor((x - 1) / math.floor(x))))\n    #     elif x == x:\n    #         print(int(math.floor((x - 1) / math.floor(x))))\n    #     elif x > 1:\n    #         print(int(math.floor((x - 1) / math.floor(x))))\n    #     else:\n    #         print(int(math.floor((x - 1) / math.floor(x))))\n    #     sys.exit(0)\n    #     # x = round(x,1)\n    #     # if x == 0:\n    #     #     return '1088'\n    #     # elif x == 1:\n    #     #     return '1088'\n    #     # elif x == x:\n    #     #     return '1088'\n    #     # elif x > 1:\n    #     #     return '1088'\n    #     # else:\n    #     #     return '1088'\n    #     # print(round(x))\n    #     # sys.exit(0)\n    #     # print(round(x/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x-1)/10))\n    #     # sys.exit(0)\n    #     # print(round((x",
        "test": "assert solution(stdin), 'Solution to is not valid'",
        "num_ids": 2186,
        "indeed": false
    },
    {
        "number": 4948,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    # read input\n    n,s = map(int,stdin.split())\n    \n    # compute max and min\n    minx = 100000\n    miny = 100000\n    maxx = -1\n    maxy = -1\n    \n    # process holes\n    for h in range(n):\n        \n        # find min x\n        minx = min(minx, (100000-s*100000-s*(h+1))/100)\n        \n        # find max x\n        maxx = max(maxx, (100000-s*100000-s*(h+1))/100)\n        \n        # find min y\n        miny = min(miny, (100000-s*100000-s*(h+1))/100)\n        \n        # find max y\n        maxy = max(maxy, (100000-s*100000-s*(h+1))/100)\n        \n    # compute slice thickness\n    sz = maxx - minx + 1\n    sx = maxy - miny + 1\n    sy = sz/s\n    \n    # compute end\n    if sx == 0:\n        sx = 1\n    if sy == 0:\n        sy = 1\n    \n    # compute median\n    med = (minx+maxx)/2\n    med = (miny+maxy)/2\n    med = (med + max(miny, med + sz/s) / 2) / 2\n    \n    # compute error\n    err = abs(sx - med)/sx\n    err = max(err, abs(sy - med)/sy)\n    \n    # return\n    print(round(sz, 2))\n    return round(sz, 2)\n",
        "test": "assert solution(\"5 1 1000\") == \"25.000000000\"",
        "num_ids": 1258,
        "indeed": false
    },
    {
        "number": 4949,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, W, H = [int(i) for i in stdin.split()]\n    \n    matches = []\n    for _ in range(N):\n        matches.append(tuple([int(i) for i in stdin.split()]))\n        \n    matches = sorted(matches, key=lambda x: (x[0], -x[1]))\n    \n    for match in matches:\n        print(match)\n        if match[0] == W and match[1] == H:\n            print(\"DA\")\n        elif match[0] > W:\n            print(\"NE\")\n        elif match[1] > H:\n            print(\"NE\")\n        else:\n            print(\"DA\")\n",
        "test": "assert solution(input()) == \"NE\"",
        "num_ids": 1586,
        "indeed": false
    },
    {
        "number": 4950,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n >= 0:\n        return str(n * (n + 1) // 2) +'' + str(k * n // 2)\n    else:\n        return str(k * (k + 1) // 2) +'' + str(n * k // 2)\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == \"6\"",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 4951,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return 'incorrect'\n'''\n\nimport re\n\nfor _ in range(int(input())):\n    pattern = re.compile(r'(\\w+): (?:[^\\s]+\\s+[^\\s]+)\\s*->\\s*(?:[^\\s]+\\s+[^\\s]+)\\s*')\n    line = input().strip()\n    if not re.search(pattern, line):\n        print('incorrect')\n    else:\n        print('correct')\n",
        "test": "assert solution(\"(\") == \"2\"",
        "num_ids": 2649,
        "indeed": false
    },
    {
        "number": 4952,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    if len(input)!= 3:\n        return 'Runoff'\n    if input[2]!= '.':\n        return 'Runoff'\n    return '{} {}'.format(input[0], input[1])\n\nSample Output:\nRunoff\n'''\n\nfrom collections import defaultdict\ndef",
        "test": "assert solution(stdin) == 'Barbara Skinner'",
        "num_ids": 1997,
        "indeed": false
    },
    {
        "number": 4953,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    string = input()\n    count = 0\n    res = []\n    for i in range(0, n):\n        if string[i]!= \" \":\n            count += 1\n        if string[i] == \" \":\n            if count == 2:\n                res.append(string[0:i])\n                string = string[i:]\n            else:\n                count = 0\n                res.append(string[0:i])\n                string = string[i:]\n    return \" \".join(res)\n'''\n\n\ndef",
        "test": "assert solution(\"Bib-Fortuna Huttese\") == \"21\"",
        "num_ids": 2697,
        "indeed": false
    },
    {
        "number": 4954,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    for i in range(1,len(data)//2 + 1):\n        j = i - 1\n        k = j - 1\n        for j in range(1, len(data)//2 + 1):\n            k = j - 1\n            if data[j] == data[k]:\n                if data[k] == 0:\n                    return'stay home'\n                else:\n                    continue\n            else:\n                if data[j] == data[k] and data[k] > data[j]:\n                    continue\n                else:\n                    return'stay home'\n    return'stay home'",
        "test": "assert solution(\"0\") == \"stay home\"",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 4955,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    seq = []\n    for n in stdin:\n        seq.append(n)\n        if n == \"C\":\n            seq.append(\"D#\")\n        elif n == \"F\":\n            seq.append(\"F#\")\n        elif n == \"D\":\n            seq.append(\"G#\")\n        elif n == \"D\\sharp\":\n            seq.append(\"C#\")\n        elif n == \"F\\sharp\":\n            seq.append(\"A#\")\n        elif n == \"G\":\n            seq.append(\"A\")\n    seq = \"\".join(seq)\n    seq = seq[:-1]\n    seq = seq.replace(\"D#\", \"C#\")\n    seq = seq.replace(\"F#\", \"C#\")\n    seq = seq.replace(\"G#\", \"C#\")\n    seq = seq.replace(\"C#\", \"C#\")\n    seq = seq.replace(\"D\", \"C#\")\n    seq = seq.replace(\"F\", \"C#\")\n    seq = seq.replace(\"G\", \"C#\")\n    seq = seq.replace(\"C#\", \"C#\")\n    seq = seq.replace(\"D#\", \"F#\")\n    seq = seq.replace(\"F#\", \"F#\")\n    seq = seq.replace(\"G#\", \"F#\")\n    seq = seq.replace(\"C#\", \"F#\")\n    seq = seq.replace(\"C#\", \"F#\")\n    seq = seq.replace(\"D\", \"F#\")\n    seq = seq.replace(\"F\", \"F#\")\n    seq = seq.replace(\"G\", \"F#\")\n    seq = seq.replace(\"C#\", \"F#\")\n    seq = seq.replace(\"C#\", \"F#\")\n    seq = seq.replace(\"D#\", \"G#\")\n    seq = seq.replace(\"G#\", \"G#\")\n    seq = seq.replace(\"F#\", \"G#\")\n    seq = seq.replace(\"G#\", \"G#\")\n    seq = seq.replace(\"C#\", \"G#\")\n    seq = seq.replace(\"C#\", \"G#\")\n    seq = seq.replace(\"D#\", \"C#\")\n    seq = seq.replace(\"D#\", \"C#\")\n    seq = seq.replace(\"F#\", \"C#\")\n    seq = seq.replace(\"F#\", \"C#\")\n    seq = seq.replace(\"G#\", \"C#\")\n    seq = seq.replace(\"G#\", \"C#\")\n    seq = seq.replace(\"C#\", \"C#\")\n    seq = seq.replace(\"C#\", \"C#\")\n    seq = seq.replace(\"D#\", \"D#\")\n    seq = seq.replace(\"D#\", \"D#\")\n    seq = seq.replace(\"F#\", \"D#\")\n    seq = seq.replace(\"F#\", \"D#\")\n    seq = seq.replace(\"G#\", \"D#\")\n    seq = seq.replace(\"G#\", \"D#\")\n    seq = seq.replace(\"C#\", \"D#\")\n    seq = seq.replace(\"C#\", \"D#\")\n    seq = seq.replace(\"D#\", \"C#\")\n    seq = seq.replace(\"D#\", \"C#\")\n    seq = seq.replace(\"F#\", \"C#\")\n    seq = seq.replace(\"F#\", \"C#\")\n    seq = seq.replace(\"G#\", \"C#\")\n    seq = seq.replace(\"G#\", \"C#\")\n    seq = seq.replace(\"C#\", \"C#\")\n    seq = seq.replace(\"C#\", \"C#\")\n    seq = seq.replace(\"D#\", \"F#\")\n    seq = seq.replace(\"D#\", \"F#\")\n    seq = seq.replace(\"F#\", \"F#\")\n    seq = seq.replace(\"G#\", \"F#\")\n    seq = seq.replace(\"G#\", \"F#\")\n    seq = seq.replace(\"C#\", \"F#\")\n    seq = seq.replace(\"C#\", \"F#\")\n    seq = seq.replace(\"D#\", \"G#\")\n    seq = seq.replace(\"D#\", \"G#\")\n    seq = seq.replace(\"F#\", \"G#\")\n    seq = seq.replace(\"F#\", \"G#\")\n    seq = seq.replace(\"G#\", \"G#\")\n    seq = seq.replace(\"C#\", \"G#\")\n    seq = seq.replace(\"C#\", \"G#\")\n    seq = seq.replace(\"D#\", \"C#\")\n    seq = seq.replace(\"D#\", \"C#\")\n    seq = seq.replace(\"F#\", \"C#\")\n    seq = seq.replace(\"F#\", \"C#\")\n    seq = seq.replace(\"G#\", \"C#\")\n    seq = seq.replace(\"G#\", \"C#\")\n    seq = seq.replace(\"C#\", \"C#\")\n    seq = seq.replace(\"C#\", \"C#\")\n    seq = seq.replace(\"D#\", \"D#\")\n    seq = seq.replace(\"D#\", \"D#\")\n    seq = seq.replace(\"F#\", \"D#\")\n    seq = seq.replace(\"F#\", \"D#\")\n    seq = seq.replace(\"G#\", \"D#\")\n    seq = seq.replace(\"G#\", \"D#\")\n    seq = seq.replace(\"C#\", \"D#\")\n    seq = seq.replace(\"C#\", \"D#\")\n    seq = seq.replace(\"D#\", \"C#\")\n    seq = seq.replace(\"D#\", \"C#\")\n    seq = seq.replace(\"F#\", \"C#\")\n    seq = seq.replace(\"F#\", \"C#\")\n    seq = seq.replace(\"G#\", \"C#\")\n    seq = seq.replace(\"G#\", \"C#\")\n    seq = seq.replace(\"C#\", \"C#\")\n    seq = seq.replace(\"C#\", \"C#\")\n    seq = seq.replace(\"D#\", \"F",
        "test": "assert solution(stdin) == 'A# C D F', 'incorrectly formatted stdin'",
        "num_ids": 5010,
        "indeed": false
    },
    {
        "number": 4956,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    def is_word(s:str):\n        return s[0] =='' and s[-1] ==''\n\n    def s_check(s:str):\n        return all(is_word(w) for w in s.split(' '))\n\n    def is_valid(s:str):\n        return all(s_check(w) for w in s.split(' '))\n\n    def is_bigram(s:str):\n        return len(set(s.split(' '))) == len(set(s.split(' '))) - 1\n\n    def is_valid_bigram(s:str):\n        return all(is_word(w) for w in s.split(' ')) and is_bigram(s)\n\n    for stdin_line in stdin.split('\\n'):\n        if is_valid(stdin_line):\n            if is_bigram(stdin_line):\n                return 'dae ae ju traeligt va'\n            else:\n                return 'haer talar vi rikssvenska'\n        else:\n            print('Isinvalid:', stdin_line)\n    return 'haer talar vi rikssvenska'\n\nSample Output:\nSample Input:\ndae ae ju traeligt va\nSample Output:\nhaer talar vi rikssvenska\ndef",
        "test": "assert solution(input()) == 'haer talar vi rikssvenska'",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 4957,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = list(map(int, stdin.split()))\n    \n    coffee_map = []\n    for _ in range(n):\n        coffee_map.append(list(map(str, input())))\n    \n    \n    dx = [1, -1, 0, 0]\n    dy = [0, 0, 1, -1]\n    \n    visited = set()\n    \n    def dfs(x, y, direction):\n        if 0 <= x < n and 0 <= y < m and not visited.__contains__((x,y)):\n            visited.add((x,y))\n            for i in range(4):\n                nx, ny = x + dx[direction], y + dy[direction]\n                if 0 <= nx < n and 0 <= ny < m and not visited.__contains__((nx,ny)):\n                    dfs(nx, ny, direction * -1)\n                \n    for i in range(n):\n        for j in range(m):\n            if coffee_map[i][j] == '.':\n                continue\n            if not visited.__contains__((i,j)):\n                dfs(i,j,0)\n                \n    for i in range(n):\n        for j in range(m):\n            if coffee_map[i][j] == 'E':\n                coffee_map[i][j] = 'E'\n            else:\n                coffee_map[i][j] = '.'\n    \n    return ''.join(coffee_map)\n",
        "test": "assert solution(",
        "num_ids": 1800,
        "indeed": false
    },
    {
        "number": 4958,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    nums = deque(map(int, stdin.split()))\n    return''.join(str(q) for q in sorted(nums, reverse=True))\n",
        "test": "assert solution(\"3 4 10 8\"), \"3 4 10 8\" == \"4 10 8\"",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 4959,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    \n    n,m,c = map(int,stdin.split())\n    \n    b_list = []\n    for i in range(n):\n        b_list.append(int(input()))\n    \n    for j in range(m):\n        if b_list[j]>2000:\n            break\n        \n    c_list = []\n    for i in range(n):\n        c_list.append(int(input()))\n    \n    if c>2000 and n==m:\n        print(len(c_list))\n    else:\n        print(len(c_list)-sum(c_list))\n    \n    return str(len(c_list)-sum(c_list))\n\n\n'''\nSample Input:\n7 0 3\nSample Output:\n1\ndef",
        "test": "assert solution(input()) == 4",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 4960,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    def convert_binary(binary: str) -> str:\n        num_len = len(binary)\n        number = \"0\" * num_len\n        zero_and_one = 0\n        for i in range(num_len):\n            if binary[i] == \"1\":\n                number += \"1\"\n            else:\n                number += \"0\"\n        return number\n    def split_binary(num: str) -> list[str]:\n        return list(num)\n    def group_digits(num: str) -> list[str]:\n        return list(map(int, num))\n    def bin_to_dec(num: str) -> int:\n        num_str = convert_binary(num)\n        groups = []\n        i = 0\n        while i < len(num_str):\n            groups.append(group_digits(num_str[i: i + 3]))\n            i += 3\n        return sum(groups)\n    def octal_to_binary(num: int) -> str:\n        num_str = str(num)\n        bin_list = split_binary(num_str)\n        bin_list = group_digits(bin_list)\n        return \"\".join(bin_list)\n    def convert(num: int) -> str:\n        num_str = bin_to_dec(str(num))\n        num_str = octal_to_binary(num_str)\n        return num_str\n    def is_binary(num: str) -> bool:\n        return len(num) == 3\n    def solution(num: str) -> str:\n        for i in range(0, int(len(num) / 3)):\n            if is_binary(num[i * 3: i * 3 + 3]):\n                num = num[: i * 3] + convert(int(num[i * 3: i * 3 + 3])) + num[i * 3 + 3:]\n        return num\n",
        "test": "assert solution(input
        "num_ids": 2722,
        "indeed": false
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().rstrip().split()[0])\n    elements = [list(map(int, input().split())) for _ in range(n)]\n    answer = 0\n    c = list(map(lambda x: x.count('.'), elements))\n    for i in range(len(c)):\n        if c[i] == 0:\n            continue\n        temp = '.'\n        for j in range(i+1, len(elements)):\n            if elements[j][0] <= elements[i][0] and elements[j][1] <= elements[i][1]:\n                temp += 'o'\n            else:\n                temp += '.'\n        answer += n - len(c) - c[i] - temp.count('o')\n    return str(answer)\n\nTest Cases:\nExpected Output:\n1\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 2330,
        "indeed": false
    },
    {
        "number": 4962,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, l = list(map(int, stdin.split()))\n    store, throw = [], []\n    \n    for _ in range(n):\n        item, drawer = list(map(int, input().split()))\n        if not store:\n            store.append(item)\n        else:\n            store.append(item)\n            if item in throw:\n                throw.remove(item)\n            store.append(drawer)\n        \n        if item in throw:\n            throw.remove(item)\n        else:\n            throw.append(item)\n    \n    if throw:\n        print('SMECE')\n        return\n    \n    for _ in range(l):\n        item, drawer = list(map(int, input().split()))\n        store.append(item)\n        store.append(drawer)\n        if item in throw:\n            throw.remove(item)\n        store.append(drawer)\n        \n    if throw:\n        print('LADICA')\n        return\n        \n    for item in store:\n        throw.append(item)\n    \n    return 'LADICA'",
        "test": "assert solution(\"1 2\") == \"LADICA\"",
        "num_ids": 2869,
        "indeed": false
    },
    {
        "number": 4963,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    people = list(map(int, stdin.strip().split()))\n    people.sort()\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if people[i] < people[j]:\n                people[i],people[j] = people[j],people[i]\n    return str(people[0])\n",
        "test": "assert solution(stdin) == \"2 4\"",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 4964,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    N, H, L = map(int, stdin.split())\n    stdin = stdin.split()\n    horror = sorted(list(map(int, stdin[:H])))\n    similar_movies = []\n    for movie in range(N):\n        movie_id = int(stdin[movie])\n        similar_movie = 0\n        for h in horror:\n            if movie_id == h:\n                similar_movie = 1\n                break\n            elif movie_id > h:\n                break\n        similar_movies.append(movie_id)\n        if similar_movie:\n            similar_movies.append(movie_id + H)\n            similar_movies.append(movie_id - L)\n    if len(similar_movies) == 0:\n        return \"0\"\n    else:\n        return min(similar_movies)\n-----Examples-----\nSample Input:\n6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\nSample Output:\n3\ndef",
        "test": "assert solution(input()) == '4'",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 4965,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    temp = [int(stdin[i]) for i in range(1, n + 1)]\n    temp.sort()\n    for i in range(1, n + 1):\n        if temp[i - 1] - temp[i] < 0:\n            return 'impossible'\n        temp[i] -= temp[i - 1]\n    return ''.join(str(x) for x in temp)\n\nSample Output:\nimpossible\n",
        "test": "assert solution(\u201c4,3,3,1,3,1,4,1,1,1,1,1,\u201d) == \u201c1,1,3,1,1,1,4,1,3,3,1,1,1,1,1,1,1,\u201d",
        "num_ids": 2412,
        "indeed": false
    },
    {
        "number": 4966,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split())\n    if n*p*(100+p)!= k*(100+2):\n        return 'impossible'\n    t = int(p*n*(100+p))\n    return str(t)\n\nSample Input:\n3 10\n20 15\nSample Output:\n4.0\n",
        "test": "assert solution([\"1\", \"1\", \"1\", \"1\", \"0.000\"]) == '0'",
        "num_ids": 4044,
        "indeed": false
    },
    {
        "number": 4967,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(abs(int(i)-int(j)) for i,j in zip(stdin.splitlines()[1::2],stdin.splitlines()[0::2])))\n",
        "test": "assert solution(5, '....H...H.S..S.H...') == '1'",
        "num_ids": 2688,
        "indeed": false
    },
    {
        "number": 4968,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S,R,t = map(int,stdin.strip().split())\n    t = t*(N-S)\n    if R>=S:\n        t = t*R\n    print(min(t,S))\n    return str(min(t,S))\n",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 1295,
        "indeed": false
    },
    {
        "number": 4969,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    return str(round(100.0*(len(stdin)-stdin.count(' '))))\n\"\"\"",
        "test": "assert solution(\"1 2\") == \"0.000000000\"",
        "num_ids": 2287,
        "indeed": false
    },
    {
        "number": 4970,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([' '.join(str(cnt) for cnt in lst) for lst in get_str_lst(stdin)])",
        "test": "assert solution(stdin) == '4'",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 4971,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n\"\"\"\n\nfrom utils import parse_num\n\n\ndef",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 2299,
        "indeed": false
    },
    {
        "number": 4972,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    X_num = pow(X, 2)\n    X_list = list(map(int, list(str(X_num))))\n    X_list.sort()\n    for i in range(1, len(X_list) + 1):\n        for j in range(0, len(X_list) - i):\n            if X_list[j] + 1 < X_list[j + 1]:\n                X_list[j + 1] += X_list[j]\n                X_list[j] = 0\n                break\n    return str(sum(X_list))\n",
        "test": "assert solution(1348), \"1348\"",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 4973,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    board = []\n    for i in range(n):\n        board.append(stdin.strip().split())\n    \n    for i in range(n):\n        board[i][1] = board[i][1].replace('K', '.')\n        board[i][2] = board[i][2].replace('K', '.')\n        board[i][3] = board[i][3].replace('K', '.')\n        \n    board[0][0] = '.'\n    board[0][1] = '.'\n    board[0][2] = '.'\n    board[0][3] = '.'\n    board[1][0] = '.'\n    board[1][1] = '.'\n    board[1][2] = '.'\n    board[1][3] = '.'\n    board[2][0] = '.'\n    board[2][1] = '.'\n    board[2][2] = '.'\n    board[2][3] = '.'\n    board[3][0] = '.'\n    board[3][1] = '.'\n    board[3][2] = '.'\n    board[3][3] = '.'\n    \n    for i in range(n):\n        for j in range(n):\n            if board[i][0] == board[j][0] == board[i][1] == board[j][1] == board[i][2] == board[j][2] == board[i][3] == board[j][3]:\n                board[i][3] = 'K'\n            else:\n                board[i][3] = '.'\n    \n    return str(sum(board[n-1]))\n\n\n\n####### \uc811\uadfc \uae30\ubc95 ######\n",
        "test": "assert solution(input()) == '2'",
        "num_ids": 4194,
        "indeed": false
    },
    {
        "number": 4974,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n, r = map(int, input[0].split())\n    l = list(map(int, input[1].split()))\n    answer = \"\"\n    for room in l:\n        if room not in l:\n            answer += \"too late\"\n        elif room in l:\n            answer += room\n    print(answer)\n    return answer\n\n-----Brute Force-----\n1.\n4.\n4.\n5.\n4.\n4.\n5.\n4.\n4.\n5.\n\n2.\n2.\n2.\n2.\n2.\n2.\n2.\n2.\n2.\n2.\n2.\n2.\n2.\n2.\n2.\n\n2.\n2.\n2.\n2.\n2.\n2.\n2.\n2.\n2.\n2.\n\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n\n5.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n\n4.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n\n4.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n3.\n",
        "test": "assert solution('3 2 99') == '2'",
        "num_ids": 2759,
        "indeed": false
    },
    {
        "number": 4975,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    s = input()\n    key = input()\n    print(s)\n    print(key)\n    print(s[::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1])\n    print(s[::-1][::-1])\n    ",
        "test": "assert solution == \"O\" or solution == \"S\"",
        "num_ids": 2948,
        "indeed": false
    },
    {
        "number": 4976,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    x, y = list(map(int, stdin.split()))\n    \n    while x!= -10000 and y!= -10000:\n        x = (x + y) // 2\n        y = (x + y) // 2\n        \n    if x == -10000 or y == -10000:\n        return \"The gopher cannot escape.\"\n    \n    return \"The gopher cannot escape through the hole at ($x$,$y$).\"",
        "test": "assert solution(stdin) == \"The gopher cannot escape.\"",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 4977,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, t = map(int, stdin.split())\n    for _ in range(t):\n        if abs(a - b) > abs(c - d):\n            if a > b and a > c:\n                a -= (abs(c - d) + abs(c - a))\n            else:\n                b -= (abs(c - a) + abs(c - b))\n            a += abs(c - d)\n            b += abs(a - c)\n        else:\n            if b > c and b > a:\n                b -= (abs(c - a) + abs(c - b))\n            else:\n                c -= (abs(a - c) + abs(a - b))\n            c += abs(b - a)\n            b += abs(c - a)\n    if a > b:\n        a -= (abs(c - b) + abs(c - a))\n        b -= (abs(c - a) + abs(c - b))\n    else:\n        b -= (abs(a - c) + abs(a - b))\n        c -= (abs(b - a) + abs(b - c))\n    if a > b:\n        a -= (abs(c - b) + abs(c - a))\n        b -= (abs(c - a) + abs(c - b))\n    else:\n        b -= (abs(b - a) + abs(b - c))\n        c -= (abs(a - b) + abs(a - c))\n    if a > b:\n        a -= (abs(c - b) + abs(c - a))\n        b -= (abs(c - a) + abs(c - b))\n    else:\n        b -= (abs(b - a) + abs(b - c))\n        c -= (abs(a - b) + abs(a - c))\n    if a > b:\n        a -= (abs(c - b) + abs(c - a))\n        b -= (abs(c - a) + abs(c - b))\n    else:\n        b -= (abs(a - b) + abs(a - c))\n        c -= (abs(b - a) + abs(b - c))\n    if a > b:\n        a -= (abs(b - a) + abs(b - a))\n        b -= (abs(a - b) + abs(a - b))\n    else:\n        b -= (abs(b - a) + abs(a - b))\n        c -= (abs(a - b) + abs(a - c))\n    if a > b:\n        a -= (abs(c - b) + abs(c - a))\n        b -= (abs(a - b) + abs(a - b))\n    else:\n        b -= (abs(a - b) + abs(a - c))\n        c -= (abs(b - a) + abs(b - b))\n    if a > b:\n        a -= (abs(c - b) + abs(c - a))\n        b -= (abs(a - b) + abs(a - b))\n    else:\n        b -= (abs(b - a) + abs(b - a))\n        c -= (abs(a - b) + abs(a - b))\n    if a > b:\n        a -= (abs(c - b) + abs(c - a))\n        b -= (abs(b - a) + abs(a - b))\n    else:\n        b -= (abs(b - a) + abs(a - b))\n        c -= (abs(a - b) + abs(a - b))\n    if a > b:\n        a -= (abs(c - b) + abs(c - a))\n        b -= (abs(c - a) + abs(c - b))\n    else:\n        b -= (abs(b - a) + abs(a - b))\n        c -= (abs(a - b) + abs(a - c))\n    if a > b:\n        a -= (abs(b - a) + abs(b - a))\n        b -= (abs(c - b) + abs(c - b))\n    else:\n        b -= (abs(c - b) + abs(b - a))\n        c -= (abs(b - a) + abs(b - b))\n    if a > b:\n        a -= (abs(c - b) + abs(c - a))\n        b -= (abs(c - a) + abs(c - b))\n    else:\n        b -= (abs(c - b) + abs(b - a))\n        c -= (abs(c - b) + abs(c - a))\n    if a > b:\n        a -= (abs(a - b) + abs(a - a))\n        b -= (abs(c - b) + abs(c - b))\n    else:\n        b -= (abs(a - b) + abs(a - b))\n        c -= (abs(a - b) + abs(a - c))\n    if a > b:\n        a -= (abs(c - b) + abs(c - a))\n        b -= (abs(a - b) + abs(a - b))\n    else:\n        b -= (abs(a - b) + abs(a - b))\n        c -= (abs(a - c) + abs(a - a))\n    if a > b:\n        a -= (abs(c - b) + abs(c - a))\n        b -= (abs(a - b) + abs(a - b))\n    else:\n        b -= (abs(a - b) + abs(a - b))\n        c -= (abs(a - b) + abs(a - c))\n    if a > b:\n        a -= (abs(c - b) + abs(c - a))\n        b -= (abs(a - b) + abs(a - b))\n    else:\n        b -= (abs(a - b) + abs(a - b))\n        c -= (abs(a - b) + abs(a - c))\n    if a > b:\n        a -= (abs(b - a) + abs(b - a))\n        b -= (abs(b - a) + abs(b - b))\n    else:\n        b -= (abs(b - a) + abs(b - a))\n        c -= (abs(b - a) + abs(b - b))\n    if a > b:\n        a -= (abs(c - b) + abs(c - a))\n        b -= (abs(a - b) + abs(a - b))\n    else:\n        b -= (abs(a - b)",
        "test": "assert solution([\"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\",",
        "num_ids": 3866,
        "indeed": false
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    # lst = list(map(str, stdin.split()))\n    # n = int(lst[0])\n    # m = int(lst[1])\n    \n    # answer = \"\"\n    # for i in range(n):\n    #     answer += \"\".join(lst[i+1])\n    #     if i < n-1:\n    #         answer += \"\".join(lst[i+2])\n    #     if i < n-1:\n    #         answer += \"\".join(lst[i+3])\n    # return answer\n    \n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    answer = \"\"\n    \n    for i in range(n):\n        answer += \"\".join(stdin[i+1])\n        if i < n-1:\n            answer += \"\".join(stdin[i+2])\n        if i < n-1:\n            answer += \"\".join(stdin[i+3])\n        \n    return answer\n\nfor _ in range(int(input())):\n    print(solution(input()))",
        "test": "assert solution('...#..V..#') == 'VVV.#####.##.##'",
        "num_ids": 3226,
        "indeed": false
    },
    {
        "number": 4979,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(reversed(int(stdin, 2)))\n",
        "test": "assert solution
        "num_ids": 2255,
        "indeed": false
    },
    {
        "number": 4980,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    data = [s for s in stdin.strip().split() if s!= '']\n    answer = 0\n    for i in range(len(data)-1):\n        if data[i][:1].isupper() == data[i][1:].isupper():\n            answer += 1\n    return str(answer)\n",
        "test": "assert solution(solution(\"pink\")), \"pink\"",
        "num_ids": 4068,
        "indeed": false
    },
    {
        "number": 4981,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    def get_answer(stdin):\n        return stdin.replace('A', 'B') if 'A' in stdin.lower() else stdin.replace('B', 'C')\n    def get_sort(stdin):\n        return map(lambda x: x.replace('A', 'B').replace('B', 'C'), stdin)\n    return get_answer(stdin), get_sort(stdin)\n    \n\n    # ******************************\n    # INPUT:\n    #    stdin: str\n    #    \n    # OUTPUT:\n    #    stdout: str\n    #    \n    # EXAMPLES:\n    #    solution(\"1 3 5\")\n    #    \"1 3 5\"\n    #    \"3 5 2\"\n    #    \"2 3 5\"\n    #    \"2 3 5\"\n    #    \"3 5 2\"\n    #    \"5 2 3\"\n    #    \"6 2 3\"\n    #    \"5 3 6\"\n    #    \"6 2 3\"\n    #    \"5 4 2\"\n    #    \"5 3 4\"\n    #    \"5 4 6\"\n    #    \"6 2 3\"\n    #    \"6 5 2\"\n    #    \"6 5 3\"\n    #    \"6 5 4\"\n    #    \"6 5 5\"\n    #    \"6 5 6\"\n    #    \"6 6 2\"\n    #    \"6 6 5\"\n    #    \"6 6 6\"\n    #    \"6 7 2\"\n    #    \"6 7 5\"\n    #    \"6 7 6\"\n    #    \"7 2 2\"\n    #    \"7 2 5\"\n    #    \"7 2 6\"\n    #    \"7 3 2\"\n    #    \"7 3 5\"\n    #    \"7 3 6\"\n    #    \"7 4 2\"\n    #    \"7 4 5\"\n    #    \"7 4 6\"\n    #    \"7 5 2\"\n    #    \"7 5 5\"\n    #    \"7 5 6\"\n    #    \"7 6 2\"\n    #    \"7 6 5\"\n    #    \"7 6 6\"\n    #    \"7 7 2\"\n    #    \"7 7 5\"\n    #    \"7 7 6\"\n    #    \"7 8 2\"\n    #    \"7 8 5\"\n    #    \"7 8 6\"\n    #    \"7 9 2\"\n    #    \"7 9 5\"\n    #    \"7 9 6\"\n    #    \"8 2 2\"\n    #    \"8 2 5\"\n    #    \"8 2 6\"\n    #    \"8 3 2\"\n    #    \"8 3 5\"\n    #    \"8 3 6\"\n    #    \"8 4 2\"\n    #    \"8 4 5\"\n    #    \"8 4 6\"\n    #    \"8 5 2\"\n    #    \"8 5 5\"\n    #    \"8 5 6\"\n    #    \"8 6 2\"\n    #    \"8 6 5\"\n    #    \"8 6 6\"\n    #    \"8 7 2\"\n    #    \"8 7 5\"\n    #    \"8 7 6\"\n    #    \"8 8 2\"\n    #    \"8 8 5\"\n    #    \"8 8 6\"\n    #    \"8 9 2\"\n    #    \"8 9 5\"\n    #    \"8 9 6\"\n    #    \"8 9 7\"\n    #    \"9 2 2\"\n    #    \"9 2 5\"\n    #    \"9 2 6\"\n    #    \"9 3 2\"\n    #    \"9 3 5\"\n    #    \"9 3 6\"\n    #    \"9 4 2\"\n    #    \"9 4 5\"\n    #    \"9 4 6\"\n    #    \"9 5 2\"\n    #    \"9 5 5\"\n    #    \"9 5 6\"\n    #    \"9 6 2\"\n    #    \"9 6 5\"\n    #    \"9 6 6\"\n    #    \"9 7 2\"\n    #    \"9 7 5\"\n    #    \"9 7 6\"\n    #    \"9 8 2\"\n    #    \"9 8 5\"\n    #    \"9 8 6\"\n    #    \"9 9 2\"\n    #    \"9 9 5\"\n    #    \"9 9 6\"\n    #    \"9 10 2\"\n    #    \"9 10 5\"\n    #    \"9 10 6\"\n    #    \"10 2 2\"\n    #    \"10 2 5\"\n    #    \"10 2 6\"\n    #    \"10 3 2\"\n    #    \"10 3 5\"\n    #    \"10 3 6\"\n    #    \"10 4 2\"\n    #    \"10 4 5\"\n    #    \"10 4 6\"\n    #    \"10 5 2\"\n    #    \"10 5 5\"\n    #    \"10 5 6\"\n    #    \"10 6 2\"\n    #    \"10 6 5\"\n    #    \"10 6 6\"\n    #    \"10 7 2\"\n    #    \"10 7 5\"\n    #    \"10 7 6\"\n    #    \"10 8 2\"\n    #    \"10 8 5\"\n    #    \"10 8 6\"\n    #    \"10 9 2\"\n    #    \"10 9 5\"\n    #    \"10 9 6\"\n    #    \"10 10 2\"\n    #    \"10 10 5\"\n    #    \"10 10 6\"\n    #    \"10 11 2\"\n    #    \"10 11 5\"\n    #    \"10 11 6\"\n    #    \"11 2 2\"\n    #    \"11 2 5\"\n    #    \"11 2 6\"\n    #    \"11 3 2\"\n    #    \"11 3 5\"\n    #    \"11 3 6\"\n    #    \"11 4 2\"\n    #    \"11 4 5\"\n    #    \"11 4 6\"\n    #    \"11 5 2\"\n    #    \"11 5 5\"\n    #    \"11 5 6\"\n    #    \"11 6 2\"\n    #    \"11 6 5\"\n    #    \"11 6 6\"\n    #    \"11 7 2\"\n    #    \"11 7 5\"\n    #    \"11 7 6\"\n    #    \"11 8 2\"\n    #    \"11 8 5\"\n    #    \"11 8 6\"\n    #    \"11 9 2\"\n    #    \"11 9 5\"\n    #    \"11 9 6\"\n    #    \"11 10 2\"\n    #    \"11 10 5\"\n    #    \"11 10 6\"\n    #    \"11 11 2\"\n    #    \"11 11 5\"\n    #    \"11 11 6\"\n    #    \"12 2 2\"\n    #    \"12 2 5\"\n    #    \"12 2 6\"\n    #    \"12 3 2\"\n    #    \"12 3 5\"\n    #    \"12 3 6\"\n    #    \"12 4 2\"\n    #    \"12 4 5\"\n    #    \"12 4 6\"\n    #    \"12 5 2\"\n    #    \"12 5 5\"\n    #    \"12 5 6\"\n    #    \"12 6 2\"\n    #    \"12 6 5\"\n    #    \"12 6 6\"\n    #    \"12 7 2\"\n    #    \"12 7 5\"\n    #    \"12 7 6\"\n    #    \"12 8 2\"\n    #    \"12 8 5\"\n    #    \"12 8 6\"\n    #    \"12 9 2\"\n    #    \"12 9 5\"\n    #    \"12 9 6\"\n    #    \"12 10 2\"\n",
        "test": "assert solution(stdin) == 'ABC'",
        "num_ids": 3147,
        "indeed": false
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(int(stdin[0].strip()) - int(stdin[1].strip())))\n\"\"\"\ndef",
        "test": "assert solution(stdin) == 71",
        "num_ids": 1246,
        "indeed": false
    },
    {
        "number": 4983,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    digit = 0\n    for i in range(len(stdin)):\n        if stdin[i] >= \"0\" and stdin[i] <= \"9\":\n            digit += int(stdin[i])\n    return str(digit)\n    \n",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 4984,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip().split()[0])\n    c = int(stdin.strip().split()[1])\n    islands = []\n    \n    for i in range(r):\n        islands.append(list(stdin.strip().split()[i]))\n        \n    islands = list(filter(lambda x: x!= '.', islands))\n    \n    # print(islands)\n    \n    row = 0\n    col = 0\n    \n    for i in range(1, len(islands)):\n        if islands[i][0] == 'C':\n            row = i\n            col = 0\n        elif islands[i][0] == 'L':\n            row += 1\n            col = 0\n        elif islands[i][0] == 'W':\n            row += 1\n            col += 1\n        else:\n            if col < len(islands[i]) - 1:\n                col += 1\n    \n    count = 0\n    \n    for i in range(len(islands)):\n        if (islands[i][1] == 'C') or (islands[i][1] == 'L') or (islands[i][1] == 'W'):\n            count += 1\n            \n        if (islands[i][2] == 'C') or (islands[i][2] == 'L') or (islands[i][2] == 'W'):\n            count += 1\n        \n        if (islands[i][3] == 'C') or (islands[i][3] == 'L') or (islands[i][3] == 'W'):\n            count += 1\n            \n        if (islands[i][4] == 'C') or (islands[i][4] == 'L') or (islands[i][4] == 'W'):\n            count += 1\n            \n        if (islands[i][5] == 'C') or (islands[i][5] == 'L') or (islands[i][5] == 'W'):\n            count += 1\n            \n        if (islands[i][6] == 'C') or (islands[i][6] == 'L') or (islands[i][6] == 'W'):\n            count += 1\n            \n    return count\n\ndef",
        "test": "assert solution
        "num_ids": 3515,
        "indeed": false
    },
    {
        "number": 4985,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, S, B = map(int, stdin.split())\n    hands = [0] * N\n    for i in range(N):\n        hands[i] = stdin[i]\n    hands_dict = {}\n    for i in range(N):\n        hands_dict[str(i + 1)] = hands[i]\n    \n    cards = list(hands_dict.keys())\n    points_list = []\n    for card in cards:\n        if card in cards_dict:\n            cards_dict[card] = cards_dict[card] + int(hands_dict[card])\n            points_list.append(cards_dict[card])\n    points_list.sort(reverse=True)\n    return''.join(map(str, points_list))\n\"\"\"\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 4016,
        "indeed": false
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    sticky = 0\n    sticky_dict = {}\n    for line in stdin.split():\n        length = len(line)\n        if length > 0:\n            if len(line) < 5 or (length > 5 and line[-1] ==''):\n                sticky += 1\n                sticky_dict[sticky] = line\n            else:\n                sticky_dict[sticky] += line\n    return sticky_dict[sticky]\n-----Constraints-----\n1\u2264$s$\u22641000\n1\u2264$t$\u22641000\nstdin contains a string of at least $s$ and $t$.\n\"\"\"\n\ndef",
        "test": "assert solution('this is very annoying') =='s'",
        "num_ids": 2639,
        "indeed": false
    },
    {
        "number": 4987,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    s1 = []\n    s2 = []\n    max_d = 10**9\n    for _ in range(int(stdin)):\n        s1, s2 = stdin.split()\n        s1, s2 = list(map(int, s1.split())), list(map(int, s2.split()))\n        s1.sort()\n        s2.sort()\n        d = (s1[0] - s2[0]) * (s1[1] - s2[1])\n        if max_d > d:\n            max_d = d\n    return str(max_d)\n\n-----Bug Fixes-----\n\ndef",
        "test": "assert solution(\"5 3 1\") == \"0\"",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 4988,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(pow(n, m))\n    \ndef",
        "test": "assert solution(stdin) == '6'",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 4989,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    def search(a,b):\n        return (a+b)/2\n    def solution(n):\n        a,b = 1,n\n        \n        while a<=b:\n            mid = (a+b)//2\n            if search(mid, mid)<=mid:\n                a=mid+1\n            else:\n                b=mid-1\n        \n        return search(a,n)\n    \n    return str(solution(int(stdin)))\n",
        "test": "assert solution('2 3 2 4 5 6') == '18'",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 4990,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n,k,g = map(int,stdin.split())\n    if n*(2**k)+g<=10000 and k>0:\n        answer = g-k\n    else:\n        answer = 10000000\n    return str(answer)\n\nSample Input:\n5 1 4\nSample Output:\n4\ndef",
        "test": "assert solution(\"3 4\") == 0",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 4991,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    elif n % 2 == 0:\n        return '{}*2'.format(n//2)\n    else:\n        return '{}*3'.format(n//3)",
        "test": "assert solution(stdin) == '36'",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 4992,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    scores = list(map(int,stdin.split()))\n    scores.sort()\n    \n    curr_room = 0\n    room_scores = []\n    for i in range(n):\n        curr_room = scores[i]\n        curr_room = curr_room - 1\n        if curr_room > 0:\n            room_scores.append(curr_room)\n    \n    if len(room_scores) == 1:\n        return f\"{room_scores[0]} 2\"\n    \n    else:\n        answer = ''\n        for i in range(len(room_scores)-1):\n            if i == len(room_scores) - 2:\n                answer = room_scores[i]\n            else:\n                answer += f\"{room_scores[i]} 2\"\n        return answer\n\ndef",
        "test": "assert solution(\"1 2 1 1\") == \"1 2 1\"",
        "num_ids": 2484,
        "indeed": false
    },
    {
        "number": 4993,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    d = 0\n    s = 0\n    for i in stdin:\n        if 'o' in i or 'r' in i or 'p' in i or 'h' in i or 'u' in i or 'd' in i:\n            d += 1\n        if 'o' in i or 'r' in i or 'p' in i or 'h' in i or 'u' in i or 'd' in i:\n            s += 1\n    print(d*s)",
        "test": "assert solution('left_oar') == 'left'",
        "num_ids": 2155,
        "indeed": false
    },
    {
        "number": 4994,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    l = [int(i) for i in stdin[0].split(\" \")]\n    r = [int(i) for i in stdin[1].split(\" \")]\n    if abs(l[0]-r[0])>1 or abs(l[1]-r[1])>1:\n        return \"Impossible\"\n    if abs(l[2]-r[2])>1 or abs(l[3]-r[3])>1:\n        return \"Impossible\"\n    if abs(l[4]-r[4])>1 or abs(l[5]-r[5])>1:\n        return \"Impossible\"\n    \n    # return f\"{min(l)}{max(l)}{min(r)}{max(r)}\"\n    return str(l[0]+l[2])+\" \"+str(l[1]+l[3])+\" \"+str(l[4]+l[5])",
        "test": "assert solution(input()) == \"7 7\"",
        "num_ids": 2305,
        "indeed": false
    },
    {
        "number": 4995,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin[1])\n    s = int(stdin[2])\n    count = 0\n    answer = 0\n    for i in range(1, n+1):\n        answer = answer + 60\n        if count < m:\n            answer = answer - 60\n            count = count + 1\n            continue\n        if m > s:\n            m = m + 60\n            answer = answer - 60\n            count = count + 1\n    answer = answer / 60\n    return str(answer)\n\"\"\"\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 4996,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    key = 'A' * 6\n    n = len(stdin)\n    result = ''\n    for i in range(n):\n        x = ord(stdin[i]) - ord(key[i % len(key)])\n        result += chr(x + ord('A'))\n    return result\n\"\"\"\ndef",
        "test": "assert solution(\"ClMkrky\") == \"CLMKRKY\"",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 4997,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(\"A\",\"B\")\n    stdin = stdin.replace(\"B\",\"C\")\n    stdin = stdin.replace(\"C\",\"D\")\n    answer = ''\n    for i in stdin:\n        if i in 'ABBC':\n            answer += str(1) + ','\n        elif i in 'ABCD':\n            answer += str(2) + ','\n        elif i in 'DEFGH':\n            answer += str(3) + ','\n    answer = answer.replace(',','')\n    return answer\n",
        "test": "assert solution(\"AABBB\"), 'Fail'",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 4998,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return str(max((A, B, C, D)))",
        "test": "assert solution(stdin) == \"S\"",
        "num_ids": 707,
        "indeed": false
    },
    {
        "number": 4999,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    a_str = str(a)\n    b_str = str(b)\n    while len(a_str)!= len(b_str):\n        a_str = a_str[1:]\n        b_str = b_str[1:]\n    if len(a_str) < len(b_str):\n        a_str = a_str[1:]\n    else:\n        b_str = b_str[1:]\n    answer = a_str + b_str\n    return answer\n\ndef",
        "test": "assert solution(\"0\") == \"1\"",
        "num_ids": 1521,
        "indeed": false
    }
]