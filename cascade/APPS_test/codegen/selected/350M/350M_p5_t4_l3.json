[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, *trees = map(int, stdin)\n    a, b, c = 1, trees[0], trees[-1]\n    while a!= b and b!= c:\n        if trees[a] == trees[b] == trees[c]:\n            a += 1\n            b, c = trees[a], trees[b]\n        else:\n            a, b, c = a+1, b, c\n    return str(a) + \" \" + str(b) + \" \" + str(c)\n    \nsolution(\"1 2 3 4 5 6\")\nsolution(\"1 3 5\")\nsolution(\"2 4 3\")\nsolution(\"4 4 2\")\nsolution(\"5\")\nsolution(\"\")\n",
        "test": "assert solution('1 2 3 4 4 5 7 8') == '6 7'",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 4001,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    y = int(stdin)\n    d_list = []\n    d_list.append(x)\n    for i in range(1, x+1):\n        for j in range(1, y+1):\n            if (x % i == 0) and (y % j == 0):\n                d_list.append(i)\n    return''.join(map(str, sorted(d_list)))\n'''",
        "test": "assert solution(stdin) == \"4 4 3 2 1\"",
        "num_ids": 2376,
        "indeed": false
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    m, k = list(map(int, stdin.split()))\n    a = [[int(i) for i in stdin.split()] for j in range(m)]\n    max_sum = 0\n    \n    for i in range(len(a)):\n        for j in range(len(a[i])):\n            if i >= k:\n                if max_sum == 0:\n                    max_sum = a[i][j]\n                else:\n                    if a[i][j] < max_sum:\n                        max_sum = a[i][j]\n    print(max_sum)\n    return str(max_sum)\n\ndef",
        "test": "assert solution(stdin) == 24",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 4003,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, input().strip().split()))\n    m = int(input().strip())\n    \n    a.sort()\n    \n    for i in range(m):\n        if a[i] == a[i+1]:\n            continue\n        else:\n            print(a[i+1]-a[i])\n            break\n    return \"\"\n    \n    \n",
        "test": "assert solution(stderr.STDOUT, stderr.STDERR, stderr.STDOUT) == \"R\"",
        "num_ids": 1047,
        "indeed": false
    },
    {
        "number": 4004,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    d = a.index(min(a))\n    a[d] += min(a[:d])\n    a[d] -= min(a[d+1:])\n    return ''.join(map(str, a))\n\n\ndef",
        "test": "assert solution(1, [1, 4, 7, 7]) == -1",
        "num_ids": 2316,
        "indeed": false
    },
    {
        "number": 4005,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3, y_3, x_4, y_4 = map(int, stdin.split())\n    x_5, y_5, x_6, y_6 = map(int, stdin.split())\n    if (x_1 < x_2 and x_2 < x_3 and x_3 < x_4 and x_4 < x_5 and x_5 < x_6 and x_6 < x_1) or (x_1 < x_3 and x_3 < x_4 and x_4 < x_5 and x_5 < x_6 and x_6 < x_1) or (x_1 < x_5 and x_5 < x_6 and x_6 < x_1 and x_3 < x_2 and x_2 < x_4):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert solution(\"3 3 7 5\") == \"NO\"",
        "num_ids": 3433,
        "indeed": false
    },
    {
        "number": 4006,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, ans = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i]!= nums[j]:\n                ans += 1\n    return str(ans)\n\n\n-----Test-----\nprint(solution(\n    \"1098\"\n))\nprint(solution(\"10\"))\nprint(solution(\"0\"))\nprint(solution(\"1\"))\nprint(solution(\"1\"))\n",
        "test": "assert solution(99999) == 3",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, *f = map(int, stdin)\n    return str(n - 1) +'' + str(f[0] + f[1]) +'' + str(f[2] + f[3]) +'' + str(f[4] + f[5])\n",
        "test": "assert solution(stdin) == \"7 4 2 3 6 5 1\"",
        "num_ids": 2528,
        "indeed": false
    },
    {
        "number": 4008,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    answer = \"NO\"\n\n    for i in range(n-k+1):\n        color_arr = []\n        for j in range(k):\n            if i+j >= k:\n                color_arr.append(a[i+j-k])\n            else:\n                color_arr.append(a[i+j])\n\n        if len(set(color_arr)) == 1:\n            answer = \"YES\"\n        else:\n            answer = \"NO\"\n        \n    return answer\n",
        "test": "assert solution(\"2 3\") == \"NO\"",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n        n,x,y=map(int,stdin.split())\n        res=0\n        for i in range(0,n):\n            res+=10**i\n        for i in range(0,y):\n            res+=10**i\n        return str(res%(10**x))",
        "test": "assert solution(stdin) == 3",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 4010,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(stdin.strip()) for stdin in stdin.split(',')]\n    s = set(a)\n    if len(s) == 1:\n        return \"YES\"\n    else:\n        for i in s:\n            if a.count(i) >= 3:\n                return \"NO\"\n        return \"YES\"\n\nclass Solution:\n    def isPalindrome(self, x: int) -> bool:\n        if x < 0:\n            return False\n        if x == 0:\n            return True\n        if x % 10 == 0:\n            return self.isPalindrome(x // 10)\n        if x % 10!= 0:\n            return False\n        if x % 10 == 0:\n            return self.isPalindrome(x // 10)\n        return False",
        "test": "assert solution(\"5\") == \"YES\"",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int,stdin.split()))\n    f = list(map(int,stdin.split()))\n    f.sort()\n    m = a[0]\n    for i in range(1,n):\n        m = f[i-1]\n        if m+f[i] == 0:\n            return m\n    return -1",
        "test": "assert solution(",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 4012,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N, K, A, B, C = map(int, stdin.split())\n    def check_divisors(A, B):\n        if A % B == 0 or B % A == 0:\n            return False\n        return True\n\n    def calculate_possible(A, B):\n        possible = []\n        for i in range(A, B+1):\n            if check_divisors(i, B):\n                possible.append(i)\n        return possible\n    \n    # return \"{:d}\".format(min(calculate_possible(A, B), calculate_possible(C, B)))\n    return \"\".join([str(min(calculate_possible(A, B))) if check_divisors(A, B) else \"-\" for A, B in zip(A, B)])\n\n\nprint(solution(input()))\n",
        "test": "assert solution(stdin) == \"101\"",
        "num_ids": 1248,
        "indeed": false
    },
    {
        "number": 4013,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    a.sort()\n    while n >= len(a):\n        a.pop()\n    while a[0] < n:\n        a.pop(0)\n    return str(len(a) - 1)",
        "test": "assert solution(\"1 3 7\") == \"1\"",
        "num_ids": 2193,
        "indeed": false
    },
    {
        "number": 4014,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    days = []\n    exams = []\n    exams_len = []\n    for i in stdin.split():\n        if len(i) == 2 and int(i) >= 10 and int(i) <= 20:\n            days.append(int(i))\n            exams_len.append(len(exams))\n            exams.append(int(i))\n        elif len(i) == 3 and int(i) >= 10 and int(i) <= 20:\n            days.append(int(i))\n            exams_len.append(len(exams))\n            exams.append(int(i))\n        elif len(i) == 4 and int(i) >= 10 and int(i) <= 20:\n            days.append(int(i))\n            exams_len.append(len(exams))\n            exams.append(int(i))\n        else:\n            pass\n    for i in range(len(days)):\n        exam_day = exams_len[i]\n        for j in range(exam_day):\n            if exam_day - j < days[i]:\n                exams_len[i] = exam_day - j\n    min_days = min(exams_len)\n    for i in range(min_days):\n        for j in range(min_days):\n            exam_day = exams_len[j]\n            if exams_len[j] - exams_len[i] <= days[i]:\n                exams.remove(exams[j])\n                exams_len.remove(exams_len[j])\n                exams_len.append(exams_len[j])\n                exams.append(exams[j])\n    for i in exams:\n        if i in days:\n            for j in range(days.index(i) + 1, len(days)):\n                days[j] = -1\n    if len(exams) == 0:\n        return \"0\"\n    return str(len(exams))\n\n\n#######\n",
        "test": "assert solution('3 1') == '1'",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 4015,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n*m)\n\nprint(solution(\"120 51840\"))\nprint(solution(\"42 42\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 728\"))\nprint(solution(\"48 7",
        "test": "assert solution(48, 72) == -1",
        "num_ids": 3607,
        "indeed": false
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    n = int(input())\n    st = [input() for i in range(n)]\n    t = int(input())\n    s = list()\n    for i in st:\n        l = len(i)\n        for j in range(l):\n            s.append(i[j])\n    for i in range(t-1):\n        a,b = s.index(st[i+1][i]),s.index(st[i+1][i+1])\n        s[a],s[b] = s[b],s[a]\n    s[-1] = st[-1][:-1]\n    return ''.join(s)\n    \"\"\"\n    \n    # Find the lengths of the substring\n    # Find the starting position of the substring\n    # Recurssively find the starting and ending positions of the substring\n    # If length is at the end, substring must be the whole\n    # If length is at the beginning, substring must be the half\n    # print the substring as a string of \"s\"\n    \n    l = len(stdin)\n    s = ''.join(stdin)\n    n,k = l,k = len(s),l-k\n    \n    if n<k:\n        return 'no'\n    if n==k:\n        return ''.join(s)\n    if n==k-1:\n        return ''.join(s[:k])\n    \n    start = 0\n    for i in range(n):\n        if s[i] in ['a','e','i','o','u','A','E','I','O','U']:\n            start += 1\n            end = start + (k-1)\n            if start <= end:\n                for j in range(start,end):\n                    s[j] = 't'\n                    if s[j].islower():\n                        break\n                else:\n                    s[start:end] = 't'\n                    s[start:end] = s[start:end].upper()\n                    s[start:end] = s[start:end].lower()\n        else:\n            start = 0\n    return ''.join(s)\n",
        "test": "assert solution([\"a\", \"b\", \"a\", \"b\"]) == \"b\"",
        "num_ids": 3475,
        "indeed": false
    },
    {
        "number": 4017,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = [int(i) for i in stdin.strip().split()]\n\n    good_indices = []\n    for j in range(n):\n        if sum(arr[:j]) == sum(arr[j+1:]):\n            good_indices.append(j)\n    print(len(good_indices))\n    print(*good_indices)\n    return str(*good_indices)",
        "test": "assert solution('5') == '0'",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef",
        "test": "assert solution(\"aaaaa\") == 233",
        "num_ids": 1715,
        "indeed": false
    },
    {
        "number": 4019,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    edges = []\n    for _ in range(n - 1):\n        v1, v2 = map(int, stdin.strip().split())\n        edges.append((v1, v2))\n    return \"YES\" if not any(edges) else \"NO\"\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.result = []\n    def DFS(self, v, edge, visited):\n        visited[v] = True\n        self.result.append(edge)\n        for i in range(len(edge)):\n            if not visited[edge[i][0]] and not visited[edge[i][1]]:\n                self.DFS(edge[i][0], edge, visited)\n    \n    def find_spanning_tree(self, n: int, m: int, edges: List[List[int]]) -> List[List[int]]:\n        visited = [False] * n\n        edge = [[0,0]] * m\n        self.DFS(0, edge, visited)\n        return self.result\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 3273,
        "indeed": false
    },
    {
        "number": 4020,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    h,m = map(int,stdin.split(':'))\n    if (h+m) % 2 == 0:\n        h = h + 12\n        m = m + 12\n    else:\n        h = h + 12\n        m = m + 24\n    return str(h) + ':' + str(m)\n\nInput\n10:00\n11:00\n\nOutput\n10:30\n11:10\n11:11\n\n'''\n\ndef",
        "test": "assert solution(\"03:02\") == \"02:02\"",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 4021,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 1\n    while True:\n        if answer == n:\n            return answer\n        n = (n + 2*(n&(n-1))) // 2\n        answer += 1\n",
        "test": "assert solution(4) == 2",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 4022,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    li = []\n    li.append(n)\n    for i in range(n):\n        if i == 0:\n            l = int(stdin.strip())\n            for j in range(n):\n                if l < li[j]:\n                    li.remove(l)\n                    break\n                else:\n                    l = l-1\n        elif i == n-1:\n            l = int(stdin.strip())\n            for j in range(n):\n                if l < li[j]:\n                    li.remove(l)\n                    break\n                else:\n                    l = l-1\n        else:\n            r = int(stdin.strip())\n            for j in range(n-1):\n                if r < li[j]:\n                    li.remove(r)\n                    break\n                else:\n                    r = r-1\n    for i in li:\n        print(i)\n    return '0'\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n\"\"\"\nclass Segment:\n    def __init__(self, l, r):\n        self.l = l\n        self.r = r\n\n    def is_convex(self):\n        if self.l >= self.r:\n            return False\n        else:\n            return True\n\n    def __repr__(self):\n        return '({}, {})'.format(self.l, self.r)\n",
        "test": "assert solution(5, 5) == 7, \"The solution for the first example should be 7\"",
        "num_ids": 1496,
        "indeed": false
    },
    {
        "number": 4023,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, *heights = map(int, stdin.split())\n    if not all(0 <= i < n for i in heights):\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    a = [0] + heights + [0]\n    part_1_start = a[1]\n    part_2_start = a[0] + 1\n    part_1_end = a[1] + a[1] + a[1] + a[1] + a[1] + a[1] + a[1]\n    part_2_end = a[1] + 1 + a[1] + a[1] + a[1] + a[1] + a[1] + a[1] + a[1]\n    for i in range(2, n):\n        a[i] = a[i] + min(part_1_start, part_2_start)\n        if a[i] < part_1_end:\n            part_1_start = a[i]\n        if a[i] < part_2_end:\n            part_2_start = a[i]\n        if a[i] < part_1_end + part_2_start:\n            part_2_end = a[i]\n    a[-1] = part_1_end + part_1_start\n    a[-2] = part_2_end + part_2_start\n    if a[-1] == part_1_end + part_1_start or a[-2] == part_2_end + part_2_start:\n        return \"NO\"\n    return \"YES\"",
        "test": "assert solution(\"3 3 5\") == \"NO\"",
        "num_ids": 2736,
        "indeed": false
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(\" \")))\n    s = list(stdin.split(\" \"))\n    \n    start = 0\n    end = 1\n    \n    for i in range(n):\n        if s[start] == s[end]:\n            end += 1\n        else:\n            start = end\n        \n        \n    if end == n:\n        print(0)\n        \n    else:\n        print(k - (end - start + 1))\n        \n    return \"\"\n\n\nsolution(\"7 3\")\n\n\n'''\n2\n3\n'''\n",
        "test": "assert solution(stdin) == 233, \"Correct answer\"",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 4025,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int,stdin.split())\n    if (a<b and a<b+c and a<c) or (a<c and a<b+c and a<c):\n        return 'Error'\n    if a+b+c==100:\n        return 'Error'\n    return str(max(a,b,c)-max(a,b,c)+1)\n\"\"\"\ndef",
        "test": "assert solution(\"30 20 10\") == \"39\"",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    t = []\n    for i in range(n):\n        t.append(list(map(int, stdin.split())))\n    poss = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if t[i][j] == t[k][j] and t[i][j] == t[k][i] and t[k][i] == t[j][i] and t[i][i] == t[j][j]:\n                    poss.append([i, j, k])\n    for i in range(n):\n        t[i] = [t[i][j] for j in range(n) if j not in poss]\n    ans = \"YES\"\n    if n % 2:\n        for i in range(n//2):\n            for j in range(i+1, n//2):\n                for k in range(j+1, n//2):\n                    if t[i][j] == t[i][k] and t[i][j] == t[k][i] and t[k][i] == t[j][i] and t[k][i] == t[j][j]:\n                        ans = \"NO\"\n                        break\n    for i in range(n):\n        t[i] = [t[i][j] for j in range(n) if j not in poss]\n    if n % 2:\n        for i in range(n//2):\n            for j in range(n//2, n):\n                for k in range(n//2, n):\n                    if t[i][j] == t[i][k] and t[i][j] == t[k][j] and t[k][j] == t[j][i] and t[k][i] == t[j][i] and t[j][i] == t[i][i]:\n                        ans = \"NO\"\n                        break\n    return ans\n    \n",
        "test": "assert solution(\"5 4 5 4 5\") == \"NO\"",
        "num_ids": 2419,
        "indeed": false
    },
    {
        "number": 4027,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = set(map(int, stdin.split()))\n    B = set(map(int, stdin.split()))\n    x = max(A - B)\n    return str(x)\n\ndef",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 4028,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = s.replace('()', ')(')\n    s = s.replace('))', ')())')\n    s = s.replace('()', '(()')\n    s = s.replace('()', ')(')\n    s = s.replace('())', '((')\n    s = s.replace('((()', '())')\n    s = s.replace(')(())', '(())')\n    s = s.replace('((())', '()())')\n    s = s.replace('((()))', '(())')\n    s = s.replace('())()', '(())')\n    s = s.replace(')(()', '(()')\n    s = s.replace('()())', '(()())')\n    s = s.replace('()()', '())()')\n    s = s.replace('((())', '())()')\n    s = s.replace(')(())', '(())')\n    s = s.replace('(())()', '()()())')\n    s = s.replace('()((())', '()())()(')\n    s = s.replace('((())', '()()(')\n    s = s.replace('((()(())', '(())()((')\n    s = s.replace('((())', '()(')\n    s = s.replace('((()()(())', '(())()((')\n    s = s.replace('((()(()())', '(())()((')\n    s = s.replace('((()(())', '()()(()(')\n    s = s.replace('((())', '()()(')\n    s = s.replace('((())', '()()(')\n    s = s.replace('((()(())', '()()()(')\n    s = s.replace('((())', '()()(')\n    s = s.replace('()(()', '()()((')\n    s = s.replace('((())', '()()(')\n    s = s.replace('())(())', '()()()()(')\n    s = s.replace('())(())', '()()()()(')\n    s = s.replace(')(())', '()()()()(')\n    s = s.replace('())(()', '()()()()(')\n    s = s.replace(')(())', '()()()()(')\n    s = s.replace(')(()', '()()()()(')\n    s = s.replace(')(())', '()()()()(')\n    s = s.replace(')(())', '()()()()()(')\n    s = s.replace(')(())', '()()()()()()(')\n    s = s.replace(')(())', '()()()()()()()()')\n    s = s.replace('())()', '())()')\n    s = s.replace('((()', '(()')\n    s = s.replace('((())', '(())')\n    s = s.replace('(())', '()())')\n    s = s.replace('(())', '()()')\n    s = s.replace('(())', '()()')\n    s = s.replace('(())', '()()')\n    s = s.replace('(())', '()()')\n    s = s.replace('(())', '()()')\n    s = s.replace('((()', '(())')\n    s = s.replace('((())', '(())')\n    s = s.replace('((())', '(())')\n    s = s.replace('((())', '(())')\n    s = s.replace('((())', '(())')\n    s = s.replace('((())', '(())')\n    s = s.replace('()())', '()()()')\n    s = s.replace('()(),(', '()())')\n    s = s.replace(')((', '()(')\n    s = s.replace('))()', ')())')\n    s = s.replace('((())', '(()')\n    s = s.replace('((())', '(())')\n    s = s.replace('((())', '()())')\n    s = s.replace('((())', '()()')\n    s = s.replace('((())', '(())')\n    s = s.replace('(()(),(', '(())')\n    s = s.replace('(())', '()()(')\n    s = s.replace('(())', '()()')\n    s = s.replace('(())', '()()')\n    s = s.replace('(())', '()()')\n    s = s.replace('(())', '()()')\n    s = s.replace('()())', '(())')\n    s = s.replace('()(())', '(())')\n    s = s.replace('()()())', '(())()')\n    s = s.replace('()())', '())()')\n    s = s.replace('()()(())', '(())()()')\n    s = s.replace('()())', '(())()')\n    s = s.replace('()())', '()()()')\n    s = s.replace('()())', '(())()')\n    s = s.replace('()(())', '(())()')\n    s = s.replace('())(())', '(())()()')\n    s = s.replace('())(())', '(())()()')\n    s = s.replace('())(())', '(())()()')\n    s = s.replace('())(())', '()()()()')\n    s = s.replace('())(())', '()()()()')\n    s = s.replace('())(())', '()()()()')\n    s = s.replace('())(())', '()()()()')\n    s = s.replace('())(())', '()()()()')\n    s = s.replace('())(())', '()()()()()')\n    s = s.replace('())(())', '()()()()()')\n    s = s.replace('())(())', '()()()()()')\n    s = s.replace('())(())', '()()()()()')\n    s = s.replace('())(())', '()()()()()()')\n    s = s.replace('())(())', '()()()()()()')\n    s = s.replace('())(())', '()()()()()()')\n    s = s",
        "test": "assert solution(input) == \"4\"",
        "num_ids": 3629,
        "indeed": false
    },
    {
        "number": 4029,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25!= 0:\n        return -1\n    else:\n        a = n\n        s = n // 25\n        b = n - s * 25\n        if a % 25 == 0:\n            return s + 1\n        elif a % 25 == 1:\n            return s\n        else:\n            while a % 25 == 0:\n                a /= 25\n            if b % 25 == 0:\n                return s + 1\n            elif b % 25 == 1:\n                return s\n            else:\n                while b % 25 == 0:\n                    b /= 25\n                if a % 25 == 1:\n                    return s + 1\n                elif a % 25 == 0:\n                    return s + 1\n                else:\n                    return -1\n",
        "test": "assert solution(750110) == -1",
        "num_ids": 2463,
        "indeed": false
    },
    {
        "number": 4030,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    c = [0] * n\n    v = [0] * n\n    for i in range(n):\n        if s[i] == 'a':\n            c[i] = 1\n            v[i] = 1\n        else:\n            c[i] = 2\n            v[i] = 2\n    for i in range(n - 1):\n        if c[i] == c[i + 1]:\n            c[i] += 1\n            c[i + 1] += 1\n        else:\n            if v[i]!= 1:\n                c[i] = 1\n                c[i + 1] = 2\n                v[i] = 1\n                v[i + 1] = 1\n    for i in range(n):\n        if c[i]!= v[i]:\n            return 0\n    return n",
        "test": "assert solution(stdin) == 3",
        "num_ids": 3307,
        "indeed": false
    },
    {
        "number": 4031,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    print(sorted(s))\n    return \"\"\n\n\n\n'''\n\nclass Solution:\n    def reorderString(self, s: str) -> str:\n        lst = list(set(s))\n        # print(lst)\n        # for i in range(len(lst)):\n        #     print(i)\n        #     if s[i] in lst:\n        #         lst.remove(s[i])\n        #         print(lst)\n        #         for j in range(len(lst)):\n        #             print(j)\n        #             if s[j] in lst:\n        #                 print(\"1\")\n        #                 lst.remove(s[j])\n        #                 print(lst)\n        #                 break\n        #             else:\n        #                 print(\"2\")\n        #                 lst.remove(s[j])\n        #                 print(lst)\n        #                 break\n\n        return ''.join(lst)",
        "test": "assert solution == \"YES\"",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 4032,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    lst = sorted(lst, reverse=True)\n    num_solved = 0\n    for i in range(len(lst) - 1):\n        j = i + 1\n        while j < len(lst):\n            if lst[i] < lst[j]:\n                j = j + 1\n            else:\n                break\n        if lst[i] == lst[j]:\n            num_solved = num_solved + 1\n    return str(num_solved)\n    ",
        "test": "assert solution(\"5 100\") == \"0\"",
        "num_ids": 2276,
        "indeed": false
    },
    {
        "number": 4033,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    ans = 0\n    for a1 in range(1, n):\n        a_1 = a1 + 1\n        for a2 in range(1, n):\n            if a_1 < n and a_1 >= a:\n                b_1 = b1 + 1\n                b_2 = b2 + 1\n                if b_1 < n and b_1 >= b:\n                    if a_1!= a_2:\n                        ans += a_1 - a_2\n    return str(ans)\n\n\n-----Code-----\n\nn, a, b = list(map(int, stdin.split()))\nans = 0\nfor a1 in range(1, n):\n    a_1 = a1 + 1\n    for a2 in range(1, n):\n        if a_1 < n and a_1 >= a:\n            b_1 = b1 + 1\n            b_2 = b2 + 1\n            if b_1 < n and b_1 >= b:\n                if a_1!= a_2:\n                    ans += a_1 - a_2\nprint(ans)\n",
        "test": "assert solution(['2', '2', '1', '2', '3', '2', '1', '2', '1']) == '12'",
        "num_ids": 2688,
        "indeed": false
    },
    {
        "number": 4034,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    \n    # Find the size of s\n    size = len(s)\n    \n    # Initialize answer\n    answer = []\n    \n    # Count the length of every word in the string\n    for i in range(size):\n        word = s[i:i+size]\n        # Count each letter in word\n        count = 0\n        for char in word:\n            if char not in answer:\n                count += 1\n        # If there are only two letters in word, there's no solution\n        if count == 2:\n            answer.append(\"NO\")\n        else:\n            answer.append(\"YES\")\n    \n    # Print result\n    for i in answer:\n        print(i)",
        "test": "assert solution(input()) == \"NO\"",
        "num_ids": 1436,
        "indeed": false
    },
    {
        "number": 4035,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n  n,a,b=map(int,stdin.split())\n  b=b/100+1\n  a=a/100+1\n  while True:\n    if a==0 and b==0:\n      return str(b)\n    elif a==0:\n      return str(b*(2**(n-2)))+' yen'\n    elif b==0:\n      return str(b*(2**(n-2)))+' yen'\n    else:\n      if a>b:\n        a=a*2\n      else:\n        b=b*2\n\nprint(solution(input()))\n",
        "test": "assert solution('2 2 15') == -1",
        "num_ids": 840,
        "indeed": false
    },
    {
        "number": 4036,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    k = k-1\n    if k == 0:\n        return \"NO\"\n    if a[0] > a[-1]:\n        return \"NO\"\n    for i in range(1, n-1):\n        if a[i] > a[i-1] + k:\n            return \"NO\"\n    return \"YES\"",
        "test": "assert solution('8 3') == 'NO'",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 4037,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n,r = map(int,stdin.split())\n    aa = map(int,stdin.split())\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if r>aa[i]>=r<aa[j]:\n                r = aa[i]\n                break\n    return str(len(aa))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert solution(stdin) == 20",
        "num_ids": 2394,
        "indeed": false
    },
    {
        "number": 4038,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    \n    ans = 0\n    for i in range(1, n):\n        for j in range(i):\n            if a[i][j]!= a[j][i]:\n                break\n        else:\n            ans += 1\n    return str(ans)\n\n-----Note-----\n\nThis problem was solved by splitting each list and sorting them,\nthen comparing each one against each other for determining if they are palindromes.\n\nThe following is the example input:\n\nInput:\n4\n1 2 2 1\n2 1 2 2\n2 3 2 3\n2 3 3 2\n1 1 1 1 1\n\nOutput:\nYES\n1 2 2 1\n3 1 3 2\n3 1 3 2\n2 3 2 3\n1 2 2 1\n\nHere, \"1\" is one of the first number, \"2\" is the second, \"3\" is the third, \"2\" is the fourth, \"1\" is the first, \"3\" is the second.\n\nThe first list has a palindrome.\n\nThe second list has no palindrome.\n\nThe third list has a palindrome.\n\nThe fourth list has a palindrome.\n\nIn the first case, the palindrome appears exactly once.\n\nIn the second case, it appears exactly three times, each time with a different number.\n\nIn the third case, it appears exactly five times, each time with a different number.\n\nIn the fourth case, it appears exactly seven times, each time with a different number.\n\nIn the fifth case, it appears exactly nine times, each time with a different number.\n\nIn the sixth case, it appears exactly ten times, each time with a different number.\n\nIn the seventh case, it appears exactly eleven times, each time with a different number.\n\nIn the eighth case, it appears exactly thirteen times, each time with a different number.\n\nIn the ninth case, it appears exactly fifteen times, each time with a different number.\n\nIn the tenth case, it appears exactly seventeen times, each time with a different number.\n\nIn the eleventh case, it appears exactly eighteen times, each time with a different number.\n\nIn the twelveth case, it appears exactly twenty times, each time with a different number.\n\nIn the thirteenth case, it appears exactly thirty times, each time with a different number.\n\nIn the fourteenth case, it appears exactly four times, each time with a different number.\n\nIn the fifteenth case, it appears exactly fifteen times, each time with a different number.\n\nIn the sixteenth case, it appears exactly sixteen times, each time with a different number.\n\nIn the seventeenth case, it appears exactly seventeen times, each time with a different number.\n\nIn the eighteenth case, it appears exactly eighteen times, each time with a different number.\n\nIn the nineteenth case, it appears exactly nineteen times, each time with a different number.\n\nIn the twentyth case, it appears exactly twenty times, each time with a different number.\n\nIn the thirdrd case, it appears exactly thirty times, each time with a different number.\n\nIn the fourthth case, it appears exactly four times, each time with a different number.\n\nIn the fifthth case, it appears exactly fifty times, each time with a different number.\n\nIn the sixthth case, it appears exactly six times, each time with a different",
        "test": "assert solution('1\\n', 4) == 'YES\\n'",
        "num_ids": 1526,
        "indeed": false
    },
    {
        "number": 4039,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    \n    answer = 'YES'\n    \n    if n < min(a) or r < min(b):\n        answer = 'NO'\n    elif max(a) < max(b):\n        answer = 'NO'\n    elif max(a) == max(b):\n        for i in range(len(a)):\n            if r < a[i] or b[i] < r:\n                answer = 'NO'\n                break\n            elif r > a[i] and b[i] > r:\n                answer = 'NO'\n                break\n    else:\n        for i in range(len(a)):\n            if r < a[i] or b[i] < r:\n                answer = 'NO'\n                break\n            elif r > a[i] and b[i] > r:\n                answer = 'NO'\n                break\n    return answer\n",
        "test": "assert solution(\"3 -3\") == \"NO\"",
        "num_ids": 2646,
        "indeed": false
    },
    {
        "number": 4040,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n!= m and d!= m + n:\n        return 'NO'\n    if n == 0 and m == 0:\n        return 'YES'\n    else:\n        a.sort()\n        for i in range(n, m+n):\n            if a[i]!= 1:\n                a[i - n], a[i] = a[i], a[i - n]\n        if d >= m:\n            return 'YES'\n        else:\n            a.sort()\n            for i in range(d, m+d):\n                if a[i]!= 1:\n                    a[i - d], a[i] = a[i], a[i - d]\n            if d > 0:\n                return 'YES'\n            else:\n                return 'NO'\n",
        "test": "assert solution(\"10 1 3\") == \"NO\"",
        "num_ids": 1223,
        "indeed": false
    },
    {
        "number": 4041,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    s = input[0]\n    t = input[1]\n    res = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i:j] == t:\n                res = max(j-i, res)\n    return res\n",
        "test": "assert solution(stdin) == 3",
        "num_ids": 1981,
        "indeed": false
    },
    {
        "number": 4042,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    x = list(map(int, x))\n    x.sort(reverse=True)\n    result = []\n    x.append(x.pop())\n    for i in x:\n        result.append(str(i))\n    return \" \".join(result)",
        "test": "assert solution('9') == '9'",
        "num_ids": 3680,
        "indeed": false
    },
    {
        "number": 4043,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d > n - d * k:\n        return \"NO\"\n    \n    if n < 1 or d < 3:\n        return \"NO\"\n    \n    tree = []\n    for _ in range(n):\n        tree.append(int(stdin.rstrip()))\n    tree.sort(reverse=True)\n    \n    for i in range(n-1):\n        if tree[i] == tree[i+1]:\n            return \"NO\"\n    \n    if d == 2 and tree[-1] == tree[-2]:\n        return \"YES\"\n    \n    return \"YES\"\n\nSolution 2",
        "test": "assert solution(stdin) == \"YES\" or solution(stdin) == \"NO\"",
        "num_ids": 2486,
        "indeed": false
    },
    {
        "number": 4044,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    while(len(stdin) > 1):\n        a = int(stdin[0])\n        b = int(stdin[1])\n        x = int(stdin[2])\n        n = b - a + 1\n        if n < 3:\n            return ''\n        print(n)\n        s = stdin[0] + stdin[1] + stdin[2]\n        print(s)\n        if s[0] == '0' and s[1] == '0':\n            s = s[2:]\n        else:\n            s = s[2:]\n        print(s)\n        i = 1\n        while(i < n):\n            if s[i] == '1':\n                s = s[:i] + '0' + s[i:]\n            else:\n                s = s[:i] + '1' + s[i:]\n            i += 1\n        print(s)\n    return s\n    \n    \n\nprint(solution(input()))",
        "test": "assert solution('110010') == '100110'",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 4045,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # todo\n    pass\n\n\ndef",
        "test": "assert solution(stdin) == 'NO'",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 4046,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    count = int(stdin.strip().split(' ')[1])\n    q = []\n    for i in range(count):\n        q.append(int(stdin.strip().split(' ')[0]))\n    print(q)\n    for i in range(len(q) - 1):\n        for j in range(i + 1, len(q)):\n            if q[i] > q[j]:\n                answer = q[i]\n                q[i], q[j] = q[j], q[i]\n    print(q)\n    print(answer)\n    return answer\n",
        "test": "assert solution(",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 4047,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    for _ in range(n):\n        x, y, n = [int(x) for x in stdin.split()]\n        if (y-x)%2 == 1:\n            y = y + n -1\n            x = y - 1\n        print(y, x, end=\" \")\n    return str(x)\n\n\nprint(solution(\"5 2 3 4\"))\n\nSample Input 1:\n\n5\n1 2 3\n\nSample Output 1:\n\n1\n\nSample Input 2:\n\n3\n1 2 3 4 5\n\nSample Output 2:\n\n4\n\n\"\"\"",
        "test": "assert solution(input()) == \"3\"",
        "num_ids": 2192,
        "indeed": false
    },
    {
        "number": 4048,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.strip())\n  if N == 0:\n    return \"0\"\n  if N == 1:\n    return \"1\"\n  square_size = 2*(N-1)\n  square_temp = (square_size + 1) * (square_size + 1)\n  number_of_moves = N * (square_size + 1) * (square_size + 1)\n  return str(number_of_moves - square_temp)\n\ndef",
        "test": "assert solution(0) == 0",
        "num_ids": 2758,
        "indeed": false
    },
    {
        "number": 4049,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, a_1, a_2, a_3 = map(int, stdin.split())\n    b_1, b_2, b_3 = map(int, stdin.split())\n    min_round_len = 1\n    max_round_len = max(a_1, a_2, a_3, b_1, b_2, b_3)\n    if n <= 0 or n % 3!= 0 or max_round_len <= 0 or max_round_len % 3!= 0 or max_round_len % 3!= 1:\n        return '0'\n    \n    a_1_count = 0\n    a_2_count = 0\n    a_3_count = 0\n    b_1_count = 0\n    b_2_count = 0\n    b_3_count = 0\n    \n    a_1_count += a_1\n    a_2_count += a_2\n    a_3_count += a_3\n    b_1_count += b_1\n    b_2_count += b_2\n    b_3_count += b_3\n    \n    if a_1 == b_1 == a_3 == b_3:\n        return '0'\n    elif a_1_count == b_1_count == a_3_count == b_3_count:\n        return str(min_round_len)\n    else:\n        for i in range(0, max_round_len, 3):\n            if a_1_count == b_1_count == a_3_count == b_3_count:\n                break\n            elif a_1_count == b_1_count == a_3_count == b_3_count:\n                return str(i + 1)\n            elif a_1_count == b_1_count == a_3_count == b_3_count:\n                return str(min_round_len - i)\n            elif a_1_count < b_1_count < a_3_count < b_3_count:\n                a_1_count += 1\n                a_1_count -= 1\n                b_1_count += 1\n                b_1_count -= 1\n            elif a_1_count < b_1_count < a_3_count < b_3_count:\n                a_1_count += 1\n                a_1_count -= 1\n                b_1_count += 1\n                b_1_count -= 1\n            elif a_1_count < b_1_count < a_3_count < b_3_count:\n                a_1_count += 1\n                a_1_count -= 1\n                b_1_count += 1\n                b_1_count -= 1\n            elif a_1_count < b_1_count < a_3_count < b_3_count:\n                a_1_count += 1\n                a_1_count -= 1\n                b_1_count += 1\n                b_1_count -= 1\n            elif a_1_count < b_1_count < a_3_count < b_3_count:\n                a_1_count += 1\n                a_1_count -= 1\n                b_1_count += 1\n                b_1_count -= 1\n            elif a_1_count < b_1_count < a_3_count < b_3_count:\n                a_1_count += 1\n                a_1_count -= 1\n                b_1_count += 1\n                b_1_count -= 1\n            elif a_1_count < b_1_count < a_3_count < b_3_count:\n                a_1_count += 1\n                a_1_count -= 1\n                b_1_count += 1\n                b_1_count -= 1\n            elif a_1_count < b_1_count < a_3_count < b_3_count:\n                a_1_count += 1\n                a_1_count -= 1\n                b_1_count += 1\n                b_1_count -= 1\n    return str(min_round_len)\n",
        "test": "assert solution(",
        "num_ids": 2884,
        "indeed": false
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, *A, b = map(int, stdin.split())\n    blocks = [[*map(int, input().split())] for _ in range(n)]\n    return reduce(lambda x, y: x + y, [b for i in range(len(A) - 2) for j in range(i + 1, len(A) - 1) if A[i] + A[j] == b and A[i] * A[j] <= blocks[i][j]], [])\n",
        "test": "assert solution(\"4 1 2 2 1 5 3\") == \"3 4\"",
        "num_ids": 2016,
        "indeed": false
    },
    {
        "number": 4051,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, *a = map(int, stdin.split())\n    \n    heights = [1] + list(a)\n    \n    stack = []\n    \n    for height in heights[::-1]:\n        while len(stack) > 0 and stack[-1] < height:\n            stack.pop()\n        \n        if len(stack) == 0:\n            return 'NO'\n        \n        stack.append(height)\n    \n    return 'YES'\n",
        "test": "assert solution('1 2 3') == 'NO'",
        "num_ids": 1156,
        "indeed": false
    },
    {
        "number": 4052,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    s, t = map(str, stdin.split(\"\\n\"))\n    t = sorted(t)\n\n    for i in range(0, len(t) - 1, 1):\n        for j in range(i + 1, len(t) + 1, 1):\n            if (t[i]!= t[j]):\n                return str(j - i + 1)\n    \n    return str(0)\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcdef') == '5'\nTrue\n>>> solution('abcd') == '3'\nTrue\n>>> solution('abcde') == '3'\nTrue\n>>> solution('a') == '1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcdef') == '-1'\nTrue\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abd') == '-1'\nTrue\n>>> solution('abc') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcdef') == '-1'\nTrue\n>>> solution('abd') == '-1'\nTrue\n>>> solution('ab') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcdef') == '3'\nTrue\n>>> solution('abcd') == '3'\nTrue\n>>> solution('abc') == '3'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcd') == '3'\nTrue\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('a') == '1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcdef') == '-1'\nTrue\n>>> solution('abdfec') == '-1'\nTrue\n>>> solution('abdfe') == '-1'\nTrue\n>>> solution('abdfce') == '-1'\nTrue\n>>> solution('abdf') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcdef') == '3'\nTrue\n>>> solution('abd') == '3'\nTrue\n>>> solution('abc') == '3'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcdef') == '-1'\nTrue\n>>> solution('abd') == '-1'\nTrue\n>>> solution('abc') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('a') == '-1'\nTrue\n>>> solution('a') == '-1'\nTrue\n>>> solution('abc') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcdef') == '3'\nTrue\n>>> solution('abd') == '3'\nTrue\n>>> solution('abc') == '3'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcd') == '3'\nTrue\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abc') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcdef') == '-1'\nTrue\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abc') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abc') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('a') == '-1'\nTrue\n>>> solution('a') == '-1'\nTrue\n>>> solution('abc') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abc') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcdef') == '3'\nTrue\n>>> solution('abd') == '3'\nTrue\n>>> solution('abd') == '3'\nTrue\n>>> solution('abcd') == '3'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abd') == '-1'\nTrue\n>>> solution('abc') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcdef') == '-1'\nTrue\n>>> solution('abd') == '-1'\nTrue\n>>> solution('abc') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcd') == '3'\nTrue\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abd') == '-1'\nTrue\n>>> solution('abcd') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abc') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcdef') == '3'\nTrue\n>>> solution('abd') == '3'\nTrue\n>>> solution('abc') == '3'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abc') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abcd') == '-1'\nTrue\n>>> solution('abc') == '-1'\nTrue\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTest case:\n\n>>> solution('abcd')",
        "test": "assert solution('0') == -1",
        "num_ids": 3261,
        "indeed": false
    },
    {
        "number": 4053,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    st = stdin.strip()\n    lst = []\n    for i in st:\n        lst.append(i)\n    def valid(prefix, suffix):\n        if len(prefix) + len(suffix) > n:\n            return False\n        if prefix[:len(suffix)]!= suffix:\n            return False\n        return True\n\n    def isprefix(prefix, suffix):\n        for i in range(len(prefix)):\n            if prefix[i]!= suffix[i]:\n                return False\n        return True\n\n    def issuffix(prefix, suffix):\n        for i in range(len(prefix)):\n            if prefix[i]!= suffix[i]:\n                return False\n        return True\n\n    def pprefix(prefix):\n        if isprefix(prefix, st):\n            return prefix\n        else:\n            return st[:len(prefix)]\n\n    def psuffix(suffix):\n        if issuffix(suffix, st):\n            return suffix\n        else:\n            return st[len(suffix):]\n\n    for i in range(n):\n        prefix = pprefix(st[:i])\n        suffix = psuffix(st[i+1:])\n        if valid(prefix, suffix):\n            lst.append(prefix)\n            lst.append(suffix)\n    return ''.join(lst)\n",
        "test": "assert solution(stdin) == \"SP\"",
        "num_ids": 2611,
        "indeed": false
    },
    {
        "number": 4054,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    B %= 10\n    if B < 0:\n        B = B * 10 + 1\n    A *= 10\n    if A < 0:\n        A = A * 10 + 1\n    if A < 0:\n        A = A * 10 + B\n    print(A)\n    return str(A)\n\n-----Constraints-----\n1 <= stdin.length <= 100\n0 <= a_{i} <= 100\n\n-----Submissions-----\n\nSample Input\n3\n6 3\n2\nSample Output\n1\n\nExplanation\n\nAn A = 0; A = 1; A = 5; A = 6.\nA = 1 * 10 + B = 11; A = 2 * 10 + B = 20; A = 3 * 10 + B = 30.\nA = 10 * 10 + 3 = 30.\nA = 10 * 10 + B = 15; A = 2 * 10 + B = 17; A = 3 * 10 + B = 19.\nA = 10 * 10 + 3 = 17; A = 2 * 10 + B = 20; A = 3 * 10 + B = 22.\nA = 10 * 10 + B = 30; A = 2 * 10 + B = 32.\nA = 10 * 10 + B = 33; A = 3 * 10 + B = 38.\nA = 10 * 10 + B = 39; A = 2 * 10 + B = 40.\nA = 10 * 10 + B = 41; A = 3 * 10 + B = 44.\nA = 10 * 10 + B = 45; A = 2 * 10 + B = 46.\nA = 10 * 10 + B = 47; A = 3 * 10 + B = 49.\nA = 10 * 10 + B = 50; A = 2 * 10 + B = 51.\nA = 10 * 10 + B = 53; A = 3 * 10 + B = 56.\nA = 10 * 10 + B = 57; A = 2 * 10 + B = 59.\nA = 10 * 10 + B = 61; A = 3 * 10 + B = 63.\nA = 10 * 10 + B = 64; A = 2 * 10 + B = 65.\nA = 10 * 10 + B = 67; A = 3 * 10 + B = 69.\nA = 10 * 10 + B = 71; A = 2 * 10 + B = 72.\nA = 10 * 10 + B = 73.\nA = 10 * 10 + B = 75; A = 3 * 10 + B = 76.\nA = 10 * 10 + B = 77.\nA = 10 * 10 + B = 79; A = 2 * 10 + B = 80.\nA = 10 * 10 + B = 81.\nA = 10 * 10 + B = 83; A = 3 * 10 + B = 84.\nA = 10 * 10 + B = 85.\nA = 10 * 10 + B = 87.\nA = 10 * 10 + B = 89.\nA = 10 * 10 + B = 91.\nA = 10 * 10 + B = 93.\nA = 10 * 10 + B = 95.\nA = 10 * 10 + B = 97.\nA = 10 * 10 + B = 99.\nA = 10 * 10 + B = 101.\nA = 10 * 10 + B = 103.\nA = 10 * 10 + B = 105.\nA = 10 * 10 + B = 107.\nA = 10 * 10 + B = 109.\nA = 10 * 10 + B = 111.\nA = 10 * 10 + B = 113.\nA = 10 * 10 + B = 115.\nA = 10 * 10 + B = 117.\nA = 10 * 10 + B = 119.\nA = 10 * 10 + B = 121.\nA = 10 * 10 + B = 123.\nA = 10 * 10 + B = 125.\nA = 10 * 10 + B = 127.\nA = 10 * 10 + B = 129.\nA = 10 * 10 + B = 131.\nA = 10 * 10 + B = 133.\nA = 10 * 10 + B = 135.\nA = 10 * 10 + B = 137.\nA = 10 * 10 + B = 139.\nA = 10 * 10 + B = 141.\nA = 10 * 10 + B = 143.\nA = 10 * 10 + B = 145.\nA = 10 * 10 + B = 147.\nA = 10 * 10 + B = 149.\nA = 10 * 10 + B = 151.\nA = 10 * 10 + B = 153.\nA = 10 * 10 + B = 155.\nA = 10 * 10 + B = 157.\nA = 10 * 10 + B = 159.\nA = 10 * 10 + B = 161.\nA = 10 * 10 + B = 163.\nA = 10 * 10 + B = 165.\nA = 10 * 10 + B = 167.\nA = 10 * 10 + B = 169.\nA = 10 * 10 + B = 171.\nA = 10 * 10 + B = 173.\nA = 10 * 10 + B = 175.\nA = 10 * 10 + B = 177.\nA = 10 * 10 + B = 179.\nA = 10 * 10 + B = 181.\nA = 10 * 10 + B = 183.\nA = 10 * 10 + B = 185.\nA = 10 * 10 + B = 187.\nA = 10 * 10 + B = 189.\nA = 10 * 10 + B = 191.\nA = 10 * 10 + B = 193.\nA = 10 * 10 + B = 195.\nA = 10 * 10 + B = 197.\nA = 10 * 10 + B = 199.\nA = 10 * 10 + B = 211.\nA = 10 * 10 + B = 213.\nA = 10 * 10 + B = 215.\nA = 10 * 10 + B = 217.\nA = 10 * 10 + B = 219.\nA = 10 * 10 + B = 221.\nA = 10 * 10 + B = 223.\nA = 10 * 10 + B = 225.\nA = 10 * 10 + B = 227.\nA = 10 * 10 + B = 229.\nA = 10 * 10 + B = 231.\nA = 10 * 10 + B = 233.\nA = 10 * 10 + B = 235.\nA = 10 * 10 + B = 237.\nA = 10 * 10 + B = 239.\nA = 10 * 10 + B = 241.\nA = 10 * 10 + B = 243.\nA = 10 * 10 + B = 245.\nA = 10 * 10 + B = 247.\nA = 10 * 10 + B = 249.\nA = 10 * 10 + B = 251.\nA = 10 * 10 + B = 253.\nA = 10 * 10 + B = 255.\nA = 10 * 10 + B = 257.\nA = 10 * 10 + B = 259.\nA = 10 * 10 + B = 261.\nA = 10 * 10 + B = 263.\nA = 10 * 10 + B = 265.\nA = 10 * 10 + B = 267.\nA = 10 * 10 + B = 269.\nA = 10 * 10 + B = 271.\nA = 10 * 10 + B = 273.\nA = 10 * 10 + B = 275.\nA = 10 * 10 + B = 277.\nA = 10 * 10 + B = 279.\nA = 10 * 10 + B = 281.\nA = 10 * 10 + B = 283.\nA = 10 * 10 + B = 285.\nA = 10 * 10 + B = 287.\nA = 10 * 10 + B = 289.\nA = 10 * 10 + B = 291.\nA = 10 * 10 + B = 293.\nA = 10 * 10 + B = 295.\nA = 10 * 10 + B = 297.\nA = 10 * 10 + B = 299.\nA = 10 * 10 + B = 301.\nA = 10 * 10 + B = 303.\nA = 10 * 10 + B = 305.\nA = 10 * 10 + B = 307.\nA = 10 * 10 + B = 309.\nA = 10 * 10 + B =",
        "test": "assert solution(input()) == \"1\"",
        "num_ids": 4059,
        "indeed": false
    },
    {
        "number": 4055,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1):\n            if a[i]==a[j] and a[i]<0:\n                cnt += 1\n    return str(cnt)\n\nInput\n5\n1 1 0 1 1 0 1 0 1 0\n\nOutput\n0\n",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 4056,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    num = 1\n    for i in a:\n        num += i\n    answer = 0\n    for i in range(1,num):\n        if num % i == 0:\n            answer += 1\n    return str(answer)",
        "test": "assert solution(stdin) == 12",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 4057,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    coin_arr = list(map(int, stdin.split()))\n    \n    pocket = {i for i in range(1, len(coin_arr) + 1)}\n    i, j = 0, 0\n    \n    while j < len(coin_arr):\n        if coin_arr[j] in pocket:\n            pocket -= {coin_arr[j]}\n            i += 1\n        j += 1\n    \n    if i == 0:\n        pocket -= {coin_arr[j]}\n        return str(len(pocket))\n    \n    return str(i)\n",
        "test": "assert solution('10') == 2",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 4058,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    if n == r:\n        print(-1)\n        return\n    arr = list(map(int, stdin.split()))\n    if n!= len(arr):\n        print(-1)\n        return\n    heaters = {}\n    for i in range(n):\n        heaters[i] = arr[i]\n    arr.sort()\n    # print(heaters)\n    min_heaters = int(len(heaters) * (1 + (r // n)))\n    # print(min_heaters)\n    for i in range(n):\n        if i + min_heaters >= r:\n            break\n        elif i + min_heaters > r:\n            heaters[i + min_heaters] = 0\n        else:\n            heaters[i + min_heaters] = 1\n    print(min_heaters)\n    return min_heaters\n",
        "test": "assert solution(\"15 3\") == \"3\"",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 4059,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  arr = []\n  for i in range(n):\n    x, y, z = map(int, stdin.split())\n    arr.append((x, y, z))\n  return str(len(set(arr)))",
        "test": "assert solution(3) == 3",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 4060,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    open_brackets = {\"(\": \")\", \")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    close_brackets = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    answer = 0\n    for i in range(n):\n        curr = stdin[i]\n        if curr in open_brackets.values():\n            answer += 1\n            for j in range(i+1, n):\n                new_curr = stdin[j]\n                if new_curr == curr:\n                    if i > 0:\n                        answer += 1\n                    break\n        elif curr in close_brackets.values():\n            answer += 1\n            for j in range(i+1, n):\n                new_curr = stdin[j]\n                if new_curr == curr:\n                    if i < n-1:\n                        answer += 1\n                    break\n    return answer\n\n----Constraints----\n\n0 <= n <= 10^5\n\n\"\"\"\n\ndef",
        "test": "assert solution(\"((((((((((((()))))))))))))))\") == 9",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 4061,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return max([len(s) for s in [line.strip() for line in stdin.splitlines()]])\n",
        "test": "assert solution('ddbbbbca') == 2",
        "num_ids": 3477,
        "indeed": false
    },
    {
        "number": 4062,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, *x, *y = map(int, stdin.split())\n    a, b, c, d = x, y, x, y\n    while a % 10 > b % 10 > c % 10 > d % 10:\n        a, b, c, d = a + b + c + d, a + b + c + d, a + b + c + d, a + b + c + d\n    return str(a * b * c * d)",
        "test": "assert solution(s) == \"2\"",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 4063,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N,d_1,d_2,d_3,d_4 = map(int, stdin.split())\n    if N == 1:\n        if d_1 < d_4:\n            return 2\n        else:\n            return 1\n    if N == 2:\n        if d_1 < d_3:\n            return 2\n        else:\n            return 1\n    if N == 3:\n        if d_1 < d_2:\n            return 2\n        else:\n            return 1\n    if N == 4:\n        if d_1 < d_4:\n            return 2\n        else:\n            return 1\n    if N == 5:\n        if d_1 < d_2:\n            return 2\n        else:\n            return 1\n    if N == 6:\n        if d_1 < d_3:\n            return 2\n        else:\n            return 1\n    return 0\n\nprint(solution(\"6 9 4 3 4 2 1\"))\n\n------TODO-------\n\n\"\"\"\n\n\"\"\"\n2 \\leq N \\leq 10^5\n- N is an even number.\n- 1 \\leq d_i \\leq 10^5\n- All values in input are integers.\n\n2 \\leq d_i \\leq 10^5\n- 1 \\leq K \\leq 10^5\n- All values in input are integers.\n\nprint(solution(\"6 9 4 3 4 2 1\"))\n\"\"\"\n",
        "test": "assert solution(input) == \"2\"",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n, h, l = list(map(int, stdin.split()))\n        a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8 = map(int, stdin.split())\n        \n        a = (a_1 + a_2 + a_3 + a_4 + a_5 + a_6 + a_7 + a_8)\n        \n        if n == a:\n            answer = max(a, h)\n        elif n >= a:\n            a_1 = max(a_1 - h, 0)\n            a_2 = max(a_2 - h, 0)\n            a_3 = max(a_3 - h, 0)\n            a_4 = max(a_4 - h, 0)\n            a_5 = max(a_5 - h, 0)\n            a_6 = max(a_6 - h, 0)\n            a_7 = max(a_7 - h, 0)\n            a_8 = max(a_8 - h, 0)\n            answer = max(a, max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8))\n        else:\n            a_1 = max(a_1 - h, 0)\n            a_2 = max(a_2 - h, 0)\n            a_3 = max(a_3 - h, 0)\n            a_4 = max(a_4 - h, 0)\n            a_5 = max(a_5 - h, 0)\n            a_6 = max(a_6 - h, 0)\n            a_7 = max(a_7 - h, 0)\n            a_8 = max(a_8 - h, 0)\n            answer = max(a, max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8))\n    return str(answer)\n",
        "test": "assert solution(\"0 1 0 0 0 1\") == \"1\"",
        "num_ids": 1552,
        "indeed": false
    },
    {
        "number": 4065,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(int, stdin.split())))",
        "test": "assert solution(stdin) == '4'",
        "num_ids": 1989,
        "indeed": false
    },
    {
        "number": 4066,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,stdin.split())\n    a,b=min(a,b),max(a,b)\n    for i in range(0,a*b+1,b):\n        if i<=a*b:\n            continue\n        if a>b:\n            if i%a==0 or i%b==0:\n                return str(i//b) +'' + str(i//a)\n            else:\n                continue\n        if i%b==0:\n            return str(i//b) +'' + str(i//a)\n    return str(i//a) +'' + str(i//b)\n\ndef",
        "test": "assert solution(str(i) for i in range(100, 1000)) == j",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 4067,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n,s=map(int,stdin.split())\n    for i in range(n):\n        s=s+stdin[i]\n    print(s)\n    if s==s[::-1]:\n        return s[::-1]\n    return s[::-1][:len(s[::-1])//2]\n",
        "test": "assert solution(input() == \"211200\"), \"expected 3\"",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    a_1 = int(stdin[0])\n    a_2 = int(stdin[1])\n    a_3 = int(stdin[2])\n    a_4 = int(stdin[3])\n    a_5 = int(stdin[4])\n    a_6 = int(stdin[5])\n    a_1 = min(a_1, a_2, a_3, a_4, a_5, a_6)\n    a_M = min(a_1, a_2, a_3, a_4, a_5, a_6)\n    mod = 1\n    while mod <= a_M:\n        mod += 1\n        a_1 = a_1 - mod\n        a_2 = a_2 - mod\n        a_3 = a_3 - mod\n        a_4 = a_4 - mod\n        a_5 = a_5 - mod\n        a_6 = a_6 - mod\n    return str(mod % 1)\n",
        "test": "assert solution('1\\ 2\\ 1\\ 2\\ 2') == '5'",
        "num_ids": 3195,
        "indeed": false
    },
    {
        "number": 4069,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n  X, K, D = map(int, stdin.split())\n  dst = X - X % K + (K - D) % K\n  if dst < 0:\n    dst += K\n  elif dst > K:\n    dst -= K\n  return str(abs(dst))\n\ndef",
        "test": "assert solution(input) == \"2\"",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 4070,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n=int(stdin)\n    if n<0 or n>1000000000:\n        return str(n)\n    else:\n        n=str(n)\n        n=n+n\n        n=str(n)\n        n=n+n\n        n=n+n\n        n=str(n)\n        return n\n",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 4071,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return str(ord(stdin[0]) - ord('A')) + str(ord(stdin[1]) - ord('A')) + str(ord(stdin[2]) - ord('A')) + str(ord(stdin[3]) - ord('A')) + str(ord(stdin[4]) - ord('A')) + str(ord(stdin[5]) - ord('A')) + str(ord(stdin[6]) - ord('A')) + str(ord(stdin[7]) - ord('A')) + str(ord(stdin[8]) - ord('A')) + str(ord(stdin[9]) - ord('A'))\n",
        "test": "assert solution(\"1\") == \"4\"",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 4072,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return '0'\n    \n    if n % 2 == 0:\n        return '0'\n    else:\n        return '1'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input().strip())\nanswer = '0'\n\nfor i in range(2, n):\n    if n % i == 0:\n        answer = '0'\n        break",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 4073,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, input().strip().split()))\n    \n    answer = 0\n    \n    if n > 1:\n        a.sort()\n        \n        for i in range(n - 1):\n            if a[i + 1] - a[i] >= 3:\n                answer = a[i] - a[i]\n                answer += 2 * a[i] - a[i]\n                \n                if answer > a[-1]:\n                    answer = a[-1] - a[i]\n                    \n                a[i] = answer\n    else:\n        a.sort()\n        \n        if a[0] >= 3:\n            a[0] = a[0] - a[0]\n            \n        answer = a[0] - a[0]\n        \n    print(answer)\n    return answer\n\"\"\"",
        "test": "assert solution(stdin) == '3'",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 4074,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(int, stdin.split())))\n",
        "test": "assert solution(\"1 2\") == \"1\"",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 4075,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    on_list = [i for i in range(1,n+1)]\n    for _ in range(k):\n        str_i = list(map(int,stdin.split()))\n        on_list_i = [i for i in range(1,n+1)]\n        for i in range(len(on_list_i)):\n            if str_i[i] == 1:\n                on_list.pop(on_list_i[i-1])\n                on_list_i.pop(on_list_i[i-1])\n                on_list_i.pop(on_list_i[i-1])\n                on_list_i.pop(on_list_i[i-1])\n                on_list_i.pop(on_list_i[i-1])\n        on_list.append(on_list_i)\n    answer = [len(j) for j in on_list]\n    return''.join(map(str,answer))\n",
        "test": "assert solution(\"0 1\") == \"1\"",
        "num_ids": 2147,
        "indeed": false
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    curr_max_dist = 0\n    curr_min_dist = 0\n    for _ in range(len(stdin)):\n        a = [int(i) for i in stdin[:]]\n        b = [int(i) for i in stdin[:]]\n        a.sort()\n        b.sort()\n        x = abs(a[0] - b[0])\n        for i in range(1, len(a)):\n            x = max(x, abs(a[i] - b[i]))\n        curr_max_dist = max(x, curr_max_dist)\n        curr_min_dist = min(x, curr_min_dist)\n    return str(curr_max_dist) + \" \" + str(curr_min_dist)\n\n-----Sample Input-----\n3 4 9\n\n-----Sample Output-----\n3 5\n\nThe two hands will be in the positions shown in the figure below, so the answer is 5 centimeters.\ndef",
        "test": "assert solution(\"A B H 59\") == \"5.00000000000000000000\"",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 4077,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n  n, m = list(map(int, stdin.split()))\n  if n % 2 == 0 and n >= 2:\n    n, m = list(map(int, stdin.split()))\n    pair = list(map(int, stdin.split()))\n    if len(pair) == 1:\n      return str(pair[0])\n    if len(pair) == 2:\n      if pair[0] == pair[1]:\n        return str(pair[0])\n    if len(pair) == 3:\n      if pair[0] + pair[1] + pair[2] == m:\n        return str(pair[0])\n  return \"0\"\n\ndef",
        "test": "assert solution(stdin) == 37",
        "num_ids": 1426,
        "indeed": false
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = [int(x) for x in stdin.strip().split()[1:]]\n    b = []\n    for i in range(n):\n        b.append(i + 1)\n    for i in range(1, n + 1):\n        a.append(b[i] - a[i - 1])\n    for i in range(1, n + 1):\n        a.append(b[i] - a[i - 1])\n    for i in range(n):\n        a.append(i + 1)\n    for i in range(1, n + 1):\n        a.append(b[i] - a[i - 1])\n    return str(max(a))",
        "test": "assert solution(",
        "num_ids": 3054,
        "indeed": false
    },
    {
        "number": 4079,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'Yes'\n",
        "test": "assert solution(\"fced\") == \"Yes\", \"fced\"",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 4080,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip().split()\n    a = [[int(i) for i in line.split(' ')] for line in s]\n    b = a[1:-1]\n    answer = 0\n    for i in range(n):\n        seg = []\n        for j in range(n):\n            if j == i:\n                continue\n            if a[i][j] == 1:\n                seg.append(a[j][0])\n                for k in range(len(seg)):\n                    if a[i][k] == a[j][k]:\n                        answer += 1\n                    if a[i][k] == -1:\n                        break\n            if a[i][j] == -1:\n                break\n        if len(seg) > 0:\n            answer -= 1\n        answer += len(seg) - 1\n    return str(answer)",
        "test": "assert solution(stdin) == \"6\"",
        "num_ids": 1487,
        "indeed": false
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, a, *w = map(int, stdin.split())\n    n = min(n, 2*n)\n    ans = 1\n    for j in range(n):\n        if a[j] < a[j-1]:\n            ans = max(ans, w[j-1]*2 + w[j])\n    return str(ans)",
        "test": "assert solution(\"5 4 3 4 4\") == \"4\"",
        "num_ids": 1425,
        "indeed": false
    },
    {
        "number": 4082,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return str(len(list(filter(lambda x: x < max(a), a))))",
        "test": "assert solution(\"2 3 5 7\") == \"3\"",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 4083,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n,k = list(map(int,stdin.split()))\n    a = list(map(int,stdin.split()))\n    a.sort()\n    pairs = []\n    for i in range(k):\n        pairs.append(a[i])\n    for i in range(k-1):\n        if (pairs[i] + pairs[i+1])%2 == 0:\n            pairs.append(pairs[i]+pairs[i+1])\n        else:\n            pairs.append(pairs[i] + pairs[i+1])\n    print(pairs[k-1])\n    return str(min(pairs))",
        "test": "assert solution(stdin) == 1",
        "num_ids": 2480,
        "indeed": false
    },
    {
        "number": 4084,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if N <= 0 or A <= 0 or B <= 0:\n        return ''\n    \n    ball_place_array = []\n    for _ in range(N):\n        ball_place_array.append(list(map(int, input().split())))\n    \n    result = 0\n    for bbbrrr in ball_place_array:\n        blue = []\n        red = []\n        for r in range(A):\n            if bbbrrr[r]:\n                blue.append(r)\n            else:\n                red.append(r)\n        \n        result += len(blue)\n        result += len(red)\n    \n    return str(result)\n",
        "test": "assert solution(input) == '4'",
        "num_ids": 1217,
        "indeed": false
    },
    {
        "number": 4085,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    \n    def is_number(x):\n        return str(x).isdigit() or str(x).count('0')\n    \n    n = int(input())\n    \n    d = [0]*10000\n    for i in range(2, n+1):\n        if is_number(i):\n            d[i] = i\n        \n    #list of integers\n    divisors = []\n    #dividend\n    dividend = 0\n    #remainder\n    remainder = 0\n    \n    for d1 in d:\n        #dividend\n        if d1!= 0:\n            #remainder\n            if (d1-remainder) in d:\n                divisors.append(d1-remainder)\n                remainder = 0\n            else:\n                remainder = d1-remainder\n        else:\n            remainder = d1\n    #list of divisors\n    divisors.sort()\n    \n    #get min\n    d1 = divisors[0]\n    for i in divisors:\n        if d1 < i:\n            d1 = i\n    \n    #print answer\n    for i in range(1, n+1):\n        if is_number(i):\n            answer.append(d1)\n        else:\n            answer.append(-1)\n    return answer[0]",
        "test": "assert solution(\"1 2\\n3 4\\n5 6\\n7 8\\n9 10 12\\n15 16 3\\n4 6 5\\n8\") == \"15\\n\"",
        "num_ids": 1139,
        "indeed": false
    },
    {
        "number": 4086,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    x, ans = 0, ''\n    for i in range(n):\n        if a[i]!= x:\n            x = a[i]\n            ans += str(x) +''\n    return ans[:-1]\n\n\nOutput:\nIn the first example you should remove two integers $1$, which are in the positions $1$ and $4$. Also you should remove the integer $5$, which is in the position $2$.\nIn the second example you should remove integer $2$, which is in the position $1$, and two integers $4$, which are in the positions $2$ and $4$.\nIn the third example you should remove four integers $6$, which are in the positions $1$, $2$, $3$ and $4$.\n\nIn the fourth example you should remove four integers $6$, which are in the positions $1$, $2$, $3$ and $4$.\nIn the fifth example you should remove six integers $6$, which are in the positions $1$, $2$, $3$ and $4$.\nIn the sixth example you should remove seven integers $6$, which are in the positions $1$, $2$, $3$ and $4$.\nIn the seventh example you should remove eight integers $6$, which are in the positions $1$, $2$, $3$ and $4$.\nIn the eighth example you should remove nine integers $6$, which are in the positions $1$, $2$, $3$ and $4$.\nIn the ninth example you should remove ten integers $6$, which are in the positions $1$, $2$, $3$ and $4$.\nIn the tenth example you should remove twelve integers $6$, which are in the positions $1$, $2$, $3$ and $4$.\nIn the eleventh example you should remove thirteen integers $6$, which are in the positions $1$, $2$, $3$ and $4$.\nIn the twelfth example you should remove one integer $6$, which is in the positions $1$, $2$, $3$ and $4$.\n\"\"\"\n",
        "test": "assert solution(\"1 2 3 4 2 4\") == \"1\"",
        "num_ids": 1907,
        "indeed": false
    },
    {
        "number": 4087,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        x, y = map(int, stdin.strip().split())\n        if y % 3!= 0:\n            raise Exception('Error Input')\n        elif x % 3!= 0:\n            raise Exception('Error Input')\n        else:\n            return str(y // (x // 3))\n    except:\n        raise Exception('Error Input')\n",
        "test": "assert solution(\"42\") == \"44\"",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 4088,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    s = stdin.strip()\n    t = list(map(int, stdin.strip().split()))\n    for i in range(n):\n        t[i] += t[i] % m\n    k = 0\n    res = ''\n    for i in t:\n        res += s[i]\n        if i == m-1:\n            k += 1\n    return res[:k]\n",
        "test": "assert solution(stdin) == \"c\", \"c\"",
        "num_ids": 2553,
        "indeed": false
    },
    {
        "number": 4089,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    global answer\n    answer = answer + \"b\"\n    for line in stdin:\n        line = line.split(\",\")\n        if line[0] == \"a\":\n            answer = answer + \"a\"\n        elif line[0] == \"b\":\n            answer = answer + \"b\"\n        elif line[0] == \"c\":\n            answer = answer + \"c\"\n        elif line[0] == \"d\":\n            answer = answer + \"d\"\n        elif line[0] == \"e\":\n            answer = answer + \"e\"\n        elif line[0] == \"f\":\n            answer = answer + \"f\"\n        elif line[0] == \"g\":\n            answer = answer + \"g\"\n        elif line[0] == \"h\":\n            answer = answer + \"h\"\n        elif line[0] == \"i\":\n            answer = answer + \"i\"\n        elif line[0] == \"j\":\n            answer = answer + \"j\"\n        elif line[0] == \"k\":\n            answer = answer + \"k\"\n        elif line[0] == \"l\":\n            answer = answer + \"l\"\n        elif line[0] == \"m\":\n            answer = answer + \"m\"\n        elif line[0] == \"n\":\n            answer = answer + \"n\"\n        elif line[0] == \"o\":\n            answer = answer + \"o\"\n        elif line[0] == \"p\":\n            answer = answer + \"p\"\n        elif line[0] == \"q\":\n            answer = answer + \"q\"\n        elif line[0] == \"r\":\n            answer = answer + \"r\"\n        elif line[0] == \"s\":\n            answer = answer + \"s\"\n        elif line[0] == \"t\":\n            answer = answer + \"t\"\n        elif line[0] == \"u\":\n            answer = answer + \"u\"\n        elif line[0] == \"v\":\n            answer = answer + \"v\"\n        elif line[0] == \"w\":\n            answer = answer + \"w\"\n        elif line[0] == \"x\":\n            answer = answer + \"x\"\n        elif line[0] == \"y\":\n            answer = answer + \"y\"\n        elif line[0] == \"z\":\n            answer = answer + \"z\"\n        elif line[0] == \" \":\n            answer = answer + \" \"\n        elif line[0] == \"\":\n            answer = answer + \" \"\n        else:\n            answer = answer + line[0] + \" \"\n    return answer\n\ndef",
        "test": "assert solution(stdin) == \"b\"",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n\n----Input Code----\nThe first line contains an integer $n$, the number of words in the text.\n\nThe next $n$ lines contain one word per line.\n\nThe next $n$ lines contains $n$ space-separated words of the text $w_1, w_2, \\dots, w_n$.\n\n----Output Code----\nPrint one integer \u2014 the minimum length of the text after at most one abbreviation.\n\n----Examples----\nInput\n6\nto be or not to be\n\nOutput\n13\n\nInput\n10\na ab aa aa bb aa aa bb bb\n\nOutput\n11\n\nInput\n10\naa bb aa aa aa aa bb bb aa aa bb bb\n\nOutput\n12\n\nInput\n10\naaaaababaaaaabababbbbaaabbaabbbbaabbaabbaababababbbbaabbaabbbbaabbbbaaaaaabbbbaabbaabbbbaababaabaaabababbaababababaaabababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "test": "assert solution(stdin) == 12",
        "num_ids": 3723,
        "indeed": false
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    \n    a = list(map(int, stdin.split()))\n    \n    if n >= len(a):\n        return \"0\"\n    \n    if n <= len(a) - 1:\n        return str(max(a))\n    \n    return str(sum(a))\n\n#######\ndef",
        "test": "assert solution(stdin) == \"4000\"",
        "num_ids": 1060,
        "indeed": false
    },
    {
        "number": 4092,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n  \n  n = int(stdin.strip())\n  answer = n\n  count = n//2\n  while count > 0:\n    print(count)\n    answer += count\n    count = count//2\n  return str(answer)\n",
        "test": "assert solution(\"0\") == \"0\"",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    num = [int(num) for num in stdin.split()]\n    total = 0\n    for i in num:\n        total += abs(i-n-m)\n    return str(total)\n\n\"\"\"\ndef",
        "test": "assert solution('3') == '2'",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 4094,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    for char in stdin:\n        if char =='':\n            continue\n        if char == 'K':\n            return str(7)\n        if char == '-':\n            return str(-1)\n    return str(-1)\n",
        "test": "assert solution(stdin) == str(7) or -1",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 4095,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    m = int(stdin.split(' ')[1])\n    p = stdin.split(' ')[2]\n    \n    if n % 2!= 0:\n        return \"0\"\n    \n    median_pair = [int(p[0]), int(p[1])]\n    \n    # print(median_pair)\n    \n    # print(\"median_pair\", median_pair)\n    \n    # print(pairs)\n    \n    \n    for p in range(n-1):\n        \n        # print(\"p\", p)\n        \n        # print(pairs)\n        \n        # print(\"p\", pairs)\n        \n        if int(median_pair[0]) < p:\n            # print(\"p\", p, median_pair, \"Median pair\")\n            \n            median_pair[0] = p\n            median_pair[1] = p+1\n        \n        elif int(median_pair[1]) < p:\n            median_pair[1] = p\n        \n        elif int(median_pair[0]) > p:\n            # print(\"p\", p, median_pair, \"Median pair\")\n            median_pair[1] = p\n    \n    if int(median_pair[0]) == n-1:\n        return str(m)\n    \n    else:\n        return str(n)\n    \n\nprint(solution(input()))",
        "test": "assert solution(",
        "num_ids": 3180,
        "indeed": false
    },
    {
        "number": 4096,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    cup = [int(c) for c in stdin.split()]\n    cup.sort()\n    n = len(cup)\n    answer = []\n    day = cup[0]\n    n -= 1\n    while n >= 0:\n        if cup[n] == cup[n-1]:\n            day += cup[n]\n            n -= 1\n        elif cup[n] > cup[n-1]:\n            day += cup[n]\n            n -= 1\n    answer.append(day)\n    if len(cup) <= 2:\n        answer.append(cup[-1] - cup[0] + 1)\n    else:\n        answer.append(cup[0] + cup[1] - cup[0] + 1)\n    answer.append(cup[-1] + cup[-2] - cup[-2] + 1)\n    return \",\".join(map(str, answer))\n",
        "test": "assert solution(stdin) == -1, \"should return -1\"",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 4097,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    b_1 = [int(item) for item in stdin.strip().split()]\n    b_2 = [int(item) for item in stdin.strip().split()]\n    b_3 = [int(item) for item in stdin.strip().split()]\n    b_4 = [int(item) for item in stdin.strip().split()]\n    b_5 = [int(item) for item in stdin.strip().split()]\n    b_6 = [int(item) for item in stdin.strip().split()]\n    b_7 = [int(item) for item in stdin.strip().split()]\n    b_8 = [int(item) for item in stdin.strip().split()]\n    b_9 = [int(item) for item in stdin.strip().split()]\n    b_10 = [int(item) for item in stdin.strip().split()]\n    b_11 = [int(item) for item in stdin.strip().split()]\n    b_12 = [int(item) for item in stdin.strip().split()]\n    b_13 = [int(item) for item in stdin.strip().split()]\n    b_14 = [int(item) for item in stdin.strip().split()]\n    b_15 = [int(item) for item in stdin.strip().split()]\n    b_16 = [int(item) for item in stdin.strip().split()]\n    b_17 = [int(item) for item in stdin.strip().split()]\n    b_18 = [int(item) for item in stdin.strip().split()]\n    b_19 = [int(item) for item in stdin.strip().split()]\n    b_20 = [int(item) for item in stdin.strip().split()]\n    b_21 = [int(item) for item in stdin.strip().split()]\n    b_22 = [int(item) for item in stdin.strip().split()]\n    b_23 = [int(item) for item in stdin.strip().split()]\n    b_24 = [int(item) for item in stdin.strip().split()]\n    b_25 = [int(item) for item in stdin.strip().split()]\n    b_26 = [int(item) for item in stdin.strip().split()]\n    b_27 = [int(item) for item in stdin.strip().split()]\n    b_28 = [int(item) for item in stdin.strip().split()]\n    b_29 = [int(item) for item in stdin.strip().split()]\n    b_30 = [int(item) for item in stdin.strip().split()]\n    b_31 = [int(item) for item in stdin.strip().split()]\n    b_32 = [int(item) for item in stdin.strip().split()]\n    b_33 = [int(item) for item in stdin.strip().split()]\n    b_34 = [int(item) for item in stdin.strip().split()]\n    b_35 = [int(item) for item in stdin.strip().split()]\n    b_36 = [int(item) for item in stdin.strip().split()]\n    b_37 = [int(item) for item in stdin.strip().split()]\n    b_38 = [int(item) for item in stdin.strip().split()]\n    b_39 = [int(item) for item in stdin.strip().split()]\n    b_40 = [int(item) for item in stdin.strip().split()]\n    b_41 = [int(item) for item in stdin.strip().split()]\n    b_42 = [int(item) for item in stdin.strip().split()]\n    b_43 = [int(item) for item in stdin.strip().split()]\n    b_44 = [int(item) for item in stdin.strip().split()]\n    b_45 = [int(item) for item in stdin.strip().split()]\n    b_46 = [int(item) for item in stdin.strip().split()]\n    b_47 = [int(item) for item in stdin.strip().split()]\n    b_48 = [int(item) for item in stdin.strip().split()]\n    b_49 = [int(item) for item in stdin.strip().split()]\n    b_50 = [int(item) for item in stdin.strip().split()]\n    b_51 = [int(item) for item in stdin.strip().split()]\n    b_52 = [int(item) for item in stdin.strip().split()]\n    b_53 = [int(item) for item in stdin.strip().split()]\n    b_54 = [int(item) for item in stdin.strip().split()]\n    b_55 = [int(item) for item in stdin.strip().split()]\n    b_56 = [int(item) for item in stdin.strip().split()]\n    b_57 = [int(item) for item in stdin.strip().split()]\n    b_58 = [int(item) for item in stdin.strip().split()]\n    b_59 = [int(item) for item in stdin.strip().split()]\n    b_60 = [int(item) for item in stdin.strip().split()]\n    b_61 = [int(item) for item in std",
        "test": "assert solution(stdin) == 3",
        "num_ids": 2061,
        "indeed": false
    },
    {
        "number": 4098,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < 10:\n        return str(k)\n    \n    x, y = 1, 1\n    result = 0\n    for _ in range(n - 1):\n        result += min(x, y)\n        x, y = y, x + y\n    result += x\n\n    return str(result)\n",
        "test": "assert solution(stdin) == 10",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 4099,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    A_i = [0] + list(map(int, stdin.split()))\n    heap = []\n    for i in range(N):\n        heapq.heappush(heap, (A_i[i], i+1))\n    answer = 0\n    while len(heap) > 0:\n        A_i, idx = heapq.heappop(heap)\n        if answer < A_i:\n            answer = A_i\n        for i in range(K):\n            heapq.heappush(heap, (A_i+i, idx*K+i))\n    return str(answer)\n\n'''",
        "test": "assert solution(f.read()) == '7'",
        "num_ids": 2824,
        "indeed": false
    },
    {
        "number": 4100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A_1, A_2 = map(int, input().split())\n    A_1 -= 1\n    A_2 -= 1\n    if A_1 < 0 or A_1 > N or A_2 < 0 or A_2 > N:\n        return \"No\"\n    A_1 -= 1\n    A_2 -= 1\n    if A_2 < 0 or A_2 > N or A_1 < 0 or A_1 > N:\n        return \"No\"\n    if K >= Q or A_1 < 0 or A_2 < 0 or A_1 > N:\n        return \"No\"\n    if A_1 < 0:\n        A_1 += K\n        A_1 -= 1\n    if A_2 < 0:\n        A_2 += K\n        A_2 -= 1\n    print(A_1, A_2)\n    return \"Yes\"",
        "test": "assert solution(\"1 4 2\") == \"Yes\"",
        "num_ids": 1607,
        "indeed": false
    },
    {
        "number": 4101,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    n = n-1\n    m = m-1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            else:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                print(i+1, \" \", end=\"\")\n                for k in range(j, m):\n                    print(a[i][k], \" \", end=\"\")\n                print()\n            else:\n                print(i+1, \" \", end=\"\")\n                for k in range(j, m):\n                    print(a[k][i], \" \", end=\"\")\n                print()\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                print(j+1, \" \", end=\"\")\n                for k in range(i, n):\n                    print(a[k][j], \" \", end=\"\")\n                print()\n            else:\n                print(j+1, \" \", end=\"\")\n                for k in range(i, n):\n                    print(a[k][j], \" \", end=\"\")\n                print()\n    return \"YES\"",
        "test": "assert solution(\"2 2\") == \"YES\"",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 4102,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    # 1. \uc785\ub825\ubc1b\uc740 \uc22b\uc790\ub97c str\uc73c\ub85c \ubc14\uafb8\uc5b4\uc11c \uc815\ub82c\ud568\n    # 2. \uc785\ub825\ubc1b\uc740 \uc22b\uc790\ub97c str\uc73c\ub85c \ubc14\uafb8\uc5b4\uc11c \uc815\ub82c\ud568\n    # 3. \uc815\ub82c\ud558\uc5ec \uacb0\uacfc\uac12\uc774 \ubc14\ub00c\uc5b4\uc11c str\uc5d0 \ub4e4\uc5b4\uac08\uac83\uc778\uc9c0 \ud655\uc778\ud558\uae30\n    # \uc815\ub82c\ud55c\uac83\uc744 str\uc5d0 \ub4e4\uc5b4\uac04\ub2e4.\n    answer = \"Yes\"\n    for _ in range(len(stdin)):\n        str = stdin[:_]\n        str = list(str)\n        str.sort()\n        stdin = str\n    return answer",
        "test": "assert solution(\"5\") == \"Yes\"",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 4103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    \n    res = 0\n    for i in range(n):\n        if s[i] == 1:\n            res += 1\n        elif s[i] == 0:\n            res -= 1\n            s[i] = 1\n    \n    return str(res)\n",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 3453,
        "indeed": false
    },
    {
        "number": 4104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n\n\"\"\"\n\nclass Solution:\n    def calculate(self, op1, op2, op3):\n        if op1 == '+':\n            return op2 + op3\n        if op1 == '-':\n            return op2 - op3\n        if op1 == '*':\n            return op2 * op3\n        if op1 == '/':\n            return op2 / op3\n\n    def eval(self, expr):\n        op1, op2, op3 = expr.split('+')\n        op1 = self.calculate(op1, op2, op3)\n        op2 = self.calculate(op1, op2, op3)\n        op3 = self.calculate(op1, op2, op3)\n        return op3\n\na = Solution()\na.eval(input())\n",
        "test": "assert solution(\"112-37\") == \"375\"",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 4105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = 1\n    for i in range(n - 2):\n        m *= k - 1\n    if m < k:\n        return 'NO'\n    elif m == k:\n        return 'YES'\n    else:\n        for i in range(n - 2):\n            m *= k - 1\n            if m == k:\n                return 'YES'\n            else:\n                m = m // k\n                if m == 0:\n                    return 'NO'\n        m = 1\n        for i in range(n - 2):\n            m *= k - 1\n            if m == k:\n                return 'YES'\n            else:\n                m = m // k\n    return 'NO'\n",
        "test": "assert solution(inp) == \"YES\"",
        "num_ids": 4249,
        "indeed": false
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty = []\n    for i in range(n):\n        beauty.append(int(stdin.split()[i + 1]))\n    beauty.sort()\n    beauty = set(beauty)\n    \n    answer = 0\n    k = k // 2\n    for i in range(k, n):\n        for j in range(0, i):\n            if beauty[j] < beauty[i] and len(beauty) > 2:\n                answer += 1\n                beauty.remove(beauty[j])\n                beauty.add(beauty[j])\n        \n        for j in range(i, n):\n            if beauty[j] < beauty[i] and len(beauty) > 2:\n                answer += 1\n                beauty.remove(beauty[j])\n                beauty.add(beauty[j])\n            \n        for j in range(i, n):\n            if beauty[i] < beauty[j]:\n                answer += 1\n                beauty.remove(beauty[i])\n                beauty.add(beauty[j])\n    \n    if len(beauty) > 0:\n        answer = -1\n    \n    return str(answer)\n\nfor _ in range(int(input())):\n    n, k, x = map(int, input().split())\n    beauty = []\n    for i in range(n):\n        beauty.append(int(input()))\n    beauty.sort()\n    beauty = set(beauty)\n\n    answer = 0\n    k = k // 2\n    for i in range(k, n):\n        for j in range(i):\n            if beauty[j] < beauty[i] and len(beauty) > 2:\n                answer += 1\n                beauty.remove(beauty[j])\n                beauty.add(beauty[j])\n        \n        for j in range(i):\n            if beauty[i] < beauty[j]:\n                answer += 1\n                beauty.remove(beauty[i])\n                beauty.add(beauty[j])\n        \n        for j in range(i, n):\n            if beauty[i] < beauty[j]:\n                answer += 1\n                beauty.remove(beauty[i])\n                beauty.add(beauty[j])\n    \n    if len(beauty) > 0:\n        answer = -1\n    \n    print(answer)",
        "test": "assert solution(input().split()) == -1",
        "num_ids": 1292,
        "indeed": false
    },
    {
        "number": 4107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0 or n > 10**5:\n        return ''\n    k = int(stdin[:n])\n    s = stdin[n:]\n    if s.count('0') == 1:\n        return ''\n    if s.count('1') <= k:\n        return ''\n    if s.count('0') == k:\n        return ''\n    if k == 1 and s.count('1') == 0:\n        return ''\n    if s.count('1') >= k:\n        return ''\n    if s.count('0') == k:\n        return ''\n\n    return '1' + solution(s, k, n) + solution(s[:k], k, n) + solution(s[k:], k, n)\n\nExplanation\n\nn = 5, k = 1, s = \"00010010010\"\n\nSo the total cost of connection is 1 + 1 + 1 + 1 = 4. So the minimum total cost of connecting all rooms to the Internet is 2.\n\nInput\n10\n100\n\nOutput\n4\n\nInput\n10\n011101\n\nOutput\n4\n\nInput\n10\n011110\n\nOutput\n4\n\nInput\n10\n00000100\n\nOutput\n10\n\"\"\"\nclass Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        res = 0\n        for i in range(len(tasks)):\n            for j in range(i+1, len(tasks)):\n                if tasks[i] == tasks[j]:\n                    continue\n                else:\n                    if i >= 0:\n                        if i + 1 < len(tasks) and tasks[i] < tasks[i+1]:\n                            tasks[i+1] = tasks[i]\n                            res += 1\n                    if j >= 0:\n                        if j + 1 < len(tasks) and tasks[j] < tasks[j+1]:\n                            tasks[j+1] = tasks[j]\n                            res += 1\n        return res\n",
        "test": "assert solution('4 1') == 0",
        "num_ids": 1288,
        "indeed": false
    },
    {
        "number": 4108,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    l = len(s)\n    if len(t) < l:\n        return \"No\"\n    for i in range(l):\n        if not s[i].isalpha():\n            return \"No\"\n        if not t[i].isalpha():\n            return \"No\"\n        if not s[i].isupper():\n            return \"No\"\n        if not t[i].isupper():\n            return \"No\"\n        if not s[i].isupper() and not t[i].isupper():\n            return \"No\"\n    for i in range(l-1):\n        if s[i]!= t[i] or s[i]!= t[i].upper():\n            return \"No\"\n    if s[l-1] == t[l-1]:\n        return \"Yes\"\n    return \"No\"\n",
        "test": "assert solution('apple') == 'No'",
        "num_ids": 1059,
        "indeed": false
    },
    {
        "number": 4109,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    a = list(map(int,stdin.split()))\n    a.sort()\n    l = []\n    for i in range(len(a)):\n        l.append(a[i])\n    l.sort()\n    \n    a.reverse()\n    for i in range(len(a)):\n        l.append(a[i])\n    l.sort()\n    \n    c = 0\n    for i in range(len(l)):\n        if l[i] > m:\n            c += l[i] - m\n    return str(c)",
        "test": "assert solution(\"1 1\") == '0'",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 4110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n  N, D, G = map(int, stdin.split())\n  p_1, c_1 = map(int, stdin.split())\n  \n  p_1 = (p_1 + 100) // 100 * 100\n  c_1 = (c_1 + 500) // 100 * 100\n  \n  def find(k):\n    if k == 0: return 0\n    return (k-1) * 100 + find(k-1)\n  \n  def solve(k):\n    if k == N: return 0\n    solve(k+1)\n    s = find(k+1)\n    if s > G: return s\n    s = c_1 * 100 + solve(k)\n    s = max(s, G - s)\n    return s\n  \n  return solve(0)",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 2579,
        "indeed": false
    },
    {
        "number": 4111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    nums = [int(n)]\n    for i in range(n):\n        nums.append(nums[-1] + int(stdin.strip()))\n    return str(nums[-1] - nums[0])\n\n-----Solution-----\ndef",
        "test": "assert solution('10 7 9 4 4 7') == '2'",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    return max(sum(map(lambda x: x[0], filter(lambda x: x[1] >= k, enumerate(map(lambda x: int(x), list(map(lambda x: x[2], enumerate(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: x[3], enumerate(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: x[4], enumerate(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: x[5], enumerate(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: x[6], enumerate(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: x[7], enumerate(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: x[8], enumerate(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: x[9], enumerate(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: x[10], enumerate(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: x[11], enumerate(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: x[12], enumerate(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: x[13], enumerate(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: x[14], enumerate(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x), list(map(lambda x: int(x",
        "test": "assert solution(stdin) == 18",
        "num_ids": 2194,
        "indeed": false
    },
    {
        "number": 4113,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        return \"No\"\n    if n == 3:\n        return \"No\"\n    if n == 4:\n        return \"Yes\"\n    if n == 5:\n        return \"No\"\n    if n == 6:\n        return \"No\"\n    if n == 7:\n        return \"No\"\n    if n == 8:\n        return \"No\"\n    if n == 9:\n        return \"No\"\n    if n == 10:\n        return \"No\"\n    if n == 11:\n        return \"Yes\"\n    if n == 12:\n        return \"No\"",
        "test": "assert solution(\"4\") == \"Yes\"",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 4114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    H = list(map(int, stdin.strip().split()))\n    H.append(H[-1] + N)\n    print(*H)\n    return \",\".join(map(str, H))\n",
        "test": "assert solution(input()) == \"2 2 5\"",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 4115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n  return min(ord('a')-ord('c'),ord('z')-ord('a'))",
        "test": "assert solution(stdin) == 3",
        "num_ids": 2534,
        "indeed": false
    },
    {
        "number": 4116,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 10 or n > 99:\n        return 'No'\n    else:\n        answer = []\n        for i in range(10):\n            answer.append(n*(i+1))\n        if answer == []:\n            return 'No'\n        else:\n            return 'Yes'\n",
        "test": "assert solution(\"4\") == \"No\"",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 4117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    # input\n    L_1 = int(stdin[0])\n    L_2 = int(stdin[1])\n    L_3 = int(stdin[2])\n    L_4 = int(stdin[3])\n    L_5 = int(stdin[4])\n    \n    # output\n    def solution(L: str) -> str:\n        if len(L)!= 3:\n            return \"error\"\n        \n        if L[0]!= L_1 or L[1]!= L_2 or L[2]!= L_3:\n            return \"error\"\n        \n        if L_1 == L_2 == L_3 == L_4 or L_1 == L_2 == L_3 or L_1 == L_2 == L_3 or L_1 == L_2 == L_4:\n            return \"error\"\n        \n        answer = [0] * 6\n        \n        # 3 choices\n        for i in range(5):\n            for j in range(4):\n                for k in range(3):\n                    # find\n                    # (i, j, k)\n                    # (i, j, k) * (i, k, j)\n                    # (i, j, k) * (j, i, k)\n                    # (i, j, k) * (k, i, j)\n                    # (i, j, k) * (j, k, i)\n                    # (i, j, k) * (k, j, i)\n                    # (i, j, k) * (j, k, k)\n                    # (i, j, k) * (k, i, k)\n                    # (i, j, k) * (k, j, k)\n                    # (i, j, k) * (k, j, i)\n                    # (i, j, k) * (k, j, i)\n                    # (i, j, k) * (k, i, k)\n                    answer[(i + j + k) // 2] += 1\n                    \n        # 5 choices\n        # (i, j, k)\n        for i in range(5):\n            for j in range(4):\n                for k in range(5):\n                    # find\n                    # (i, j, k)\n                    # (i, j, k) * (i, k, j)\n                    # (i, j, k) * (k, i, j)\n                    # (i, j, k) * (j, k, i)\n                    # (i, j, k) * (k, j, i)\n                    # (i, j, k) * (k, i, k)\n                    # (i, j, k) * (k, j, i)\n                    # (i, j, k) * (k, i, k)\n                    answer[(i + j + k) // 2] += answer[(i + k) // 2]\n                    \n        # 4 choices\n        for i in range(5):\n            for j in range(4):\n                for k in range(4):\n                    # find\n                    # (i, j, k)\n                    # (i, j, k) * (i, k, j)\n                    # (i, j, k) * (k, i, j)\n                    # (i, j, k) * (j, k, i)\n                    # (i, j, k) * (k, j, i)\n                    # (i, j, k) * (k, i, k)\n                    # (i, j, k) * (k, i, j)\n                    # (i, j, k) * (k, i, i)\n                    # (i, j, k) * (i, k, k)\n                    # (i, j, k) * (k, i, k)\n                    answer[(i + j + k) // 2] += answer[(i + k) // 2]\n                    \n        return answer[0] * answer[1] * answer[2]",
        "test": "assert solution(\"2 3 7 5\") == \"2 2 2 2 2\"",
        "num_ids": 3759,
        "indeed": false
    },
    {
        "number": 4118,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A!= B:\n        return -1\n    \n    s = \"\"\n    if A == 1:\n        s += str(B)\n    elif B == 1:\n        s += str(A)\n    else:\n        if A > B:\n            s += str(A)\n        else:\n            s += str(B)\n    \n    return s\n",
        "test": "assert solution(\"4 7\") == -1",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    x_1, x_2, x_3, x_4, x_5 = (x_1-1, x_2-1, x_3-1, x_4-1, x_5-1)\n    x_1, x_2, x_3, x_4, x_5 = (x_1, x_2, x_3, x_4, x_5)\n    dist_x_1_x_2_x_3_x_4_x_5 = (x_1 - x_2) * (x_1 - x_2) * (x_1 - x_2) * (x_1 - x_2)\n    dist_x_1_x_2_x_3_x_4_x_5 = (x_1 - x_2) * (x_3 - x_4) * (x_3 - x_4) * (x_3 - x_4)\n    dist_x_1_x_2_x_3_x_4_x_5 = (x_1 - x_2) * (x_3 - x_4) * (x_4 - x_5) * (x_4 - x_5)\n    dist_x_1_x_2_x_3_x_4_x_5 = (x_1 - x_2) * (x_3 - x_4) * (x_4 - x_5) * (x_5 - x_6)\n    dist_x_1_x_2_x_3_x_4_x_5 = (x_1 - x_2) * (x_3 - x_4) * (x_4 - x_5) * (x_5 - x_6)\n    dist_x_1_x_2_x_3_x_4_x_5 = (x_1 - x_2) * (x_3 - x_4) * (x_4 - x_5) * (x_5 - x_6)\n\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x_4_x_5)\n    print(\"%.0f\" % dist_x_1_x_2_x_3_x",
        "test": "assert solution(input()) == \"0 0 1 2 4 6 12 14 16 16\"",
        "num_ids": 3118,
        "indeed": false
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    s=list(map(int,stdin.split()))\n    n=s[0]\n    k=s[1]\n    ans=[]\n    c=[]\n    for i in range(n+1):\n        for j in range(k):\n            c.append(i+1)\n            c.append(j+1)\n        ans.append(c)\n        c=[]\n    return(list(map(str,ans[1:n+1])))\n",
        "test": "assert solution(input()) == '111011'",
        "num_ids": 1682,
        "indeed": false
    },
    {
        "number": 4121,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n > 2:\n        return \"NO\"\n    if n < 2:\n        return \"NO\"\n    if a > n * (n + 1) / 2:\n        return \"NO\"\n    else:\n        part_a = a * (n + 1) / 2\n        part_b = n * (n + 1) / 2\n        if part_a < part_b:\n            return \"YES\"\n        else:\n            return \"YES\"",
        "test": "assert solution('2\\n2') == 'YES', 'incorrect'",
        "num_ids": 2219,
        "indeed": false
    },
    {
        "number": 4122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    m = int(n/2)\n    if (n == 1) and (h == 0):\n        return 0\n    \n    d = -1\n    for i in range(m, -1, -1):\n        if m >= i >= 0:\n            d = i\n            break\n        else:\n            d += 1\n    if d == -1:\n        return -1\n    \n    i = n - m\n    while True:\n        if i == 0:\n            break\n        if m == 0:\n            d -= 1\n            i -= 1\n            break\n        if (m % i) == 0:\n            i -= 1\n            m //= i\n        else:\n            m -= i\n    \n    return -1 * d if h < 0 else d",
        "test": "assert solution(stdin) == \"4999999999996\"",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 4123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(i) for i in stdin.split()]\n    s = s * n\n    return \",\".join(list(set(list(s))))\n\"\"\"",
        "test": "assert solution(stdin) == 'ZZ' or solution(stdin) == 'ZZZ'",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 4124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    return min(len(s.strip()), len(t.strip()))\n",
        "test": "assert solution([\"codeforces\",\"yes\",\"codeforces\",\"yes\",\"codeforces\",\"yes\"]) == \"test\"",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 4125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, *X = map(int, stdin.split())\n    D = int(X[0])\n    for i in range(1, N):\n        D += int(X[i])\n    return str(D)",
        "test": "assert solution(3,2) == 2",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 4126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.rstrip()\n    size = len(string)\n    i = 0\n    while i < size:\n        if string[i:i+2] == string[i:i+3] and string[i:i+2] == string[i:i+4]:\n            return 'Yes'\n        elif string[i:i+2]!= string[i:i+3] and string[i:i+2]!= string[i:i+4]:\n            i += 1\n    return 'No'\n",
        "test": "assert solution(\"akasaka\") == \"Yes\"",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 4127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    if len(str(int(stdin, 10))) == 2:\n        return str(int(stdin, 10))[1:]\n    return str(int(stdin, 10))\n\n-----Sample Output-----\n197\n\nWe have 197 \\times 1 = 197.0. After truncating the fractional part, we have the answer: 197.\ndef",
        "test": "assert solution(sys.stdin) == 217",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = [int(i) for i in stdin.split()]\n    ans = ''\n    for t in range(1,11):\n        ans += '{}'.format(n//t)\n        n = n%t\n    if n:\n        ans += '{}'.format(n)\n    ans = ans[::-1]\n    a,b = a,b\n    \n    if b>a:\n        ans = ans[1:]\n        a,b = b,a\n    \n    for i in range(1,a):\n        ans += '{}'.format(i)\n        for j in range(b,a+1):\n            ans += '{}'.format(j)\n            if j+1<=b:\n                ans += '{}'.format(j+1)\n            if j+2<=b:\n                ans += '{}'.format(j+2)\n    return ans\n\n1\n4\n3\n1\n5\n1\n5\n3\n4\n2\n3\n1\n\n2\n4\n3\n4\n4\n\n3\n1\n5\n\n4\n1\n2\n1\n3\n2\n2\n3\n\n1\n1\n1\n4\n4\n3\n\n1\n0\n1\n4\n\n1\n1\n1\n1\n\n1\n1\n\n1\n\n1\n\n2\n1\n\n3\n1\n\n1\n0\n1\n\n2\n\n1\n1\n2\n\n1\n\n2\n2\n\n1\n\n1\n1\n2\n\n1\n\n0\n2\n\n1\n\n\n3\n0\n\n1\n1\n2\n1\n\n2\n1\n1\n3\n1\n\n2\n\n1\n1\n0\n1\n1\n2\n\n1\n\n0\n1\n1\n1\n\n3\n1\n1\n0\n2\n\n1\n0\n1\n1\n\n1\n\n2\n1\n2\n1\n\n1\n\n1\n\n1\n\n1\n1\n1\n\n1\n1\n1\n0\n\n1\n0\n1\n2\n\n1\n1\n1\n0\n2\n\n2\n0\n0\n1\n1\n\n3\n0\n\n0\n0\n1\n2\n0\n1\n0\n2\n\n0\n0\n0\n0\n\n2\n1\n2\n\n2\n0\n0\n\n1\n0\n0\n1\n2\n1\n\n1\n1\n0\n\n1\n0\n2\n0\n1\n0\n1\n0\n1\n1\n\n0\n2\n0\n0\n0\n\n1\n0\n0\n1\n2\n\n2\n0\n0\n1\n0\n0\n2\n0\n0\n\n1\n1\n2\n2\n0\n1\n0\n\n1\n2\n1\n1\n0\n\n1\n1\n0\n0\n1\n2\n1\n2\n\n1\n0\n0\n2\n\n2\n1\n0\n1\n0\n\n1\n1\n1\n1\n2\n1\n0\n0\n\n1\n1\n1\n2\n\n1\n1\n2\n2\n\n1\n1\n1\n2\n\n0\n1\n1\n2\n0\n0\n0\n\n1\n1\n1\n2\n1\n0\n0\n1\n2\n\n0\n1\n2\n0\n0\n\n1\n1\n1\n0\n0\n1\n\n0\n0\n\n1\n1\n0\n1\n1\n1\n1\n1\n0\n0\n\n1\n0\n0\n2\n0\n0\n\n0\n\n1\n1\n1\n0\n0\n1\n0\n2\n0\n\n0\n0\n0\n2\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n0\n1\n0\n1\n0\n\n0\n0\n1\n0\n1\n0\n\n0\n1\n1\n1\n0\n\n0\n0\n1\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n\n1\n1\n0\n0\n2\n1\n2\n0\n0\n1\n0\n0\n\n1\n0\n1\n0\n1\n1\n\n2\n0\n\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n\n0\n0\n0\n\n1\n0\n0\n0\n\n0\n\n1\n1\n1\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n\n0\n1\n2\n1\n0\n1\n\n0\n0\n\n2\n0\n0\n\n0\n1\n0\n0\n1\n\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n1\n0\n0\n\n1\n0\n1\n0\n0\n0\n\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n\n0\n0\n0\n\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n\n1\n0\n1\n2\n0\n0\n\n1\n0\n0\n1\n1\n1\n0\n1\n0\n0\n0\n\n1\n0\n1\n0\n0\n\n0\n1\n1\n2\n0\n\n1\n1\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n\n1\n0\n0\n1\n0\n1\n1\n0\n0\n0\n\n1\n0\n0\n0\n\n0\n0\n0\n\n0\n0\n\n1\n0\n0\n0\n0\n\n1\n1\n0\n1\n0\n0\n0\n0\n0\n0\n\n1\n1\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n\n0\n0\n0\n\n0\n0\n0\n0\n\n0\n0\n0\n0\n\n1\n0\n1\n1\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n\n1\n1\n0\n0\n\n0\n0\n1\n1\n0\n0\n0\n1\n",
        "test": "assert solution(stdin) == 4",
        "num_ids": 2407,
        "indeed": false
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = list(map(int, stdin.split()))\n    cities = []\n    for _ in range(n):\n        cities.append(int(input()))\n    \n    roads = []\n    for _ in range(m):\n        roads.append(list(map(int, input().split())))\n    \n    answer = 0\n    \n    for i in range(n):\n        if s == i:\n            answer += 1\n        \n        for j in range(n):\n            for k in range(len(roads[j])):\n                if i == roads[j][k]:\n                    answer -= 1\n        \n    return answer\n\n\nprint(solution(stdin))",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 2528,
        "indeed": false
    },
    {
        "number": 4130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin)\n    team = []\n    for aa in a:\n        team.append(aa)\n    team.sort()\n    c = 1\n    for i in team:\n        if i > c:\n            c = i\n    return str(c)\n",
        "test": "assert solution([\"4\", \"1\", \"1\", \"4\", \"4\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"4\"",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 4131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prefectures = [int(line) for line in stdin.split()]\n    prefectures.sort()\n    answer = ''\n    city_list = []\n    city_num = 0\n    for i in range(n):\n        city_list.append(prefectures[city_num] + i)\n        city_num += 1\n    for j in range(m):\n        answer += str(city_list[j]) +''\n    print(answer)\n    return answer\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...",
        "test": "assert solution(",
        "num_ids": 2845,
        "indeed": false
    },
    {
        "number": 4132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A_list = [int(i) for i in stdin.split()]\n    A_list.sort()\n    A_list.pop(0)\n    A_list.pop(len(A_list)-1)\n    A_list.sort()\n    \n    l = 0\n    r = 0\n    minimum = A_list[0]\n    \n    while r < N:\n        if A_list[l] < A_list[r]:\n            minimum = min(A_list[l], minimum)\n            l += 1\n        else:\n            minimum = min(A_list[l], minimum)\n            r += 1\n        \n    print(minimum)\n    return str(minimum)",
        "test": "assert solution(input()) == \"2\"",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 4133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(' ')\n    for i in a:\n        if i.isalpha():\n            a.remove(i)\n    for i in a:\n        if i.islower() or i.isupper():\n            a.remove(i)\n    \n    s = \"\"\n    for i in a:\n        s += i\n    for i in range(len(s)-1):\n        for j in range(i+1,len(s)):\n            if s[i] == s[j]:\n                if s[i]!= s[j]:\n                    s = s[:i]+s[i+1:j]+s[j:]\n    print(s)\n    return s\n\n    \n    \n    \n\ndef",
        "test": "assert solution(\"?(__+___+__-___):-___<___,___<___,____<_____,_____<______,______<_______,____<___<__,___,___<_____\") == \"false\"",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 4134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n\n    if n == 1 and m == 1:\n        return str(k)\n\n    queue = collections.deque([(1, 1)])\n    paths = set()\n    paths.add(tuple(queue[0]))\n    visited = set(queue)\n    while queue:\n        curr = queue.popleft()\n        for next in map(tuple, curr):\n            if next not in visited:\n                queue.append(next)\n                paths.add(tuple(next))\n                visited.add(next)\n\n    if k!= len(paths):\n        return '0'\n    else:\n        return str(len(paths))\n",
        "test": "assert solution(\"3 4 1000000000000000000\"), \"Should be [0,0]\"",
        "num_ids": 3241,
        "indeed": false
    },
    {
        "number": 4135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[-1]\n    t = stdin[:n.index('=')].lower()\n    return t[::-1]\n\nInput\n3\ncodeforces=   rocesfedoc=plmaetwoxesisiht\n\nOutput\nthisisexampletwo\n\n\n\"\"\"\nclass Solution:\n    def decrypt(self, s: str) -> str:\n        res = ''\n        i = 0\n        while i < len(s):\n            if s[i]!= \"=\":\n                res += s[i]\n            else:\n                #if this is the last item, end with the number\n                #otherwise, concatenate all the last two items\n                if i < len(s)-1 and s[i+2] == '=' and s[i] == '=':\n                    res += '-'\n                #otherwise, append the first two numbers as a suffix\n                elif i < len(s)-2 and s[i+2] == '=':\n                    res += '-'+str(int(s[i])+int(s[i+1]))\n                #otherwise, append the first two numbers as a suffix\n                elif i < len(s)-1 and s[i+2] == '=':\n                    res += '-'+str(int(s[i])+int(s[i+1]))\n                i += 1\n        return res\n",
        "test": "assert solution(stdin) == \"thisisexampletwo\"",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 4136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = int(input())\n    b = int(input())\n    return str(a + b)\n    \n",
        "test": "assert solution(stdin) == \"419\"",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    return ''\ndef",
        "test": "assert solution(solution(solution(stdin), stdin)) == stdin",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 4138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(str(int(i)) for i in stdin.split())\n\n\ndef",
        "test": "assert solution([\"1\", \"3\", \"20\", \"38\", \"56\"]) == \"5\"",
        "num_ids": 2140,
        "indeed": false
    },
    {
        "number": 4139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  if n < 5:\n    return \"0\"\n  \n  for i in range(6, n+1):\n    if i % 7 == 0 and i % 5!= 0 and i % 3!= 0:\n      return str(i)\n\n-----Sample Input\n\n10\n3\n\n-----Sample Output\n\n3\n\n------Solution-------\nimport math\nn = int(stdin)\n",
        "test": "assert solution(input) == \"4\"",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 4140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()\n    print(s[0])\n    print(s[1])\n    \n    white = 0\n    black = 0\n    \n    for i in range(len(s)):\n        if s[i] == \"0\":\n            black += 1\n        elif s[i] == \"1\":\n            white += 1\n            \n    if white == black:\n        return 1\n    else:\n        return 2\n",
        "test": "assert solution(input) == 1",
        "num_ids": 2514,
        "indeed": false
    },
    {
        "number": 4141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = [int(x) for x in a.split()]\n    sum_a = sum(a)\n    if all(x % 3 == 0 for x in a):\n        return 'APPROVED'\n    elif all(x % 5 == 0 for x in a):\n        return 'DENIED'\n    else:\n        return 'DENIED'\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    sum_a = sum(a)\n    if all(x % 3 == 0 for x in a):\n        print('APPROVED')\n    elif all(x % 5 == 0 for x in a):\n        print('DENIED')\n    else:\n        print('DENIED')",
        "test": "assert solution(\"4 5 7 9 10\") == \"DENIED\"",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 4142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    board = []\n    for line in stdin:\n        board.append(line.strip())\n    print(board)\n    print(solution(board))\n",
        "test": "assert solution('RUDAULUDR') == \"No\"",
        "num_ids": 2178,
        "indeed": false
    },
    {
        "number": 4143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E, G, H, I, J = map(int, stdin.split())\n    min_time = N * 60\n\n    def travel_time(min_time: int) -> int:\n        # change the assumption that every minute is not exclusive, as long as the time is not\n        # not included in the min_time\n        return A * min_time + B * (min_time + 60) + C * (min_time + 60 * (N - 1)) + D * (min_time + 60 * (N - 2)) + E * (min_time + 60 * (N - 3)) + I * (min_time + 60 * (N - 4)) + J * (min_time + 60 * (N - 5))\n\n    def passengers(min_time: int) -> int:\n        return min_time // 60\n\n    def buses_for_t(min_time: int) -> int:\n        return min_time // 60 * G + min_time % G\n\n    def fares(min_time: int) -> int:\n        return min_time // 60 * H + min_time % H + min_time // 60 * I + min_time % 60\n\n    def departures(min_time: int) -> int:\n        return min_time // 60 * E + min_time % 60\n\n    def check_in(min_time: int) -> int:\n        return min_time // 60 * I + min_time % 60\n\n    # there must be at least one person in the city at least once\n    # travel_time(min_time)\n    # passengers(min_time)\n    # buses_for_t(min_time)\n    # fares(min_time)\n    # departures(min_time)\n    min_time = travel_time(min_time)\n    people = passengers(min_time)\n    people_max = passengers(min_time)\n    # print(min_time)\n    # print(people)\n    # print(people_max)\n\n    # if the new departure is within the capacity,\n    # return the distance of the min_time\n    # to the nearest passenger\n    # TODO: output the min_time\n    # TODO: output the passengers\n    # TODO: output the buses\n    # TODO: output the fares\n    # TODO: output the departures\n    # TODO: output the people_max\n\n    return str(min_time)\n",
        "test": "assert solution(\"5 5\") == \"5\"",
        "num_ids": 2509,
        "indeed": false
    },
    {
        "number": 4144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    sequences = []\n    index = 0\n    for c in stdin:\n        if c == '1':\n            sequences.append(index)\n            index += 1\n        else:\n            sequences.append(index)\n            index += 1\n    return str(len(sequences))\n\"\"\"\n\nfrom collections import deque\n\ndef",
        "test": "assert solution(\"123321\") == \"9\"",
        "num_ids": 707,
        "indeed": false
    },
    {
        "number": 4145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n  \n  def isprime(n):\n    if n<2:\n      return False\n    for i in range(2,n):\n      if n%i==0:\n        return False\n    return True\n  def solution(n):\n    \n    prime_list = []\n    if isprime(n)==True:\n      prime_list.append(n)\n    for i in range(2,n):\n      if n%i==0:\n        return n\n    return False\n",
        "test": "assert solution(\"5\") == \"2\"",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 4146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for _ in range(int(stdin)):\n        result.append(stdin.replace(stdin[-1], ''))\n    return ''.join(result)\n\n'''\n\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef",
        "test": "assert solution(input()) == '3'",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 4147,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin.split()[1])\n    A = int(stdin.split()[2])\n    B = int(stdin.split()[3])\n    C = int(stdin.split()[4])\n    Bamboos = [98, 40, 30, 21, 80]\n    Bamboos.remove(B)\n    Bamboos.append(B)\n    mp = [Bamboos[0]*2, Bamboos[1]*2, Bamboos[2]*2]\n    if (L*mp[0] + L*mp[1]) < (L*mp[0] + L*mp[1] + C*2):\n        return \"Less than the minimum required!\"\n    if (L*mp[0] + L*mp[1] + C*2 + (L*mp[0] + L*mp[1]) > C*10):\n        return \"Too much MP!\"\n    mp[0] -= 1\n    mp[1] -= 1\n    mp[2] -= 1\n    mp[0] += 1\n    mp[1] += 1\n    mp[2] += 1\n    for i in range(L):\n        Bamboos[i] -= 1\n    mp[0] += 1\n    mp[1] += 1\n    mp[2] += 1\n    for i in range(L):\n        Bamboos[i] += 1\n    return str(sum(mp)) + \" MP\"\n\"\"\"\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 4148,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    if len(stdin) <= 1:\n        return stdin\n    stdin = stdin.lower()\n    n = len(stdin)\n    left, right = 0, n - 1\n    while left < right:\n        left_char = stdin[left]\n        right_char = stdin[right]\n        left_index = stdin[left].find(left_char)\n        right_index = stdin[right].find(right_char)\n        if left_index == right_index:\n            answer += stdin[left]\n            left += 1\n            continue\n        if left_index > right_index:\n            answer += stdin[right]\n            right -= 1\n        else:\n            answer += stdin[left]\n            left += 1\n    return answer\n",
        "test": "assert solution(\"A\") == \"A\"",
        "num_ids": 1314,
        "indeed": false
    },
    {
        "number": 4149,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    lst = [int(x) for x in stdin.split()]\n    for i in range(2, len(lst)+1):\n        for j in range(len(lst)-i+1):\n            lst[j:j+i] = sorted(lst[j:j+i])\n    if len(lst) == 0:\n        return \"0\"\n    else:\n        return \",\".join(map(str,lst))\n",
        "test": "assert solution('1') == '1'",
        "num_ids": 992,
        "indeed": false
    },
    {
        "number": 4150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_i = [int(x) for x in stdin.split()[1:]]\n    \n    b = len(a_i)\n    \n    c = 0\n    \n    if b % n > 0:\n        c = b // n\n        \n    if c == 0:\n        return \"0\"\n    \n    for i in range(n):\n        if k > 0:\n            k -= 1\n            c += 1\n            if a_i[i] == a_i[i - k] or a_i[i] == a_i[i + k] or a_i[i] == a_i[i - 1] + a_i[i + 1]:\n                c += 1\n        \n    if c == 0:\n        return \"0\"\n    \n    return str(c)\n\nprint(solution(sys.stdin.read()))",
        "test": "assert solution(stdin) == \"21112\"",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 4151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(1) == 1",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 4152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    for i in range(1, n):\n        if a[i-1] + a[i] > 10:\n            a[i] = a[i] - 1\n            a[i-1] = a[i]\n        else:\n            a[i] = 0\n    return str(len(set(a)))\n\n\n\n1 4 7\n4 5 2 3 4 9\n6 4 5 3 2 7\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5",
        "test": "assert solution(stdin) == 3",
        "num_ids": 2058,
        "indeed": false
    },
    {
        "number": 4153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    s = [list(stdin.strip())]\n    answer = 0\n    \n    for i in range(N):\n        if len(s[-1]) == 1:\n            s.append([0])\n            continue\n        for j in range(len(s)):\n            if s[j][-1] == 1:\n                s.append([0,0,0,0])\n            if s[j][-2] == 1:\n                s.append([0,1,0,0])\n            if s[j][-3] == 1:\n                s.append([0,0,1,0])\n            if s[j][-4] == 1:\n                s.append([1,0,0,0])\n            if s[j][-5] == 1:\n                s.append([0,1,1,0])\n            if s[j][-6] == 1:\n                s.append([0,0,0,1])\n        answer = max(answer, len(s))\n    print(answer)\n    return answer\n\ndef",
        "test": "assert solution(\"11111111111111\") == 4",
        "num_ids": 2861,
        "indeed": false
    },
    {
        "number": 4154,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n        n,m = map(int,stdin.split())\n        l,r = map(int,input().split())\n        gates = [list(map(int,input().split())) for _ in range(m)]\n        Gates = []\n        if gates[0][0] == 0:\n            Gates.append(gates.pop(0))\n        if gates[1][0] == 0:\n            Gates.append(gates.pop(1))\n        if gates[2][0] == 0:\n            Gates.append(gates.pop(2))\n        if gates[3][0] == 0:\n            Gates.append(gates.pop(3))\n        #print(Gates)\n        n = n-1\n        for i in range(m-1):\n            if gates[i][1] == 1:\n                n-=1\n            if gates[i][2] == 1:\n                n-=1\n            if gates[i][3] == 1:\n                n-=1\n            if i == m-2:\n                n-=1\n            if n < 0:\n                n = 0\n        if n<=0:\n            return \"NO\"\n        if gates[n][0] == 0:\n            return \"NO\"\n        else:\n            return str(n+1)\n\nprint(solution(input()))\n",
        "test": "assert solution(['2 1', '2 3', '2 4', '2 5', '2 6', '2 7', '2 8']) == '5'",
        "num_ids": 5824,
        "indeed": false
    },
    {
        "number": 4155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n\n    flowers = [0] * 100\n\n    for line in stdin.split():\n        l, r = map(int, line.split())\n        flowers[l] += 1\n        flowers[r] -= 1\n\n    for i in range(100):\n        if flowers[i] == 0:\n            answer += 1\n    return str(answer)\n",
        "test": "assert solution(stdin) == 2",
        "num_ids": 1033,
        "indeed": false
    },
    {
        "number": 4156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, w = stdin.split()\n    n = int(n)\n    w = int(w)\n    \n    passengers = [int(p) for p in stdin.split()]\n    \n    bus_stops = []\n    for p in passengers:\n        if p <= w:\n            bus_stops.append(p)\n    \n    if bus_stops == []:\n        return 0\n    \n    def buses(x):\n        if x == 0:\n            return 0\n        elif x == 1:\n            return 1\n        else:\n            return buses(x-1) + buses(x-2)\n        \n    return str(buses(w))\n\ndef",
        "test": "assert solution('2 1 1 1 0 0 0 0 0 0 0') == 2",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    n = int(stdin.strip())\n    if n <= 0:\n        return answer\n    nums = list(map(int, list(stdin.strip().split())))\n    i = 0\n    while i < len(nums):\n        j = i\n        while j < len(nums) and nums[j] >= nums[i]:\n            nums[j], nums[i] = nums[i], nums[j]\n            j += 1\n        nums[i], nums[j] = nums[j], nums[i]\n        answer += str(nums[i]) + \" \"\n        i += 1\n    return answer[:-1]",
        "test": "assert solution(4) == 84, \"answer is not correct\"",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    point = list(map(int, stdin.split()))\n\n    DP = [[0]*(n+1) for _ in range(n+1)]\n    DP[1][1] = point[1] - point[1]\n    DP[2][1] = abs(point[1] - point[2])\n    DP[3][1] = abs(point[2] - point[3])\n    DP[4][1] = abs(point[3] - point[4])\n    DP[5][1] = abs(point[4] - point[5])\n    DP[6][1] = abs(point[5] - point[6])\n\n    for i in range(2, n+1):\n        for j in range(1, i):\n            DP[i][j] = DP[i-1][j] + DP[i-1][j-1] - DP[i-1][j-1]\n\n    for i in range(7, n+1):\n        for j in range(1, i):\n            DP[i][j] = max(DP[i-1][j], DP[i-1][j-1])\n\n    for i in range(7, n+1):\n        for j in range(1, i):\n            if (DP[i][j] == 2**i):\n                return [i-1, j-1]\n\n\n\nprint(solution(input()))\n",
        "test": "assert solution(1, [7, -2, 3, -6, -6, 5, -9, -11, -12, 12, -1, -10]) == [1, 6, 7, 8, 9, 10]",
        "num_ids": 3313,
        "indeed": false
    },
    {
        "number": 4159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    K = int(stdin.split()[1])\n    print(solution2(A, B, K))\n\ndef",
        "test": "assert solution('2 2 3') == '1 2'",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 4160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n  X, *bank = [int(s) for s in stdin.split('\\n') if s!= \"\"]\n  result = 0\n  for a in bank:\n    result += ((a + 100)//100)*(a//100)\n  return str(result)\n",
        "test": "assert solution(\"12000\") == \"0\"",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 4161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    K, *numbers = map(int, stdin.split())\n    answer = 0\n    for number in numbers:\n        answer += (K - 1) // number\n    return str(answer)\n    \n\"\"\"\n\n\ndef",
        "test": "assert solution(20) == \"9\"",
        "num_ids": 960,
        "indeed": false
    },
    {
        "number": 4162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    # 1: get input\n    n, m = map(int, stdin.split())\n    # 2: output\n    return str(10**(m-1)) + solution(str(n-1))\n",
        "test": "assert solution(",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 4163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n,d = map(int, stdin.split())\n    odds = [d-1,d-2,d-3,d-4,d-5,d-6,d-7,d-8,d-9,d-10,d-11,d-12,d-13,d-14,d-15,d-16,d-17,d-18,d-19,d-20,d-21,d-22]\n    for i in range(n):\n        if (d-1) in odds or (d-2) in odds or (d-3) in odds or (d-4) in odds or (d-5) in odds or (d-6) in odds or (d-7) in odds or (d-8) in odds or (d-9) in odds or (d-10) in odds or (d-11) in odds or (d-12) in odds or (d-13) in odds or (d-14) in odds or (d-15) in odds or (d-16) in odds or (d-17) in odds or (d-18) in odds or (d-19) in odds or (d-20) in odds or (d-21) in odds or (d-22) in odds:\n            return \"Yes\"\n        else:\n            return \"No\"",
        "test": "assert solution('5 1') == 'Yes'",
        "num_ids": 1670,
        "indeed": false
    },
    {
        "number": 4164,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(round(3 * (2 ** 0.5) ** 0.5 - 1, 0)))\n",
        "test": "assert solution(\"3\") == \"3\"",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 4165,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 0:\n        return \"Yes\"\n    N, L = map(int, stdin.split())\n    if N <= 1 or L < 1 or L > N:\n        return \"No\"\n    if L % 2 == 0:\n        print(\"Yes\")\n        return \"Yes\"\n    print(\"No\")\n    print(\"Yes\")\n    print(\"Yes\")\n    return \"Yes\"\n",
        "test": "assert solution(\"1 2\") == \"No\"",
        "num_ids": 753,
        "indeed": false
    },
    {
        "number": 4166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solve():\n        if not str:\n            return -1\n        if len(str) <= 2:\n            return str\n        answer = []\n        for i in range(len(str)):\n            answer.append(int(str[i]))\n            answer.append(str[i+1])\n            answer.append(str[i+2])\n        return ''.join(sorted(answer))\n    \n    for _ in range(int(input())):\n        \n        str = input()\n        n, m = map(int, str.split(' '))\n        if n < 1 or m < 1:\n            print(-1)\n        else:\n            print(solve(str[1:n-1]))",
        "test": "assert solution(\"1 7\") == -1",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 4167,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    a = sorted([x for x in range(1,N+1) if (N-x)%K==0])\n    b = sorted([x for x in range(1,N+1) if (N-x)%K!=0])\n    c = sorted([x for x in range(1,N+1) if (N-x)%K!=0])\n    ans = ''\n    for i in a:\n        for j in b:\n            for k in c:\n                if i+j+k==K:\n                    ans += (str(i) +'' + str(j) +'' + str(k) + '\\n')\n    return ans\n\nTest Code:\nprint(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 178 179 180 182 183 184 185 186 187 188 188 189 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 219 220 220 221 222 223 224 225 226 227 228 229 229 230 231 231 232 233 234 235 236 237 237 238 238 239 239 240 241 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245",
        "test": "assert solution(s) == \"9\"",
        "num_ids": 2249,
        "indeed": false
    },
    {
        "number": 4168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.log(int(stdin), 2))",
        "test": "assert solution(input) == \"1011\"",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 4169,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_1, B_1, A_2, B_2 = map(int, stdin.split())\n    A_3, B_3, A_4, B_4 = map(int, stdin.split())\n    A_5, B_5 = map(int, stdin.split())\n    \n    drinks = [A_1, A_2, A_3, A_4, A_5]\n    price = [B_1, B_2, B_3, B_4, B_5]\n    count = 0\n    for i in range(N):\n        if 0 < price[i] < M:\n            count += 1\n    if count >= A_1 and count >= B_1:\n        count -= A_1\n    if count >= A_2 and count >= B_2:\n        count -= A_2\n    if count >= A_3 and count >= B_3:\n        count -= A_3\n    if count >= A_4 and count >= B_4:\n        count -= A_4\n    if count >= A_5 and count >= B_5:\n        count -= A_5\n    if count < 0:\n        print(-1)\n    else:\n        print(count)\n    \n",
        "test": "assert solution('1 4') == 12",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 4170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    N, H = [int(s) for s in stdin.split()]\n    count = 0\n    for i in range(1, N+1):\n        if i not in range(H, H*2+1):\n            count += 1\n        else:\n            count += 1\n            i += 1\n    return str(count)\n\n\"\"\"\nclass Solution:\n    def __init__(self, N, H):\n        self.max = 0\n        self.count = 0\n        self.max_ = 0\n        self.N = N\n        self.H = H\n        \n    def up(self, i):\n        self.count += 1\n        self.max = max(self.max, self.H)\n        if self.max_ <= self.N-i:\n            self.max_ = self.N-i\n            self.count = 0\n            \n    def down(self, i):\n        self.count -= 1\n        self.max = max(self.max, self.H)\n        if self.max_ > i:\n            self.max_ = i\n            self.count = 0\n            \n    def left(self, j):\n        self.count += 1\n        self.max = max(self.max, self.N-j)\n        if self.max_ >= self.H-j:\n            self.max_ = self.H-j\n            self.count = 0\n            \n    def right(self, j):\n        self.count -= 1\n        self.max = max(self.max, self.N-j)\n        if self.max_ < j:\n            self.max_ = j\n            self.count = 0\n            \n    def solution(self, N, H):\n        self.max = 0\n        self.count = 0\n        self.max_ = 0\n        self.N = N\n        self.H = H\n        \n        for i in range(1,N+1):\n            self.up(i)\n        for j in range(1,N):\n            self.down(j)\n        for k in range(1,N):\n            self.left(k)\n        for l in range(1,N):\n            self.right(l)\n        \n        return self.max",
        "test": "assert solution(\"3 3 1 1 1\") == \"1\"",
        "num_ids": 2982,
        "indeed": false
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a = list(filter(lambda x: x % 2 == 0, a))\n    a = list(map(lambda x: int(x), a))\n    a = sorted(a, reverse=True)\n    total = 0\n    if len(a) == 1:\n        total = a[0]\n    else:\n        for i in range(len(a)):\n            if a[i] == k:\n                total += a[i]\n    return str(total)\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\na = list(filter(lambda x: x % 2 == 0, a))\na = list(map(lambda x: int(x), a))\na = sorted(a, reverse=True)\ntotal = 0\n",
        "test": "assert solution(stdin) == 2, \"incorrect output\"",
        "num_ids": 1348,
        "indeed": false
    },
    {
        "number": 4172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    a = []\n    \n    for i in range(n):\n        a.append(int(stdin))\n        \n    c = a[-1]\n    \n    for j in range(n-2, -1, -1):\n        if c < a[j]:\n            c = a[j]\n            \n    print(c-1)\n    return str(c-1)",
        "test": "assert solution(stdin) == \"4\"",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 4173,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    m = 0\n    for i in range(n):\n        m += int(stdin[i])*a*b\n    if m >= a*b:\n        return str(m-a*b)\n    else:\n        return str(m)",
        "test": "assert solution(\"1 1 3\") == \"0\"",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 4174,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N, L_1, L_2 = [int(i) for i in stdin.split()]\n    X = int(stdin.split()[1])\n    answer = 0\n    for i in range(N):\n        d = i - L_1 + 1\n        if d < 0 or X <= d:\n            continue\n        d_1 = d\n        d_i = d + L_1\n        if d_1 >= L_2:\n            d_1 = L_2\n            d_i = d_1\n        answer += (d_i - d_1) // L_2\n    return str(answer)\n\n-----Sample Input-----\n3 6\n3 4 5\n\n-----Sample Output-----\n0\n\nThe ball will make a bounce at the coordinates 0, 3, 7 and 12, among which two are less than or equal to 6.\n\nimport math\ndef",
        "test": "assert solution(",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 4175,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    N, W_i, W_j = map(int, stdin.split())\n    \n    #first we check if all elements are less than ten\n    if W_i == W_j:\n        return 'Yes'\n\n    #check if the last element is the same as the first element\n    if W_i >= 10:\n        return 'Yes'\n\n    #check if the first element is the same as the last element\n    if W_i <= 9:\n        return 'No'\n\n    #now we can print the result of the rules\n    return 'No'\n'''\n\n\nimport sys\n\nclass Trie:\n    def __init__(self):\n        self.root = {}\n    \n    def insert(self, word):\n        curr = self.root\n        for c in word:\n            if c not in curr:\n                curr[c] = {}\n            curr = curr[c]\n        curr[None] = 1\n        \n    def search(self, word):\n        curr = self.root\n        for c in word:\n            if c not in curr:\n                return False\n            curr = curr[c]\n        return True\n    \n    def __len__(self):\n        return len(self.root)\n    \nclass Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        \n        #we create a trie of n queens, so that we can represent the size of the tries\n        trie = Trie()\n        \n        #init first row of the tries, starting from bottom\n        tries = [[]]\n        \n        for i in range(n):\n            #now we check if all the rows are valid\n            #first we add the all the valid rows to the trie\n            for j in range(n):\n                if len(tries[j]):\n                    tries[j].append(i)\n                    #now we check if any of the last elements of the row is the same as the first element\n                    if len(tries[j]):\n                        #if the last element is the same as the first element, we only have to check that\n                        #we have not already checked rows of the same length\n                        if len(tries[j]):\n                            #then we recursively call our recursion with the next row of the tries\n                            #and the remaining rows of the tries\n                            self.__add_tries(tries, j, i, trie)\n        \n        #now we sort all the valid rows in the trie, and return it\n        return sorted(trie.root.values(), key=lambda x: len(x))\n        \n        def __add_tries(tries, i, j, trie):\n            \n            if len(tries[j]):\n                #we go over the remaining rows, but we also keep the best answer\n                #in this, we remove the best answer to the current row, and we add it to the current row's answer\n                for c in range(j, n):\n                    tries[c][i] = True\n                    tries[c][j] = True\n                    trie.insert(tries[c][j])\n            \n            #now we check if the last element is the same as the first element\n            if len(tries[j]):\n                #if the last element is the same as the first element, we only have to check that\n                #we have not already checked rows of the same length\n                if len(tries[j]):\n                    #then we recursively call our recursion with the next row of the tries\n                    #and the remaining rows of the tries\n                    self.__add_tries(tries, j, i, trie)\n                    \n        \n        \n        \n            \n        \n            \n            \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ",
        "test": "assert solution(input) == \"Yes\"",
        "num_ids": 3489,
        "indeed": false
    },
    {
        "number": 4176,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    snack = []\n    answer = ''\n    for line in stdin:\n        if line.startswith('A'):\n            snack.append(int(line.replace('A', '1')))\n        elif line.startswith('B'):\n            snack.append(int(line.replace('B', '1')))\n        elif line.startswith('C'):\n            snack.append(int(line.replace('C', '1')))\n        elif line.startswith('D'):\n            snack.append(int(line.replace('D', '1')))\n    \n    # \ub450\ubc88\uc9f8 \uc791\uc5c5\n    answer += str(snack.count(2)) +''\n    snack.remove(2)\n    # \uc138\ubc88\uc9f8 \uc791\uc5c5\n    answer += str(snack.count(3)) +''\n    snack.remove(3)\n    # \ud640\ubc88\uc9f8 \uc791\uc5c5\n    answer += str(snack.count(4)) +''\n    snack.remove(4)\n    # \uc67c\ucabd \uc791\uc5c5\n    answer += str(snack.count(5)) +''\n    snack.remove(5)\n    # \uc624\ub978\ucabd \uc791\uc5c5\n    answer += str(snack.count(6)) +''\n    snack.remove(6)\n    # \ube48\uac12\n    snack.append(0)\n\n    # \ucd5c\ub300 \ub450 \uc791\uc5c5\n    answer += str(snack.count(7)) +''\n    snack.remove(7)\n    # \ucd5c\uc18c \ub450 \uc791\uc5c5\n    answer += str(snack.count(8)) +''\n    snack.remove(8)\n\n    return answer\n",
        "test": "assert solution(str) == 1",
        "num_ids": 1229,
        "indeed": false
    },
    {
        "number": 4177,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    s = [i for i in s]\n    ans = \"\"\n    for i in range(len(s)):\n        s[i] = s[i].replace(\" \", \"\")\n        if s[i] == \"\":\n            continue\n        if s[i][0]!= s[i][-1]:\n            ans += s[i][0]\n            s[i] = s[i][1:]\n        else:\n            ans += s[i][0]\n            s[i] = s[i][1:]\n        if len(s[i])!= 1:\n            ans += s[i][0]\n            s[i] = s[i][1:]\n    return ans\n",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 4178,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"5\") == \"No\"",
        "num_ids": 2455,
        "indeed": false
    },
    {
        "number": 4179,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    m = int(stdin.split('\\n')[1])\n    arr = list(map(int,stdin.split('\\n')))\n    d = [0 for i in range(n)]\n    for i in range(n):\n        d[arr[i]-1] += 1\n    s =''.join(map(str, d))\n    c = 0\n    for i in range(m):\n        for j in range(i,m):\n            c += d[j] + d[i]\n    print(c)\n    return 'Yes' if c >= 0 else 'No'\n\ninput= \"1 2 3\"\nprint(solution(input))\n\n\n\ndef",
        "test": "assert solution(\"3 1 1 1 3\") == \"1 1 1 1 3\"",
        "num_ids": 2910,
        "indeed": false
    },
    {
        "number": 4180,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 10000:\n        k = n*1000\n        return str(k - 100)\n    elif k % 1000 == 0:\n        return str(k - 100)\n    else:\n        a = k//1000\n        b = k%1000\n        k = 1000*a + 1000*b\n        return str(k - 100)",
        "test": "assert solution(stdin) == 100",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 4181,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A, B = list(map(int, stdin.split()))\n    def recur(A, B, N):\n        if A==N: return B\n        if B==N: return A\n        return max(A, B) + recur(A+1, B, N) + recur(A, B+1, N)\n    return str(recur(A, B, N))\n\n\n-----Sample Output-----\n2\n0\n2\n\n-----Constraints-----\n- All values in input are integers.\n- 1 \\leq N \\leq 10^5\n- 1 \\leq A_i \\leq 10^9\n- 1 \\leq B_i \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_{N+1}\nB_1 B_2... B_N\n\n-----Output-----\nPrint the maximum total number of monsters the heroes can defeat.\n\n-----Sample Input-----\n2\n3 5 2\n4 5\n\n-----Sample Output-----\n9\n\nIf the heroes choose the monsters to defeat as follows, they can defeat nine monsters in total, which is the maximum result.\n - The first hero defeats two monsters attacking the first town and two monsters attacking the second town.\n - The second hero defeats three monsters attacking the second town and two monsters attacking the third town.\ndef",
        "test": "assert solution(stdin) == '9'",
        "num_ids": 2442,
        "indeed": false
    },
    {
        "number": 4182,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = list(map(int, stdin.split()))\n    if X > Y:\n        X, Y = Y, X\n    x_1, x_2, x_3 = X\n    y_1, y_2, y_3 = Y\n    if x_1 <= x_3 or x_3 <= x_1 or x_1 > x_2:\n        return \"No War\"\n    if y_1 <= y_3 or y_3 <= y_1 or y_1 > y_2:\n        return \"No War\"\n    if x_1 > x_2:\n        x_1, x_2 = x_2, x_1\n    if x_1 < x_3:\n        x_1, x_3 = x_3, x_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 < y_3:\n        y_1, y_3 = y_3, y_1\n    if x_2 > x_3:\n        x_2, x_3 = x_3, x_2\n    if x_2 < x_1:\n        x_2, x_1 = x_1, x_2\n    if y_2 > y_1:\n        y_2, y_1 = y_1, y_2\n    if y_2 < y_3:\n        y_2, y_3 = y_3, y_2\n    if x_3 < x_1:\n        x_3, x_1 = x_1, x_3\n    if x_3 > x_2:\n        x_3, x_2 = x_2, x_3\n    if y_3 < y_1:\n        y_3, y_1 = y_1, y_3\n    if y_3 > y_2:\n        y_3, y_2 = y_2, y_3\n    if x_1 == x_3 and y_2 == y_3:\n        return \"No War\"\n    else:\n        return \"War\"\n\n-----Sample Output-----\nThe choice Z = 16 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 16 \\leq 20 = Y\n - 8, 15, 13 < 16\n - 16, 22 \\geq 16\ndef",
        "test": "assert solution(\"8 15 13\") == \"No War\"",
        "num_ids": 1960,
        "indeed": false
    },
    {
        "number": 4183,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n  return str(3600 - (int(time.strftime('%M',time.localtime())) * 60 + int(time.strftime('%S',time.localtime())) - 59))",
        "test": "assert solution(input()) == 6",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 4184,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, W, T = [int(x) for x in stdin.split()]\n    if N == T:\n        return str(abs(W - T))\n    if N > T:\n        raise ValueError\n    else:\n        if W > T:\n            raise ValueError\n    return str(abs(W - T))\n",
        "test": "assert solution(\"4 4 4\") == \"0\"",
        "num_ids": 4583,
        "indeed": false
    },
    {
        "number": 4185,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    a = sorted(a, key=lambda x: x[1])\n    m += 1\n    a[0][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * (i + 1)\n    m += 1\n    for i in range(1, len(a)):\n        a[0][i] += 2 * n\n        for j in range(1, len(a)):\n            a[j][i] += 2 * (j + 1)\n    m += 1\n    a[0][m] += 2 * m\n    for i in range(1, len(a)):\n        a[i][m] += 2 * n\n        for j in range(1, len(a)):\n            a[j][m] += 2 * n\n    m += 1\n    a[0][m] += 2 * n\n    for i in range(1, len(a)):\n        a[i][m] += 2 * n\n    m += 1\n    a[0][m] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    a[n][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[0][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[n][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[0][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    a[n][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[n][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[0][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[0][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[n][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[0][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[n][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[0][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[n][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[0][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[n][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[0][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[n][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[0][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[n][0] += 2 * n\n    for i in range(1, len(a)):\n        a[i][0] += 2 * n\n    m += 1\n    a[0][0] += 2 * n\n",
        "test": "assert solution(stdin) == 0",
        "num_ids": 2062,
        "indeed": false
    },
    {
        "number": 4186,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    team_list = [list(map(int, stdin.split())) for i in range(N)]\n    team_list.sort(key=lambda x: x[0])\n    teams = []\n    i = 0\n    while i < len(team_list):\n        if i < len(team_list) - 1:\n            if team_list[i][0]!= team_list[i + 1][0]:\n                teams.append([team_list[i][1], team_list[i + 1][1]])\n        i += 1\n    return str(len(teams))\n\"\"\"\n\n\ndef",
        "test": "assert solution(\"1 1 1 2\") == \"3\"",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 4187,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    start_day = 0\n    while n!= 0:\n        if n & 1:\n            start_day += 1\n        n >>= 1\n    answer = 0\n    for i in range(start_day, 1, -1):\n        answer += i\n    answer += start_day\n    return str(answer)\n\nprint(solution(int(input())))\n",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 4188,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nNotes\n\nThe input is a single line of input. The only exception is that the input does not contain a line feed character.\n\nThe input is a string of space separated integers.\n\nConstraints\n1 <= stdin.length <= 10^6\n1 <= int[x] <= 10^6\n0 <= x <= 10^8\n\nhttps://leetcode.com/problems/counting-bits/submissions/\n'''\n",
        "test": "assert solution(\"4\"), \"Empty\"",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split(' ')[0])\n    cheeses = []\n    for _ in range(N):\n        cheeses.append(stdin.strip().split(' ')[1].split(' '))\n    for i in range(N):\n        cheeses[i] = [cheeses[i][0], cheeses[i][1]]\n    \n    \n    solution = 0\n    for cheese in cheeses:\n        if solution < 0:\n            break\n        for type in ['soft', 'hard']:\n            if solution + cheese[1] > 10:\n                break\n            if type =='soft':\n                if cheese[0] == 'parmesan':\n                    solution += (len(cheese[0]) - 2) * cheese[1]\n                elif cheese[0] == 'emmental':\n                    solution += (len(cheese[0]) - 1) * cheese[1]\n                elif cheese[0] == 'asian':\n                    solution += (len(cheese[0]) - 3) * cheese[1]\n                elif cheese[0] =='mango':\n                    solution += (len(cheese[0]) - 4) * cheese[1]\n                elif cheese[0] == 'ginger':\n                    solution += (len(cheese[0]) - 5) * cheese[1]\n                elif cheese[0] == 'ice':\n                    solution += (len(cheese[0]) - 6) * cheese[1]\n                elif cheese[0] =='seafood':\n                    solution += (len(cheese[0]) - 7) * cheese[1]\n                else:\n                    solution += (len(cheese[0]) - 8) * cheese[1]\n            elif type == 'hard':\n                if cheese[0] == 'parmesan':\n                    solution += (len(cheese[0]) - 2) * cheese[1]\n                elif cheese[0] == 'emmental':\n                    solution += (len(cheese[0]) - 1) * cheese[1]\n                elif cheese[0] == 'asian':\n                    solution += (len(cheese[0]) - 3) * cheese[1]\n                elif cheese[0] =='mango':\n                    solution += (len(cheese[0]) - 4) * cheese[1]\n                elif cheese[0] == 'ginger':\n                    solution += (len(cheese[0]) - 5) * cheese[1]\n                elif cheese[0] == 'ice':\n                    solution += (len(cheese[0]) - 6) * cheese[1]\n                elif cheese[0] =='seafood':\n                    solution += (len(cheese[0]) - 7) * cheese[1]\n                else:\n                    solution += (len(cheese[0]) - 8) * cheese[1]\n    \n    return str(solution)\n",
        "test": "assert solution(input()) == \"1\"",
        "num_ids": 1519,
        "indeed": false
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().strip(\"\\n\"))\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    x = list(map(int, stdin.strip().split()))\n    x.sort()\n    y = []\n    for i in range(n):\n        y.append(a[i] + b[i])\n    answer = []\n    c = []\n    for i in range(n):\n        x[i] = x[i] % n\n        c.append(x[i] % n)\n    c.sort()\n    if a[0] > b[0]:\n        for i in range(n):\n            answer.append(c[i] + y[i])\n    else:\n        for i in range(n):\n            answer.append(x[i] + y[i])\n    answer.sort()\n    return \"\".join(str(i) for i in answer)\n\ndef",
        "test": "assert solution(stdin) == \"0 0 0 0\"",
        "num_ids": 1400,
        "indeed": false
    },
    {
        "number": 4191,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(4):\n        str = input()\n        for j in range(len(str)):\n            if str[j] == '0':\n                str[j] = '0'\n            elif str[j] == '1':\n                str[j] = '1'\n    return ''.join(str)\n\n\n-----Example-----\nInput\n0 0 0\n0 1 0\n0 0 1\n\nOutput\n1\n\n\n-----Example-----\nInput\n0 0 0\n1 1 0\n1 0 1\n\nOutput\n0\n\"\"\"\n\nclass Solution:\n    def convertToTitle(self, n: int) -> str:\n        \n        res = []\n        while n:\n            r = n%10\n            res.append(r)\n            n//=10\n        print(res)\n        res = res[::-1]\n        print(res)\n        while len(res)>1:\n            if res[-1] == res[-2]:\n                res.pop()\n            else:\n                break\n        \n        print(res)\n        if res[-1] == res[-2]:\n            res.pop()\n        else:\n            print(res)\n        return ''.join(res)\n        \n",
        "test": "assert solution(\"101\") == '1'",
        "num_ids": 2092,
        "indeed": false
    },
    {
        "number": 4192,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n\n    if (D < 10 or D > 10000 or T < 10 or T > 10000 or S < 10 or S > 10000):\n        return \"No\"\n\n    if (S > 3000 or T > 9000):\n        return \"No\"\n\n    if (D > T or T > S):\n        return \"No\"\n\n    if (D > (T * 0.75) or D > (T * 0.8)):\n        return \"No\"\n\n    if (S > (T * 0.75) and T > (D * 0.8)):\n        return \"No\"\n\n    if (S > T or T > (D * 0.8)):\n        return \"No\"\n\n    if (D < (T * 0.75) and T > (D * 0.8)):\n        return \"No\"\n\n    if (D < T or T > (D * 0.8)):\n        return \"No\"\n\n    if (D > T or T > (D * 0.8)):\n        return \"No\"\n\n    return \"Yes\"\n",
        "test": "assert solution('1000 5 100') == 'No'",
        "num_ids": 1336,
        "indeed": false
    },
    {
        "number": 4193,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    A = [[] for _ in range(n+1)]\n    B = []\n    for i in range(n):\n        A[i] = stdin.split()\n        for j in range(n):\n            if j!= i:\n                A[i].append(int(A[i][j]))\n    for i in range(1,n+1):\n        B.append([])\n        B[i-1].extend(A[i])\n    for i in range(1, n+1):\n        for j in range(i+1):\n            B[i].append(sum(B[i-j])+i)\n    for i in range(n-1, -1, -1):\n        for j in range(1, n):\n            if B[j][i] == B[j][i+1]:\n                B[j].pop()\n            if B[j][i] == B[j+1][i+1]:\n                B[j].pop()\n    if (B[n][n] == 0):\n        return 'Yes'\n    else:\n        return 'No'\n\nInput:\nN\nb_1\n9\n9\n\nOutput:\nNo\nYes\n'''\n\nfrom collections import deque\nn, b = map(int, input().split())\nA = [list(map(int, input().split())) for _ in range(n)]\nB = [0 for _ in range(n+1)]\n\nfor i in range(n):\n    for j in range(n):\n        B[A[i][j]] += 1\n\nq = deque()\nfor i in range(1, n+1):\n    if B[i]!= 0:\n        q.append(i)\n        B[i] -= 1\n\nwhile q:\n    for i in range(len(q)):\n        x = q.popleft()\n        if x + 1 < n and A[x][x+1] > 0:\n            B[x+1] -= 1\n            B[x] += 1\n            q.append(x+1)\n        if x - 1 >= 0 and A[x][x-1] > 0:\n            B[x-1] -= 1\n            B[x] += 1\n            q.append(x-1)\nprint('Yes' if sum(B) == 0 else 'No')",
        "test": "assert solution(",
        "num_ids": 1537,
        "indeed": false
    },
    {
        "number": 4194,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, M, A_i, A_j = map(int, stdin.split())\n    if N + M + A_i + A_j > 30:\n        return -1\n    if N <= 0 or M <= 0 or A_i < 0 or A_j < 0 or A_i >= A_j:\n        return -1\n    else:\n        return max(A_i * 30, A_j * 30)\n",
        "test": "assert solution(",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 4195,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n, D = input[0], int(input[1])\n    m = (100 - D) / D\n    for i in range(D * m + 1):\n        if m % i == 0:\n            return str(i)\n    return 'Error'\n\"\"\"\nclass Solution:\n    def factorial(self, num: int) -> int:\n        def fact(num, power):\n            return (num * (power + 1)) if num % power == 0 else (num * fact(num, power + 1))\n        \n        if num == 0:\n            return 1\n        \n        return fact(num, 1)\n    \n    def solution(self, stdin: str) -> str:\n        input = stdin.split()\n        n, D = int(input[0]), int(input[1])\n        m = (100 - D) / D\n        lst = [i for i in range(1, n+1)]\n        lst = list(set(lst) - set([1]))\n        for i in range(D * m + 1):\n            if i in lst:\n                lst.remove(i)\n            else:\n                lst.append(i)\n        \n        return str(lst[0])\n\"\"\"\n",
        "test": "assert solution(\"4\") == 4",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 4196,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    while N >= A:\n        A = min(A, N - A)\n    return str(A)\n",
        "test": "assert solution(\"1 2\") == \"2\"",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 4197,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    student = []\n    student_index = []\n    student_count = []\n    for i in range(int(stdin)):\n        tmp = stdin[i].split()\n        for j in range(len(tmp)):\n            if j == 0:\n                student.append(int(tmp[j]))\n            else:\n                student_index.append(int(tmp[j]))\n    print(student)\n    print(student_index)\n    for i in range(len(student)):\n        student_count.append(student_index.count(i + 1))\n    print(student_count)\n    for i in range(len(student_count)):\n        print(student[i],student_count[i])\n    return student_count[student_count.index(max(student_count))]\n",
        "test": "assert solution(\"3 3 3 3\") == \"3 3 3 3\"",
        "num_ids": 2489,
        "indeed": false
    },
    {
        "number": 4198,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    print(max(n, a, b))\n    return '0'",
        "test": "assert solution(\"5 1 5\") == \"2\"",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 4199,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, h: int) -> int:\n        # sort by height (bottom to top)\n        h_list = sorted(map(int, str(h).split()), reverse=True)\n        answer = 0\n        for i in range(n):\n            # check if the height is in the middle\n            if h_list[i] == h_list[i+1]:\n                answer += 1\n            else:\n                answer += (i+1) - i\n        return answer\n\n    # parse input\n    N, K = map(int, stdin.split())\n    h = map(int, input().split())\n    # calculate answer\n    answer = solve(N, h)\n    return str(answer)\n-----Sample Output-----\n2\n\"\"\"\ndef",
        "test": "assert solution(\"1 2\") == \"1\"",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 4200,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    votes = [0] + [int(i) for i in stdin.split(' ')]\n    M = sum(votes[0:5])\n    for i in range(6, len(votes)):\n        votes[i] = votes[i] - M // 4\n    if votes[-1] > M:\n        return \"Yes\"\n    return \"No\"\n",
        "test": "assert solution('1 2') == 'No', 'failed'",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 4201,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    K, H, W = map(int, stdin.split())\n    \n    def find(x, y, idx, grid):\n        if idx == len(grid):\n            return True\n        if x == idx[0] and y == idx[1]:\n            return find(x, y + 1, idx, grid)\n        if x == idx[0]:\n            return find(x + 1, y, idx, grid)\n        if y == idx[1]:\n            return find(x, y + 1, idx, grid)\n        return False\n        \n    def merge(a, b, idx, grid):\n        temp = []\n        idx = idx[1:]\n        \n        if not b:\n            return\n        \n        if b[0] == \"#\":\n            for i in range(idx[0], idx[-1]+1):\n                temp.append(grid[i])\n            grid = temp\n            \n        if b[0] == \".\":\n            for i in range(idx[0], idx[-1]+1):\n                grid[i] = \"#\"\n        \n        if not a:\n            return\n        \n        if a[0] == \".\":\n            for i in range(idx[1], idx[-1]+1):\n                grid[i] = \"#\"\n        \n        if not a[0] == \".\":\n            temp = []\n            temp.extend(a)\n            temp.append(\".\")\n            \n            if merge(temp, b, idx, grid):\n                return\n        \n        if a[0] == \"#\":\n            for i in range(idx[0], idx[-1]+1):\n                grid[i] = \"#\"\n        \n        if a[0] == \".\":\n            for i in range(idx[1], idx[-1]+1):\n                grid[i] = \"#\"\n        \n        if not a[0] == \"#\":\n            temp = []\n            temp.extend(a)\n            temp.append(\"#\")\n            \n            if merge(temp, b, idx, grid):\n                return\n            \n            temp = []\n            temp.extend(b)\n            temp.append(\"#\")\n            \n            if merge(temp, a, idx, grid):\n                return\n    \n    for row in range(H):\n        for col in range(W):\n            if find(row, col, [], grid):\n                return\n        \n    return \"no\"\n",
        "test": "assert solution(inp) == '5'",
        "num_ids": 1138,
        "indeed": false
    },
    {
        "number": 4202,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n  \n  a, b = map(int, stdin.split())\n  \n  if a < b:\n    return str(a * b)\n  elif a > b:\n    return str((a % b) * b)\n  \n  return str(a * b)\n",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 4203,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \n    def check(S):\n        if not S: return False\n        if S[0]!= 'A' or (not S[1].isalpha()): return False\n        if S[-1] == 'C' and 'A' in S[1:]: return False\n        return True\n    \n    S = stdin.strip()\n    \n    if not check(S):\n        return 'WA'\n    \n    A = S[0]\n    \n    slices = [S[i:i+3] for i in range(len(S)-2)]\n    \n    if len(slices) == 0:\n        return A\n    else:\n        if len(slices) == 1:\n            return S[0].lower()\n        else:\n            if len(slices) == 2:\n                return slices[1].lower()\n            else:\n                return slices[1].lower() + ''.join(check(slice) for slice in slices[2:])\n        \n        ",
        "test": "assert solution('aC') == 'WA'",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    m,n,k = list(map(int,stdin.split()))\n    S = str(m*n*k)\n    k-=1\n    return(S[k] if k>=0 else 0)\n",
        "test": "assert solution([\"1324\", \"1234\", \"12345\", \"124\", \"1234\", \"1223\", \"1122\", \"2234\", \"22\", \"22\", \"22\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\"]) == \"2\"",
        "num_ids": 2432,
        "indeed": false
    },
    {
        "number": 4205,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    p = [int(i) for i in stdin.split()]\n    p.sort()\n    if p == [1, 2, 3, 4, 5]:\n        return 'YES'\n    else:\n        return 'NO'",
        "test": "assert solution(\"5 2 3 4 1\") == \"YES\"",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 4206,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    s = [int(i) for i in stdin.split()]\n    return '\\n'.join(str(len(set(s))) + \" \" * (int(len(s) % 10) + 1) for i in range(int(len(s) / 2))) + '\\n'\n",
        "test": "assert solution(201920181) == 4",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, int(stdin) + 1):\n        for j in range(i):\n            if int(stdin[i - j]) == 0:\n                continue\n            else:\n                break\n        for j in range(i - 1, -1, -1):\n            if int(stdin[i - j]) == 0:\n                continue\n            else:\n                break\n        print(i)\n        break\n        \nsolution(input())",
        "test": "assert solution(stdin) == '2'",
        "num_ids": 2412,
        "indeed": false
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    l_colors, r_colors = [], []\n    for l_color in 'abcdefghijklmnopqrstuvwxyz':\n        r_color = '?'\n        for r_color in 'abcdefghijklmnopqrstuvwxyz':\n            l_colors.append(l_color+r_color)\n    for i in range(n):\n        l_color, r_color = map(str, stdin.split())\n        l_colors.append(l_color+r_color)\n    a = len(l_colors)\n    b = len(l_colors[-1])\n    c = len(l_colors[0])\n    l_colors = [l_colors[j:j+b] for j in range(0, a, b)]\n    r_colors = [r_colors[j:j+c] for j in range(0, a, c)]\n    pairs = []\n    for i in range(n):\n        l_pair = []\n        r_pair = []\n        for j in range(i):\n            if l_colors[j]!= l_colors[i]:\n                l_pair.append(l_colors[j])\n                r_pair.append(r_colors[i])\n        l_pair = list(set(l_pair))\n        r_pair = list(set(r_pair))\n        pairs.append(l_pair)\n        pairs.append(r_pair)\n    sorted_pairs = sorted(pairs, key=lambda x: (len(x[0]), len(x[1])))\n    print(len(sorted_pairs))\n    for i in range(len(sorted_pairs)):\n        print(*sorted_pairs[i])\n    print(sorted_pairs[0][0])\n    return sorted_pairs[0][0]\n",
        "test": "assert solution(stdin) == 10",
        "num_ids": 3009,
        "indeed": false
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    #  a = [[int(x) for x in line.split()] for line in stdin.split()]\n    #  print(a)\n    #  print(a[0][0])\n    #  print(a[0][1])\n    \n    #  for i in range(len(a)):\n    #    print(a[i])\n    #    print()\n    \n    #  for i in range(len(a)):\n    #    print(a[i][0])\n    #    print()\n    \n    #  for i in range(len(a)):\n    #    print(a[i][1])\n    #    print()\n    \n    #  for i in range(len(a)):\n    #    print(a[i][2])\n    #    print()\n    \n    #  for i in range(len(a)):\n    #    print(a[i][3])\n    #    print()\n    \n    for i in range(len(a)):\n        print(i,a[i][0],a[i][1],a[i][2],a[i][3])\n    \n    \n    #  for i in range(len(a)):\n    #    print(a[i][0],a[i][1],a[i][2])\n    #    print()\n    #  for i in range(len(a)):\n    #    print(a[i][3])\n    #    print()\n    #  for i in range(len(a)):\n    #    print(a[i][0],a[i][1],a[i][2],a[i][3],a[i][4],a[i][5])\n    #    print()\n    #  for i in range(len(a)):\n    #    print(a[i][0],a[i][1],a[i][2],a[i][3],a[i][4],a[i][5],a[i][6],a[i][7],a[i][8],a[i][9],a[i][10],a[i][11])\n    #    print()\n    #  for i in range(len(a)):\n    #    print(a[i][0],a[i][1],a[i][2],a[i][3],a[i][4],a[i][5],a[i][6],a[i][7],a[i][8],a[i][9],a[i][10],a[i][11],a[i][12])\n    #    print()\n    #  for i in range(len(a)):\n    #    print(a[i][0],a[i][1],a[i][2],a[i][3],a[i][4],a[i][5],a[i][6],a[i][7],a[i][8],a[i][9],a[i][10],a[i][11],a[i][12],a[i][13])\n    #    print()\n    #  for i in range(len(a)):\n    #    print(a[i][0],a[i][1],a[i][2],a[i][3],a[i][4],a[i][5],a[i][6],a[i][7],a[i][8],a[i][9],a[i][10],a[i][11],a[i][12],a[i][13],a[i][14],a[i][15],a[i][16],a[i][17],a[i][18],a[i][19],a[i][20],a[i][21],a[i][22],a[i][23],a[i][24],a[i][25],a[i][26],a[i][27],a[i][28],a[i][29],a[i][30],a[i][31],a[i][32],a[i][33],a[i][34],a[i][35],a[i][36],a[i][37],a[i][38],a[i][39],a[i][40],a[i][41],a[i][42],a[i][43],a[i][44],a[i][45],a[i][46],a[i][47],a[i][48],a[i][49],a[i][50],a[i][51],a[i][52],a[i][53],a[i][54],a[i][55],a[i][56],a[i][57],a[i][58],a[i][59],a[i][60],a[i][61],a[i][62],a[i][63],a[i][64],a[i][65],a[i][66],a[i][67],a[i][68],a[i][69],a[i][70],a[i][71],a[i][72],a[i][73],a[i][74],a[i][75],a[i][76],a[i][77],a[i][78],a[i][79],a[i][80],a[i][81],a[i][82],a[i][83],a",
        "test": "assert solution(\"4 5 -4 -4 -4 -4 -4\") == \"4 2 4\"",
        "num_ids": 2861,
        "indeed": false
    },
    {
        "number": 4210,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = map(int, stdin.split())\n    return str(n // (b - c))\n\ndef",
        "test": "assert solution(",
        "num_ids": 2330,
        "indeed": false
    },
    {
        "number": 4211,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin.split())\n    A.sort()\n    ans = 0\n    for i, a in enumerate(A):\n        ans = max(ans, a + A[i+1])\n    return str(ans)\n\"\"\"\n",
        "test": "assert solution(stdin) == \"9\"",
        "num_ids": 2336,
        "indeed": false
    },
    {
        "number": 4212,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    A = [int(i) for i in stdin.split()]\n    q = q if q > 0 else q % q\n    \n    def iterate(q):\n        a, b, c = A[:q], A[q:], A[q:]\n        return sum(d for a_i, b_i, c_i in zip(a, b, c) if (a_i - b_i) % c_i > 0)\n    \n    def score(q):\n        ans = 0\n        for a_i, b_i, c_i in A:\n            if (a_i - b_i) % c_i > 0:\n                ans += iterate(q)\n        return ans\n        \n    return str(score(q))",
        "test": "assert solution(stdin) == 110",
        "num_ids": 1096,
        "indeed": false
    },
    {
        "number": 4213,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n  max_diff = -float('inf')\n  for _ in range(int(stdin)):\n    num = int(stdin[:stdin.index(' ')])\n    plus = int(stdin[stdin.index(' ')+1:])\n    minus = int(stdin[stdin.index(' ')+2:])\n    max_diff = max(max_diff, abs(num-plus) + abs(num-minus))\n  return str(max_diff)\n\ndef",
        "test": "assert solution(\"4 1 2 3\") == \"5\"",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N, x_1, y_1 = map(int, stdin.split())\n    x_N = 0\n    y_N = 0\n    for i in range(N):\n        x_i, y_i = map(int, stdin.split())\n        x_i = x_i + x_1\n        y_i = y_i + y_1\n        x_N += x_i\n        y_N += y_i\n    x_N = x_N/N\n    y_N = y_N/N\n    return str(round(abs(x_N + y_N - 0.5)/10**6, 6))\n\n-----Output-----\n2.2761423749\n",
        "test": "assert solution(input()) == \"2.2761423749\"",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 4215,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    horizontal_length = A + B\n    curtains = ['A', 'B']\n    answer = 0\n    \n    for i in range(A, B+1):\n        if i not in curtains:\n            answer += i\n    print(answer)\n    return str(answer)",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 4216,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(max(max(map(lambda x: int(x), str(N)))*int(x[2]) for x in sorted(map(lambda x: list(map(lambda y: int(y), x[1:].split(','))), map(int, str(N))))))\n\"\"\"\n\nimport math\n\ndef",
        "test": "assert solution(",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 4217,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    K = M - 1\n    A = []\n    for _ in range(N):\n        A.append(list(map(int, stdin.split())))\n\n    answer = 0\n\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] == 1:\n                if i + 1 < N and A[i + 1][j] == 1:\n                    answer += 1\n                if i - 1 >= 0 and A[i - 1][j] == 1:\n                    answer += 1\n                if j + 1 < M and A[i][j + 1] == 1:\n                    answer += 1\n                if j - 1 >= 0 and A[i][j - 1] == 1:\n                    answer += 1\n\n    return str(answer)\n",
        "test": "assert solution(",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 4218,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 4:\n        return str(0)\n    p = (n+1) // 2\n    print(p)\n    if n % 2 == 0:\n        return str(1/p)\n    return str(1/p) + \".\"\n",
        "test": "assert solution(4) == '0.5'",
        "num_ids": 4347,
        "indeed": false
    },
    {
        "number": 4219,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A_1 = [int(i) for i in stdin.split()]\n    x_11 = [int(i) for i in stdin.split() if i!= \"x_11\"]\n    x_12 = [int(i) for i in stdin.split() if i!= \"x_12\"]\n    x_21 = [int(i) for i in stdin.split() if i!= \"x_21\"]\n    x_22 = [int(i) for i in stdin.split() if i!= \"x_22\"]\n    x_1A_1 = [int(i) for i in stdin.split() if i!= \"x_1A_1\"]\n    x_2A_2 = [int(i) for i in stdin.split() if i!= \"x_2A_2\"]\n    x_N = [int(i) for i in stdin.split() if i!= \"x_N\"]\n    A_2 = [int(i) for i in stdin.split() if i!= \"A_2\"]\n    x_NA_N = [int(i) for i in stdin.split() if i!= \"x_NA_N\"]\n    \n    result = 0\n    for i in A_1:\n        if i in x_1A_1 and x_1A_1.count(i) == 1:\n            result += 1\n    for i in x_11:\n        if i in A_2 and A_2.count(i) == 1:\n            result += 1\n    for i in A_2:\n        if i not in x_2A_2 and x_2A_2.count(i) == 1:\n            result += 1\n    for i in x_2A_2:\n        if i in x_1A_1:\n            result += 1\n        if x_2A_2.count(i) == 1:\n            result += 1\n    for i in x_N:\n        if i in A_2 and A_2.count(i) == 1:\n            result += 1\n        if x_N.count(i) == 1:\n            result += 1\n    \n    return str(result)\n",
        "test": "assert solution(stdin) == '2'",
        "num_ids": 5199,
        "indeed": false
    },
    {
        "number": 4220,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n  arr = stdin.split()\n  arr.sort(key=lambda x: x[0:1])\n  return ''.join(arr)\n\n>>>>>>> df8dd9c33e9c8d2590cff34bbfd7628f1a9da7eae:\n",
        "test": "assert solution(\"nikoandsol\" + \"sti\") == \"sti\"",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 4221,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    return 'apples'\n",
        "test": "assert solution('apple') == 'apples'",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 4222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    d_i = int(stdin.split(' ')[0])\n    N = int(stdin.split(' ')[1])\n    K = int(stdin.split(' ')[2])\n    snacks = list(map(int, stdin.split(' ')[3:]))\n    snacks = sorted(snacks, reverse=True)\n    answer = ''\n    count = 0\n    for i in range(1, d_i+1):\n        count += 1\n        for j in range(1, len(snacks)-1):\n            if snacks[j] < snacks[j-1]:\n                count = 1\n        if count == K:\n            answer += 'Snuke'+ str(i) +'has Snack'+ str(snacks[i-1])\n            snacks[i] = snacks[j]\n            snacks[j] = 0\n            count = 0\n    return answer",
        "test": "assert solution(1, 1, 1, 3, 2, 2, 3, 1) == \"1\"",
        "num_ids": 1748,
        "indeed": false
    },
    {
        "number": 4223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = list(stdin)\n    ans = 0\n    for i in range(N):\n        if S[i]!= S[i-1]:\n            ans += 2\n        if S[i-1] == S[i]:\n            pass\n        else:\n            ans += 1\n    return str(ans)",
        "test": "assert solution(stdin) == 5",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 4224,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = sorted([int(i) for i in stdin.split()])\n    prev = arr[0]\n    next = arr[1]\n    answer = 0\n    for i in range(n - 1):\n        answer = answer + prev * 2\n        if prev!= next:\n            answer = answer + (prev + next) * 3\n        prev = next\n        next = prev\n    return str(answer)\n\nTestcase 1:\nInput:\n4\n5 2 4\n5 5 2 4\n5 4 3 2\nOutput:\n3\nExplanation:\nFor every operation, the sequence is now {5, 5, 5}.\n\nTestcase 2:\nInput:\n3\n2 2 3\n3 1 4\nOutput:\n3\nExplanation:\nFor every operation, the sequence is now {2, 2, 2}.\n\nTestcase 3:\nInput:\n2\n5 2 4\n2 5 3 2\nOutput:\n1\nExplanation:\nFor every operation, the sequence is now {2, 2, 2}.\n\nTestcase 4:\nInput:\n4\n3 4 2 4\n6 1 4 5\n6 2 3 4\nOutput:\n7\nExplanation:\nFor every operation, the sequence is now {4, 4, 4, 4, 4, 4, 4}.\n'''\nfrom collections import Counter\n\nn,a,b = map(int,input().split())\narr = list(map(int,input().split()))\narr = sorted(arr)\ncnt = 0\nfor i in range(1,n+1):\n    if a in arr:\n        cnt += arr.count(a)\n    if b in arr:\n        cnt += arr.count(b)\n    if cnt == 0:\n        cnt = arr.count(a)\nprint(n-cnt)",
        "test": "assert solution(\"3 4\") == \"2\"",
        "num_ids": 1399,
        "indeed": false
    },
    {
        "number": 4225,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    sum = 0\n    for i in range(A + B + C + K):\n        if i < A:\n            sum += A\n        elif i < B:\n            sum += B\n        else:\n            sum += C\n    return str(sum)\n\ndef",
        "test": "assert solution(inp) == \"2\"",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 4226,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    # read the input from stdin\n    N, *data = list(map(int, stdin.split()))\n    if len(data)!= N:\n        return 'No'\n    cranes = [1, 2, 3]\n    turtles = [4, 5, 6]\n    \n    def is_valid(x, y):\n        return all(y - (y - x) % 3 == 0 and y % 3 == 0 for y in range(min(x, y), max(x, y)))\n    \n    def check(cr, turtle):\n        for i in range(cr):\n            if is_valid(cr, turtle - i):\n                return True\n        return False\n    \n    def get_crane(crane_index, y):\n        for i in range(cranes[crane_index]):\n            if check(crane_index, y + i):\n                return y + i\n    \n    def get_turtle(turtle_index, y):\n        for i in range(turtles[turtle_index]):\n            if check(turtle_index, y + i):\n                return y + i\n    \n    def get_combination(cr, turtle):\n        return min(cr, (cr-crango)//2 + 1) * (turtle-crango)\n    \n    for i in range(len(cr)):\n        if check(i, 1):\n            if check(cranges[i], 1):\n                return 'Yes'\n        elif check(i, 2):\n            if check(cranges[i], 2):\n                return 'Yes'\n        elif check(i, 3):\n            if check(cranges[i], 3):\n                return 'Yes'\n    \n    for i in range(len(cr)):\n        crango = get_crane(i, 1)\n        turtle = get_turtle(i, 1)\n        crane_index = i // cranges[crango]\n        turtle_index = i - (crango-1) * cranges[crango]\n        \n        if check(crango, 1):\n            if check(cranges[crango], 1):\n                return 'Yes'\n        elif check(crango, 2):\n            if check(cranges[crango], 2):\n                return 'Yes'\n        elif check(crango, 3):\n            if check(cranges[crango], 3):\n                return 'Yes'\n    \n    return 'No'\n",
        "test": "assert solution(\"0 0 0 4 1 2\") == \"No\"",
        "num_ids": 1258,
        "indeed": false
    },
    {
        "number": 4227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = [[] for i in range(n)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        g[a].append(b)\n    \n    answer = 0\n    visited = []\n    for i in range(n):\n        if i not in visited:\n            visited.append(i)\n            \n            s, visited = dfs(g, n, i, 0, visited, visited)\n            answer += s\n\n    return answer\n\ndef",
        "test": "assert solution(1, 2, 1, 1) == \"3\"",
        "num_ids": 1299,
        "indeed": false
    },
    {
        "number": 4228,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    apple = [int(num) for num in stdin.split()]\n    n = apple[0]\n    L = apple[1]\n    result = []\n    for apple_count in range(2, L):\n        result.append(apple[-1] - apple_count)\n    print(min(result))\n\n-----Constraints-----\n - 2 \\leq N \\leq 200\n - -100 \\leq L \\leq 100\n - 0 \\leq apple_count < 10^6\n - -10^6 \\leq apple_count <= L\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN L\n\n-----Output-----\nFind the optimal choice.\n\n-----Sample Input-----\n5 2\n\n-----Sample Output-----\n3\n\nthe flavors of Apple 1, 2, 3, 4, and 5 are 2, 3, 4, 5, and 6, respectively. The optimal choice is to eat Apple 1, so the answer is 3+4+5+6=3.\n\n-----Constraints-----\n - 2 \\leq N \\leq 200\n - -100 \\leq L \\leq 100\n - 0 \\leq apple_count < 10^6\n - -10^6 \\leq apple_count <= L\n\n-----Time complexity-----\nO(n*2^n)\nO(n)\n\nO(n)\nO(n)\nO(1)\n\nO(n)\nO(1)\n\nO(1)\nO(1)\n\nO(1)\nO(1)\nO(1)\n\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\n",
        "test": "assert solution(input) == 18",
        "num_ids": 4443,
        "indeed": false
    },
    {
        "number": 4229,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N%3==0 and N%5==0:\n        return str(int(N/3)+int(N%3))\n    elif N%3==0:\n        return str(int(N/3))+\"Fizz\"\n    elif N%5==0:\n        return str(int(N/5))+\"Buzz\"\n    else:\n        return str(int(N))\n",
        "test": "assert solution(\"0\") == \"0\"",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 4230,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    print(arr[-1] - arr[0] + 1)\n    return str(arr[-1] - arr[0] + 1)\n",
        "test": "assert solution(input()) == \"8\"",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 4231,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    H, W = list(map(int, stdin.split()))\n    for _ in range(H):\n        print(\"{} {}\".format(H, W))\n    return \"1\"\n\nprint(solution(\"3 2\"))\nprint(solution(\"2 1\"))",
        "test": "assert solution(\"3 2\") == \"1\"",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"-1\"\n    i = 1\n    while a <= b:\n        a = a * 10 + (i % 10)\n        i = i // 10\n    return a",
        "test": "assert solution(stdin) == \"-1\"",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    for stdin_line in stdin:\n        n, m = map(int, stdin_line.split(' '))\n        star_number = 1\n        for i in range(m):\n            star_number *= n\n        grid = [[0]*m for _ in range(n)]\n        for j in range(m):\n            for i in range(n):\n                if stdin_line[j] == '*':\n                    for k in range(i, i+m):\n                        grid[k][j] = star_number\n                    star_number = 0\n                elif stdin_line[j] == '.':\n                    for k in range(i, i+m):\n                        grid[k][j] = star_number\n                    star_number = 0\n        for k in range(n):\n            print(grid[k])\n        for j in range(m):\n            print(grid[j])\n",
        "test": "assert solution(input()) == \"-1\"",
        "num_ids": 3103,
        "indeed": false
    },
    {
        "number": 4234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = [stdin[i:i+n] for i in range(0, n, 2)]\n    return s[0]\n-----Constraints-----\n1 <= n <= 10^5\n1 <= s.length <= 2000\ns[i] is a lowercase Latin letter\ns[i]!= s[i+1]\n-----Time complexity-----\nO(n)\n\nO(n)\n",
        "test": "assert solution(input()) == 12",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 4235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    graph = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u][v] = 1\n        graph[v][u] = 1\n    \n    #check directedness\n    for i in range(n):\n        for j in range(n):\n            if graph[i][j] == 1:\n                graph[i][j] = 0\n            else:\n                graph[i][j] = 1\n    \n    #check edges\n    for i in range(n):\n        for j in range(n):\n            if graph[i][j] == 1:\n                for k in range(n):\n                    if graph[i][k] == 1:\n                        graph[i][k] = 0\n                    else:\n                        graph[i][k] = 1\n    \n    #diagonal edges\n    for i in range(n):\n        for j in range(n):\n            if graph[i][j] == 1:\n                if graph[i][i] == 1:\n                    graph[i][i] = 0\n                if graph[i][j] == 1:\n                    graph[i][j] = 0\n            else:\n                if graph[i][i] == 1:\n                    graph[i][j] = 1\n    \n    #check if directedness is valid\n    for i in range(n):\n        for j in range(n):\n            if graph[i][j] == 1:\n                for k in range(n):\n                    if graph[k][i] == 1:\n                        graph[k][i] = 0\n                    if graph[k][j] == 1:\n                        graph[k][j] = 0\n    \n    if graph[0][0] == 1:\n        return \"NO\"\n    else:\n        answer = ''\n        for i in range(n):\n            answer += '0'\n        for i in range(n):\n            answer += '1'\n        return answer\n    \n    \n    #print(graph)\n    \n    \n    \n    \n",
        "test": "assert solution(stdin) == 'NO'",
        "num_ids": 2087,
        "indeed": false
    },
    {
        "number": 4236,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    if n < m:\n        return '0'\n    if n == m:\n        return '0'\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j >= i:\n                if i == 1:\n                    print(j)\n                elif i == 2 or i == 3 or i == 4:\n                    print(j)\n                elif j >= i:\n                    print(j)\n                else:\n                    print(0)\n    return '0'\n\n-----Time complexity-----\nO(n) = 2^n.\n\nO(1) = 1.\n\nO(1) = 1.\n\nO(n) = 2^n.\n\nO(n) = 2^n.\n\nO(n) = 2^n.\n\nO(n) = 2^n.\n",
        "test": "assert solution(input()) == '2'",
        "num_ids": 2188,
        "indeed": false
    },
    {
        "number": 4237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(n) for n in stdin.split()]\n    i = 0\n    while i < len(numbers):\n        if numbers[i] % numbers[i+1]!= 0:\n            j = i+1\n            while numbers[j] % numbers[j-1]!= 0:\n                j -= 1\n            if j == len(numbers)-1:\n                break\n        i += 1\n    print(j-i)\n    return \"and\".join(str(j-i) for j in range(i, len(numbers), 2))",
        "test": "assert solution([\"4\", \"3\", \"7\"]) == \"1\"",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 4238,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 9 == 0:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"817\") == \"No\"",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 4239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    lst = []\n    for _ in range(N):\n        lst.append(int(stdin))\n    print(sum(lst) - sum(lst[1:]))\n\n\nExplanation\n\nO(N)\n\nOutput:\n4\n\nSince we only need to do 4 operations, we can have 4^2(=36) + 4^3(=216) +... + N^2(=N^2) = 127\n\nOutput:\nTotal: 7\n\nExample 2:\n\nInput:\nN = 7\n\nOutput:\n1\n\nExplanation:\nWe can withdraw 7 yen, this is not the case.\n\n----Constraints----\n - 1 \\leq N \\leq 100000\n - N is an integer.\n\n----Time Limit----\n1 second\n\n----Memory Limit----\n 256 MB\n\n----Input Format----\nFirst line contains an integer, the number of operations.\nNext  lines contains N  separated by a space.\n\n----Output Format----\nPrint the total sum of all the operations you can get with the given input.\n\nSample Input-1:\n3\n5\n2\n3\nSample Output-1:\n9\n\nSample Input-2:\n2\n1\n3\nSample Output-2:\n1\n\nExplanation:\nSince you have three operations, we have to print the sum of all the operations (including the operations without the operations without any change).\nSo you can get the answer to the question.\n\"\"\"\n\nclass Solution:\n    def solve(self, N, k):\n        sum_k = 0\n        for i in range(1,N+1):\n            if i % 2 == 0:\n                sum_k += i\n            else:\n                sum_k -= i\n        if sum_k == 0:\n            return 1\n        else:\n            return (sum_k - k)\n            \n",
        "test": "assert solution(\"100000\") == \"0\"",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 4240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.strip()\n    B = stdin.strip().split()\n    l = len(A)\n    for i in range(l):\n        if A[i] == B[i]:\n            return A[i+1:] + A[:i] + B[i+1:]\n    return A + B[:l] + A[l:]\n\nprint(solution(\"kyoto\"))",
        "test": "assert solution(input()) == \"Yes\"",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 4241,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    # Create a variable with an integer 0\n    res = 0\n    # Create a dictionary of characters to count and their\n    # corresponding lengths\n    count = {}\n    # For each character in s\n    for i in s:\n        # if the character is not in the dictionary\n        if i not in count:\n            # add the length of the character to the dictionary\n            count[i] = 1\n        # if the character is in the dictionary\n        else:\n            # subtract the length from the dictionary\n            # for every other character\n            count[i] -= 1\n        # if the length is less than 1\n        if count[i] < 0:\n            # delete it\n            count.pop(i)\n            # increase the counter\n            count[i] = 1\n        res += 1\n    # if there are no characters left in the dictionary\n    if len(count) == 0:\n        # if there are no characters left in the dictionary\n        return res\n    # if there are characters left in the dictionary\n    # print the length of the least number of characters that need to be changed\n    return res + count.get(min(count), 0)\n\nExplanation\nThe minimum number of characters that need to be changed is s.\nSince the dictionary contains at most one character that is not in the list\nof the characters in s, it means the dictionary contains the character\nc that is not in the list of characters in s, so the corresponding\nlength of the dictionary will be 1 - the least number of characters\nneeded to change the dictionary.\n\nThe minimum number of characters that need to be changed is s[0] - s[-1].\nSince the dictionary contains at least one character that is not in the list\nof the characters in s, it means the dictionary contains the character\nc that is not in the list of characters in s, so the corresponding\nlength of the dictionary will be 2 - the least number of characters\nneeded to change the dictionary.\n\nIn this case, s[0] - s[-1] is the smallest number of characters needed\nto change the dictionary.\n\nIn the example below, the smallest number of characters needed\nto change the dictionary is 1 and there is 1 character in the dictionary.\n\nBecause the dictionary contains two characters c and t, we can\nuse 1 as the dictionary key.\nThe smallest number of characters that need to be changed\nis s[1] - s[2].\nSo the smallest number of characters needed to change the dictionary\nis s[0] - s[2].\nSince the dictionary contains at least one character that is not in\nthe list of the characters in s, we can use the dictionary key c as\nthe dictionary key.\nSince the dictionary contains two characters c and t, we can use the\ndictionary key t as the dictionary key.\n\n\"\"\"\n\ndef",
        "test": "assert solution('abcabc') == 1",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 4242,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    N = A + B\n    if N % K!= 0:\n        return 'No'\n    answer = max(A, B)\n    answer = N // answer\n    return str(answer)\n    \n\"\"\"\n\ndef",
        "test": "assert solution(['1', '2', '3', '4']) == '1'",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 4243,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    coins = ['500-yen', '100-yen', '50-yen', '10-yen', '5-yen', '1-yen']\n    money = [500, 100, 50, 10, 5, 1]\n    ans = -1\n    for i in range(len(coins)):\n        j = 0\n        while j < len(money):\n            if X >= money[j]:\n                j += 1\n                ans = max(ans, money[j] - coins[i].count(coins[j]))\n            elif X >= money[j]:\n                j = 0\n                while j < len(coins):\n                    if coins[j] == coins[j + 1]:\n                        j += 1\n                        j -= 1\n                        break\n                    j += 1\n    return str(ans)\n\n-------------------------------------------------------------------------------------------------------------------------------------\n\ndef",
        "test": "assert solution(stdin) == '2020'",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 4244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    def process(stamina):\n        if stamina < 0:\n            return 0\n        elif stamina >= 1:\n            return 1 + process(stamina - 1)\n        else:\n            return 1 + process(stamina // 2)\n\n    for _ in range(int(stdin.strip())):\n        N, X = list(map(int, stdin.strip().split()))\n        print(process(N))\n    return 'error'\n\nRuntime: 68 ms, faster than 52.41% of Python3 online submissions for Minimum Total Stamina to Wait.\nMemory Usage: 16.8 MB, less than 88.78% of Python3 online submissions for Minimum Total Stamina to Wait.\n\"\"\"\n\nclass Solution:\n    def solution(self, N, X):\n        return int(math.sqrt(2 * N) * (X ** 2 - N))\n\nsolution(N,X)",
        "test": "assert solution('4 5') == '6'",
        "num_ids": 2367,
        "indeed": false
    },
    {
        "number": 4245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    powers = []\n    for line in stdin:\n        arr = line.split()\n        power = 0\n        for ele in arr:\n            if ele.isdigit():\n                power += int(ele)\n        powers.append(power)\n    \n    for i in powers:\n        powers.remove(i)\n    \n    if len(powers) == 1:\n        return str(1)\n    \n    if len(powers) == 0:\n        return \"0\"\n    \n    return str(min(powers))",
        "test": "assert solution(\"2 1 0 1 1 2 3 4\") == \"0\"",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 4246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(3):\n        s, t, r = stdin.split(\"\\n\")[i]\n        print(\"\")\n        print(\"*****Day{}*****\".format(i+1))\n        print(\"{} = {}\".format(s, solve(s, \"S\", i)))\n        print(\"{} = {}\".format(t, solve(t, \"T\", i)))\n        print(\"{} = {}\".format(r, solve(r, \"R\", i)))\n        print(\"\")\n    return \"1\"\n\n-----Sample Input-----\nCSS\nCSR\n\n-----Sample Output-----\n2\n\n - For the first day, it was forecast to be cloudy, and it was indeed cloudy.\n - For the second day, it was forecast to be sunny, and it was indeed sunny.\n - For the third day, it was forecast to be sunny, but it was rainy.\nThus, the forecast was correct for two days in this case.\ndef",
        "test": "assert solution(\"SSCCS\") == 2",
        "num_ids": 2468,
        "indeed": false
    },
    {
        "number": 4247,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(list(set(map(int, stdin.split())))) - 2)\n",
        "test": "assert solution(\"2 4 1 5 3 6\"), \"1 2\"",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(float, stdin.split(' ')))\n    x.sort(key=lambda x: (x[0], x[1]))\n    x_dict = {}\n    for i in range(n):\n        x_dict[x[i][0]] = x[i][1]\n    return '{:.6f}'.format(x_dict.get(min(x_dict), 0))\n\"\"\"\n\n\ndef",
        "test": "assert solution(input()) == '5.620'",
        "num_ids": 3593,
        "indeed": false
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    answer = 0\n    for i in range(1, m + 1):\n        answer += a[i - 1]\n    for i in range(1, n + 1):\n        answer += k[i - 1]\n    if answer < 0:\n        return -1\n    else:\n        return answer\n\ndef",
        "test": "assert solution(4) == 4",
        "num_ids": 1202,
        "indeed": false
    },
    {
        "number": 4250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = [int(i) for i in stdin.split()]\n    return list(map(lambda x: max(x, x + k), [s[i] for i in range(n)]))\n    \n'''\n",
        "test": "assert solution(input()) == \"1\"",
        "num_ids": 2253,
        "indeed": false
    },
    {
        "number": 4251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            for k in range(1, m + 1):\n                if a[i][j]!= a[i][k - 1] or a[i][j]!= a[n - 1][k - 1]:\n                    k = 0\n                    break\n        if k!= 0:\n            break\n    print(k)\n    return '0'\n",
        "test": "assert solution('3'), 0",
        "num_ids": 1493,
        "indeed": false
    },
    {
        "number": 4252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    def getMinChar(a: str, b: str, c: str) -> int:\n        if not a:\n            return 0\n        if not b:\n            return 1\n        if not c:\n            return 2\n        if a[0] == c[0]:\n            return min(getMinChar(a[1:], b, c), getMinChar(a, c, b))\n        return min(getMinChar(a, b, c), getMinChar(a, c, b))\n\n    answer = getMinChar(stdin[0], stdin[1], stdin[2])\n    return answer if answer!= 0 else 0\n-----Other Solutions-----\nInput\n6\nxxxiii\n\nOutput\n1\n\nInput\n5\nxxoxx\n\nOutput\n0\n\nInput\n10\nxxxxxxxxxx\n\nOutput\n8\n\n\n-----Other Solutions-----\nInput\n6\nxxxxxxxxxx\n\nOutput\n1\n\nInput\n5\nxxoxx\n\nOutput\n1\n\n\"\"\"\n\nimport unittest\nfrom itertools import combinations\nfrom collections import Counter\n\n\ndef",
        "test": "assert solution(stdin), \"No solution\"",
        "num_ids": 1105,
        "indeed": false
    },
    {
        "number": 4253,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0 or n == 1:\n        return 0\n    a = round(3 ** (n / 2))\n    c = a ** 2 * (4 ** (n - 1)) / 6\n    print(round(c))\n    return str(round(c))\n",
        "test": "assert solution('0') == 0",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 4254,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    return \"unsafe\" if len(stdin) % 2 == 1 else \"safe\"",
        "test": "assert solution('10 20'), 'unsafe'",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 4255,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    a, b, c = abs(a), abs(b), abs(c)\n    if a*c == b*c:\n        area = a*b\n        return str(area)\n    elif b*c == a*c:\n        area = b*c\n        return str(area)\n    else:\n        area = a*b*c\n        return str(area)\n\n\nprint(solution(\"4 5 3\"))\nprint(solution(\"4 3 5\"))\n",
        "test": "assert solution(\"1 2 3\") == \"6\"",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 4256,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    cnt = (A * B) + (C * D)\n    return str(cnt // 100)\n\n\nprint(solution(\"2 11 4\"))\n",
        "test": "assert solution(stdin) == 4, 'incorrect'",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 4257,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a*b)\n",
        "test": "assert solution(\"1 2\") == \"2\"",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 4258,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def to_min(a: int, b: int, t: int) -> str:\n        if t < 0:\n            return 'You have run out of time! '\n        elif t == 0:\n            return 'You have been auto-operated for all but'+ str(a) +'seconds!'\n        elif a == 0 and b == 0:\n            return 'You have been auto-operated for all but'+ str(b) +'seconds!'\n        else:\n            return str(a * b / t) +'minutes'\n    \n    def to_max(a: int, b: int, t: int) -> str:\n        if t < 0:\n            return 'You have run out of time! '\n        elif t == 0:\n            return 'You have been auto-operated for all but'+ str(a) +'seconds!'\n        elif a == 0 and b == 0:\n            return 'You have been auto-operated for all but'+ str(b) +'seconds!'\n        else:\n            return str(a * b / t) +'minutes'\n    \n    n = int(stdin.strip())\n    A = n % 60\n    B = (n % 10)\n    T = n % 60\n    print(to_min(A, B, T), end='')\n    print(to_max(A, B, T), end='')\n    return ''",
        "test": "assert solution(\"A 3 5 7\") == 10",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 4259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    \n    if K == 1:\n        if A < B:\n            return \"OK\"\n        else:\n            return \"NG\"\n    \n    if A % K == 0:\n        if B < A:\n            return \"OK\"\n        else:\n            return \"NG\"\n    \n    if A % K!= 0:\n        return \"NG\"\n\n-----Sample Output-----\nOK\n\nSample I/O:\nInput:\n5\n500 600\n\nSample Output:\nNO\n-----Sample Input-----\n7\n500 600\n\n-----Sample Output-----\nNO\n\nConstraints:\n1 <= K <= 10^6\n1 <= A, B <= 10^6\n\n-----Tests-----\nTest 1:\nInput:\n1\n5\n500 600\n\nOutput:\nOK\n\nTest 2:\nInput:\n2\n3\n500 600\n\nOutput:\nOK\n\nTest 3:\nInput:\n1\n5\n200 500\n\nOutput:\nNG\n\nTest 4:\nInput:\n2\n3\n500 600\n\nOutput:\nNG\n\nTest 5:\nInput:\n1\n3\n1000 600\n\nOutput:\nOK\n\n-----Sample Input-----\n6\n200 1000\n\n-----Sample Output-----\nOK\n'''",
        "test": "assert solution(\"1234\") == \"OK\"",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 4260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    \n    hours = int(input())\n    X = int(input())\n    \n    if hours <= 0 or X <= 0:\n        return \"Invalid\"\n    \n    left, right = 0, hours\n    \n    while (left < right):\n        middle = (left + right) // 2\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"Invalid\"\n        if solution(stdin) == \"Invalid\":\n            return \"",
        "test": "assert solution(stdin) == \"2.6666666667\"",
        "num_ids": 2282,
        "indeed": false
    },
    {
        "number": 4261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n  n, a, b, c = list(map(int, stdin.split()))\n  if n == 1:\n    return str(a*b)\n  else:\n    return str(a*(c/b))\n\nSolution\n\ndef",
        "test": "assert solution(cc), 'cc'",
        "num_ids": 845,
        "indeed": false
    },
    {
        "number": 4262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    def is_palindrome(x):\n        return x == int(str(x)[::-1])\n    def verify(x):\n        if int(str(x)[::-1]) * q == x:\n            return True\n        else:\n            return False\n    permutations = sorted(list(set([i for i in range(p * q)])))\n    for i in range(p):\n        for j in range(q):\n            if is_palindrome(permutations[i] + permutations[j]):\n                print(permutations[i] + permutations[j])\n                return\n    print(0)\n    return\n    \n   \n\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n6 1 5 4 2 4 4 8 9 2\n\n4\n6 1 3 4 5\n\"\"\"\n",
        "test": "assert solution(",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 4263,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    def longest_acgt_string(str):\n        l = len(str)\n        substrings = []\n        for i in range(1, l):\n            substrings.append(str[i-1])\n            substrings.append(str[i])\n        substrings.sort()\n        return \"\".join(substrings)\n    return max(map(longest_acgt_string, input()))\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == 3, \"The length of the longest ACGT string is 3\"",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 4264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    return str(len([int(s) for s in str.split() if len(s) % 2!= 0]))\n\"\"\"\nclass Solution:\n    def odd_num(self,num):\n        l = []\n        for i in str(num):\n            l.append(i)\n        return len(l)\n    def solution(self,num):\n        return str(len([int(s) for s in str.split() if len(s) % 2!= 0]))",
        "test": "assert solution(stdin) == 9",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 4265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n   n, m = map(int, stdin.split())\n   lst = list(map(int, stdin.split()))\n   for i in range(len(lst)):\n       if i % 2 == 0:\n           lst[i] = lst[i] * 3\n       else:\n           lst[i] = lst[i] * 2\n   for i in lst:\n       print(i, end=\"\")\n   print()",
        "test": "assert solution(stdin) == '5'",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 4266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    coordinates = [list(map(int, stdin.split())) for _ in range(n)]\n    painted = set()\n\n    def valid(coord):\n        for i in range(n):\n            for j in range(n):\n                if coordinates[i][j] == 0:\n                    if i < k and j < k:\n                        if coordinates[i][j] > 0:\n                            painted.add((i, j))\n                    elif coordinates[i][j] > 0:\n                        painted.add((i, j))\n                elif j < k:\n                    if coordinates[i][j] > 0:\n                        painted.add((i, j))\n        return all(coord in painted)\n\n    def get_coord(x, k):\n        for i in range(k):\n            if x + i < n:\n                yield x + i, x + i\n            else:\n                yield x + i, 0\n\n    coordinates = sorted(get_coord(x, k), key=lambda x: x[0])\n    painted = sorted(painted, key=lambda x: x[0])\n\n    def remove_redundant(coord):\n        redundant = [x for x in painted if x[0]!= coord[0]]\n        if len(redundant) == 0:\n            return True\n        coord = (coord[0], coord[1])\n        for i in range(k - 1):\n            if coord[0] - i in redundant:\n                redundant.remove((coord[0] - i, coord[1]))\n            if coord[0] + i in redundant:\n                redundant.remove((coord[0] + i, coord[1]))\n        return len(redundant) == 0\n    return '\\n'.join(list(map(str, coordinates))) if valid(coordinates[0]) else '\\n'.join(\n        [coordinates[0][0], x, '\\n'.join([str(e) for e in coordinates[0][1:]]), '\\n'.join(\n            [str(e) for e in painted if remove_redundant(coordinates[0])])])\n",
        "test": "assert solution(\"0 3 5\") == \"5 6 7 8 9\"",
        "num_ids": 1516,
        "indeed": false
    },
    {
        "number": 4267,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\"\n",
        "test": "assert solution(\"25\") == \"No\"",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 4268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    X = map(int, stdin.split())\n    ans = 0\n    for i in range(1, N):\n        for j in range(i, N):\n            if D - abs(X[i] - X[j]) in range(0, D):\n                ans += 1\n    return str(ans)\n\nn, d = map(int, input().split())\nprint(solution(input()))\n",
        "test": "assert solution(stdin) == '2'",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 4269,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    def get_key(str_: str) -> str:\n        return sum(int(i) for i in str_) % 9\n\n    if len(stdin) < 3:\n        return 'Bad'\n\n    if stdin[1]!= stdin[2]:\n        return 'Bad'\n\n    return get_key(stdin[0]) + get_key(stdin[1])\n",
        "test": "assert solution(3121) == 'Good'",
        "num_ids": 528,
        "indeed": false
    },
    {
        "number": 4270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, v = map(int, stdin.split(' '))\n    first = v * 2\n    second = first\n    ans = first\n    for i in range(N-2):\n        second *= 2\n        ans += second\n        second = first\n    return str(ans)\n\ndef",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 916,
        "indeed": false
    },
    {
        "number": 4271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D = map(int, stdin.split())\n    satisfaction = B + C + D\n    satisfaction = min(satisfaction, B + C + D)\n    return str(satisfaction)\n\nN, A, B, C, D = map(int, input().split())\nprint(solution(input()))\n",
        "test": "assert solution(\"5 4 3\") == \"11\"",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 4272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    letters = stdin[0].split(\" \")\n    return solution(letters[0]+\"\".join(letters[1:])+\"\".join(letters[2:]))\n\"\"\"\n\ndef",
        "test": "assert solution(\"ABCB\") == 4",
        "num_ids": 938,
        "indeed": false
    },
    {
        "number": 4273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  ans = 0\n\n  # binary search\n  def binary_search(n):\n    if n == 1:\n      return 0\n    if n == 2:\n      return 1\n    mid = (n//2) + 1\n    left = binary_search(mid)\n    right = binary_search(n-mid)\n    return (left + right)\n\n  # sum of x, y, z to find the answer\n  def sums(x, y, z):\n    if x == 0 and y == 0 and z == 0:\n      return 0\n    elif x == 0 or y == 0 or z == 0:\n      return -1\n    else:\n      return sums(x-1, y, z) + sums(x, y-1, z) + sums(x, y, z-1)\n\n  # find the answer\n  def find_answer(ans):\n    if ans == 0:\n      return 1\n    if ans == 1:\n      return 2\n    for i in range(1, n):\n      if sums(i, 1, 1) > 0:\n        ans = ans * find_answer(sums(i, 1, 1))\n    return ans\n\n  return str(find_answer(binary_search(n)))\n\"\"\"\n\n\ndef",
        "test": "assert solution(stdin) == 3",
        "num_ids": 2813,
        "indeed": false
    },
    {
        "number": 4274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----Algorithm-----\n* Take the test cases from stdin and compare them to the expected answer.\n* Use the program to calculate the AC of the test cases and print the result.\n\"\"\"\n\nN, M = map(int, input().split())\ndata = [input().split() for _ in range(N)]\n\ndef",
        "test": "assert solution(input) == \"Yes\"",
        "num_ids": 2316,
        "indeed": false
    },
    {
        "number": 4275,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a = [False] * 6\n    a[3] = True\n    a[4] = True\n    a[5] = True\n    b = [False] * 6\n    b[3] = True\n    b[4] = True\n    b[5] = True\n    return \"Yes\" if all(a) and b else \"No\"\n",
        "test": "assert solution(\"tist\") == \"No\"",
        "num_ids": 2520,
        "indeed": false
    },
    {
        "number": 4276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"2 4 10\") == \"3\"",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 4277,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return f\"{a * n + b * (n-a) * 2}\".replace(str(a), str(n)).replace(str(b), str(n-a-b))\n",
        "test": "assert solution(\"4 2 9\"), \"4 2 9\"",
        "num_ids": 2552,
        "indeed": false
    },
    {
        "number": 4278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    N,s_1,s_2,s_3=map(int,stdin.split())\n    s_1=list(s_1)\n    s_2=list(s_2)\n    s_3=list(s_3)\n    for i in range(N):\n        if s_1[i]!=s_2[i] or s_2[i]!=s_3[i] or s_3[i]!=s_1[i]:\n            return 'ERROR'\n    return str(len(set(s_1).intersection(set(s_2))).count(1))",
        "test": "assert solution('constraint') == '1'",
        "num_ids": 1488,
        "indeed": false
    },
    {
        "number": 4279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2 or n == 3:\n            return True\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    q = int(stdin.strip().split(\"\\n\")[0])\n    for i in range(q):\n        st = stdin.strip().split(\"\\n\")[i + 1].split()\n        k = int(st[0])\n        n = int(st[1])\n        for j in range(k, n + 1):\n            if is_prime(j):\n                print(j)",
        "test": "assert solution(stdin) == \"8\"",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 4280,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    g = []\n    for i in range(n):\n        l = list(map(int, stdin.split()))\n        for j in range(k):\n            g.append(l[j])\n    m = g[0]\n    for i in range(1,n):\n        m = max(m, g[i])\n    g.pop(0)\n    for i in range(n):\n        g[i] = max(g[i], m)\n    for i in range(n-1):\n        for j in range(k):\n            g[i+1] = max(g[i+1], g[i] + g[j])\n    return max(g)\n",
        "test": "assert solution(\"1 2\") == 2, \"Incorrect answer\"",
        "num_ids": 2091,
        "indeed": false
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # read the stdin\n    n, *coords = list(map(int, stdin))\n    # sort the list in place\n    coords.sort()\n    # generate a list of the available moves\n    x = [1]\n    for i in range(1, len(coords)):\n        x.append(x[i-1] + coords[i])\n        x[i] = x[i-1]\n    # print(x)\n    # the number of occupied houses\n    # print(len(x))\n    # generate the occupied houses\n    oc = [1]\n    for i in range(1, len(x)):\n        oc.append(oc[i-1] + x[i])\n        oc[i] = oc[i-1]\n    # print(oc)\n    # the minimum number of occupied houses\n    # print(min(oc))\n    # the maximum number of occupied houses\n    # print(max(oc))\n    return '\\n'.join(map(str, x))\n",
        "test": "assert solution(\"7\\n1 1 8 8 8 4 4 4 4\") == \"3 6\"",
        "num_ids": 1370,
        "indeed": false
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.strip())\n    a_list = list(map(int, stdin.split()))\n    a_list.sort()\n    p_list = []\n    for i in range(0, len(a_list) - 1, 2):\n        p_list.append([a_list[i], a_list[i + 1]])\n    p_list.sort()\n    for i in range(len(p_list)):\n        if p_list[i][0] < p_list[i][1]:\n            p_list[i][0], p_list[i][1] = p_list[i][1], p_list[i][0]\n    if len(p_list) == 1:\n        return \"\".join(map(str, p_list[0][0]))\n    else:\n        return \"\".join(map(str, p_list[-1][0]))\n        ",
        "test": "assert solution(stdin) == \"3 1 2 3 4\"",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 4283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    skills = [int(stdin.strip()) for stdin in stdin.split()]\n    \n    # print(skills)\n    answer = 0\n    if len(skills) <= 1:\n        answer = 1\n    else:\n        for i in range(len(skills)-1):\n            for j in range(i+1, len(skills)):\n                if skills[i] == skills[j]:\n                    answer += 1\n    \n    return str(answer)\n\n-----Test-----\nInput\n6\n1 10 17 12 15 2\n\nOutput\n3\n\n-----Example-----\nInput\n6\n1 1000 10000 10 100 1000000000\n\nOutput\n1\n\n-----Explanation-----\n\nWhen taking all students in a team, you can only take at most 3 students. The result is that it is less possible to create a team with skills $[12, 17, 15]$.\n\nWhen taking at most 2 students, it is possible to take at most 3 students because there is only one student in a team.\n\nWhen taking at most 2 students, the result is that it is possible to create a team with skills $[12, 17, 15]$.\n\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= a_i < 10^9\n\"\"\"\n\nclass Solution:\n    def team_with_most_students(self, n: int, skills: List[int]) -> str:\n        count = {}\n        for i in range(n):\n            if skills[i] not in count:\n                count[skills[i]] = 1\n            else:\n                count[skills[i]] += 1\n        \n        group = {}\n        for i in count:\n            if i in group:\n                group[i].append(count[i])\n            else:\n                group[i] = [count[i]]\n        \n        lst = []\n        for i in group:\n            lst.extend(group[i])\n        \n        lst.sort(reverse=True)\n        \n        # print(lst)\n        \n        max_count = 0\n        for i in range(len(lst)):\n            if len(lst[i]) > max_count:\n                max_count = len(lst[i])\n                \n        return \",\".join([str(i+1) for i in range(max_count)])\n        \n        \n        \n",
        "test": "assert solution('2') == '2'",
        "num_ids": 3631,
        "indeed": false
    },
    {
        "number": 4284,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    charge, n, a = map(int, stdin.split())\n    battery = [1 for _ in range(n+1)]\n    battery[0] = 0\n    battery[1] = 0\n    \n    for i in range(2, n+1):\n        \n        if battery[i] >= a:\n            battery[i] = a\n            \n    if battery[-1] >= a:\n        battery[-1] = a\n    \n    for i in range(1, charge):\n        \n        for j in range(n):\n            \n            if battery[j+1] >= a:\n                \n                \n                if battery[j+2] >= a:\n                    battery[j+2] = a\n                else:\n                    battery[j+2] = battery[j+1] + (a - battery[j+1])\n            \n            if battery[j-1] >= a:\n                if battery[j-2] >= a:\n                    battery[j-2] = battery[j-1] + (a - battery[j-1])\n                else:\n                    battery[j-2] = battery[j-1] + (a - battery[j-1])\n        \n        for j in range(n-1, -1, -1):\n            \n            if battery[j] >= a:\n                battery[j] = a\n            \n            if battery[j+1] >= a:\n                battery[j+1] = a\n            \n            if battery[j-1] >= a:\n                battery[j-1] = a\n            \n    for i in range(charge):\n        \n        if battery[i] >= a:\n            return -1\n        \n    return battery[0]\n\nprint(solution(stdin))\n",
        "test": "assert solution(stdin) == '5'",
        "num_ids": 1403,
        "indeed": false
    },
    {
        "number": 4285,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    if n < 2:\n        return 0\n\n    visited = [False for i in range(n)]\n\n    def backtrack(i, j):\n        if i == n and j == n:\n            return 1\n\n        if visited[i] == True:\n            return 0\n\n        visited[i] = True\n        sub = s[i:j+1]\n\n        if sub == \"a\":\n            return backtrack(i+1, j+2) + backtrack(i+2, j+1)\n        elif sub == \"b\":\n            return backtrack(i+2, j+2)\n        elif sub == \"c\":\n            return backtrack(i+2, j+1)\n        else:\n            return 0\n\n    return str(backtrack(0, 0))\n",
        "test": "assert solution(\"aabca\") == \"0\"",
        "num_ids": 1833,
        "indeed": false
    },
    {
        "number": 4286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    s = set(map(sum, a))\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if a[i][j] == 0 or a[i][j] in s:\n                continue\n            for k in range(j, len(a[j])):\n                if a[i][k] == 0 or a[j][k] in s:\n                    continue\n                for l in range(k, len(a[k])):\n                    if a[j][l] == 0 or a[k][l] in s:\n                        continue\n                    a[i][j] += a[i][k] + a[j][l]\n    answer = list(map(int, str(a[-1][-1])))\n    return \"\".join(str(x) for x in sorted(answer))\n",
        "test": "assert solution(\"5 4 7\") == \"18\"",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    l = n\n    r = n\n    p = 0\n    while True:\n        if l == 0 and r == a:\n            return str(p)\n        else:\n            while l >= r:\n                if r == a:\n                    return str(p)\n                l = (l - 1) // 2\n                r = (r + 1) // 2\n                p += 1\n        l = (l + 1) // 2\n",
        "test": "assert solution(\"10 1 8\") == \"45\"",
        "num_ids": 1750,
        "indeed": false
    },
    {
        "number": 4288,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    return \"Yes\" if x == y and y!= z else \"No\"",
        "test": "assert solution(\"5 8 4 2 4 2\") == \"No\"",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 4289,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    N, T, H = list(map(int, stdin.split()))\n    print(N, T)\n    temp = [0] * N\n    print(temp)\n    for i in range(N):\n        a = [0] * T\n        print(a)\n        for j in range(T):\n            a[j] = int(stdin[i * T + j])\n            print(a[j])\n        temp[i] = a.index(min(a))\n    print(temp)\n    print(max(temp), min(temp))\n    return str(temp.index(max(temp)))",
        "test": "assert solution(stdin) == \"4\"",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 4290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = [i for i in range(1, n+1)]\n    y = [i for i in range(1, m+1)]\n    ans = 0\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            ans += sum(x[i:j+1])\n    for i in range(len(y)):\n        for j in range(i+1, len(y)):\n            ans += sum(y[i:j+1])\n    return str(ans)\n\n-----Constraints-----\n - 2 \\leq N,M \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n2 1\n\n-----Sample Output-----\n1\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is odd;\n - If we choose the two balls with 1 and 4, the sum is odd;\n - If we choose the two balls with 2 and 4, the sum is even.\nThus, the answer is 1.\ndef",
        "test": "assert solution(input()) == \"4\"",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 4291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    L = [int(i) for i in stdin.split()]\n    R = [int(i) for i in stdin.split()]\n    for i in range(q):\n        L, R = R, L\n    count = 0\n    for i in range(q):\n        if L[i] == R[i]:\n            count += 1\n        else:\n            count = 0\n    print(count)\nsolution(input())\n",
        "test": "assert solution(\"ACACTACG\") == 2",
        "num_ids": 2420,
        "indeed": false
    },
    {
        "number": 4292,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n  N, K = map(int, stdin.split())\n  dp = [[0 for _ in range(K+1)] for _ in range(N+1)]\n  \n  for i in range(1, N+1):\n    for j in range(1, K+1):\n      if j < (K/2):\n        dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + (j/2)\n      else:\n        dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n  \n  return str(dp[-1][-1])\n",
        "test": "assert solution(\"3 4\"), \"3 4\"",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 4293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for pq in stdin:\n        result += int(pq)\n    return str(result)\n\ndef",
        "test": "assert solution(input) == 7",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 4294,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    for num, sign in enumerate(reversed(stdin)):\n        if sign == 'A' and num % 2 == 0:\n            return '0'\n        if sign == 'A' and num % 2 == 1:\n            return '10'\n    return '0'\n\ndef",
        "test": "assert solution(5) == 0",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 4295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(abs(n-k)+1)\n-----Success\nSAMPLE INPUT\n7 4\n\n5 4\n5 5\n2 2\n1 1\nSample Output\n3\nExplanation\nAOII can do the operation with the following one operation:\nreplace x with abs(x-4)+1\nreplace x with abs(x-2)+1\nreplace x with abs(x-1)+1\nAOII can do the operation with the following two operations:\nreplace x with abs(x-2)+1\nreplace x with abs(x-1)+1\n\nexplanation\nAOII can do the operation with the following two operations:\nreplace x with abs(x-2)+1\nreplace x with abs(x-1)+1\n\nExplanation\nAOII can do the operation with the following two operations:\nreplace x with abs(x-2)+1\nreplace x with abs(x-1)+1\n\nexplanation\nAOII can do the operation with the following two operations:\nreplace x with abs(x-2)+1\nreplace x with abs(x-1)+1\n\nsolution\nO(N)\n\n'''\n\nclass Solution:\n    def minOperations(self, n: int, k: int) -> int:\n        n, k = map(int, input().split())\n        \n        num = 0\n        if k == 0:\n            return num\n        \n        for i in range(0, n):\n            if num < k:\n                num += (k - (n - i))\n                num += n\n            else:\n                num = (k - (n - i))\n                num += (n - i)\n                \n        return num",
        "test": "assert solution(\"5\") == 2",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 4296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1+A_2+A_3 > 21:\n        return \"win\"\n    else:\n        return \"bust\"\n\ndef",
        "test": "assert solution(5,7,9) == \"win\"",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 4297,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    for i in range(2, N+1):\n        if N % i == 0:\n            return str(i)\n    return str(N)\n    \n",
        "test": "assert solution(67) == \"36\"",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 4298,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    tree = [0]*N\n    inspectors = [1]*N\n    for i in range(1, N+1):\n        tree[i] = i - 1\n    for i in range(D, N+1):\n        tree[i] = i + 1\n        inspectors[i] = 1\n    print(min(tree, key = lambda i:tree[i]))\n    print(min(inspectors, key= lambda i:tree[i]))\n    \n",
        "test": "assert solution(1,2) == 1",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 4299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"pon\"\n    elif n == 1:\n        return \"bon\"\n    elif n == 2:\n        return \"hon\"\n    elif n == 3:\n        return \"\u672c\"\n    elif n == 4:\n        return \"\u672c\"\n    elif n == 5:\n        return \"\u672c\"\n    elif n == 6:\n        return \"\u672c\"\n    elif n == 7:\n        return \"\u672c\"\n    elif n == 8:\n        return \"\u672c\"\n    elif n == 9:\n        return \"\u672c\"\n    else:\n        return \"\u672c\"\n\"\"\"\ndef",
        "test": "assert solution(\"100\") == \"pon\"",
        "num_ids": 2909,
        "indeed": false
    },
    {
        "number": 4300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, d_1, d_2, d_3 = map(int, stdin.split())\n    N = n - 1\n    d_list = [0] * N\n    d_list[0], d_list[1] = d_1, d_2\n    for i in range(2, N):\n        d_list[i] = d_list[i - 1] + d_2 * 2\n        d_list[i - 1] = d_list[i - 2] + d_3\n    d_list = sorted(d_list)\n    print(sum(d_list[0:N:2]))",
        "test": "assert solution(5,2), \"No\"",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 4301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    max_value = max(A)\n    for i in range(n):\n        if A[i]!= max_value:\n            A[i] = max_value\n    answer = ''\n    for i in range(n):\n        answer += str(A[i])\n    return answer\n\ndef",
        "test": "assert solution(\"4\") == 4",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 4302,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    A=list(map(int,stdin.split()))\n    B=list(map(int,stdin.split()))\n    A.sort()\n    B.sort(reverse=True)\n    if len(A)<len(B):\n        n-=1\n    elif len(B)<len(A):\n        n-=1\n    else:\n        n-=2\n    l=0\n    r=len(A)\n    while r-l > 1:\n        m=l+r//2\n        a=sum(A[:m])\n        b=sum(B[:m])\n        if a<=k:\n            l=m\n        else:\n            r=m\n    answer=l+n-r\n    return str(answer)\n",
        "test": "assert solution(\"2 4\") == \"9\"",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 4303,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x_sorted = sorted(map(int, stdin.split()))\n    minimum = 0\n    for x in x_sorted:\n        if x == -10:\n            minimum = minimum + 1\n        elif x == 10:\n            minimum = minimum + 2\n        elif x < 0:\n            minimum = minimum + 3\n        else:\n            minimum = minimum + 1\n    return str(minimum)",
        "test": "assert solution(\"5 3 9\") == \"0\"",
        "num_ids": 3246,
        "indeed": false
    },
    {
        "number": 4304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,stdin.split(\" \"))\n    if a==b:\n        print(2)\n    else:\n        print(a-b)\n\n-----Sample Output-----\n2\n",
        "test": "assert solution(input) == \"2\"",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 4305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    A, H = map(int, stdin.split())\n    print(A, H)\n    return str(A * H)",
        "test": "assert solution(\"10 12\") == \"3\"",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 4306,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    time_window = 0\n    \n    for i in range(A, B):\n        for j in range(C, D):\n            if i == j:\n                time_window += 1\n            if i < j:\n                break\n    \n    return str(time_window)\n",
        "test": "assert solution(\"0 75 25 100\") == \"50\"",
        "num_ids": 2521,
        "indeed": false
    },
    {
        "number": 4307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n  def count(n: int) -> int:\n    if n == 1:\n      return 1\n    res = 0\n    for i in range(1, n):\n      if n % i == 0:\n        res += (n // i)\n    return res if n % 2 == 0 else n // 2\n  N = int(input())\n  if N <= 1:\n    return 1\n  elif N == 2:\n    return 2\n  else:\n    return count(N) + count(N) - count(N - 1)\n\nConstraints\n\n1 <= N <= 10^5\n\nInput Format\n\nThe first line contains an Integer, N, denoting the number of elements in the array.\nThe second line contains N integers, which represent the numbers in the array.\n\nConstraints\n\n1 <= N <= 10^4\n\nSample Output\n\n1\n\n2\n4\n5\n\nExplanation\n\nThere are:\n1\n3\n3\n4\n\nIn the first input, 1,2,4, and 4, we get the odd numbers and the numbers that has exactly eight divisors.\n\nWe also get the odd numbers and the numbers that has even number of divisors.\n\n1\n2\n\n4\n\n5\n\nExplanation\n\nIf N is 5, then the odd numbers and the even numbers that have exactly eight divisors will be:\n1\n3\n3\n4\n\nAnd the odd numbers and the odd numbers that have even number of divisors will be:\n1\n3\n\nAnd the odd numbers and the odd numbers that have even number of divisors will be:\n3\n\n'''",
        "test": "assert solution(21) == 3",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 4308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    answer = 0\n    for _ in range(N):\n        answer += (K-1)//2\n    return str(abs(answer))\n\ndef",
        "test": "assert solution(\"2 5\") == \"0\"",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 4309,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    ans = 0\n    for i in range(N+1):\n        for j in range(N):\n            if j % 10 == int(stdin[j]) % 10:\n                ans = i\n                break\n    return str(ans)\n",
        "test": "assert solution(\"111\") == \"111\"",
        "num_ids": 2318,
        "indeed": false
    },
    {
        "number": 4310,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    A_i = abs(A)\n    A_j = abs(C - A)\n    B_i = abs(B)\n    B_j = abs(C - B)\n    C_i = A_i + B_i + B_j - A_j\n    return str(min(C_i, C_i + A_j))\n\"\"\"\n\n\ndef",
        "test": "assert solution('1 4 1 3') == '5'",
        "num_ids": 2979,
        "indeed": false
    },
    {
        "number": 4311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = [i for i in range(1, len(a)+1)]\n    f = [i for i in range(len(b)) if i % 2 == 0]\n    # print(f)\n    def f(n):\n        return n/2 if n % 2 == 0 else n + 1\n    f.sort(key=f)\n    def a_index(n):\n        return (n % 2 == 0) if n % 2 == 1 else (n - 1) % 2\n    print(f.index(f.index(f[-1])))\n\ndef",
        "test": "assert solution(stdin) == '5'",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 4312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def get_attacks(name: str, strength: int) -> int:\n        if name == 'Takahashi':\n            return strength\n        elif name == 'Aoki':\n            return strength\n        else:\n            return 0\n\n    for _ in range(int(stdin)):\n        a, b, c, d = map(int, input().split())\n        if (a+b+c+d) <= 100:\n            if get_attacks(a, b) >= get_attacks(c, d):\n                return 'No'\n            elif get_attacks(a, c) >= get_attacks(b, d):\n                return 'No'\n            elif get_attacks(a, b) >= get_attacks(c, d):\n                return 'No'\n            else:\n                return 'Yes'\n    return 'Yes'\n\n\n\nimport sys\ninput = sys.stdin.readline\n\nN, A, B, C, D = map(int, input().split())\nprint(solution(N))",
        "test": "assert solution(input()) == \"No\"",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 4313,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    C = list(map(int, stdin[1].split()))\n    V = list(map(int, stdin[2].split()))\n    C.sort()\n    V.sort()\n    i = 0\n    while i < N:\n        if V[i] + C[i] <= V[-1]:\n            i += 1\n        else:\n            break\n    return str(V[-1] - C[i])\n",
        "test": "assert solution(string) == '5'",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 4314,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = [[(c == \"#\") for c in l] for l in map(str, range(1, H+1))]\n    for h in range(1, H+1):\n        for w in range(1, W+1):\n            if not all(grid[h-i][w-j] for i, j in [(1,0),(1,1),(0,-1),(-1,-1),(-1,0),(0,1),(1,1)]):\n                grid[h-1][w-1] = \".\"\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \".\"\n            else:\n                grid[i][j] = \"#\"\n    return \"\".join(map(str, grid))\n",
        "test": "assert solution(input()) == \"###\"",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 4315,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    stdin = list(map(int, stdin.split()))\n    for i in range(len(stdin)):\n        answer += abs(stdin[i])\n    return str(answer)\n\"\"\"\n\ndef",
        "test": "assert solution(4) == 6",
        "num_ids": 2032,
        "indeed": false
    },
    {
        "number": 4316,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    unique_s = [i for i in set(s)]\n    return 'Yes' if len(unique_s) == 2 else 'No'\n",
        "test": "assert solution(\"S\") == 'No'",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 4317,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A + B\n    return str(max(result, abs(result - A), abs(result - B)))\n\ndef",
        "test": "assert solution(stdin) == '39', 'Error'",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 4318,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n        N = int(stdin.strip())\n        H_i = int(stdin.strip())\n        H_1 = int(stdin.strip())\n        H = max(H_i, H_1)\n        h_list = sorted([H_i, H_1], reverse=True)\n        for i in range(N - 1):\n            if h_list[i] == H_i:\n                return str(i + 2)\n            if h_list[i] < H_i:\n                return str(i + 2)\n        return \"0\"\n'''\n\ndef",
        "test": "assert solution(\"1\\n3\\n7\\n10\") == \"3\"",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 4319,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = []\n    # list_input = list(map(int, input().strip().split()))\n    # print(list_input)\n    for i in range(n):\n        l.append(int(input().strip()))\n    answer = []\n    for i in range(n):\n        answer.append(l[i]+l[i+1])\n    return str(answer)\n\nprint(solution(stdin))\n",
        "test": "assert solution(str_in) == '1 2 1 2'",
        "num_ids": 937,
        "indeed": false
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, n = map(int, stdin.split())\n    result = '1'\n    if a + 2*b + 4*c + 2*d == n:\n        result += '1'\n    if a + 2*b + 4*c + 2*d!= n:\n        result += str(n)\n    return result\n",
        "test": "assert solution(stdin) == ''",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 4321,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    num = list(map(int, stdin.split('\\n')))\n    while len(num)!= 2:\n        if len(num) == 0:\n            return 0\n        if num[0] == 0:\n            num.pop(0)\n            num.pop(0)\n            num.pop(0)\n            num.pop(0)\n        else:\n            num.pop(0)\n    return ''.join(map(str, num))\n\nfor p in range(1, 50):\n    for n in range(p+1):\n        solution('\\n'.join(list(map(str, [num]*p + [num-n]))))",
        "test": "assert solution(stdin) == \"50\"",
        "num_ids": 2399,
        "indeed": false
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    max = 0\n    max_i = 0\n    for i in range(n):\n        a_i = a[i]\n        if max < a_i:\n            max = a_i\n            max_i = i + 1\n    if max_i == n:\n        max = max + 1\n    if max_i > n:\n        return '0'\n    # print(max)\n    k = max_i\n    res = 0\n    while True:\n        res = res * n + a[k]\n        if res > max:\n            max = res\n            max_i = k + 1\n        elif res == max:\n            break\n        k = k + 1\n    if max_i == n:\n        max = max + 1\n    if max_i > n:\n        return '0'\n    # print(max)\n    return str(max)\n",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 4323,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Compression operations\n    # 1) After compressor, get the size of the first song\n    # 2) Get the size of the second song and compare it with the compressor's current size\n    # 3) If the size of the second song is equal to the compressor's current size, then return -1\n    # 4) If the size of the first song is equal to the compressor's current size, then return the compressor's current size\n    \n    \n    # Need to check if the compressor's size is less than the standard deviation\n    # They will get the first song with compressor's size == standard deviation (the sum of sizes after compression == compressor's size)\n    \n    # Get the compressor's size\n    # Compress first song\n    # Get the compressor's size\n    # Compress the second song\n    \n    # If the compressor's size is equal to the standard deviation, return the compressor's size\n    \n    def comp(std):\n        comp_size = 0\n        for i in std:\n            comp_size += std.count(i)\n        return comp_size\n    \n    # Get the compressor's size\n    def comp_std(std):\n        return math.sqrt(comp(std) / std.count(std[0]))\n    \n    # If the compressor's size is less than the standard deviation, return the compressor's size\n    def comp_std_d(std):\n        comp_std = math.sqrt(comp_std(std))\n        return comp_std\n    \n    # Compress the first song with compressor's std\n    def compressor(std):\n        comp = std.count(std[0])\n        comp_std = comp_std(std)\n        comp_std_d = comp_std_d(std)\n        std_size = comp - comp_std\n        \n        # If the compressor's std is less than the standard deviation, return the compressor's std\n        if comp_std_d < comp_std:\n            return comp_std_d\n        else:\n            return comp_std\n    \n    # Compress the first song with compressor's std\n    std_std = compressor(std)\n    \n    # Compress the second song\n    std_std_comp = std_std * std\n    std_size_comp = comp_std(std)\n    std_size_comp_std = comp_std_d(std)\n    std_size_std = std_size - std_size_comp - std_size_std\n    \n    if std_size_std < std_size_comp:\n        return std_size_std\n    else:\n        return std_size_comp\n    \n",
        "test": "assert solution(\"1 1 5\") == \"5\"",
        "num_ids": 1410,
        "indeed": false
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    \n    # The problem asks for the max length of a substring\n    l, r = 0, len(stdin)\n    \n    # Iterate over the string\n    for i in range(r):\n        s = stdin[i]\n        \n        # If the substring starts with a letter\n        if s[0] in ['t', 'e']:\n            # Add the letter to the string\n            s = s + s[1:]\n            \n            # The number of distinct letters in the substring\n            n = s.count(s[0])\n            \n            # If there is only one letter in the substring\n            if n == 1:\n                # If the substring length is not less than the max length of the substring\n                if len(s) > l + n:\n                    # If the substring contains at least two letters\n                    if s.count('e') > 1:\n                        # If the number of distinct letters in the substring is more than the number of distinct letters in the string\n                        if n > (len(s) - l):\n                            # If the substring contains one more than the required number\n                            if s.count('e') > (n - (len(s) - l)):\n                                # If the substring contains one more than the required number\n                                if s.count('e') > (n - (len(s) - l)):\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                                    # If the substring contains one more than the required number\n                               ",
        "test": "assert solution(stdin) == \"abcde\", \"solution failed\"",
        "num_ids": 1993,
        "indeed": false
    },
    {
        "number": 4325,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N,T = map(int,stdin.split())\n    minutes = 0\n    \n    while T > 0:\n        takoyaki = 0\n        for i in range(N):\n            if T >= minutes:\n                takoyaki += 1\n            \n            minutes += 1\n        \n        T -= takoyaki\n    \n    return str(minutes)\n\n-----Explanation-----\n  * The time, '120', is 10 minutes, so the solution is 121 minutes.\n  * The time, '120', is limited by the max number of pieces, N = 20.\n  * The time, '120', is no longer limited by the number of pieces, T = 3.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 1.\n  * The time, '120', is no longer limited by the number of pieces, T = 2.\n  * The time, '120', is no longer limited by the number of pieces, T = 4.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces, T = 0.\n  * The time, '120', is no longer limited by the number of pieces",
        "test": "assert solution(\"10\") == 12",
        "num_ids": 2445,
        "indeed": false
    },
    {
        "number": 4326,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    max_g = max(range(1, n+1))\n    g = []\n    for i in range(n):\n        line = list(map(int, stdin.split()))\n        g.append(line[0:2])\n    print(len(g))\n    for i in range(max_g):\n        g[i][1] += g[i][0]\n        g[i][0] += g[i][1]\n    for i in range(max_g, n+1):\n        for j in range(max_g):\n            if i-g[j][0] >= g[j][1]:\n                g[j][0] = i-g[j][0]\n                g[j][1] = i-g[j][0]\n            else:\n                g[j][1] = i-g[j][0]\n                g[j][0] = i-g[j][1]\n    return''.join(map(str, g[0]))",
        "test": "assert solution(s) == 2",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 4327,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    apple_pie = 3\n    for _ in range(P):\n        for _ in range(apple_pie):\n            print(A)\n        apple_pie -= 2\n    return '3'\n",
        "test": "assert solution('1 1') == '3'",
        "num_ids": 2472,
        "indeed": false
    },
    {
        "number": 4328,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    a,b = map(int,stdin.split())\n    \n    if a%b==0:\n        return str(a//b)\n    else:\n        return str(b-a)\n",
        "test": "assert solution(\"4 12\") == \"16\"",
        "num_ids": 2259,
        "indeed": false
    },
    {
        "number": 4329,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    S = input()\n    T = input()\n    \n    #handling the problem statement\n    if len(S) < 10 or len(T) < 10:\n        return 'Yes'\n    if len(S) > len(T):\n        return 'No'\n    if S[-1] == 'z':\n        return 'No'\n    if S[-1] == 'y' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'a':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'o':\n        return 'Yes'\n    if S[-1] == 'y' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'a' and T[-1] == 'y':\n        return 'Yes'\n    if S[-1] == 'a' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'y':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'a':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'o':\n        return 'Yes'\n    if S[-1] == 'y' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'a' and T[-1] == 'y':\n        return 'Yes'\n    if S[-1] == 'a' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'a':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'o':\n        return 'Yes'\n    if S[-1] == 'y' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'a' and T[-1] == 'y':\n        return 'Yes'\n    if S[-1] == 'a' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'y':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'a':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'o':\n        return 'Yes'\n    if S[-1] == 'y' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'a' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'a':\n        return 'Yes'\n    if S[-1] == 'y' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'o':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'a':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'a':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'y':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'y':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'a':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'o':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'y':\n        return 'Yes'\n    if S[-1] == 'y' and T[-1] == 'a':\n        return 'Yes'\n    if S[-1] == 'y' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'y':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'a':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'o':\n        return 'Yes'\n    if S[-1] == 'y' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'a' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'y' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'a' and T[-1] == 'o':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'y':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'y':\n        return 'Yes'\n    if S[-1] == 'a' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'o':\n        return 'Yes'\n    if S[-1] == 'y' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'y':\n        return 'Yes'\n    if S[-1] == 'y' and T[-1] == 'o':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'a':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'o':\n        return 'Yes'\n    if S[-1] == 'a' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'a':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'z':\n        return 'Yes'\n    if S[-1] == 'z' and T[-1] == 'o':\n        return 'Yes'\n    if S[-1] == 'o' and T[-1] == 'a':\n        return 'Yes'\n    if S[-1] == 'a' and T[-1] == 'z':\n        return 'Yes'\n",
        "test": "assert solution(stdin) == \"No\"",
        "num_ids": 2599,
        "indeed": false
    },
    {
        "number": 4330,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    \n    lst = [int(i) for i in stdin.split()]\n    if len(lst)!= 2:\n        return 'IMPOSSIBLE'\n    \n    A, B = lst[0], lst[1]\n    if A + B > 10**9:\n        return 'IMPOSSIBLE'\n    \n    if abs(A - B) < 10**-9:\n        return 'IMPOSSIBLE'\n    \n    if abs(B - A) < 10**-9:\n        return 'IMPOSSIBLE'\n    \n    return str(min(abs(A - B), abs(B - A)))\n",
        "test": "assert solution(\"10\") == \"IMPOSSIBLE\"",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 4331,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 7:\n        return 'Yes'\n    if N % 10!= 7:\n        return 'No'\n    return 'Yes'\n",
        "test": "assert solution(117) == 'Yes'",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 4332,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, *_ = map(int, stdin.split())\n    if n == 0:\n        return \"Yes\"\n    if n < 10:\n        return \"No\"\n    return str(n)",
        "test": "assert solution(input()) == \"Yes\"",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 4333,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # TLE\n    # f(n) = min(f(n-1), f(n-2)) + f(n-3)\n    # f(n) = min(f(n-1), f(n-2), f(n-3)) + f(n-4)\n    # f(n) = min(f(n-1), f(n-2), f(n-3), f(n-4)) + f(n-5)\n    n = int(stdin.strip())\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        print(f\"{x},{y},{x}-{y}-{x*y}\")\n    return '-1, -1, -1, -1'",
        "test": "assert solution(\"0 0 0 -1 -1\") == \"1 -1 -1 -1\"",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 4334,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    S = [char for char in stdin]\n    T = [char for char in stdin]\n    U = [char for char in stdin]\n    n = len(S)\n    n1, n2 = 0, 0\n    for i in range(n):\n        if S[i] == T[i] and U[i] == S[i]:\n            n1 += 1\n            n2 += 1\n        elif U[i] == T[i] and S[i]!= T[i]:\n            n1 += 1\n    \n    if n1 >= n1:\n        print(n1)\n    else:\n        for i in range(n):\n            if S[i]!= T[i] and U[i]!= S[i]:\n                n2 += 1\n        print(n1 + n2)\n\n-----Sample Input-----\nred blue\n3 4\nred\n\n-----Sample Output-----\n2 4\n\nTakahashi chose a ball with red written on it and threw it away.\nNow we have two balls with the string S and four balls with the string T.\ndef",
        "test": "assert solution(S) == T",
        "num_ids": 2806,
        "indeed": false
    },
    {
        "number": 4335,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n",
        "test": "assert solution(\"aaaaaaa\") == \"No\"",
        "num_ids": 2363,
        "indeed": false
    },
    {
        "number": 4336,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(lambda x: abs(int(x) - int(x.split()[0])), stdin.split())))\n\nprint(solution(\"2 3 1 2\"))\n",
        "test": "assert solution(\"10 4 1 2\"), \"1\"",
        "num_ids": 1104,
        "indeed": false
    },
    {
        "number": 4337,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(\" \")[0])\n    s = [0 for i in range(n+1)]\n    s[1] = 1\n    s[2] = 1\n    for i in range(3, n+1):\n        s[i] = s[i-1]+s[i-2]\n    print(s[n])\n    return \"\".join(str(x) for x in s[n:])\n\n-----Sample Output-----\nThree\n'''\n\nfrom collections import defaultdict\ndef",
        "test": "assert solution(stdin) == \"Four\"",
        "num_ids": 1844,
        "indeed": false
    },
    {
        "number": 4338,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n,x,y = map(int,stdin.split())\n    a = list(map(int,stdin.split()))\n    a.sort()\n    b = [0] * (n+1)\n    for i in range(1,n+1):\n        b[i] = a[i-1] + a[i]\n    for i in range(n):\n        if b[i+1] - b[i] == x:\n            b[i+1] -= x\n    print(n-b[-1])\n    \nsolution(\"5 2 3 4 2 1\")\n",
        "test": "assert solution(\"2 3 5 2\") == 3, \"stdin is incorrect\"",
        "num_ids": 2123,
        "indeed": false
    },
    {
        "number": 4339,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(sum(a < b) % 2)\n",
        "test": "assert solution(stdin) == 7, \"Expected 7, but got: {}\".format(solution(stdin))",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n,a=map(int,stdin.split())\n    n,a=list(map(int,stdin.split()))\n    \n    a.sort()\n    ans=sum(a)\n    \n    return str(ans)\n\n\n-----Examples-----\nInput\n5\n1 2 4 5 10\n\nOutput\n1 1 3 5 9\n\nInput\n10\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\n\nOutput\n9999 9 50605065 1 5 89 5 999999999 60506055 999999999\n\n\n'''\n\ndef",
        "test": "assert solution(stdin) == \"9\"",
        "num_ids": 1998,
        "indeed": false
    },
    {
        "number": 4341,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    edges = [[i] for i in stdin.strip().split()]\n    n, m = map(int, stdin.strip().split())\n    for _ in range(m):\n        a, b = map(int, stdin.strip().split())\n        edges.append([a, b])\n\n    visited = [False] * n\n    nodes = [i for i in range(n)]\n    visited[0] = True\n    cycle = 0\n    for edges_set in itertools.permutations(edges):\n        for edge in edges_set:\n            u, v = edge\n            if not visited[u]:\n                if (not visited[v]) and (nodes[v]!= nodes[u]):\n                    visited[v] = True\n                    cycle += 1\n            if not visited[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    cycle += 1\n            if not visited[u]:\n                visited[u] = True\n    return str(cycle)\n\n\nThe following are examples of an undirected graph:\n\nInput\n5 4\n1 2\n3 4\n5 4\n3 5\n\nOutput\n1\n\nInput\n17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n\nOutput\n2\n\n\n\n-----Note-----\n\nThe definition of graph theory is based on the following simple examples.\n\n$V$: number of vertices.\n$E$: number of edges.\n$E$: edges of a cycle.\n\nA simple example\n\nGiven:\n\nV = 4\nE = [1, 3, 5]\nWe have $E = [1, 3, 5]$\n\nOutput:\n\n2\n\nGiven:\n\nV = 4\nE = [1, 3, 5]\nWe have $E = [1, 3, 5]$\n\nOutput:\n\n1\n\n\n\n-------Constraints-------\n\n1 <= V <= 100\n1 <= E.length <= 10^5\n0 <= E[i] <= 100\n1 <= V, E[i] <= V\n\nExamples\n\nInput 1:\n\n1 2\n3 4\n5 3\n5 4\n\nOutput 1:\n\n2\n\nInput 2:\n\n1 3\n3 4\n3 5\n\nOutput 2:\n\n1\n\nConstraints:\n\n2 <= V <= 100\n1 <= E.length <= 10^5\n0 <= E[i] <= 100\nV = 4\n\n\"\"\"",
        "test": "assert solution(stdin) == 1, \"solution not correct\"",
        "num_ids": 1611,
        "indeed": false
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vertices = list(map(int, stdin.split()))\n    graph = {}\n    for i in range(n):\n        x = int(vertices[i])\n        if x not in graph:\n            graph[x] = []\n        if x in graph:\n            graph[x].append(i)\n    print(len(list(graph.keys())))\n    print(graph)\n    for i in range(n-1, -1, -1):\n        if i in graph and len(graph[i]) == 1:\n            x = graph[i].pop()\n            y = graph[i].pop()\n            graph[y].append(x)\n            graph[x].append(y)\n            print(graph)\n    return \"0\"\n\nprint(solution(stdin))\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= a_i < n\n1 <= v_i <= n\n0 <= u_i < n\n1 <= u_i <= n\n\n-----Submission Detail-----\nHours/mins/sec\n0 <= k <= 100\n\n-----Time Limit-----\n1 Minute\n\n\"\"\"\nimport heapq\n\ndef",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 1671,
        "indeed": false
    },
    {
        "number": 4343,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    \n    k = int(stdin.strip())\n    s = stdin.strip().split()\n    t = stdin.strip().split()\n    \n    s_list = []\n    t_list = []\n    \n    for i in range(len(s)):\n        s_list.append(s[i])\n        t_list.append(t[i])\n    \n    s_list.sort()\n    t_list.sort()\n    \n    median = 0\n    \n    if k%2 == 0:\n        median = (s_list[int(k/2)] + t_list[int(k/2)])\n    else:\n        median = (s_list[int(k/2)])\n        \n    return median\n",
        "test": "assert solution(",
        "num_ids": 1154,
        "indeed": false
    },
    {
        "number": 4344,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = list(map(int, stdin.split()))\n\n    if k > len(students):\n        return \"NO\"\n    if k == len(students):\n        return \"YES\"\n    team = []\n    for i in range(len(students)):\n        for j in range(i + 1, len(students)):\n            team.append(students[i] * students[j])\n    team.sort()\n    \n    result = []\n    for i in team:\n        for j in range(k):\n            result.append(i * j)\n    \n    return \"YES\" if len(result) == k else \"NO\"\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 2592,
        "indeed": false
    },
    {
        "number": 4345,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    \n    if len(set(a)) == 2:\n        return \"NO\"\n    elif len(a) == m:\n        return \"YES\"\n    else:\n        # $a$[i] < $a[i+1] <... < $a[k] < $a[l]\n        if a[0] > a[1]:\n            a.insert(0, 0)\n            a.append(m-1)\n        else:\n            a.insert(1, m-1)\n            a.append(0)\n        \n        # $a$[i] < $a[i+1] <... < $a[k] < $a[l]\n        if a[-1] < a[-2]:\n            a.append(m-1)\n        else:\n            a.append(0)\n        \n        def is_increasing(i, l):\n            return a[i] < a[i+1] < a[i] < a[l]\n        \n        for i in range(m):\n            if is_increasing(i, i+1):\n                if is_increasing(i, i+2):\n                    if is_increasing(i, i+3):\n                        if is_increasing(i, i+4):\n                            if is_increasing(i, i+5):\n                                if is_increasing(i, i+6):\n                                    if is_increasing(i, i+7):\n                                        if is_increasing(i, i+8):\n                                            if is_increasing(i, i+9):\n                                                if is_increasing(i, i+10):\n                                                    return str(n-i)\n        return str(n-m)\n        \n    \n    ",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 2612,
        "indeed": false
    },
    {
        "number": 4346,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.split()))\n    l = t[0]\n    v = t[1]\n    l = l - v\n    r = l + v\n    t.sort()\n    answer = t[t.index(l) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer + t[t.index(r) + 1]\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]\n    answer = answer - 1\n    answer = answer + t[t.index(r) + 1]",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 1942,
        "indeed": false
    },
    {
        "number": 4347,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = 0\n    for i in range(1, 2 * n + 1):\n        for j in range(i):\n            for k in range(n - 2 * j):\n                if k < n - 2 * j and i - k <= 2 * j:\n                    cnt += 1\n    return cnt",
        "test": "assert solution(2) == 1",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 4348,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split())\n\n    left = 0\n    right = 0\n    result = []\n    if s[left] == \"a\":\n        left += 1\n    else:\n        while left < n:\n            result.append(s[left])\n            left += 1\n\n    if s[right] == \"b\":\n        right += 1\n    else:\n        while right < n:\n            result.append(s[right])\n            right += 1\n\n    result = \"\".join(result)\n    while k > 0:\n        if right < n:\n            result = result[:right] + s[left] + result[right:]\n            left += 1\n        elif left < n:\n            result = result[:left] + s[right] + result[left:]\n            right += 1\n        else:\n            break\n        k -= 1\n    return result",
        "test": "assert solution(stdin) == \"cccc\"",
        "num_ids": 2628,
        "indeed": false
    },
    {
        "number": 4349,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = []\n    for i in range(m):\n        k.append(int(stdin.split()[i]))\n    \n    def buy(k, i):\n        p, t = 0, 0\n        for j in range(n):\n            if j in k:\n                p += 2*k[j]\n            else:\n                t += 1\n        return p, t\n    \n    def sell(k, i):\n        p, t = 0, 0\n        for j in range(n):\n            if j not in k:\n                p += 2*k[j]\n            else:\n                t += 1\n        return p, t\n    \n    for i in range(n):\n        k[i], k[i+1] = buy(k, i)\n        k[i], k[i+1] = sell(k, i)\n        \n    def day(k, i):\n        return (k[i] + k[i+1])//2\n        \n    days = 0\n    for i in range(n):\n        days += day(k, i)\n    return days\n        \n\"\"\"",
        "test": "assert solution(stdin) == 20",
        "num_ids": 1056,
        "indeed": false
    },
    {
        "number": 4350,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        for j in range(i):\n            print(len(str(i+1)))\n        print(str(i+1))\n        for j in range(i):\n            print(len(str(i+1)))\n        print(str(i+1))\n\n-------SOLUTION-------\n\n[1]\n[2]\n[3]\n\n[3]\n[5]\n\n[5]\n[6]\n\n[6]\n[8]\n\n[8]\n[10]\n\n[10]\n[12]\n\n[12]\n[14]\n\n[14]\n[16]\n\n[16]\n[18]\n\n[18]\n[20]\n\n[20]\n[22]\n\n[22]\n[24]\n\n[24]\n[26]\n\n[26]\n[28]\n\n[28]\n[30]\n\n[30]\n[32]\n\n[32]\n[34]\n\n[34]\n[36]\n\n[36]\n[38]\n\n[38]\n[40]\n\n[40]\n[42]\n\n[42]\n[44]\n\n[44]\n[46]\n\n[46]\n[48]\n\n[48]\n[50]\n\n[50]\n[52]\n\n[52]\n[54]\n\n[54]\n[56]\n\n[56]\n[58]\n\n[58]\n[60]\n\n[60]\n[62]\n\n[62]\n[64]\n\n[64]\n[66]\n\n[66]\n[68]\n\n[68]\n[70]\n\n[70]\n[72]\n\n[72]\n[74]\n\n[74]\n[76]\n\n[76]\n[78]\n\n[78]\n[80]\n\n[80]\n[82]\n\n[82]\n[84]\n\n[84]\n[86]\n\n[86]\n[88]\n\n[88]\n[90]\n\n[90]\n[92]\n\n[92]\n[94]\n\n[94]\n[96]\n\n[96]\n[98]\n\n[98]\n[100]\n\n[100]\n[102]\n\n[102]\n[104]\n\n[104]\n[106]\n\n[106]\n[108]\n\n[108]\n[110]\n\n[110]\n[112]\n\n[112]\n[114]\n\n[114]\n[116]\n\n[116]\n[118]\n\n[118]\n[120]\n\n[120]\n[122]\n\n[122]\n[124]\n\n[124]\n[126]\n\n[126]\n[128]\n\n[128]\n[130]\n\n[130]\n[132]\n\n[132]\n[134]\n\n[134]\n[136]\n\n[136]\n[138]\n\n[138]\n[140]\n\n[140]\n[142]\n\n[142]\n[144]\n\n[144]\n[146]\n\n[146]\n[148]\n\n[148]\n[150]\n\n[150]\n[152]\n\n[152]\n[154]\n\n[154]\n[156]\n\n[156]\n[158]\n\n[158]\n[160]\n\n[160]\n[162]\n\n[162]\n[164]\n\n[164]\n[166]\n\n[166]\n[168]\n\n[168]\n[170]\n\n[170]\n[172]\n\n[172]\n[174]\n\n[174]\n[176]\n\n[176]\n[178]\n\n[178]\n[180]\n\n[180]\n[182]\n\n[182]\n[184]\n\n[184]\n[186]\n\n[186]\n[188]\n\n[188]\n[190]\n\n[190]\n[192]\n\n[192]\n[194]\n\n[194]\n[196]\n\n[196]\n[198]\n\n[198]\n[200]\n\n[200]\n[202]\n\n[202]\n[204]\n\n[204]\n[206]\n\n[206]\n[208]\n\n[208]\n[210]\n\n[210]\n[212]\n\n[212]\n[214]\n\n[214]\n[216]\n\n[216]\n[218]\n\n[218]\n[220]\n\n[220]\n[222]\n\n[222]\n[224]\n\n[224]\n[226]\n\n[226]\n[228]\n\n[228]\n[230]\n\n[230]\n[232]\n\n[232]\n[234]\n\n[234]\n[236]\n\n[236]\n[238]\n\n[238]\n[240]\n\n[240]\n[242]\n\n[242]\n[244]\n\n[244]\n[246]\n\n[246]\n[248]\n\n[248]\n[250]\n\n[250]\n[252]\n\n[252]\n[254]\n\n[254]\n[256]\n\n[256]\n[258]\n\n[258]\n[260]\n\n[260]\n[262]\n\n[262]\n[264]\n\n[264]\n[266]\n\n[266]\n[268]\n\n[268]\n[270]\n\n[270]\n[272]\n\n[272]\n[274]\n\n[274]\n[276]",
        "test": "assert solution(input()), \"The program cannot solve the problem\"",
        "num_ids": 3087,
        "indeed": false
    },
    {
        "number": 4351,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    str = stdin.rstrip()\n    if len(str)!= 3:\n        return \"No\"\n    if str == str[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution('575') == 'Yes'",
        "num_ids": 2431,
        "indeed": false
    },
    {
        "number": 4352,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    \n    # input() is called to get the input of the program.\n    A, B = map(int, stdin.split())\n\n    if A > 13 or B > 13:\n        return \"Draw\"\n\n    if A >= 2 or B >= 2:\n        return \"Bad\"\n\n    if A == B:\n        return \"No\"\n\n    if A + B == 13:\n        return \"Yes\"\n\n    A -= 1\n    B -= 1\n\n    if A > B:\n        return \"No\"\n    elif A == B:\n        return \"Yes\"\n    else:\n        return \"Draw\"\n\n(Test Cases)\n\n>>> solution(\"8 6\")\n'Yes'\n>>> solution(\"8 7\")\n'Bad'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"8 5\")\n'No'\n>>> solution(\"5 8\")\n'No'\n>>> solution(\"5 6\")\n'Yes'\n>>> solution(\"6 4\")\n'Yes'\n>>> solution(\"6 5\")\n'No'\n>>> solution(\"6 6\")\n'No'\n>>> solution(\"5 5\")\n'No'\n>>> solution(\"5 4\")\n'Yes'\n\nSample Output\n\n>>> solution(\"8 6\")\n'Yes'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"8 5\")\n'Yes'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"5 8\")\n'No'\n>>> solution(\"5 5\")\n'Yes'\n>>> solution(\"5 6\")\n'No'\n>>> solution(\"5 4\")\n'Yes'\n>>> solution(\"6 4\")\n'No'\n>>> solution(\"6 5\")\n'No'\n>>> solution(\"6 6\")\n'No'\n>>> solution(\"5 5\")\n'No'\n>>> solution(\"5 4\")\n'No'\n>>> solution(\"6 6\")\n'No'\n>>> solution(\"5 6\")\n'No'\n>>> solution(\"5 5\")\n'No'\n>>> solution(\"5 4\")\n'Yes'\n>>> solution(\"8 5\")\n'No'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 7\")\n'Yes'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 5\")\n'Yes'\n>>> solution(\"5 6\")\n'Yes'\n>>> solution(\"6 4\")\n'No'\n>>> solution(\"6 5\")\n'Yes'\n>>> solution(\"6 6\")\n'No'\n>>> solution(\"6 7\")\n'No'\n>>> solution(\"5 5\")\n'No'\n>>> solution(\"5 6\")\n'No'\n>>> solution(\"5 4\")\n'Yes'\n>>> solution(\"6 7\")\n'No'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 5\")\n'No'\n>>> solution(\"5 6\")\n'Yes'\n>>> solution(\"6 4\")\n'No'\n>>> solution(\"6 5\")\n'No'\n>>> solution(\"5 4\")\n'No'\n>>> solution(\"8 6\")\n'Yes'\n>>> solution(\"8 5\")\n'Yes'\n>>> solution(\"5 6\")\n'No'\n>>> solution(\"5 4\")\n'Yes'\n>>> solution(\"6 6\")\n'No'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"8 5\")\n'Yes'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"8 5\")\n'No'\n>>> solution(\"7 6\")\n'Yes'\n>>> solution(\"7 5\")\n'No'\n>>> solution(\"7 6\")\n'No'\n>>> solution(\"5 8\")\n'No'\n>>> solution(\"8 7\")\n'Yes'\n>>> solution(\"7 6\")\n'No'\n>>> solution(\"8 5\")\n'Yes'\n>>> solution(\"7 4\")\n'No'\n>>> solution(\"8 5\")\n'No'\n>>> solution(\"6 6\")\n'No'\n>>> solution(\"6 7\")\n'No'\n>>> solution(\"5 6\")\n'No'\n>>> solution(\"8 6\")\n'Yes'\n>>> solution(\"7 4\")\n'No'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"7 5\")\n'No'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"8 5\")\n'No'\n>>> solution(\"7 6\")\n'No'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 5\")\n'No'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"5 8\")\n'No'\n>>> solution(\"6 7\")\n'Yes'\n>>> solution(\"5 6\")\n'No'\n>>> solution(\"5 5\")\n'No'\n>>> solution(\"8 6\")\n'Yes'\n>>> solution(\"8 7\")\n'Yes'\n>>> solution(\"5 7\")\n'No'\n>>> solution(\"8 5\")\n'No'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 5\")\n'No'\n>>> solution(\"5 8\")\n'Yes'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"8 5\")\n'No'\n>>> solution(\"8 6\")\n'Yes'\n>>> solution(\"8 5\")\n'No'\n>>> solution(\"5 6\")\n'Yes'\n>>> solution(\"5 7\")\n'No'\n>>> solution(\"5 8\")\n'No'\n>>> solution(\"8 6\")\n'Yes'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"5 8\")\n'No'\n>>> solution(\"6 7\")\n'No'\n>>> solution(\"8 5\")\n'Yes'\n>>> solution(\"5 8\")\n'No'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"8 5\")\n'Yes'\n>>> solution(\"8 6\")\n'Yes'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"5 6\")\n'Yes'\n>>> solution(\"8 5\")\n'Yes'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"8 5\")\n'Yes'\n>>> solution(\"8 7\")\n'Yes'\n>>> solution(\"5 8\")\n'No'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"8 5\")\n'No'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 7\")\n'Yes'\n>>> solution(\"5 8\")\n'Yes'\n>>> solution(\"8 7\")\n'Yes'\n>>> solution(\"8 5\")\n'No'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"8 5\")\n'Yes'\n>>> solution(\"5 8\")\n'No'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"5 8\")\n'Yes'\n>>> solution(\"8 7\")\n'Yes'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 7\")\n'No'\n>>> solution(\"8 5\")\n'Yes'\n>>> solution(\"8 6\")\n'No'\n>>> solution(\"8 7\")\n'Yes'\n>>> solution(\"5 8\")\n'",
        "test": "assert solution(stdin) == \"Alice\"",
        "num_ids": 2700,
        "indeed": false
    },
    {
        "number": 4353,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(stdin)\n    answer = \"\"\n    for i in range(len(stdin)):\n        if stdin[i] == ',':\n            answer += \" \"\n        else:\n            answer += stdin[i]\n    return answer\n\nTest cases\n\nInput:\nhappy,newyear,enjoy\nSample Output:\nhappy newyear enjoy\nExpected Output:\nhappy newyear enjoy\n\nInput:\nhappy\nSample Output:\nhappy\nExpected Output:\nHappy new year enjoy\n\nInput:\ns, z, y\nSample Output:\nz new y\nExpected Output:\nz new y\n\nInput:\nhappy,newyear\nSample Output:\nnewyear happy\nExpected Output:\nnewyear new year\n\nInput:\ngood,worse,if,worse\nSample Output:\n",
        "test": "assert solution(\"three\",\"five\") == \"three five six\"",
        "num_ids": 2788,
        "indeed": false
    },
    {
        "number": 4354,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    # a_1 b_1\n    # a_N b_N\n    # c_1 d_1\n    # a_M d_M\n    a_1 = list(map(int, stdin.split()))\n    b_1 = []\n    for i in range(M):\n        b_1.append(a_1[i + 1])\n    a_N = []\n    for i in range(N):\n        a_N.append(a_1[i + 1])\n    a_M = []\n    for i in range(M):\n        a_M.append(a_1[i])\n    # c_1 d_1\n    c_1 = []\n    for i in range(N):\n        c_1.append(a_N[i + 1])\n        c_1.append(a_N[i + 1])\n    # a_M d_M\n    a_M = []\n    for i in range(M):\n        a_M.append(a_N[i])\n        a_M.append(a_N[i])\n    # d_1 d_1\n    d_1 = []\n    for i in range(N):\n        d_1.append(a_M[i + 1])\n        d_1.append(a_M[i])\n    # d_1 d_1\n    d_M = []\n    for i in range(N):\n        d_M.append(a_M[i])\n        d_M.append(a_M[i])\n    if a_1[0] == b_1[0] or a_1[1] == b_1[1] or a_1[2] == b_1[2]:\n        return \"-1\"\n    x1 = (b_1[2] - b_1[1]) * (c_1[0] - c_1[1]) + (b_1[0] - b_1[1]) * (c_1[2] - c_1[1])\n    y1 = (b_1[2] - b_1[1]) * (c_1[2] - c_1[1]) + (b_1[0] - b_1[1]) * (c_1[0] - c_1[1])\n    x2 = (b_1[0] - b_1[1]) * (d_1[0] - d_1[1]) + (b_1[2] - b_1[1]) * (d_1[2] - d_1[1])\n    y2 = (b_1[0] - b_1[1]) * (d_1[2] - d_1[1]) + (b_1[2] - b_1[1]) * (d_1[0] - d_1[1])\n    if x1 > x2:\n        return \"1\"\n    if x1 == x2:\n        if y1 > y2:\n            return \"2\"\n        if y1 == y2:\n            return \"2\"\n    if y1 > y2:\n        return \"2\"\n    if y1 == y2:\n        if x1 > x2:\n            return \"2\"\n        if x1 == x2:\n            return \"2\"\n\n    for i in range(N):\n        if a_N[i] > b_1[0] or a_N[i] > b_1[1] or a_N[i] > b_1[2]:\n            return \"1\"\n    for i in range(M):\n        if a_M[i] > b_1[0] or a_M[i] > b_1[1] or a_M[i] > b_1[2]:\n            return \"1\"\n    if a_1[0] == a_M[0] and a_1[1] == a_M[1] and a_1[2] == a_M[2]:\n        return \"1\"\n    if a_1[0] == a_M[0] or a_1[1] == a_M[1] or a_1[2] == a_M[2]:\n        return \"1\"\n    if b_1[0] == b_M[0] or b_1[1] == b_M[1] or b_1[2] == b_M[2]:\n        return \"1\"\n    if c_1[0] == c_M[0] or c_1[1] == c_M[1] or c_1[2] == c_M[2]:\n        return \"1\"\n    if d_1[0] == d_M[0] or d_1[1] == d_M[1] or d_1[2] == d_M[2]:\n        return \"1\"\n    return \"0\"\n",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 2485,
        "indeed": false
    },
    {
        "number": 4355,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n  a = int(stdin)\n  answer = str(a+a**2+a**3)\n  return answer\n",
        "test": "assert solution(0) == '0'",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 4356,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split())\n    B_m, B_n = map(int, stdin.split())\n    if B_m > M or B_n > N:\n        return 'Yes'\n    \n    A_m, A_n = map(int, stdin.split())\n    if A_m > M or A_n > N:\n        return 'Yes'\n    \n    B_m = B_m % M\n    B_n = B_n % N\n    \n    if A_m == B_m and B_n == B_n:\n        return 'Yes'\n    \n    if A_m > B_m:\n        return 'Yes'\n    if A_n > B_n:\n        return 'Yes'\n    \n    return 'No'\n",
        "test": "assert solution([\"#.#\",\"#.\"]) == \"No\"",
        "num_ids": 1375,
        "indeed": false
    },
    {
        "number": 4357,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = map(int, stdin.split())\n    answer = str(min(A,B,C))\n    return answer\n\ndef",
        "test": "assert solution(input) == '53'",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 4358,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[-1])\n    p_1 = float(stdin.split()[0])\n    p_2 = float(stdin.split()[1])\n    price_of_items = [0]\n    price_of_items.append(p_1)\n    price_of_items.append(p_2)\n    price_of_items.sort()\n    p_1 = price_of_items[0]\n    p_2 = price_of_items[1]\n    price_of_items = []\n    # price_of_items.append(p_1)\n    # price_of_items.append(p_2)\n    # price_of_items.sort()\n    for i in range(2, N + 1):\n        price_of_items.append(price_of_items[i - 2] + price_of_items[i - 1])\n    price_of_items.sort()\n    return str(sum(price_of_items))\n",
        "test": "assert solution(input) == \"15950.0\"",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n  a, b, c, d, e = map(int, stdin.split())\n  # Here, we iterate over each order and we order the corresponding dishes at time.\n  # Time 0 means that the order was placed at time a, which means that the dish was delivered at time a\n  # Time 1 means that the order was placed at time b, which means that the dish was delivered at time b\n  # Time 2 means that the order was placed at time c, which means that the dish was delivered at time c\n  # Time 3 means that the order was placed at time d, which means that the dish was delivered at time d\n  # Time 4 means that the order was placed at time e, which means that the dish was delivered at time e\n  # If you want to go back to the order at time a, b, c, d, e, you can use the previous values.\n  time = a\n  # Lets check whether the current time is valid or not\n  while time % 10 == 0:\n    time += 1\n  if time % 10 == 0:\n    time += 1\n  # If it is not, it means that the next time will be going back to the previous time.\n  time = time + 1\n  while time % 10 == 0:\n    time += 1\n  if time % 10 == 0:\n    time += 1\n  # If it is not, we move to the next order.\n  time = time + 1\n  # Lastly, we return the earliest possible time.\n  return str(time)\n\nInput:\n30\n20\n7\n35\n120\n\nOutput:\n215\n\nExplanation:\n- Order ABC Don at time 0, which will be delivered at time 29.\n- Order ARC Curry at time 30, which will be delivered at time 50.\n- Order AGC Pasta at time 50, which will be delivered at time 57.\n- Order ATC Hanbagu at time 60, which will be delivered at time 180.\n- Order APC Ramen at time 180, which will be delivered at time 215.\nThere is no way to order the dishes in which the last dish will be delivered earlier than this.\n\"\"\"\nimport time\n\ndef",
        "test": "assert solution(\"2400\") == \"180\"",
        "num_ids": 1800,
        "indeed": false
    },
    {
        "number": 4360,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    \n    for i in range(N):\n        A += A // 10**i\n        A %= 10**i\n        \n    print(A)\n    return str(A)",
        "test": "assert solution(\"100 10\") == \"7.50001\"",
        "num_ids": 2903,
        "indeed": false
    },
    {
        "number": 4361,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    inputs = [map(int, input().split()) for _ in range(N)]\n    inputs.sort()\n    inputs = inputs[::-1]\n    tree_height = [0 for _ in range(K)]\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                tree_height[inputs[i][0]] += 1\n                tree_height[inputs[j][0]] += 1\n                tree_height[inputs[k][0]] += 1\n    res = [0 for _ in range(K)]\n    for i in range(K):\n        res[i] = max(tree_height[i], tree_height[i] - 1)\n    for j in range(K):\n        res[j] = min(tree_height[j], tree_height[j] + 1)\n    print(res[0])\nsolution(input)\n\n'''\n\n\n\ndef",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 4362,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    alpha_index = 0\n    alphabet = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n    for char in stdin:\n        if char.isalpha():\n            alpha_index += 1\n    if alpha_index == 0:\n        return alphabet[0]\n    else:\n        return alphabet[alpha_index - 1]\n\nprint(solution(\"A\"))\nprint(solution(\"AB\"))",
        "test": "assert solution(\"A\") == \"A\"",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 4363,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    triples = 0\n    for x in range(K):\n        for y in range(K):\n            for z in range(K):\n                if x + y + z == S:\n                    triples += 1\n    print(triples)\n",
        "test": "assert solution(",
        "num_ids": 2297,
        "indeed": false
    },
    {
        "number": 4364,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    def solve(s):\n        \n        \n        def check(s):\n            \n            s = s.replace(':','').replace('-',' ').replace(' ','')\n            if s.isalpha():\n                return s\n            elif len(s) == 1:\n                return s\n            elif s.isdigit():\n                return s\n            else:\n                return \"NA\"\n        \n        \n        answer = ''\n        for i in range(len(s)):\n            if i!= 0:\n                if s[i-1] == 'Y':\n                    answer += 'YY' + solve(s[i:i+2]) + '-'\n                elif s[i-1] == 'M':\n                    answer += 'MM' + solve(s[i:i+2]) + '-'\n                elif s[i-1] == 'A':\n                    answer += 'AM' + solve(s[i:i+2]) + '-'\n                else:\n                    answer += 'NA'\n        return answer\n        \n    answer = ''\n    for _ in range(len(stdin)):\n        answer += solve(stdin[_:_+4])\n        \n    print(answer)\n        \n    return answer\n",
        "test": "assert solution(\"2005\") == \"NA\"",
        "num_ids": 2709,
        "indeed": false
    },
    {
        "number": 4365,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n  return \"\"\n  \n",
        "test": "assert solution(\"4\") == 2",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 4366,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    A,B = [int(i) for i in stdin[0].split(':')]\n    return str(24*A+B)",
        "test": "assert solution(\"9:02\") == \"9\"",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 4367,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    # K = 10\n    # K - K == 10\n    #\n    # K * 10 == N - K\n    # K * 10 - 10 == N - K\n    #\n    # A = N - K + 1, B = N - K - 1\n    #\n    # A * 10 + B == N - K + 1\n    # A * 10 + B - 10 == N - K\n    # A * 10 + B - 10 - 10 == N - K\n    \n    return str(N * R - R * (10 - 2))\n",
        "test": "assert solution(\"2 2919\") == 1619",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 4368,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while n:\n        n //= 10\n        i += 1\n    \n    k = 0\n    for n in range(n, 1, -1):\n        k += i\n    \n    return str(k)\n",
        "test": "assert solution([\"2\", \"5\"]) == \"9\"",
        "num_ids": 2262,
        "indeed": false
    },
    {
        "number": 4369,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(stdin)\n",
        "test": "assert solution('') == ''",
        "num_ids": 1224,
        "indeed": false
    },
    {
        "number": 4370,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 0 and B == 0:\n        return \"Yay!\"\n    elif A == 0:\n        return \"Maybe the cake will come soon\"\n    elif B == 0:\n        return \"Maybe the cake will come soon\"\n    elif A + B == 16:\n        return \"Yay!\"\n    else:\n        return \"Maybe the cake will come soon\"\n\nprint(solution(stdin))\n",
        "test": "assert solution(stdin) == \"Yay!\"",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 4371,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    x = input()\n    result = 0\n    for i in range(len(x)):\n        if i % 3 == 0:\n            result += int(x[i:i+3])\n        else:\n            result += int(x[i])\n    return str(result)\n    '''\n    x = input()\n    result = 0\n    while len(x) > 1:\n        if x[0:2] == '99':\n            return '9999'\n        if x[0:2] == '7':\n            x = x[2:]\n        if x[0] == '7':\n            x = x[1:]\n        if len(x) < 2:\n            return '9999'\n        result += int(x[0:2])\n        x = x[2:]\n    return str(result)\n\ndef",
        "test": "assert solution(\"123456789\") == 0, \"Test case failed\"",
        "num_ids": 2637,
        "indeed": false
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    ret = [0, 0]\n    for _ in range(n):\n        a_list = [int(x) for x in input().split()]\n        for idx in range(2):\n            if a_list[idx] == 0:\n                ret[idx] += 1\n            else:\n                ret[idx] -= 1\n    for idx in range(2):\n        if ret[idx] == 0:\n            ret[idx] = -1\n    return''.join([str(x) for x in ret])",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 1125,
        "indeed": false
    },
    {
        "number": 4373,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [list(map(int, input().strip().split())) for _ in range(n)]\n    k = int(stdin.strip())\n    for i in range(k):\n        b = [list(map(int, input().strip().split())) for _ in range(n)]\n        for j in range(n):\n            for k in range(n):\n                if a[j][k] == 0:\n                    a[j][k] = a[k][j]\n                else:\n                    a[j][k] = max(a[j][k], a[k][j])\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == a[j][i]:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            a[i][j] = max(a[i][j], a[j][i])\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == a[j][i]:\n                a[i][j] = 0\n    return max(a[i][i] for i in range(n))\n",
        "test": "assert solution(stdin) == '3'",
        "num_ids": 2397,
        "indeed": false
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        edges.append((a-1, b-1))\n    return solution_2(edges)\n\n\ndef",
        "test": "assert solution(\"3 2\") == \"1\"",
        "num_ids": 937,
        "indeed": false
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    graph = [[] for i in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    \n    graph = sorted(graph, key=lambda x: x[0] + x[1], reverse=True)\n    \n    count = 0\n    cur = 0\n    for i in graph:\n        if cur >= k:\n            count += 1\n            cur -= i[0]\n            cur += i[1]\n        else:\n            cur += i[0]\n    print(count)\n    \nsolution(input())",
        "test": "assert solution(input) == \"5\"",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a_i = list(map(int, stdin.strip().split()))\n    b_i = list(map(int, stdin.strip().split()))\n    answer = []\n    for i in range(n):\n        answer.append(a_i[i] + b_i[i])\n    return str(max(answer))\n",
        "test": "assert solution(stdin) == '2 13'",
        "num_ids": 2170,
        "indeed": false
    },
    {
        "number": 4377,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(n) for n in stdin.split()]\n    numbers.sort()\n    answer = numbers[:3]\n    answer.sort()\n    answer.insert(0, answer[0])\n    answer.append(answer[1])\n    answer.append(answer[2])\n    return''.join(str(a) for a in answer)\n\n-----Constraints-----\n1 <= stdin.length <= 10^4\nstdin contains integers separated by spaces.\n",
        "test": "assert solution(input()) == '1 1000 1000'",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    print(n//2)\n    if n % 2 == 0:\n        return 'RBGR' + s\n    else:\n        return 'BRB' + s\n\nprint(solution(input()))",
        "test": "assert solution(input()) == '1'",
        "num_ids": 2439,
        "indeed": false
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    a = list(map(int, stdin.split(' ')))\n    k = int(stdin.split(' ')[1])\n    return ''.join(map(str, get_idx_list(n, a, k)))\n\ndef",
        "test": "assert solution(stdin) == str(4)",
        "num_ids": 811,
        "indeed": false
    },
    {
        "number": 4380,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    A, B = map(int, stdin.split())\n    C = A * B\n    if C % 2!= 0:\n        return 'No'\n    return 'Yes'\n",
        "test": "assert solution(a) == \"No\"",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 4381,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    \n    if X > Y:\n        print(X)\n    elif X == Y:\n        print(X)\n    else:\n        print(X-Y)\n    return ''\n",
        "test": "assert solution(",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 4382,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    passwords = []\n    for c in stdin:\n        passwords.append(c)\n    \n    return \"\".join(passwords)\n",
        "test": "assert solution(\"16\"), \"16\"",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 4383,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X % 5 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert solution(\"7\") == \"NO\"",
        "num_ids": 2206,
        "indeed": false
    },
    {
        "number": 4384,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    st = deque(map(int, stdin.split(\" \")))\n    d = deque([0])\n    st_len = len(st)\n    while st:\n        if st.popleft()!= st[0]:\n            if st_len == 3:\n                return chr(st.popleft())\n            st.append(st[0])\n            st_len -= 1\n        d.popleft()\n        d.append(0)\n    return \"ABC\"\n\n\ndef",
        "test": "assert solution(solution) == \"ABC\"",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 4385,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    a, b, d, e = int(inp[0]), int(inp[1]), int(inp[2]), int(inp[3])\n    cnt = 0\n    k = 1\n    \n    for i in range(4, a):\n        if a - i == b - c:\n            cnt += 1\n            k = 0\n        else:\n            if a - i < b - d:\n                cnt += 1\n                k = 0\n            else:\n                k = 1\n    if k == 0:\n        print('Yay!')\n    elif k == 1:\n        print('No')\n    else:\n        print('No')\n        \n",
        "test": "assert solution(input) == \"Yay!\"",
        "num_ids": 2321,
        "indeed": false
    },
    {
        "number": 4386,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    s = []\n    a = 3200\n    for word in stdin:\n        if len(s) == 0 or s[-1] < word:\n            s.append(word)\n        else:\n            s.pop()\n            s.append(word)\n    if len(s) == 0:\n        return \"red\"\n    else:\n        return \"\".join(s)\n",
        "test": "assert solution([\"pink\", \"pink\", \"pink\", \"pink\", \"pink\"]) == \"pink\"",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 4387,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.strip().split()[0])\n    answer = \"\"\n    if R == 0:\n        answer = \"ABC\"\n    elif R == 1:\n        answer = \"ARC\"\n    elif R == 2:\n        answer = \"AGC\"\n    else:\n        answer = \"ARC\"\n    return answer\n",
        "test": "assert solution(\"1000001\") == \"ARC\"",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 4388,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = '9'*n\n    return str(int(s))",
        "test": "assert solution(str(n)) == \"9991\"",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 4389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        a = line.split()\n        a.pop(0)\n        a = \"\".join(a)\n        if len(a) > 100:\n            return a\n    return a\n\nTime : 32 ms\nMemory Usage : 16 MB\n\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == \"bcdaf\"",
        "num_ids": 2366,
        "indeed": false
    },
    {
        "number": 4390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for i in range(int(stdin)):\n        a, b = map(int, stdin.split())\n        res += a * b\n    print(res)\n    return str(res)\n-----Constraints-----\n1 <= t <= 10^4\n1 <= a, b <= 10^9\n\nTime Limit: O(n)\nSpace Limit: O(1)\n\n-----Submissions-----\n7,\n9,\n10,\n11,\n12,\n13,\n14,\n15,\n16,\n17,\n18,\n19,\n20,\n21,\n22,\n23,\n24,\n25,\n26,\n27,\n28,\n29,\n30,\n31,\n32,\n33,\n34,\n35,\n36,\n37,\n38,\n39,\n40,\n41,\n42,\n43,\n44,\n45,\n46,\n47,\n48,\n49,\n50,\n51,\n52,\n53,\n54,\n55,\n56,\n57,\n58,\n59,\n60,\n61,\n62,\n63,\n64,\n65,\n66,\n67,\n68,\n69,\n70,\n71,\n72,\n73,\n74,\n75,\n76,\n77,\n78,\n79,\n80,\n81,\n82,\n83,\n84,\n85,\n86,\n87,\n88,\n89,\n90,\n91,\n92,\n93,\n94,\n95,\n96,\n97,\n98,\n99,\n100,\n101,\n102,\n103,\n104,\n105,\n106,\n107,\n108,\n109,\n110,\n111,\n112,\n113,\n114,\n115,\n116,\n117,\n118,\n119,\n120,\n121,\n122,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,\n123,",
        "test": "assert solution(['2', '3', '4', '5', '6', '7', '8', '9', '10']) == 0",
        "num_ids": 3025,
        "indeed": false
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    he = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n-k+1):\n        res = max(res, sum(he[i:i+k]))\n    return str(res)\n\n-----Constraints-----\n0 <= k <= 5000\n0 <= n <= 10^4\n\n-----Time Limit: 1 min\n\n-----Space Limit: 20 min\n\n-----tips:\ntime complexity: O(n)\nspace complexity: O(1)\n\n-----Algorithm Resolution Limit: 20/10^6\n",
        "test": "assert solution(",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 4392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    p_m = sorted(set(p))\n    answer = ''\n    flag = False\n    for i in range(len(a)):\n        if a[i] in p_m:\n            answer += 'NO'\n            flag = True\n        elif a[i] in p:\n            answer += 'YES'\n            p.remove(a[i])\n            p.append(a[i])\n        else:\n            answer += 'YES'\n    if flag:\n        print(answer)\n    else:\n        print('NO')\n    return answer",
        "test": "assert solution(2) == \"NO\"",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 4393,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    encrypted = str(stdin).split()\n    if len(encrypted) == 1:\n        if 'b' in encrypted[0] or 'a' in encrypted[0]:\n            return encrypted[0]\n    for i in range(1, len(encrypted)):\n        if encrypted[i].islower():\n            encrypted[i] = encrypted[i].swapcase()\n        elif encrypted[i].islower():\n            encrypted[i] = encrypted[i].swapcase()\n    if 'b' in encrypted[-1]:\n        encrypted[-1] = encrypted[-1].swapcase()\n    else:\n        encrypted[-1] = encrypted[-1].swapcase()\n    return ''.join(encrypted)\n",
        "test": "assert solution(\"baabbb\") == \"baabbb\"",
        "num_ids": 2634,
        "indeed": false
    },
    {
        "number": 4394,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    G = [[0 for _ in range(n)] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        G[u - 1][v - 1] = w\n    print(solution(n, m, G))\nsolution(n, m, [[1, 2, 1], [2, 3, 2], [2, 4, 1], [1, 5, 3], [1, 6, 4], [3, 4, 2], [3, 5, 2]])\n",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 4395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(i) for i in stdin.split()]\n    number = int(sum(l) / 3)\n    result = 'R'\n    \n    if number % 3!= 0:\n        result = 'G'\n    \n    if number % 3 == 0:\n        result = 'B'\n        \n    return result\n    \n",
        "test": "assert solution(inp) == \"3\"",
        "num_ids": 2832,
        "indeed": false
    },
    {
        "number": 4396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    x, u = stdin.split(\" \")\n    try:\n        x, u = int(x), float(u)\n        if x >= 1:\n            return round(x * u, -5)\n        if u >= 1:\n            return round((x * u) / (1 + x), -5)\n    except:\n        pass\n    return None\n\n\"\"\"",
        "test": "assert solution(inp) == \"48000.0\"",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 4397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cars = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(1, n-1):\n        for j in range(i+1, n):\n            if j-i == 1:\n                return \"the {}-th car from the front of the train is the {}-th car from the back.\".format(i,j)\n            else:\n                return \"the {}-th car from the front of the train is the {}-th car from the back.\".format(i,j)\n    return \"the {}-th car from the front of the train is the {}-th car from the back.\".format(n,n-1)\n",
        "test": "assert solution([\"5\", \"6\"]) == \"3\"",
        "num_ids": 2616,
        "indeed": false
    },
    {
        "number": 4398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    t = list(stdin)\n    newStr = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            newStr += s[i]\n        else:\n            newStr += t[i]\n    return newStr\n",
        "test": "assert solution(",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 4399,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes'\n    pass",
        "test": "assert solution('ABA') == 'Yes'",
        "num_ids": 2162,
        "indeed": false
    },
    {
        "number": 4400,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    max_rainy_days = 0\n    for i in range(len(stdin)):\n        if stdin[i] == 'S':\n            #print(i)\n            #print(stdin)\n            rainy_days = 1\n            for j in range(i, len(stdin)):\n                #print(j)\n                #print(stdin)\n                if stdin[j] == 'R':\n                    #print(j)\n                    #print(stdin)\n                    rainy_days += 1\n            #print(rainy_days)\n            max_rainy_days = max(max_rainy_days, rainy_days)\n    #print(max_rainy_days)\n    return str(max_rainy_days)\n\nprint(solution('RRS'))\nprint(solution('RSRR'))\nprint(solution('RRRR'))",
        "test": "assert solution(\"LLLL\"), \"Expected to find 3, got 3\"",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 4401,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    b = int(stdin.split(' ')[1])\n    a = int(stdin.split(' ')[2])\n    for i in range(0,n):\n        if a > 0:\n            a = a - 1\n            a = a + b\n            a = a + 1\n        elif a < 0:\n            a = a + b\n            a = a + 1\n        elif a == 0:\n            a = a + b\n            a = a + 1\n        if a >= 0 and a < n:\n            a = a + 1\n        print(a)\n    return str(a)\n\nprint(solution(\"3 1 2\"))\n",
        "test": "assert solution(\"2 3 3\"), \"The boxes contain an integer\"",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 4402,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = map(int,stdin.split())\n    if n % 2 == 0:\n        a = a + a\n    if n % 2 == 1:\n        b = b + b\n    if a < b:\n        answer = n/2 + a/2 + b/2\n        return str(answer)\n    else:\n        answer = a/2 + b/2 + a/2\n        return str(answer)\n",
        "test": "assert solution(\".#...#....#..\") == 500",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 4403,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    \n    for s in stdin.split():\n        if s == \"++\":\n            tmp = int(s) + 1\n            print(tmp)\n        elif s == \"-++\":\n            tmp = int(s) - 1\n            print(tmp)\n        else:\n            tmp = int(s)\n            print(tmp)\n        \n        if tmp == -1:\n            print(-1)\n        elif tmp == 0:\n            print(0)\n        else:\n            print(tmp)\n    return \"\"\n",
        "test": "assert solution('-++') == '1'",
        "num_ids": 2337,
        "indeed": false
    },
    {
        "number": 4404,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if int(s[0]) < 2019:\n        return s[0] +'' + s[1] +'' + s[2] +'' + s[3] +'' + s[4]\n    else:\n        return 'BND'\n",
        "test": "assert solution(\"2019/04/30\") == \"BPT\"",
        "num_ids": 3274,
        "indeed": false
    },
    {
        "number": 4405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    p,q = map(int,stdin.split())\n    \n    if p > q:\n        p,q = q,p\n    \n    if q > n:\n        return \"no\"\n    \n    if p % (2*q) > n:\n        return \"no\"\n    \n    dp = [0]*n\n    for i in range(2*q):\n        if i % (2*q) == 0:\n            dp[i//(2*q)] = 1\n            \n    for i in range(p):\n        dp[i+q*(2*p-i)] += 1\n        \n    answer = [0]*n\n    \n    for i in range(q):\n        answer[i*(2*p-i)] = 1\n        \n    for i in range(p,n):\n        answer[i] = dp[i-q]\n    \n    return str(answer.count(max(answer)))\n\nInput\n5\n3\n3 2 2 1 1 3 3 3 2 3 1 3 3 1\n\nOutput\n3\n\nInput\n3\n2\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n\nOutput\n2\n\nInput\n3\n1\n2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\nOutput\n1\n\nInput\n2\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3",
        "test": "assert solution(stdin) == '14'",
        "num_ids": 5533,
        "indeed": false
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n, k = int(data[0]), int(data[1])\n    if n < 0 or k < 0:\n        return 'NO'\n    id_1 = data[2]\n    id_2 = data[3]\n    temp = []\n    for i in range(0, n):\n        temp.append(str(i + 1))\n    for i in range(0, k):\n        temp.append(id_1 +'' + id_2 +'' + str(i + 1))\n    print(temp)\n    return''.join(temp)\n\n1 3 2 3 1 1 2 1 2 3 3\n\n2 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3",
        "test": "assert solution(1, 5) == \"3\"",
        "num_ids": 3099,
        "indeed": false
    },
    {
        "number": 4407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = map(int, stdin.split())\n    a.sort()\n    b = [0] * q\n    for i in range(q):\n        b[i] = a[i]\n    for j in range(q):\n        for i in range(n):\n            if j < b[i]:\n                a[i] -= b[i]\n    return \"\".join([str(x) for x in a])\n\nprint(solution(stdin))\n\ndef",
        "test": "assert solution(",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 4408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    f = int(stdin[1])\n    c = list(map(int, stdin[2:].split()))\n    n = int(stdin[0])\n    k = int(stdin[1])\n    h = int(stdin[0])\n    h_t = (k-1)*h\n    result = 0\n    result = sum(c[:f]) + sum(c[f:])\n    return str(result)\n\ndef",
        "test": "assert solution(\"3 3 2\") == \"0\"",
        "num_ids": 2147,
        "indeed": false
    },
    {
        "number": 4409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    if n == 1 and m == 1:\n        return \"1\"\n    if k > n // 2:\n        return \"2\"\n    s = ''\n    for i in range(n - k):\n        j = i + k\n        if j > n:\n            break\n        for i in range(j, j + m):\n            if arr[i] == 1:\n                s += '1'\n            else:\n                s += '2'\n    print(s)\n    return s\n-----Constraints-----\n1 <= n <= 2^6\n1 <= m <= n^2\n1 <= k <= n\n\nC++\n\n-----Submissions-----\n\nInput\n\nThe first line contains an integer, $n$ \u2014 the number of elements in $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ (0 \\le a_i \\le 2^5), where $a_i$ is the $i$-th element of $a$.\n\nThe third line contains a single integer $k$ \u2014 the minimum number of operations required to obtain the array of equal elements.\n\nThe fourth line contains $k$ lines, where $p$-th operation should be printed as a triple of integers $(t_p, i_p, j_p)$, where $t_p$ is either $1$ or $2$ ($1$ means that you perform the operation of the first type, and $2$ means that you perform the operation of the second type), and $i_p$ and $j_p$ are indices of adjacent elements of the array such that $1 \\le i_p, j_p \\le n$, $|i_p - j_p| = 1$. See the examples for better understanding.\n\nThe fifth line contains $k$ lines, where $t_p$ is either $1$ or $2$ ($1$ means that you perform the operation of the first type, and $2$ means that you perform the operation of the second type), and $i_p$ and $j_p$ are indices of adjacent elements of the array such that $1 \\le i_p, j_p \\le n$.\n\nNote that after each operation each element of the current array should not exceed $10^18$ by absolute value.\n\n\"\"\"",
        "test": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"2\"",
        "num_ids": 2655,
        "indeed": false
    },
    {
        "number": 4410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    #print(n, k)\n    if n+2*k <= 2*10**5:\n        return 0\n    s = stdin.split()\n    #print(s)\n    free = 0\n    occupied = 0\n    for i in range(n):\n        #print(i, s[i])\n        if s[i] == \"0\":\n            occupied += 1\n        elif s[i] == \"1\":\n            free += 1\n            \n        if free+2*k < n+2*k:\n            free = n+2*k - free\n            break\n    \n    if free < 0:\n        return 0\n    if occupied >= 2*k:\n        return 0\n    else:\n        return free",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 1261,
        "indeed": false
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = [list(map(int, stdin.split())) for _ in range(n)]\n    # segments.sort()\n    # k = max([len(x) for x in segments])\n    # print(k)\n    p1, p2 = map(int, stdin.split())\n    print(min(p1,p2))\n    print(sorted(p1,key=lambda x:x)[0])\n    for i in range(1,k+1):\n        for j in range(i):\n            if segments[j][0] <= segments[i][0] and segments[j][1] <= segments[i][1]:\n                segments[j][0], segments[i][0] = min(segments[j][0],segments[i][0]), max(segments[j][0],segments[i][0])\n                segments[j][1], segments[i][1] = min(segments[j][1],segments[i][1]), max(segments[j][1],segments[i][1])\n                print(segments)\n                \n    for i in range(len(segments)):\n        if (segments[i][0] <= p1 and segments[i][1] <= p2):\n            print(i+1,segments[i][1])\n            return (i+1,segments[i][1])\n    return str(0)\n\nprint(solution(stdin))",
        "test": "assert solution(\"2 3\") == \"4\"",
        "num_ids": 1083,
        "indeed": false
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = n - 1\n    max_prettiness = 0\n    while q:\n        prettiness = 0\n        max_prettiness += max(list(map(lambda x: x * (x + 1), range(1, q + 1))))\n        q -= 1\n    return str(max_prettiness)\n\nprint(solution(input()))\n",
        "test": "assert solution(stdin) == \"30\"",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 4413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    L = [int(stdin.strip().split()[i]) for i in range(1, N + 1)]\n    M = max(L)\n    n = len(L)\n    for i in range(1, n):\n        if sum(L[:i]) < M:\n            return 'NO'\n    print('YES')\n    return 'YES'",
        "test": "assert solution('4 4 99 100') == '2'",
        "num_ids": 3998,
        "indeed": false
    },
    {
        "number": 4414,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, b, q = map(int, stdin.split())\n    S = int(stdin.split()[q-1])\n    if (b - 1) * n + (q - 1) * S < b * n:\n        return 'NO'\n    n = b * n\n    if n < S < b * n:\n        return 'YES'\n    return 'NO'\n",
        "test": "assert solution(stdin) == 'NO'",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 4415,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if any(map(lambda x: all(a > b for a, b in zip(x, x[1:])), map(str, [a for a in stdin.split()]))) else 'NO'\n",
        "test": "assert solution(\"2\") == \"YES\"",
        "num_ids": 2118,
        "indeed": false
    },
    {
        "number": 4416,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    books.sort()\n    # select the books that they can read\n    for i in range(k):\n        books[i] -= books[i-1]\n    # minumum time\n    t_i = books[0]\n    for i in range(k):\n        # get the books that can read\n        books[i] -= books[i]\n        books[i] -= t_i\n        t_i = books[i]\n    # get the books that need to be read\n    for i in range(k):\n        books[i] -= t_i\n    # minumum time\n    for i in range(len(books)):\n        # if the books have a time\n        if books[i] <= 0:\n            return str(-1)\n        # if the books have a time\n        elif books[i] == 0:\n            # get the books that have a time\n            for j in range(i, len(books)):\n                if books[j] >= 0:\n                    return str(j)\n            return str(i)\n        else:\n            # if the books have a time and the books have a time\n            # it must be smaller than the books that are read\n            if books[i] <= 0:\n                for j in range(i, len(books)):\n                    if books[j] >= 0:\n                        return str(j)\n            else:\n                # get the books that have a time\n                for j in range(i, len(books)):\n                    if books[j] >= 0:\n                        break\n                books[i] = books[i] - books[j]\n                books[j] = 0\n        t_i = books[i]\n    # if no solution, just return -1\n    return str(0)\n\ndef",
        "test": "assert solution(stdin) == -1",
        "num_ids": 989,
        "indeed": false
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # The price of each product is at most $k$\n    price = [int(i) for i in stdin.split()]\n    def solve(start, k, price, i, res):\n        if k == 1:\n            if i == n:\n                if res < price:\n                    res = price\n            return\n        if res < price[i]:\n            return\n        res = price[i]\n        for j in range(i+1, i+k+1):\n            solve(j, k-1, price, i+1, res)\n    solve(1, k, price, 1, 0)\n    return str(res)\n    \n    # k = (k - 1) * (k - 1) + 2\n    # # What to do if no solution is found\n    # if not res:\n    #     return -1\n    # # Three conditions that must be satisfied\n    # if k >= (n - 1) * (n - 1):\n    #     return res + k * (k - 1) * (k - 1)\n    # # Solution\n    # return res + ((n - 1) * k * (k - 1) - (n - 1) * k) * (k - 1) * (k - 1)\n\nTime Limit Exceeded\nDifficulty : Medium\n\nInput\n5\n5\n1 1 2 3 1\n5 2\n4 5 8 5\n3 5\n3 2 5\n\nOutput\n8\n4\n\nExplanation\nThe prices are (3, 1, 1), (3, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), and (3, 1, 1).\nThe old price of each product is 2, and the new price of each product is 3. The prices of products $1, $2, $3, $4, $5, $6, $7, $8 are: 2, 3, 4, 5, 6, 7, 8. So, the maximum possible equal price of products $1, $2, $3, $4, $5, $6, $7, $8 is $7$ (the one with the highest difference).\n\nInput\n5\n4\n4 2 3 1\n4 2 3 1\n1 3 2 4\n1 3 2 4\n\nOutput\n3\n\nExplanation\nThe prices are (4, 1, 1), (4, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), and (4, 1, 1).\nThe old price of each product is 2, and the new price of each product is 3. The prices of products $4, $2, $2, $1, $1, $1, and $1 are: 2, 1, 1, 4, 2, 2. So, the maximum possible equal price of products $4, $2, $2, $1, $1, $1, and $1 is $1$ (the one with the highest difference).\n\n\"\"\"\nclass Solution:\n    def maxEqualPrice(self, prices: List[int]) -> int:\n        # print(prices)\n        # time complexity: O(n * k)\n        # space complexity: O(n * k)\n        # result = 0\n        # for i in range(0, len(prices)):\n        #     for j in range(0, len(prices)):\n        #         # print(prices[i])\n        #         if prices[j] > prices[i]:\n        #             result = max(result, prices[j] - prices[i])\n        #         else:\n        #             continue\n        # return result\n        # Runtime: 44 ms, faster than 84.41% of Python3 online submissions for Maximum Equal Price.\n        # Memory Usage: 14.8 MB, less than 96.69% of Python3 online submissions for Maximum Equal Price.\n        def solve(start, end, price, i, res):\n            if i == end:\n                if res < price:\n                    res = price\n                return\n            if res < price[i]:\n                return\n            res = price[i]\n            for j in range(i + 1, end + 1):\n                solve(j, end, price, i + 1, res)\n        res = 0\n        solve(1, len(prices) * len(prices), prices, 1, res)\n        return res\n",
        "test": "assert solution(\"4 3\") == \"2\"",
        "num_ids": 1817,
        "indeed": false
    },
    {
        "number": 4418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert solution(str(12) + str(5) + str(6) + str(7) + str(8) + str(9) + str(10) + str(11) + str(12)) == str(0)",
        "num_ids": 2055,
        "indeed": false
    },
    {
        "number": 4419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    \n    def get_b():\n        b = set()\n        for c in stdin:\n            if c == \" \":\n                continue\n            b.add(int(c))\n        return b\n\n    def get_a():\n        a = set()\n        for c in stdin:\n            if c == \" \":\n                continue\n            a.add(int(c))\n        return a\n\n    def get_answer(a, b):\n        a = sorted(a)\n        b = sorted(b)\n        ans = 0\n        for k in range(1, 10):\n            if k not in a or k not in b:\n                continue\n            while k in a and k not in b:\n                k -= 1\n            if k not in a:\n                continue\n            while k in b and k not in a:\n                k -= 1\n            ans += k\n        return ans\n\n    a = get_a()\n    b = get_b()\n    answer = get_answer(a, b)\n    print(answer)\n    return answer\n-----Example-----\nInput\n6\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n\nOutput\n0\n3\n2\n92\n87654322\n9150\n\n\n\n-----Note-----\n\nIn the first test case, the sequence of moves in order of increasing $a$ and $b$ can be seen as the following: $a = 13 \\rightarrow 23 \\rightarrow 32 \\rightarrow 42$ (add $10$, add $9$, add $10$).\n\nIn the second test case, the sequence of moves in order of increasing $a$ and $b$ can be seen as the following: $a = 18 \\rightarrow 10 \\rightarrow 4$ (subtract $8$, subtract $6$).\n\nIn the third test case, the sequence of moves in order of increasing $a$ and $b$ can be seen as the following: $a = 13 \\rightarrow 23 \\rightarrow 4$ (add $10$, add $9$, add $10$).\n\nIn the fourth test case, the sequence of moves in order of increasing $a$ and $b$ can be seen as the following: $a = 18 \\rightarrow 4$ (subtract $8$, subtract $6$).\ndef",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 3490,
        "indeed": false
    },
    {
        "number": 4420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    k = int(stdin.strip())\n    n = len(stdin.strip().split(' ')) - 2\n    answer = 0\n    \n    for i in range(1, n+1):\n        for j in range(1, int(stdin.strip().split(' ')[i])+1):\n            answer = max(answer, int(stdin.strip().split(' ')[j]) % j)\n        \n    return str(answer)\n\n\ndef",
        "test": "assert solution('3'), '3'",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    #Bfs\n    candies = [0]*n\n    visited = [0]*n\n    queue = []\n    \n    for _ in range(n):\n        current = list(map(int, stdin.split()))\n        visited[current[0]] = 1\n        candies[current[0]] = current[1]\n        if not queue:\n            queue.append(current[0])\n        \n        for i in range(k):\n            if visited[i] == 0:\n                candies[i] += current[1]\n                visited[i] = 1\n                if i == k-1:\n                    queue.append(i)\n                \n    \n    \n    \n    candies = list(set(candies))\n    candies.sort()\n    \n    return str(len(candies))\n",
        "test": "assert solution(stdin) == '4'",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 4422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    def lower(k: int, s: str) -> str:\n        result = \"\"\n        for c in s:\n            if c.islower():\n                result += c.lower()\n            else:\n                result += c\n        return result\n\n    N, K = map(int, stdin.split())\n    S = stdin.split()[1]\n    print(\"\".join(lower(K, S)))\n",
        "test": "assert solution([\"a\",\"b\",\"c\"]) == \"abc\"",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 4423,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, sorted(int(stdin) for stdin in stdin.split())))\n",
        "test": "assert solution(\"kazan 35\") == \"1 2 10 3\"",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 4424,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N == 1:\n        return 'No'\n    elif N == 2:\n        return 'Yes'\n    \n    def sol(coins, t):\n        if t == 0:\n            return 'Yes'\n        elif coins == 0:\n            return 'No'\n        elif coins > 0 and t == 1:\n            return 'Yes'\n        else:\n            if coins >= N:\n                return sol(coins // N, t - 1)\n            return 'No'\n        \n    return sol(K, N)\n",
        "test": "assert solution(\"2 900\") == \"Yes\"",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 4425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(round(k / n * (1 - k / n) ** (1 / n)))\n\n\"\"\"\n",
        "test": "assert solution(['2','2','3']) == '0'",
        "num_ids": 2114,
        "indeed": false
    },
    {
        "number": 4426,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    days = 0\n    for i in range(0,len(stdin)):\n        if stdin[i] == \"S\":\n            days += 1\n    return days\n",
        "test": "assert solution('SUN') == 1, \"We have a problem.\"",
        "num_ids": 1458,
        "indeed": false
    },
    {
        "number": 4427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    r, D = map(int, stdin.split(' '))\n    for i in range(2001, 2011):\n        x = r - D\n        if x <= 0:\n            break\n        print(x)",
        "test": "assert solution(\"2 10 20\") == \"170\"",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 4428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = list(map(int, stdin.strip().split()))\n    a, b = 0, 0\n    c = 0\n    for i in range(n):\n        if d[i] == 0:\n            a += 1\n        elif d[i] == 1:\n            b += 1\n        elif d[i] == 2:\n            c += 1\n    if a == 0 and b == 0 and c == 0:\n        return '0'\n    if a == 0 and c == 0:\n        return str(b + 1)\n    if a == 0 and b == c:\n        return '0'\n    if a == b and a == c:\n        return str(c)\n    return '0'\n'''\nclass Solution:\n    def countSubstrings(self, s: str) -> int:\n        return sum(s.count(d) for d in range(1, len(s) + 1) if s.count(d) > 0)\n'''\ndef",
        "test": "assert solution(stdin) == \"4\"",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 4429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split(\" \")[0])\n    for case in range(t):\n        n = list(map(int, input().split(\" \")))\n        a, b, c = sorted(n)\n        if a + b > c or b + c > a or a + c > b:\n            continue\n        print(\"NO\")\n        break\n    else:\n        print(\"YES\")\n",
        "test": "assert solution(2,3,5,10) == \"NO\"",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 4430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a_1 = n\n    a_2 = n + m\n    s = set(range(1, a_2 + 1))\n    for _ in range(k):\n        s.remove(a_2 - (a_1 + 1))\n        a_2 = a_2 - 1\n    s = sorted(list(s))\n    answer = str(len(s))\n    return answer\n\nsolution(\"5 5\")\n",
        "test": "assert solution(stdin) == \"4\"",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 4431,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s):\n        count = 0\n        for letter in s:\n            if letter.isalpha():\n                if letter.isupper():\n                    count += 1\n                else:\n                    if count == 1:\n                        return False\n                    count -= 1\n        if count == 0:\n            return True\n        return False\n    \n    def is_valid_substring(s):\n        sub_sub_sub_sub = []\n        for s_sub_sub in s:\n            for s_sub_sub_sub in s_sub_sub:\n                if s_sub_sub_sub not in s_sub_sub_sub:\n                    return False\n            if s_sub_sub_sub not in sub_sub_sub_sub:\n                sub_sub_sub_sub.append(s_sub_sub_sub)\n        return True\n    \n    def is_valid_substring_substring(s_sub_sub):\n        for s_sub_sub_sub in s_sub_sub:\n            if is_valid_substring_substring(s_sub_sub_sub):\n                return True\n        return False\n        \n    def get_sub_sub_sub(s, s_sub_sub):\n        for s_sub_sub in s_sub_sub:\n            if s_sub_sub in s:\n                return s_sub_sub\n        return ''\n        \n    def get_sub_sub_subs(s, s_sub_sub):\n        for s_sub_sub_sub in s_sub_sub:\n            if is_valid_substring(s_sub_sub_sub):\n                sub_sub_sub_sub = get_sub_sub_sub(s, s_sub_sub_sub)\n                if sub_sub_sub_sub:\n                    return sub_sub_sub_sub\n        return ''\n        \n    def get_sub_sub_subs_sub(s, s_sub_sub):\n        if s_sub_sub in s:\n            return s_sub_sub\n        else:\n            for s_sub_sub_sub in s_sub_sub:\n                if is_valid_substring(s_sub_sub_sub):\n                    sub_sub_sub_sub = get_sub_sub_sub(s, s_sub_sub_sub)\n                    if sub_sub_sub_sub:\n                        return sub_sub_sub_sub\n            return ''\n        \n    \n    for k in range(26):\n        if is_valid(stdin):\n            sub_sub_sub = get_sub_sub_subs(stdin, stdin[::-1])\n            if not sub_sub_sub:\n                sub_sub_sub = get_sub_sub_sub(stdin, stdin[::-1])\n            if sub_sub_sub:\n                return sub_sub_sub\n    return 0\n",
        "test": "assert solution(\"b\") == 0",
        "num_ids": 2965,
        "indeed": false
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    \n    result = 0\n    # Compute the maximum sum of alternating subsequences\n    # by size.\n    for i in range(n):\n        # For each element of the current subsequence,\n        # if the value is negative, add it to the result,\n        # otherwise, do not add.\n        for j in range(i):\n            if a[j] < 0:\n                result += a[j]\n            else:\n                result -= a[j]\n        \n        # Check if the sum of a[i] and a[i+1] is too big,\n        # if not add them, otherwise, decrement the result.\n        if result > 0:\n            result -= a[i]\n        else:\n            result += a[i]\n    \n    # Return the answer.\n    return str(result)\n\n\"\"\"\ndef",
        "test": "assert solution('6') == '6'",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    edges.sort()\n    print(len(edges))\n    return edges[0][0] + edges[1][0] + edges[2][0] + edges[3][0] + edges[4][0] + edges[5][0] + edges[6][0] + edges[7][0] + edges[8][0]\n\ndef",
        "test": "assert solution(8,6) == 1",
        "num_ids": 1284,
        "indeed": false
    },
    {
        "number": 4434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(lambda n: abs(n**2 - n), map(int, stdin.split()))))\n\n-----Code-----\nt = int(stdin.strip())\nfor _ in range(t):\n    n = int(stdin.strip())\n    print(str(min(map(lambda n: abs(n**2 - n), map(int, stdin.split()))))\n    )\n",
        "test": "assert solution(4) == 40",
        "num_ids": 2487,
        "indeed": false
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    d = [0 for _ in range(n)]\n    d[0] = 1\n    d[1] = 1\n    d[2] = 1\n    for i in range(3, n):\n        if a[i] % 2 == 1:\n            d[i] = (d[i - 1] + 1) % 2\n        else:\n            d[i] = (d[i - 1] - 1) % 2\n    return ''.join(map(str, d))\n",
        "test": "assert solution(stdin) == -1",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 4436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    number_str = stdin.split()\n    for i in range(len(number_str)):\n        if not number_str[i].isdigit():\n            print(\"NO\")\n            return \"NO\"\n        else:\n            a = int(number_str[i])\n            b = int(number_str[i+1])\n            c = int(number_str[i+2])\n            if a*b*c == n:\n                print(\"YES\")\n                return \"YES\"\n    print(\"NO\")\n    return \"YES\"",
        "test": "assert solution(\"2 5 7 3\") == \"NO\"",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 4437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = list(stdin.strip())\n    \n    def build(l: list) -> list:\n        \n        for i in range(0, len(l), 2):\n            l[i] = l[i].upper()\n        \n        return l\n    \n    def prefixes(l: list) -> list:\n        \n        l_new = []\n        \n        for i in range(0, len(l), 2):\n            l_new.append(l[i])\n        \n        return l_new\n        \n    def is_first(s: list, l: list) -> bool:\n        \n        for i in range(len(s)):\n            if s[i] in l:\n                return False\n        \n        return True\n        \n    def is_last(s: list, l: list) -> bool:\n        \n        for i in range(len(s)-1, -1, -1):\n            if s[i] in l:\n                return False\n        \n        return True\n        \n    def count_a(l: list) -> int:\n        \n        count = 0\n        \n        for i in range(len(l)):\n            if l[i] in ['a', 'b']:\n                count += 1\n        \n        return count\n        \n    def count_b(l: list) -> int:\n        \n        count = 0\n        \n        for i in range(len(l)):\n            if l[i] in ['a', 'b']:\n                count += 1\n        \n        return count\n        \n    def count_last(l: list) -> int:\n        \n        count = 0\n        \n        for i in range(len(l)-1, -1, -1):\n            if l[i] in ['a', 'b']:\n                count += 1\n        \n        return count\n        \n    def count_first(l: list) -> int:\n        \n        count = 0\n        \n        for i in range(len(l)-1, 0, -1):\n            if l[i] in ['a', 'b']:\n                count += 1\n        \n        return count\n        \n    if is_first(l, l):\n        return 1\n    if is_last(l, l):\n        return 1\n    if is_last(l, ['a', 'b']) or is_last(l, ['b', 'a']):\n        return 1\n    if is_first(l, l):\n        return 2\n    if is_last(l, l):\n        return 2\n    if is_first(l, ['a', 'b']) and is_last(l, ['a', 'b']):\n        return 2\n    if is_first(l, ['a', 'b']) and is_last(l, ['b', 'a']):\n        return 2\n    if is_first(l, ['a', 'b']):\n        return 1\n    if is_first(l, ['b', 'a']):\n        return 1\n    if is_last(l, ['a', 'b']):\n        return 1\n    if is_last(l, ['b', 'a']) and is_last(l, ['a', 'b']):\n        return 2\n    if is_first(l, ['a', 'b']) and is_last(l, ['b', 'a']):\n        return 2\n    if is_first(l, ['a', 'b']) and is_last(l, ['b', 'a']):\n        return 2\n    if is_first(l, ['a', 'b']):\n        return 1\n    if is_last(l, ['a', 'b']) and is_last(l, ['b', 'a']):\n        return 2\n    \n    if n % 2 == 0:\n        return 2\n    else:\n        return 1\n        \n        \n    \n",
        "test": "assert solution(\"ab\") == \"ba\"",
        "num_ids": 2930,
        "indeed": false
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(sorted(map(int, stdin.split()))))\n",
        "test": "assert solution(stdin) == '9'",
        "num_ids": 3302,
        "indeed": false
    },
    {
        "number": 4439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1:\n    answer = input()\n    if answer == \"2\":\n        return \"2\"\n    elif answer == \"3\":\n        return \"3\"\n    else:\n        return \"4\"\n\n### Code Start\nimport sys\n",
        "test": "assert solution(input('Question 5')) == '2'",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 4440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(int(stdin))+10**-6)",
        "test": "assert solution(stdin),'solution() failed; expected: \\'18.0\\''",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 4441,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 1:\n        return 'Hello World'\n    if N == 2:\n        return str(A+B)\n    if N % 2 == 0:\n        return solution(str(A)+\"+\"+solution(str(B)))\n    else:\n        return solution(str(A)+\"-\"+solution(str(B)))",
        "test": "assert solution(\"1\") == \"Hello World\"",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 4442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a == b:\n        return '3333'\n    return '444' if a > b else '444' if a < b else '333'\n\n\n'''\nimport math\ndef",
        "test": "assert solution(stdin) == '444'",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 4443,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    c=list(stdin)\n    for i in range(1,len(c)):\n        if c[i][0]!='c':\n            return c[i]\n    return c[0]\n",
        "test": "assert solution([\"b\", \"a\"]) == \"a\"",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 4444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    n = len(s)\n    s.sort()\n    t = s[n - 1] + s[n]\n    s[n - 1] = t\n    for i in range(n - 2, -1, -1):\n        s[i] = s[i + 1] + s[i]\n    return ''.join(s)\n\n\n\"\"\"\nRuntime: 72 ms\nMemory Usage: 13.6 MB\n\nclass Solution:\n    def concatenate(self, string):\n        string = list(string)\n        for i in range(len(string)):\n            string[i] = string[i].lower()\n        return ''.join(string)\n\"\"\"\n",
        "test": "assert solution(\"dog\") == \"dgg\"",
        "num_ids": 2475,
        "indeed": false
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    answer = 0\n    while True:\n        a.remove(0)\n        if sum(a) == 0:\n            break\n        answer += 1\n    return str(answer)\n\nInput\n6\n2\n1 1000000 3 4\n\nOutput\n1\n\"\"\"\nimport math\n\ndef",
        "test": "assert solution(\"6 7 2 1\") == \"1000000\"",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 4446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    return str(solution_1(n, a, b, k))\n    \ndef",
        "test": "assert solution('1 1 100 99') == '5'",
        "num_ids": 2143,
        "indeed": false
    },
    {
        "number": 4447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip().split()[0])\n    m = int(stdin.strip().split()[1])\n    a_list = list(map(int, stdin.strip().split()[2:]))\n    for _ in range(m):\n        a_list.remove(a_list[0])\n    c_list = list(map(int, input().split()))\n    \n    count = 0\n    for i in range(len(c_list)):\n        for j in range(m):\n            if c_list[j] % a_list[j] == 0:\n                count += 1\n    \n    print(count)\n    return str(count)",
        "test": "assert solution('2 10 8 5 3 9') == '3 2 3 4'",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 4448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    k_i = list(map(int, stdin.split()))\n    k_i = sorted(k_i)\n    d_j = [i for i in range(1, len(k_i)+1)]\n    for i in range(len(d_j)):\n        if i == len(d_j)-1:\n            break\n        if d_j[i] > m:\n            d_j[i] = m\n    t_j = [i for i in range(len(d_j))]\n    if d_j[0] >= 2 and d_j[1] >= 2:\n        for i in range(len(t_j)-1):\n            for j in range(i+1, len(t_j)-1):\n                d_j[t_j[i]] = max(d_j[t_j[j]], d_j[t_j[i]]+k_i[t_j[i]])\n    if d_j[0] < 2 and d_j[1] < 2:\n        for i in range(len(t_j)-1):\n            for j in range(i+1, len(t_j)-1):\n                t_j[t_j[i]] = max(t_j[t_j[j]], d_j[t_j[j]])\n    if d_j[0] < 2:\n        for i in range(len(d_j)-1):\n            for j in range(i+1, len(d_j)-1):\n                d_j[j] = max(d_j[j], k_i[i]+t_j[j])\n    print(min(d_j))\n    return \"\"\n\n\n'''\n\ndef",
        "test": "assert solution(\"3 3\") == \"2\"",
        "num_ids": 2675,
        "indeed": false
    },
    {
        "number": 4449,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin.strip())\n    q = int(stdin.strip())\n    \n    if q!= N * 4:\n        return \"NO\"\n    else:\n        result = []\n        \n        for i in range(q):\n            x, y, a, b = map(int, stdin.strip().split())\n            result.append([x, y, a, b])\n        \n        result = sorted(result, key = lambda x: (x[1], x[2], x[3], x[0]))\n        \n        for i in range(q):\n            \n            if result[i][0]!= result[i][2]:\n                return \"NO\"\n        \n        return \"YES\"\n",
        "test": "assert solution(\"5\") == \"NO\"",
        "num_ids": 1103,
        "indeed": false
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    edges = []\n    for _ in range(N - 1):\n        A, B = map(int, stdin.split())\n        edges.append((A, B, 1))\n        edges.append((B, A, 1))\n    edges = sorted(edges, key=lambda x: x[2])\n    n = len(edges)\n    k = int(stdin.split()[-1])\n    if k <= n:\n        return \" \".join([str(n - 1 - i) for i in range(k)])\n    else:\n        return \"0\"",
        "test": "assert solution(stdin), \"false\"",
        "num_ids": 1795,
        "indeed": false
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, *students = map(int, stdin.split())\n    res = 0\n    res += len(set(map(lambda x: x-1, range(students[0], students[0]+students[1]))))*2\n    res += len(set(map(lambda x: x-1, range(students[1], students[1]+students[2]))))*2\n    for i in range(students[0], students[0]+students[1]):\n        res += sum(map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map(lambda x: x-1, map",
        "test": "assert solution(input()) == 10",
        "num_ids": 1766,
        "indeed": false
    },
    {
        "number": 4452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    #remove the extra spaces\n    return''.join(map(str, map(int, stdin.split())))\n",
        "test": "assert solution([\"100\",\"1\",\"3\",\"7\",\"10\"]) == \"3\", \"1:2\"",
        "num_ids": 958,
        "indeed": false
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    \n    p = []\n    q = []\n    for i in range(int(stdin.strip())):\n        a, b, c = map(int, input().split())\n        p.append(a)\n        q.append(b)\n    n = len(p)\n    answer = [0 for _ in range(n)]\n    i = 0\n    #p\uc5d0\uc11c p[i]\uc758 \uae38\uc774\n    while i < n:\n        answer[i] = p[i]\n        i += 1\n        if i+1 < n:\n            answer[i] += p[i+1]\n    #q\uc5d0\uc11c q[i]\uc758 \uae38\uc774\n    i = 0\n    while i < n:\n        answer[i] += q[i]\n        i += 1\n        if i+1 < n:\n            answer[i] += q[i+1]\n    return str(max(answer))\n\"\"\"\n\n\nclass Solution:\n    def kid_return_back(self, p, q):\n        def dfs(p, q, answer, depth, n):\n            if depth == n:\n                return answer\n            if p == q:\n                return 0\n            for i in range(p, q+1):\n                answer[depth] = i\n                dfs(p, i, answer, depth+1, n)\n\n        answer = [0 for _ in range(len(p))]\n        dfs(p, q, answer, 0, len(p))\n        return str(answer)\n\n\n    def answer(self, stdin, q):\n        p = []\n        q = []\n        for i in range(int(stdin.strip())):\n            a, b, c = map(int, input().split())\n            p.append(a)\n            q.append(b)\n        n = len(p)\n        answer = [0 for _ in range(n)]\n        i = 0\n        #p\uc5d0\uc11c p[i]\uc758 \uae38\uc774\n        while i < n:\n            answer[i] = p[i]\n            i += 1\n            if i+1 < n:\n                answer[i] += p[i+1]\n        #q\uc5d0\uc11c q[i]\uc758 \uae38\uc774\n        i = 0\n        while i < n:\n            answer[i] += q[i]\n            i += 1\n            if i+1 < n:\n                answer[i] += q[i+1]\n        return self.kid_return_back(p, q)\n",
        "test": "assert solution == \"1 1 1 1 1 1\"",
        "num_ids": 1163,
        "indeed": false
    },
    {
        "number": 4454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    data = list(map(int,stdin.strip().split()))\n    if n == 1:\n        return str(data[0])\n    elif n == 2:\n        return str(min(data))\n    else:\n        a = data[0]\n        b = data[1]\n        c = data[2]\n        d = data[3]\n        if (b*c) <= (a+d):\n            return str(a + d - (b*c))\n        else:\n            return str(a + b*c)\n\n\n\n-----Constraints-----\n1 <= n <= 10^4\n1 <= a_i <= 10^7\n\n\"\"\"\n\nimport sys\n\nq = int(sys.stdin.readline().strip())\nfor _ in range(q):\n    n = int(sys.stdin.readline().strip())\n    a = [int(i) for i in sys.stdin.readline().strip().split()]\n    print(a[0] + a[1]*a[2]*a[3] + a[4]*a[5]*a[6]*a[7] + a[8]*a[9]*a[10]*a[11] + a[12]*a[13]*a[14]*a[15] + a[16]*a[17]*a[18]*a[19] + a[17]*a[18]*a[19]*a[20] + a[18]*a[19]*a[20]*a[21] + a[19]*a[20]*a[21]*a[22] + a[20]*a[21]*a[22]*a[23] + a[21]*a[22]*a[23]*a[24] + a[22]*a[23]*a[24]*a[25] + a[23]*a[24]*a[25]*a[26] + a[24]*a[25]*a[26]*a[27] + a[25]*a[26]*a[27]*a[28] + a[26]*a[27]*a[28]*a[29] + a[27]*a[28]*a[29]*a[30] + a[28]*a[29]*a[30]*a[31] + a[29]*a[30]*a[31])\n",
        "test": "assert solution(stdin) == 1",
        "num_ids": 1548,
        "indeed": false
    },
    {
        "number": 4455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pairs = list(map(int, stdin.split()))\n    answer = 0\n    for pair in pairs:\n        if pair > k:\n            answer += 1\n    return str(answer)\n\n--------------------------------------------------------------------------------\n-----Time complexity-----\nO(n*k)\nO(n)\n\nO(n)\nO(k)\nO(k)\nO(n)\n\n--------------------------------------------------------------------------------\n\n-----Space complexity-----\nO(1)\n\n--------------------------------------------------------------------------------\n\n\"\"\"\n\ndef",
        "test": "assert solution(\\\"\"\"",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 4456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    permutations = []\n    n = int(stdin.strip())\n    nums = stdin.strip().split(\" \")\n\n    for i in range(0, len(nums), 2):\n        permutations.append(nums[i])\n        permutations.append(nums[i + 1])\n\n    for i in range(0, len(permutations)):\n        if not nums[i]:\n            continue\n        p_i = int(permutations[i])\n        q_i = int(permutations[i + 1])\n        permutations[i] = \"\"\n        permutations[i + 1] = \"\"\n\n        while q_i - p_i < 10 ** 9:\n            permutations[i] += nums[p_i]\n            permutations[i + 1] += nums[q_i]\n            p_i += 2\n            q_i += 2\n        permutations[i] += nums[p_i]\n        permutations[i + 1] += nums[q_i]\n\n    for i in range(0, len(permutations)):\n        if not nums[i]:\n            continue\n        p_i = int(permutations[i])\n        q_i = int(permutations[i + 1])\n        permutations[i] = \"\"\n        permutations[i + 1] = \"\"\n\n        while q_i - p_i < 10 ** 9:\n            permutations[i] += nums[p_i]\n            permutations[i + 1] += nums[q_i]\n            p_i += 2\n            q_i += 2\n        permutations[i] += nums[p_i]\n        permutations[i + 1] += nums[q_i]\n\n    for i in range(0, len(permutations)):\n        permutations[i] = permutations[i].lower()\n\n    for i in range(0, len(permutations)):\n        if len(permutations[i]) > len(permutations[i + 1]):\n            permutations[i], permutations[i + 1] = permutations[i + 1], permutations[i]\n\n    permutations = permutations.sort()\n    permutation_map = {perm: nums[0] for num in permutations}\n    permutation_map[permutations[0]] = \"\"\n    permutation_map[permutations[len(permutations) - 1]] = \"\"\n\n    permutation_map = permutation_map.keys()\n\n    for i in range(len(permutations)):\n        permutation_map = {perm: permutation_map[perm] + nums[i + 1] for num in permutations[:i] + permutations[i + 1:]]\n\n    for i in range(0, len(permutation_map)):\n        permutation_map[i] = permutation_map[i].lower()\n\n    for i in range(0, len(permutation_map)):\n        if len(permutation_map[i]) > len(permutation_map[i + 1]):\n            permutation_map[i], permutation_map[i + 1] = permutation_map[i + 1], permutation_map[i]\n\n    permutation_map = permutation_map.keys()\n\n    for i in range(0, len(permutation_map)):\n        permutation_map = {perm: permutation_map[perm] + nums[i + 1] for num in permutations[:i] + permutations[i + 1:]]\n\n    for i in range(0, len(permutation_map)):\n        permutation_map[i] = permutation_map[i].lower()\n\n    permutation_map = permutation_map.keys()\n\n    for i in range(0, len(permutation_map)):\n        permutation_map = {perm: permutation_map[perm] + nums[i + 1] for num in permutations[:i] + permutations[i + 1:]]\n\n    permutation_map = permutation_map.keys()\n\n    permutation_map = sorted(permutation_map.items(), key=lambda x: len(x[1]))\n    permutation_map = dict(permutation_map)\n\n    if len(permutation_map) > 0:\n        permutation = \"\"\n        for i in permutation_map:\n            permutation += permutation_map[i]\n    else:\n        permutation = \"\"\n\n    for i in range(0, len(permutation)):\n        permutation += permutation_map[permutation[i]]\n    return permutation",
        "test": "assert solution(\"abababababab\") == \"NO\"",
        "num_ids": 3559,
        "indeed": false
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    print(len(list(combinations(list(range(n, a+1)), n)) - list(combinations(list(range(a, n+1)), n))))",
        "test": "assert solution(test_input) == '35'",
        "num_ids": 958,
        "indeed": false
    },
    {
        "number": 4458,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    \n    \ndef",
        "test": "assert solution(input) == \"3\"",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 4459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    answer = []\n    for i in range(len(a) - 1):\n        if a[i]!= a[i + 1]:\n            answer.append(a[i] - 1)\n    return str(min(answer))\n\ndef",
        "test": "assert solution('3 3 3 3') == 1, \"The number of elements with repeating elements is incorrect\"",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 4460,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split(\" \")[0])+int(stdin.split(\" \")[1]))\n",
        "test": "assert solution('1 2 3 4 5'), '1'",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 4461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    chocolate = [0] * (H + 1)\n    chocolate[0] = 1\n\n    for _ in range(W):\n        height = int(stdin.strip())\n\n        for i in range(1, height):\n            chocolate[i] += chocolate[i - 1]\n\n    max_chocolate = max(chocolate)\n\n    min_chocolate = min(chocolate)\n\n    return str(max_chocolate - min_chocolate)\n",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 2231,
        "indeed": false
    },
    {
        "number": 4462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    aa = list(map(int, stdin.split()))\n    def check(x):\n        return x % 4 == 0\n    for i in range(n):\n        if check(aa[i]):\n            print(f\"Yes\")\n            return\n    print(f\"No\")\n    return\n-----Sample Output-----\nNo\n\"\"\"\n\ndef",
        "test": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"Yes\"",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 4463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    a = input().lower()\n    b = input().lower()\n    \n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j]:\n                if a[i] < b[j]:\n                    a = a[:i] + b[j + 1:len(a)] + a[i + 1:]\n                else:\n                    a = a[:j] + a[j + 1:len(a)] + a[i + 1:]\n    \n    if a.find(a[0]) == -1 or b.find(b[0]) == -1:\n        return 'No'\n    else:\n        return 'Yes'\n\nprint(solution(input()))\n\"\"\"\n",
        "test": "assert solution('xyza') == 'Yes'",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 4464,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    sum = 0\n    for i in stdin:\n        sum += int(i)\n    sum %= len(stdin)\n    if sum == 1:\n        return 'YES'\n    else:\n        return 'NO'",
        "test": "assert solution([\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"NO\"",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 4465,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  for i in range(n):\n    a, b = map(int, stdin.split())\n    if a * b == n:\n      print(a * b)\n    elif a == b:\n      print(1)\n    else:\n      print((n - a - b) * a)\n  return ''\nprint(solution(input()))\n",
        "test": "assert solution(\"2 5\") == \"2\"",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 4466,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for i in range(len(stdin)):\n        x, y, z = map(int, stdin.split())\n        answer = max(answer, (x + y + z) - z)\n    return str(answer)",
        "test": "assert solution('2 1 5') == '3'",
        "num_ids": 2357,
        "indeed": false
    },
    {
        "number": 4467,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, a, b, c, d = map(int, stdin.split())\n    max_num = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                for l in range(N):\n                    for m in range(N):\n                        for n in range(N):\n                            if i!= j or i!= k or j!= l or k!= m or l!= n:\n                                # if coordinates are equal, it means we can pair them\n                                if abs(a - i) < abs(a - b) and abs(c - j) < abs(c - b) and abs(d - k) < abs(d - n):\n                                    if a * b * c * d < i * j * k * l * m * n:\n                                        if a * b * c * d > i * j * k * l * m * n:\n                                            max_num += 1\n    return str(max_num)\n\n-----Example 1-----\n\nInput\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n\nOutput\n2\n\nExplanation\n\na_1 b_1\na_2 b_2\na_N b_N\nc_1 d_1\nc_2 d_2\nc_N d_N\n\ni, j, k, l, m, n = 4, 2, 0, 1, 3, 5\na = i * j * k * l\nb = a * c * d\nc = a * d * e\nd = a * b * f\ne = i * j * k * l\nf = a * c * d",
        "test": "assert solution('0 4 2') == '1 2 3'",
        "num_ids": 2263,
        "indeed": false
    },
    {
        "number": 4468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N = int(input())\n    T = list(map(int, input().split()))\n    if not T:\n        print(0)\n        return\n    for i in range(1, N):\n        T[i] += T[i - 1]\n    print(T[N])\n    return\n\nInput:\n4 4\n0 3\n1 0\n0 3\n0 1\nOutput:\n6\nExplanation:\nIf we push a shower with t_i = 0, we push it for 1 second, if we push a shower with t_i = 3, we push it for 2 seconds, and so on until we push a shower with t_i = 4, we push it for 4 seconds, and so on until we push a shower with t_i = N, we push it for 7 seconds.\nExample:\n\nInput:\nN = 4\nT = [0, 3, 0, 4]\n\nOutput:\n8\nExplanation:\nIf the first person pushes the water, then the fourth person pushes the water. So the water will not have enough water, and they will push with 4 seconds.\nIf the second person pushes the water, then the fourth person pushes the water. So the water will have enough water, and they will push with 4 seconds.\nIf the third person pushes the water, then the fourth person pushes the water. So the water will have enough water, and they will push with 4 seconds.\nIf the fourth person pushes the water, then the fourth person pushes the water. So the water will have enough water, and they will push with 4 seconds.\nIf the fifth person pushes the water, then the fourth person pushes the water. So the water will have enough water, and they will push with 4 seconds.\nIf the sixth person pushes the water, then the fourth person pushes the water. So the water will have enough water, and they will push with 4 seconds.\nIf the seventh person pushes the water, then the fourth person pushes the water. So the water will have enough water, and they will push with 4 seconds.\nIf the eighth person pushes the water, then the fourth person pushes the water. So the water will have enough water, and they will push with 4 seconds.\nIf the ninth person pushes the water, then the fourth person pushes the water. So the water will have enough water, and they will push with 4 seconds.\nIf the tenth person pushes the water, then the fourth person pushes the water. So the water will have enough water, and they will push with 4 seconds.\nIf the eleventh person pushes the water, then the fourth person pushes the water. So the water will have enough water, and they will push with 4 seconds.\nIf the twelfth person pushes the water, then the fourth person pushes the water. So the water will have enough water, and they will push with 4 seconds.\n\nConstraints:\n1 \u2264 N \u2264 200,000\n1 \u2264 T \u2264 10^9\nt_i \u2264 T[i] \u2264 T[i - 1]\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        N = int(stdin.split()[-1])\n        T = list(map(int, stdin.split()[:-1]))\n        \n        i = 0\n        for i in range(1, len(T)):\n            T[i] += T[i - 1]\n            \n        count = 0\n        for i in range(1, len(T)):\n            if T[i] > T[i - 1]:\n                count += 1\n                \n        return count\n        \n",
        "test": "assert solution(\"1 3 4\") == \"3\"",
        "num_ids": 1453,
        "indeed": false
    },
    {
        "number": 4469,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    q = 0\n    for i in range(q):\n        id, query = map(int, stdin.split())\n        temp = query\n        for j in range(id):\n            query = query[:j] + query[j+1:]\n            query = int(query)\n        q += query\n    return str(q)\n\nprint(solution(stdin))\n\ndef",
        "test": "assert solution(\"3\") == \"3\"",
        "num_ids": 942,
        "indeed": false
    },
    {
        "number": 4470,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    if n < 0:\n        return -1\n    \n    # Given nums are in the range [1..10,000]\n    # n is divisible by 2 and 3\n    # n is divisible by 5\n    # n is divisible by 25\n    # n is divisible by 15\n    \n    def remove_divisors(x):\n        while x % 2 == 0:\n            x //= 2\n        while x % 3 == 0:\n            x //= 3\n        while x % 5 == 0:\n            x //= 5\n        return x\n    \n    def find_divisors(x):\n        x //= remove_divisors(x)\n        while x % 2 == 0:\n            x //= 2\n        while x % 3 == 0:\n            x //= 3\n        while x % 5 == 0:\n            x //= 5\n        return x\n    \n    def solve(nums):\n        if len(nums) == 1:\n            return nums[0]\n        # find the largest divisor\n        divisors = sorted(nums, key=find_divisors)\n        # find the smallest number of the largest divisors\n        if nums[0] > divisors[-1]:\n            nums[0], nums[-1] = nums[-1], nums[0]\n        # replace the small divisors with the largest ones\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i-1]:\n                nums[i], nums[i-1] = nums[i-1], nums[i]\n        # find the smallest number of the largest divisors\n        if nums[0] > nums[-1]:\n            nums[0], nums[-1] = nums[-1], nums[0]\n        # find the lowest divisor\n        start = nums[0]\n        lowest = start\n        for i in range(1, len(nums)):\n            if nums[i] < start:\n                lowest = start\n                start = nums[i]\n            elif nums[i] < start:\n                start = nums[i]\n        return lowest\n\n    result = 0\n    for i in range(n):\n        if i == 0:\n            result = solve(nums[i:])\n        else:\n            result += solve(nums[i:i+1])\n    return result\n        \n",
        "test": "assert solution(0) == 0",
        "num_ids": 1740,
        "indeed": false
    },
    {
        "number": 4471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n,t = map(int,stdin.split())\n    c = [0]*n\n    r = [0]*n\n    for i in range(n):\n        c[i] = int(stdin[i])\n    for i in range(t):\n        r[c[i]] = i\n    for i in range(n):\n        if c[i] == 0:\n            r[i] = 100\n        else:\n            r[i] = r[i-1]\n    for i in range(n):\n        if r[i] == 100:\n            c[i] = 0\n        else:\n            c[i] = c[i-1]\n    for i in range(t):\n        print(c[r[i]])\n\n(the correct output is \"NO\". It is shown below.)\n\n-----Solution-----\n\nInput\n4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n\nOutput\nYES\nNO\nYES\nNO\n",
        "test": "assert solution(\"1 1\") == \"NO\"",
        "num_ids": 3202,
        "indeed": false
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    a = [list(i) for i in a]\n    b = [i[::-1] for i in a]\n    b = [''.join(i) for i in b]\n    res = 1\n    i = 0\n    for j in range(n):\n        if i == n // 2:\n            if a[i] == b[j]:\n                i -= 1\n            elif a[i]!= b[j]:\n                i -= 1\n            else:\n                res += 1\n                i += 1\n        else:\n            if a[i] == b[j]:\n                i += 1\n            elif a[i]!= b[j]:\n                i += 1\n            else:\n                res += 1\n                i += 1\n    return str(res)\n\nInput\n5\nzzbz\nzzbz\n\nOutput\n3\n\nExplanation\n\nThere are three preprocess moves, so you should print three lines. The first preprocessor moves you can apply changes from the list above to $a$, $b$, and $c$. In the second preprocessor move you can apply changes from the list above to $a$, $a$, and $b$.\n\nFor example, if we are given the string $a$ and a string $b$ with preprocess moves, then you can use the following preprocess moves: $swap(a_2, b_2), $swap(a_2, a_6), $swap(b_2, b_5), swap(b_2, b_1)$, which returns the string $a$ and $b$. But you can also apply the preprocess moves to the string $b$ as well.\n\nSo, in the third preprocessor, you can swap a character at index $i$ with a character at index $i - 1$: $swap(a_2, a_5)$, which is equivalent to doing the following preprocessor moves: $swap(a_2, a_5), swap(a_2, a_1)$, so it is valid.\n\nExample\n\nInput\n\n3\n\nOutput\n\n\nExplanation\n\nNote that the string $a$ is written as two lowercase English letters, and $a$ consists of the following preprocessor moves: $swap(a_2, a_6), swap(a_2, a_1)$, $swap(a_2, a_5), swap(a_2, a_3), swap(a_2, a_4)$, $swap(a_2, a_2)$, swap(a_2, a_1)$ and $swap(a_2, a_1). So you should only need to modify the preprocess moves to make $a$ equal to the string $b$.\n\nInput\n\n7\nabacaba\ncabd\n\nOutput\n\n\nExplanation\n\nIn the second example $b$ is written as a lowercase English letter, $b$ consists of the following preprocessor moves: $swap(b_2, b_1), $swap(b_2, b_3), swap(b_2, b_5), swap(b_2, b_4), swap(b_2, b_2)$, $swap(b_2, b_1), $swap(b_2, b_2), $swap(b_2, b_4), $swap(b_2, b_3), swap(b_2, b_5), $swap(b_2, b_6), $swap(b_2, b_7), swap(b_2, b_8), $swap(b_2, b_9), swap(b_2, b_10), swap(b_2, b_11), swap(b_2, b_12), swap(b_2, b_13), swap(b_2, b_14), swap(b_2, b_15), swap(b_2, b_16), swap(b_2, b_17), swap(b_2, b_18), $swap(b_2, b_19), $swap(b_2, b_20), $swap(b_2, b_21), $swap(b_2, b_22), $swap(b_2, b_23), $swap(b_2, b_24), $swap(b_2, b_25), $swap(b_2, b_26), $swap(b_2, b_27), $swap(b_2, b_28), $swap(b_2, b_29), $swap(b_2, b_30), $swap(b_2, b_31), $swap(b_2, b_32), $swap(b_2, b_33), swap(b_2, b_34), swap(b_2, b_35), $swap(b_2, b_36), $swap(b_2, b_37), $swap(b_2, b_38), $swap(b_2, b_39), $swap(b_2, b_40), swap(b_",
        "test": "assert solution(3) == 4",
        "num_ids": 2374,
        "indeed": false
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    a, b, k = map(int, stdin.split())\n    for i in range(k):\n        for j in range(a, a+b):\n            total += j\n    return str(total)\n",
        "test": "assert solution(input()) == 13",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    n, q = map(int, stdin.split())\n    nums = []\n    for i in range(q):\n        nums.append(list(map(int, stdin.split())))\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] < 0:\n                nums[i][j] *= -1\n            elif nums[i][j] == 0:\n                nums[i][j] = nums[i][j]\n    for i in nums:\n        result.append(int(str(sum(i))[::-1]))\n    print(result)\n    return min(result)\n\ndef",
        "test": "assert solution(",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 4475,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, x, y, n = map(int, stdin.split())\n    ans = 0\n    if a == 0 and b == 0 and n == 0:\n        return ans\n    \n    for i in range(n):\n        if i == 0:\n            ans += (a * b)\n            if ans < x:\n                ans = x\n            else:\n                ans = y\n        else:\n            ans += (a * b * x)\n            if ans < ans:\n                ans = ans\n            \n            if i == n - 1:\n                ans += (b * y)\n                if ans < x:\n                    ans = x\n                else:\n                    ans = y\n    return ans\n",
        "test": "assert solution(\"0 0 0 0 0\") == 0",
        "num_ids": 2358,
        "indeed": false
    },
    {
        "number": 4476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,stdin.split(' '))\n    return str(b-a)",
        "test": "assert solution(stdin) == 3",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 4477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # tokenize\n    tokens = [int(i) for i in stdin.split()]\n    \n    answer = 0\n    \n    for n in tokens:\n        if n >= 10 or n < 1:\n            continue\n        \n        c = 0\n        for i in range(n):\n            c += int(str(i) * (10 - i))\n        \n        answer += c\n    \n    return str(answer)\n    \n\"\"\"\n\nclass Solution:\n    def countApplesAndOranges(self, s: str, t: str, p: str, r: str) -> List[int]:\n        c = 0\n        tokens = []\n        for i in range(len(s)):\n            if s[i] in p:\n                c += 1\n            if s[i] in r:\n                c += 1\n            if s[i] in p or s[i] in r:\n                tokens.append(s[i])\n        \n        # check the number of digits in each string\n        for i in range(len(tokens) - 1):\n            for j in range(i + 1, len(tokens)):\n                c = 0\n                for x in range(len(tokens[i])):\n                    for y in range(len(tokens[j])):\n                        c += (tokens[i][x] == tokens[j][y])\n                if c == 0:\n                    return [tokens[i], tokens[j]]\n        \n        return []\n\n\"\"\"",
        "test": "assert solution(stdin), \"Your solution does not work!\"",
        "num_ids": 1121,
        "indeed": false
    },
    {
        "number": 4478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    seqs = [int(x) for x in stdin.split()]\n    n, k = seqs\n    #print(n)\n    #print(k)\n    #seqs = [2, 3, 1, 3, 2]\n    #n = 6\n    #k = 5\n    #seqs = [1, 1, 2, 2, 2, 1]\n    #n = 5\n    #k = 3\n    #seqs = [1, 1, 2, 2, 2, 1]\n    #n = 2\n    #k = 2\n    #seqs = [2, 2, 2]\n    #n = 2\n    #k = 3\n    #seqs = [2, 2, 2]\n    #n = 1\n    #k = 2\n    #seqs = [2, 1, 1]\n    #n = 2\n    #k = 2\n    #seqs = [2, 2, 1]\n    #n = 2\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 3\n    #seqs = [1, 1, 1]\n    #n = 2\n    #k = 2\n    #seqs = [2, 2, 2]\n    #n = 1\n    #k = 2\n    #seqs = [2, 2, 2]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 3\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 3\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1\n    #k = 2\n    #seqs = [1, 1, 1]\n    #n = 1",
        "test": "assert solution(stdin) == \"NO\"",
        "num_ids": 2028,
        "indeed": false
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    answer = -1\n    for i in range(len(stdin)):\n        answer = max(answer, sum(list(map(int, stdin[:i]))))\n    return str(answer)\n",
        "test": "assert solution('3 3') == '13'",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef",
        "test": "assert solution(['', '', '', '', '', '', '', '', '', '', '']) == 'true'",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 4481,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = list(map(int, stdin.split()))\n    voter = []\n    for i in range(n):\n        voter.append(stdin[i * m + 1: i * m + 1 + s])\n    voter.sort()\n    # print(voter)\n    print('\\n'.join(voter))\n    return '\\n'.join(voter)",
        "test": "assert solution(stdin) == 'bed'",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 4482,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [int(i) for i in stdin.split()]\n    for i in range(n-1, -1, -1):\n        j = nums[i]\n        if (nums[i] > j):\n            j = nums[i]\n        temp = i + j\n        nums[i] = j\n    answer = 0\n    for i in nums:\n        answer = answer + (i-answer)**2\n    return str(answer)\n\n\"\"\"\n\ndef",
        "test": "assert solution(input) == \"8\"",
        "num_ids": 2438,
        "indeed": false
    },
    {
        "number": 4483,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = n % 10\n    a, b = 0, 0\n    for i in range(n // 10):\n        a += m\n        m = a % 10\n        b += m\n    c = a + b\n    print(c)\n    return '{:.6f}'.format(c)\n\n\ndef",
        "test": "assert solution(5) == \"1084\"",
        "num_ids": 1436,
        "indeed": false
    },
    {
        "number": 4484,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef",
        "test": "assert solution(input()) == \"1\"",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 4485,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return 'POSSIBLE'\n",
        "test": "assert solution(1) == 'POSSIBLE'",
        "num_ids": 4075,
        "indeed": false
    },
    {
        "number": 4486,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    result = []\n    for index, val in enumerate(stdin):\n        if index % 2!= 0:\n            answer += val\n        else:\n            result.append(answer)\n            answer = val\n    result.append(answer)\n    return ''.join(result)\n",
        "test": "assert solution('') == ''",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 4487,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    temp_list = []\n    temp_list.append(stdin[-1])\n    temp_list.append(stdin[-2])\n    if len(temp_list) > 2:\n        return 'NO'\n    else:\n        return 'YES'\n        \n\nprint(solution(\"rng\"))\n",
        "test": "assert solution(\"cat dog dog\"), \"Cannot find a word chain from both strings\"",
        "num_ids": 2188,
        "indeed": false
    },
    {
        "number": 4488,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(greater(a, b))\n",
        "test": "assert solution(24,36) == \"EQUAL\"",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 4489,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, s_1, s_2 = map(lambda x: int(x), stdin.split())\n    Takahashi = list(map(lambda x: x.upper(), input().split(',')))\n    t_1 = list(map(lambda x: x.upper(), input().split(',')))\n    t_2 = list(map(lambda x: x.upper(), input().split(',')))\n    t_1 = sorted(t_1)\n    t_2 = sorted(t_2)\n    money = 0\n    for i in range(N):\n        if Takahashi[i] == s_1:\n            money += 1\n        if Takahashi[i] == s_2:\n            money += 1\n        if Takahashi[i] == t_1:\n            money += 1\n        if Takahashi[i] == t_2:\n            money += 1\n    return str(money)",
        "test": "assert solution(inp) == \"2\"",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 4490,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.split()[0]\n    return b[-1]\n",
        "test": "assert solution(\"A\") == \"A\"",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 4491,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef",
        "test": "assert solution(input) == 14, \"The number of collected candies should be 14\"",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 4492,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    boxes = []\n    for _ in range(n):\n        boxes.append(int(stdin.split()[0]))\n    answer = 0\n    for i in range(1, n + 1):\n        boxes[i] -= 1\n        while boxes[i] > 0:\n            answer += 1\n            boxes[i] -= 1\n        boxes[i] = boxes[i] - 1\n    return str(answer)\n\n\"\"\"",
        "test": "assert solution(\"2 2 3\"), \"1\"",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 4493,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    c = [int(c) for c in stdin.split()]\n    a_i = a_j = 0\n    b_i = b_j = 0\n    c_pairs = [1,2,3]\n    for i, j in enumerate(c):\n        if j == 0:\n            a_i += i + 1\n            b_i += j + 1\n        else:\n            b_i += i + 1\n            a_j += j + 1\n    if a_i == c_pairs[0] and b_j == c_pairs[1] and b_i == c_pairs[2]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('2 1 2') == 'No'",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 4494,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for i in range(len(stdin) - 1):\n        if stdin[i] == 'A':\n            answer = answer + 'ABC'\n        elif stdin[i] == 'C':\n            answer = answer + 'ARC'\n        else:\n            answer = answer + 'A'\n    return answer\n",
        "test": "assert solution(st) == \"ARC\"",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 4495,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    res = 0\n    for i in range(a, b+1):\n        if x % i == 0:\n            res += 1\n    print(res)\n    return str(res)\n'''\n\n\ndef",
        "test": "assert solution(4, 1) == \"1\"",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 4496,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 24:\n        return \"Christmas\"\n    elif D == 23:\n        return \"Christmas Eve\"\n    elif D == 22:\n        return \"Christmas Eve Eve\"\n    elif D == 25:\n        return \"Christmas Eve Eve\"\n\nprint(solution(\"25\"))\nprint(solution(\"24\"))\nprint(solution(\"23\"))\n",
        "test": "assert solution(22) == \"Christmas Eve Eve\"",
        "num_ids": 2458,
        "indeed": false
    },
    {
        "number": 4497,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, len(stdin)):\n        if i % 2 == 0:\n            a = i // 2\n            if a < len(str(stdin)) - 2:\n                if str(stdin)[a] == str(stdin)[a + 1] == str(stdin)[a + 2]:\n                    return str(stdin)[a] + str(stdin)[a + 2] + str(stdin)[a + 1] + str(stdin)[a]\n                else:\n                    return str(stdin)[a] + str(stdin)[a + 1] + str(stdin)[a + 2] + str(stdin)[a + 2] + str(stdin)[a + 1] + str(stdin)[a] + str(stdin)[a + 2] + str(stdin)[a + 1] + str(stdin)[a] + str(stdin)[a + 2] + str(stdin)[a + 2]\n        else:\n            if str(stdin)[i] == str(stdin)[i + 1] == str(stdin)[i + 2]:\n                return str(stdin)[i] + str(stdin)[i + 2] + str(stdin)[i + 1] + str(stdin)[i] + str(stdin)[i + 2] + str(stdin)[i + 1] + str(stdin)[i] + str(stdin)[i + 2] + str(stdin)[i + 1] + str(stdin)[i]\n            else:\n                return str(stdin)[i] + str(stdin)[i + 1] + str(stdin)[i + 2] + str(stdin)[i + 2] + str(stdin)[i + 1] + str(stdin)[i] + str(stdin)[i + 2] + str(stdin)[i + 1] + str(stdin)[i] + str(stdin)[i + 2] + str(stdin)[i + 2] + str(stdin)[i + 1] + str(stdin)[i] + str(stdin)[i + 2] + str(stdin)[i + 1] + str(stdin)[i] + str(stdin)[i + 2] + str(stdin)[i + 2] + str(stdin)[i + 1] + str(stdin)[i]\n",
        "test": "assert solution(1) == 0, '1 is not a solution'",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 4498,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    c = int(stdin.split()[2])\n    d = int(stdin.split()[3])\n    \n    if a == b == c == d:\n        return \"Yes\"\n    \n    elif a + c <= d <= b + d or a + d <= c <= b + d or b + c <= d <= a + d:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(input()) == \"Yes\"",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 4499,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    for s in stdin:\n        answer.append(s.upper())\n    return ''.join(answer)",
        "test": "assert solution(\"ATCOCO\"), \"No solution\"",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 4500,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A <= B and A <= C and B <= C:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(\"50 100 120\") == \"Yes\"",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 4501,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    cards = []\n    for _ in range(N):\n        cards.append(int(input()))\n    max_avg = max(cards)\n    total_card = len(cards)\n    answer = 0\n    for card in cards:\n        answer += (max_avg - card) // A\n    return str(answer)\n\ndef",
        "test": "assert solution(input()) == \"5\"",
        "num_ids": 875,
        "indeed": false
    },
    {
        "number": 4502,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    b, *a = map(int, stdin.split())\n    b = b % 10**9 + a[::-1]\n    print(*b)\n    return str(b)[::-1]\n\n------Sample Output------\n1 0 0 0 1 0 0 0 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 1 1 1 0 1 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
        "test": "assert solution(input()) == \"4 2 1 3\"",
        "num_ids": 2271,
        "indeed": false
    },
    {
        "number": 4503,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    v = [0] * N\n    v[0] = A\n    for _ in range(N):\n        v[A-1] += A-1\n    for _ in range(A):\n        v[v[A-1]-1] -= 1\n    for i in range(N):\n        if v[i]!= i:\n            return \"No\"\n    return \"Yes\"\n\n'''\nimport sys\n\ndef",
        "test": "assert solution(\"2 2 4 3\") == \"No\"",
        "num_ids": 2862,
        "indeed": false
    },
    {
        "number": 4504,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    longest_even_str = ''\n    for i in range(len(stdin)):\n        if stdin[i].isdigit():\n            stdin = stdin.replace(stdin[i], '', 1)\n            if int(stdin[i]) % 2:\n                stdin = stdin.replace(stdin[i], '', 1)\n            else:\n                longest_even_str += stdin[i]\n        else:\n            break\n    return len(longest_even_str)\n\n\n-----Sample Output-----\n1\n\n'''\n\nimport unittest\n\n\nclass Solution(object):\n    def longest_string(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n\n        return max(map(len, filter(lambda x: x.isdigit(), s)))\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        s = \"abaababaab\"\n        result = 2\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"ababaab\"\n        result = 4\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"aaa\"\n        result = 3\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"aabb\"\n        result = 2\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"a\"\n        result = 1\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"aabcbaabcd\"\n        result = 1\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"aabcbaabcd\"\n        result = 4\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"aabbbaaa\"\n        result = 1\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"aabb\"\n        result = 2\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"aabb\"\n        result = 1\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"abababaab\"\n        result = 2\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"abbbbabbab\"\n        result = 3\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"abababa\"\n        result = 2\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"aaabbbb\"\n        result = 3\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"aabbbbbaa\"\n        result = 4\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"aaabbbb\"\n        result = 4\n        self.assertEqual(result, Solution().longest_string(s))\n\n        s = \"aaaabbbbababababababbbbabababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "test": "assert solution(st3) == \"abcde\"",
        "num_ids": 2323,
        "indeed": false
    },
    {
        "number": 4505,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # convert to list\n    str_list = list(stdin)\n    # s are the reversed list\n    s = \"\".join(str_list[::-1])\n    # if s is a permutation of abc, return YES\n    if s == 'abc':\n        return 'Yes'\n    # else return NO\n    return 'No'\n",
        "test": "assert solution('abcdef') == 'No'",
        "num_ids": 1295,
        "indeed": false
    },
    {
        "number": 4506,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(stdin.split()[i]))\n    for j in range(n):\n        b.append(int(stdin.split()[j + 1]))\n    f = []\n    for i in range(n):\n        for j in range(n):\n            f.append(a[i] * b[j])\n    f = sorted(f)\n    return str(sum(f))\n\ndef",
        "test": "assert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]) == \"77\"",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 4507,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = b - a\n    p = n\n    for _ in range(b):\n        p -= (a * 2)\n        p += a * 1\n        p += a * 2\n        p += a * 3\n        p += a * 4\n        p += a * 5\n        p += a * 6\n        p += a * 7\n        p += a * 8\n        p += a * 9\n        p += a * 10\n    print(p)\n    return str(p)",
        "test": "assert solution(1, [2, 5]) == \"3\"",
        "num_ids": 2161,
        "indeed": false
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, *edges = map(int, stdin)\n\n    edges.sort(key=lambda edge: edge[0])\n\n    visited = [False] * n\n    possible_edges = []\n\n    def dfs(u, v):\n        if not visited[u]:\n            visited[u] = True\n            for edge in edges[u]:\n                if not visited[edge[1]]:\n                    dfs(edge[1], edge[0])\n            possible_edges.append((u, v))\n        if not visited[v]:\n            visited[v] = True\n            for edge in edges[v]:\n                if not visited[edge[1]]:\n                    dfs(edge[1], edge[0])\n            possible_edges.append((v, u))\n\n    for u, v in edges:\n        if not visited[u] or not visited[v]:\n            visited[u] = True\n            visited[v] = True\n            dfs(u, v)\n\n    return str(len(possible_edges))\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n[input]\n\ninteger n\n\nseparated by a single space.\n\n\n[output]\n\ninteger\n\nminimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$.\n\n\n[example]\n\nInput\n\n7\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n\nOutput\n\n2\n\nInput\n\n\n7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n\nOutput\n\n1\n\n-----Constraints-----\n\n0 <= n <= 10^5\n\n[input]\n\ninteger n\n\nseparated by a single space.\n\n\n[output]\n\ninteger\n\nminimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$.\n\n\n[example]\n\nInput\n\n\n7\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n\nOutput\n\n0\n\nInput\n\n\n7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n\nOutput\n\n1\n\n-----Constraints-----\n\n0 <= n <= 10^5\n\n[input]\n\ninteger n\n\nseparated by a single space.\n\n\n[output]\n\ninteger\n\nminimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$.\n\n\n[example]\n\nInput\n\n\n7\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n\nOutput\n\n1\n\n[input]\n\ninteger n\n\nseparated by a single space.\n\n\n[output]\n\ninteger\n\nminimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$.\n\n\n[example]\n\nInput\n\n\n7\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n\nOutput\n\n1\n\n[input]\n\ninteger n\n\nseparated by a single space.\n\n\n[output]\n\ninteger\n\nminimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$.\n\n\n[constraints]\n\n0 <= n <= 10^5\n\n[input]\n\ninteger n\n\nseparated by a single space.\n\n\n[output]\n\ninteger\n\nminimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$.\n\n\n[constraints]\n\n0 <= n <= 10^5\n\n[input]\n\ninteger n\n\nseparated by a single space.\n\n\n[output]\n\ninteger\n\nminimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$.\n\n\n[example]\n\nInput\n\n\n7\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n\nOutput\n\n\n0\n\n[input]\n\ninteger n\n\nseparated by a single space.\n\n\n[output]\n\ninteger\n\nminimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$.\n\n\n[constraints]\n\n0 <= n <= 10^5\n\n[input]\n\ninteger n\n\nseparated by a single space.\n\n\n[output]\n\ninteger\n\nminimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$.\n\n\n[constraints]\n\n0 <= n <= 10^5\n\n[input]\n\ninteger n\n\nseparated by a single space.\n\n\n[output]\n\ninteger\n\nminimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$.\n\n\n[constraints]\n\n0 <= n <= 10^5\n\n[input]\n\ninteger n\n\nseparated by a single space.\n\n\n[output]\n\ninteger\n\nminimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$.\n\n\n[constraints]\n\n0 <= n <= 10^5\n\n[input]\n\ninteger n\n\nseparated by a single space.\n\n\n[output]\n\ninteger\n\nminimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$.\n\n\n[constraints]\n\n0 <= n <= 10^5\n\n[input]\n\ninteger n\n\nseparated by a single space.\n\n\n[output]\n\ninteger\n\nminimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$.\n\n\n[constraints]\n\n0 <= n <= 10^5\n\n[input]\n\ninteger n\n\nseparated by a single space.\n\n\n[output]\n\ninteger\n\nminimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$.\n\n\n[constraints]\n\n0 <= n <= 10^5\n\n[input]\n\ninteger n\n\nseparated by a single space.\n\n\n[output]\n\ninteger\n\nminimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$.",
        "test": "assert solution(\"\"\"",
        "num_ids": 4095,
        "indeed": false
    },
    {
        "number": 4509,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip().split()[1])\n    \n    for i in range(k+1, n+1):\n        if i%k == 0:\n            print(i)\n",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    if n == 0 or k == 0:\n        return \"0\"\n    \n    def solution(n: int, k: int) -> list:\n        answer = []\n        for i in range(n):\n            answer.append(str(i+1))\n        answer[k-1] = \"0\"\n        return answer\n    \n    def push(s: str) -> list:\n        answer = []\n        for i in s:\n            answer.append(i)\n        answer[-1] = \"0\"\n        return answer\n    \n    def pop(s: list) -> list:\n        answer = []\n        for i in s:\n            answer.append(i)\n        answer[-1] = \"0\"\n        return answer\n    \n    answer = [\"\"]\n    while len(answer) < k:\n        answer = pop(answer)\n        answer = push(answer)\n    return answer",
        "test": "assert solution(\"3 3 3 3 3 3 3\") == \"3\"",
        "num_ids": 1705,
        "indeed": false
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    # Store the parameters of the cards in a list\n    cards = [[] for _ in range(n)]\n    for i in range(n):\n        cards[i] = [int(j) for j in stdin.split()]\n\n    # Initialize an array with 0's and 1's\n    c_a = 0\n    d_a = 0\n\n    # Store the number of cards in each sequence (1)\n    k_a = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (2)\n    k_b = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (3)\n    k_c = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (4)\n    k_d = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (5)\n    k_e = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (6)\n    k_f = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (7)\n    k_g = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (8)\n    k_h = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (9)\n    k_i = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (10)\n    k_j = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (11)\n    k_k = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (12)\n    k_l = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (13)\n    k_m = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (14)\n    k_n = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (15)\n    k_o = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (16)\n    k_p = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (17)\n    k_q = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (18)\n    k_r = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (19)\n    k_s = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (20)\n    k_t = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (21)\n    k_u = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (22)\n    k_v = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (23)\n    k_w = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (24)\n    k_x = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (25)\n    k_y = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (26)\n    k_z = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (27)\n    k_a = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (28)\n    k_b = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (29)\n    k_c = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (30)\n    k_d = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (31)\n    k_e = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (32)\n    k_f = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (33)\n    k_g = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (34)\n    k_h = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (35)\n    k_i = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (36)\n    k_j = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (37)\n    k_k = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (38)\n    k_l = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (39)\n    k_m = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (40)\n    k_n = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (41)\n    k_o = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (42)\n    k_p = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (43)\n    k_q = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (44)\n    k_r = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (45)\n    k_s = [0] * (n - 1)\n\n    # Store the number of cards in each sequence (46)\n    k_t = [0] * (n - 1)\n\n    ",
        "test": "assert solution(\"2\") == 7",
        "num_ids": 2328,
        "indeed": false
    },
    {
        "number": 4512,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1,10):\n        for j in range(1,10):\n            if stdin[i-1] == '0' and stdin[j-1] == '0':\n                print(i,j)\n                print(stdin)\n                return\n    return \"\"\n-----Example-----\n\nInput\n10\n11\n10\n11\n12\n10\n5\n6\n1\n8\n4\n7\n9\n\nOutput\n11122234\n221234567\n231234\n231234\n233456",
        "test": "assert solution(input()) == \"5468\"",
        "num_ids": 2836,
        "indeed": false
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    if n == q:\n        answer = []\n        for _ in range(q):\n            answer.append(int(stdin.split()[0]))\n        return answer\n    else:\n        return [-1]\n\n###",
        "test": "assert solution
        "num_ids": 2113,
        "indeed": false
    },
    {
        "number": 4515,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    a = int(stdin.split()[2])\n    b = int(stdin.split()[3])\n    c = int(stdin.split()[4])\n    \n    if c < a:\n        print(\"NO\")\n    elif c == a:\n        if b == 0:\n            print(\"YES\")\n        elif b < b + c:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if b == 0:\n            print(\"NO\")\n        elif b == 0:\n            if a == 0:\n                print(\"NO\")\n            elif a < c:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n        else:\n            if a == 0:\n                if b < c:\n                    print(\"NO\")\n                elif b < c + a:\n                    print(\"YES\")\n                else:\n                    print(\"YES\")\n            elif a < c:\n                print(\"YES\")\n            elif a < c + b:\n                print(\"NO\")\n            elif a < c + b + c:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            \n",
        "test": "assert solution(\"5 3 2 8\") == \"YES\"",
        "num_ids": 2341,
        "indeed": false
    },
    {
        "number": 4516,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \n    x_1, x_2, x_3, x_4 = map(int, stdin.split())\n    \n    x = sorted(map(abs, sorted(list(map(lambda x: x * x, [x_1, x_2, x_3, x_4])))))\n    \n    return str(sum(x))\n",
        "test": "assert solution(sys.stdin.readline()) == '3 3 5 4'",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 4517,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin)\n    \n    for _ in range(N):\n        M = int(stdin)\n        numbers = list(map(int, stdin.split()))\n        \n        if len(set(numbers)) == len(numbers):\n            print(\"YES\")\n            continue\n        \n        \n        \n        paths = []\n        for i in range(len(numbers)):\n            paths.append([numbers[i], numbers[i], numbers[i]])\n        \n        if len(paths) == 0:\n            print(\"YES\")\n            continue\n        \n        paths.sort(key=lambda x: x[0])\n        \n        answer = \"\"\n        \n        for i in range(len(paths)):\n            answer += str(i) + \" \"\n            if i < len(paths) - 1:\n                answer += str(paths[i][0] + paths[i][1]) + \" \"\n                answer += str(paths[i][1]) + \" \"\n            else:\n                answer += str(paths[i][0]) + \" \"\n            \n        print(answer)\n    return \"\"\n\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 3943,
        "indeed": false
    },
    {
        "number": 4518,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    \n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            return \"NO\"\n    \n    return \"YES\"\n    \nprint(solution(\"1 4 2 4 3\"))",
        "test": "assert solution(\"4\\n1\\n5\\n2\\n3\\n1\\n1\\n1\\n\") == \"NO\\nNO\\nNO\\nNO\\nNO\\n\"",
        "num_ids": 1883,
        "indeed": false
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    # Taken from https://youtu.be/NjxGqGQH3c\n    def convert(str):\n        new_str = []\n        for i in range(len(str)):\n            if str[i]!= '0':\n                new_str.append(str[i])\n            else:\n                new_str.append('1')\n        return \"\".join(new_str)\n\n    def build_tree(left, right):\n        if left >= right:\n            return None\n        p = int(left / 2)\n        left_str = convert(str[:p]) + \"0\" + convert(str[p:])\n        right_str = convert(str[p:]) + \"1\" + convert(str[:p])\n        tree = {\n            \"left\": build_tree(left, p),\n            \"right\": build_tree(p, right),\n            \"children\": [left_str, right_str]\n        }\n        return tree\n\n    def dfs(left, right, tree):\n        if left >= right:\n            return tree\n        p = int(left / 2)\n        left_str = dfs(left, p, tree[\"children\"][0])\n        right_str = dfs(p, right, tree[\"children\"][1])\n        tree[\"children\"][0] = left_str\n        tree[\"children\"][1] = right_str\n        return tree\n\n    return dfs(0, len(stdin), build_tree(0, len(stdin)))\n\n\n-----------------Test------------------\ndef",
        "test": "assert solution(input()) == '01010101'",
        "num_ids": 4215,
        "indeed": false
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = map(int, stdin.split())\n    \n    p_1, p_2 = 0, 0\n    l_1, r_1 = 1, n\n    \n    for i in range(n):\n        p_1, p_2 = p_2, segments[i] + p_2\n        r_1 = max(r_1, p_1)\n    \n    p_1, p_2 = 0, 0\n    l_1, r_1 = 1, n\n    \n    for i in range(n):\n        p_1, p_2 = p_2, segments[i] + p_2\n        l_1 = max(l_1, p_1)\n    \n    p_1, p_2 = n, 0\n    l_1, r_1 = n, n\n    \n    for i in range(n):\n        p_1, p_2 = p_2, segments[i] + p_2\n        r_1 = max(r_1, p_1)\n        \n    p_1, p_2 = n, n\n    l_1, r_1 = n, n\n    \n    for i in range(n):\n        p_1, p_2 = p_2, segments[i] + p_2\n        l_1 = max(l_1, p_1)\n        \n    l_1, r_1 = n, n\n    \n    ans = 1\n    \n    for i in range(n):\n        p_1, p_2 = p_2, segments[i] + p_2\n        if p_1 < l_1 or p_2 > r_1:\n            ans *= 1\n        else:\n            ans = min(ans, p_1 - l_1 + 1)\n            ans = min(ans, p_2 - r_1 + 1)\n    \n    print(ans)\n    return str(ans)\n\ndef",
        "test": "assert solution(input()) == '1'",
        "num_ids": 1394,
        "indeed": false
    },
    {
        "number": 4521,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    s = 0\n    for i in range(n):\n        s += abs(nums[i] - nums[i-1])\n    return str(s)\n",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 2086,
        "indeed": false
    },
    {
        "number": 4522,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [list(map(int, stdin.split())) for _ in range(m)]\n    weight = [0 for _ in range(n)]\n    for u, v, w in edges:\n        weight[u] += w\n        weight[v] += w\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            elif weight[i] > weight[j]:\n                weight[j], weight[i] = weight[i], weight[j]\n    return \" \".join(map(str, weight))\n\n-----Constraints-----\n\n0 <= n <= 10^5\n0 <= m <= 10^5\n0 <= u_i, v_i <= n\n0 <= q_i <= 10^5\n\n\n------Time complexity: O(m * n) -----\nTime: O(m * n)\nSpace: O(1)\n\n\n-----Space Complexity: O(m * n) -----\nTime: O(m * n)\nSpace: O(1)\n\n\"\"\"\n\n\nclass Solution:\n    def maxWeight(self, n: int, edges: List[List[int]], q: int) -> int:\n        weight_dic = defaultdict(int)\n        for u, v, w in edges:\n            weight_dic[(u, v)] = w\n            weight_dic[(v, u)] = w\n        dp = [[0] * n for _ in range(q + 1)]\n\n        for i in range(1, n):\n            for u in range(i):\n                for v in range(i):\n                    if weight_dic[(u, v)] >= weight_dic[(u, i)]:\n                        dp[i][v] = max(dp[i][v], dp[i][u] + weight_dic[(u, i)])\n                    else:\n                        dp[i][v] = max(dp[i][v], dp[i][u] + weight_dic[(u, i)])\n        return dp[n][n]\n",
        "test": "assert solution(stdin) == \"0 0\"",
        "num_ids": 2836,
        "indeed": false
    },
    {
        "number": 4523,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    dp = [False for _ in range(n+1)]\n    dp[0] = True\n    for i in range(n):\n        if dp[i] is False:\n            continue\n        if dp[i+1] is False:\n            continue\n        for j in range(i+1, n):\n            if dp[j] is True:\n                dp[j] = False\n                break\n    if dp[n] is False:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nSolution\n-----Input\n5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n\nOutput\nYES\nYES\nNO\nNO\nYES\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains one integer $n$ ($1 \\le n \\le 50$) \u2014 the length of $a$. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the $i$-th element of $a$.\n\n\n-----Output-----\n\nFor each test case, print the answer: \"YES\" if it is possible to obtain the array consisting of only one element using several (possibly, zero) moves described in the problem statement, or \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n\nOutput\nYES\nYES\nNO\nNO\nNO\n\n\n\n-----Note-----\n\nIn the first test case of the example, we can perform the following sequence of moves:  choose $i=1$ and $j=3$ and remove $a_i$ (so $a$ becomes $[2; 2]$);  choose $i=1$ and $j=2$ and remove $a_j$ (so $a$ becomes $[2]$). \n\nIn the second test case of the example, we can choose any possible $i$ and $j$ any move and it doesn't matter which element we remove.\n\nIn the third test case of the example, there is no way to get rid of $2$ and $4$.\ndef",
        "test": "assert solution([\"1 4\", \"1 2\", \"1 3\", \"1 4\", \"2 2\", \"2 3\", \"2 4\", \"3 4\"]) == \"YES\"",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 4524,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n\n    a = a & (b - 1)\n    a = a ^ (b - 1)\n    a = a % (b * 2)\n    a = a % (b * 10)\n\n    print(a)\n    return str(a)\n",
        "test": "assert solution(stdin) == \"11\"",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 4525,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.strip())\n    for t in range(T):\n        n, k = list(map(int, input().split()))\n        a = list(map(int, input().split()))\n        s = 0\n        for i in range(1, n//2):\n            if a[i] % 2 == 0:\n                s += a[i]\n        for i in range(k):\n            for j in range(i*2, n, 2):\n                if a[j] % 2 == 0:\n                    s += a[j]\n        print('YES' if s % 2 == 0 else 'NO')\n    return ''\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == 'YES'",
        "num_ids": 2153,
        "indeed": false
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\ndef",
        "test": "assert solution(stdin) == 5",
        "num_ids": 1380,
        "indeed": false
    },
    {
        "number": 4527,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return str(max([len(set(map(set, (input().split()))).intersection(set(map(set, (input().split()))))) for _ in range(int(stdin))]))\n",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 4528,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    print(f\"{h} {m}\")\n    answer = 0\n    for i in range(h+1):\n        if i+h<24:\n            answer += i\n        elif i+60<=24:\n            answer += i-i+60\n        else:\n            answer += 60-i+i-i+60\n    print(answer)\n    return str(answer)\n\n-----Constraints-----\n1 <= t <= 10^4\n0 <= h < 24\n0 <= m < 60\n0 <= m < 60\n\n-----Time Limit-----\n1 second\n\nExample:\n\nInput\n\n5\n23 55\n23 0\n0 1\n4 20\n23 59\n\nOutput\n\n5\n60\n1439\n1180\n1\n'''\n",
        "test": "assert solution(",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    s = list(map(lambda x: x.replace(' ', ''), s))\n    s = list(map(lambda x: x.replace('D', ''), s))\n    s = list(map(lambda x: x.replace('L', ''), s))\n    s = list(map(lambda x: x.replace('R', ''), s))\n    \n    if s[0] == 'R': s.insert(0, 'U')\n    else: s.append('D')\n    \n    l = 0\n    r = 0\n    count = 1\n    \n    for i in range(len(s)):\n        while s[i]!= 'D':\n            if l < r:\n                if s[l] == 'D':\n                    if i + count >= len(s):\n                        return -1\n                    r += 1\n                else:\n                    count += 1\n            else:\n                l += 1\n        \n        if s[i] == 'D':\n            count += 1\n    \n    return l + r - 1\n",
        "test": "assert solution(stdin) == 2",
        "num_ids": 1415,
        "indeed": false
    },
    {
        "number": 4530,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a_1, a_2 = map(int, stdin.split())\n    b_1, b_2 = map(int, stdin.split())\n    \n    a_1 -= a_2\n    b_2 -= b_1\n    \n    a_1 += a_2\n    a_2 += a_1\n    b_1 += b_2\n    b_2 += b_1\n    \n    if a_1 >= m or a_2 >= m or b_1 >= m or b_2 >= m:\n        return \"\"\n    \n    if a_1 == m:\n        return str(b_2 - b_1)\n    elif b_1 == m:\n        return str(a_2 - a_1)\n    else:\n        return str(b_1 - b_2)\n\nprint(solution())\n",
        "test": "assert solution(stdin) == 3",
        "num_ids": 1707,
        "indeed": false
    },
    {
        "number": 4531,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    def graph_to_vertex(n, edges):\n        graph = {i: [] for i in range(1, n + 1)}\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        return graph\n    \n    def edge_to_vertex(n, edges):\n        edges = set(edges)\n        vertices = {i for i in range(1, n + 1)}\n        for u, v in edges:\n            vertices.discard(u)\n            vertices.discard(v)\n        return vertices\n\n    def BFS(n, edges):\n        vertex_list = [n]\n        visited = set()\n        queue = deque([n])\n        visited.add(n)\n        while queue:\n            node = queue.popleft()\n            for edge in edges:\n                if node in edge:\n                    return (node, edge)\n            if node in vertex_list:\n                return (node, node)\n            if node not in visited:\n                visited.add(node)\n                for vertex in graph_to_vertex(n, set(graph[node]) - visited):\n                    if vertex not in visited:\n                        queue.append(vertex)\n    \n    def DFS(n, edges):\n        visited = set()\n        queue = deque([n])\n        while queue:\n            node = queue.popleft()\n            if node not in visited:\n                for edge in edges:\n                    if node in edge:\n                        return (node, edge)\n                visited.add(node)\n                for vertex in edge_to_vertex(n, set(edge) - visited):\n                    if vertex not in visited:\n                        queue.append(vertex)\n    \n    if n % 2 == 0:\n        return BFS(n, set(range(1, n + 1)))\n    return DFS(n, set(range(1, n + 1)))\n\n\n\n-----Constraints-----\n\n0 <= n <= 10^5\n\n\n-----Time Limit-----\n\nO(n log n)\n\n-----Space Limit-----\n\n1\n\n\n\"\"\"\n\nimport sys\nimport queue\n\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left, self.right = None, None\n\nclass Solution:\n    def maxPathSum(self, root: TreeNode) -> int:\n        \n        def dfs(node):\n            if not node:\n                return 0\n            res = float('-inf')\n            if node.left:\n                l_res = dfs(node.left)\n                if l_res > res:\n                    res = l_res\n            if node.right:\n                r_res = dfs(node.right)\n                if r_res > res:\n                    res = r_res\n            return node.val + res\n\n        return dfs(root)",
        "test": "assert solution(stdin) == '121'",
        "num_ids": 2702,
        "indeed": false
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(stdin) for _ in range(n)]\n    k = int(stdin)\n    a.sort()\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            if (k%a[j]==0):\n                ans.append(j-i)\n                k=k//a[j]\n    return''.join([str(x) for x in ans])\n\ndef",
        "test": "assert solution(stdin) == 18",
        "num_ids": 2110,
        "indeed": false
    },
    {
        "number": 4533,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    g = [int(i) for i in words]\n    h = [len(i) for i in words]\n    n = len(g)\n    d = {}\n    for i in range(n):\n        d[g[i]] = h[i]\n    \n    def helper(child, cur):\n        if len(child) == 1 and d[child[0]] > h[cur]:\n            d[child[0]] = h[cur]\n            return\n        \n        l = min(h[child[0]], child[1])\n        r = max(h[child[0]], child[1])\n        \n        for i in range(child[0], n):\n            if d[child[i]] < l:\n                helper(child, i)\n            if d[child[i]] > r:\n                helper(child, i)\n    \n    \n    answer = 0\n    for i in range(n):\n        answer += d[g[i]]\n        \n    return answer\n",
        "test": "assert solution('3 2') == 2",
        "num_ids": 2706,
        "indeed": false
    },
    {
        "number": 4534,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    k = len(stdin)\n    \n    answer = []\n    \n    for i in range(1, k + 1):\n        answer.append(int(stdin[i - 1]))\n        \n    return '\\n'.join(map(str, answer))\n\n\ndef",
        "test": "assert solution(5) == [1,3,3,1,6,5,1]",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 4535,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    _, n = list(map(int, stdin.split(' ')))\n    def binary(x: int) -> str:\n        if x == 0:\n            return '0'\n        elif x == 1:\n            return '1'\n        elif x % 2 == 0:\n            return '1' + binary(x // 2)\n        else:\n            return binary(x // 2) + '0' + binary(x % 2)\n    \n    return binary(n)\n",
        "test": "assert solution(\"0000000000000000000000001000001000000\") == 1",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 4536,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(i) for i in stdin.split()]\n    # print(x)\n    # print(len(x))\n    res = []\n    num = sum(x)\n    for i in x:\n        num -= i\n        # print(num)\n        if num < 0:\n            res.append(str(i))\n            num = num % 10\n        elif num == 0:\n            res.append(str(i))\n            break\n    # print(len(res))\n    return ''.join(res)\n\"\"\"\nclass Solution:\n    def addDigits(self, num: int) -> int:\n        digits = [int(i) for i in str(num)]\n        # print(digits)\n        num = num % 10\n        # print(num)\n        for i in range(len(digits)):\n            digits[i] += num // 10**i\n            num %= 10**i\n        # print(num)\n        return sum(digits)\n\"\"\"\n\nclass Solution:\n    def addDigits(self, num: int) -> int:\n        x = [int(i) for i in str(num)]\n        x.reverse()\n        for i in range(len(x)):\n            x[i] *= 10\n            x[i] += num // 10**i\n            num %= 10**i\n        x.reverse()\n        return sum(x)\n\"\"\"\n",
        "test": "assert solution([\"4\",\"3\",\"2\",\"0\"]) == \"2\"",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 4537,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(int,(stdin.split(' '))[1:])))\n\n##Test Case\ntest_input = \"3 1\"\ntest_res = \"4\"\n\nprint(solution(test_input))\nprint(test_res)",
        "test": "assert solution(\"2 2\") == \"2\"",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 4538,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    points = [list(map(int, input().split())) for i in range(N)]\n    x, y = 0, 0\n    for i in range(N):\n        x += points[i][0]\n        y += points[i][1]\n    res = []\n    for j in range(N):\n        if D <= abs(x - points[j][0]) + abs(y - points[j][1]):\n            res.append(j+1)\n    if not res:\n        return str(0)\n    return str(len(res))\n\nTestcases\n1 3\n2 5\n3 4\n4 -4\n5 -5\n6 -6\n7 -7\n8 -8\n9 -9\n10 -10\n11 -11\n12 -12\n13 -13\n14 -14\n15 -15\n16 -16\n17 -17\n18 -18\n19 -19\n20 -20\n21 -21\n22 -22\n23 -23\n24 -24\n25 -25\n26 -26\n27 -27\n28 -28\n29 -29\n30 -30\n31 -31\n32 -32\n33 -33\n34 -34\n35 -35\n36 -36\n37 -37\n38 -38\n39 -39\n40 -40\n41 -41\n42 -42\n43 -43\n44 -44\n45 -45\n46 -46\n47 -47\n48 -48\n49 -49\n50 -50\n51 -51\n52 -52\n53 -53\n54 -54\n55 -55\n56 -56\n57 -57\n58 -58\n59 -59\n60 -60\n61 -61\n62 -62\n63 -63\n64 -64\n65 -65\n66 -66\n67 -67\n68 -68\n69 -69\n70 -70\n71 -71\n72 -72\n73 -73\n74 -74\n75 -75\n76 -76\n77 -77\n78 -78\n79 -79\n80 -80\n81 -81\n82 -82\n83 -83\n84 -84\n85 -85\n86 -86\n87 -87\n88 -88\n89 -89\n90 -90\n91 -91\n92 -92\n93 -93\n94 -94\n95 -95\n96 -96\n97 -97\n98 -98\n99 -99\n100 -100\n101 -101\n102 -102\n103 -103\n104 -104\n105 -105\n106 -106\n107 -107\n108 -108\n109 -109\n110 -110\n111 -111\n112 -112\n113 -113\n114 -114\n115 -115\n116 -116\n117 -117\n118 -118\n119 -119\n120 -120\n121 -121\n122 -122\n123 -123\n124 -124\n125 -125\n126 -126\n127 -127\n128 -128\n129 -129\n130 -130\n131 -131\n132 -132\n133 -133\n134 -134\n135 -135\n136 -136\n137 -137\n138 -138\n139 -139\n140 -140\n141 -141\n142 -142\n143 -143\n144 -144\n145 -145\n146 -146\n147 -147\n148 -148\n149 -149\n150 -150\n151 -151\n152 -152\n153 -153\n154 -154\n155 -155\n156 -156\n157 -157\n158 -158\n159 -159\n160 -160\n161 -161\n162 -162\n163 -163\n164 -164\n165 -165\n166 -166\n167 -167\n168 -168\n169 -169\n170 -170\n171 -171\n172 -172\n173 -173\n174 -174\n175 -175\n176 -176\n177 -177\n178 -178\n179 -179\n180 -180\n181 -181\n182 -182\n183 -183\n184 -184\n185 -185\n186 -186\n187 -187\n188 -188\n189 -189\n190 -190\n191 -191\n192 -192\n193 -193\n194 -194\n195 -195\n196 -196\n197 -197\n198 -198\n199 -199\n200 -200\n201 -201\n202 -202\n203 -203\n204 -204\n205 -205\n206 -206\n207 -207\n208 -208\n209 -209\n210 -210\n211 -211\n212 -212\n213 -213\n214 -214\n215 -215\n216 -216\n217 -217\n218 -218\n219 -219\n220 -220\n221 -221\n222 -222\n223 -223\n224 -224\n225 -225\n226 -226\n227 -227\n228 -228\n229 -229\n230 -230\n231 -231\n232 -232\n233 -233\n234 -234\n235 -235\n236 -236\n237 -237\n238 -238\n239 -239\n240 -240\n241 -241\n242 -242\n243 -243\n244 -244\n245 -245\n246 -246\n247 -247\n248 -248\n249 -249\n250 -250\n251 -251\n252 -252\n253 -253\n254 -254\n255 -255\n256 -256\n257 -257\n258 -258\n259 -259\n260 -260\n261 -261\n262 -262\n263 -263\n264 -264\n265 -265\n266 -266\n267 -267\n268 -268\n269 -269\n270 -270\n271 -271\n272 -272\n273 -273\n274 -274\n275 -275\n276 -276\n277 -277\n278 -278\n279 -279\n280 -280\n281 -281\n282 -282\n283 -283\n284 -284\n285 -285\n286 -286\n287 -287\n288 -288\n289 -289\n290 -290\n291 -291\n292 -292\n293 -293\n294 -294\n295 -295\n296 -296\n297 -297\n298 -298\n299 -299\n300 -300\n301 -301\n302 -302\n303 -303\n304 -304\n305 -305\n306 -306\n307 -307\n308 -308\n309 -309\n310 -310\n311 -311\n312 -312\n313 -313\n314 -314\n315 -315\n316 -316\n317 -317\n318 -318\n319 -319\n320 -320\n321 -321\n322 -322\n323 -323\n324 -324\n325 -325\n326 -326\n327 -327\n328 -328\n329 -329\n330 -330\n331 -331\n332 -332\n333 -333\n334 -334\n335 -335\n336 -336\n337 -337\n338 -338\n339 -339\n340 -340\n341 -341\n342 -342\n343 -343\n344 -344\n345 -345\n346 -346\n347 -347\n348 -348\n349 -349\n350 -350\n351 -351\n352 -352\n353 -353\n354 -354\n355 -355\n356 -356\n357 -357\n358 -358\n359 -359\n360 -360\n361 -361\n362 -362\n363 -363\n364 -364\n365 -365\n366 -366\n367 -367\n368 -368\n369 -369\n370 -370\n371 -371\n372 -372\n373 -373\n374 -374\n375 -375\n376 -376\n377 -377\n378 -378\n379 -",
        "test": "assert solution(2,5) == \"1\"",
        "num_ids": 3824,
        "indeed": false
    },
    {
        "number": 4539,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes'\n",
        "test": "assert solution(3) == \"Yes\"",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    ans = 0\n    for i in range(1, n + 1):\n        if i > a and i < b:\n            ans += (i - a) * (b - a) + 2 * (i - a)\n        else:\n            ans += (i - a) * (i - b)\n    print(ans)\n    return str(ans)\n    \nSample Output\nSample Input\n3\n3 5 -1\n\nSample Output\n12\n8\n10\n\"\"\"\nclass Solution:\n    def __init__(self):\n        self.dp = {}\n        self.dp[0] = 0\n        self.dp[1] = self.dp[0] + self.dp[1]\n        self.dp[2] = self.dp[0] + self.dp[1] + self.dp[2]\n        self.dp[3] = self.dp[2] + self.dp[2] + self.dp[3]\n\n    def travel(self, n: int, a: int, b: int, x: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            if a == 0:\n                return b\n            if b == 0:\n                return 0\n            else:\n                return self.travel(n, a - 1, b - 1, x) + self.travel(n - 1, a, b, x)\n        elif n == 2:\n            return self.travel(n, a - 1, b, x) + self.travel(n - 1, a, b - 1, x)\n        elif n == 3:\n            return self.travel(n, a - 1, b, x) + self.travel(n - 1, a, b - 1, x) + self.travel(n - 2, a, b, x)\n        else:\n            return self.travel(n, a - 1, b, x) + self.travel(n - 1, a, b - 1, x) + self.travel(n - 2, a, b, x) + self.travel(n - 3, a, b, x)\n\ndef",
        "test": "assert solution(input) == 10",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 4541,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    return 'vowel'\n",
        "test": "assert solution([\"a\", \"e\", \"i\", \"o\", \"u\"]) == \"vowel\"",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 4542,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    stones = list(stdin)\n    white_stones = []\n    black_stones = []\n    for stone in stones:\n        if stone == 'W':\n            white_stones.append(stone)\n        else:\n            black_stones.append(stone)\n    stones = black_stones + white_stones\n    return min(len(stones), len(set(stones)))\n    # return 1\n",
        "test": "assert solution(\"BBBWW\"), \"No\"",
        "num_ids": 1458,
        "indeed": false
    },
    {
        "number": 4543,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a ** 2 + b ** 2) ** 0.5 == a ** 2 + b ** 2:\n        return 'Yes'\n    return 'No'",
        "test": "assert solution(\"4 11\") == \"No\"",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 4544,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(lambda x: int(x) - 1, map(int, stdin.split()))))\n",
        "test": "assert solution(inp) == 4",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 4545,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    squares = [N for _ in range(N*N)]\n    print(squares.count(A))\n    return str(squares.count(A))\n\n\nprint(solution(\"4\"))\nprint(solution(\"2\"))\nprint(solution(\"4\"))\n",
        "test": "assert solution(\"4 4 4\") == \"0\"",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 4546,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b-a == c-b:\n        return 'YES'\n    else:\n        return 'NO'",
        "test": "assert solution('2 4 6') == \"YES\"",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 4547,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(N == 9 or N % 9 == 9)\n    return \"Yes\" if N % 9 == 9 else \"No\"",
        "test": "assert solution(\"72\") == \"No\"",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 4548,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    sq = list(map(int, stdin.split()))\n    ret = list(map(int, stdin.split()))\n    \n    def get_in_A_i(A_i):\n        if A_i == 0:\n            return 0\n        else:\n            return ret[A_i - 1]\n\n    def get_in_A_j(j, A_i):\n        if j < N - 1:\n            return ret[j + 1]\n        else:\n            return 0\n        \n    for i in range(N):\n        ret[i] = ret[i] + max(get_in_A_i(i + 1) for i in range(N))\n    \n    for i in range(M):\n        ret[N - 1] = ret[N - 1] + max(get_in_A_j(j, i + 1) for j in range(M))\n        \n    return str(max(ret))\n",
        "test": "assert solution(input()) == \"5\"",
        "num_ids": 2232,
        "indeed": false
    },
    {
        "number": 4549,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(0, H):\n        for j in range(0, W):\n            if a[i][j] == 0:\n                a[i][j] = \"#\"\n            else:\n                a[i][j] = \".\"\n            count += 1\n            if count % 2 == 0:\n                print(\"#\" * count)\n            else:\n                print(\".\" * count)\n    print(\"Yes\" if count % 2 == 1 else \"No\")\n\"\"\"\n\n\nclass Solution:\n    def paint_square(self, i, j, s):\n        # dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] + s)\n        # return dp[i][j]\n        return dp[i][j]\n\n    def is_possible(self, i, j, dp):\n        if dp[i][j] > 0:\n            return True\n        else:\n            dp[i][j] = 0\n            if 0 <= i - 1 < H and 0 <= j - 1 < W and dp[i - 1][j - 1] + 1 < dp[i][j] and s <= dp[i - 1][j - 1] + dp[i][j]:\n                return True\n            if 0 <= i - 1 < H and dp[i - 1][j] + 1 < dp[i][j] and s <= dp[i - 1][j] + dp[i][j]:\n                return True\n            if 0 <= i - 1 < H and dp[i - 1][j - 1] + 1 < dp[i][j] and s <= dp[i - 1][j - 1] + dp[i][j]:\n                return True\n            if 0 <= i - 1 < H and dp[i - 1][j + 1] + 1 < dp[i][j] and s <= dp[i - 1][j + 1] + dp[i][j]:\n                return True\n            if 0 <= i - 1 < H and dp[i - 1][j - 1] + 1 < dp[i][j] and s <= dp[i - 1][j - 1] + dp[i][j]:\n                return True\n            if 0 <= i - 1 < H and dp[i - 1][j + 1] + 1 < dp[i][j] and s <= dp[i - 1][j + 1] + dp[i][j]:\n                return True\n            if 0 <= i - 1 < H and dp[i - 1][j - 1] + 1 < dp[i][j] and s <= dp[i - 1][j - 1] + dp[i][j]:\n                return True\n            if 0 <= i - 1 < H and dp[i - 1][j + 1] + 1 < dp[i][j] and s <= dp[i - 1][j + 1] + dp[i][j]:\n                return True\n            if 0 <= i - 1 < H and dp[i - 1][j - 1] + 1 < dp[i][j] and s <= dp[i - 1][j - 1] + dp[i][j]:\n                return True\n            return False\n\n    def paint_square_2(self, i, j, dp):\n        if dp[i][j] > 0:\n            return dp[i][j]\n        else:\n            dp[i][j] = 0\n            if 0 <= i - 1 < H and 0 <= j - 1 < W and dp[i - 1][j - 1] + 1 < dp[i][j] and s <= dp[i - 1][j - 1] + dp[i][j]:\n                return dp[i][j]\n            if 0 <= i - 1 < H and dp[i - 1][j] + 1 < dp[i][j] and s <= dp[i - 1][j] + dp[i][j]:\n                return dp[i][j]\n            if 0 <= i - 1 < H and dp[i - 1][j - 1] + 1 < dp[i][j] and s <= dp[i - 1][j - 1] + dp[i][j]:\n                return dp[i][j]\n            if 0 <= i - 1 < H and dp[i - 1][j + 1] + 1 < dp[i][j] and s <= dp[i - 1][j + 1] + dp[i][j]:\n                return dp[i][j]\n            if 0 <= i - 1 < H and dp[i - 1][j - 1] + 1 < dp[i][j] and s <= dp[i - 1][j - 1] + dp[i][j]:\n                return dp[i][j]\n            if 0 <= i - 1 < H and dp[i - 1][j + 1] + 1 < dp[i][j] and s <= dp[i - 1][j + 1] + dp[i][j]:\n                return dp[i][j]\n            if 0 <= i - 1 < H and dp[i - 1][j - 1] + 1 < dp[i][j] and s <= dp[i - 1][j - 1] + dp[i][j]:\n                return dp[i][j]\n            if 0 <= i - 1 < H and dp[i - 1][j + 1] + 1 < dp[i][j] and s <= dp[i - 1][j + 1] + dp[i][j]:\n                return dp[i][j]\n            if 0 <= i - 1 < H and dp[i - 1][j - 1] + 1 < dp[i][j] and s <= dp[i - 1][j - 1] + dp[i][j]:\n                return dp[i][j]\n            if 0 <= i - 1 < H and dp[i - 1][j + 1] + 1 < dp[i][j] and s <= dp[i - 1][j + 1] + dp[i][j]:\n                return dp[i][j]\n            if 0 <= i - 1 < H and dp[i - 1][j - 1] + 1 < dp[i][j] and s <= dp[i - 1][j - 1] + dp[i][j]:\n                return dp[i][j]\n            if 0 <= i - 1 < H and dp[i - 1][j + 1] + 1 < dp",
        "test": "assert solution(input()) == \"No\"",
        "num_ids": 3043,
        "indeed": false
    },
    {
        "number": 4550,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 2:\n        return 'No'\n    a, b, c = list(map(int, stdin))\n    if a * b * c!= c * a * b:\n        return 'No'\n    print('Yes')\n    return 'Yes'\n",
        "test": "assert solution('30 20 10') == 'No'",
        "num_ids": 1106,
        "indeed": false
    },
    {
        "number": 4551,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = map(int, stdin.split())\n    \n    if A > B and A > C and A > D:\n        answer = 'Left'\n    elif B > A and B > C and B > D:\n        answer = 'Left'\n    elif C > A and C > B and C > D:\n        answer = 'Left'\n    elif D > A and D > B and D > C:\n        answer = 'Left'\n    else:\n        answer = 'Right'\n    \n    return answer",
        "test": "assert solution(\"1 3 9 2\") == \"Left\"",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, F, P = map(int, stdin.split())\n    max_profit = 0\n    for _ in range(N):\n        F_i, P_i = map(int, stdin.split())\n        if (F_i+P_i)%2 == 0:\n            max_profit += F_i + P_i\n        else:\n            max_profit += F_i\n    return str(max_profit)\n",
        "test": "assert solution(\"1 2 0 1 0 0 1 1 0 4\") == \"0\"",
        "num_ids": 2993,
        "indeed": false
    },
    {
        "number": 4553,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return A+B==2 or A+B==3 or (A+B==1 and B!=1 and B!=3)\n",
        "test": "assert solution(stdin) == \"No\"",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 4554,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    W, a, b = map(int, stdin.strip().split())\n    A = [[0] * 2 for _ in range(N)]\n    B = [[0] * 2 for _ in range(N)]\n    x_max = 0\n    for _ in range(N):\n        A[0][0], A[0][1], A[0][2] = map(int, stdin.split())\n        A[1][0], A[1][1], A[1][2] = map(int, stdin.split())\n        A[2][0], A[2][1], A[2][2] = map(int, stdin.split())\n        B[0][0], B[0][1], B[0][2] = map(int, stdin.split())\n        B[1][0], B[1][1], B[1][2] = map(int, stdin.split())\n        B[2][0], B[2][1], B[2][2] = map(int, stdin.split())\n        if W < A[0][0] and W < A[1][1] and W < A[2][2]:\n            x_max = max(x_max, A[0][0]*A[1][0] + A[0][1]*A[2][1] + A[0][2]*A[2][2])\n    x_max = max(x_max, B[0][0] * B[1][1] + B[0][1] * B[2][2] + B[0][2] * B[1][0])\n    print(x_max)\n\ndef",
        "test": "assert solution(\"3 4 3 2\") == \"2\"",
        "num_ids": 1122,
        "indeed": false
    },
    {
        "number": 4555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n     \n    N,K = map(int,stdin.split())\n    arr = list(map(int,stdin.split()))\n    arr.sort()\n    answer = \"\"\n    for i in range(len(arr)):\n        if K >= 1:\n            for j in range(i, len(arr)):\n                if arr[j] >= K:\n                    answer += str(arr[j])\n                    K -= arr[j]\n                    break\n                if j == len(arr)-1:\n                    answer += str(arr[j])\n        else:\n            answer += str(arr[i])\n    \n    return answer\n",
        "test": "assert solution(stdin) == \"4 8 7\"",
        "num_ids": 2443,
        "indeed": false
    },
    {
        "number": 4556,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    a = s.pop(0)\n    b = s.pop(0)\n    print(a+b)\n    return ''.join(sorted(a+b))\n",
        "test": "assert solution(\"AC\") == \"AC\"",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 4557,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if X == 0:\n        return \"NO\"\n    if A+B == X:\n        return \"YES\"\n    return \"NO\"\n\n\n{\n    \"input\": \"3 5 4\",\n    \"output\": \"YES\"\n}\n",
        "test": "assert solution(\"2 2 2\") == \"NO\"",
        "num_ids": 2411,
        "indeed": false
    },
    {
        "number": 4558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    l = []\n    for line in stdin:\n        l.append(int(line))\n    \n    s = 0\n    for i in range(0,len(l)-1):\n        if (l[i] > 0 and l[i+1] > 0):\n            s += l[i] + l[i+1] * 10**(l[i+1]/10)\n        elif (l[i] > 0):\n            s += l[i] * 10**(l[i]/10)\n        else:\n            s += l[i] * 10**(l[i]/10)\n    return str(s)\n\ndef",
        "test": "assert solution(\"5\") == \"7\"",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 4559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----My Solution-----\ndef",
        "test": "assert solution(0, 1) == -1",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 4560,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'Yes' if n % 8 == 0 else 'No'\n",
        "test": "assert solution(\"2018\") == \"No\"",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 4561,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if A >= X + 1 or B >= (A - 1) or (A + 1) >= X + 1:\n        return'safe'\n    else:\n        return 'delicious'\n",
        "test": "assert solution(\"5 1 2\") == \"safe\"",
        "num_ids": 2420,
        "indeed": false
    },
    {
        "number": 4562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    s = 0\n    for i in stdin:\n        if i == '-':\n            s = s * 10\n        else:\n            s = s * 10 + int(i)\n        print(s)\n    return str(s)\n",
        "test": "assert solution(4) == 7",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 4563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N,T_1,T_2,A_1,A_2 = map(int,stdin.split())\n    A_1 = list(map(int,stdin.split()))\n    A_2 = list(map(int,stdin.split()))\n    def fn(A_1,A_2,N):\n        p = 0\n        for i in range(1,N+1):\n            p = p + max(A_1[i],A_2[i])\n        return p\n    def fn2(A_1,A_2,T_1,T_2,N):\n        p = 0\n        for i in range(1,N+1):\n            p = p + max(T_1[i],T_2[i])\n        return p\n    for i in range(N):\n        if A_1[i]!=A_2[i]:\n            p = fn(A_1,A_2,N)\n            if p<T_1[i]+T_2[i]:\n                return T_1[i]+T_2[i]\n            else:\n                return T_1[i]\n    return \"10\"\n\ndef",
        "test": "assert solution(stdin) == 3, \"Should be 3\"",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 4564,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        for j in range(len(stdin)-i):\n            if stdin[j:j+i]!= stdin[j+i:j+2*i]:\n                return 'no'\n    return 'yes'\n",
        "test": "assert solution('uncopyrightable') == 'no'",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 4565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = list(map(str, stdin.split()))\n    leader = S[0]\n    i = 1\n    total = 0\n    while i < N:\n        if leader == S[i]:\n            total += 1\n        else:\n            total -= 1\n            if total == 0:\n                i += 1\n                total = 1\n            else:\n                leader = S[i]\n        i += 1\n    return str(total)\n\n#######\ndef",
        "test": "assert solution(input) == \"1\"",
        "num_ids": 2411,
        "indeed": false
    },
    {
        "number": 4566,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N,M = map(int,stdin.split())\n    visited = [False]*N\n    answer = 0\n    def find(city):\n        nonlocal answer\n        if city == N:\n            answer += 1\n            return\n        for i in range(M):\n            if not visited[i]:\n                visited[i] = True\n                find(city + 1)\n                visited[i] = False\n    find(0)\n    return str(answer)\n",
        "test": "assert solution(input) == \"1\"",
        "num_ids": 1752,
        "indeed": false
    },
    {
        "number": 4567,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, s_i = map(int, stdin.split(\" \"))\n    s_i -= 1\n    if n >= s_i >= 1:\n        return str(s_i + 10)\n    elif n == 0:\n        return str(s_i)\n    else:\n        return str(s_i - 10)\n",
        "test": "assert solution(\"5 11\"), \"5\"",
        "num_ids": 1443,
        "indeed": false
    },
    {
        "number": 4568,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n < 2:\n        return '0'\n    X = []\n    Y = []\n    for i in range(n):\n        if stdin[i].isalpha():\n            X.append(stdin[i])\n    for i in range(n):\n        if stdin[i].isalpha():\n            Y.append(stdin[i])\n    a = len(X)\n    b = len(Y)\n    if a == b:\n        return len(X) * len(Y)\n    if a < b:\n        a, b = b, a\n    if a > b:\n        a, b = b, a\n    answer = 0\n    for i in range(a):\n        for j in range(b):\n            if X[i]!= Y[j]:\n                answer += 1\n    return str(answer)\n\n\"\"\"",
        "test": "assert solution(\"\") == ''",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 4569,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution(\"Cloudy\") == \"Cloudy\"",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 4570,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = map(int, stdin.split())\n    if n % a == 0 and n % b == 0:\n        return str(n // a * b)\n    else:\n        return str(n - n % b)\n",
        "test": "assert solution([\"3\",\"0\"]) == \"0\"",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 4571,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N == M:\n        return str(1)\n    elif N > M:\n        return str(int(M/N) + 1)\n    else:\n        return str(int(M/N) + int(M/M))\n\nprint(solution(\"1 1\"))\nprint(solution(\"1 1\"))\nprint(solution(\"1 1\"))\nprint(solution(\"1 1\"))\nprint(solution(\"1 1\"))\nprint(solution(\"1 1\"))\nprint(solution(\"1 1\"))\nprint(solution(\"1 1\"))\n",
        "test": "assert solution(input()) == 3800",
        "num_ids": 3686,
        "indeed": false
    },
    {
        "number": 4572,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    n = len(s)\n    for i in range(n):\n        for j in range(n):\n            if s[j]!= s[i]:\n                break\n        else:\n            if j == n - 1:\n                return None\n            else:\n                continue\n        if i == j:\n            return s[i]\n    return None\n",
        "test": "assert solution(\"AB\") == None",
        "num_ids": 2287,
        "indeed": false
    },
    {
        "number": 4573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split()))\n    x = sorted(list(map(int, x.split())))\n    if n % 2 == 0:\n        k = int(n/2)\n    else:\n        k = n-1\n    B = [0 for i in range(k)]\n    B[0] = x[k-1]\n    B[1] = x[k//2]\n    for i in range(2, k):\n        B[i] = B[i-1] + x[i]\n    answer = \"\"\n    for i in range(n-1, 0, -1):\n        answer += \"B_{} = {}\".format(i, B[i-1]) + \"\\n\"\n    return answer\n-----Sample Output-----\n4\n3\n4\n5\n",
        "test": "assert expected == str(solution(inp))",
        "num_ids": 1029,
        "indeed": false
    },
    {
        "number": 4574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type stdin: str\n    :rtype: str\n    \"\"\"\n    n=int(stdin)\n    A=[int(a) for a in input().split()]\n    A.sort(reverse=True)\n    return max(sum(a) for a in A[:n])\n    \n",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 4575,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X, A_1, A_2 = map(int, stdin.split())\n    cache = [set() for i in range(N + 1)]\n    for i in range(1, N + 1):\n        cache[i].add(i)\n    #print(cache)\n    for i in range(D):\n        D_i = i + 1\n        for j in range(1, N + 1):\n            for a in A_1:\n                for b in A_2:\n                    cache[j].add((a + 1) * D_i + (b + 1))\n    #print(cache)\n    return str(len(cache[N]))\n\n\"\"\"\n\ndef",
        "test": "assert solution('1 3') == 0",
        "num_ids": 1482,
        "indeed": false
    },
    {
        "number": 4576,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    if A + B + C == 0:\n        return '0'\n    if A * B * C == X:\n        return '1'\n    if A * B * C > X:\n        return '0'\n    if A * B * C > 0:\n        return '0'\n    return '0'\n",
        "test": "assert solution(\"2 0 100\") == 1",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 4577,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c < a or b < c:\n        return \"No\"\n    if c == a or c == b:\n        return \"Yes\"\n    if c > a:\n        return \"No\"\n    if c < b:\n        return \"No\"\n    return \"Yes\"",
        "test": "assert solution(\"1 3 2\") == \"No\"",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 4578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, m_1, m_2, m_N = [int(x) for x in stdin.split()]\n    \n    def check(num):\n        if num > N:\n            return False\n        if num > N:\n            return False\n        if num == N:\n            return True\n        if m_1 > num:\n            return False\n        if m_2 > num:\n            return False\n        if m_N > num:\n            return False\n        if m_1 < num and m_2 < num and m_N < num:\n            return True\n        if m_1 < num and m_2 < num and m_N < num:\n            return False\n    if check(m_1):\n        return \"0\"\n    if check(m_2):\n        return \"0\"\n    if check(m_N):\n        return \"0\"\n    if m_1 > m_2 > m_N:\n        return \"0\"\n    if m_1 < m_2 < m_N:\n        return \"0\"\n    if m_1 < m_2 < m_N:\n        return \"0\"\n    return \"0\"\n\nprint(solution(\"100 200 300 400 500 600 700 800 900\"))\n",
        "test": "assert solution('5 100') == '2'",
        "num_ids": 1298,
        "indeed": false
    },
    {
        "number": 4579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S_list = stdin.strip().split()\n    # print(S_list)\n    # print(len(S_list))\n    count = 0\n    for S_i in S_list:\n        if S_i == \"apple\":\n            count += 1\n        else:\n            break\n    return str(count)\n",
        "test": "assert solution(input) == '2'",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 4580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n\nN = int(stdin.split()[0])\na = list(map(int, stdin.split()))\na.sort()\n",
        "test": "assert solution(stdin) == 'yellow'",
        "num_ids": 942,
        "indeed": false
    },
    {
        "number": 4581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    price = 0\n    for c in stdin:\n        if c == 'o':\n            price += 700\n        elif c == 'x':\n            price -= 100\n    return str(price)\n\n\n    \n",
        "test": "assert solution(in_str) == '900', 'incorrect return value'",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 4582,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    i = 0\n    for _ in range(len(stdin)):\n        x = stdin[i]\n        if x == \"H\":\n            if a == 0:\n                print(\"H\")\n                a = 1\n            elif b == 0:\n                print(\"D\")\n                b = 1\n        if x == \"D\":\n            if a == 0:\n                print(\"D\")\n                a = 1\n            elif b == 0:\n                print(\"H\")\n                b = 1\n        i += 1\n    return \"H\" if a == 1 else \"D\"",
        "test": "assert solution([\"H\", \"H\", \"H\"]) == \"H\"",
        "num_ids": 820,
        "indeed": false
    },
    {
        "number": 4583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    for i in range(len(stdin)):\n        answer += str(int(stdin[i]) + 7)\n    return answer\n\nprint(solution(\"1222\"))\n",
        "test": "assert solution(    \"1+2\") == \"1+2=2\"",
        "num_ids": 2348,
        "indeed": false
    },
    {
        "number": 4584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    li = [0] * (n + 1)\n    a = [0] * (n + 1)\n    for i in range(n):\n        a[i], li[i + 1] = map(int, stdin.split())\n    for j in range(2, n + 1):\n        a[j] = a[j - 1] - li[j - 2]\n    answer = ''\n    for i in range(n - 1, -1, -1):\n        answer += str(a[i])\n    return answer\n",
        "test": "assert solution('2 3') == 2, \"solution(3)\"",
        "num_ids": 2474,
        "indeed": false
    },
    {
        "number": 4585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        x = int(stdin)\n        if x > 0:\n            x -= 3\n        elif x < 0:\n            x += 3\n        if x == 0:\n            break\n    return str(x)\n",
        "test": "assert solution(3) == '0'",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 4586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    # https://youtu.be/R_2FVgRzwqE\n    def is_good(num):\n        return (len(num) == 4 and\n                num[0] == num[1] == num[2] == num[3])\n    return 'Yes' if is_good(stdin) else 'No'\n\nN = int(input())\nprint(solution(str(N)))\n",
        "test": "assert solution(\"10001\") == \"No\"",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 4587,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  A = [int(stdin) for _ in range(N)]\n  B = [int(stdin) for _ in range(N)]\n  C = [int(stdin) for _ in range(N)]\n  Upper = 1\n  Middle = 1\n  Lower = 1\n  for i in range(N):\n    if A[i] > Upper:\n      Middle = Upper\n      Upper = A[i]\n    elif A[i] > Middle:\n      Middle = A[i]\n      Upper = A[i]\n    elif A[i] > Lower:\n      Lower = A[i]\n      Upper = A[i]\n    else:\n      Middle = A[i]\n      Lower = A[i]\n  def lst():\n    return [Upper, Middle, Lower]\n  def set(x: int) -> str:\n    A_i = lst().index(x)\n    B_i = lst().index(x)\n    C_i = lst().index(x)\n    return f'{x}-{A_i}-{B_i}-{C_i}'\n  def get(x: str) -> int:\n    return int(x[1:])\n  def suma(x: str) -> int:\n    return sum(get(x[i]) for i in range(len(x)))\n  def altas():\n    return [suma(x) for x in set(A)]\n  def altas2():\n    return [suma(x) for x in set(B)]\n  def altas3():\n    return [suma(x) for x in set(C)]\n  def cerca(x: int) -> int:\n    return abs(x-Upper) + abs(x-Middle) + abs(x-Lower)\n  def concat(x: list) -> str:\n    return ''.join(str(e) for e in x)\n  def rev(x: str) -> str:\n    return x[::-1]\n  def sum_altas(x: str) -> int:\n    return sum(suma(altas()) for altas in altas())\n  def sum_altas2(x: str) -> int:\n    return sum(suma(altas2()) for altas in altas2())\n  def sum_altas3(x: str) -> int:\n    return sum(suma(altas3()) for altas in altas3())\n  def altas_rand(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand2(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand3(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand4(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand5(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand6(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand7(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand8(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand9(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand10(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand11(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand12(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand13(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand14(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand15(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand16(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand17(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand18(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand19(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand20(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand21(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand22(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand23(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand24(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand25(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand26(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand27(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand28(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand29(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand30(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand31(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand32(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand33(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand34(x: int) -> int:\n    return len(altas_rand(x))\n  def altas_rand35(x: int) -> int:",
        "test": "assert solution(input()) == \"3\"",
        "num_ids": 3889,
        "indeed": false
    },
    {
        "number": 4588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # code here\n    return str(int(stdin, 16) < int(stdin, 16) == int(stdin, 16) == int(stdin, 16))",
        "test": "assert solution(\"X > Y\") == \">10\"",
        "num_ids": 882,
        "indeed": false
    },
    {
        "number": 4589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    res = ''\n    for h in range(int(stdin.split('\\n')[0])):\n        row = []\n        for w in range(int(stdin.split('\\n')[1])):\n            row.append(stdin.split(':')[h*w:w*(h+1)])\n        for r in row:\n            if r[0] == '.':\n                res += '#'\n            else:\n                res += str(int(r[0])+1)\n    return res\n\ndef",
        "test": "assert solution(input) == \"11211\"",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 4590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    a_n, b_n = map(int, stdin.split())\n    a_m, b_m = map(int, stdin.split())\n    a_k, b_k = map(int, stdin.split())\n    a_i = 0\n    b_i = 0\n    a_start = a_k + a_n + a_m + a_m\n    b_start = b_k + b_n + b_m + b_m\n    while a_i < a_k:\n        a_n -= 1\n        a_m -= 1\n        a_i += 1\n        a_start -= 1\n    while b_i < b_k:\n        b_n -= 1\n        b_m -= 1\n        b_i += 1\n        b_start -= 1\n    if a_start == a_k or b_start == b_k or a_i == a_k or b_i == b_k:\n        return \"0\"\n    else:\n        return str(a_start + b_start) + str(a_n) + str(b_n) + str(a_m) + str(b_m)\n\nsolution(\"60 90 120\")\n",
        "test": "assert solution([\"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7",
        "num_ids": 2516,
        "indeed": false
    },
    {
        "number": 4591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y = map(int, stdin.split())\n    A, B, C = divmod(a, x), divmod(b, y), divmod(c, y)\n    for x in [a, b, A, B]:\n        for y in [c, B, C, A]:\n            if A and not x and not B:\n                if y:\n                    x += y\n            elif B and not x and not A:\n                if y:\n                    y += y\n    if not x and not y:\n        return \"0\"\n    return str(x*y)\n",
        "test": "assert solution('1500 2000 1600 3 2') == '7900'",
        "num_ids": 4818,
        "indeed": false
    },
    {
        "number": 4592,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    divisors = []\n    for i in range(1, int(stdin) + 1):\n        if (i % 3 == 0) or (i % 5 == 0):\n            divisors.append(i)\n    return str(len(divisors))",
        "test": "assert solution(3) == \"1\"",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 4593,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    P = list(map(int, stdin.split()))\n    P.sort()\n    for i in range(1,N+1):\n        if i == 1:\n            print(i)\n        if P[0] % i == 0:\n            print(P[0]/i)\n            P = P[1:]\n            break\n    print(len(P))\n    return str(len(P))\n\n\nSolution\nSample Input\n1\n1\n2\n3\nSample Output\n2\n1\n2\n3\n\n'''\n\ndef",
        "test": "assert solution(s) == 10, \"Function solution is returning the wrong result.\"",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 4594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    for i in range(1, int(stdin.strip()) + 1):\n        b = []\n        for j in stdin.split():\n            b.append(int(j))\n        a.append(b)\n    s = []\n    for i in range(1, len(a)):\n        s.append(sum(a[i-1]))\n    c = max(s)\n    if len(a) == 1:\n        return str(c)\n    else:\n        return f'{c+1}-layered kagami mochi'\n",
        "test": "assert solution(\"2 1 4 5\") == \"4\"",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 4595,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(' ')\n    snuke = s[0][7:-1]\n    return snuke if len(snuke) > 0 else ''\n",
        "test": "assert solution(\"QWERTYASDFZXCV\"), \"5\"",
        "num_ids": 2192,
        "indeed": false
    },
    {
        "number": 4596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(n):\n        nums = int(stdin[i])\n        if nums % 2 == 0:\n            result += nums // 2\n            nums = nums // 2\n        else:\n            result += nums\n    print(result)\n    return str(result)",
        "test": "assert solution(\\\"\\\"\\\"",
        "num_ids": 988,
        "indeed": false
    },
    {
        "number": 4597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def power_sum(N: int, i: int) -> int:\n        if i == 0 or i == N:\n            return 1\n        return power_sum(N, i-1) * i\n    return str(power_sum(n, n))",
        "test": "assert solution(stdin) == \"6\"",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 4598,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    candy = 0\n    for _ in range(N):\n        candy += int(stdin.strip().split()[1])\n    return str(candy)\n",
        "test": "assert solution(stdin) == \"6\"",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 4599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    s = [int(x) for x in stdin.split('\\n')[0].split()]\n    print(s[0])\n    print(s[1])\n    return 'Alice' if s[0] > s[1] else 'Bob'\n\ndef",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 4600,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N, M, p = [int(i) for i in stdin.split()]\n    pac = [0] * N\n    \n    for i in range(N):\n        pac[i] = (M - i) // N\n    \n    ans = [0] * N\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if (pac[i] + pac[j]) == p:\n                ans[i] = j\n                break\n    \n    if (N % 2!= 0):\n        for i in range(N//2):\n            ans[i] = N - ans[N-1-i]\n    \n    return str(ans[0]) + \" \" + str(ans[-1])\n",
        "test": "assert solution('4 5 2'), '1'",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 4601,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    H = list(map(int, stdin.split()))\n    H.sort()\n\n    attack = 0\n    special = 0\n    for i in range(len(H)-1):\n        if H[i] + 1 < H[i+1]:\n            attack += 1\n        if H[i] < H[i+1]:\n            special += 1\n    return str(attack+special)",
        "test": "assert solution(",
        "num_ids": 2664,
        "indeed": false
    },
    {
        "number": 4602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N, K, x = map(int, stdin.split())\n    balls = [0] * N\n    balls[0] = 1\n    for i in range(1, N):\n        balls[i] = balls[i-1] + balls[i-1]\n    balls[K] = 0\n    for i in range(K+1, N):\n        for j in range(N):\n            if j == K:\n                balls[j] = 2\n            elif i == K:\n                balls[j] = 2\n            else:\n                balls[j] = balls[j-1] + balls[j-1]\n        balls[i] = balls[i-1] + balls[i-1]\n    if sum(balls) == 0:\n        return \"0\"\n    return str(sum(balls))\n\"\"\"\n\n\nclass Ball:\n    def __init__(self, x, y, state):\n        self.x = x\n        self.y = y\n        self.state = state\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y and self.state == other.state\n\n    def __repr__(self):\n        return f\"{self.x},{self.y},{self.state}\"\n\n\ndef",
        "test": "assert solution(",
        "num_ids": 3815,
        "indeed": false
    },
    {
        "number": 4603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    \n    if A + B + C + D == 0:\n        return '0'\n    \n    if (A + B + C + D) % 3 == 0:\n        return str(A + B + C + D)\n    \n    if (A + B + C + D) % 3 == 1:\n        return str(A + B + C + D)\n    \n    if (A + B + C + D) % 3 == 2:\n        return str(A + B + C + D)\n    \n    if A == 0:\n        return str(C + D)\n    \n    if B == 0:\n        return str(A + B + C + D)\n    \n    if C == 0:\n        return str(A + B + C + D)\n    \n    if D == 0:\n        return str(A + B + C + D)\n    \n    return str(A + B + C + D) + solution(stdin)\n",
        "test": "assert solution(stdin) == '420'",
        "num_ids": 2473,
        "indeed": false
    },
    {
        "number": 4604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(i) for i in stdin.split(\" \")]\n    sum = 0\n    for i in range(len(numbers)):\n        sum += numbers[i] * (numbers[i] - 1)\n    return str(sum%(10**9+7))",
        "test": "assert solution(stdin) == \"4\"",
        "num_ids": 556,
        "indeed": false
    },
    {
        "number": 4605,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == 1:\n        print(a+b)\n    else:\n        s = 0\n        for i in range(1, n+1):\n            print(s, a, b)\n            if i % 10 == 0:\n                s += a + b\n            else:\n                s += a * b\n        print(s)\n",
        "test": "assert solution(\"5 20 4\") == \"84\"",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 4606,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(i) for i in stdin.split()]\n    for i in range(len(arr)):\n        arr[i] += 1\n    arr.sort()\n    for i in range(len(arr)-2):\n        if arr[i]!= arr[i+1] or arr[i]!= arr[i+2]:\n            return arr[i]+'0'*(2-arr[i])\n    return arr[-1]\n\n\nprint(solution(stdin))\n",
        "test": "assert solution(stdin) == 'ABC100'",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 4607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    year = 2020\n    month = m - d + 1\n    day = d\n    for y in range(year, year + 366):\n        if d == 1:\n            if m == 1:\n                if y % 4 == 0:\n                    month = 1\n                else:\n                    month = y // 4\n                day = 29\n            else:\n                if y % 4 == 0:\n                    month = y // 4\n                else:\n                    month = y % 4 + 1\n                day = 30\n        else:\n            if m == 1:\n                day = 31\n            else:\n                day = 30\n            if day > d:\n                day = day - d\n            else:\n                day = day - d\n            day -= 1\n            if day == 0:\n                d += 1\n                day = 31\n                month -= 1\n    return str(day)\n",
        "test": "assert solution(input()) == \"5\"",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 4608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    lst = list(map(int, stdin.split()))\n    print(lst)\n    n = len(lst)\n    answer = []\n    for i in range(n):\n        if lst[i]!= 1:\n            answer.append(i)\n        if lst[i] == 2:\n            answer.append(i)\n    return min(answer) + min(answer) - 1",
        "test": "assert solution(",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 4609,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N,A_1,A_2,A_3,A_4,A_5,A_6 = map(int,stdin.split())\n    \n    #print(A_1)\n    #print(A_2)\n    #print(A_3)\n    #print(A_4)\n    #print(A_5)\n    #print(A_6)\n    #return \"The number of numbers on the sheet is {}\".format(sum(A_1,A_2,A_3,A_4,A_5,A_6))\n    \n    A_4 = list(map(int,str(A_4)))\n    A_6 = list(map(int,str(A_6)))\n    #print(A_4)\n    #print(A_6)\n    \n    if sum(A_4)==A_6:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    #return \"The number of numbers on the sheet is {}\".format(sum(A_1,A_2,A_3,A_4,A_5,A_6))\n\n    return \"\"",
        "test": "assert solution(stdin), \"The game is not correct\"",
        "num_ids": 1259,
        "indeed": false
    },
    {
        "number": 4610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    N = N + 1\n    if N == K:\n        return str(K)\n    if K < N:\n        return '1'\n    N_C = [0] * (K + 1)\n    for i in range(K):\n        if i == 0:\n            N_C[0] = 1\n        elif i == K - 1:\n            N_C[i] = N - 1\n        else:\n            N_C[i] = N_C[i - 1] + N - 1\n    \n    for i in range(1, N):\n        N_C[i] = N_C[i - 1] + N - 1\n        N_C[i + K - 1] = N_C[i - 1] + N - 1\n    \n    answer = str(K)\n    for i in range(K):\n        answer += str(N_C[i] % 10 + 1)\n    return answer\n\nInput\n1 2\n1 1 2 2 5\nOutput\n1\n\n1\n3\n5\n1\nOutput\n3\n\n5\n1\n6\n1\nOutput\n3\n\n5\n2\n6\n1\nOutput\n1\n\n5\n3\n1\n6\nOutput\n2\n\n6\n3\n1\n6\nOutput\n1\n\n6\n1\n6\nOutput\n1\n\n7\n8\n7\n8\nOutput\n8\n\n7\n1\n1\nOutput\n8\n\n7\n1\n1\nOutput\n1\n\n7\n2\n1\nOutput\n1\n\n5\n2\n3\nOutput\n3\n\n1\n2\nOutput\n3\n\n4\n1\n1\nOutput\n1\n\n3\n2\nOutput\n1\n\n5\n3\nOutput\n1\n\n1\nOutput\n1\n\n5\n3\n1\nOutput\n1\n\n5\n2\n1\nOutput\n1\n\n6\nOutput\n1\n\n1\nOutput\n1\n\n8\nOutput\n2\n\n1\nOutput\n1\n\nOutput\n2\n\n6\nOutput\n1\nOutput\n1\n\nOutput\n1\n\nOutput\n1\n\n6\nOutput\n1\nOutput\n1\n\nOutput\n1\n\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput",
        "test": "assert solution(input()) == 1",
        "num_ids": 2608,
        "indeed": false
    },
    {
        "number": 4611,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, t_1, t_2 = map(int, stdin.split())\n    # 4-dimensional array\n    X, Y, t_N = map(int, stdin.split())\n    # time array\n    t_list = map(int, stdin.split())\n    # time array\n    t_list = list(map(lambda x: x+1, t_list))\n    # time array\n    t_list = list(map(lambda x: x-1, t_list))\n    if t_list[t_N-1] >= t_1:\n        return 'Yes'\n    elif t_list[t_N-1] >= t_2:\n        return 'No'\n    else:\n        x_1 = t_list[t_N-1]\n        x_2 = t_list[t_N]\n        # if x_1 == x_2 then it is if t_1 and t_2 can be in a straight line\n        if x_1 == x_2:\n            if t_1 == t_2:\n                return 'Yes'\n            else:\n                return 'No'\n        # if x_1 is greater then x_2\n        elif x_1 > x_2:\n            # if t_1 > t_2 then it is if it is the last point\n            if t_1 == t_2:\n                return 'Yes'\n            else:\n                return 'No'\n        # if x_1 is less then x_2\n        elif x_1 < x_2:\n            # if t_1 <= t_2 then it is if it is the first point\n            if t_1 == t_2:\n                return 'Yes'\n            else:\n                return 'No'\n",
        "test": "assert solution('3 1 2') == 'Yes'",
        "num_ids": 1566,
        "indeed": false
    },
    {
        "number": 4612,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    a = int(input())\n    b = int(input())\n    result = str(a+b)\n    print(int(result))\n    return str(int(result))\n\n\n'''\n\nimport math\n\na, b = map(int, input().split())\nx = a + b\nprint(math.ceil(x/2))",
        "test": "assert solution(\"1 4\") == \"1 4\"",
        "num_ids": 2256,
        "indeed": false
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N,M = map(int,stdin.split())\n    graph = []\n    for _ in range(N):\n        graph.append(list(map(int,list(stdin.strip()))))\n    for i in range(N):\n        for j in range(N):\n            if graph[i][j] == 1 and graph[j][i] == 1:\n                graph[i][j] = 2\n            if graph[j][i] == 1 and graph[i][j] == 2:\n                graph[i][j] = 3\n    \n    answer = []\n    for i in range(N):\n        if graph[i][i] == 2:\n            answer.append(1)\n        elif graph[i][i] == 3:\n            answer.append(1)\n        else:\n            answer.append(0)\n    return str(len(answer))\n\nprint(solution(input()))\n--------------------------------------------------------------------------------\nInput:\nThe input contains the following information:\nThe first line contains an integer T, denoting the number of test cases. Then T test cases follow. Each test case consists of two lines, a line containing an integer N, denoting the number of vertices and M. Next, the first line contains an integer NN, denoting the number of vertices in the graph. Next, the next NN lines contain NN integers representing the edges of the graph. Each edge has the form of a pair of two integers, a1,b1,a2,b2.  \n\nOutput:\nFor each test case, output the number of the edges that are bridges among the M edges.\n\nInput:\nThe first line of input contains an integer T, denoting the number of test cases. Then T test cases follow.\nThe next T lines contains an integer N, denoting the number of vertices and M.\nThe next M lines contains M space separated integers denoting the edges of the graph.\n\nOutput:\nFor each test case, output the number of the edges that are bridges among the M edges.\n\nConstraints:\n1\u2264T\u2264100\n1\u2264N\u22642^50\n1\u2264M\u226450\n\nExamples:\nInput:\n2\n5 4\n2 4\n1 5\n1 4\n3 2\n3 6\n4 3\nOutput:\n3\n\nInput:\n2\n2\n2 3\n1 2\n1 3\n1 3\nOutput:\n0\n\nConstraints:\n1\u2264T\u2264100\n1\u2264N\u22642^50\n1\u2264M\u226450\n1\u2264a_i<b_i<=N\n1\u2264a_i<b_i<N\n1\u2264a_i<b_i<N\n2\u2264a_i<b_i<N\n\"\"\"\nclass Solution:\n    def solution(self,tc,N,M):\n        graph = [0]*(N+1)\n        graph[0] = [0,0]\n        graph[1] = [0]\n        for i in range(2,N+1):\n            graph[i][0] = 1\n            graph[i][1] = 1\n        for j in range(2,M+1):\n            graph[j][0] = 1\n            graph[j][1] = 1\n        for i in range(2,N+1):\n            for j in range(2,M+1):\n                if graph[i][j] == 0:\n                    graph[i][j] = graph[i-1][j-1] + graph[i-1][j]\n        return graph[tc][M]\n\ntc=int(input())\nN=int(input())\nM=int(input())\nprint(Solution().solution(tc,N,M))",
        "test": "assert solution(\"6 4 5 2 3\") == 2",
        "num_ids": 1553,
        "indeed": false
    },
    {
        "number": 4614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[0])\n    B = int(stdin[1])\n    C = int(stdin[2])\n    \n    if A == B and C!= B:\n        return str(B)\n    if A == B and C == C:\n        return str(C)\n    if A == B or B == C or C == A:\n        return str(A)\n    \n    return str(B)",
        "test": "assert solution(test_input) == '7'",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 4615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = [int(x) for x in stdin.split()]\n    \n    if A > B and A > C and A > D and A > E and F > 0 and F > 100 and F > 3:\n        print(100, 100, F)\n    else:\n        print(0, 0, 0)\n    return \"\"\n\n-----Sample Output-----\n1 2 3\n1 2\n\nThis code is contributed by v8HWgv0\n\"\"\"\n\nA, B, C, D, E, F = [int(x) for x in input().split()]\n\nA_value = 100 * A / 100\nB_value = 100 * B / 100\nC_value = 100 * C / 100\nD_value = 100 * D / 100\nE_value = 100 * E / 100\nF_value = 100 * F / 100",
        "test": "assert solution(stdin) == \"110\"",
        "num_ids": 4856,
        "indeed": false
    },
    {
        "number": 4616,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 3:\n        if stdin[0] == 'i':\n            if stdin[2] == 'n':\n                return 'i18n'\n            else:\n                return 'i' + solution(stdin[1:])\n        else:\n            return 'n' + solution(stdin[1:])\n    else:\n        return stdin",
        "test": "assert solution(\"i18n\") == \"i18n\"",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 4617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n  # your code goes here\n  n = len(stdin)\n  if n < 3 or n > 4:\n    return \"NO\"\n  a = list(stdin)\n  for i in range(n):\n    for j in range(i + 1):\n      if a[i][j] == a[i][j + 1] and a[i][j + 1] == a[i + 1][j + 1]:\n        if a[i][j] == a[i + 1][j + 1] and a[i + 1][j + 1] == a[i + 1][j + 1]:\n          return \"YES\"\n  return \"NO\"\n\nprint(solution(stdin))",
        "test": "assert solution(stdin) == \"NO\"",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 4618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin.strip())\n    k = int(s.pop(0))\n    n = len(s)\n    \n    # sort the string in order\n    s.sort()\n    \n    def find(s, k):\n        l = 0\n        r = k - 1\n        while r < n:\n            if s[r] == s[l]:\n                l += 1\n            r += 1\n        return l\n    \n    # Binary search\n    def binary_search(s, k):\n        left = 0\n        right = n\n        while left < right:\n            mid = (left + right) // 2\n            if s[mid] < k:\n                left = mid + 1\n            else:\n                right = mid\n        if left == n:\n            return -1\n        else:\n            return binary_search(s, k)\n    \n    for i in range(k):\n        if s[i] == s[n-1-i]:\n            l = i\n            break\n    \n    while s[l] == s[n-1-l]:\n        l -= 1\n    r = n-1-l\n    while r > l:\n        if s[r] == s[n-1-r]:\n            r -= 1\n        else:\n            return s[l]\n    \n    sorted_k = sorted(s, reverse = True)\n    return sorted_k[r]\n\n-----Submissions-----\n1\n3\n5\n3\n3\n4\n\n2\n5\n1\n\n3\n5\n1\n2\n5\n4\n\n4\n5\n1\n5\n\n-----Time Limit-----\nRuntime: 152 ms, faster than 95.51% of Python3 online submissions for Substring Subsequences.\nMemory Usage: 14.1 MB, less than 65.24% of Python3 online submissions for Substring Subsequences.\n\n---------Partner's Answer----------------------\n10\n3\n3\n3\n3\n3\n3\n\n5\n5\n3\n4\n\n4\n5\n5\n4\n5\n4\n4\n\n2\n6\n5\n2\n3\n\n3\n3\n5\n4\n\n7\n6\n5\n5\n\n4\n5\n4\n\n5\n\n6\n5\n6\n\n5\n\n4\n4\n\n4\n\n4\n5\n4\n\n3\n5\n\n3\n5\n2\n\n5\n\n5\n5\n2\n\n6\n\n5\n5\n\n5\n\n5\n\n6\n6\n\n5\n\n1\n1\n1\n\n2\n\n\n2\n5\n5\n\n3\n\n5\n\n5\n\n1\n5\n\n1\n\n3\n\n5\n\n3\n\n5\n\n2\n\n\n3\n3\n\n1\n\n2\n\n5\n5\n\n6\n\n5\n\n5\n\n6\n\n5\n\n5\n\n6\n\n6\n\n1\n\n5\n\n6\n\n\n4\n\n\n5\n\n3\n\n5\n\n3\n\n5\n\n2\n\n1\n\n\n1\n\n1\n\n2\n\n3\n\n3\n\n5\n\n5\n\n2\n\n\n5\n\n\n5\n\n5\n\n5\n\n1\n\n\n5\n\n5\n5\n\n5\n\n6\n\n6\n\n6\n\n6\n\n5\n\n1\n\n\n5\n\n2\n\n5\n\n\n1\n\n3\n\n5\n\n5\n\n2\n\n1\n\n\n5\n\n6\n\n1\n\n\n5\n\n5\n\n1\n\n5\n\n1\n\n1\n\n1\n\n1\n\n1\n\n\n2\n\n5\n\n\n5\n\n1\n\n\n5\n\n5\n\n3\n\n1\n\n1\n\n5\n\n\n5\n\n5\n\n1\n\n2\n\n1\n\n5\n\n1\n\n5\n\n5\n\n3\n\n5\n\n6\n\n5\n\n1\n\n5\n\n5\n\n4\n\n6\n\n\n4\n\n5\n\n5\n\n6\n\n1\n\n3\n\n5\n\n4\n\n1\n\n1\n\n5\n\n5\n\n3\n\n5\n\n5\n\n4\n\n3\n\n1\n\n1\n\n1\n\n1\n\n3\n\n3\n\n5\n\n1\n\n1\n\n3\n\n5\n\n1\n\n1\n\n5\n\n4\n\n5\n\n5\n\n1\n\n1\n\n5\n\n1\n\n5\n\n1\n\n1\n\n5\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n2\n\n1\n\n1\n\n5\n\n3\n\n5\n\n1\n\n1\n\n5\n\n3\n\n1\n\n1\n\n1\n\n3\n\n5\n\n1\n\n1\n\n5\n\n5\n\n1\n\n1\n\n4\n\n5\n\n1\n\n5\n\n3\n\n1\n\n1\n\n1\n\n1\n\n2\n\n5\n\n5\n\n1\n\n1\n\n3\n\n1\n\n5\n\n5\n\n1\n\n2\n\n3\n\n5\n\n2\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n3\n\n5\n\n1\n\n1\n\n5\n\n3\n\n2\n\n3\n\n5\n\n5\n\n3\n\n1\n\n5\n\n5\n\n5\n\n1\n\n5\n\n1\n\n1\n\n2\n\n5\n\n1\n\n2\n\n5\n\n5\n\n5\n\n1\n\n1\n\n1\n\n1\n\n2\n\n1\n\n3\n\n1\n\n1\n\n3\n\n2\n\n3\n\n3\n\n5\n\n3\n\n1\n\n3\n\n2\n\n5\n\n3\n\n3\n\n1\n\n3\n\n1\n\n3\n\n5\n\n3\n\n5\n\n5\n\n3\n\n5\n\n5\n\n4\n\n2\n\n5\n\n2\n\n4\n\n1\n\n1\n\n1\n\n1\n\n1\n\n2\n\n1\n\n1\n\n1\n\n5\n\n1\n\n1\n\n3\n\n1\n\n3\n\n3\n\n1\n\n1\n\n2\n\n1\n\n1\n\n1\n\n5\n\n1\n\n1\n\n1\n\n3\n\n5\n\n5\n\n2\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n2\n\n1\n\n1\n\n1\n\n1\n\n2\n\n1\n\n1\n\n3\n\n1\n\n1\n\n3\n\n5\n\n3\n\n1\n\n1\n\n1\n\n5\n\n3\n\n1\n\n1\n\n1\n\n3\n\n5\n\n1\n\n5\n\n1\n\n3\n\n1\n\n1\n\n1\n\n2\n\n1\n\n5\n\n1\n\n5\n\n5\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n5",
        "test": "assert solution(",
        "num_ids": 5615,
        "indeed": false
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    W, H, N = map(int, stdin.split())\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    a_1 = 1\n    a_2 = 4\n    \n    while True:\n        x_1 -= 1\n        y_1 -= 1\n        x_2 -= 1\n        y_2 -= 1\n        if x_1 < 0 or x_1 > W or y_1 < 0 or y_1 > H or x_2 < 0 or x_2 > W or y_2 < 0 or y_2 > H:\n            break\n        a = (a_1 + a_2) % N\n        if a == 0:\n            a = 1\n        if a == 1:\n            a_1 = a_1 + 1\n            a_2 = a_2 + 1\n        elif a == 2:\n            a_1 = a_1 + 1\n            a_2 = a_2 + 3\n        elif a == 3:\n            a_1 = a_1 + 3\n            a_2 = a_2 + 1\n        else:\n            a_1 = a_1 + 1\n            a_2 = a_2 + 2\n    \n    print(a_1 * (x_2 - x_1 + 1) * (y_2 - y_1 + 1))\n\n-----Constraints-----\n - 1 \u2266 W, H \u2266 100\n - 1 \u2266 N \u2266 100\n - 0 \u2266 x_i \u2266 W (1 \u2266 i \u2266 N)\n - 0 \u2266 y_i \u2266 H (1 \u2266 i \u2266 N)\n - W, H (21:32, added), x_i and y_i are integers.\n - a_i (1 \u2266 i \u2266 N) is 1, 2, 3 or 4.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nW H N\nx_1 y_1 a_1\nx_2 y_2 a_2\n:\nx_N y_N a_N\n\n-----Output-----\nPrint the area of the white region within the rectangle after Snuke finished painting.\n\n-----Sample Input-----\n5 4 2\n2 1 1\n3 3 4\n\n-----Sample Output-----\n9\n\nThe figure below shows the rectangle before Snuke starts painting.\nFirst, as (x_1, y_1) = (2, 1) and a_1 = 1, he paints the region satisfying x < 2 within the rectangle:\nThen, as (x_2, y_2) = (3, 3) and a_2 = 4, he paints the region satisfying y > 3 within the rectangle:\nNow, the area of the white region within the rectangle is 9.\ndef",
        "test": "assert solution(\"1 1 3\") == \"1\"",
        "num_ids": 3020,
        "indeed": false
    },
    {
        "number": 4620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    stations = [list(map(int, input().split())) for _ in range(n)]\n    time_departure = [list(map(int, input().split())) for _ in range(n)]\n    time_departure = sorted(time_departure, key=lambda x: (x[1], x[2]), reverse=True)\n    stations = sorted(stations, key=lambda x: x[1])\n    start_station = 0\n    end_station = n - 1\n    while start_station <= end_station:\n        if stations[start_station][0] == stations[start_station + 1][0] and stations[start_station][1] > stations[start_station + 1][1]:\n            start_station = start_station + 1\n            end_station = end_station - 1\n        elif stations[start_station][0] == stations[start_station + 1][0] and stations[start_station][1] < stations[start_station + 1][1]:\n            start_station = start_station + 1\n            end_station = end_station - 1\n        else:\n            start_station = 0\n    end_station = n - 1\n    departure_time = 0\n    for time in time_departure:\n        if departure_time < time[1] <= departure_time + time[2]:\n            departure_time = time[1]\n            end_station = end_station - 1\n        elif departure_time < time[1] <= departure_time + time[2]:\n            departure_time = time[1]\n            start_station = start_station - 1\n    answer = 0\n    for station in stations:\n        answer += station[2] * station[3] * (station[1] - departure_time)\n    return str(answer)\n\nprint(solution(input()))\n",
        "test": "assert solution(\"1 10 10\") == \"10\"",
        "num_ids": 1658,
        "indeed": false
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    L, W = stdin.split()\n    H = int(H)\n    W = int(W)\n    pixels = [[] for _ in range(H)]\n    for i in range(W):\n        pixels[0].append(stdin[i])\n    for i in range(1, H):\n        for j in range(W):\n            if (i+j)%2 == 0:\n                if pixels[i][j] == '.':\n                    pixels[i][j] = '.'\n                else:\n                    pixels[i][j] = pixels[i][j] + pixels[i][j+1]\n            else:\n                if pixels[i][j] == '.':\n                    pixels[i][j] = '.'\n                else:\n                    pixels[i][j] = pixels[i][j] + pixels[i+1][j]\n    return '\\n'.join(pixels)\n",
        "test": "assert solution('C.C') == '.C*.C'",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 4622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = map(int, stdin.split())\n    result = []\n    for i in range(N):\n        result.append(A[i]*A[i+1] - A[i]*A[i-1])\n    \n    return \"YES\" if set(result) == set(range(2, N+1)) else \"NO\"\n",
        "test": "assert solution(input()) == \"NO\"",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(lambda x: (x[0] + x[1]) - (x[0] + x[2]), enumerate(stdin.split()))))\n\ndef",
        "test": "assert solution(test_cases) == answer",
        "num_ids": 1888,
        "indeed": false
    },
    {
        "number": 4624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = int(stdin.strip())\n\n    floor = []\n    for i in range(x):\n        floor.append(list(map(int, stdin.split())))\n\n    apartments = []\n    for i in range(x):\n        apartments.append(list(map(int, stdin.split())))\n\n    dp = [[0] * (x + 1) for _ in range(x + 1)]\n\n    for i in range(x + 1):\n        for j in range(i):\n            if apartments[i - 1][j] == 1:\n                dp[i][j] = dp[j][i - 1] + 1\n            else:\n                dp[i][j] = dp[j][i - 1]\n\n    count = 0\n    for i in range(x):\n        for j in range(i + 1, x + 1):\n            if dp[i][j]!= 0:\n                count += 1\n\n    return str(count)\n\"\"\"\nn = int(input())\na = list(map(int, input().split()))\n\nlst = []\nfor i in a:\n    if i not in lst:\n        lst.append(i)\n\nlst.sort()\n\nprint(len(lst))",
        "test": "assert solution('1 2 3 1 2') == '1'",
        "num_ids": 4078,
        "indeed": false
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    m = int(stdin.splitlines()[1])\n    p_1 = int(stdin.splitlines()[2])\n    p_2 = int(stdin.splitlines()[3])\n    p_3 = int(stdin.splitlines()[4])\n    p_4 = int(stdin.splitlines()[5])\n    p_5 = int(stdin.splitlines()[6])\n    s = stdin.splitlines()[7]\n    t = 0\n    for i in range(n):\n        if s[i] in ['a', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']:\n            t += p_1\n            p_1 -= 1\n            t += p_2\n            p_2 -= 1\n            t += p_3\n            p_3 -= 1\n            t += p_4\n            p_4 -= 1\n            t += p_5\n            p_5 -= 1\n        else:\n            t += p_1\n            p_1 -= 1\n    return str(t)\n\n\ndef",
        "test": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
        "num_ids": 5860,
        "indeed": false
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    a -= 1\n    b -= 1\n    c -= 1\n    \n    dist = [999999999999999999999999999999]\n    \n    for i in range(n):\n        dist.append(min(a, b, c))\n        if a == b and a == c:\n            dist[i] = 0\n            continue\n        if a!= b or a!= c:\n            dist[i] = min(a, b, c) - min(a, b, c)\n        else:\n            dist[i] = min(a, b) - min(a, c)\n        if dist[i] > 0:\n            a -= dist[i]\n        if dist[i] < 0:\n            b -= dist[i]\n        if dist[i] < 0 and dist[i]!= 0:\n            c -= dist[i]\n    \n    answer = []\n    for i in range(q):\n        if a == b and a == c:\n            answer.append(0)\n            continue\n        if a!= b or a!= c:\n            answer.append(0)\n        else:\n            answer.append(min(a, b, c))\n        if a!= b and a!= c:\n            answer.append(0)\n        if a!= b and a!= c:\n            answer.append(0)\n        if a!= b and a!= c:\n            answer.append(0)\n    return''.join(map(str, answer))",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 3139,
        "indeed": false
    },
    {
        "number": 4627,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n        \n        \n        a = list(map(int, stdin.split()))\n        #a = [int(i) for i in stdin.split()]\n        \n        n = len(a)\n        \n        if(n == 1):\n            return \"NO\"\n        \n        # count the number of pair\n        pair = 0\n        for i in range(n-1):\n            if(a[i]!= a[i+1]):\n                pair += 1\n        if(pair == n-1):\n            return \"YES\"\n        \n        # determine if pair exist\n        d_pair = []\n        for i in range(n):\n            # if it is pair number, check if same\n            if(a[i] % 2 == 0):\n                d_pair.append(a[i])\n        # if all elements are odd, don't pair\n        if(len(d_pair) == n):\n            return \"NO\"\n        \n        # if all elements are even, pair\n        if(len(d_pair) == 0):\n            return \"YES\"\n        \n        # if there are pair, check if pair exist\n        p = len(d_pair) // 2\n        for i in range(p):\n            for j in range(i+p,p-1):\n                if(d_pair[i] % 2!= d_pair[j] % 2):\n                    break\n            else:\n                return \"YES\"\n        else:\n            return \"NO\"\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ",
        "test": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"YES\"",
        "num_ids": 2012,
        "indeed": false
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    c = 1\n    d = 1\n    for line in stdin:\n        for i in range(len(line)):\n            if line[i] == 'A':\n                c += 1\n                d -= 1\n            elif line[i] == 'B':\n                d += 1\n                c -= 1\n            elif line[i] == 'C':\n                c -= 1\n                d += 1\n            else:\n                d -= 1\n        if d == 0:\n            break\n    return str(c) + '$' + str(c + d)\n\n[input]\n\na, b, c, d, e, f, g, h, i, j, k = map(int, input().split())\n\n\n[output]\n\nprint(solution(f'{a} {b} {c} {d} {e} {f} {g} {h} {i} {j} {k}'))\n\n\ndef",
        "test": "assert solution(stdin) == \"22\"",
        "num_ids": 4023,
        "indeed": false
    },
    {
        "number": 4629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    # Assumption : n \\le m and there are no duplicates of powers of 3\n    def is_good(n, m):\n        return n + m <= 100 and not any(i%3 == j%3 for i, j in zip(n, m))\n    \n    # Assumption : n \\le m and there are no duplicates of powers of 3\n    def is_good_1(n, m):\n        return n + m <= 100 and not any(i%3 == j%3 for i, j in zip(n, m))\n    \n    # Find the smallest integer n, where the sum of powers of 3 is less than or equal to n.\n    # If n = 3^n, sum of powers of 3 is 1.\n    # And there are no duplicates of powers of 3.\n    def get_m(n, m):\n        global n_good_m\n        for n_m in range(n, m+1):\n            if is_good(n_m, m):\n                n_good_m = n_m\n                break\n        return n_good_m\n    \n    # Find the smallest integer m, where the sum of powers of 3 is greater than or equal to n.\n    # If m = 3^m, sum of powers of 3 is 1.\n    # And there are no duplicates of powers of 3.\n    def get_m_1(n, m):\n        global m_good_m\n        for m_m in range(m, m+1):\n            if is_good_1(n, m_m):\n                m_good_m = m_m\n                break\n        return m_good_m\n    \n    n_good_m = get_m(N, N)\n    m_good_m = get_m(N, N)\n    \n    for _ in range(N):\n        n, m = map(int, stdin.readline().split())\n        if is_good(n, m):\n            print(m_good_m)\n        else:\n            print(n_good_m)\n",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    \n    n,p = list(map(int,stdin.split()))\n    answer = []\n    if len(p)<n+1:\n        return \"0\"\n    else:\n        for i in range(n+1):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n+1):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        answer.append(\"0\")\n        print(answer)\n        for i in range(1,n):\n            answer.append(str(i))\n        ",
        "test": "assert solution == '3 2 1 1 2'",
        "num_ids": 1893,
        "indeed": false
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nOutput: \n[-1,2,6,4,-1,-2,-1,2,-1,6,-1]\n[-1,-2,-1,-1,3,5,0,-1,-1,-2,-1,1]\nInput\n1 2\n3 4\nOutput\n3\nInput\n3 5\n4 0 3\nOutput\n2\nInput\n1 5\n3 0 2\nOutput\n-1\n\nExplanation:\nThere are $n$ people who want to celebrate Christmas. Let $y_1, y_2, \\dots, y_m$ be the positions of people (note that all values $x_1, x_2, \\dots, x_n, y_1, y_2, \\dots, y_m$ should be distinct and all $y_j$ should be integer).\n\nHere are the positions of all the people:\nx_1, x_2, \\dots, x_n = [1,2,4,0]\ny_1, y_2, \\dots, y_m = [3,5,0,4]\n\nThe minimum possible value is $-2 \\cdot 10^9 \\le y_j \\le 2 \\cdot 10^9$\n\nHere are the positions of all the people:\nx_1, x_2, \\dots, x_n = [3,4,5,0]\ny_1, y_2, \\dots, y_m = [5,6,0,4]\n\nThe minimum possible value is $5 -2 4 -1 2 = -1$\n\nHere are the positions of all the people:\nx_1, x_2, \\dots, x_n = [1,2,4,3]\ny_1, y_2, \\dots, y_m = [3,4,0,5]\n\nThe minimum possible value is $-1 2 4 -1 = -1$\n'''\n\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n        def dfs(l, r):\n            if l > r:\n                return None\n            i = l + (r-l)//2\n            x = nums[i]\n            if i >= len(nums) or x < nums[i-1] or x > nums[i+1]:\n                return nums[i]\n            return dfs(l, i-1) + nums[i] - dfs(i+1, r)\n        return dfs(0, len(nums)-1)\n",
        "test": "assert solution(stdin) == \"5\"",
        "num_ids": 1996,
        "indeed": false
    },
    {
        "number": 4632,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(str, stdin.split()))\n    size = int(stdin[0])\n    stdin = [int(s) for s in stdin[1:]]\n    if size == 1:\n        return \"YES\"\n    \n    if size == 2:\n        return \"YES\"\n    \n    res = [\"\"]\n    \n    for x in range(1, size):\n        x_1, x_2 = stdin[x - 1], stdin[x]\n        if x_1 >= x_2:\n            continue\n        \n        if x_2 > x_1:\n            res[-1] += \"R\"\n        else:\n            res.append(\"R\")\n    if res[-1] == \"R\":\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert solution(\"2\") == \"YES\"",
        "num_ids": 2727,
        "indeed": false
    },
    {
        "number": 4633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n,s=stdin.split()\n    n=int(n)\n    s=int(s)\n    if(n<=s or not n%10 or not s%10):\n        return '0'\n    start=1\n    end=n+1\n    res=0\n    while(start<=end):\n        mid=int((start+end)/2)\n        m=mid\n        while(m!=1):\n            if(m%10==s%10):\n                res=max(res,mid-start+1)\n                start=mid+1\n            else:\n                end=mid\n            mid=int((start+end)/2)\n        start=1\n        end=mid\n    return str(res)\n",
        "test": "assert solution(500, 1) == 500",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 4634,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    if n <= 3:\n        return str(n)\n    if len(a) % 2!= 0:\n        return \"1\"\n    a.sort()\n    n = len(a) // 2\n    a = a[:n] + a[n:]\n    for i in range(len(a)):\n        a[i] = 1 if a[i] >= 0 else 0\n    a = ''.join(map(str, a))\n    if a[0] == '0':\n        a = '0' + a[1:]\n    answer = 0\n    for j in range(len(a)):\n        if a[j] == '0':\n            answer += 1\n        else:\n            answer += 2\n    return str(answer)\n",
        "test": "assert solution(\"4\") == \"1\"",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 4635,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\".join(sorted(stdin[i] for i in range(len(stdin))))",
        "test": "assert solution(\"abc\") == \"abc\"",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    \n    t, n = map(int, stdin.split())\n    a, b = [0] * n, [0] * n\n    \n    for i in range(t):\n        a, b = map(int, stdin.split())\n        for i in range(a):\n            a[i] += 1\n        \n    for j in range(n):\n        b[j] += a[j]\n    \n    for i in range(n):\n        b[i] += b[i-1]\n    \n    print(a)\n    print(b)\n    \n    return str(a[0]) + str(b[0])\n\ndef",
        "test": "assert solution(stdin) == '23 21'",
        "num_ids": 1210,
        "indeed": false
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    n = int(stdin[0])\n    k = int(stdin[1])\n    a, b = [], []\n    for i in range(n):\n        a.append(int(stdin[i + 1]))\n        b.append(int(stdin[i + 2]))\n    for i in range(k):\n        a[i], b[i] = b[i], a[i]\n    return str(max(a)) + \" \" + str(max(b))\n\n-----Test-----\n\nInput\n5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4\n1 2 2 1\n4 4 5 4\n\nOutput\n6\n27\n39\n11\n17\n\"\"\"",
        "test": "assert solution(stdin) == '11'",
        "num_ids": 1394,
        "indeed": false
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    floor = list(map(int, stdin.split()))\n    time = sum(floor)\n    return str(time)",
        "test": "assert solution
        "num_ids": 3801,
        "indeed": false
    },
    {
        "number": 4639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    if n < 2 or k < 1 or n!= n-2:\n        return ''\n    def get_list(k):\n        return ''.join(sorted(set([i for i in stdin.split(' ')[k]])))\n    def get_dict(k):\n        return {i:j for i,j in enumerate(sorted(set(stdin.split(' ')[k])))}\n    dict_ = get_dict(k)\n    t = sorted([get_list(i) for i in range(k)])\n    print(t)\n    return ''.join(t)",
        "test": "assert solution(\"5 100\") == \"aaaaabaaaaab\"",
        "num_ids": 2096,
        "indeed": false
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    x_lst = []\n    y_lst = []\n    for i in range(n):\n        t, x, y = map(int, stdin.split(' '))\n        x_lst.append(x)\n        y_lst.append(y)\n        for j in range(i+1, n):\n            t, x, y = map(int, stdin.split(' '))\n            if t < k:\n                x_lst.append(x)\n                y_lst.append(y)\n            elif t == k:\n                break\n    x_lst.sort()\n    y_lst.sort()\n    print(len(set(x_lst) & set(y_lst)))\n    return '1'\n    \n    \n",
        "test": "assert solution(",
        "num_ids": 1458,
        "indeed": false
    },
    {
        "number": 4641,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(x) for x in stdin.split()))",
        "test": "assert solution('0') == '0'",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = sorted([int(x) for x in range(n)], reverse=True)\n    a.append(y)\n    a = a[:n]\n    for i in range(1, n):\n        a[i] = a[i - 1] - a[i - 1]\n    a = [a[i] if i <= a[i - 1] and i <= a[i + 1] else 0 for i in range(n)]\n    return \"\".join(map(str, a))\n\n-----Brute force-----\n\n1\n2\n1\n3\n1\n3\n4\n1\n4\n\n4\n1\n2\n3\n4\n5\n\n4\n2\n1\n2\n3\n4\n5\n\n2\n2\n4\n3\n4\n5\n\n2\n2\n1\n2\n3\n4\n5\n\n2\n2\n1\n2\n3\n5\n\n2\n1\n1\n2\n2\n3\n5\n\n3\n2\n2\n2\n1\n3\n\n3\n2\n3\n2\n3\n4\n5\n\n4\n2\n4\n2\n3\n3\n5\n\n4\n4\n4\n5\n\n4\n4\n5\n\n4\n1\n4\n1\n2\n5\n\n4\n1\n2\n2\n3\n4\n5\n\n5\n1\n5\n1\n\n5\n5\n\n5\n\n4\n1\n2\n2\n3\n4\n5\n\n3\n3\n2\n2\n1\n2\n4\n4\n\n4\n1\n2\n3\n3\n3\n5\n\n4\n2\n3\n2\n2\n3\n4\n5\n\n5\n\n4\n3\n2\n3\n1\n4\n\n4\n4\n4\n5\n\n4\n4\n1\n5\n5\n\n4\n5\n\n5\n5\n\n5\n\n5\n\n5\n5\n\n3\n\n2\n2\n3\n3\n3\n4\n\n4\n1\n2\n3\n3\n3\n5\n\n5\n\n4\n1\n2\n2\n3\n3\n3\n5\n\n4\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n4\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n4\n4\n\n4\n5\n\n5\n\n3\n4\n\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n3\n3\n4\n5\n\n5\n\n5\n\n4\n4\n5\n\n4\n4\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n4\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n4\n4\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n4\n4\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n4\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n4\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n4\n4\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n4\n5\n\n5\n\n4\n5\n\n5\n\n4\n4\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n4\n4\n\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n4\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n4\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n4\n5\n\n4\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n4\n4\n5\n\n5\n\n4\n4\n5\n\n5\n\n4\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n4\n4\n\n5\n\n5\n\n5\n\n5\n\n4\n4\n\n5\n\n5\n\n4\n5\n\n4\n4\n\n4\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n4\n4\n\n5\n\n5\n\n5\n\n5\n\n4\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\n4\n4",
        "test": "assert solution(test_input) == expected_output",
        "num_ids": 2563,
        "indeed": false
    },
    {
        "number": 4643,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    _stdin = list(stdin.split())\n    _stdin.sort()\n    return \" \".join(map(str, _stdin))\n\nprint(solution('2 3 4 3 5 2 4'))\n\n\n'''\nIn order to be able to sort the tickets in place, we need to sort the tickets in the following way:\n\nO(n)\n\n'''",
        "test": "assert solution(\"1 2 3\") == \"1 2 3\"",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 4644,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    \n    lst = list(map(int, stdin.split()))\n    n = len(lst)\n    if not n%2==0:\n        return \"NO\"\n    \n    answer = 0\n    \n    def solve(i,j,k):\n        if i>j and i>k:\n            return \"NO\"\n        elif i==j or j==k or i==k:\n            return \"NO\"\n        else:\n            if i==0 or j==0 or k==0:\n                return \"NO\"\n            answer += lst[i]*lst[j]*lst[k]\n            solve(i-1,j,k-1)\n            solve(i+1,j,k-1)\n            solve(i-1,j,k)\n            solve(i+1,j,k)\n            \n    solve(0,0,n-1)\n    return answer",
        "test": "assert solution(\"1\") == \"NO\"",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 4645,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    return '9'\n",
        "test": "assert solution(3) == '9'",
        "num_ids": 2607,
        "indeed": false
    },
    {
        "number": 4646,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i][j] += dp[i-1][j]\n            else:\n                dp[i][j] += dp[i-1][j] % 2\n        \n    return str(dp[n-1][n-1])\n\n\n\n'''\ndef",
        "test": "assert solution(stdin) == 2",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 4647,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lst = [list(map(int, input().split())) for _ in range(n)]\n    sub = [0]*n\n    def search(x, y):\n        if lst[x][y]!= 1:\n            if x == y:\n                return 1\n            if lst[x][y] == 0:\n                return search(y, y) + search(y, y)\n            return search(x, y) + search(x, y)\n        if lst[x][y] == 1:\n            return search(x, y) + search(x, y) + 1\n        return search(x, y) + 1\n    res = 0\n    for i in range(n):\n        sub[i] = search(i, 0) + search(i, n-1)\n    res = max(res, sub[0])\n    for i in range(1, n):\n        sub[i] = max(sub[i-1], sub[i]) + search(i, n-1)\n    res = max(res, sub[n-1])\n    return str(res)\n\n-------------------------------------------------\nimport sys\n\nN = int(sys.stdin.readline())\nDP = [[0 for _ in range(N+1)] for _ in range(N+1)]\nDP[1][1] = 1\nDP[2][2] = 2\nDP[2][3] = 3\nDP[3][4] = 4\nDP[3][5] = 5\nDP[4][6] = 6\nDP[5][7] = 7\nDP[6][8] = 8\nDP[7][9] = 9\nDP[8][10] = 10\n\ndef",
        "test": "assert solution(stdin) == '2'",
        "num_ids": 2614,
        "indeed": false
    },
    {
        "number": 4648,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = [int(i) for i in stdin.split()]\n    move = [0 for _ in range(len(lst))]\n    for i in range(len(lst)):\n        move[i] = lst[i]\n    answer = 0\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == 15116544:\n                move[j] = lst[j]\n            elif lst[i] + lst[j] == 15116544 + 10**6:\n                move[j] = lst[j]\n            elif lst[i] + lst[j] == 15116544 + 10**6 + 15116544 + 10**6:\n                move[j] = lst[j]\n            elif lst[i] + lst[j] == 15116544 + 10**6 + 15116544 + 10**6 + 15116544 + 10**6:\n                move[j] = lst[j]\n            else:\n                answer += 1\n    print(answer)\n    return str(answer)\n    pass\n\n\n\n-----Sample Input-----\n\nInput\n1\n1\n2\n4\n5\n6\n8\n3\n\nOutput\n1\n0\n0\n-1\n-1\n0\n-1\n-1\n-1\n-1\n\nExplanation\n\nFor example, given n = 1 and moves = [1,2], the answer is obtained by choosing from the available moves. So, the solution is 1.\n\nIn the given example, the solution is determined by the following sequence:\n\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n10012101010\n100",
        "test": "assert solution([\"1\", \"1\", \"3\", \"12\", \"12345\", \"15116544\", \"387420489\", \"15116544\", \"387420489\", \"387420489\"]) == \"-1\"",
        "num_ids": 3852,
        "indeed": false
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    for _ in range(q):\n        n, k = map(int, stdin.split())\n        s = stdin.strip().lower()\n        n = len(s)\n        if n < k + 1:\n            return '0'\n        \n        substring = s[n - k : n]\n        if substring!= ''.join(sorted(s[:n-k])):\n            return '0'\n        \n        print(sorted(s[n-k:n], key = lambda x: -len(x)))\n        \n    return '0'\n'''\nimport collections\nimport sys\ninput = sys.stdin.readline\n\nclass MyHashMap:\n\n    def __init__(self):\n        self.map = collections.defaultdict(int)\n\n    def put(self, key: int, value: int) -> None:\n        self.map[key] = value\n\n    def get(self, key: int) -> int:\n        return self.map[key]\n\n    def remove(self, key: int) -> None:\n        del self.map[key]\n\nclass Solution:\n    def __init__(self):\n        self.map = MyHashMap()\n\n    def minNumberOfSubstrings(self, s: str) -> int:\n        \n        \n        \n        \n        # return\n        # print(self.map.map)\n        # print(s)\n        # print(s.split('R'))\n        # print(self.map.get(s.split('R')[0].split('G')[0]))\n        \n        # print(self.map.get(s.split('R')[0].split('G')[0]))\n        # print(self.map.get(s.split('R')[0].split('G')[1]))\n        # print(self.map.get(s.split('R')[0].split('G')[1]))\n        # print(self.map.get(s.split('R')[0].split('G')[2]))\n        # print(self.map.get(s.split('R')[0].split('G')[2]))\n        \n        \n        # print(s.split('R')[0].split('G')[1])\n        # print(s.split('R')[0].split('G')[2])\n        \n        # print(s.split('R')[0].split('G')[2])\n        # print(s.split('R')[0].split('G')[1])\n        # print(s.split('R')[0].split('G')[0])\n        \n        # print(s.split('R')[0].split('G')[1])\n        # print(s.split('R')[0].split('G')[2])\n        # print(s.split('R')[0].split('G')[0])\n        # print(s.split('R')[0].split('G')[1])\n        # print(s.split('R')[0].split('G')[2])\n        # print(s.split('R')[0].split('G')[3])\n        \n        # print(s.split('R')[0].split('G')[2])\n        # print(s.split('R')[0].split('G')[1])\n        # print(s.split('R')[0].split('G')[0])\n        # print(s.split('R')[0].split('G')[1])\n        # print(s.split('R')[0].split('G')[2])\n        # print(s.split('R')[0].split('G')[3])\n        # print(s.split('R')[0].split('G')[4])\n        # print(s.split('R')[0].split('G')[5])\n        # print(s.split('R')[0].split('G')[6])\n        # print(s.split('R')[0].split('G')[7])\n        # print(s.split('R')[0].split('G')[8])\n        # print(s.split('R')[0].split('G')[9])\n        \n        \n        # return\n        # print(s.split('R')[0].split('G')[4])\n        # print(s.split('R')[0].split('G')[5])\n        # print(s.split('R')[0].split('G')[6])\n        # print(s.split('R')[0].split('G')[7])\n        # print(s.split('R')[0].split('G')[8])\n        # print(s.split('R')[0].split('G')[9])\n        \n        # return\n        # print(s.split('R')[0].split('G')[5])\n        # print(s.split('R')[0].split('G')[6])\n        # print(s.split('R')[0].split('G')[7])\n        # print(s.split('R')[0].split('G')[8])\n        # print(s.split('R')[0].split('G')[9])\n        # print(s.split('R')[0].split('G')[10])\n        # print(s.split('R')[0].split('G')[11])\n        # print(s.split('R')[0].split('G')[12])\n        # print(s.split('R')[0].split('G')[13])\n        # print(s.split('R')[0].split('G')[14])\n        # print(s.split('R')[0].split('G')[15])\n        # print(s.split('R')[0].split('G')[16])\n        # print(s.split('R')[0].split('G')[17])\n        # print(s.split('R')[0].split('G')[18])\n        # print(",
        "test": "assert solution(\"BBBRR\") == \"3\"",
        "num_ids": 3090,
        "indeed": false
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    l = []\n    for i in range(1, a+1):\n        l.append(i)\n    for i in range(1, b+1):\n        l.append(i)\n    print(l)\n    return str(max(l))\n\nprint(solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n3 1 2 3 1\\n3 2 3 3 3\"))",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 4651,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    perm = [int(i) for i in stdin.strip().split()]\n    q = []\n    for i in range(n):\n        if i < n - 1:\n            q.append(perm[i] - perm[i + 1])\n        else:\n            q.append(perm[i])\n    return''.join([str(i) for i in q])",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 1891,
        "indeed": false
    },
    {
        "number": 4652,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO'\n",
        "test": "assert solution(\"1 4 2 3\") == \"NO\"",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n = n*2 + 2\n    result = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            result += (k-1)//2 * 2 if n%2==0 else (k-1)//2 * 2 + 1\n    print(result)\n    return str(result)\n-----Constraints-----\n\n1 <= t <= 10^4\n1 <= n <= 10^5\n1 <= k <= 10^6\n\nExample 1:\nInput:\n3\n5 2\n19 4\n12 7\n6 2\n100000 50010\nOutput:\n5\n18\n10\n6\n75015\nExplanation:\nAfter all the test cases, we can distribute the candies in a way that satisfies the constraints.\n\nExample 2:\nInput:\n3\n5 2\n19 4\n12 7\n6 2\n100000 50010\nOutput:\n5\n18\n10\n6\n75015\nExplanation:\nThe number of kids with $5$ candies that are valid will satisfy the constraints above.\n\nExample 3:\nInput:\n4\n5 3\n11 7\n6 2\n100000 50010\nOutput:\n5\n4\n6\n7\n8\n10\n10\n15\n15\n15\nExplanation:\nThe number of kids with $5$ candies that are valid will satisfy the constraints below.\n\"\"\"",
        "test": "assert solution(stdin) == '1'",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 4654,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if k % 2 == 0:\n        return \"YES\"\n    if k % 2 == 1:\n        return \"NO\"\n    for i in range(n):\n        temp = (i * k) % n\n        if (temp % 2 == 0):\n            return \"YES\"\n        if (temp % 2 == 1):\n            return \"NO\"\n    return \"NO\"",
        "test": "assert solution
        "num_ids": 2706,
        "indeed": false
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    candy_set = set()\n    for _ in range(N):\n        c, a, b, cnt = map(int, stdin.split())\n        candy_set.add(c)\n        if a % 2 == 0:\n            a -= 1\n        if b % 2 == 0:\n            b -= 1\n    answer = 0\n    for i in range(1, N+1):\n        # The problem is that Bob will not be able to divide the candies of his first pile.\n        if (i, len(candy_set)) in cnt:\n            continue\n        num = 1\n        while num <= len(candy_set) and (i, num) not in cnt:\n            num += 1\n        if num <= len(candy_set):\n            num -= 1\n            answer += num\n            candy_set.add(candy_set.pop())\n    return str(answer)",
        "test": "assert solution(stdin) == \"1000000000000000\"",
        "num_ids": 945,
        "indeed": false
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[0]\n    if len(s)!= n:\n        return 0\n    letters = list(s)\n    for i in range(n):\n        if letters[i]!= s[i]:\n            return 0\n    return max(k, len(s))",
        "test": "assert solution(stdin) == 5",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, q, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = i\n    for i in range(q):\n        a1, a2 = map(int, stdin.split())\n        if a1 in d and a2 in d:\n            a1 = d[a1]\n            a2 = d[a2]\n            a = sorted([a[a1], a[a2]])\n            if len(a) == 1:\n                a = a[0]\n            else:\n                a = a[::-1]\n            print(a)\n            break\n    else:\n        print(\"NO\")\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom itertools import combinations\n\ndef",
        "test": "assert solution(stdin) == 'YES'",
        "num_ids": 1437,
        "indeed": false
    },
    {
        "number": 4658,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(''.join(map(str, map(int, list(stdin))))) ^ int(''.join(map(str, list(reversed(list(bin(int(stdin, 2))[2:])))[::-1]))))",
        "test": "assert solution(\"01111010100000000000000000000011\") == \"964176192\"",
        "num_ids": 2213,
        "indeed": false
    },
    {
        "number": 4659,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    r = 0\n    res = []\n    while r <= len(stdin):\n        res.append([1,1])\n        res.append([1,2])\n        for i in range(r):\n            res[i].append(res[i][0]+res[i][1])\n        r = r+1\n    return res[0]",
        "test": "assert solution(5) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]",
        "num_ids": 2390,
        "indeed": false
    },
    {
        "number": 4660,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return list(filter(lambda x: x.startswith('@') and len(x.split('.')) == 3 and '.'.join(x.split('.')[-2:]) == 'com', stdin))\n",
        "test": "assert solution(\"6 4 @\") == []",
        "num_ids": 2757,
        "indeed": false
    },
    {
        "number": 4661,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    \n    cubes = [1, 1]\n    for i in range(int(stdin)):\n        cubes.append(cubes[-1] * cubes[-2])\n    return cubes[-1]",
        "test": "assert solution(1) == 1",
        "num_ids": 4167,
        "indeed": false
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    def countNesting(root):\n        if root == '{':\n            return 1\n        if root == '}':\n            return 0\n        l = countNesting(root[1])\n        r = countNesting(root[3])\n        if l == 1 and r == 0:\n            return 1\n        elif l == 1 and r!= 0:\n            return l+r+1\n        else:\n            return max(l,r)\n    for i in range(N):\n        root = stdin.strip().split()\n        print(countNesting(root))\n\n=====Approach 1=====\n",
        "test": "assert solution(4, 1) == 3",
        "num_ids": 2885,
        "indeed": false
    },
    {
        "number": 4663,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        a=stdin.split()\n        if (len(a[0])==10 or len(a[0])==9) and a[1].isdigit() and int(a[1])>=0 and int(a[1])<=999999999999999999999999999999999:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "test": "assert solution(3) == \"YES\"",
        "num_ids": 1213,
        "indeed": false
    },
    {
        "number": 4664,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.strip().split()[0])\n    n = int(stdin.strip().split()[1])\n    mSet = set(map(int, stdin.strip().split()[2:]))\n    nSet = set(map(int, stdin.strip().split()[3:]))\n    mSet = list(mSet)\n    nSet = list(nSet)\n    for i in range(m):\n        mSet.remove(mSet[i])\n    for i in range(n):\n        nSet.remove(nSet[i])\n    for i in range(m+n):\n        nSet.append(mSet[i])\n    for i in range(m):\n        mSet.append(mSet[i])\n    for i in range(n):\n        nSet.append(nSet[i])\n    return''.join(map(str,sorted(mSet+nSet)))",
        "test": "assert solution(stdin) == '23 14'",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 4665,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    student_marks = []\n    #student_marks = list(map(int,input().split()))\n    student_marks = [int(i) for i in input().split()]\n    student_marks.sort()\n    for i in range(n):\n        stdin_row = [int(j) for j in input().split()]\n        student_marks.sort()\n        avg_student_marks = sum(student_marks) / n\n        stdin_row.append(avg_student_marks)\n        student_marks.append(stdin_row)\n    final_student_marks = [item for sublist in student_marks for item in sublist]\n    return \",\".join(str(i) for i in final_student_marks)\n\n=====Input Format=====\nThe first line contains an integer N, the total number of students.\nThe second line contains the names of the columns in any order.\nThe next N lines contains the marks, IDs, name and class, under their respective column names.\n\n=====Constraints=====\n0<N\u2264100\n\n=====Output Format=====\nPrint the average marks of the list corrected to 2 decimal places.\ndef",
        "test": "assert solution(stdin), 'Provide a valid solution'",
        "num_ids": 3870,
        "indeed": false
    },
    {
        "number": 4666,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    i=0\n    while i<len(stdin):\n        if int(stdin[i:i+5])>20:\n            return 'Not Weird'\n        elif int(stdin[i:i+6])>=2 and int(stdin[i:i+6])<=5:\n            return 'Weird'\n        else:\n            return 'Not Weird'\n        i+=1\n",
        "test": "assert solution(6) == 'Not Weird'",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 4667,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    # loop\n    # convert each line to a list of lists\n    # calculate the sum of each element\n    # return the sum\n    score = 0\n    for _ in range(n):\n        score += sum([int(i) for i in stdin.split()])\n    return score\n\n=====IMPORTANT NOTE=====\nThis problem requires a lot of time on my computer.\n\n=====Example 1=====\nInput:\n7\n<root>\n<data>\n    <attr a=\"1\">\n        <data>\n            <node>1</node>\n        </data>\n    </attr>\n    <attr b=\"2\">\n        <data>\n            <node>2</node>\n        </data>\n    </attr>\n    <attr c=\"3\">\n        <data>\n            <node>3</node>\n        </data>\n    </attr>\n    <attr d=\"4\">\n        <data>\n            <node>4</node>\n        </data>\n    </attr>\n    <attr e=\"5\">\n        <data>\n            <node>5</node>\n        </data>\n    </attr>\n    <attr f=\"6\">\n        <data>\n            <node>6</node>\n        </data>\n    </attr>\n    <attr g=\"7\">\n        <data>\n            <node>7</node>\n        </data>\n    </attr>\n    <attr h=\"8\">\n        <data>\n            <node>8</node>\n        </data>\n    </attr>\n    <attr i=\"9\">\n        <data>\n            <node>9</node>\n        </data>\n    </attr>\n    <attr j=\"10\">\n        <data>\n            <node>10</node>\n        </data>\n    </attr>\n    <attr k=\"11\">\n        <data>\n            <node>11</node>\n        </data>\n    </attr>\n    <attr l=\"12\">\n        <data>\n            <node>12</node>\n        </data>\n    </attr>\n    <attr m=\"13\">\n        <data>\n            <node>13</node>\n        </data>\n    </attr>\n    <attr n=\"14\">\n        <data>\n            <node>14</node>\n        </data>\n    </attr>\n    <attr o=\"15\">\n        <data>\n            <node>15</node>\n        </data>\n    </attr>\n    <attr p=\"16\">\n        <data>\n            <node>16</node>\n        </data>\n    </attr>\n    <attr q=\"17\">\n        <data>\n            <node>17</node>\n        </data>\n    </attr>\n    <attr r=\"18\">\n        <data>\n            <node>18</node>\n        </data>\n    </attr>\n    <attr s=\"19\">\n        <data>\n            <node>19</node>\n        </data>\n    </attr>\n    <attr t=\"20\">\n        <data>\n            <node>20</node>\n        </data>\n    </attr>\n    <attr u=\"21\">\n        <data>\n            <node>21</node>\n        </data>\n    </attr>\n    <attr v=\"22\">\n        <data>\n            <node>22</node>\n        </data>\n    </attr>\n    <attr w=\"23\">\n        <data>\n            <node>23</node>\n        </data>\n    </attr>\n    <attr x=\"24\">\n        <data>\n            <node>24</node>\n        </data>\n    </attr>\n    <attr y=\"25\">\n        <data>\n            <node>25</node>\n        </data>\n    </attr>\n    <attr z=\"26\">\n        <data>\n            <node>26</node>\n        </data>\n    </attr>\n    <attr z=\"27\">\n        <data>\n            <node>27</node>\n        </data>\n    </attr>\n    <attr z=\"28\">\n        <data>\n            <node>28</node>\n        </data>\n    </attr>\n    <attr z=\"29\">\n        <data>\n            <node>29</node>\n        </data>\n    </attr>\n    <attr z=\"30\">\n        <data>\n            <node>30</node>\n        </data>\n    </attr>\n    <attr z=\"31\">\n        <data>\n            <node>31</node>\n        </data>\n    </attr>\n    <attr z=\"32\">\n        <data>\n            <node>32</node>\n        </data>\n    </attr>\n    <attr z=\"33\">\n        <data>\n            <node>33</node>\n        </data>\n    </attr>\n    <attr z=\"34\">\n        <data>\n            <node>34</node>\n        </data>\n    </attr>\n    <attr z=\"35\">\n        <data>\n            <node>35</node>\n        </data>\n    </attr>\n    <attr z=\"36\">\n        <data>\n            <node>36</node>\n        </data>\n    </attr>\n    <attr z=\"37\">\n        <data>\n            <node>37</node>\n        </data>\n    </attr>\n    <attr z=\"38\">\n        <data>\n            <node>38</node>\n        </data>\n    </attr>\n    <attr z=\"39\">\n        <data>\n            <node>39</node>\n        </data>\n    </attr>\n    <attr z=\"40\">\n        <data>\n            <node>40</node>\n        </data>\n    </attr>\n    <attr z=\"41\">\n        <data>\n            <node>41</node>\n        </data>\n    </attr>\n    <attr z=\"42\">\n        <data>\n            <node>42</node>\n        </data>\n    </attr>\n    <attr z=\"43\">\n        <data>\n            <node>43</node>\n        </data>\n    </attr>\n    <attr z=\"44\">\n        <data>\n            <node>44</node>\n        </data>\n    </attr>\n    <attr z=\"45\">\n        <data>\n            <node>45</node>\n        </data>\n    </attr>\n    <attr z=\"46\">\n        <data>\n            <node>46</node>\n        </data>\n    </attr>\n    <attr z=\"47\">\n        <data>\n            <node>47</node>\n        </data>\n    </attr>\n    <attr z=\"48\">\n        <data>\n            <node>48</node>\n        </data>\n    </attr>\n    <attr z=\"49\">\n        <data>\n            <node>49</node>\n        </data>\n    </attr>\n    <attr z=\"50\">\n        <data>\n            <node>50</node>\n        </data>\n    </attr>\n    <attr z=\"51\">\n        <data>\n            <node>51</node>\n        </data>\n    </attr>\n    <attr z=\"52\">\n        <data>\n            <node>52</node>\n        </data>\n    </attr>\n    <attr z=\"53\">\n        <data>\n            <node>53</node>\n        </data>\n    </attr>\n    <attr z=\"54\">\n        <data>\n            <node>54</node>\n        </data>\n    </attr>\n    <attr z=\"55\">\n        <data>\n            <node>55</node>\n        </data>\n    </attr>\n    <attr z=\"56\">\n        <data>\n            <node>56</node>\n        </data>\n    </attr>\n    <attr z=\"57\">\n        <data",
        "test": "assert solution(\"<a></a> <b></b><a></a>\") == \"1\", \"Invalid XML\"",
        "num_ids": 10368,
        "indeed": false
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    x1,y1,x2,y2 = [float(i) for i in stdin.split()]\n    ang1 = acos(y1/x1)\n    ang2 = acos(y2/x2)\n    return str(round(ang1-ang2, 2))\n    \n    # time complexity: O(n^2)\n    # space complexity: O(1)\n",
        "test": "assert solution('2.1') == '1.2'",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 4669,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n=int(stdin[0])\n    word=stdin[1:]\n    return score_words(n,word)\n\n=====Implementation=====\nThe existing code in this challenge can be found in the file \"problem.py\".\nThe solution is the following code.\nimport itertools\n\ndef",
        "test": "assert solution(stdin) == '7'",
        "num_ids": 2406,
        "indeed": false
    },
    {
        "number": 4670,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    \n    # ===Modify codes below=============\n    # \uc870\uac74\uc5d0 \ub530\ub77c \ubcc0\ud658\ub418\uc5b4\uc57c \ud560 \uacb0\uacfc\ub97c returned\n    result = True\n    \n    # ===Modify codes beyond this point========\n    return result\n    \n    pass\n    # ==================================\n",
        "test": "assert solution(['M', 'MM', 'MD', 'MMM', 'MMM']), 'true'",
        "num_ids": 4518,
        "indeed": false
    },
    {
        "number": 4671,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    #removed duplicate numbers and keep only 10 digits\n\n    \n    #convert string to list\n    stdin = stdin.split(' ')\n    #remove numbers\n    stdin = list(map(int, stdin))\n    #sort\n    stdin.sort()\n    #print\n    return''.join(str(i) for i in stdin)",
        "test": "assert solution(\"0\") == \"0\"",
        "num_ids": 2588,
        "indeed": false
    },
    {
        "number": 4672,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    arr = []\n    for i in stdin:\n        arr.append(i.split())\n    arr = arr[1:]\n    sum = 0\n    for j in arr:\n        sum+=int(j[0])\n    sum/=len(arr)\n    return \"{:.2f}\".format(sum)\n\n=====Python Code=====\ndef",
        "test": "assert solution(input) == \"50.0\"",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 4673,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    people = sorted(list(map(str.split, open('names.txt'))))\n    people = [p[0] +'' + p[1] for p in people]\n    people = sorted(people)\n    return '\\n'.join(people)\n\n=====Driver Code=====\nimport sys\n\ndef",
        "test": "assert solution(stdin) == 'Mr. Henry Davids\\nMs. Mary George'",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 4674,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    n = int(stdin[0])\n    x = int(stdin[1])\n    y = int(stdin[2])\n    z = int(stdin[3])\n    for i in range(1, n + 1):\n        result.append([x + i, y + i, z + i])\n    return '\\n'.join(str(e) for e in sorted(result, reverse=True))\n\n=====Output=====\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\n\n[0,0,0,2,1,1,2,2,2,2,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1]\n\n[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n\n[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n\n=====Time complexity=====\nTime complexity of the solution is O(n*x*y*z) with n = n + 1\n\n=====Space complexity=====\nSpace complexity of the result is O(1)\n'''\n\ndef",
        "test": "assert solution(x,y,z,n) == [0,0,0], 'incorrect solution'",
        "num_ids": 3981,
        "indeed": false
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = 0\n    B = 0\n    if(n >= 0):\n        A = float(n)\n    else:\n        B = float(n)\n    if(n > 0):\n        B = -1 * B\n    result = str(A + B)\n    return result\n\n=====Sample Output=====\nsample input 1:\n1\n4\n3\n\nsample input 2:\n1\n3\n-2\n2\n\n====Sample Output=====\nSample output 1:\n1.00+2.00i\nSample output 2:\n0.00+0.00i\nSample output 3:\n0.00+0.00i\nSample output 4:\n0.00+0.00i\nSample output 5:\n0.00+0.00i\nSample output 6:\n0.00+0.00i\nSample output 7:\n0.00+0.00i\n\nsample input 2:\n1\n0\n-3\n\nsample input 3:\n1\n0\n1.5\n-2\n\nsample input 4:\n2\n-3\n0\n\nsample input 5:\n1\n-1\n2\n-2\n\n====Sample Output=====\nSample output 1:\n-3.00+3.00i\nSample output 2:\n-3.00+3.00i\nSample output 3:\n-3.00+3.00i\nSample output 4:\n-3.00+3.00i\nSample output 5:\n-3.00+3.00i\nSample output 6:\n-3.00+3.00i\n\nSample output 7:\n-3.00+3.00i\nSample output 8:\n-3.00+3.00i\nSample output 9:\n-3.00+3.00i\nSample output 10:\n-3.00+3.00i\nSample output 11:\n-3.00+3.00i\n\n====Sample Output=====\nSample output 1:\n-3.00+3.00i\nSample output 2:\n-3.00+3.00i\nSample output 3:\n-3.00+3.00i\nSample output 4:\n-3.00+3.00i\nSample output 5:\n-3.00+3.00i\nSample output 6:\n-3.00+3.00i\nSample output 7:\n-3.00+3.00i\nSample output 8:\n-3.00+3.00i\nSample output 9:\n-3.00+3.00i\nSample output 10:\n-3.00+3.00i\nSample output 11:\n-3.00+3.00i\n\n>>>>Sample Output\n>>>>Sample Output\n",
        "test": "assert solution(stdin) == \"C/D\"",
        "num_ids": 3966,
        "indeed": false
    },
    {
        "number": 4676,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    password = list(stdin)\n    for i in range(len(password)):\n        if password[i] in \"abc\":\n            password[i] = password[i][::-1]\n    return ''.join(password)\n",
        "test": "assert solution(\"xyzabcd\") == \"xyzabcd\"",
        "num_ids": 1226,
        "indeed": false
    },
    {
        "number": 4677,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    def get_s(s: str) -> str:\n        stack = []\n        for c in s:\n            if c in '1234567890' or c == 'B' or c == '1':\n                stack.append(c)\n            else:\n                if len(stack) == 0:\n                    return '0'\n                elif stack[-1] == 'B':\n                    stack.pop()\n                    stack.pop()\n                elif c in '01':\n                    stack.pop()\n                else:\n                    stack.append(c)\n        return ''.join(stack)\n\n    return get_s(stdin)",
        "test": "assert solution('0') == '0'",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 4678,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    N, A = int(data[0]), list(map(int, data[1:]))\n    A = [0] + A + [0]\n    answer = 0\n    for i in range(N):\n        total = sum(A[i + 1:])\n        if total < answer:\n            answer = total\n        for j in range(N - i):\n            A[i + j] -= 1\n    return str(answer)",
        "test": "assert solution(\"8\") == \"3\"",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 4679,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, *deck = list(map(str, stdin))\n    if n.count('a')!= 1:\n        print(\"Error\")\n    elif n.count('b')!= 1:\n        print(\"Error\")\n    elif n.count('c')!= 1:\n        print(\"Error\")\n    else:\n        print(\"A\")\n        for i in range(1,len(deck)):\n            if deck[i].count('a')!= 1:\n                print(\"Error\")\n                break\n            elif deck[i].count('b')!= 1:\n                print(\"Error\")\n                break\n            elif deck[i].count('c')!= 1:\n                print(\"Error\")\n                break\n        else:\n            print(\"B\")\n    ",
        "test": "assert solution(\"ca\") == \"C\"",
        "num_ids": 1102,
        "indeed": false
    },
    {
        "number": 4680,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(i) for i in stdin.split()]\n    if A + B + C > 10:\n        return 'NO'\n    elif A + B + C == 10:\n        return 'YES'\n    else:\n        return 'NO'\n\n    \"\"\"\n    # Python Code Template\n    # print(stdin)\n    # print(type(stdin))\n    # print(A)\n    # print(B)\n    # print(C)\n    # A = int(A)\n    # B = int(B)\n    # C = int(C)\n    # if A + B + C > 10:\n    #     return 'NO'\n    # elif A + B + C == 10:\n    #     return 'YES'\n    # else:\n    #     return 'NO'\n    \"\"\"\n\"\"\"\n",
        "test": "assert solution(\"A B C 8\") == \"NO\"",
        "num_ids": 2557,
        "indeed": false
    },
    {
        "number": 4681,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    def getSum(n, d):\n        res = 2*n\n        if n == 1:\n            return d\n        else:\n            return getSum(n-1, d+d//2)\n\n    N = int(stdin)\n    return str(getSum(N, 1))",
        "test": "assert solution(1) == '1'",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 4682,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return ''\n    return''.join(map(str, map(int, stdin.split())))",
        "test": "assert solution(input()) == '7'",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 4683,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  A = [0 for _ in range(n)]\n  for i in range(n):\n    A[i] = int(stdin[i])\n  sum_A = 0\n  for i in range(n-1):\n    for j in range(i+1, n):\n      sum_A += A[j] * A[i]\n  return str(sum_A % (10**9+7))\n\ndef",
        "test": "assert solution('1 0 1'), 1",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 4684,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(9):\n        if(int(stdin[i])%4==0):\n            print(1)\n            break\n    else:\n        print(0)\nsolution(\"4 3 2\")\n",
        "test": "assert solution(solution(\"2\")) == \"NO\"",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 4685,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Sum from position i to posi-1: the integers from position i to posi\n    '''\n    def process(lst, idx, res):\n        if idx == len(lst):\n            res.append(sum(lst[idx:]))\n            return\n\n        process(lst, idx + 1, res)\n        if lst[idx]!= lst[idx + 1]:\n            res.append(lst[idx] + lst[idx + 1])\n        process(lst, idx + 1, res)\n\n    answer = 0\n    n = len(str(stdin))\n    lst = list(str(stdin))\n    res = []\n    process(lst, 0, res)\n    answer = max(res)\n    return answer\n    \n'''\nSample Input\n2\n2\n1\n\nSample Output\n2\n\nExplanation\nThe maximum sum of the integers is 2 = 1 + 1 = 2.\n'''",
        "test": "assert solution([\"1\", \"2\", \"3\", \"5\", \"6\", \"11\", \"12\", \"13\", \"15\", \"16\", \"17\", \"18\", \"19\", \"21\"]) == \"30\"",
        "num_ids": 828,
        "indeed": false
    },
    {
        "number": 4686,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n  alphabet = list(map(str, stdin))\n  ans = True\n  \n  for i in range(len(alphabet)):\n    count = 0\n    for j in range(len(alphabet)):\n      if alphabet[j] == alphabet[i]:\n        count += 1\n    if count % 2 == 0:\n      ans = False\n  return ans\n\n'''",
        "test": "assert solution(",
        "num_ids": 2880,
        "indeed": false
    },
    {
        "number": 4687,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    b, a = map(int, stdin.split())\n    arr = [[-1]*b for i in range(n)]\n    ans = []\n    for _ in range(k):\n        x, y = map(int, stdin.split())\n        arr[x][y] = y\n    for i in range(n):\n        ans.append(max(b-arr[i][j] for j in range(b)))\n    return '\\n'.join(str(i) for i in ans)",
        "test": "assert solution(inp) == \"3\"",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 4688,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    balls = [list(map(int, stdin.split())) for _ in range(N)]\n    all_colors = range(1, K+1)\n    count = 0\n    for color in all_colors:\n        for i in range(N):\n            for j in range(N):\n                if balls[i][j] == color:\n                    count += 1\n        if count == K:\n            break\n    print(count)\n\n-----Sample Output-----\n2\n\nExplanation\nThere are N balls and K = 2, there are 3 ways to paint the balls.\n\nExplanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation Explanation",
        "test": "assert solution(inp) == '2'",
        "num_ids": 3097,
        "indeed": false
    },
    {
        "number": 4689,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    array = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        array.append((a, b))\n    array.sort(key=lambda x: x[0] + x[1])\n    array = [i[1] - i[0] for i in array]\n    minimum = 100_000_000_000_000\n    for i in array:\n        minimum = min(minimum, i)\n    return str(minimum)\n",
        "test": "assert solution(inp) == 10",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 4690,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A<B<C<D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        print(A*B*C*D)\n        return\n    if A>B>C>D:\n        ",
        "test": "assert solution('4 5 2') == '9'",
        "num_ids": 2783,
        "indeed": false
    },
    {
        "number": 4691,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef",
        "test": "assert solution(0) == \"RE x 0\"",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    x, m = map(int, stdin.split())\n    if (m*x < 24):\n        return str(x*24+m-1)\n    else:\n        return str(m*x-24)",
        "test": "assert solution(21) == 27",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 4693,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    return \"10\" if int(stdin.replace(' ', '')) + int(stdin.replace(' ', '')) >= 10 else \"error\"",
        "test": "assert solution('10') == '10'",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 4694,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, a = map(int, stdin.split())\n    houses = [int(x) for x in stdin.split() if x!= \"\"]\n    counts = list(set(map(str, range(1, N))))\n    counts.sort()\n    print(counts)\n    for count in counts:\n        if counts.index(count) == 0:\n            continue\n        if counts.index(count) == N-1:\n            return count\n        if a < houses[counts.index(count)]:\n            continue\n        if houses[counts.index(count)] < a:\n            continue\n        houses[counts.index(count)] = a\n    return min(houses) + max(houses)\n",
        "test": "assert solution(",
        "num_ids": 2551,
        "indeed": false
    },
    {
        "number": 4695,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if a % b == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('12 6') == 'Yes'",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 4696,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    product = a * b\n    if product % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n",
        "test": "assert solution('3 4') == 'Even'",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 4697,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n  N, M = [int(i) for i in stdin.split()]\n  group_count = 0\n  group_count += int((M**2 + 1) / 2)\n  if M >= 1:\n    for _ in range(M):\n      group_count += M\n      group_count -= 1\n      group_count += int(math.ceil(M/2))\n      group_count += int(M/2)\n    group_count += 1\n  print(group_count)\n  return '2'\n\n'''\n\n'''\n",
        "test": "assert solution('1 3') == '2'",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N, T_i, M, P_i, P_m, P_m_2, X_i = map(int, stdin.split())\n    solution = \"\"\n    for _ in range(N):\n        solution += str(int(input())) + \" \"\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"3 \", \"\")\n    solution = solution.replace(\"4 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"4 \", \"\")\n    solution = solution.replace(\"3 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"3 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"4 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"4 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"3 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"4 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"3 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"4 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"3 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"3 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"3 \", \"\")\n    solution = solution.replace(\"3 \", \"\")\n    solution = solution.replace(\"3 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"3 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"3 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"2 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"\")\n    solution = solution.replace(\"1 \", \"",
        "test": "assert solution(\\\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 190 191 190 191 191 191 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189",
        "num_ids": 5750,
        "indeed": false
    },
    {
        "number": 4699,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    d = [list(map(int, input().split())) for _ in range(k)]\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    \n    res = []\n    for num in range(k):\n        tmp = []\n        for i in range(k):\n            if d[i][0] < d[i][1]:\n                tmp.append(d[i][0])\n                d[i][0] = d[i][1]\n                d[i][1] = d[i][2]\n                d[i][2] = d[i][3]\n                d[i][3] = d[i][4]\n                d[i][4] = d[i][5]\n                d[i][5] = d[i][6]\n                d[i][6] = d[i][7]\n                d[i][7] = d[i][8]\n                d[i][8] = d[i][9]\n                d[i][9] = d[i][10]\n        res.append(sum(tmp))\n    return \" \".join(map(str, res))\n\"\"\"\n\ndef",
        "test": "assert solution(input()) == 2000",
        "num_ids": 2381,
        "indeed": false
    },
    {
        "number": 4700,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    obs = [list(map(int, input().split())) for _ in range(N)]\n    roads = [[0 for _ in range(M)] for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            roads[i][j] = obs[i][j]\n    objs = [list(map(int, input().split())) for _ in range(M)]\n    visited = [[0 for _ in range(M)] for _ in range(N)]\n    Q = [0]\n    visited[0][0] = 1\n    while Q:\n        v = Q.pop()\n        for j in range(M):\n            if obs[v][j] == 0:\n                continue\n            if visited[v][j] == 1:\n                continue\n            if roads[v][j]!= obs[v][j] and roads[v][j] == obs[v][j] and visited[v][j] == 0:\n                visited[v][j] = visited[v][j] + 1\n                Q.append(j)\n    print(visited[N - 1][M - 1])\n\n-----Sample Output-----\nSample Input:\n4 3\n1 2 3 4\n1 3\n2 3\n2 4\n\n-----Sample Output:\n2\n\nSample Input:\n4 5\n1 2 4\n1 3\n1 4\n2 3\n3 4\n\nSample Output:\n4\n\nExplanation:\nObs. i is considered good when it's higher than those of all the observed observatories.\nObs. i is not good.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by road with two observations and then it's higher than all observations.\nObs. i is connected by road with one observation and then it's higher than all observations.\nObs. i is connected by",
        "test": "assert solution(input()) == \"2\"",
        "num_ids": 5493,
        "indeed": false
    },
    {
        "number": 4701,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split()\n    N = [int(x) for x in N]\n    K = int(N[0])\n    for i in range(1, len(N)):\n        if N[i] < N[i-1]:\n            K -= 1\n        else:\n            break\n    N[0] = K\n    for i in range(1, len(N)):\n        if N[i] > N[i-1]:\n            N[i] = N[i] * 2\n    return str(sum(N))\n\nprint(solution(\"4 3\"))",
        "test": "assert solution(",
        "num_ids": 945,
        "indeed": false
    },
    {
        "number": 4702,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    \n    if n == 1:\n        return \"1\"\n    \n    if n == 2:\n        return \"1\"\n    \n    if n == 3:\n        return \"1\"\n    \n    if n == 4:\n        return \"0\"\n    \n    if n == 5:\n        return \"0\"\n    \n    if n == 6:\n        return \"1\"\n    \n    if n == 7:\n        return \"1\"\n    \n    if n == 8:\n        return \"1\"\n    \n    if n == 9:\n        return \"0\"\n    \n    if n == 10:\n        return \"0\"\n    \n    if n == 11:\n        return \"1\"\n",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 4703,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n  \n  \"\"\"\n  \n  def solution(stdin: str) -> str:\n    \n    \n    def eval(s: str) -> int:\n      \n      if len(s) < 3:\n        return 0\n      \n      # Step1: test whether s contains '+' or '-'\n      if s[0]!= '-':\n        return eval(s[0] + s[1:])\n      \n      # Step2: check whether the number of digits after each letter is even\n      digits = 0\n      for c in s[2:]:\n        if c.isdigit():\n          digits += int(c)\n        else:\n          break\n      # Step2: Test whether the number of digits after each letter is even\n      if digits % 2!= 0:\n        return 0\n      \n      # Step3: if the number of digits is even, the original formula will be evaluated\n      if digits % 2 == 0:\n        return eval(s[2:]) + eval(s[2:])\n      \n      # Step4: if the number of digits is odd, the original formula will be evaluated,\n      # and if it is also odd, it will be evaluated with only the extra digits\n      return eval(s[2:]) + eval(s[:2]) + eval(s[2:])\n    \n    # Step1: if len(s) is odd, try to evaluate all digits\n    if len(s) % 2 == 1:\n      return eval(s)\n    \n    # Step2: try to evaluate all digits, only if the number of digits is even\n    return eval(s)\n    \"\"\"\n    \n    def test(s: str) -> str:\n      \n      temp = [s[0]]\n      \n      for i in range(1, len(s)):\n        if s[i] == '+':\n          temp.append(s[i])\n        else:\n          temp.append(s[i])\n          \n      return ''.join(temp)\n      \n    def eval(s: str) -> int:\n      \n      if len(s) < 3:\n        return 0\n      \n      # Step1: test whether s contains '+' or '-'\n      if s[0]!= '-':\n        return eval(s[0] + s[1:])\n      \n      # Step2: test whether the number of digits after each letter is even\n      if len(s) % 2 == 1:\n        return eval(s[1:])\n      \n      # Step3: if the number of digits is even, the original formula will be evaluated\n      if len(s) % 2 == 0:\n        return eval(s[1:]) + eval(s[1:])\n      \n      # Step4: if the number of digits is odd, the original formula will be evaluated,\n      # and if it is also odd, it will be evaluated with only the extra digits\n      return eval(s[1:]) + eval(s[:1]) + eval(s[1:])\n      \n    # Step1: if len(s) is odd, try to evaluate all digits\n    if len(s) % 2 == 1:\n      return eval(s)\n    \n    # Step2: try to evaluate all digits, only if the number of digits is even\n    return eval(s)\n      \n  \n  \n  # Time complexity: O(n)\n  # Space Complexity: O(1)\n  \n  s = input()\n  return str(solution(s))\n",
        "test": "assert solution('1-7-1-7') == 1 - 7 + 1 - 7 = 8",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 4704,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  a_1, a_2, a_3, a_4 = map(int, input().split())\n  x, y = abs(a_1 - a_2), abs(a_3 - a_4)\n  if x >= y:\n    return str(x - y)\n  return str(y - x)\n'''\n\ndef",
        "test": "assert solution(\"1 1 1 1 1\") == \"1\"",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 4705,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  pre = [int(x) for x in stdin.split()]\n  answer = pre[0]\n  for i in range(1, N):\n    answer += pre[i] * (pre[i-1] - pre[i-2] - pre[i-3])\n  return str(answer)\n",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 4706,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    c = []\n    for _ in range(3):\n        tmp = []\n        tmp.append(input())\n        tmp.append(input())\n        c.append(tmp)\n    \n    temp = []\n    for row in range(3):\n        temp.append(c[row][row])\n    \n    answer = \"\".join(temp)\n    return answer\n",
        "test": "assert solution(inp) == \"abc\"",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 4707,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sq = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        sq[i][i] = 1\n    for i in range(1, n):\n        for j in range(n):\n            sq[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if sq[j][i] == 0:\n                sq[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if sq[j][i] == 1:\n                print(i, j)\n    return str(i)\n",
        "test": "assert solution('101'), '0'",
        "num_ids": 1616,
        "indeed": false
    },
    {
        "number": 4708,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X, Y = list(map(int, stdin.split()))\n    print(solution([N, K, X, Y]))\n\"\"\"\n\nclass Solution:\n    def getAccommodationFee(self, N: int, K: int, X: int, Y: int) -> str:\n        # Write your code here\n        def solution(n, k, x, y):\n            return f\"{n} {k} {x} {y}\"\n\n        return solution(N, K, X, Y)\n",
        "test": "assert solution(\"3 3\") == 0",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 4709,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    def eval(a, b):\n        if b == '+':\n            return a + b\n        if b == '-':\n            return a - b\n        return a * b\n\n    A, B = map(int, stdin.split())\n    while B!= 0:\n        A, B = eval(A, B), eval(B, A)\n    print(A)\n",
        "test": "assert solution(\"1+\") == \"3\"",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 4710,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    if x <= 1200:\n        return \"ABC\"\n    return \"ARC\"\n",
        "test": "assert solution('1') == 'ABC'",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 4711,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n  n = len(stdin)\n  for i in range(2):\n    t = tuple(map(int, input().split()))\n    sum = 0\n    for j in range(3):\n      sum += t[j] * pow(10, i)\n    print(sum)",
        "test": "assert solution(stdin) == \"1300\"",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 4712,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    h, w, ans = map(int, stdin.split())\n    img = [list(stdin.split()) for _ in range(h)]\n    for h in range(h):\n        for w in range(w):\n            p = img[h][w]\n            for i in range(1, len(p)):\n                if p[i-1]!= p[i]:\n                    ans += 1\n    return ans",
        "test": "assert solution(stdin), \"incorrect input\"",
        "num_ids": 1226,
        "indeed": false
    },
    {
        "number": 4713,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    x, N = map(int, stdin.split())\n    if N == 0:\n        return 0\n    if x == 0:\n        return 0\n    s = str(x)\n    return max(s[i] + solution(s[:i] + \"I\" + s[i + 1:]) for i in range(N - 1))\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n\n\ndef",
        "test": "assert solution( \"31234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345",
        "num_ids": 2368,
        "indeed": false
    },
    {
        "number": 4714,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    palindromes = []\n    for i in range(a, b+1):\n        palindromes.append(str(bin(i).replace(\"0b\", \"\")))\n    return ''.join(palindromes)\n",
        "test": "assert solution(input()) == '4'",
        "num_ids": 674,
        "indeed": false
    },
    {
        "number": 4715,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    dic = {}\n    for i in range(1, N + 1):\n        a, b, c = map(int, stdin.split())\n        dic[i] = [a, b, c]\n    dic.pop(0)\n    print(len(list(dic.keys())[0]))\n    return\n\nprint(solution(\"3 1 4\"))\nprint(solution(\"3 2 5\"))",
        "test": "assert solution(input) == \"3\"",
        "num_ids": 2293,
        "indeed": false
    },
    {
        "number": 4716,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    l = list(map(int, stdin.split()))\n    l.sort()\n    length = sum(l)\n\n    def make_snake(i: int, length: int) -> str:\n        if length % 2:\n            return f'{length}/2'\n        else:\n            return f'{int(length / 2)}'\n\n    def remove_snake(length: int) -> int:\n        if length == 0:\n            return 0\n        else:\n            return length - 1\n\n    return str(sum(map(remove_snake, range(N))))\n\n------------------------------\nDifficulty : Medium\nTitle: Valid Sudoku\nURL: https://www.codewars.com/kata/59eb4c4d68bdeb81ec000088/train/python\nLanguage: Python\n\nApproach:\nUsing the brute force approach, we can use the memoization to speed up the process.\nTime complexity : O(N^2)\nSpace complexity: O(N)\n\nProblems:\nThis problem has no hardcoded input and is solved by the memoization approach.\n\"\"\"",
        "test": "assert solution(stdin) == 12",
        "num_ids": 2788,
        "indeed": false
    },
    {
        "number": 4717,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    distance = (x - a) ** 2 + (b - x) ** 2\n    if distance < 2:\n        return \"A\"\n    elif distance < 3:\n        return \"B\"\n    else:\n        return \"C\"\n\n-----Time complexity-----\nO(m) where m is the number of stores.\nO(n) where n is the number of different positions.\nO(m) where m is the number of stores.\nO(1) where m is the number of stores.\nO(m) where m is the number of stores.\nO(1) where m is the number of stores.\nO(1) where m is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(m) where m is the number of stores.\nO(1) where m is the number of stores.\nO(1) where m is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(1) where m is the number of stores.\nO(1) where m is the number of stores.\nO(m) where m is the number of stores.\nO(1) where m is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(1) where m is the number of stores.\nO(1) where m is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(m) where m is the number of stores.\nO(1) where m is the number of stores.\nO(m) where m is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(1) where m is the number of stores.\nO(1) where m is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(1) where m is the number of stores.\nO(1) where m is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(1) where m is the number of stores.\nO(1) where m is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(1) where m is the number of stores.\nO(1) where m is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(1) where m is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(1) where m is the number of stores.\nO(1) where m is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores.\nO(n) where n is the number of stores",
        "test": "assert solution(stdin) == \"A\"",
        "num_ids": 5690,
        "indeed": false
    },
    {
        "number": 4718,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin.replace('2017/01/07', '2018/01/07'))\n",
        "test": "assert solution(\"2017/01/07\") == \"2018/01/07\", \"The string that Takaki wrote in the date column is incorrect\"",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 4719,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    l = len(S)\n    L = set(list(S))\n    for i in range(l-2):\n        if S[i] + S[i + 1] + S[i + 2] in L:\n            L.remove(S[i])\n            L.remove(S[i] + S[i + 1])\n            L.remove(S[i] + S[i + 2])\n    print(L.pop())\n\n-----Sample Output-----\ncbaa\ndaacc\nacacac\n\n-----Sample Input-----\n3\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmn",
        "test": "assert solution('acacac') == 'caa', 'incorrect'",
        "num_ids": 2620,
        "indeed": false
    },
    {
        "number": 4720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n  no_of_seats = [0] * 100000\n  for line in stdin:\n    tmp = list(map(int, line.split(':')))\n    no_of_seats[tmp[0]] += 1\n  for index in range(1, 100000):\n    if no_of_seats[index] > 0:\n      no_of_seats[index] -= 1\n  return str(sum(no_of_seats))\n",
        "test": "assert solution(inp) == 7",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 4721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    street = [[0] * m for _ in range(n)]\n\n    x = 0\n    y = 0\n    for i in range(n):\n        for j in range(m):\n            if i % 2 == 1 and j % 2 == 1:\n                if x % 2 == 0:\n                    street[y][j] = 1\n                else:\n                    street[y][j] = -1\n            elif i % 2 == 0 and j % 2 == 0:\n                if x % 2 == 0:\n                    street[y][j] = 1\n                else:\n                    street[y][j] = -1\n            elif i % 2 == 1 and j % 2 == 0:\n                if x % 2 == 1:\n                    street[y][j] = 1\n                else:\n                    street[y][j] = -1\n            else:\n                if x % 2 == 0:\n                    street[y][j] = 1\n                else:\n                    street[y][j] = -1\n            x += 1\n        y += 1\n\n    print(len(street))\n    return ''.join(str(el) for el in street)\n\"\"\"\ndef",
        "test": "assert solution(\"3 3\") == \"3\"",
        "num_ids": 1553,
        "indeed": false
    },
    {
        "number": 4722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    # TODO\n    # find first non-a number and b number that are a+b\n    # check if it is possible to add only B cookies to the list of cookies\n    # find the third number in the list\n    # return the result\n    pass\n    #raise NotImplementedError\n\"\"\"\n\nclass Solution:\n    def checkCookie(self, a, b):\n        if a > b:\n            return a > b\n        return a < b\n    \n    def solution(self, A, B):\n        if A == 1 or B == 1:\n            return True\n        \n        for i in range(2, max(A,B)+1):\n            if self.checkCookie(A, B):\n                if self.checkCookie(A-i, B-i):\n                    return True\n        return False\n\nclass Solution:\n    def checkCookie(self, a, b):\n        if a == 1 or b == 1:\n            return True\n        \n        for i in range(2, max(a,b)+1):\n            if self.checkCookie(a,b):\n                if self.checkCookie(a-i, b-i):\n                    return True\n        return False\n\ndef",
        "test": "assert solution('4 1') == 'Possible'",
        "num_ids": 2762,
        "indeed": false
    },
    {
        "number": 4723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    s = [a for a in s if a!= \"?\"]\n    s = \"\".join(s).split(\"?\")\n    s.sort()\n    return \"\".join(s)\n",
        "test": "assert solution(\"t\") == \"t\"",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 4724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    b.sort()\n    a.sort()\n    if b[0] == 0:\n        return '0'\n    if a[0] == b[0]:\n        return a[0]\n    for i in range(1, len(a)):\n        if a[i]!= b[i]:\n            return str(a[i]) +'' + str(b[i])\n    return str(a[0]) +'' + str(b[-1])\n",
        "test": "assert solution(\"4\") == \"1.5\"",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 4725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef",
        "test": "assert solution(\"string\") == \"0\"",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 4726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t = [int(i) for i in stdin.split()]\n    if m > n:\n        return \"TLE\"\n    if m == 1 and t == 1:\n        return \"AC\"\n    if m == 1 and t == 2:\n        return \"AC\"\n    if m == 1 and t == 3:\n        return \"AC\"\n    if m == 1 and t == 4:\n        return \"AC\"\n    if m == 1 and t == 5:\n        return \"AC\"\n    if m == 1 and t == 6:\n        return \"AC\"\n    if m == 1 and t == 7:\n        return \"AC\"\n    if m == 1 and t == 8:\n        return \"AC\"\n    if m == 1 and t == 9:\n        return \"AC\"\n    if m == 1 and t == 10:\n        return \"AC\"\n    if m == 1 and t == 11:\n        return \"AC\"\n    if m == 1 and t == 12:\n        return \"AC\"\n    if m == 1 and t == 13:\n        return \"AC\"\n    if m == 1 and t == 14:\n        return \"AC\"\n    if m == 1 and t == 15:\n        return \"AC\"\n    if m == 1 and t == 16:\n        return \"AC\"\n    if m == 1 and t == 17:\n        return \"AC\"\n    if m == 1 and t == 18:\n        return \"AC\"\n    if m == 1 and t == 19:\n        return \"AC\"\n    if m == 1 and t == 20:\n        return \"AC\"\n    if m == 1 and t == 21:\n        return \"AC\"\n    if m == 1 and t == 22:\n        return \"AC\"\n    if m == 1 and t == 23:\n        return \"AC\"\n    if m == 1 and t == 24:\n        return \"AC\"\n    if m == 1 and t == 25:\n        return \"AC\"\n    if m == 1 and t == 26:\n        return \"AC\"\n    if m == 1 and t == 27:\n        return \"AC\"\n    if m == 1 and t == 28:\n        return \"AC\"\n    if m == 1 and t == 29:\n        return \"AC\"\n    if m == 1 and t == 30:\n        return \"AC\"\n    if m == 1 and t == 31:\n        return \"AC\"\n    if m == 1 and t == 32:\n        return \"AC\"\n    if m == 1 and t == 33:\n        return \"AC\"\n    if m == 1 and t == 34:\n        return \"AC\"\n    if m == 1 and t == 35:\n        return \"AC\"\n    if m == 1 and t == 36:\n        return \"AC\"\n    if m == 1 and t == 37:\n        return \"AC\"\n    if m == 1 and t == 38:\n        return \"AC\"\n    if m == 1 and t == 39:\n        return \"AC\"\n    if m == 1 and t == 40:\n        return \"AC\"\n    if m == 1 and t == 41:\n        return \"AC\"\n    if m == 1 and t == 42:\n        return \"AC\"\n    if m == 1 and t == 43:\n        return \"AC\"\n    if m == 1 and t == 44:\n        return \"AC\"\n    if m == 1 and t == 45:\n        return \"AC\"\n    if m == 1 and t == 46:\n        return \"AC\"\n    if m == 1 and t == 47:\n        return \"AC\"\n    if m == 1 and t == 48:\n        return \"AC\"\n    if m == 1 and t == 49:\n        return \"AC\"\n    if m == 1 and t == 50:\n        return \"AC\"\n    if m == 1 and t == 51:\n        return \"AC\"\n    if m == 1 and t == 52:\n        return \"AC\"\n    if m == 1 and t == 53:\n        return \"AC\"\n    if m == 1 and t == 54:\n        return \"AC\"\n    if m == 1 and t == 55:\n        return \"AC\"\n    if m == 1 and t == 56:\n        return \"AC\"\n    if m == 1 and t == 57:\n        return \"AC\"\n    if m == 1 and t == 58:\n        return \"AC\"\n    if m == 1 and t == 59:\n        return \"AC\"\n    if m == 1 and t == 60:\n        return \"AC\"\n    if m == 1 and t == 61:\n        return \"AC\"\n    if m == 1 and t == 62:\n        return \"AC\"\n    if m",
        "test": "assert solution(\"100000000\") == \"AC\"",
        "num_ids": 2452,
        "indeed": false
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split()]\n    grid = [[0] * y for _ in range(x)]\n    for i in range(x):\n        for j in range(y):\n            grid[i][j] = int(stdin[i * y + j])\n    answer = ''\n    check = []\n    for i in range(x):\n        for j in range(y):\n            if grid[i][j] == 0:\n                check.append((i, j))\n    while check:\n        x, y = check.pop()\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            if 0 <= x + dx < x and 0 <= y + dy < y and grid[x + dx][y + dy] == 0:\n                grid[x + dx][y + dy] = grid[i][j] + 1\n                check.append((x + dx, y + dy))\n    for i in range(x):\n        for j in range(y):\n            answer += str(grid[i][j]) +''\n    return answer.rstrip()\n",
        "test": "assert solution(stdin) == \"4 0 0 0\"",
        "num_ids": 2046,
        "indeed": false
    },
    {
        "number": 4728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    solution = []\n    molecules = [''.join(l.strip().upper() for l in s.strip().split()) for s in stdin.strip().split()]\n    for i in range(n):\n        molecules.sort(key=lambda x: -len(x))\n        while True:\n            if molecules[i] in ['H', 'C', 'A', 'X', 'Y', 'Z', 'Mg']:\n                break\n            molecules.sort(key=lambda x: -len(x))\n        if molecules[i] == 'H':\n            molecules[i] = 'O'\n        if molecules[i] == 'C':\n            molecules[i] = 'H'\n        if molecules[i] == 'A':\n            molecules[i] = 'C'\n        if molecules[i] == 'X':\n            molecules[i] = 'H'\n        if molecules[i] == 'Y':\n            molecules[i] = 'H'\n        if molecules[i] == 'Z':\n            molecules[i] = 'H'\n        if molecules[i] == 'Mg':\n            molecules[i] = 'C'\n    for i in range(n):\n        solution.append(str(len(molecules[i])))\n    return '\\n'.join(solution)\n\nSample Output 1:\n0\nSample Output 2:\n0\nSample Output 3:\n0\nSample Output 4:\n0\n",
        "test": "assert solution('''H 2",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 4729,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nclass Solution:\n    def isValid(self,password: str) -> bool:\n        alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        password_list = list(password)\n        if len(password_list) < 3 or len(password_list) > 8:\n            return False\n        for i in range(len(password_list)):\n            if password_list[i] not in alphabet:\n                return False\n            if password_list[i] =='' and i == 0:\n                return False\n        return True\n",
        "test": "assert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"PASS\"",
        "num_ids": 1762,
        "indeed": false
    },
    {
        "number": 4730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    L = []\n    for line in stdin.split():\n        if line!= \"\":\n            L.append(int(line))\n    return \"{}\".format(\"\".join(map(str, L)))\n",
        "test": "assert solution(",
        "num_ids": 1196,
        "indeed": false
    },
    {
        "number": 4731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    for word in words:\n        if word[-1]!= word[0]:\n            return 'Player 1 lost'\n    return 'Fair Game'\n",
        "test": "assert solution('') == 'Fair Game', 'Passed'",
        "num_ids": 2418,
        "indeed": false
    },
    {
        "number": 4732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    s = input()\n    a = int(stdin[0])\n    b = int(stdin[1])\n    res = str(a*b)\n    return res\n\ndef",
        "test": "assert solution(stdin) == '111111'",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 4733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    def list_from_string(str: str) -> List[int]:\n        return list(map(int, str))\n\n    def generate_shuffles(n: int, p: int, shuffle_dist: List[int]) -> int:\n        shuffle_set = set()\n        for num in shuffle_dist:\n            shuffle_set.add(num % n)\n            shuffle_set.add(num // n)\n        return sum(shuffle_set)\n\n    n, p, stdin = list(map(int, stdin.split()))\n    shuffle_dist = list_from_string(stdin)\n    shuffles = generate_shuffles(n, p, shuffle_dist)\n    return str(shuffles)\n",
        "test": "assert solution(input()) == '8 in'",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 4734,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    y, p = stdin.split()\n    result = ''\n    for i in y:\n        if i.islower() or i.isupper() or i == 'e' or i == 'x' or i == 'o' or i == 'u':\n            result += i\n        else:\n            result += p[int(p.find(i) + 1)]\n    return result\n    \n",
        "test": "assert solution(\"menolaxios mox\"), \"incorrect string\"",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 4735,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    if int(stdin) % 2 == 1:\n        return 'no'\n    year = int(stdin)\n    month = 12\n    if int(stdin) % 4 == 0 and int(stdin) % 100!= 0:\n        month = int(stdin)\n    \n    if int(stdin) % 400 == 0:\n        if month % 2 == 0:\n            month += 12\n        else:\n            month += 1\n    else:\n        month += 1\n    \n    if month < 6:\n        month += 1\n    else:\n        month = 1\n        \n    if month > 12:\n        month = 1\n    \n    if month == 4 or month == 6 or month == 9 or month == 11:\n        month = 1\n    \n    if month == 1 or month == 2 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return 'yes'\n    else:\n        return 'no'\n",
        "test": "assert solution(\"2018\") == \"yes\"",
        "num_ids": 2244,
        "indeed": false
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    n_list = list(map(int, stdin[2:]))\n    n_list = sorted(n_list)\n\n    def f(k, n):\n        l = len(n)\n        if k <= l:\n            return sum(n[k:l])\n        else:\n            return sum(n[k - n_list[-1]:k]) + sum(n[k - n_list[-1]:k - n_list[l - 1]])\n\n    for i in range(1, n + 1):\n        n_list.append(f(k, i))\n    print(len(set(n_list)))\n    return\n",
        "test": "assert solution(stdin) == 15, 'incorrect'",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 4737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0])*int(stdin[1])*int(stdin[2])*int(stdin[3]))\n\n-----Brute Force-----\nBrute Force Strategy:\n\n$$min_max = \\mathbb{N}$$\n\n$$ max_{i \\geq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\leq j \\geq 1$$\n$$ \\mathbb{N}$$\n\n$$ min_{i \\leq j} \\leq \\mathbb{N}$$\n$$ i\\",
        "test": "assert solution(stdin) == \"\"",
        "num_ids": 1595,
        "indeed": false
    },
    {
        "number": 4738,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip().replace(' ', '').replace('.', '').replace(',', ''))\n    l = len(stdin)\n    result = 0\n    for i in range(l - k):\n        substring = stdin[i:i+k]\n        result = max(result, len(substring))\n    return str(result)\n",
        "test": "assert solution(\"\") == 1",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 4739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    M,N = map(int,stdin.split())\n    s = [i for i in range(M,N)]\n    j = 0\n    k = 0\n    while j < len(s):\n        while s[j]!= s[k]:\n            k += 1\n        if j!= k:\n            j = j + 1\n        else:\n            k = k + 1\n            j += 1\n    return k\n",
        "test": "assert solution(input().split()) == \"0\"",
        "num_ids": 1053,
        "indeed": false
    },
    {
        "number": 4740,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return ('0' if int(stdin) % 3 == 0 else '1')\n",
        "test": "assert solution('555000') == '0', 'failed to solve'",
        "num_ids": 2291,
        "indeed": false
    },
    {
        "number": 4741,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(\"/\"))\n    a = abs(a)\n    b = abs(b)\n    gcd = 1\n    while a < b:\n        if a % 2 == 0 and b % 2 == 0:\n            gcd *= a\n            a = a // 2\n            b = b // 2\n        elif a % 2!= 0 and b % 2!= 0:\n            gcd *= a\n            a = a // 2\n            b = b // 2\n        elif a % 2 == 0 and b % 2!= 0:\n            gcd *= a\n            a = a // 2\n            b = b // 2\n        else:\n            gcd *= a\n            a = a // 2\n            b = b // 2\n    answer = gcd * n\n    return str(answer)",
        "test": "assert solution(input()) == \"0\"",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 4742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    \n    n,k=map(int,stdin.split())\n    d=list(map(int,stdin.split()))\n    l=[]\n    s=[]\n    for i in range(n):\n        if(d[i]>0):\n            l.append(i)\n            d[i]-=1\n            if(d[i]>=0):\n                s.append(d[i])\n            else:\n                s.append(0)\n        else:\n            s.append(s[i]-1)\n    \n    l.sort()\n    s.sort()\n    \n    if(l[-1]==0):\n        s[-1]=-1\n        \n    for i in range(k-1):\n        if(l[i]==0):\n            l[i]=s[i]\n        else:\n            l[i]=-1\n    \n    return''.join(map(str,l))",
        "test": "assert solution(stdin) == \"Transposition\"",
        "num_ids": 3507,
        "indeed": false
    },
    {
        "number": 4743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], stdin[i].upper())\n    return stdin.upper()\n\nsolution(\"I love ba-na-na\")\n\"\"\"\n\n\ndef",
        "test": "assert solution(stdin) == 'Cociccah gs the bestuh'",
        "num_ids": 2321,
        "indeed": false
    },
    {
        "number": 4744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    answer = 10**7\n    for std in stdin.split():\n        if std == 'F':\n            answer *= 2\n        else:\n            answer /= 2\n    return str(answer)\n",
        "test": "assert solution(\"5\") == \"14\"",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 4745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    if N <= 10**9:\n        return str(N)\n    if X < N:\n        N = X\n    else:\n        X = X % N\n    # write your code here\n    def greedy_partition(x):\n        if x <= 0:\n            return\n        if x <= X:\n            yield x\n            yield from greedy_partition(x-1)\n            yield from greedy_partition(x-1)\n        else:\n            yield x\n            yield from greedy_partition(x-1)\n    return ''.join(map(str, greedy_partition(N)))",
        "test": "assert solution('1 3') == '1'",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 4746,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = map(int, stdin.split())\n    if C > A:\n        return \"possible\"\n    elif A < 0 or C < 0:\n        return \"impossible\"\n    elif A + B == C:\n        return \"possible\"\n    else:\n        return \"impossible\"\n",
        "test": "assert solution('0 1 1') == \"possible\"",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 4747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    arr = []\n    for _ in range(2):\n        arr.append(list(map(int, stdin.split())))\n    result = 0\n    for i in range(1, len(arr)):\n        result += arr[i][0] * arr[i - 1][1]\n    result = result // 3\n    return f\"{result:.6f}\"\n\n\"\"\"\nimport math\n\ndef",
        "test": "assert solution(stdin) == '1.875'",
        "num_ids": 2209,
        "indeed": false
    },
    {
        "number": 4748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    n = a + b\n    if n == 0:\n        return '0'\n    if n % 2!= 0:\n        return '0'\n    if n % 4!= 0:\n        return '0'\n    ans = 0\n    for i in range(1, n):\n        ans += 1\n        if i % 2 == 0:\n            ans += 1\n        if i % 4 == 0:\n            ans += 1\n    return str(ans)\n\n-----Example-----\nInput 1:\n2 4\nOutput 1:\n6\nInput 2:\n3 5\nOutput 2:\n2\nExplanation:\nK = 5\nB = 3\n\nK = 4\nB = 1\n\"\"\"\n\nimport math\n\ndef",
        "test": "assert solution(input()) == \"0 0\"",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 4749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [list(input()) for _ in range(n)]\n    result = []\n    for line in range(n):\n        for col in range(n):\n            if grid[line][col] == 'B':\n                result.append(line)\n            if grid[line][col] == 'W':\n                result.append(line)\n                result.append(col)\n    return str(len(result)) if len(result) > 0 else '0'\n    \n",
        "test": "assert solution(",
        "num_ids": 2613,
        "indeed": false
    },
    {
        "number": 4750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip().split()[0])\n    n = int(stdin.strip().split()[1])\n    l = []\n    r = []\n    for i in range(0, q):\n        a, b = map(int, input().split())\n        l.append(a)\n        r.append(b)\n    \n    a = l.index(min(l))\n    b = r.index(max(r))\n    return str(a) + str(b)\n    ",
        "test": "assert solution(stdin) == \"2 1\"",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    pos = -1\n    head = list()\n    for _ in range(int(stdin.strip())):\n        if pos == -1:\n            pos = int(stdin.strip())\n            head.append(list())\n        else:\n            head[pos].append(list())\n            pos += 1\n    queue = deque()\n    for i in range(pos):\n        queue.append([i, list()])\n    \n    while queue:\n        curr, nodes = queue.popleft()\n        if len(nodes) == 1:\n            return nodes[0]\n        if curr == pos:\n            return False\n        for i in range(len(nodes)):\n            if curr + 1 < len(nodes) and nodes[i] == nodes[curr + 1]:\n                queue.append([curr + 1, nodes[i:]])\n            if curr + 2 < len(nodes) and nodes[i] == nodes[curr + 2]:\n                queue.append([curr + 2, nodes[i:]])\n    \n    return False\n",
        "test": "assert solution(stdin) == True",
        "num_ids": 1288,
        "indeed": false
    },
    {
        "number": 4752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(x) for x in stdin.split()]\n    target = arr[-1] - arr[0]\n    for i in range(len(arr) - 2, -1, -1):\n        if arr[i] + target == arr[i + 1]:\n            return [i, i + 1]\n    return []\n\n'''",
        "test": "assert solution(\"0 1\") == \"0\"",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 4753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Solution 1\n    N = int(stdin.strip())\n    if N%2==1 or N<1: return \"0\"\n    diagonals = []\n    for i in range(0,N,2):\n        a,b = map(int,str(i).split(\"-\"))\n        if a<b:\n            diagonals.append(a)\n            diagonals.append(b)\n        else:\n            diagonals.append(b)\n            diagonals.append(a)\n    \n    # Solution 2\n    N = int(stdin.strip())\n    if N%2==1 or N<1: return \"0\"\n    for i in range(0,N,2):\n        if i in diagonals:\n            continue\n        else:\n            return \"1\"",
        "test": "assert solution(input()) == 0, 'The input does not match the expected result'",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 4754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    piles = []\n    for i in range(n):\n        piles.append(list(map(int, input().split())))\n    \n    result = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if piles[i][j] == piles[i][j-1] + 1 and piles[i][j]!= piles[i+1][j]:\n                result = piles[i][j]\n                break\n    return str(result)\n\n\nprint(solution(input()))\n",
        "test": "assert solution(stdin) == 'impossible'",
        "num_ids": 2215,
        "indeed": false
    },
    {
        "number": 4755,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    man, bill = map(int, stdin.split())\n    ans = 0\n    for x in range(1, bill+1):\n        if x % 10 == 1:\n            ans += bill * x\n        else:\n            ans += bill * (10 - (x % 10))\n    return str(ans)\n\nSample Input 3:\n8\nSample Output 3:\n'3324'\n",
        "test": "assert solution('1933') == '100'",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 4756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.split()))\n    x.sort(key = lambda a : abs(a[0]) + abs(a[1]))\n    a = x[0][0]\n    b = x[0][1]\n    for i in range(1, n):\n        c = x[i][0]\n        d = x[i][1]\n        if c - d == a + b:\n            a = c\n            b = d\n        else:\n            break\n    return str(abs(a - b))",
        "test": "assert solution(stdin) == \"0.000000\"",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, E = map(int, stdin.split())\n    villagers = [list(map(int, stdin.split())) for _ in range(n)]\n    answer = set()\n    for i in range(n):\n        for j in range(1, E):\n            if i == 0:\n                if not villages[i][j]:\n                    answer.add(i+1)\n                if i == n-1:\n                    answer.add(j+1)\n            else:\n                if not villages[i][j]:\n                    answer.add(j)\n                if i == n-1:\n                    answer.add(i+1)\n    return sorted(list(answer))\n",
        "test": "assert solution(stdin) == \"1 1 2 3 4 3 5 4 2 6 2 6 6 7 8 8\"",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 4758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, t, m = map(int, stdin.split())\n    ans = [0] * (n + t)\n    ans[0], ans[n] = ans[n], ans[0]\n    for i in range(1, n + t):\n        ans[i] = ans[i - 1] + ans[i]\n    for i in range(m + 1, n + t + m + 1):\n        ans[i] = ans[i - 1] + ans[i]\n    return \"\".join(map(str, ans))",
        "test": "assert solution(\"3 3 3\") == \"10\"",
        "num_ids": 728,
        "indeed": false
    },
    {
        "number": 4759,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    return str(round(float(stdin[1])/float(stdin[0]), 3))\n    \ndef",
        "test": "assert solution(stdin) == '2.5'",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 4760,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return 'error'\n    \n    p = 2\n    sieve = []\n    i = 0\n    while len(sieve) < n:\n        if i < p:\n            i = 0\n        else:\n            i = i + 1\n            sieve.append(i)\n    \n    for j in range(2, int(math.sqrt(n)) + 1):\n        if sieve[j] > sieve[i]:\n            i = j\n            \n    return str(i)\n\nsolution(\"1\")",
        "test": "assert solution(stdin) == \"7\"",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 4761,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1: sort\n    # use a set to eliminate duplicate digits\n    digits = set()\n    for line in stdin.splitlines():\n        for digit in line:\n            digits.add(digit)\n    # initialize the list of possible combinations\n    possible_combinations = []\n    # find all combinations that are part of the set of digits\n    for digit in digits:\n        for combo in range(1, 10):\n            if str(digit) + str(combo) not in digits:\n                break\n        else:\n            possible_combinations.append(digit + str(combo))\n    # return the sum of the possible combinations\n    return sum(possible_combinations)\n\nSample Input 3:\n1 4\nSample Output 3:\n1\n\nSample Input 4:\n1 4\nSample Output 4:\n4\n\"\"\"\n",
        "test": "assert solution(\"12345\"), \"No\"",
        "num_ids": 2337,
        "indeed": false
    },
    {
        "number": 4762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    for i in stdin:\n        cnt += 1\n        if i == 'S':\n            cnt *= 4\n        elif i == 'G':\n            cnt *= 5\n    return str(1.0 - cnt / len(stdin))\nprint(solution(input()))",
        "test": "assert solution(input()) == '0.66666667'",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 4763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n):\n        line = stdin.split(\" \")\n        print(line)\n        print(line[0])\n        print(line[1])\n        print(line[2])\n        print(line[3])\n        print(line[4])\n    return 'impossible'\n\n\nExpected Result:\nTriple 20\nDouble 15\nSingle 9\n\"\"\"",
        "test": "assert solution(input) == 'triple 19'",
        "num_ids": 4078,
        "indeed": false
    },
    {
        "number": 4764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    h, v, w, n = map(int, stdin.split())\n    return str(max(h, w)) + \" \" + str(max(v, w))",
        "test": "assert solution(input()) == '168'",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 4765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    ingredients = []\n    for _ in range(2):\n        ingredients.append(list(map(int, stdin.split())))\n    sour = ingredients[0][0]\n    bruh = ingredients[1][0]\n    bruh = sum(bruh)\n    for i in range(2, len(ingredients)):\n        sour = sour + ingredients[i][0]\n        bruh = bruh + ingredients[i][1]\n        bruh = sum(bruh)\n    return str(abs(sour - bruh))\n\nprint(solution(input()))",
        "test": "assert solution(stdin) == 4",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 4766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    str1 = stdin.split(' ')\n    str2 = str1[1::]\n    for i in range(len(str2)):\n        str2[i] = str2[i].upper()\n    str2.insert(0,'')\n    str2.pop(0)\n    str1.insert(0,'')\n    str1.pop(0)\n    print(' '.join(str2))\n    print(' '.join(str1))\n    return''.join(str2)\n",
        "test": "assert solution(",
        "num_ids": 2074,
        "indeed": false
    },
    {
        "number": 4767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N = 0\n    operations = {'+':1, '-':1, '*':2, '/':2, '&':3}\n    for line in stdin:\n        res = 0\n        for char in line:\n            res += operations[char]\n        N = max(N, res)\n    return str(N)",
        "test": "assert solution(stdin) == \"5\"",
        "num_ids": 2821,
        "indeed": false
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    seq = list(map(str,input()))\n    heapq.heapify(seq)\n    count = 0\n    for i in range(n-k):\n        u,v = heapq.heappop(seq),heapq.heappop(seq)\n        count += 1\n        if u!=v:\n            heapq.heappush(seq,u-v)\n    if len(seq)>=k:\n        for i in range(k):\n            heapq.heappush(seq,seq[i]-1)\n        count += len(seq)\n    for j in seq:\n        print(count)\n        count+=1\n        if j!=0:\n            heapq.heappush(seq,j-1)\n    return count\n\n-----Constraints-----\n - 1 <= n <= 10\n - 10 <= k <= 10\n\n-----Time complexity-----\n - O(N)\n - O(N)\n\n-----Space Complexity-----\n - O(N)\n - O(N)\n'''",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 2405,
        "indeed": false
    },
    {
        "number": 4769,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    chars = set()\n    root = []\n    for word in stdin.split():\n        word = word.lower()\n        if len(word) > 2:\n            word = word[:2]\n        root.append(word)\n        chars.add(word)\n    root = set(root)\n    \n    if len(root) > 1:\n        return min(root)\n    elif root:\n        return root.pop()\n    else:\n        return -1\n",
        "test": "assert solution(\"bbbab\") == \"bb\"",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 4770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    result = list()\n    for _ in range(N):\n        result.append(list(map(int, stdin.split())))\n    result.sort()\n    x = [1 for _ in range(M)]\n    result = [x[i] for i in range(N)]\n    for i in range(1, len(result)):\n        result[i] += result[i - 1]\n    result = [str(x[i]) for i in range(M)]\n    return''.join(result)\n\nSample Input 3:\n2\nSample Output 3:\nDr. Chaz will have 1 piece of chicken left over!\n\nSample Input 4:\n6 12\nSample Output 4:\nDr. Chaz will have 4 pieces of chicken left over!\ndef",
        "test": "assert solution(stdin) == \"Dr. Chaz needs $1 more piece of chicken!\\n\"",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 4771,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    v = int(stdin.splitlines()[1])\n    n = n * n\n    n = int(n)\n    dp = [[0] * v for _ in range(n)]\n    for i in range(n):\n        for j in range(v):\n            for l in range(1, i + 1):\n                if l > 1:\n                    dp[i][j] += dp[l - 1][j]\n    return str(max(dp[-1]))",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 934,
        "indeed": false
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    grid = [list(stdin.strip()) for _ in range(int(stdin.strip()))]\n    grid.insert(0, [\"#\"] * len(grid[0]))\n    grid.append([\"#\"] * len(grid[0]))\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            grid[i][j] = grid[i][j].lower()\n            if grid[i][j] == \"#\":\n                grid[i][j] = \"#\"\n            elif grid[i][j] == \"@\":\n                grid[i][j] = \"a\"\n            else:\n                grid[i][j] = grid[i][j].upper()\n    \n    def check_ver(grid, i, j):\n        if grid[i][j] == \"#\":\n            return False\n        elif grid[i][j] == \"@\":\n            return False\n        elif grid[i][j] == \"#\":\n            grid[i][j] = grid[i][j].upper()\n            if i < len(grid)-1 and grid[i+1][j] == \"#\":\n                return False\n            elif i > 0 and grid[i-1][j] == \"#\":\n                return False\n            elif j < len(grid[i])-1 and grid[i][j+1] == \"#\":\n                return False\n            elif j > 0 and grid[i][j-1] == \"#\":\n                return False\n            return True\n        else:\n            return False\n    \n    def check_hor(grid, i, j):\n        if grid[i][j] == \"#\":\n            return False\n        elif grid[i][j] == \"@\":\n            grid[i][j] = grid[i][j].upper()\n            if i < len(grid)-1 and grid[i+1][j] == \"#\":\n                return False\n            elif i > 0 and grid[i-1][j] == \"#\":\n                return False\n            elif j < len(grid[i])-1 and grid[i][j+1] == \"#\":\n                return False\n            elif j > 0 and grid[i][j-1] == \"#\":\n                return False\n            return True\n        else:\n            return False\n    \n    def solve(grid, i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[i]) or grid[i][j]!= \"#\":\n            return False\n        \n        grid[i][j] = \"#\"\n        grid[i][j] = grid[i][j].upper()\n        \n        if check_ver(grid, i, j):\n            return True\n        \n        for direction in [(0,1), (0,-1), (1,0), (-1,0)]:\n            n_i, n_j = i + direction[0], j + direction[1]\n            if check_hor(grid, n_i, n_j):\n                return solve(grid, n_i, n_j)\n        \n        grid[i][j] = \"#\"\n        grid[i][j] = grid[i][j].upper()\n        \n        if check_hor(grid, i, j):\n            return True\n        \n        for direction in [(0,1), (0,-1), (1,0), (-1,0)]:\n            n_i, n_j = i + direction[0], j + direction[1]\n            if check_hor(grid, n_i, n_j):\n                return solve(grid, n_i, n_j)\n        return False\n        \n    def solve_ver(grid, i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[i]) or grid[i][j]!= \"#\":\n            return False\n        \n        grid[i][j] = \"#\"\n        grid[i][j] = grid[i][j].upper()\n        \n        if check_ver(grid, i, j):\n            return True\n        \n        for direction in [(0,1), (0,-1), (1,0), (-1,0)]:\n            n_i, n_j = i + direction[0], j + direction[1]\n            if solve_ver(grid, n_i, n_j):\n                return True\n        return False\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \"#\"\n            elif grid[i][j] == \"@\":\n                grid[i][j] = \"a\"\n            else:\n                grid[i][j] = grid[i][j].upper()\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \"#\"\n            elif grid[i][j] == \"@\":\n                grid[i][j] = \"a\"\n            else:\n                grid[i][j] = grid[i][j].upper()\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \"#\"\n            elif grid[i][j] == \"@\":\n                grid[i][j] = \"a\"\n            else:\n                grid[i][j] = grid[i][j].upper()\n    \n    if solve(grid, 0, 0):\n        return grid[0][0]\n    return grid[0][0]\n    \n",
        "test": "assert solution(input()) == \"kala\"",
        "num_ids": 2774,
        "indeed": false
    },
    {
        "number": 4773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(stdin) == 5",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    sum = 0\n    for line in stdin:\n        a, b, c, d = line.split(' ')\n        if a == '+':\n            sum += int(b)\n        elif a == '-':\n            sum -= int(b)\n        elif a == '/':\n            sum /= int(c)\n    return f'{sum:.0f}'\n\n\n\nSample Input 3:\n1 2\nSample Output 3:\n2\n\"\"\"",
        "test": "assert solution('0 4 2 3 2') == '1 + 2 = 3 + 4'",
        "num_ids": 937,
        "indeed": false
    },
    {
        "number": 4775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    word_a, word_b = stdin.split()\n    word_a = word_a.upper()\n    word_b = word_b.upper()\n    counter_a, counter_b = 0, 0\n    for letter in word_a:\n        if letter in word_b:\n            counter_a += 1\n    for letter in word_b:\n        if letter in word_a:\n            counter_b += 1\n    if counter_a == counter_b:\n        return word_a * counter_b\n    else:\n        return 'No'\n",
        "test": "assert solution(input()) == '4'",
        "num_ids": 1575,
        "indeed": false
    },
    {
        "number": 4776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[-1])\n    free_food = set()\n    for _ in range(N):\n        s, t = map(int, stdin.strip().split())\n        free_food.update(range(s, t))\n    return str(len(free_food))",
        "test": "assert solution([\"2\",\"1\",\"365\"]) == \"365\"",
        "num_ids": 2949,
        "indeed": false
    },
    {
        "number": 4777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    a = a*a*a\n    b = b*b*b\n    if a > b:\n        return str(a-b)\n    else:\n        return str(b-a)",
        "test": "assert solution(",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    precinct_count = 0\n    district_count = 0\n    for line in stdin:\n        p, d = map(int, line.split())\n        precinct_count += p\n        district_count += d\n    parties = []\n    for _ in range(district_count):\n        party = []\n        for _ in range(precinct_count):\n            party.append(int(input()))\n        parties.append(party)\n    \n    party_votes = [0] * (district_count + 1)\n    party_votes[0] = parties[0][0]\n    party_votes[1] = parties[0][1]\n    for i in range(2, district_count + 1):\n        party_votes[i] = party_votes[i - 1] + parties[i - 1][party_votes[i - 1]]\n    for i in range(1, district_count + 1):\n        party_votes[i] = party_votes[i - 1] + parties[i - 1][party_votes[i - 1]]\n\n    grouped_votes = {}\n    for i in range(1, district_count + 1):\n        grouped_votes[i] = parties[i][party_votes[i]]\n\n    total = 0\n    for i in range(1, district_count + 1):\n        total += grouped_votes[i]\n    for i in range(1, district_count + 1):\n        total -= grouped_votes[i]\n\n    if total == 0:\n        return 'A'\n    elif total >= 1000:\n        return 'B'\n    else:\n        return str(round(abs(total / 1000), 6))\n        \n\"\"\"\n    \n\ndef",
        "test": "assert solution(\"Sample Output 2:\") == 'A 0 99'",
        "num_ids": 2799,
        "indeed": false
    },
    {
        "number": 4779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    def getSum(n):\n        ans = 1\n        for i in range(2, n + 1):\n            ans = ans * i\n        return ans\n    def dfs(x):\n        if x == 0:\n            return 1\n        if x < 0:\n            return 0\n        return x + dfs(x // 2)\n    for i in range(2,int(math.sqrt(10 ** 8)) + 1):\n        sum = getSum(i)\n        ans = 1\n        for j in range(i, 10 ** 8 + 1, i):\n            ans = ans * (j // i)\n            if j % i == 0:\n                ans += 1\n        if sum == ans:\n            return ans\n    return \"\"\n\n\nSample Output 2:\n1\nExplanation:\n\nInt n;\n\nmethod 1:\n1. Get the sum of all digits.\n2. Loop through the digits, increment the value by 1 and the previous value.\n3. Use the previous value, and repeat the process as needed.\n4. Once all digits have been processed, return the sum of the digits.\n\nmethod 2:\nRecursive solution with memoization.\nTime: O(n)\nSpace: O(n)\n\nMethod 2: with memoization.\nTime: O(n)\nSpace: O(1)\n\"\"\"\ndef",
        "test": "assert solution(inp) == \"168\"",
        "num_ids": 957,
        "indeed": false
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n_1, n_2 = map(int, stdin.split())\n    s_1 = set(input().split())\n    s_2 = set(input().split())\n    print(s_1.difference(s_2))",
        "test": "assert solution(stdin) == \"CBEF\"",
        "num_ids": 1942,
        "indeed": false
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = n//10\n    for i in range(n//10):\n        stdin.replace('T', 'T' + str(i+1))\n    for i in range(n//10):\n        stdin.replace('N', 'N' + str(i+1))\n    for i in range(n//10):\n        stdin.replace('P', 'P' + str(i+1))\n    ans = ''\n    for i in range(m):\n        ans += stdin.split(' ')[0][i] +''\n        ans += stdin.split(' ')[1][i] +''\n    return ans\n",
        "test": "assert solution(stdin) == \"P\"",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 4782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    def get_info():\n        s = stdin.split()\n        return int(s[0]), int(s[1])\n\n    def check_road(road):\n        if len(road) == 1:\n            return True\n        if len(road) % 2 == 0:\n            if road[0] > road[len(road)-1]:\n                return False\n            for i in range(0, len(road)//2):\n                if road[i] > road[i+len(road)-1]:\n                    return False\n            return True\n        else:\n            if road[0] < road[len(road)-1]:\n                return False\n            for i in range(0, len(road)//2):\n                if road[i] < road[i+len(road)-1]:\n                    return False\n            return True\n\n    def get_roads(road):\n        result = []\n        for i in range(0, len(road)):\n            if i < len(road)//2:\n                result.append(road[i]*2)\n            else:\n                result.append(road[i]*2)\n        return result\n\n    def plow(roads, roads_upgrade):\n        cost = 0\n        cities_set = set()\n        for road in roads_upgrade:\n            cities = get_roads(road)\n            if len(cities) == 1:\n                cost += cities[0]\n            else:\n                cities_set = cities_set.union(cities)\n                cost += cities[0]*len(cities)\n        if cities_set == set():\n            return 0\n        return cost\n\n    n, m = get_info()\n    road_list = list(map(int, stdin.split()))\n    result = plow(road_list, get_roads(road_list))\n    return str(result)",
        "test": "assert solution(input()) == \"72\"",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 4783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    \n    def get_h(index):\n        if index == 1:\n            return 0\n        if index == 2:\n            return 1\n        return stdin[index - 1] + get_h(index - 2)\n    \n    def get_l(index):\n        if index == 2:\n            return 0\n        if index == 3:\n            return 1\n        return stdin[index - 1] + get_l(index - 2)\n    \n    def get_area(index):\n        if index == 1:\n            return 1\n        if index == 2:\n            return stdin[index - 1] * 2\n        if index == 3:\n            return stdin[index - 1] * 3\n    \n    def print_area(area):\n        print(area, end ='')\n        if area == 1:\n            return\n        for i in range(3):\n            print(get_area(i), end ='')\n        print()\n        print_area(area - 1)\n    \n    print_area(get_h(1) + get_l(1))\n    return 0\n    \n    pass\n\n'''\nThis is an accepted checker. It runs the program and returns the result.\n'''",
        "test": "assert solution(input) == 1",
        "num_ids": 1828,
        "indeed": false
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split(\" \")]\n    n = len(data)\n    print(data)\n    print(n)\n    count = 0\n    for i in range(1, n):\n        j = data[i] - data[i - 1]\n        if j >= 0:\n            count += j\n    print(count)\n    return str(count)\n",
        "test": "assert solution(stdin) == 28, \"The solution should be 28\"",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 4785,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    return \"hiss\" if stdin.count(\"s\") in [2,3] else \"no hiss\"\n",
        "test": "assert solution([\"amiss\", \"octopuses\", \"mississippi\"]) == \"no hiss\"",
        "num_ids": 2034,
        "indeed": false
    },
    {
        "number": 4786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip().split(' '))\n    d = dict()\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if s[i] == s[j]:\n                if s[i] not in d:\n                    d[s[i]] = 0\n                d[s[i]] += 1\n    for key, val in d.items():\n        if val > 1:\n            return key\n    return ''\n\nSample Input 3:\n3\ngolf\nExcel\nGolf\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\nExcel\n",
        "test": "assert solution('4') == 1",
        "num_ids": 2487,
        "indeed": false
    },
    {
        "number": 4787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int,stdin.split())))\n",
        "test": "assert solution(stdin) == \"21\"",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 4788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n_1 = int(stdin.split()[0])\n    n_2 = int(stdin.split()[1])\n    \n    if n_1 >= 359 or n_2 >= 359:\n        raise ValueError\n    \n    angle = 360 // abs(n_1 - n_2)\n    if abs(angle) > 90:\n        angle = -(angle + 90)\n    \n    if n_1 - n_2 == 360:\n        if angle > 0:\n            return \"180\"\n        else:\n            return \"90\"\n    elif n_1 - n_2 == -360:\n        if angle < 0:\n            return \"180\"\n        else:\n            return \"90\"\n    \n    return str(180 - angle)\n\"\"\"\n\nimport sys\ndef",
        "test": "assert solution(",
        "num_ids": 2765,
        "indeed": false
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split(\" \"))\n    dic = dict()\n    for i in range(1,N+1):\n        dic[i] = [int(x) for x in stdin.split(\" \")[:i]]\n    for k in range(1,K+1):\n        dic[k] = sorted(dic[k],reverse=True)\n    for i in range(K,0,-1):\n        for i2 in range(K,0,-1):\n            for j in range(i2,0,-1):\n                if i2>=j:\n                    dic[j][i2] = dic[j][i2]*dic[j][i2]\n    return str(len(dic[1]))",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 4790,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = stdin.split()\n    k = int(stdin.split()[1])\n    i = 0\n    j = 0\n    result = 0\n    while i < n:\n        while j < k:\n            if arr[i] == 'B' and arr[j] == 'W':\n                arr[i] = 'B'\n                arr[j] = 'W'\n                result += 1\n                j += 1\n                i += 1\n            elif arr[i] == 'W' and arr[j] == 'B':\n                arr[i] = 'W'\n                arr[j] = 'B'\n                result += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        i += 1\n    return str(result)\n\n-----Time complexity-----\nTime complexity: O(n)\n\nSpace Complexity: O(n)",
        "test": "assert solution(stdin) == 1",
        "num_ids": 3220,
        "indeed": false
    },
    {
        "number": 4791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    return str(max([abs(int(i)) for i in stdin.split()]))\n\nSample Input 3:\n1 2 1 1 1\nSample Output 3:\n1.9\ndef",
        "test": "assert solution(",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 4792,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(stdin)\n    lst.sort()\n    n = len(lst)\n    if n < 2:\n        return lst\n    \n    # change only the first 2 characters\n    for i in range(n):\n        if lst[i] == lst[i-1]:\n            lst[i] = lst[i-2] + lst[i-1]\n        else:\n            lst[i] = lst[i-2] + lst[i-1]\n    return ''.join(lst)\n",
        "test": "assert solution(stdin) == \"robert\", \"should be robert\"",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 4793,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # Split the string into a list\n    stds = stdin.split(' ')\n    # Get the volume of the shipment\n    v_1, v_2 = stds[0], stds[1]\n    # Check if the volume is larger than the volume of the bottle\n    if v_1 > v_2:\n        # Print the result\n        print(int(v_1) + int(v_2))\n    else:\n        print(int(v_2) + int(v_1))\n    return \"Impossible\"\n",
        "test": "assert solution(\"1000 900 7\") == \"Impossible\"",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    def recur(R: int, C: int):\n        if R == 1 and C == 1:\n            return 1\n        elif R == 1 and C == 2:\n            return 1 + recur(R - 1, C - 1)\n        elif R == 2 and C == 1:\n            return 1 + recur(R - 2, C - 1)\n        elif R == 2 and C == 2:\n            return 1 + recur(R - 2, C - 2)\n        elif R == 3 and C == 1:\n            return 1 + recur(R - 3, C - 1)\n        elif R == 3 and C == 2:\n            return 1 + recur(R - 3, C - 2)\n        elif R == 3 and C == 3:\n            return 1 + recur(R - 3, C - 3)\n        elif R == 4 and C == 1:\n            return 1 + recur(R - 4, C - 1)\n        elif R == 4 and C == 2:\n            return 1 + recur(R - 4, C - 2)\n        elif R == 4 and C == 3:\n            return 1 + recur(R - 4, C - 3)\n        elif R == 4 and C == 4:\n            return 1 + recur(R - 4, C - 4)\n        else:\n            return 0\n    return str(recur(int(stdin.strip()), int(stdin.strip())))\n",
        "test": "assert solution(input()) == 9",
        "num_ids": 1332,
        "indeed": false
    },
    {
        "number": 4795,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    p = map(int, stdin.split())\n    p = sorted(p)\n    p.insert(0, 0)\n    s = set(p)\n    n -= 1\n    if n == 0:\n        return '0'\n    if x not in s:\n        return '0'\n    if y not in s:\n        return '0'\n    a = 0\n    b = 0\n    c = 0\n    for i in range(n):\n        a += p[i]**2\n        b += p[i]\n        c += p[i]\n    return str(a + b*(x**2) + c*(y**2))\n",
        "test": "assert solution(stdin) == \"19799253873\"",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 4796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    nums = [int(x) for x in input().split()]\n    tot = sum(nums)\n    leftovers = tot - (sum(nums))\n    \n    # 2. Divide the leftover by 2, because it is relative to the standard deviation.\n    leftover = int((leftovers / 2) * 2)\n    \n    # 3. Remove the leftover from the standard deviation.\n    # 4. Calculate the normal distribution for the leftover.\n    normal = math.sqrt(2 * (leftover / tot))\n    \n    # 5. Make the leftover with the normal distribution.\n    return \"{:.3f}\".format(normal)",
        "test": "assert solution(stdin
        "num_ids": 3384,
        "indeed": false
    },
    {
        "number": 4797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split('\\n')[0]\n\n-----Instantiation-----\nCreate a new string that has all the letters of the English alphabet at the same index, as well as the characters '<' and '>' and put them into a list.\n\n-----Main Program-----\nInput:\na<bc<\nOutput:\nb\n\nInput:\nfoss<<rritun\nOutput:\nforritun\ndef",
        "test": "assert solution(\"foss<<rritun\") == \"forritun\"",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 4798,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    str = stdin.replace(\"-\", \"\").replace(\"+\", \"\").replace(\" \",\"\").replace(\",\",\"\")\n    str_list = []\n    for char in str:\n        if not char.isalpha():\n            str_list.append(char)\n    answer = ''\n    for i in range(len(str_list)):\n        for j in range(len(str_list)-i-1):\n            if str_list[j] == str_list[j+1]:\n                answer += str_list[j] + str_list[j+1]\n            else:\n                break\n    return answer\n",
        "test": "assert solution(\"Blank\") == \"\"",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 4799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    G,S,C = map(int,stdin.split())\n    victory_card = max(G,S,C)\n    treasure_card = max(G+S,C+G)\n    return \"Province or Gold\" if victory_card > treasure_card else \"Province or Copper\" if victory_card < treasure_card else \"Estate or Gold\" if treasure_card > G else \"Estate or Copper\" if treasure_card < G else \"Estate or Gold\"\nsolution(input())",
        "test": "assert solution(",
        "num_ids": 994,
        "indeed": false
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    return \"{0:.1f}\".format(float(stdin.split()[0])/float(stdin.split()[1]))\n",
        "test": "assert solution('80 90') == 'impossible'",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 4801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    a = list(map(int, stdin.split()))\n    max_of_arr = list(map(math.gcd, a))\n    max_of_arr.sort()\n    max_of_arr_str = ''.join(map(str, max_of_arr))\n    num_of_arr = len(max_of_arr)\n    if num_of_arr % 2 == 1:\n        return max_of_arr_str\n    else:\n        result_gcd = math.gcd(int(max_of_arr_str[1:-1]), num_of_arr)\n        left_gcd = max_of_arr[int(max_of_arr_str[1:-1]) - 1]\n        left_gcd_num_of_arr = num_of_arr - (int(max_of_arr_str[1:-1]) - 1)\n        if left_gcd_num_of_arr % 2 == 1:\n            left_gcd = left_gcd * 2\n            left_gcd_num_of_arr = left_gcd_num_of_arr * 2\n        if left_gcd_num_of_arr == 1:\n            left_gcd_num_of_arr = 1\n        return str(left_gcd_num_of_arr * 2 + left_gcd)\n",
        "test": "assert solution(stdin) == \"2,3,5,7\"",
        "num_ids": 919,
        "indeed": false
    },
    {
        "number": 4802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, m: int) -> str:\n        if n == 0:\n            return '23'\n        elif m == 0:\n            return '45'\n        elif n < 0:\n            return '23'\n        elif m < 0:\n            return '45'\n        elif n >= 0 and m >= 0:\n            return '{:02d}:{:02d}'.format(n, m)\n        elif n >= 0:\n            return solve(n - 1, m)\n        elif m >= 0:\n            return solve(n, m - 1)\n        return ''\n\n    return solve(int(stdin.strip()) * 24, int(stdin.strip()) * 60)\n\n\n-----Examples-----\nExpected Output:\nExpected Output:\nsolution(\"23 45\", 12)\nExpected Output:\n23 45\n'''\ndef",
        "test": "assert solution(\"0 30\") == \"23 45\"",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 4803,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        a, n = line.split()\n        a = int(a)\n        if a >= 0 and a < 10:\n            n = int(n)\n            a = a ** n\n            print(a)\n        elif a >= 10:\n            n = int(n)\n            print(n ** 0.5)\n        else:\n            print(\"ERROR: a out of range.\")\n\nprint(\"Sample Input 3:\")\nprint(\"3.3\\n1.25\\n1.6\\n1.1\\n2.5\\n2.8\\n\")\nprint(\"Sample Output 3:\")\nprint(\"2.75\\n3.5\\n3.4\\n3.1\\n3.0\\n\")",
        "test": "assert solution(stdin) == '1.414214'",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 4804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    \n    for i in range(int(stdin)):\n        strl = list(stdin)\n        \n        strl[0] = strl[0].replace(\" \", \"\")\n        strl[-1] = strl[-1].replace(\" \", \"\")\n        \n        strl.pop(0)\n        strl.pop(-1)\n        \n        stlr = \",\".join(strl)\n        \n        if len(stlr) == 3:\n            print(stlr)\n            continue\n        \n        try:\n            s = int(stlr)\n            s -= 1\n            s += 5\n        except:\n            continue\n        \n        if s >= 0:\n            try:\n                strl[0] = strl[0].replace(\" \", \"\")\n                strl[-1] = strl[-1].replace(\" \", \"\")\n                strl.pop(0)\n                strl.pop(-1)\n                \n                stlr = \",\".join(strl)\n            except:\n                continue\n        \n        print(stlr)\n        \n        \n        ",
        "test": "assert solution(stdin) == \"50: 3, 5, 7, 8, 1, 10, 12, 17, 25\"",
        "num_ids": 1619,
        "indeed": false
    },
    {
        "number": 4805,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    word = words[0]\n    count = 1\n    \n    for word in words:\n        if word == word.upper():\n            count = count + 1\n            \n    if count >= len(words):\n        return \"no\"\n    else:\n        return \"yes\"\n",
        "test": "assert solution(\"IN THE RAIN AND THE SNOW\") == \"no\", \"solution failed\"",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 4806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        def count_move(move: str) -> int:\n            return 1 if move in {'R', 'B', 'L'} else 0\n\n        def solve_move(move: str, n: int) -> int:\n            if n == 0:\n                return 0\n            if n == 1:\n                return 1\n            move_map = {'R': 0, 'B': 1, 'L': 2}\n            return move_map[move] + solve_move(move, n - 2)\n\n        return ''.join(map(str, map(lambda x: count_move(x), stdin.split())))\n",
        "test": "assert solution(stdin), \"no solution\"",
        "num_ids": 3321,
        "indeed": false
    },
    {
        "number": 4807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    def fizzbuzz(n):\n        if n == 1 or n == 2:\n            return '1'\n        elif n == 3 or n == 4:\n            return '2'\n        else:\n            return fizzbuzz(n-1) + fizzbuzz(n-2) + 'FizzBuzz'\n    \n    res = fizzbuzz(int(stdin))\n    return res\n\n\"\"\"\ndef",
        "test": "assert solution([\"2\",\"4\",\"7\"]) == \"Fizz\"",
        "num_ids": 674,
        "indeed": false
    },
    {
        "number": 4808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, d_m = [int(x) for x in stdin.split()]\n    if n < 100:\n        return \"It had never snowed this early!\"\n    return \"It had never snowed this early!\"\n",
        "test": "assert solution(stdin) == 'It hadn\\'t snowed this early!', 'Expected solution(stdin) to be \"It hadn\\'t snowed this early!\". Got: \"it hadn\\'t snowed this early!\"'",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 4809,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    syllables = int(stdin[1])\n    players = [i for i in range(1, n+1)]\n    player = 1\n    counting_player = 0\n    counting_player_syllables = 0\n    counting_player_players = 0\n    # for a given player, count the number of syllables it has\n    # if there are two or more syllables:\n    # count the number of syllables it has\n    # if the player has the first half of the coconut:\n    # add 1 to the counting player_syllables\n    # if the player has the second half:\n    # count the number of syllables it has\n    # if the player has the third half:\n    # add 1 to the counting player_syllables\n    # if the player has the fourth half:\n    # count the number of syllables it has\n    # repeat until there are only two or more syllables\n    while counting_player_syllables < syllables:\n        if player in players:\n            counting_player_syllables += 1\n            counting_player += 1\n            counting_player_players += 1\n            if counting_player_syllables == 2:\n                if player == 1:\n                    player += 1\n                else:\n                    player -= 1\n            if counting_player_players == 2:\n                counting_player_players -= 1\n                counting_player -= 1\n        else:\n            counting_player_syllables += 1\n            counting_player += 1\n            counting_player_players += 1\n            if counting_player_syllables == 2:\n                if player == 1:\n                    player += 1\n                else:\n                    player -= 1\n            if counting_player_players == 2:\n                counting_player_players -= 1\n                counting_player -= 1\n    # if the player has the third half, count the number of syllables it has\n    # if the player has the fourth half:\n    # add 1 to the counting player_syllables\n    # if the player has the fifth half:\n    # count the number of syllables it has\n    # repeat until there are only two or more syllables\n    # if the player has the sixth half:\n    # add 1 to the counting player_syllables\n    # repeat until there are only two or more syllables\n    while counting_player_syllables < syllables:\n        if player in players:\n            counting_player_syllables += 1\n            counting_player += 1\n            counting_player_players += 1\n            if counting_player_syllables == 2:\n                if player == 1:\n                    player += 1\n                else:\n                    player -= 1\n            if counting_player_players == 2:\n                counting_player_players -= 1\n                counting_player -= 1\n        else:\n            counting_player_syllables += 1\n            counting_player += 1\n            counting_player_players += 1\n            if counting_player_syllables == 2:\n                if player == 1:\n                    player += 1\n                else:\n                    player -= 1\n            if counting_player_players == 2:\n                counting_player_players -= 1\n                counting_player -= 1\n    # if the player has the sixth half, count the number of syllables it has\n    # if the player has the seventh half:\n    # add 1 to the counting player_syllables\n    # if the player has the eighth half:\n    # add 1 to the counting player_syllables\n    # repeat until there are only two or more syllables\n    # repeat until there are only two or more syllables\n    # if the player has the ninth half:\n    # add 1 to the counting player_syllables\n    # repeat until there are only two or more syllables\n    while counting_player_syllables < syllables:\n        if player in players:\n            counting_player_syllables += 1\n            counting_player += 1\n            counting_player_players += 1\n            if counting_player_syllables == 2:\n                if player == 1:\n                    player += 1\n                else:\n                    player -= 1\n            if counting_player_players == 2:\n                counting_player_players -= 1\n                counting_player -= 1\n        else:\n            counting_player_syllables += 1\n            counting_player += 1\n            counting_player_players += 1\n            if counting_player_syllables == 2:\n                if player == 1:\n                    player += 1\n                else:\n                    player -= 1\n            if counting_player_players == 2:\n                counting_player_players -= 1\n                counting_player -= 1\n    return counting_player",
        "test": "assert solution(\"1212\"), \"Expected 13\"",
        "num_ids": 2018,
        "indeed": false
    },
    {
        "number": 4810,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 4811,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(int, stdin.split())))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert solution('5'), 8",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 4812,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    S, E, P = stdin.split()\n    S = S.lower()\n    E = E.split()\n    P = P.split()\n    for i in range(len(E)):\n        E[i] = E[i].lower()\n    for i in range(len(P)):\n        P[i] = P[i].lower()\n    if len(P) > len(E) or len(E) > len(S):\n        return \"NO\"\n    for j in range(len(E)):\n        if P[j] in P[j + 1:]:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert solution(stdin) == 'YES'",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 4813,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    string = list(stdin.split())\n    n = len(string)\n    d = [[0] * 26 for _ in range(n)]\n    word = string[0]\n    for i in range(1, n):\n        for j in range(26):\n            if string[i] in alphabet:\n                d[i][j] = d[i - 1][j] + 1\n    for i in range(n - 1, -1, -1):\n        for j in range(26):\n            if d[i][j] > 0:\n                for k in range(d[i][j]):\n                    word = word + alphabet[j]\n    return word\n\n-----Examples-----\nStandard input:\nHANGMAN\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nStandard output:\nWIN\n\"\"\"\n\ndef",
        "test": "assert solution(\"\") == \"LOSE\", \"Empty string does not match expected output\"",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 4814,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        name = stdin.strip().split('\\n')[0]\n        letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n        new_name = ''\n        for i in range(len(name)):\n            if i % 2 == 0:\n                new_name += letters[ord(name[i])-ord('A')]\n            else:\n                new_name += name[i].upper()\n        print(new_name)\n        \n",
        "test": "assert solution(stdin) == \"DECREASING\"",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 4815,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    names = stdin.splitlines()\n    names.sort()\n    result = ''\n    for name in names:\n        split_name = name.split()\n        p = int(split_name[1])\n        result = result + str(p) +'' + name + '\\n'\n    return result\n",
        "test": "assert solution(stdin) == 'Bob wins!'",
        "num_ids": 1047,
        "indeed": false
    },
    {
        "number": 4816,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        x, y = map(int, input().split())\n        if -999 <= x <= 999 and -999 <= y <= 999:\n            print(abs(x - y))",
        "test": "assert solution(stdin) == '2.0'",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 4817,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for line in stdin:\n        answer = max(answer, int(''.join(map(str, list(map(lambda x:int(x),line.split(' ')))))[::-1]))\n    return str(answer)\n",
        "test": "assert solution(\"2\") == \"2\"",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 4818,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(list(map(int, stdin.split()))))\n\"\"\"\ndef",
        "test": "assert solution(stdin) == \"4\"",
        "num_ids": 3571,
        "indeed": false
    },
    {
        "number": 4819,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    l = len(nums)\n    for i in range(l):\n        for j in range(i+1,l):\n            if nums[i] % nums[j] == 0:\n                nums[i], nums[j] = nums[j], nums[i]\n    return str(len(set(nums)))",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 4820,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N, b = map(int, stdin.split())\n    if b >= 1000:\n        return \"no\"\n    N *= 1000\n    return \"yes\"\n\ndef",
        "test": "assert solution(",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 4821,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'GRESKA'\n",
        "test": "assert solution(\"H02H10P11H02\") == \"GRESKA\"",
        "num_ids": 1018,
        "indeed": false
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    \n    for line in stdin.split(\"\\n\"):\n        line = line.split()\n        R, S, K = int(line[0]), int(line[1]), int(line[2])\n        \n        if S > R:\n            result += K\n        elif S < R:\n            result += K - 1\n        else:\n            result += S - R + 1\n        \n    return str(result)",
        "test": "assert solution(stdin) == '1'",
        "num_ids": 1614,
        "indeed": false
    },
    {
        "number": 4823,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(sorted(input(), key=lambda x: int(x)))\n\nInput:\nA\nB C D E D\n\nOutput:\nB\n\nSample Input:\nABCDEFG\nBCDEFG\nCDEFGA\nCDEFGHI\nDEFGAB\nFGABCDE\nGABCDEFG\nGBCDEFGA\nDEFGABCDE\nGBCDEFGHI\nDEFGABBCDE\nFGABCDEFG\nGABCDEFGAB\nDEFGABCDEF\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nABCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nFGABCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nFGABCDEFG\nABCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nFGABCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nFGABCDEFG\nABCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nFGABCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nFGABCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nDEFGABCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG\nGBCDEFGHIBCDEFG",
        "test": "assert solution(stdin) == '4'",
        "num_ids": 5249,
        "indeed": false
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n\nNote:\nInput for this problem will always be an integer.\nInput for this problem will always be a string.\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == \"5\"",
        "num_ids": 2177,
        "indeed": false
    },
    {
        "number": 4825,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Input: stdin = \"abc\"\n    # Output: \"abc\"\n    pass\n\"\"\"\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 4656,
        "indeed": false
    },
    {
        "number": 4826,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin)\n    if N % 2!= 0:\n        return 'Bob'\n    elif N % 2 == 0:\n        return 'Alice'\n    else:\n        return 'Alice'\n",
        "test": "assert solution(4) == \"Alice\"",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    str_in = stdin.split(\"\\n\")\n    string_to_check = \"\"\n    for line in str_in:\n        string_to_check += str(int(line))\n    if string_to_check.isdigit():\n        number = int(string_to_check)\n        if number < 10:\n            return string_to_check\n    \n",
        "test": "assert solution(input) == \"thirty\"",
        "num_ids": 1862,
        "indeed": false
    },
    {
        "number": 4828,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '0'\n    \n    prv = [i for i in range(26)]\n    for i in range(1, n):\n        for j in range(26):\n            if prv[j]!= 0:\n                prv[j] += 1\n                for k in range(j+1, 26):\n                    if prv[k] == 0:\n                        prv[k] = i\n                        break\n    \n    prv.sort()\n    \n    return str(prv[0])\n",
        "test": "assert solution(\"e.f.g.h.i\") == 5, \"Expected 5\"",
        "num_ids": 1194,
        "indeed": false
    },
    {
        "number": 4829,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n    m = int(s[0])\n    n = int(s[1])\n    if n % 2 == 1:\n        answer = (n//2) + 1\n    else:\n        answer = n//2 + 1\n    if m % 2 == 0:\n        answer = answer + 2\n    if answer >= m:\n        answer = answer + 1\n    if answer >= n:\n        answer = answer + 2\n    if answer >= m:\n        answer = answer + 1\n    return str(answer)",
        "test": "assert solution(['10', '0', '1', '2', '4']) == 'Even 6'",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 4830,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(str, stdin.split()))\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    a.sort()\n    solution_count = 0\n    for i in range(len(a)):\n        solution_count += 1 if a[i] <= 1000 else 0\n    return str(solution_count)\n\nsolution(input())\n",
        "test": "assert solution(stdin) == 12",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 4831,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([''.join(['.'*i+'*' for i in range(5)])]+[''.join(['*'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(3)])]+['.'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(4)])]+['*'])+''.join(['.','.'*i+'.' for i in range(5)])]+['.'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(4)])]+['.'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(4)])]+['.'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(4)])]+['*'])])+''.join(['.','.'*i+'.' for i in range(5)])])+'*'])+''.join([''.join(['.','.'*i+'.' for i in range(4)])]+['.'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(4)])]+['.'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(4)])]+['*'])])]+['.'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(4)])]+['.'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(4)])]+['.'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(4)])]+['*'])])])+'*'])+''.join([''.join(['.','.'*i+'.' for i in range(4)])]+['.'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(4)])]+['.'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(4)])]+['*'])])]+['.'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(4)])]+['.'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(4)])]+['*'])])])+'.']+''.join([''.join(['.','.'*i+'.' for i in range(4)])]+['.'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(4)])]+['.'+''.join(['*'+''.join(['.','.'*i+'.' for i in range(4)])]+['*'])])])])",
        "test": "assert solution(stdin) == \"Peter Pan frames\"",
        "num_ids": 3100,
        "indeed": false
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('\\n', '')\n\nSample Input 3:\n14\nSample Output 3:\n4575.0506317\n\nSample Input 4:\n6\nSample Output 4:\n8.873975\n98.174225\n\nSample Input 5:\n90\nSample Output 5:\n89.901378\n\n-----Solution-----\n\"\"\"\ndef",
        "test": "assert solution(stdin) == '3.141593'",
        "num_ids": 1421,
        "indeed": false
    },
    {
        "number": 4833,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip().split()[0])\n    incomes = [int(i) for i in stdin.strip().split()]\n    res = 0\n    for i in incomes:\n        res += (i-1) * k\n    return str(res)",
        "test": "assert solution(\"2\") == \"2\"",
        "num_ids": 2567,
        "indeed": false
    },
    {
        "number": 4834,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, t, d = map(int, stdin.split())\n    data = [map(int, input().split()) for _ in range(n)]\n    answer = []\n    cur_time = 0\n    for i, (x, y) in enumerate(data):\n        if i % 2 == 1:\n            cur_time = max(cur_time, x - d)\n        else:\n            cur_time = min(cur_time, x - d)\n        answer.append(str(cur_time))\n    return '\\n'.join(answer[::-1])\n\nSample Input 3:\n4\n10 1 2 2 3 4\nSample Output 3:\n5\n\nSample Input 4:\n3\n1 2 3 2 4\nSample Output 4:\n4\n\nExplanation:\nHere we have two teams that the time needed is from the first one to the second. Each team needs time of $4$ units to understand and implement an algorithm.\nTime needed: 2 minutes\n\nSample Input 5:\n1\n5\nSample Output 5:\n1\n\nExplanation:\nThere is no available time to do all of the interviews.\n\n--------------------\nSample Input 6:\n4\n6 2 3 4 1 1 4\nSample Output 6:\n8\n\nSample Input 7:\n1\n1 2 4 2 3 4\nSample Output 7:\n1\n\n--------------------\n\"\"\"\n\n\ndef",
        "test": "assert solution(stdin) == \"8\"",
        "num_ids": 1117,
        "indeed": false
    },
    {
        "number": 4835,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_num = n\n    for i in range(n):\n        for j in range(i+1, n):\n            if stdin[i] == 'S':\n                if stdin[j] == 'U':\n                    min_num = min(min_num, n-j)\n            elif stdin[j] == 'D':\n                if stdin[i] == 'D':\n                    min_num = min(min_num, j-i)\n            elif stdin[i] == 'L':\n                if stdin[j] == 'R':\n                    min_num = min(min_num, j-i)\n            elif stdin[j] == 'R':\n                if stdin[i] == 'L':\n                    min_num = min(min_num, i-j)\n    if min_num == n:\n        return 'POSSIBLE'\n    else:\n        return 'NOT POSSIBLE'\n",
        "test": "assert solution(stdin) == 7",
        "num_ids": 1523,
        "indeed": false
    },
    {
        "number": 4836,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    n, k = map(int, stdin.split())\n    weight = list(map(int, stdin.split()))\n    i = 0\n    j = 1\n    maxweight = 0\n    while j <= n:\n        for i in range(j, n):\n            j += 1\n            maxweight = max(maxweight, weight[i])\n        i += 1\n        j = i + 1\n    return str(maxweight)\n",
        "test": "assert solution(2,1) == 1",
        "num_ids": 2204,
        "indeed": false
    },
    {
        "number": 4837,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    r = list(stdin.splitlines())\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0)\n    r.pop(0",
        "test": "assert solution(stdin) == '15'",
        "num_ids": 3563,
        "indeed": false
    },
    {
        "number": 4838,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # Time - 2\n    t1 = time.time()\n    t2 = t1\n    \n    # Time - 1\n    t1 = time.time()\n    \n    # Time - 0\n    t2 = t1\n    \n    times = list(map(int, stdin.split()))\n    \n    # Time - 4\n    t1 = time.time()\n    \n    # Time - 2\n    t2 = t1\n    \n    # Time - 1\n    t1 = time.time()\n    \n    # Time - 0\n    t2 = t1\n    \n    t_sum = 0\n    \n    for i in range(n):\n        t_sum += times[i]\n        \n    if t_sum % 1000!= 0:\n        print('still running')\n    else:\n        print(t_sum)\n    \n    return'still running'\n",
        "test": "assert solution(\"1 101\") == \"still running\"",
        "num_ids": 2287,
        "indeed": false
    },
    {
        "number": 4839,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split(\" \")]\n    n, k = data[0], data[1]\n    data = [list(map(int, x.split())) for x in stdin.split(\" \")]\n    heights = [x[1] for x in data]\n    total_height = sum(heights)\n    balloons = [i for i in range(n)]\n    result = []\n    while True:\n        index = 0\n        for i in range(n):\n            if heights[i] <= k:\n                index += 1\n                balloons[i] = index\n        if total_height - balloons[index] >= 0:\n            total_height -= balloons[index]\n            result.append(heights[index] / total_height)\n        else:\n            break\n    return \"\".join(map(str, result))",
        "test": "assert solution(stdin) == '0.2'",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 4840,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    dice_1, dice_2, dice_3 = map(int, stdin.split())\n    s = max(dice_1, dice_2, dice_3)\n    n = max(dice_1 + dice_2 + dice_3 - s, dice_1, dice_2, dice_3)\n    if n % 2 == 1:\n        return 'Tie'\n    return 'Emma'",
        "test": "assert solution(\"4 1 10 2\") == \"Tie\"",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 4841,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, n_list = map(int, stdin.split())\n    max_n_list = list(map(int, stdin.split()))\n    print(max(max_n_list))\n    for i in range(n):\n        for j in range(i+1, n):\n            if max_n_list[i] > max_n_list[j]:\n                max_n_list[i], max_n_list[j] = max_n_list[j], max_n_list[i]\n    if max(max_n_list) > 0:\n        print(\"makes sense\")\n    else:\n        print(\"something is fishy\")\n",
        "test": "assert solution(stdin) == \"makes sense\"",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 4842,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    diff = [0 for _ in range(n+1)]\n    for i in range(1, n+1):\n        val = int(stdin.strip())\n        diff[i] = val - diff[i-1]\n    d = 0\n    v = 0\n    for i in range(n):\n        d += diff[i]\n        v += diff[i]*i\n    return f'{d:.1f} {v:.1f}'",
        "test": "assert solution(input) == \"2 121\"",
        "num_ids": 2385,
        "indeed": false
    },
    {
        "number": 4843,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    board = [list(map(int,input().split())) for _ in range(N)]\n    queens = [list(map(int,input().split())) for _ in range(N)]\n    queen_x, queen_y = 0,0\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == 0:\n                queen_x, queen_y = i, j\n                break\n        for k in range(N):\n            if board[k][j] == 0:\n                queen_x, queen_y = k, j\n                break\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == 0:\n                queen_x, queen_y = i, j\n                break\n        if board[queen_x][queen_y] == 1:\n            board[queen_x][queen_y] = 0\n            for r in range(N):\n                if board[r][j] == 1:\n                    board[r][j] = 0\n                    for c in range(N):\n                        if board[c][r] == 1:\n                            board[c][r] = 0\n                            board[r][c] = 0\n                            queen_x, queen_y = c, r\n                            break\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == 0:\n                board[i][j] = 1\n                for r in range(N):\n                    if board[r][j] == 1:\n                        board[r][j] = 0\n                        queen_x, queen_y = r, j\n                        break\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == 0:\n                board[i][j] = 1\n                for r in range(N):\n                    if board[r][j] == 1:\n                        board[r][j] = 0\n                        queen_x, queen_y = r, j\n                        break\n    if board[queen_x][queen_y] == 0:\n        board[queen_x][queen_y] = 1\n    else:\n        board[queen_x][queen_y] = 0\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == 1:\n                board[i][j] = 0\n                queen_x, queen_y = i, j\n                break\n    solutions = 0\n    for r in range(N):\n        for c in range(N):\n            if board[r][c] == 0:\n                board[r][c] = 1\n                queen_x, queen_y = r, c\n                break\n        for k in range(N):\n            if board[k][c] == 0:\n                board[k][c] = 1\n                queen_x, queen_y = k, c\n                break\n        for l in range(N):\n            if board[k][l] == 0:\n                board[k][l] = 1\n                queen_x, queen_y = k, l\n                break\n        for m in range(N):\n            if board[m][l] == 0:\n                board[m][l] = 1\n                queen_x, queen_y = m, l\n                break\n        for n in range(N):\n            if board[n][m] == 0:\n                board[n][m] = 1\n                queen_x, queen_y = n, m\n                break\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == 1:\n                board[i][j] = 0\n                queen_x, queen_y = i, j\n                break\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == 1:\n                board[i][j] = 0\n                queen_x, queen_y = i, j\n                break\n    if board[queen_x][queen_y] == 0:\n        board[queen_x][queen_y] = 1\n    else:\n        board[queen_x][queen_y] = 0\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == 1:\n                board[i][j] = 0\n                queen_x, queen_y = i, j\n                break\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == 0:\n                board[i][j] = 1\n                queen_x, queen_y = i, j\n                break\n    print('CORRECT' if solutions == N*N else 'INCORRECT')",
        "test": "assert solution(",
        "num_ids": 2044,
        "indeed": false
    },
    {
        "number": 4844,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    m = int(stdin[-1])\n    \n    def check(m, n):\n        for i in range(n):\n            for j in range(n):\n                if m[i][j] == '0':\n                    return False\n        \n        return True\n    \n    def main():\n        m = [[0 for _ in range(n)] for _ in range(n)]\n        \n        for _ in range(m[0]):\n            m[0][0], m[0][1], m[0][2], m[0][3] = map(int, stdin.split())\n        \n        for _ in range(1, n):\n            for _ in range(m[0][_]):\n                m[0][_], m[0][_ + 1] = map(int, stdin.split())\n        \n        for _ in range(1, n):\n            for _ in range(m[_][0], m[_][-1]):\n                m[_][_], m[_ + 1][_] = map(int, stdin.split())\n        \n        for _ in range(1, n):\n            for _ in range(m[_][_], m[_][-1]):\n                m[_][_], m[_ + 1][_] = map(int, stdin.split())\n        \n        for _ in range(1, n):\n            for _ in range(m[_][_], m[_][-1]):\n                m[_][_], m[_ + 1][_] = map(int, stdin.split())\n        \n        for _ in range(1, n):\n            for _ in range(m[_][_], m[_][-1]):\n                m[_][_], m[_ + 1][_] = map(int, stdin.split())\n        \n        for _ in range(1, n):\n            for _ in range(m[_][_], m[_][-1]):\n                m[_][_], m[_ + 1][_] = map(int, stdin.split())\n        \n        for _ in range(n):\n            for _ in range(n):\n                if check(m, _):\n                    print(\"YES\")\n                    return\n        \n        print(\"NO\")\n    \n    main()\n'''\n\nimport math\n\ndef",
        "test": "assert solution(stdin) == \"1 1 1 1 1 1 1 1 1 11\"",
        "num_ids": 3476,
        "indeed": false
    },
    {
        "number": 4845,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    days = []\n    months = []\n    for i in stdin:\n        day = int(i)\n        day = day - 1 if int(i) > 0 else day\n        if day < 1:\n            days.append(\"Sunday\")\n        elif day > 0:\n            months.append(\"Monday\")\n        else:\n            days.append(\"Monday\")\n            months.append(\"Tuesday\")\n            months.append(\"Wednesday\")\n            months.append(\"Thursday\")\n            months.append(\"Friday\")\n            months.append(\"Saturday\")\n    return''.join(days)\n",
        "test": "assert solution([\"1\", \"1\"]), \"1 is not a valid input.\"",
        "num_ids": 2510,
        "indeed": false
    },
    {
        "number": 4846,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    while True:\n        d,x=map(int,stdin.split())\n        if d>=x:\n            break\n    if d+x>=10000:\n        return str(d+x)\n    else:\n        return str(d+x)\n        \n        \n        \n        \n        \n        ",
        "test": "assert solution(\"10\") == \"0\"",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    N,*apple_trees=map(int,stdin.split())\n    #the built in function list.sort() sorts the array in ascending order.\n    apple_trees.sort()\n    length=len(apple_trees)\n    if apple_trees[0]>apple_trees[-1]:\n        #the last apple tree is larger than the first one\n        #so we need to change that one\n        apple_trees[0],apple_trees[-1]=apple_trees[-1],apple_trees[0]\n        #we modify the first apple tree\n        #so we need to change the last one\n        apple_trees[-1],apple_trees[-2]=apple_trees[-2],apple_trees[-1]\n        #we add the first apple tree\n        #to the last apple tree\n        #we also add the last apple tree to the second list\n    #the point of this is that if apple_trees[i]>apple_trees[i+1]\n    #then the point of this is that apple_trees[i] is a part of the following list\n    for i in range(N-2):\n        #now we can build a new tree\n        #first we need to find the list of apple trees\n        #that are also part of the same tree\n        if apple_trees[i]>apple_trees[i+1]:\n            #we don't need to start with the last apple tree\n            #since it's already been part of it\n            break\n        else:\n            apple_trees[i+1]=apple_trees[i]\n            apple_trees[i]=apple_trees[i+1]\n            #now we can continue with the next apple_trees\n    #we add the last apple tree to the end of the first list\n    apple_trees.append(apple_trees[-1])\n    #the last apple tree is added\n    #so we need to change the last apple tree\n    #to the next one\n    apple_trees[-1]=apple_trees[-2]\n    #we add the last apple tree to the second list\n    #to the next one\n    apple_trees[-2]=apple_trees[-3]\n    #we add the last apple tree to the third list\n    apple_trees[-3]=apple_trees[-4]\n    #now we add the last apple tree to the final list\n    apple_trees[-4]=apple_trees[-5]\n    #we add the last apple tree to the fourth list\n    apple_trees[-5]=apple_trees[-6]\n    #we add the last apple tree to the fifth list\n    apple_trees[-6]=apple_trees[-7]\n    #we add the last apple tree to the sixth list\n    apple_trees[-7]=apple_trees[-8]\n    #we add the last apple tree to the seventh list\n    apple_trees[-8]=apple_trees[-9]\n    #we add the last apple tree to the eighth list\n    apple_trees[-9]=apple_trees[-10]\n    #now we add the last apple tree to the ninth list\n    apple_trees[-10]=apple_trees[-11]\n    #we add the last apple tree to the tenth list\n    apple_trees[-11]=apple_trees[-12]\n    #we add the last apple tree to the eleventh list\n    apple_trees[-12]=apple_trees[-13]\n    #we add the last apple tree to the twelfth list\n    apple_trees[-13]=apple_trees[-14]\n    #we add the last apple tree to the thirteenth list\n    apple_trees[-14]=apple_trees[-15]\n    #now we add the last apple tree to the fourteenth list\n    apple_trees[-15]=apple_trees[-16]\n    #we add the last apple tree to the seventeenth list\n    apple_trees[-16]=apple_trees[-17]\n    #we add the last apple tree to the eighteenth list\n    apple_trees[-17]=apple_trees[-18]\n    #we add the last apple tree to the nineteenth list\n    apple_trees[-18]=apple_trees[-19]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-19]=apple_trees[-20]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-20]=apple_trees[-21]\n    #now we add the last apple tree to the twentieth list\n    apple_trees[-21]=apple_trees[-22]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-22]=apple_trees[-23]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-23]=apple_trees[-24]\n    #now we add the last apple tree to the twentieth list\n    apple_trees[-24]=apple_trees[-25]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-25]=apple_trees[-26]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-26]=apple_trees[-27]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-27]=apple_trees[-28]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-28]=apple_trees[-29]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-29]=apple_trees[-30]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-30]=apple_trees[-31]\n    #now we add the last apple tree to the twentieth list\n    apple_trees[-31]=apple_trees[-32]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-32]=apple_trees[-33]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-33]=apple_trees[-34]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-34]=apple_trees[-35]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-35]=apple_trees[-36]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-36]=apple_trees[-37]\n    #we add the last apple tree to the twentieth list\n    apple_trees[-37]=apple_trees[-",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 4352,
        "indeed": false
    },
    {
        "number": 4848,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    return str(n*m)\n\nSample Explanation:\n3\nSample Explanation 2:\n7\n\nExplanation 1:\nSample Explanation 2:\n10\n\nSample Explanation 3:\n30\n\nInput 1:\n3\nInput 2:\n30\nOutput 1:\n2\n\nInput 1:\n2\nInput 2:\n10\nOutput 1:\n1\n\nInput 1:\n4\nInput 2:\n8\nOutput 1:\n2\n\nInput 1:\n5\nInput 2:\n6\nOutput 1:\n1\n\nInput 1:\n1\nInput 2:\n3\nOutput 1:\n1\n\nTestcases:\n3\n6\n6\n3\n4\nExplanation 1:\n3\nSample Input:\n10\nSample Output:\n1\nExplanation 1:\nSample Input:\n1\nSample Output:\n1\n\nExplanation 2:\n7\n\nExplanation 3:\n5\n\nExplanation 4:\n5\n\nExplanation 5:\n6\n\nExplanation 6:\n6\n\nExplanation 7:\n8\n\nExplanation 8:\n6\n\nExplanation 9:\n10\n\nExplanation 10:\n1\n\n\"\"\"\n\ndef",
        "test": "assert solution(",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 4849,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    return sorted(map(str, data))[0:5]\n\"\"\"\nfrom collections import Counter\n\n\ndef",
        "test": "assert solution('G-MI6') == '1\\n'",
        "num_ids": 1123,
        "indeed": false
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # remove spaces and split\n    stdin = stdin.strip().split('\\n')\n    triangle = [[int(x) for x in list(item)] for item in stdin]\n    # strip off extra zeros\n    for i in range(len(triangle)):\n        for j in range(len(triangle[i]) - 1):\n            if triangle[i][j] == 0:\n                triangle[i][j] = triangle[i][j + 1]\n            if triangle[i][j + 1] == 0:\n                triangle[i][j + 1] = triangle[i][j]\n    # get the array\n    triangle_arr = []\n    for i in range(len(triangle)):\n        triangle_arr.append(triangle[i])\n    # sort them\n    triangle_arr.sort()\n    # get the length\n    for i in range(len(triangle)):\n        triangle_arr[i][2] = triangle[i][2] + triangle_arr[i - 1][2]\n    # check that it is at least 3\n    if triangle_arr[0][2] >= 3:\n        return triangle_arr[0][2]\n    # loop through the sorted array\n    for i in range(1, len(triangle_arr)):\n        if triangle_arr[i - 1][1] >= triangle_arr[i][1] or \\\n            triangle_arr[i - 1][0] >= triangle_arr[i][0] or \\\n                triangle_arr[i - 1][2] >= triangle_arr[i][2]:\n            # if it's not, attempt to extend it\n            extend_val = min(triangle_arr[i - 1][2], triangle_arr[i][2]) + triangle_arr[i][2]\n            triangle_arr[i][2] = extend_val\n            # and fill it\n            for j in range(len(triangle_arr[i]) - 1):\n                triangle_arr[i][j] = triangle_arr[i][j + 1]\n    # return min\n    return min(triangle_arr[-1][2], triangle_arr[-1][2]) + triangle_arr[-1][2]\n",
        "test": "assert solution(stdin) == \"4\"",
        "num_ids": 2849,
        "indeed": false
    },
    {
        "number": 4851,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(min(int(stdin), 1000000000))",
        "test": "assert solution(1) == '1'",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 4852,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    list = []\n    for i in stdin:\n        list.append(i)\n    for i in list:\n        if i == \"+\":\n            answer += 1\n        elif i == \".\":\n            answer += 1\n            if answer > 15:\n                return str(answer)\n        else:\n            answer += 1\n    return str(answer)\n\n-----Constraints-----\n1 <= len(stdin) <= 100\n1 <= stdin[i] <= 10^18\nstdin is guaranteed to have at least one plus symbol.\n\"\"\"\nclass Solution:\n    def countDistinct(self, str: str) -> int:\n        \n        # base case\n        if str == \"\":\n            return 0\n        \n        # initializing hashmap and ans \n        hash_map = {}\n        ans = 0\n        \n        # iterate over each char\n        for i in str:\n            # if char is plus\n            if i == \"+\":\n                # if answer at max value is already stored, increase answer\n                if ans in hash_map:\n                    ans += 1\n                # if it is not, update hashmap and ans\n                else:\n                    hash_map[ans] = 1\n                    ans += 1\n                    \n            # if char is not plus\n            else:\n                # if not, count value and update ans\n                ans += 1\n        \n        # return answer\n        return ans\n        \n    \n    \n    \n    ",
        "test": "assert solution([\"1+2+3+4+5+6+7+8+9+\"]) == 31",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a_1, a_0 = map(int, input().split())\n    return f\"{int(a_1)} {a_0}\"\n\ndef",
        "test": "assert solution(stdin) == '5 5 2'",
        "num_ids": 2398,
        "indeed": false
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    x,y,z=map(int,stdin.split())\n    sequence=[]\n    for i in range(x,z+1):\n        sequence.append(i)\n    sequence.sort()\n    for i in sequence:\n        print(i)\n    return \" \".join(str(i) for i in sequence)",
        "test": "assert solution(input) == '1 2 3 3 3 2 2 1 1'",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 4855,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n\n'''\ndef",
        "test": "assert solution(stdin) == \"875\"",
        "num_ids": 556,
        "indeed": false
    },
    {
        "number": 4856,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    numbers = []\n    for i in stdin.split(' '):\n        numbers.append(int(i))\n    numbers.sort()\n    numbers = list(map(str, numbers))\n    numbers = ''.join(numbers)\n    answer = numbers[::-1]\n    for i in range(len(answer) - 1, -1, -1):\n        if answer[i]!= '0':\n            return answer[i]\n    return '0'\n",
        "test": "assert solution('B') == 'B', 'Should be B'",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 4857,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return 'contest'\n    if a > b:\n        return 'contest'\n    return 'programming'\n\nSample Input 3:\n5\n3 2 1 2\nSample Output 3:\nprogramming\n\nSample Input 4:\n4\n1 2 3 4\nSample Output 4:\nprogramming\n\"\"\"",
        "test": "assert solution(\"0 1\") == \"contest\"",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 4858,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin.strip().split('\\n'))\n",
        "test": "assert solution(\"X \") == \"X\"",
        "num_ids": 2012,
        "indeed": false
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Hello World!\\n\")\n    n, l, d, b = map(int, stdin.split())\n    if n == l == d == b == 0:\n        return \"I don't have enough legs for this problem!\"\n    if n == l == d == b == 1:\n        return \"The number of legs can't be divisible by exactly one of the animals!\"\n    if n == l == d == b == 2:\n        return \"The total number of legs is not divisible by exactly two animals!\"\n    if n == l == d == b == 3:\n        return \"The total number of legs is not divisible by exactly three animals!\"\n    if n == l == d == b == 4:\n        return \"The number of legs is too high for this problem!\"\n    if n == l == d == b == 5:\n        return \"The total number of legs is too high for this problem!\"\n    if n == l == d == b == 6:\n        return \"The number of legs is too high for this problem!\"\n    if n == l == d == b == 7:\n        return \"The total number of legs is too high for this problem!\"\n    else:\n        return \"The answer is impossible!\"\n\"\"\"\n\ndef",
        "test": "assert solution(inp) == outp",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 4860,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    numbers = sorted(list(map(int, stdin.split()[1:])))\n    return str(numbers[N-1])\n",
        "test": "assert solution(\"4 3 2 1 7\") == \"7\"",
        "num_ids": 2342,
        "indeed": false
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = map(float, stdin.split())\n    n, p, s, v = int(n), int(p), int(s), int(v)\n    if (n < 1 or p < 1 or p > 1000000 or s < 1 or s > 1000000 or v < 0 or v > 1000000):\n        return \"Error\"\n    else:\n        return f\"{n/(10**6 * s)} {v/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {n/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {n/(10**6 * s)} {s/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {s/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {v/(10**6 * s)} {n/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(10**6 * s)} {p/(10**6 * s)} {v/(10**6 * s)} {s/(",
        "test": "assert solution(\"0.9905\") == \"1.0995\"",
        "num_ids": 3077,
        "indeed": false
    },
    {
        "number": 4862,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    relations = []\n    for i in range(N):\n        char = stdin[i]\n        if char == \" \":\n            continue\n        if char in [\"A\", \"C\", \"G\", \"T\"]:\n            relations.append(char)\n    return len(set(relations))\n\nprint(solution(\"1\"))\nprint(solution(\"3\"))\nprint(solution(\"2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 0 3 4\"))\n",
        "test": "assert solution(12) == 1",
        "num_ids": 904,
        "indeed": false
    },
    {
        "number": 4863,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    lines = stdin.split()\n    for i in range(len(lines)):\n        if lines[i][0] == \"A\":\n            answer = 1\n        elif lines[i][0] == \"B\":\n            answer = 2\n        elif lines[i][0] == \"C\":\n            answer = 3\n        else:\n            answer = 4\n        answer += int(lines[i][1:])\n    return str(answer)\n\nSample Output:\n2\nExplanation of the first sample input:\n4\nA\nB\nA\nB\nA\nSample Output:\n4\nExplanation of the first sample input:\n4\nA\nA\nA\nB\nA\nA\nSample Output:\n2\nExplanation of the first sample input:\n4\nA\nB\nA\nB\nSample Output:\n2\nExplanation of the first sample input:\n4\nB\nA\nA\nSample Output:\n2\nExplanation of the first sample input:\n4\nA\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nA\nB\nA\nB\nSample Output:\n0\nExplanation of the first sample input:\n4\nB\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nB\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nB\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nB\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nB\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA\nA\nSample Output:\n0\nExplanation of the first sample input:\n4\nC\nA",
        "test": "assert solution(\"4\") == \"0\"",
        "num_ids": 2678,
        "indeed": false
    },
    {
        "number": 4864,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split()]\n    output = []\n    for _ in range(rows):\n        output.append(stdin.replace('.', ',').replace('x', 'x'))\n    for idx in range(rows):\n        new_row = []\n        for jdx in range(cols):\n            new_row.append(output[idx][jdx] if idx < rows else 0)\n        output[idx] = new_row\n    return ','.join(map(str, output))\n\nSample Input:\n1 3 1 2\n.x.\nx.x\n.x.\nSample Output:\n.x.\n.x.x\n.x.x\n\nSample Input:\n1 3 1 2\n...\n...\n...\nSample Output:\n...\n...\n\"\"\"\n\nimport collections\n\ndef",
        "test": "assert solution(\"..xx..\") == \"X.X.X\"",
        "num_ids": 4279,
        "indeed": false
    },
    {
        "number": 4865,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, D, H, M = map(int, stdin.split())\n    answer = ''\n    for _ in range(N):\n        tmp = str(input())\n        if 'F' in tmp:\n            D -= 1\n        if 'B' in tmp:\n            D += 1\n        if 'H' in tmp:\n            H += 1\n        if 'M' in tmp:\n            H -= 1\n        if D == 0:\n            D = 24\n            M += 1\n        answer += str(D) + ':' + str(H) + ':' + str(M)\n    return answer",
        "test": "assert solution(stdin) == \"1 14 20 15 20 19 30\"",
        "num_ids": 2586,
        "indeed": false
    },
    {
        "number": 4866,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    str_input = stdin.split()\n    m, d, y = str_input[0], str_input[1], str_input[2]\n    day = '31'\n    if y in ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']:\n        day = y\n    elif y == 'FEB':\n        day = '01'\n    elif y == 'APR':\n        day = '02'\n    elif y == 'MAY':\n        day = '03'\n    elif y == 'JUN':\n        day = '04'\n    elif y == 'JUL':\n        day = '05'\n    elif y == 'AUG':\n        day = '06'\n    elif y == 'SEP':\n        day = '07'\n    elif y == 'OCT':\n        day = '08'\n    elif y == 'NOV':\n        day = '09'\n    elif y == 'DEC':\n        day = '10'\n    else:\n        return 'nope'\n    return day + '_' + str(int(m) + int(d) - int(day) + int(day) * 31)\n",
        "test": "assert solution(\"Feb 9 10\") == \"nope\"",
        "num_ids": 2064,
        "indeed": false
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n    \n    \n    \n    \n",
        "test": "assert solution(\"####.###.###\") == \"..#...##...#\"",
        "num_ids": 4245,
        "indeed": false
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(sorted(stdin))\n\"\"\"\ndef",
        "test": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"",
        "num_ids": 4111,
        "indeed": false
    },
    {
        "number": 4869,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(float, stdin.split()))\n    A = abs(A)\n    if A > 100:\n        return 'Need more materials!'\n    if A < 100:\n        return 'Need more materials!'\n    if A == 0:\n        return 'Need more materials!'\n    return 'Diablo is happy!'\n",
        "test": "assert solution(",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 4870,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    def get_up(s, g, f):\n        l = 0\n        m = 10**9 + 7\n        for i in range(f-l, f+1):\n            if i > 0 and i < m:\n                if s >= i:\n                    if i - s == f-g:\n                        return str(l+1)\n                    else:\n                        l += 1\n                        if i - s == f-g:\n                            return str(l+1)\n                        else:\n                            l += 1\n                else:\n                    if i - s == f-g:\n                        return str(l+1)\n                    else:\n                        l += 1\n        return str(l+1)\n\n    def get_down(s, g, f):\n        l = 0\n        m = 10**9 + 7\n        for i in range(f+1, g+1):\n            if i < 10:\n                if i >= s:\n                    if i - s == f-g:\n                        return str(l+1)\n                    else:\n                        l += 1\n                        if i - s == f-g:\n                            return str(l+1)\n                        else:\n                            l += 1\n                else:\n                    if i - s == f-g:\n                        return str(l+1)\n                    else:\n                        l += 1\n        return str(l+1)\n    \n    s, g, u, d = [int(x) for x in stdin.split()]\n    \n    answer = 0\n    while s < g and s <= u:\n        if get_up(s, g, f) < get_up(u, d, g):\n            answer += 1\n        s += 1\n    \n    if answer < 2:\n        answer = \"use the stairs\"\n    else:\n        answer = \"use the stairs\"\n        if u < d:\n            answer += \" to $u$\"\n        else:\n            answer += \" to $d$\"\n    return answer",
        "test": "assert solution(\"5\\n0 2\\n3\") == \"use the stairs\"",
        "num_ids": 1596,
        "indeed": false
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    s = [int(x) for x in stdin.strip().split()]\n    \n    g = 0\n    for i in range(n):\n        g = g + s[i]*(4**i)\n    \n    print(round(g/n, 2))\n    return str(round(g/n, 2))\n\n-----Notes-----\n\n\"\"\"",
        "test": "assert solution(inp) == '12.5'",
        "num_ids": 2297,
        "indeed": false
    },
    {
        "number": 4872,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d1, d2, d3 = list(map(int, stdin.strip().split()))\n    d1 = min(d1, d2, d3)\n    d2 = d1 + d3\n    d3 = d2 + d2 + d1\n    return str(d3)\n\nSample Output:\n4\n\nExplanation\nThe tricky part is to pass all the dirty pushes to the next week when the dirtiness is at least $20.\n\n1. Cleanup Phase:\n    1.1. Get the current date to compare it to the end of the previous year.\n    1.2. Get the current date to compare it to the end of the current year.\n    1.3. If the end date is in the past, then get the current date to compare it to the end of the year.\n    1.4. If the current date is in the past, then get the current date to compare it to the year.\n    1.5. If the end date is in the current year, then get the current date to compare it to the end of the year.\n    1.6. If the end date is in the future, then get the current date to compare it to the end of the year.\n    1.7. If the end date is in the future, then get the current date to compare it to the year.\n\n2. Cleanup Phase:\n    1.1. Get the current date to compare it to the current day.\n    1.2. If the day is in the past, then get the current date to compare it to the current day.\n    1.3. If the day is in the past, then get the current date to compare it to the end of the year.\n    1.4. If the day is in the past, then get the current date to compare it to the end of the year.\n    1.5. If the day is in the current year, then get the current date to compare it to the current day.\n    1.6. If the day is in the current year, then get the current date to compare it to the end of the year.\n    1.7. If the day is in the future, then get the current date to compare it to the end of the year.\n\n3. Cleanup Phase:\n    1.1. Get the current date to compare it to the end of the previous year.\n    1.2. Get the current date to compare it to the current day.\n    1.3. If the day is in the past, then get the current date to compare it to the end of the year.\n    1.4. If the day is in the past, then get the current date to compare it to the current day.\n    1.5. If the day is in the past, then get the current date to compare it to the end of the year.\n    1.6. If the day is in the current year, then get the current date to compare it to the end of the year.\n    1.7. If the day is in the current year, then get the current date to compare it to the end of the year.\n\nSample Input:\n5\n1 45 65 84 346\nSample Output:\n4\ndef",
        "test": "assert solution(stdin) == '4'",
        "num_ids": 1286,
        "indeed": false
    },
    {
        "number": 4873,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    W, H = map(int, stdin.split())\n    maps = [[c for c in line.strip()] for line in stdin.split(\"\\n\")]\n    #maps = [[1 for i in range(W)] for j in range(H)]\n    trap_count = 0\n    for i in range(W):\n        for j in range(H):\n            if maps[i][j] == 'P':\n                trap_count += 1\n    #print(trap_count)\n    return str(trap_count)\n\nprint(solution(\"1\\nP\\n.\\nG\\nT\\n#\\n#\\n\"))\n",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 2466,
        "indeed": false
    },
    {
        "number": 4874,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.strip())\n\n    for i in range(T):\n        n, m = [int(s) for s in stdin.strip().split()]\n        grid = []\n        for i in range(n):\n            grid.append(stdin.strip()[i*m:(i+1)*m])\n\n        score = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '_':\n                    score += 1\n                    grid[i][j] = '_'\n                else:\n                    grid[i][j] = grid[i][j]\n        score = sum(grid)\n        if score == 0:\n            print('Dangerous')\n        else:\n            print(score)\n\n    return 'Dangerous'\n\nT = int(input())\nfor t in range(T):\n    stdin = input()\n    solution(stdin)\n",
        "test": "assert solution(stdin = stdin) == stdin",
        "num_ids": 2929,
        "indeed": false
    },
    {
        "number": 4875,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    ans = \"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    word = \"\"\n    for word in stdin.split():\n        word = word.lower()\n        if word[0] in vowels:\n            word += \"ay\"\n        else:\n            word += \"iay\"\n        ans += word + \" \"\n    return ans\n\nExample:\n\nInput:\ni am anayay meayay\nOutput:\nayay\n\nExplanation:\ni can't speak pig latin\n\"\"\"\n\nclass Solution:\n    def pig_latin(self, s: str) -> str:\n        return s[0] + 'ay' + self.pig_latin(s[1:])\n",
        "test": "assert solution(stdin) == \"ay k cay yayayay yayayayay yayayayayay yayayayayayayay yayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayay",
        "num_ids": 4013,
        "indeed": false
    },
    {
        "number": 4876,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    #make a dictionary of all menu items and their respective names\n    all_items_dictionary = {}\n    menu_items_list = []\n    \n    #make a list of strings and make them lowercase\n    menu_items = stdin.lower().split('\\n')\n    \n    for item in menu_items:\n        menu_items_list.append(item.split(' ')[0].lower())\n        \n    #get all menu items and the dictionary\n    for menu_item in menu_items_list:\n        all_items_dictionary[menu_item] = menu_items_list.count(menu_item)\n    \n    #find all restaurant names in the dictionary\n    all_restaurant_names = []\n    for restaurant in all_items_dictionary.keys():\n        all_restaurant_names.append(restaurant)\n    \n    #select the first restaurant name that appears in the list\n    selected_restaurant_name = list(set(all_restaurant_names).intersection(set(menu_items_list)))[0]\n    \n    #create a list to store the menu items\n    menu_items_list_without_restaurant_name = []\n    \n    for menu_item in menu_items_list:\n        if menu_item!= selected_restaurant_name:\n            menu_items_list_without_restaurant_name.append(menu_item)\n            \n    #sort the list of menu items by their order\n    sorted_menu_items = sorted(list(set(menu_items_list_without_restaurant_name)))\n    \n    #print the sorted list\n    print(selected_restaurant_name)\n    \n    #if the list of menu items has at least one restaurant name\n    if len(sorted_menu_items)!= 0:\n        \n        #get the first item in the sorted list\n        selected_item = list(set(sorted_menu_items).intersection(set(menu_items_list)))[0]\n        \n        #print the first item\n        print(selected_item)\n        \n        #loop through the rest of the list, appending the item to the menu items list, and removing the item from the dictionary\n        for rest in menu_items_list:\n            if rest!= selected_item:\n                menu_items_list.remove(rest)\n                all_items_dictionary.pop(rest)\n            \n    else:\n        print('Anywhere is fine I guess')\n    \n    return selected_restaurant_name\n\nfor _ in range(int(input())):\n    n = int(input())\n    menu = input()\n    menu = menu.split()\n    menu = list(map(lambda x: x.lower(), menu))\n    \n    solution(menu)\n",
        "test": "assert solution('q' +'' + 'potatoes' +'' +'salad' +'' + '3' +'' + 'nymble' +'' + 'pancakes' +'' + 'punsch' +'' + 'q' +'' + 'potatoes' +'' +'salad' +'' + '3' +'' + 'nymble' +'' + 'pancakes' +'' + 'punsch' +'' + 'q' +'' + 'potatoes' +'' +'salad' +'' + '3' +'' + 'nymble' +'' + 'pancakes' +'' + 'punsch' +'') == 'Anywhere is fine I guess','solution'",
        "num_ids": 3332,
        "indeed": false
    },
    {
        "number": 4877,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin[0])):\n        a,b,h = map(int,stdin.split())\n        if a>b:\n            print(b-a)\n        else:\n            print(a-b)\n",
        "test": "assert solution(\"a b c d e f g h\") == \"10\"",
        "num_ids": 841,
        "indeed": false
    },
    {
        "number": 4878,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin[:-1]))\n\nSample Input:\n5\n1 2 1 5 3 4\nSample Output:\n5\ndef",
        "test": "assert solution(\"9 10\") == \"1\"",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 4879,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = stdin.split(' ')\n    if a!= 'North' and a!= 'South' and a!= 'East' and a!= 'West':\n        return 'No'\n    if b!= 'North' and b!= 'South' and b!= 'East' and b!= 'West':\n        return 'No'\n    if c!= 'North' and c!= 'South' and c!= 'East' and c!= 'West':\n        return 'No'\n    if (a == 'North' and b == 'South' and c == 'East') or (b == 'North' and c == 'South' and a == 'East') or (c == 'North' and a == 'South' and b == 'West'):\n        return 'Yes'\n    return 'No'\n",
        "test": "assert solution(r\"West North East\") == \"No\"",
        "num_ids": 1464,
        "indeed": false
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n,m = stdin.split()\n    n = int(n)\n    m = int(m)\n    plain = stdin.split('\\n')\n    plain = [line.split(' ') for line in plain]\n    plain = [int(x) for x in plain]\n    plain = [x + [n] for x in plain]\n    plain = [''.join(x) for x in plain]\n    plain = ''.join(plain)\n    plain = [int(x) for x in plain]\n    plain = [x - n for x in plain]\n    plain = ''.join(plain)\n    plain = int(plain)\n    plain = [plain % 26]\n    plain = plain[1]\n    plain = list(plain)\n    plain = [x % 26 for x in plain]\n    plain = ''.join(plain)\n    plain = str(plain)\n    return plain\n\ndef",
        "test": "assert solution('okay') == 'okay'",
        "num_ids": 1580,
        "indeed": false
    },
    {
        "number": 4881,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isdigit() == False:\n        return 'Neither'\n    elif int(stdin)%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n",
        "test": "assert solution(\"123\") == \"Odd\"",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 4882,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    num_digits=1\n    total=0\n    for line in stdin:\n        line=int(line)\n        if line<=10000:\n            total+=10**(num_digits-1)\n            num_digits+=1\n        else:\n            total+=10**(num_digits-1)\n            num_digits+=1\n    return str(total)\n\nSample Output:\n3\n10\n14\n23\n\"\"\"\n\nimport sys\n\ndef",
        "test": "assert solution(stdin) == '3'",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 4883,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    return 'no' if''.join(stdin) ==''.join('h e' * len(stdin)) else 'yes'",
        "test": "assert solution('c t') == 'yes'",
        "num_ids": 1657,
        "indeed": false
    },
    {
        "number": 4884,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    contest = int(stdin.split()[0])\n    problem = int(stdin.split()[1])\n    problem_solved = 0\n    problem_exists = True\n    problem_count = 0\n    \n    for p in range(problem+1):\n        problem_exists = False\n        for p in range(problem+1):\n            problem_count += 1\n            if problem_count == 1:\n                problem_solved += 1\n            else:\n                problem_solved += problem_exists\n            problem_exists = p!= 1\n        \n    print(problem_solved)\n    return str(problem_solved)",
        "test": "assert solution('1 2'), 1",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    \n    pawns = []\n    bishops = []\n    kings = []\n    rooks = []\n    rook_pairs = {}\n    pawn_pairs = {}\n    \n    for row, piece in enumerate(stdin.split(',')) :\n        if piece == 'K':\n            kings.append(row)\n        elif piece == 'Q':\n            rooks.append(row)\n        elif piece == 'R':\n            rook_pairs[row] = 'Q'\n        elif piece == 'B':\n            bishops.append(row)\n        elif piece == 'N':\n            kings.append(row)\n            bishops.append(row)\n            rooks.append(row)\n            rook_pairs[row] = 'R'\n        else :\n            pawn_pairs[row] = piece\n            \n    max_col = max(max(kings), max(rooks), max(rook_pairs.keys()))\n    min_col = min(min(kings), min(rooks), min(rook_pairs.keys()))\n    max_row = max(max_col, max(kings), max(rooks))\n    min_row = min(min_col, min(kings), min(rooks))\n    \n    if max_row > min_row :\n        pawn_type = 'K'\n    elif max_col > min_col :\n        pawn_type = 'Q'\n    else :\n        pawn_type = 'R'\n        \n    return f'{pawn_type}{min_row}-{max_row}{min_col}-{max_col}'\n        \n",
        "test": "assert solution('++++++++++++++++++++++++++++++++++++++++++++++++++++++') == 'White: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,g7,h7,h6'",
        "num_ids": 3332,
        "indeed": false
    },
    {
        "number": 4886,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if k >= n:\n        return \"true\"\n    elif n % k!= 0:\n        return \"false\"\n    else:\n        return \"true\"\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nnums = list(map(int, input().split()))",
        "test": "assert solution([\"1 1\", \"1 2\"]) == \"false\"",
        "num_ids": 3597,
        "indeed": false
    },
    {
        "number": 4887,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split(' '))\n    answer = 0\n    for i in range(1, n+1):\n        answer += p / i\n    return str(answer)",
        "test": "assert solution(1) == \"0\"",
        "num_ids": 2856,
        "indeed": false
    },
    {
        "number": 4888,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    tasks = [int(i) for i in stdin[1].split()]\n    tasks.sort()\n    \n    start_time = tasks[0]\n    end_time = tasks[-1]\n    \n    while start_time < end_time:\n        if start_time < end_time + 1:\n            start_time += (end_time - start_time) / 2\n        else:\n            start_time += (start_time - end_time) / 2\n        end_time += (end_time - start_time) / 2\n    \n    if start_time == end_time:\n        return str(n - 1)\n    else:\n        return str(n - 2)\n",
        "test": "assert solution(['20', '60', '120']) == '3'",
        "num_ids": 973,
        "indeed": false
    },
    {
        "number": 4889,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    # stdin.readline() -> str\n    \n    N = int(stdin.strip())\n    l = [int(s) for s in stdin.strip().split()]\n\n    # Call the solution method\n    return solution(N,l)\n\ndef",
        "test": "assert solution('04') == '79'",
        "num_ids": 3688,
        "indeed": false
    },
    {
        "number": 4890,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        d, n, m, c = list(map(int, stdin.split()))\n        if n > m or n > c:\n            continue\n        s = [0, 0]\n        s[0] = c\n        s[1] = d\n        print(s)\n    return \"impossible\"\n\nExplanation:\nThe queue is sorted and the refill schedule is presented below:\n\n0 0 0 0 0\n0 0 1 1 0\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0 0 0 0\n0 0 0 1 1\n0 0",
        "test": "assert solution('1 2 3 4') == '1 2 3 0'",
        "num_ids": 2724,
        "indeed": false
    },
    {
        "number": 4891,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # Solution: check the order of white pieces, black pieces\n    w, b = map(int, stdin.split())\n    w_pieces, b_pieces = [], []\n    for i in range(b):\n        num = int(stdin.strip())\n        if num >= 0:\n            if num % 4 == 1:\n                w_pieces.append(num)\n            else:\n                b_pieces.append(num)\n        else:\n            if num % 4 == 3:\n                b_pieces.append(num)\n            else:\n                w_pieces.append(num)\n    answer = []\n    for i in range(len(w_pieces)):\n        if w_pieces[i] > 0:\n            answer.append(w_pieces[i] - 1)\n            answer.append(w_pieces[i] + 1)\n        else:\n            answer.append(w_pieces[i] + 1)\n            answer.append(w_pieces[i] - 1)\n    return '\\n'.join(str(i) for i in answer)\n\nInput:\n5\n0 1 2 2 3 7 0\nOutput:\n4\nExplanation:\n- White pieces:\n  - 0 1 2 2 -\n  - 0 1 2 2 -\n- Black pieces:\n  - 3 7 4 -\n  - 2 - 1 3 -\n- See that the number of white pieces is 1.\n- The number of black pieces is 3.\n- See that the number of white pieces is 4.\n- So the set is valid.\n- So I can see that 4 is removed, 4 is added, and 0 is removed, so the set is valid.\n\nInput:\n5\n1 0 1 0 0 0\nOutput:\n2\nExplanation:\n- White pieces:\n  - 1 0 -\n  - 0 1 -\n- Black pieces:\n  - 0 1 0\n- See that the number of white pieces is 1.\n- The number of black pieces is 2.\n- See that the number of white pieces is 2.\n- So the set is valid.\n- So I can see that 0 is removed, 2 is added, and 1 is removed, so the set is valid.\n\nInput:\n6\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\nExplanation:\n- The mirror queen is the only white piece.\n- The king is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is the only white piece.\n- The first bishop is the only white piece.\n- The first knight is the only white piece.\n- The first pawn is the only white piece.\n- The first queen is the only white piece.\n- The first rook is",
        "test": "assert solution
        "num_ids": 6912,
        "indeed": false
    },
    {
        "number": 4892,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    words = []\n    n = int(stdin.strip())\n    for _ in range(n):\n        words.append(stdin.split(' '))\n    count = 0\n    for word in words:\n        char = word[0]\n        prob = float(word[1])\n        if char.isalpha() and prob >= 0 and prob <= 1:\n            count += 1\n    return str(count)\n",
        "test": "assert solution('qwerty') == 'qwerty'",
        "num_ids": 3793,
        "indeed": false
    },
    {
        "number": 4893,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # c1 = sys.stdin.readline().split()\n    c1 = list(map(int,stdin.split()))\n    c1.sort(reverse=True)\n    p = int(stdin.split()[1])\n    res = 0\n    for i in range(p,len(c1)+1):\n        res = max(res,abs(i-c1[i-1]))\n    return str(res)\n\n'''\n'''\n",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 4894,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    for line in stdin.splitlines():\n        note = line[:line.find(\" \")]\n        duration = int(line[line.find(\" \") + 1:])\n        if note == \"D\":\n            result += \"-\" * duration\n        elif note == \"F\":\n            result += \"-\" * (duration * 2)\n        elif note == \"E\":\n            result += \"-\" * (duration * 3)\n        elif note == \"G\":\n            result += \"-\" * duration\n        elif note == \"B\":\n            result += \"-\" * (duration * 4)\n        elif note == \"A\":\n            result += \"-\" * duration * 2\n        else:\n            result += note\n    return result",
        "test": "assert solution('22'), 'Error'",
        "num_ids": 5322,
        "indeed": false
    },
    {
        "number": 4895,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    l = list(map(int, list(stdin.strip().split())))\n    \n    if max(l) - min(l) > 1:\n        return \"possible\"\n    \n    if any([i >= 2**60 for i in l]):\n        return \"possible\"\n    \n    for i in range(n - 2):\n        l[i], l[i + 1] = l[i + 1], l[i]\n        \n        if max(l) - min(l) == 1:\n            return \"possible\"\n        \n    return \"possible\"\n",
        "test": "assert solution(stdin) == \"possible\"",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 4896,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(n // k * (k - 1) + (n % k!= 0))\n\nsolution(\"1 2 3 4 5 6 7 8 9 10\")",
        "test": "assert solution(input()), \"Exception: stdin does not contain a valid integer\"",
        "num_ids": 2451,
        "indeed": false
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    score = 0\n    time = 0\n    for std in stdin.split('\\n'):\n        std = std.split(',')\n        for i in range(len(std)):\n            std[i] = float(std[i])\n        std.pop(-1)\n        if std[0] == 'A':\n            time += (std[1] - std[0]) * 60\n            score += time\n        if std[0] == 'B':\n            score += (std[1] - std[0]) * 60\n        if std[0] == 'C':\n            score += (std[1] - std[0]) * 60\n        if std[0] == 'D':\n            score += (std[1] - std[0]) * 60\n    return str(round(score/time, 2))",
        "test": "assert solution(input()) == \"AC\"",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 4898,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, L, U = list(map(int, stdin.split()))\n    if N == 1:\n        return str(L)\n    else:\n        return '\\n'.join(str(x) for x in range(L, U + 1))\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == 1, \"Expected 1\"",
        "num_ids": 2063,
        "indeed": false
    },
    {
        "number": 4899,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if len(s) == 1:\n        return s[0]\n    else:\n        h = []\n        v = []\n        for i in s:\n            h.append(i)\n            v.append(i)\n        h.sort()\n        v.sort()\n        for i in range(len(s)):\n            if i > 0:\n                if h[i] == v[i]:\n                    continue\n                else:\n                    h[i] = ''\n                    v[i] = ''\n        return ''.join(h)",
        "test": "assert solution(\"Hello\") == \"Hello\"",
        "num_ids": 2459,
        "indeed": false
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split()[0])\n    \n    table = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        u, v = map(int, stdin.split())\n        table[u - 1][v - 1] = 1\n        table[v - 1][u - 1] = 1\n    \n    return ''.join(''.join('1' if row[i] else '0' for i in range(n)).replace('1', '0').replace('2', '0').replace('3', '0').replace('4', '1') for row in table)",
        "test": "assert solution(stdin) == \"0 0 0 0\"",
        "num_ids": 1202,
        "indeed": false
    },
    {
        "number": 4901,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    h = int(stdin[::-1])\n    return str(h*(h+1)//2)",
        "test": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"BCDEFGHIJKLMNOPQRSTUVWXYZ\"",
        "num_ids": 1042,
        "indeed": false
    },
    {
        "number": 4902,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1\n    n = len(stdin)\n    cnt = 0\n    for i in range(n):\n        if stdin[i] in stdin[:i]:\n            cnt += 1\n        else:\n            cnt -= 1\n    return cnt if cnt > 0 else -1\n",
        "test": "assert solution(stdin) == 5, \"Error\"",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 4903,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    result = \"no\"\n    for s in stdin:\n        if s == \"h\":\n            result = \"go\"\n        else:\n            result = \"no\"\n    return result",
        "test": "assert solution(\"aaah\"), \"go\"",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 4904,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    \n    players = [int(i) for i in stdin.split()]\n    res = ''\n    A, B = 1, 2\n    for player in players:\n        if player % 3 == 0:\n            res += 'A'\n        else:\n            res += 'B'\n        if player % 2 == 0:\n            A, B = B, A\n        if player % 3 == 1:\n            res += '1'\n    return res\n\nSample Output:\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\n\n-----Notes-----\nBest case: The scores in the records are the same.\n\"\"\"",
        "test": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"B\"",
        "num_ids": 2703,
        "indeed": false
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N, M, A, B, K, G = map(int, stdin)\n    \n    if A == N:\n        return str(K)\n    \n    visited = [0 for i in range(M)]\n    visited[B] = 1\n    \n    p = [[] for i in range(N)]\n    for i in range(N):\n        p[i].append(int(stdin[i]))\n    \n    q = []\n    time = [0 for i in range(M)]\n    time[K] = 1\n    \n    q.append(K)\n    while q:\n        m = q.pop(0)\n        for i in range(N):\n            if visited[i] == 0 and p[i] and not (i == A and time[m] == G):\n                visited[i] = 1\n                time[m] = time[m] + 1\n                q.append(m)\n    \n    return str(time[K])",
        "test": "assert solution(\"6 6 2 3 2 3 3 2 4\") == \"21\"",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 4906,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    num = 0\n    for i in stdin:\n        if i == 'E' or i == 'D':\n            num += len(str(num))\n        elif i in ['H','e','d','l']:\n            num += 2\n    return str(num)\n\n    pass\n\nTest Cases:\nSample Input:\nSample Output:\nE 3D\nSample Input:\nSample Output:\nH3e2l3o1W1o3r4l2d1!2\nSample Input:\nH3e2l3o1W1o3r4l2d1!2\nSample Output:\nH3e2l3o1W1o3r4l2d1!2\n'''\n\ndef",
        "test": "assert solution(\"H Heelllo WoOorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"",
        "num_ids": 1448,
        "indeed": false
    },
    {
        "number": 4907,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    # print(type(stdin))\n    # stdin = list(map(int, stdin.split()))\n    n = int(stdin.strip())\n    # print(n)\n    if n <= 0:\n        return \"Alice\"\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    \n    if n < 1000000000:\n        return \"Alice\"\n    \n    if n < 1000000:\n        return \"Bob\"\n    \n    if n < 10000000:\n        return \"Alice\"\n    \n    if n < 1000000000000:\n        return \"Bob\"\n    \n    # print(n)\n    \n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    # print(n < 1000000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    # print(n < 1000000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    # print(n < 1000000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    # print(n < 1000000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    # print(n < 1000000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    # print(n < 1000000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    # print(n < 1000000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    # print(n < 1000000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    # print(n < 1000000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    # print(n < 1000000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    # print(n < 1000000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(n < 1000000000)\n    # print(n < 1000000000000)\n    \n    # print(n)\n    # print(type(n))\n    # print(n < 10)\n    # print(n < 1000)\n    # print(n < 1000000)\n    # print(",
        "test": "assert solution('5') == 'Alice'",
        "num_ids": 3837,
        "indeed": false
    },
    {
        "number": 4908,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    solution = []\n    for line in stdin:\n        solution.append(int(line))\n    solution.sort()\n    return \"\".join(str(int(solution[i]) + int(solution[i + 1]) + int(solution[i + 2])) for i in range(len(solution) - 2))\n\nSample Output:\nSample Input:\n5\n8\n1 2 3 4 5 6 7 8 9\nSample Output:\n8+6=9\n\n\"\"\"\n\ndef",
        "test": "assert solution(input()) == '5+3=8'",
        "num_ids": 1060,
        "indeed": false
    },
    {
        "number": 4909,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 10:\n        return 'YES'\n    else:\n        return 'NO'\n'''\nclass Solution:\n    def find_path(self, N, D):\n        if N == 1:\n            return D[1]\n        elif N == 2:\n            return 1\n        elif N == 3:\n            return 2\n        else:\n            return self.find_path(N-1, D) + self.find_path(N-2, D) + self.find_path(N-3, D) + D[N]\n'''\n\ndef",
        "test": "assert solution(1) == \"NO\"",
        "num_ids": 2524,
        "indeed": false
    },
    {
        "number": 4910,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return max(map(lambda line: ''.join(sorted(line)), stdin), key=lambda line: len(line))",
        "test": "assert solution([\"ghost\", \"mummy\", \"witch\", \"demon\", \"demon\", \"demon\", \"demon\", \"demon\"]) == \"ghost\"",
        "num_ids": 2394,
        "indeed": false
    },
    {
        "number": 4911,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    parsed_str = stdin.split()\n    num_songs = int(parsed_str[0])\n    num_sort_commands = int(parsed_str[1])\n    if num_songs == num_sort_commands:\n        for command in range(num_sort_commands):\n            print(f\"{command+1}:\", end=\" \")\n            print(f\"{stdin.split()[command+1]}\")\n    else:\n        print(\"Invalid number of arguments\")\n        return \"Invalid number of arguments\"\n    return \"\"\n    \n    # print(f\"{parsed_str[0]}\")\n    # print(f\"{parsed_str[1]}\")\n    # for i in range(2,len(parsed_str)):\n    #     print(f\"{parsed_str[i]}\")\n",
        "test": "assert solution(\"\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\")",
        "num_ids": 2965,
        "indeed": false
    },
    {
        "number": 4912,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split())\n    w = w * h + 1\n    x = w // n + 1\n    x = x * n\n    q = []\n    for _ in range(int(n)):\n        q.append((x, n))\n        x += 1\n    i = 0\n    while q:\n        x, n = q.pop(0)\n        while i < x and x <= n:\n            i += 1\n            if n > x:\n                n -= x\n                x -= 1\n            else:\n                x = w - 1\n    return \"YES\" if x == n else \"NO\"\n",
        "test": "assert solution(\"2 10 7\") == \"NO\"",
        "num_ids": 1361,
        "indeed": false
    },
    {
        "number": 4913,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, vac, control, vacc = list(map(int, stdin.split()))\n    vaccinate = set()\n    for i in range(n):\n        vaccinate.add(vac[i])\n    for i in range(n-2):\n        vaccinate.add(control[i])\n        vaccinate.add(vaccinate.pop())\n    for i in range(n-2, n-1):\n        vaccinate.add(control[i])\n        vaccinate.add(vaccinate.pop())\n    vaccinate.remove(control[n-1])\n    vaccinate.remove(vaccinate.pop())\n    for i in vaccinate:\n        print(i, end=' ')\n    for i in range(n):\n        if i in vaccinate:\n            print(vac[i], end=' ')\n    print()\n    return ''\n",
        "test": "assert solution(",
        "num_ids": 2672,
        "indeed": false
    },
    {
        "number": 4914,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    def helper(num):\n        # helper method\n        if num == 2:\n            return \"B\"\n        if num == 3:\n            return \"A\"\n        if num == 4:\n            return \"C\"\n        \n    num = len(stdin)\n    answer = \"\"\n    i = 0\n    while i < num:\n        answer += helper(i)\n        i += 2\n    answer = answer[::-1]\n    return answer",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 1206,
        "indeed": false
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    case = [list(map(int, input().split())) for _ in range(m)]\n    sol = []\n    for i in range(n):\n        sol.append(sum(map(int, input().split())))\n    return''.join(str(x) for x in sol)\n",
        "test": "assert solution(stdin) == 60",
        "num_ids": 945,
        "indeed": false
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    m,n = [list(map(int,stdin.split())) for i in range(3)]\n    for i in range(m-2):\n        for j in range(n-2):\n            if i+j+1<=m-3:\n                if n[i]*n[i+1]+n[i+2]*n[i+2]==m:\n                    return n[i]*n[i+1]+n[i+2]*n[i+2]\n    return '-1'\n\ndef",
        "test": "assert solution(\"5 5 2 3 2 3 1 5 5 3\") == 5",
        "num_ids": 3206,
        "indeed": false
    },
    {
        "number": 4917,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    global data\n\n    data = [list(map(int, input().split())) for i in range(int(stdin))]\n    \n    answer = True\n    for i in range(len(data)):\n        for j in range(i+1, len(data)):\n            if data[i][0] > data[j][0] or data[i][1] < data[j][1]:\n                answer = False\n                break\n    \n    return \"gunilla has a point\" if answer else \"gunilla has no point\"\n\"\"\"",
        "test": "assert solution(\"\"\"",
        "num_ids": 2225,
        "indeed": false
    },
    {
        "number": 4918,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    print(stdin)\n    n = int(stdin[0])\n    q = int(stdin[1])\n    group_a = [int(i) for i in stdin[2].split()]\n    group_b = [int(i) for i in stdin[3].split()]\n    print(group_a, group_b)\n    solution = [0] * q\n    for i in range(len(group_a)):\n        for j in range(q):\n            if group_a[i] == group_b[j]:\n                solution[j] = group_a[i]\n                print(solution)\n    return \"\".join(map(str, solution))",
        "test": "assert solution(stdin) == 4",
        "num_ids": 2492,
        "indeed": false
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    country = stdin.split()\n    year = list(map(int, stdin.split()))\n    times = []\n    for i in range(q):\n        k = int(stdin.split()[i+1])\n        times.append([k, int(stdin.split()[i+2])])\n    times.sort(key=lambda x: x[0])\n    res = []\n    for i in range(len(times)):\n        if times[i][0] >= times[i+1][0]:\n            res.append(times[i][1])\n        else:\n            res.append(times[i+1][1])\n    print('\\n'.join(map(str, res)))\n\ndef",
        "test": "assert solution(",
        "num_ids": 4931,
        "indeed": false
    },
    {
        "number": 4920,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    eventType = ''\n    num = 0\n    for line in stdin:\n        if line.isspace():\n            pass\n        elif line == '$':\n            num += 1\n        elif line.isalpha():\n            if len(eventType) < num:\n                eventType += line\n            else:\n                eventType += line\n                num = 0\n    print(len(eventType))\n    return eventType\n        \n    # Runtime: 72 ms, faster than 95.21% of Python3 online submissions for Summier in the summer season.\n    # Memory Usage: 15.3 MB, less than 80.11% of Python3 online submissions for Summier in the summer season.",
        "test": "assert solution(\"abcde\"), \"should return abbcddddeeeee\"",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 4921,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    for line in stdin.split('\\n'):\n        words = line.split()\n        if words[0]!= words[-1]:\n            if len(words) > 20000:\n                words.pop(0)\n            else:\n                words.append(words.pop(0))\n        answer.append(' '.join(words))\n    answer = '\\n'.join(answer)\n    return answer\n",
        "test": "assert solution(\"Inefficiency is a blight on the world and its humanity\") == \"Inefficiency is a blight on the.. and its humanity\"",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 4922,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    m,n=map(int,stdin.split())\n    var=[]\n    for i in range(m):\n        x=list(map(int,stdin.split()))\n        var.append(x)\n    f=[False]*n\n    for i in range(n):\n        for j in range(m):\n            if var[j][i]==True:\n                if var[j][i-1]==-1:\n                    f[j]=True\n                    f[j-1]=True\n                elif var[j][i-1]==True:\n                    f[j]=True\n    for i in range(n):\n        if f[i]==True:\n            return 'unsatisfactory'\n    return'satisfactory'\n\nSample Output:\nunsatisfactory\n\"\"\"\"\nclass Solution:\n    def isSatisfiable(self, A: str) -> bool:\n        variables = {i:False for i in range(len(A))}\n        clauses = []\n        for i in range(len(A)):\n            if A[i] == ')':\n                clauses.append([A[i], variables[i]])\n                variables[i] = False\n            elif A[i] == '(':\n                clauses.append([A[i], variables[i]])\n                variables[i] = True\n        if len(clauses)==0:\n            return True\n        else:\n            satisfiable=True\n            for c in clauses:\n                if not self.isSatisfiable(c[0]):\n                    satisfiable=False\n                    break\n            return satisfiable\n",
        "test": "assert solution(['-1 2', '-1 -2', '1 -2', '1 -2', '1 2', '1', '-1', '-1', '-1', '1']) =='satisfactory'",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 4923,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    str_list = []\n    for i in range(n):\n        str_list.append(list(map(int, input().strip().split())))\n    answer = \"\"\n    for i in range(n):\n        if str_list[i][0]!= str_list[i][1]:\n            answer += str_list[i][0]\n        else:\n            answer += str_list[i][0]\n    return answer\n",
        "test": "assert solution('3 3 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3",
        "num_ids": 2493,
        "indeed": false
    },
    {
        "number": 4924,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    h, m, s = stdin.split(\":\")\n    h, m, s = int(h), int(m), int(s)\n    minutes, seconds = s - int(h*60+m), s - int(h*60+m)\n    if minutes < 1 or minutes >= 60 or seconds < 1 or seconds >= 60:\n        return \"Invalid input\"\n    h += ((minutes // 60) * 60)\n    s += ((minutes % 60) * 60)\n    return str(h) + \":\" + str(m) + \":\" + str(s)\n",
        "test": "assert solution(\"23:59:59\"), \"Invalid stdin\"",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 4925,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    print(len(list(filter(lambda x: x!= 0, map(int, stdin.split()[:-1])))))\n    return str(n)",
        "test": "assert solution(\"2 1\") == \"1\"",
        "num_ids": 2104,
        "indeed": false
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    n_sum = 0\n    for i in range(1, n+1):\n        n_sum += i + 1\n    return str(int(n_sum/n))\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= n <= 100\n0 <= n_sum <= 10^12\n\n-----Tips-----\nWe can use an algorithm called totient function from the TA Python Programming Library.\nhttps://docs.python.org/3.6/library/functions.html#totient-function\nhttps://en.wikipedia.org/wiki/Totient_function\nhttps://www.geeksforgeeks.org/totient-function-python/\n\"\"\"\n\n\ndef",
        "test": "assert solution(\"0\") == 0",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 4927,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n,p,q=map(int,stdin.split())\n    \n    return \"paul\" if (p==q) else \"opponent\" if (p>=n) else \"paul\"\n    \n",
        "test": "assert solution('3 3 1') == 'opponent'",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 4928,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    def solve(n):\n        n = sum(n)\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 2\n        else:\n            return max(solve(n-1), solve(n-2)) + 2\n    return solve(n)\n\nSample Input:\n1\nSample Output:\n1\n4\nSample Input:\n1\nSample Output:\n3\nSample Input:\n2\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n2\nSample Output:\n2\n---My Answer---\ndef",
        "test": "assert solution('') == ''",
        "num_ids": 1704,
        "indeed": false
    },
    {
        "number": 4929,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n\n    # return code\n    pass\n\nSample Input:\n1234\n1abcdefghijklmnopqrstuvwxyz\nSample Output:\nYes\ndef",
        "test": "assert solution(stdin) == 'No'",
        "num_ids": 1021,
        "indeed": false
    },
    {
        "number": 4930,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    answer = ''\n    word = []\n    for _ in range(2):\n        word.append(stdin[0])\n        stdin = stdin[1:]\n    for c in word:\n        answer = answer + c.lower() +''\n    return answer\n",
        "test": "assert solution(\"q e e a b q r a z p o q e e\"), \"q e e a b q r a z p o q e e\"",
        "num_ids": 4245,
        "indeed": false
    },
    {
        "number": 4931,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    diff = abs(A[0] - B[0])\n    for i in range(1, len(A)):\n        diff = min(diff, abs(A[i] - B[i]))\n    return str(diff)\n",
        "test": "assert solution(",
        "num_ids": 2239,
        "indeed": false
    },
    {
        "number": 4932,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    a = map(int, stdin.split())\n    b = map(int, stdin.split())\n    c = map(int, stdin.split())\n    d = map(int, stdin.split())\n    l = list(a)\n    m = list(b)\n    g = list(c)\n    h = list(d)\n    e = list(l)\n    f = list(m)\n    g.sort()\n    h.sort()\n    e.sort()\n    f.sort()\n    d.sort()\n    v = e + f + d + g + h\n    return \"\".join(v)\n\ndef",
        "test": "assert solution(['A','A','A','B','B','B','A','A','A']) == 'none'",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 4933,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    # please write your code here\n    a,b,c=map(int,input().split())\n    return str(int(stdin)+((a+b+c)//3))\n\n'''\n",
        "test": "assert solution('2 1 2') == '2'",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 4934,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    start = 10**h - 1\n    answer = 1000000\n    for i in range(n):\n        h_start = 10**(h - 1) - 1\n        if start >= h_start:\n            answer = min(answer, abs(start - h_start))\n        start = start + 1\n    return str(answer)",
        "test": "assert solution('5') == 2",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    N, g = map(int, stdin.split())\n    D = map(int, stdin.split())\n    theta = sum(D) / g\n    lines = map(int, stdin.split())\n    res = abs(abs(theta) - abs(round(theta, 6)))\n    if res > 10 ** -6:\n        print(round(theta, 6))\n        print(round(abs(theta), 6))\n        return str(round(theta, 6))\n    elif res > 10 ** -7:\n        return \"Yes\"\n    else:\n        return str(round(theta, 6))\n\nSample Output:\nYes\n\"\"\"",
        "test": "assert solution(stdin) == '5.0'",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 4936,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    days = [int(i) for i in stdin.split()]\n    days.sort(reverse=True)\n    answer = days[0]\n    for i in range(1, len(days)):\n        if days[i] < answer:\n            answer = days[i]\n    return str(answer)\n\nSample Output:\n4\n\"\"\"\n\ndef",
        "test": "assert solution('1' + '1' + '1' + '1') == solution(n + '1' + '1' + '1')",
        "num_ids": 1397,
        "indeed": false
    },
    {
        "number": 4937,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    battles = [n-1]*n\n    for i in range(n):\n        if a[i]>n:\n            a[i] = a[n-1]\n            battles[n-1] = n-1\n        else:\n            a[i] = a[i]%n\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i]!=a[j]:\n                if a[i]<a[j]:\n                    battles[i] = j\n    return str(max(battles))\n\ndef",
        "test": "assert solution(stdin) == 4",
        "num_ids": 2863,
        "indeed": false
    },
    {
        "number": 4938,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = [list(map(int, input().split())) for _ in range(n)]\n    i = 0\n    for j in numbers:\n        count = 0\n        while i < len(j)-1:\n            count += 1\n            if j[i] == j[i+1]:\n                count += 1\n                i += 1\n            else:\n                break\n        i += 1\n        print(count)\n    return str(count)\n",
        "test": "assert solution('FMMM') == '4'",
        "num_ids": 2151,
        "indeed": false
    },
    {
        "number": 4939,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    n -= 1\n    for _ in range(k):\n        print(n)\n        n -= 1\n    return str(n)\nsolution(input())\ndef",
        "test": "assert solution(",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    swather_orders = list(map(int, stdin.strip().split()))\n    stage_orders = []\n    \n    for swather_order in swather_orders:\n        stage_orders.append(swather_order)\n        stage_orders.append(swather_order)\n    \n    stage_orders.sort()\n    stage_orders.sort()\n    \n    stage_orders.sort(key=lambda x:x)\n    stage_orders.sort(key=lambda x:x)\n    \n    stage_orders = [str(stage_orders[i]) for i in range(len(stage_orders))]\n    stage_orders =''.join(stage_orders)\n    stage_orders = '1'+ stage_orders\n    \n    stage_orders = stage_orders.split()\n    stage_orders.pop()\n    \n    answer = []\n    \n    for stage in stage_orders:\n        answer.append(stage)\n        \n    answer =''.join(answer)\n    \n    return answer",
        "test": "assert solution(",
        "num_ids": 2624,
        "indeed": false
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    words = dict()\n    s = input().split()\n    for w in s:\n        if w not in words:\n            words[w] = 1\n        else:\n            words[w] += 1\n    ans = [0 for _ in range(len(s))]\n    for i in words:\n        if words[i] == 1:\n            ans[i] += 1\n            for j in range(len(s)):\n                if ans[j] == 1:\n                    ans[j] = 0\n                else:\n                    ans[j] += 1\n    count = 0\n    for i in range(len(s)):\n        if ans[i] == 1:\n            count += 1\n    return str(count)\n",
        "test": "assert solution(input()) == \"incorrect\"",
        "num_ids": 2634,
        "indeed": false
    },
    {
        "number": 4942,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    x.sort(reverse=True)\n    days = 1\n    max_days = x[0]\n    for i in range(1, len(x)):\n        days = max(days, x[i] - x[i - 1])\n        if days > max_days:\n            max_days = days\n    return str(max_days)\n\nExplanation:\n[1, 2, 3, 4, 3, 4, 5, 6, 7]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 2, 3, 4, 3, 4, 5, 6, 7]\n[1, 2, 3, 4, 3, 4, 5, 6, 7]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1",
        "test": "assert solution(",
        "num_ids": 4011,
        "indeed": false
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        line = line.split()\n        A = int(line[0])\n        if A <= 0:\n            A = A * 0.01\n        if A >= 1000000:\n            A = A * 0.01\n        line[0] = round(A, -3)\n    return ','.join(map(str, line))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert solution(",
        "num_ids": 2629,
        "indeed": false
    },
    {
        "number": 4944,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 3 == 0:\n        return n//3\n    else:\n        return n//3 + n%3\n    ",
        "test": "assert solution('1') == 1",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 4945,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n\"\"\"\n\ndef",
        "test": "assert solution(a,b,m,3) == \"13\"",
        "num_ids": 2715,
        "indeed": false
    },
    {
        "number": 4946,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin.split())) - len(stdin.split()))\n    #     # #       #        #        #    #         #         #     #\n    #   #    #  #    #   #       #       #       #       #  #    #\n    #   #    #    #    #   #  #    #    #    #    #    #    #    #\n    #   #    #    #    #    #  #    #    #    #    #    #    #    #\n    #   #    #    #    #    #    #    #    #    #    #    #    #    #\n    #   #    #    #    #    #    #    #    #    #    #    #    #    #\n    #   #    #    #    #    #    #    #    #    #    #    #    #\n    #   #    #    #    #    #    #    #    #    #    #    #    #\n\nn = int(input())\nprint(solution(str(n)))",
        "test": "assert solution([\"1\", \"1\", \"2\", \"1\", \"1\", \"1\", \"1\"]) == \"3\", \"incorrect answer\"",
        "num_ids": 1773,
        "indeed": false
    },
    {
        "number": 4947,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))",
        "test": "assert solution('0') == '0'",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 4948,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    arr = [list(map(int, stdin.split())) for _ in range(n)]\n    radius = 100000\n    for row in arr:\n        x, y, z = row\n        if radius % 100000!= 0:\n            radius += 100000\n            continue\n        if 0 < x < radius and 0 < y < radius and 0 < z < radius:\n            radius *= 10\n    for i in range(s - 1, s + 1):\n        for j in range(i - s, i + 1):\n            for k in range(j - s, j + 1):\n                if i < 0 or j < 0 or k < 0 or i >= s or j >= s or k >= s:\n                    continue\n                if arr[i][j][k] == 1 and radius % 100000 == 0:\n                    radius *= 10\n                    continue\n                if arr[i][j][k] == 0 and radius % 100000 == 0:\n                    continue\n    return str(radius)\n",
        "test": "assert solution(",
        "num_ids": 2233,
        "indeed": false
    },
    {
        "number": 4949,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    W, H = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    l.sort()\n    dif = 0\n    for i in range(len(l)-1):\n        if l[i] - l[i+1] == W - 1 and dif == H - 1:\n            return 'DA'\n        elif l[i] - l[i+1] == H - 1:\n            return 'NE'\n        elif l[i] + l[i+1] == W - 1 and dif == H - 1:\n            return 'DA'\n        elif l[i] + l[i+1] == H - 1:\n            return 'NE'\n        dif += 1\n    return 'NE'",
        "test": "assert solution(\"3 5\") == \"NE\"",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 4950,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, d, n_1 = map(int, stdin.split())\n    hours = map(int, stdin.split())\n    answer = []\n    for hour in hours:\n        for i in range(d):\n            answer.append(hour * 3600 + i * 60)\n    for i in range(n_1):\n        answer.append(d * 3600 + (i + 1) * 60)\n    answer.sort()\n    if answer == answer[n_1:]:\n        return str(max(answer))\n    return str(max(answer)) + \" \" + str(min(answer))\n",
        "test": "assert solution(stdin) == '6'",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 4951,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin.splitlines()\n    \n    for i in range(len(result)):\n        line = result[i]\n        \n        if \"->\" in line:\n            first_line, rest = line.split('->')\n            first_line = first_line.split(\":\")[0]\n            rest = rest.split(\":\")[0]\n            result[i] = first_line + \":\" + rest\n        \n    answer = \"\\n\".join(result)\n    return answer",
        "test": "assert solution(",
        "num_ids": 2266,
        "indeed": false
    },
    {
        "number": 4952,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    Votes = []\n    for line in stdin:\n        if line.count(\" \") >= 2:\n            line = line.strip()\n            Votes.append(line)\n        else:\n            Votes.append(line.strip().replace(\"***\",\"\"))\n    \n    for voter in range(len(Votes)):\n        if Votes[voter][len(Votes[voter])-1] in [\"*\",\"\\n\",\"\\r\"]:\n            continue\n        elif Votes[voter].count(\"*\") >= 2:\n            continue\n        else:\n            Votes[voter] = Votes[voter].replace(\"***\",\"\")\n    if len(set(Votes)) == len(Votes):\n        return \"Connie Froggatt\"\n    else:\n        return \"Runoff!\"\n        \n    \n",
        "test": "assert solution([\"Jenny Franklin\", \"Marti Graham\", \"Connie Froggatt\", \"Joseph Ivers\"]) == \"Connie Froggatt\"",
        "num_ids": 1985,
        "indeed": false
    },
    {
        "number": 4953,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = stdin[:N]\n    S = S.split()\n    # print(S)\n    if len(S) == 1:\n        return 0\n    else:\n        S.sort()\n        i = 1\n        while S[i]!= S[i-1] or i > 1:\n            i += 1\n            if i == len(S):\n                return i\n        return 0\n    \n\"\"\"\ndef",
        "test": "assert solution(3) == ['Jabba', 'Bib', 'Boba', 'Chewbacca', 'Luke', 'Grakchawwaa', 'R2D2', 'Shyriiwook', 'Jawaese', 'Binary', 'Shyriiwook']",
        "num_ids": 2408,
        "indeed": false
    },
    {
        "number": 4954,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    total_budget, num_participants, num_weeks, num_hotes = map(int, stdin.split())\n    candidate_hotes = [0 for _ in range(num_hotes)]\n    for _ in range(num_participants):\n        week = list(map(int, stdin.split()))\n        for i in range(num_weeks):\n            for j in range(num_hotes):\n                if week[j] <= candidate_hotes[j]:\n                    candidate_hotes[j] = week[j]\n    candidate_hotes.sort()\n    total_budget += candidate_hotes[0] * (num_weeks * num_hotes)\n    return f\"{total_budget:.2f}\"\n",
        "test": "assert solution(\"5 5 4 3 2 10 6 2 1 3\") == \"900\"",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 4955,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(x) for x in stdin.split(' ')]\n    if arr[0] > arr[1]:\n        return 'A# C# D'\n    elif arr[0] == arr[1]:\n        if arr[0] == 10:\n            return 'A# C# F'\n        else:\n            return 'C#'\n    else:\n        return 'C#'\n\ndef",
        "test": "assert solution(stdin) == \"A B# C D F\"",
        "num_ids": 840,
        "indeed": false
    },
    {
        "number": 4956,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    word_list = list(stdin)\n    count = 0\n    for i in range(len(word_list)):\n        if(word_list[i].isalpha()):\n            if(word_list[i] == \"a\"):\n                count += 1\n            else:\n                count -= 1\n        else:\n            continue\n    if(count >= 0):\n        return \"dae ae ju traeligt va\"\n    else:\n        return \"haer talar vi rikssvenska\"\n\nTestcases:\n    [\"dae ae ju traeligt va\", \"\", \"\", \"a\", \"e\"]\n    [\"dae ae ju traeligt va\", \"ta\", \"la\", \"ju\", \"traeligt\"]\n    [\"dae ae ju traeligt va\", \"taa\", \"ljut\", \"traeligt\", \"va\", \"et\"]\n\n---My original solution---\n\ndef",
        "test": "assert solution(dae ae ju traeligt va) == \"haer talar vi rikssvenska\"",
        "num_ids": 1094,
        "indeed": false
    },
    {
        "number": 4957,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    return 'E..E#'\n",
        "test": "assert solution('E..E#') == 'E..E#'",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 4958,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n    heights.sort()\n    answer = ''\n    for i in range(n-6):\n        answer += str(heights[i] + heights[i+6])\n    answer += str(heights[n-6])\n    return answer\n",
        "test": "assert solution('12 8 9 3 7 2 7 1 3 2') == '12 8 9 3 7 2 7 1 3 2'",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 4959,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    c = 0\n    for i in range(1,n+1):\n        if k==i:\n            c+=1\n    print(c)\n    return str(c)\n\nprint(solution(\"3 0 3\"))\n",
        "test": "assert solution(\"{0:,d}\".format(stdin)) == \"4\"",
        "num_ids": 962,
        "indeed": false
    },
    {
        "number": 4960,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    octal = ''\n    digits = 0\n    ans = ''\n    for num in stdin:\n        if num == '0':\n            octal += '0'\n        elif num == '1':\n            digits += 1\n        else:\n            digits -= 1\n            if digits == 0:\n                digits = len(octal)\n            ans += str(int(octal[digits:]))\n            octal = ''\n    return ans\n\nSample Input:\n0100\nSample Output:\n101\n\n'''\n",
        "test": "assert solution(1010) == \"101\"",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    for i in range(1, len(stdin)):\n        for j in range(i, len(stdin)):\n            for k in range(j, len(stdin)):\n                if len(stdin[i]) < len(stdin[j]):\n                    total += len(stdin[j]) - len(stdin[i])\n                elif len(stdin[i]) > len(stdin[j]):\n                    total += len(stdin[i]) - len(stdin[j])\n                else:\n                    total += len(stdin[j]) - len(stdin[i])\n    return str(total)\n'''\n\ndef",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 4962,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    global stdout\n    lines = list(map(lambda x: x.split(), stdin.split(\"\\n\")))\n    drawers = []\n    for i in range(0, len(lines), 2):\n        drawers.append([int(k) for k in lines[i].split(\" \")])\n    for i in range(0, len(lines), 2):\n        drawers[i][0] -= 1\n        drawers[i][1] -= 1\n    for i in range(1, len(drawers), 2):\n        if not i % 2:\n            stdout += \"LADICA\"\n        else:\n            stdout += \"SMECE\"\n    return stdout\n\nSample Output:\nSample Input:\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nSample Output:\nSMECE\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\ndef",
        "test": "assert solution(stdin) == \"SMECE\"",
        "num_ids": 4139,
        "indeed": false
    },
    {
        "number": 4963,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    people = sorted(list(map(int, stdin.split())))\n    d_people = people[0] - people[1] + 1\n    return''.join(map(str, sorted(people, key=lambda x: x * d_people)))\n",
        "test": "assert solution(\"8 8 9 8\") == \"8 9 8\"",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 4964,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N,H,L,X = map(int,stdin.split())\n    d = dict()\n    for i in range(1,N+1):\n        d[i] = 0\n    for i in range(N):\n        for j in range(H):\n            if stdin[j] in d:\n                d[stdin[j]] += 1\n    lst = []\n    for i in range(N):\n        if i in d:\n            lst.append(d[i])\n        else:\n            lst.append(-1)\n    lst.sort(reverse=True)\n    for i in range(L):\n        x = int(stdin[i+1])\n        if x in lst:\n            lst[lst.index(x)] = x\n    for i in range(N):\n        print(lst[i])\n    return max(lst)\n    \n\n-----Advanced-----\nIn a 2D array A of $N$ rows and $M$ columns, we represent each movie with an index $i$ where $0 \\leq i \\leq \\textrm{M}$, and the index of the movie with ID $i$ is $i$. The 2D array above represents the relationship between $i$ and $i+1$. \n\nFor example, if we have an array A with the following definitions:\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nThen if we sort the array A by column $i$, we would get the following definitions:\n\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7, 8, 9]\n[0, 1, 2, 7, 8, 9]\n[0, 1, 2, 6, 7",
        "test": "assert solution('bad') == '1'",
        "num_ids": 3631,
        "indeed": false
    },
    {
        "number": 4965,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    answer = ''\n    while y:\n        if y < x:\n            answer += '0' * (x - y)\n            y -= 1\n        else:\n            answer += '1' * (y - x)\n            x -= 1\n    return answer\n\"\"\"\n\ndef",
        "test": "assert solution(\"1 5 3 6\") == \"1 5 3 6\"",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 4966,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    k = 20000\n    t_1, t_2, t_3 = map(int, stdin.split())\n    t_1 = min(t_1, k)\n    t_2 = min(t_2, k)\n    t_3 = min(t_3, k)\n    t_1 = t_1 - 1\n    t_2 = t_2 - 1\n    t_3 = t_3 - 1\n    if (abs(p - t_1) <= 10 ** -6):\n        return str(abs(p - t_1))\n    elif (abs(p - t_2) <= 10 ** -6):\n        return str(abs(p - t_2))\n    elif (abs(p - t_3) <= 10 ** -6):\n        return str(abs(p - t_3))\n    return str(p - t_1) + str(p - t_2) + str(p - t_3)\n",
        "test": "assert solution(stdin) == \"60.3108\"",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 4967,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [list(map(str,input().split())) for _ in range(n)]\n    visited = [[False]*n for _ in range(n)]\n    minimum = abs(n - 1) * n\n    \n    def backtrack(x, y):\n        if 0 <= x < n and 0 <= y < n and not visited[x][y]:\n            if x == n - 1 and y == n - 1:\n                return grid[x][y]\n            \n            visited[x][y] = True\n            \n            if grid[x][y] == '.':\n                return 'error'\n            \n            return backtrack(x+1, y) + backtrack(x-1, y) + backtrack(x, y+1) + backtrack(x, y-1)\n        \n        if x == n - 1:\n            return grid[x][y]\n        \n        if y == n - 1:\n            return grid[x][y]\n        \n        return grid[x][y] + '.'\n    \n    return str(backtrack(0, 0))\n",
        "test": "assert solution(\"2 2.0.0.0 0.0.0.0.0.0.0.0.0 0.0.0.0.0 0.0.0.0.0 0.0 0.0.0.0 0.0.0.0 0.0 0.0 0.0.0.0.2.2.0.0.0.0.0.0.0.0 0 0.0 0.0.0.0 0 0.0.0.0.0 0 0.0.0.0.0.0.0 0 0.0 0 0.0 0 0.0.0.0.0.0.0.0.0.0.0.0 0.0.0.0.0 0 0.0.0.0.0.0.0.0.0.0.0.0.0 0 0.0 0.0.0.0.0.0.0.0 0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0",
        "num_ids": 4685,
        "indeed": false
    },
    {
        "number": 4968,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(list(set([int(i) for i in stdin.split()]))))\n\nSample Explanation:\nThe race starts at the starting number 1 and the teams with the starting number 3, and the teams with the starting number 5, and the starting number 6.\nThe race ends at the starting number 4 and the starting number 6.\nSo, the minimum number of teams that cannot start the competition is 0.\n\n-----Constraints-----\n1 <= $N$, $S$, $R$ <= $S$ <= $N$\n1 <= $S$ <= $N$\n1 <= $R$ <= $N$\n\n\"\"\"",
        "test": "assert solution(\"2 2 3 4\") == 3, \"The smallest number of teams with damaged kayaks cannot start the competition\"",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 4969,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    answer = 0\n    for i in range(R):\n        for j in range(C):\n            if i*C + j < 10**9:\n                answer += 1\n    return str(round(answer/R*100,6))",
        "test": "assert solution(\"3 1\") == \"0.000000000\", \"The function must return a string.\"",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 4970,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    students = list(map(lambda x: int(x.split()[0]), stdin.split(\"\\n\")))\n    students.sort()\n    answer = 0\n    students = students[::-1]\n    for i in range(len(students)):\n        if students[i] == students[i-1]:\n            answer += 1\n        else:\n            answer += 1\n    return str(answer)\n",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 4971,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    limit = int(stdin.strip())\n    result = 0\n    for i in range(1, limit+1):\n        if i == 1:\n            result += i\n        else:\n            result += (i*(i+1))//2\n            \n    return str(result)",
        "test": "assert solution('0') == '0'",
        "num_ids": 1352,
        "indeed": false
    },
    {
        "number": 4972,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    k = 1\n    while X:\n        if X & 1:\n            k += 1\n        X >>= 1\n    return str(k)\n\nSample Output:\n0\n",
        "test": "assert solution(\"7654321\") == \"16\"",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 4973,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    maze = [list(map(str, input())) for _ in range(N)]\n    knight_board = [['.' for _ in range(N)] for _ in range(N)]\n    knight_board[0][0] = 'K'\n    visited = [[False for _ in range(N)] for _ in range(N)]\n    count = 0\n    knight_list = []\n    for row in range(N):\n        for col in range(N):\n            if maze[row][col] == 'K':\n                knight_list.append((row, col))\n    knight_list = list(set(knight_list))\n    step = 0\n    # print(knight_list)\n    for r, c in knight_list:\n        if visited[r][c]:\n            continue\n        else:\n            visited[r][c] = True\n            step += 1\n            if maze[r][c] == '.':\n                continue\n            if maze[r][c] == '#':\n                count = 0\n            else:\n                count = 1\n            knight_board[r][c] = str(count)\n    return str(step) if step!= 0 else '#'\n\n-----INPUT-----\n",
        "test": "assert solution(input) == \"2\"",
        "num_ids": 2212,
        "indeed": false
    },
    {
        "number": 4974,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    \n    n,r=map(int,stdin.split())\n    lst=list(map(int,stdin.split()))\n    lst.sort()\n    \n    for i in range(n):\n        if lst[i]==r:\n            return str(i+1)\n    return \"too late\"",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 1037,
        "indeed": false
    },
    {
        "number": 4975,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    p = int(stdin[1])\n    s = \"\"\n    for i in range(1, n+1):\n        for j in range(0, i):\n            s += \" \" + stdin[j] + \" \"\n        s += \" \" + stdin[i-1] + \" \"\n    return s\n\nSample Output:\nHOELXMNDZBXDKYBEJVDMUVIF\ndef",
        "test": "assert solution(input(\"hide the gold in the tree stump\")) == \"HWQDZBXDKYBEJVDMUVIFNMU\"",
        "num_ids": 3255,
        "indeed": false
    },
    {
        "number": 4976,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    x,y = map(float, stdin.split(' '))\n    return 'The gopher cannot escape.' if (x > 0) and (y > 0) else 'The gopher cannot escape.'",
        "test": "assert solution(\"1.500 1.500\") == \"The gopher cannot escape.\"",
        "num_ids": 1372,
        "indeed": false
    },
    {
        "number": 4977,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    return 'Y' if all(map(int, stdin.split(' '))) == 0 else 'N'\n",
        "test": "assert solution('6 6') == 'N'",
        "num_ids": 2063,
        "indeed": false
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(0, int(stdin)):\n        t = list(stdin.strip().split())\n        l = len(t)\n        for i in range(l-1, 0, -1):\n            if t[i] == \"V\":\n                t[i] = \".\"\n                break\n        print(*t)\n",
        "test": "assert solution(",
        "num_ids": 2732,
        "indeed": false
    },
    {
        "number": 4979,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1\n    lst = []\n    for i in stdin:\n        lst.append(i)\n    lst.sort()\n    return ''.join(lst[::-1])\n    \n    # Solution 2\n    lst = list(map(int, stdin.split('\\n')))\n    lst.sort()\n    return ''.join(lst[::-1])",
        "test": "assert solution(\"11111\") == \"11111\"",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 4980,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, color_dict = map(int, stdin.split())\n    answer = 0\n    color = list(color_dict.keys())\n    color.sort()\n    for i in range(N):\n        pink_name = list(color_dict.values())[i]\n        i_pink = list(color_dict.keys()).index(pink_name)\n        if i_pink > 0:\n            answer += 1\n    return str(answer)\n\"\"\"",
        "test": "assert solution(",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 4981,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    # First line has one string $A$, $B$ and $C$, separated by single spaces.\n    # Second line has three string $A$, $B$ and $C$, separated by single spaces.\n    # Third line has three string $A$, $B$ and $C$, separated by single spaces.\n    A, B, C = stdin.split()\n    # Convert to integers.\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    # Check if the strings are equal to each other.\n    if A == B:\n        if B == C:\n            return A *'' + B *'' + C *''\n        else:\n            return A *'' + B *'' + C *'' + A *''\n    else:\n        return A *'' + B *'' + C *'' + A *'' + B *'' + C *''",
        "test": "assert solution(['10', '7', '5', '6', '5', '0', '5', '0', '7']) == '10 7 5 6 5'",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[1])\n    result = []\n    \n    for i in range(n):\n        x,y = map(int,stdin.split(' '))\n        result.append((x-y)//(10**6))\n    \n    return str(sum(result))\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == \"8.00000000\"",
        "num_ids": 1926,
        "indeed": false
    },
    {
        "number": 4983,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    sum = 0\n    for i in stdin:\n        sum += int(i)\n    return str(sum%10)\n",
        "test": "assert solution('2') == '2'",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 4984,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    img = [list(x) for x in stdin.split(\"\\n\")]\n    m = len(img[0])\n    n = len(img)\n    islands = 0\n    path = []\n    for row in range(0, m):\n        for col in range(0, n):\n            if img[row][col] == 'L':\n                islands += 1\n                path.append((row, col))\n                for dx in range(-1, 2):\n                    for dy in range(-1, 2):\n                        if dx!= 0 or dy!= 0:\n                            row_offset = row + dx\n                            col_offset = col + dy\n                            if 0 <= row_offset < m and 0 <= col_offset < n and img[row_offset][col_offset] == 'C':\n                                islands += 1\n                                path.append((row_offset, col_offset))\n                                break\n            elif img[row][col] == 'W':\n                islands += 1\n                path.append((row, col))\n                for dx in range(-1, 2):\n                    for dy in range(-1, 2):\n                        if dx!= 0 or dy!= 0:\n                            row_offset = row + dx\n                            col_offset = col + dy\n                            if 0 <= row_offset < m and 0 <= col_offset < n and img[row_offset][col_offset] == 'C':\n                                islands += 1\n                                path.append((row_offset, col_offset))\n                                break\n            elif img[row][col] == 'C':\n                islands += 1\n                path.append((row, col))\n                for dx in range(-1, 2):\n                    for dy in range(-1, 2):\n                        if dx!= 0 or dy!= 0:\n                            row_offset = row + dx\n                            col_offset = col + dy\n                            if 0 <= row_offset < m and 0 <= col_offset < n and img[row_offset][col_offset] == 'L':\n                                islands += 1\n                                path.append((row_offset, col_offset))\n                                break\n    return min(islands, islands + 1)",
        "test": "assert solution(s) == \"0\"",
        "num_ids": 2391,
        "indeed": false
    },
    {
        "number": 4985,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    from itertools import combinations\n    from math import factorial\n    \n    N, B, S = map(int, stdin.split())\n    \n    cards = list(map(int, stdin.split()))\n    \n    c = Counter(cards)\n    \n    result = 0\n    \n    for k in list(c.keys()):\n        result += factorial(c[k])*sum(c[k])\n    \n    result = result*N*(B+1)\n    \n    for card in combinations(cards, 3):\n        result += factorial(c[card[0]])\n        result += factorial(c[card[1]])\n        result += factorial(c[card[2]])\n    \n    return str(result)\n\n'''\n\nfrom itertools import combinations\nimport sys\n\n\nN = int(sys.stdin.readline())\ncards = list(map(int, sys.stdin.readline().split()))\n\nresult = 0\n\nfor i in combinations(cards,3):\n    result += factorial(i[0])*factorial(i[1])*factorial(i[2])\n\nprint(result)",
        "test": "assert solution(\"A1K\") == \"2\"",
        "num_ids": 3844,
        "indeed": false
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    def find_sticky_keys(text: str) -> str:\n        sticky_keys = set()\n        for i in range(len(text)):\n            if text[i] in 'abcdefghijklmnopqrstuvwxyz':\n                sticky_keys.add(text[i])\n            if text[i] in'':\n                sticky_keys.add(text[i].upper())\n                sticky_keys.add(text[i].lower())\n        return ''.join(sorted(sticky_keys))\n\n    def solution2(text: str) -> str:\n        sticky_keys = find_sticky_keys(text)\n        return text.replace(sticky_keys, '*' * len(sticky_keys))\n\n    return ''.join(sorted(find_sticky_keys(stdin)))\n\n\n1. The input consists of:\n - One line containing a string $s$ ($1 \\leq \\mathrm{length}(s) \\leq 1000$), the text that Joanna typed on her keyboard.\n - One line containing a string $t$ ($1 \\leq \\mathrm{length}(t) \\leq 1000$), the text displayed on Joanna\u2019s screen as a result.\n\nBoth $s$ and $t$ consist only of lower-case letters (\u2018a\u2019\u2013\u2018z\u2019) and spaces (\u2018 \u2019), and start and end with a letter.\n\nIt is guaranteed that $t$ is the result of doubling each character in $s$ that corresponds to a sticky key. At least one character in $s$ corresponds to a sticky key (i.e. $s \\neq t$).\n\n2. The input consists of:\n - One line containing a string $s$ ($1 \\leq \\mathrm{length}(s) \\leq 1000$), the text that Joanna typed on her keyboard.\n - One line containing a string $t$ ($1 \\leq \\mathrm{length}(t) \\leq 1000$), the text displayed on Joanna\u2019s screen as a result.\n\nBoth $s$ and $t$ consist only of lower-case letters (\u2018a\u2019\u2013\u2018z\u2019) and spaces (\u2018 \u2019), and start and end with a letter.\n\nIt is guaranteed that $t$ is the result of doubling each character in $s$ that corresponds to a sticky key. At least one character in $s$ corresponds to a sticky key (i.e. $s \\neq t$).\n\n3. The input consists of:\n - One line containing a string $s$ ($1 \\leq \\mathrm{length}(s) \\leq 1000$), the text that Joanna typed on her keyboard.\n - One line containing a string $t$ ($1 \\leq \\mathrm{length}(t) \\leq 1000$), the text displayed on Joanna\u2019s screen as a result.\n\nBoth $s$ and $t$ consist only of lower-case letters (\u2018a\u2019\u2013\u2018z\u2019) and spaces (\u2018 \u2019), and start and end with a letter.\n\nIt is guaranteed that $t$ is the result of doubling each character in $s$ that corresponds to a sticky key. At least one character in $s$ corresponds to a sticky key (i.e. $s \\neq t$).\n\n4. The input consists of:\n - One line containing a string $s$ ($1 \\leq \\mathrm{length}(s) \\leq 1000$), the text that Joanna typed on her keyboard.\n - One line containing a string $t$ ($1 \\leq \\mathrm{length}(t) \\leq 1000$), the text displayed on Joanna\u2019s screen as a result.\n\nBoth $s$ and $t$ consist only of lower-case letters (\u2018a\u2019\u2013\u2018z\u2019) and spaces (\u2018 \u2019), and start and end with a letter.\n\nIt is guaranteed that $t$ is the result of doubling each character in $s$ that corresponds to a sticky key. At least one character in $s$ corresponds to a sticky key (i.e. $s \\neq t$).\n\n5. The input consists of:\n - One line containing a string $s$ ($1 \\leq \\mathrm{length}(s) \\leq 1000$), the text that Joanna typed on her keyboard.\n - One line containing a string $t$ ($1 \\leq \\mathrm{length}(t) \\leq 1000$), the text displayed on Joanna\u2019s screen as a result.\n\nBoth $s$ and $t$ consist only of lower-case letters (\u2018a\u2019\u2013\u2018z\u2019) and spaces (\u2018 \u2019), and start and end with a letter.\n\nIt is guaranteed that $t$ is the result of doubling each character in $s$ that corresponds to a sticky key. At least one character in $s$ corresponds to a sticky key (i.e. $s \\neq t$).\n\n6. The input consists of:\n - One line containing a string $s$ ($1 \\leq \\mathrm{length}(s) \\leq 1000$), the text that Joanna typed on her keyboard.\n - One line containing a string $t$ ($1 \\leq \\mathrm{length}(t) \\leq 1000$), the text displayed on Joanna\u2019s screen as a result.\n\nBoth $s$ and $t$ consist only of lower-case letters (\u2018a\u2019\u2013\u2018z\u2019) and spaces (\u2018 \u2019), and start and end with a letter.\n\nIt is guaranteed that $t$ is the result of doubling each character in $s$ that corresponds to a sticky key. At least one character in $s$ corresponds to a sticky key (i.e. $s \\neq t$).\n\n7. The input consists of:\n - One line containing a string $s$ ($1 \\leq \\mathrm{length}(s) \\leq 1000$), the text that Joanna typed on her keyboard.\n - One line containing a string $t$ ($1 \\leq \\mathrm{length}(t) \\leq 1000$), the text displayed on Joanna\u2019s screen as a result.\n\nBoth $s$ and $t$ consist only of lower-case letters (\u2018a\u2019\u2013\u2018z\u2019) and spaces (\u2018 \u2019), and start and end with a letter.\n\nIt is guaranteed that $t$ is the result of doubling each character in $s$ that corresponds to a sticky key. At least one character in $s$ corresponds to a sticky key (i.e. $s \\neq t$).\n\n8. The input consists of:\n - One line containing a string $s$ ($1 \\leq \\mathrm{length}(s) \\leq 1000$), the text that Joanna typed on her keyboard.\n - One line containing a string $t$ ($1 \\leq \\mathrm{length}(t",
        "test": "assert solution(stdin) == \"def\"",
        "num_ids": 2541,
        "indeed": false
    },
    {
        "number": 4987,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin.strip())\n    machines = 0\n    l = 0\n    for i in range(d):\n        color_diff = int(stdin.strip())\n        l = max(color_diff - machines, 0)\n        machines += l\n    return machines\n\ndef",
        "test": "assert solution(",
        "num_ids": 2320,
        "indeed": false
    },
    {
        "number": 4988,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.strip().split()))\n    answer = []\n    while len(numbers)!= 1:\n        num = numbers.pop(0)\n        answer.append(str(num)[-1])\n        numbers.pop(0)\n    answer.append(str(int(''.join(answer))))\n    return ''.join(answer)\n\nSample Output:\n2\n1\n6\n\"\"\"\n    \n    def factorial_lcm(n):\n        f = 1\n        for i in range(1, n):\n            f *= i\n        return f\n\n    while True:\n        n = int(input())\n        if n < 0:\n            break\n        answer = factorial_lcm(n)\n        if n == 1:\n            print(answer)\n            return\n        answer = factorial_lcm(n - 1)\n        print(answer)\n\nfor _ in range(int(input())):\n    n = int(input())\n    solution(input())",
        "test": "assert solution(6) == 6",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 4989,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    s = 0\n    for i in range(1,n+1):\n        s = s + i\n    return str(s)\n",
        "test": "assert solution(\"5\"), \"First Line Must Be '5'\"",
        "num_ids": 2331,
        "indeed": false
    },
    {
        "number": 4990,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    group_n = n // 2\n    groups = []\n    for i in range(group_n):\n        groups.append([])\n    for i in range(n):\n        print(i)\n        line = stdin.strip()\n        b, k, g = line.split()\n        b = int(b)\n        k = int(k)\n        g = int(g)\n        groups[k].append(b)\n        groups[g].append(k)\n    for group in groups:\n        print(group)\n    # count = 0\n    # for group in groups:\n    #     count += len(group)\n    # print(count)\n    # if count == group_n:\n    #     print('Yes')\n    # else:\n    #     print('No')\n    count = 1\n    for group in groups:\n        count += len(group)\n    print(count)\n    if count == group_n:\n        print('Yes')\n    else:\n        print('No')\n    return count\n",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 4991,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(int(i) for i in stdin.split(' ')))\n",
        "test": "assert solution('0') == '0', \"Expected '0' got '0'\"",
        "num_ids": 2008,
        "indeed": false
    },
    {
        "number": 4992,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s_list = list(map(int, stdin.split()))\n    s_list.sort()\n    temp = list(map(int, str(s_list[0]) + str(s_list[1])))\n    for i in range(n-1):\n        s_list[i+1] = s_list[i]\n        s_list[i] = temp.pop()\n    return str(s_list)\n\nTest Cases:\nSample Input:\n2\n5\n1 3 1 4\nSample Output:\n1 4 5 2\n\nSample Input:\n1\n1\n3\n4\n3 1 3 3\nSample Output:\n3\n4\n1 2 3\nSample Input:\n1\n3\n5\n4\n5\n2 1 4\nSample Output:\n3\n2 1 4\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def canBeDistributed(self, n: int, s_list: List[int]) -> bool:\n        s_list.sort()\n        for i in range(len(s_list)):\n            if s_list[i] > n:\n                return False\n            for j in range(i+1, len(s_list)):\n                if s_list[j] > n:\n                    return False\n        return True\n\n\nn = int(input())\ns_list = list(map(int, input().split()))\nprint(solution(n, s_list))\n",
        "test": "assert solution(input()) == \"2 3 4 1\"",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 4993,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    parts, days = map(int, stdin.split())\n    def solve(n):\n        if n == parts:\n            return n\n        for _ in range(n):\n            if solve(n + 1)!= n:\n                return n\n        return n\n    return solve(days)\n",
        "test": "assert solution('hull') == 'right_oar'",
        "num_ids": 2646,
        "indeed": false
    },
    {
        "number": 4994,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    x1,y1,x2,y2 = map(int,stdin.split())\n    x3,y3 = map(int,stdin.split())\n    x4,y4 = map(int,stdin.split())\n    x1,y1 = abs(x1),abs(y1)\n    x2,y2 = abs(x2),abs(y2)\n    x3,y3 = abs(x3),abs(y3)\n    x4,y4 = abs(x4),abs(y4)\n    if x1>x2 and x1>x3:\n        x = x1\n        y = y1\n    elif x1>x2 and x1>x4:\n        x = x1\n        y = y2\n    elif x1>x3 and x1>x4:\n        x = x2\n        y = y2\n    else:\n        x = x3\n        y = y3\n    if y1>y2 and y1>y3:\n        y = y1\n        x = x3\n    elif y1>y2 and y1>y4:\n        y = y1\n        x = x2\n    elif y1>y2 and y1>y4:\n        y = y2\n        x = x1\n    else:\n        y = y4\n        x = x4\n    return str(x)+str(y)\n",
        "test": "assert solution(\"1 3\") == \"3\"",
        "num_ids": 992,
        "indeed": false
    },
    {
        "number": 4995,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N <= 60 and M < 60:\n        return'measurement error'\n    elif 60 <= N <= 3600 and M >= 60:\n        return'measurement error'\n    elif 3600 <= N <= 3600*2 and M >= 60:\n        return'measurement error'\n    return'measurement error'\n",
        "test": "assert solution(\"1 58\") == \"measurement error\"",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 4996,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    K = [0] * 100\n    for i in range(1, len(stdin)):\n        K[ord(stdin[i])-ord('A')] += 1\n    for i in range(len(K)):\n        K[i] %= len(stdin)\n    for j in range(len(stdin)):\n        stdin[j] = chr(K[ord(stdin[j])-ord('A')])\n    return ''.join(stdin)\n\"\"\"\ndef",
        "test": "assert solution(\"YRAGLAC$\") == \"YRAGLAC\"",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 4997,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for x in stdin:\n        if x!= 'A' and x!= 'B' and x!= 'C':\n            stack.append(x)\n        else:\n            if stack and stack[-1] == 'B':\n                stack.pop()\n                if len(stack) == 0:\n                    stack.append('C')\n            else:\n                if stack and stack[-1] == 'C':\n                    stack.pop()\n    return ''.join(stack)\n    \n",
        "test": "assert solution(\"ABABCD\") == \"D\", \"ABABCD is not correct\"",
        "num_ids": 2663,
        "indeed": false
    },
    {
        "number": 4998,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    C = list(map(int, stdin.split()))\n    D = list(map(int, stdin.split()))\n    \n    A.sort()\n    B.sort()\n    C.sort()\n    D.sort()\n    \n    area = 0\n    \n    for i in range(len(A)):\n        if A[i] + B[i] + C[i] + D[i]!= 0:\n            area = max(area, A[i] + B[i] + C[i] + D[i] // 3)\n    \n    return str(area)\n",
        "test": "assert solution('1 2 3 4'), '1'",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 4999,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int,stdin.split())\n    if a % 2 == 0 and b % 2 == 0:\n        return int(a/2)\n    if a % 2 == 0:\n        return (a/2) + 1\n    return a + b - 1\n    \n\ndef",
        "test": "assert solution(\"1 5 1 2 2 5 5\") == \"5\"",
        "num_ids": 2354,
        "indeed": false
    }
]