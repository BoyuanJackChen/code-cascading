[
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 4 1\") == \"5\"\nassert solution(\"2 4 3\") == \"2\"\nassert solution(\"2 3 4 3\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2 3 4 5 6\") == \"1\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 8 6\"\nassert solution(stdin) == \"5 4\"\nassert solution(stdin) == \"5 4\"\nassert solution(stdin) == \"5 4\"\n\nRuntime: 20 ms, faster than 74.65% of Python3 online submissions for Simple Path Sum.\nMemory Usage: 13.7 MB, less than 87.51% of Python3 online submissions for Simple Path Sum.\n\"\"\"\n\nclass Solution:\n    def simplePathsWithMaxEdges(self, n: int) -> int:\n        # TODO: Write your code here\n        pass"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('4 2') == '6'\n\nassert solution('1 3') == '8'\n\nassert solution('1 4') == '5'\n\n-----Constraints-----\n0 <= n <= 10^5\n1 <= n <= 10^5\n1 <= a, b, c <= n\n\n-------------Language-------------\nPython 3.9.1 (default, May 23 2020, 10:35:48) [MSC v.1916 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> def solution(stdin):\n    n = int(stdin.strip())\n    if n % 2!= 0:\n        return -1\n    s = set()\n    for i in range(n - 1):\n        a, b = stdin[i * 2 : (i + 1) * 2].split()\n        if int(a) - 1 == int(b):\n            s.add((int(a) - 1, int(b) - 1))\n        if int(b) - 1 == int(a):\n            s.add((int(a) - 1, int(b) - 1))\n    return len(s)\n\nassert solution('2 1') == 1\n\nassert solution('6 2') == -1"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1,2,3,4,5,6') == '1 8 6'\nassert solution('1,5,6,4,3,2') == '1 8 6'\nassert solution('1,4,6,3,5,2') == '4 8 6'\nassert solution('1,3,5,2,4,6') == '3 8 6'\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5 6') == '4 5 6'\nassert solution('2 3 4') == '2 3 4'\nassert solution('2 3 4 5 6') == '2 3 4 5 6'"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"1 8 6\"\nassert solution(\"1 5 3 2 7 4\") == \"3\"\nassert solution(\"1 6\") == \"3\"\nassert solution(\"1 5 3 2 6 4\") == \"5\"\nassert solution(\"1 2 3 5 6\") == \"10\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 3 5 4 6 8\") == \"5\"\nassert solution(\"2 3 4 5 6 7 8 9\") == \"8\"\nassert solution(\"2 3 4 5 6 7 8 9 10\") == \"5\"\nassert solution(\"1 3 4 5 6 7 8 9 10\") == \"5\"\nassert solution(\"1 3 4 5 6 7 8 9 10\") == \"8\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"1 8 6\""
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == [\"20 8\", \"20 8\", \"20 8\", \"20 8\", \"20 8\", \"20 8\", \"20 8\", \"20 8\", \"20 8\", \"20 8\", \"20 8\"]\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"20 8\"\n\"\"\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 2 4 2 3 6 3\"\nassert solution(stdin) == \"2 3 2 4 1 6\"\nassert solution(stdin) == \"4 1 1 4 2\"\nassert solution(stdin) == \"1 6\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"20 8\"\nassert solution(stdin) == \"20 8 2 4 1 2 4 5\"\nassert solution(stdin) == \"20 8 4 2 4 4 5 6\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"20 8\"\nassert solution(stdin) == \"20 8 2\"\nassert solution(stdin) == \"20 8 1 2 4 1 20 4 5\"\nassert solution(stdin) == \"20 8 2 1 2 4 1 20 4 5\"\nassert solution(stdin) == \"20 8 2 1 2 4 1 20 4 5 1 2 4\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"20 8\"\n\nInput\n3\n5 3 3 3 2 2\n\nOutput\n3 5 6 3 4 6\n\"\"\"\n\nfrom itertools import permutations\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(sys.stdin.readline().rstrip()) == \"20 8\"\nassert solution(sys.stdin.readline().rstrip()) == \"20 8\"\nassert solution(sys.stdin.readline().rstrip()) == \"20 8\"\nassert solution(sys.stdin.readline().rstrip()) == \"20 8\"\nassert solution(sys.stdin.readline().rstrip()) == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"20 8\""
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"24\"\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"24\""
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"4 3 3\", \"1 2 3 4\", \"1 5 7 1 2\", \"3 5 1 2 4\", \"1 5 7 1 2\", \"1 4 7 1 2\"]) == \"24\"\nassert solution([\"5 5 4\", \"1 2 4 2 1\", \"3 5 1 2 4\", \"1 5 7 1 2\", \"3 8 7 1 2\"]) == \"56\"\nassert solution([\"4 3 3\", \"1 2 3 4\", \"1 5 7 1 2\", \"3 5 1 2 4\", \"1 5 7 1 2\", \"1 4 7 1 2\"]) == \"0\"\nassert solution([\"4 3 3\", \"1 2 3 4\", \"1 5 7 1 2\", \"3 5 1 2 4\", \"1 5 7 1 2\", \"1 4 7 1 2\"]) == \"0\"\nassert solution([\"2 2 2\", \"1 2 3 4\", \"1 5 7 1 2\", \"3 5 1 2 4\", \"1 5 7 1 2\", \"1 4 7 1 2\"]) == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 4 3\",\n    \"5 4 3\",\n    \"3 5 1 2 4\",\n    \"1 5 7 1 2\",\n    \"3 8 7 1 2\",\n    \"8 4 7 1 6\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n    \"1 2 4 2 1\",\n    \"3 6 2 1 4\",\n    \"2 5 1 2 4\",\n    \"1 1 4 2 4\",\n    \"1 7 1 4 2\",\n    \"1 4 5 2 4\",\n    \"1 7 1 2 4\",\n    \"1 4 8 2 4\",\n    \"1 6 7 1 2\",\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 24\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"5\", \"4\", \"1\", \"2\"]) == \"24\"\nassert solution([\"1\", \"2\", \"3\", \"4\"]) == \"24\"\nassert solution([\"3\", \"5\", \"3\", \"2\", \"2\"]) == \"24\"\nassert solution([\"1\", \"3\", \"4\", \"4\"]) == \"24\"\nassert solution([\"1\", \"3\", \"2\", \"4\", \"4\"]) == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 4, 5, 9, 10, 12, 14, 16, 18, 19],\n        [6, 10, 13, 17, 21, 28, 31, 34, 36, 40],\n        [1, 3, 6, 8, 10, 13, 19, 22, 26, 29]\n    ]\n) == 24\n\nprint('solution test passed')\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 24, \"incorrect result\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"24\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5') == '4'\nassert solution('7') == '1'\nassert solution('3') == '0'\nassert solution('4') == 'L'\nassert solution('5') == 'L'\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('[1, 2, 4, 3, 2]') == '4'\nassert solution('[1, 2, 4, 3, 2]') == 'L'\nassert solution('[1, 2, 4, 3, 2]') == 'R'\nassert solution('[1, 2, 4, 3, 2]') == 'L'\nassert solution('[1, 2, 4, 3, 2]') == 'L'\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\", \"2\", \"4\", \"3\", \"2\"]) == \"4\"\nassert solution([\"1\", \"2\", \"3\", \"3\", \"4\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"6\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"7\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'LRRR'\n\nassert solution(stdin) == 'LLLR'\nassert solution(stdin) == 'LRL'\nassert solution(stdin) == 'LRLLR'\nassert solution(stdin) == 'LLRLLR'\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == 'L'\nassert solution(stdin) == 'LLR'\nassert solution(stdin) == 'R'\nassert solution(stdin) == 'LRRR'\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 5 7 6 5 4 2\") == \"5 4 3 2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"1 3 5 6 5 4 2\") == \"4\"\nassert solution(\"1 3 5 6 5 4 2\") == \"1\"\nassert solution(\"2 3 4\") == \"1\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1\", \"2\", \"4\", \"3\", \"2\"]) == \"4\"\nassert solution([\"1\", \"2\", \"4\", \"3\", \"2\"]) == \"2\"\nassert solution([\"1\", \"2\", \"4\", \"3\", \"2\"]) == \"1\"\nassert solution([\"1\", \"2\", \"4\", \"3\", \"2\"]) == \"1\"\nassert solution([\"1\", \"2\", \"4\", \"3\", \"2\"]) == \"1\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"R\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"3\", \"2\", \"5\", \"2\", \"2\", \"2\"]) == \"4\"\nassert solution([\"1\", \"1\", \"2\", \"2\", \"2\", \"2\"]) == \"3\"\nassert solution([\"2\", \"4\", \"3\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"3\", \"4\", \"3\", \"1\", \"1\", \"1\"]) == \"2\"\nassert solution([\"4\", \"3\", \"1\", \"2\", \"2\", \"2\"]) == \"2\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n        \"1 2 4 3 2\",\n        \"1 3 5 6 5 4 2\"\n    ) == \"4\"\nassert solution(\n        \"1\",\n        \"1 2 3 4\"\n    ) == \"1\"\nassert solution(\n        \"1\",\n        \"1 2 4 3\"\n    ) == \"1\"\nassert solution(\n        \"1\",\n        \"1 2\"\n    ) == \"1\"\nassert solution(\n        \"1\",\n        \"1\"\n    ) == \"1\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(a) == 3\nassert solution(a) == 3\nassert solution(a) == -1"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2') == '3'\nassert solution('1') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('7') == -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == -1"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n\nprint('solution test passed')"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5 3') == 3\nassert solution('2 1 4 5 3') == 3\nassert solution('2 5 3 4 2') == -1\nassert solution('1 2 3 4 2') == -1\nassert solution('2 5 3 4 2') == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution() == -1\n\n\n-----Constraints-----\n1 <= n <= 100\n\n2 <= a[i] <= 100\n\nstdin.write(str(solution()) + '\\n')   // i represents index\n\nclass Solution:\n    def minimumDifference(self, nums: List[int]) -> int:\n        res, idx = 0, 0\n        for i in range(len(nums)):\n            res += nums[i] - nums[idx]\n            if nums[i] > nums[idx]:\n                res -= nums[i] - nums[idx]\n            idx = i\n        return res"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"6\\n1 4 4 7 4 1\\n1 2 3 3 7\\n2 2 5 2 5\\n2 2 5 2 5\\n3 2 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3 3 7\\n3 3 3"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 3 7 5') == 'NO', 'Bad input'\nassert solution('0 0 1000000 1000000') == 'YES', 'Bad input'\nassert solution('500000 0 1000000 1000000') == 'YES', 'Bad input'\nassert solution('3 0 4 9') == 'YES', 'Bad input'\nassert solution('5 2 3 4') == 'YES', 'Bad input'\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 3 4 4') == 'YES'\nassert solution('2 3 6 5') == 'YES'\nassert solution('3 3 7 5') == 'NO'\nassert solution('5 2 10 5') == 'NO'\nassert solution('0 0 4 6') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\nfor line in stdin.split(\"\\n\"):\n    try:\n        a, b, c = list(map(int, line.split(\" \")))\n        assert a <= b <= c\n    except:\n        pass\n\n-----Solution-----"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 4 4\") == \"YES\"\nassert solution(\"1 3 5 5\") == \"YES\"\nassert solution(\"3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\") == \"NO\"\nassert solution(\"5 2 10 5\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2 4 4\") == \"YES\"\nassert solution(\"3 3 7 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 4 6\") == \"YES\"\nassert solution(\"0 0 7 4\") == \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 3 7 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 8\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1098) == 20\n\n\n'''"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\nSample Input\n\n8\n\nSample Output\n\n2\n\nExplanation\n\nHere are the numbers that are reachable from $1098$:\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1098) == 20\nassert solution(10) == 1\nassert solution(10098) == 19\n\n\n-----Constraints-----\n0 < stdin.readline.caller(1) < 10^4\n\n[input]\n\nA non-negative integer stdin.readline.caller(1)\n\nConstraints\n\n1 <= stdin.readline.length <= 10^5\n\n[output]\n\nPrint the number of different numbers that are reachable from $n$.\n\n[constraints]\n\n1 <= stdin.readline.length <= 10^4\n\n[input]\n\n3\n\nOutput\n3\n\n[input]\n\n5\n\nOutput\n5\n\n[input]\n\n10\n\nOutput\n3\n\n[input]\n\n8\n\nOutput\n6\n\n[input]\n\n14\n\nOutput\n12\n\n[input]\n\n15\n\nOutput\n0\n\n-----Solution-----"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '20'\n\nExplanation\nsolution(stdin) is \"20\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^4\nstdin is guaranteed to be a valid input.\n\n\n-----Submissions-----\n7\n\n\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"20\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1098) == 20\nassert solution(1109) == 16\nassert solution(1024) == 12\nassert solution(20) == 10\nassert solution(199) == 10\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 19\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 19\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '20'\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n\n\n-----Time complexity-----\nO(N) for all $N$ is the only constant that is used.\n\n\n-----Space Complexity-----\nO(N)\n\n\n\n-----Bug Fixes-----\nHere is a solution to the problem: you can use a dictionary to reduce to O(N) space. For example,\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\\n7\\n5 0 0 2 4\\n7 0 0 1 4\\n5 0 0 1 4\\n7 0 0 1 4\\n5 0 0 1 4\\n7 0 0 1 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7\\n7\\n7\\n5 0 0 1 4\\n7 0 0 1 4\\n5 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n7\\n5 0 0 1 4\\n7 0 0 1 4\\n5 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7\\n7\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n7 0 0 1 4\\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 0 0 0\") == \"2 1 0 0 0\"\nassert solution(\"3 4 0 0 0\") == \"3 1 4 0 0\"\nassert solution(\"3 0 0 0 0\") == \"0 3 1 0 0\"\nassert solution(\"5 4 0 0 0\") == \"5 1 4 0 0\"\nassert solution(\"4 4 0 0 0\") == \"4 1 4 0 0\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '5 3 1 2 4'\nassert solution(stdin) == '7 3 2 1 4'\nassert solution(stdin) == '7 4 2 3 6 5 1'\nassert solution(stdin) == '7 4 2 3 6 5 1'"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '5 3 1 2 4'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7 4 0 3 0 5 1'\nassert solution(stdin) == '7 4 2 3 6 5 1'\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5 3 1 2 4\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"7 3 2 1 4 5 6\"\nassert solution(stdin) == \"7 3 2 1 4 5 6\"\nassert solution(stdin) == \"7 3 2 1 4 5 6\"\nassert solution(stdin) == \"7 3 2 1 4 5 6\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2 3 1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 0 0 0 0'), '0'\nassert solution('2 0 0 0 0'), '0'\nassert solution('2 0 1 0 0'), '0'\nassert solution('2 3 0 0 0'), '1'\nassert solution('2 4 0 0 0'), '1'\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5\\n5\\n2\\n2\\n0\\n0\\n0\\n2\\n2') == '2 3 1 2 4'\nassert solution('5\\n7\\n7\\n7\\n7\\n7') == '7 4 2 3 6 5 1'\nassert solution('7\\n7\\n7\\n7\\n7') == '7 4 2 3 6 5 1'\nassert solution('7\\n5\\n7\\n5') == '2 1 0 0 0'\nassert solution('5\\n0\\n0\\n0\\n0\\n0') == '2 3 1 2 4'"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'YES'\n\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"2 2\", \"1 3 2\"]) == \"YES\"\nassert solution([\"2 3\", \"1 4 3\", \"1 2 4\", \"1 3 3\"]) == \"NO\"\n\n\n-----Time complexity-----\n\nTime complexity of the code is O(n).\n\nTime complexity of solution is O(k)\n\nSpace complexity is O(n).\n\"\"\"\n\nclass Solution:\n    def solve(self,n,a):\n        if len(a)==1:\n            print(\"YES\")\n            return\n        \n        \n        colors=[]\n        #Get colors with minimum color\n        #We will use minimum color of all elements of a as colors\n        #We will keep track of colors with smallest score\n        min_score=sys.maxsize\n        \n        for i in range(n):\n            min_score=min(min_score,a[i])\n            colors.append(a[i])\n        print(colors)\n        #Sort the elements of array in decreasing order\n        sorted_colors=sorted(colors,key=lambda a:a)\n        \n        #Start to print unique colors\n        print(sorted_colors)\n        print(\"NO\")\n        return"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n\nInput\n4 3\n1 2 3\n\nOutput\nYES\n1 2 3 1 1\n\nInput\n4 2\n1 1 2 2\n\nOutput\nYES\n1 2 1 2 1\n\nInput\n5 2\n3 2 1 2 3\n\nOutput\nYES\n2 1 1 2 1 1 1\n\n\"\"\""
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"4 2\"\n) == \"YES\"\nassert solution(\n    \"5 2\"\n) == \"YES\"\nassert solution(\n    \"5 2\"\n) == \"NO\"\nassert solution(\n    \"5 2\"\n) == \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 2 3\"), \"NO\"\nassert solution(\"3 2 1 2 3\"), \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3, 'incorrect answer'\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 7\nassert solution(stdin) == 9\nassert solution(stdin) == 11\nassert solution(stdin) == 14\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '3'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3,1) == 2\nassert solution(3,10) == 3\nassert solution(1,2) == 1\nassert solution(4,3) == 4\nassert solution(5,2) == 4\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 6\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(11, 5, 2) == 3\nassert solution(11, 5, 1) == 1\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 1\nassert solution(input()) == 3\nassert solution(input()) == 4\nassert solution(input()) == 10\nassert solution(input()) == 16\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 1\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"11 5 2\"\n    ) == \"3\"\nassert solution(\n    \"11 5 1\"\n    ) == \"1\"\nassert solution(\n    \"11 5 1\"\n    ) == \"3\"\nassert solution(\n    \"11 5 1\"\n    ) == \"2\"\nassert solution(\n    \"11 5 1\"\n    ) == \"1\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(11, 5, 2) == 1\nassert solution(11, 5, 1) == 3\nassert solution(11, 5, 0) == 4\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('') == 'YES'\nassert solution('13') == 'YES'\nassert solution('2') == 'NO'\nassert solution('15') == 'NO'\nassert solution('3') == 'NO'\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5,3) == \"NO\"\nassert solution(5,2) == \"YES\"\nassert solution(5,1) == \"NO\"\nassert solution(5,4) == \"YES\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 2 3 2\") == \"YES\"\nassert solution(\"4\") == \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"2\", \"1\"]) == \"NO\"\nassert solution([\"5\", \"5\"]) == \"NO\"\nassert solution([\"3\", \"2\", \"2\", \"3\", \"1\"]) == \"YES\"\nassert solution([\"1\", \"2\", \"3\", \"2\", \"2\", \"1\"]) == \"NO\"\nassert solution([\"1\", \"2\", \"3\", \"1\"]) == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"3\", \"3\", \"1\", \"1\", \"1\"]) == \"NO\"\nassert solution([\"3\", \"3\", \"1\", \"1\", \"1\"]) == \"YES\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"YES\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"YES\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    inp:\n    [\n        \"5\",\n        \"3\",\n        \"1 2 1\",\n        \"5\",\n        \"1 2 2 3 2\",\n        \"3\",\n        \"1 1 2\",\n        \"4\",\n        \"1 2 2 1\",\n        \"10\",\n        \"1 1 2 2 3 3 4 4 5 5\",\n    ]\n    ) == \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input() == \"99999\") == 16\nassert solution(input
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 99"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '99999'\nassert solution(stdin) == '33'\n\n\n-----Advanced-----\n\nAlthough a memoization approach is impractical, it works in a similar manner as BFS. You can use a stack to solve the problem. In a recursive implementation, the stack is a recursive stack. A stack is like a queue. Each element in the queue is a value in the queue. So, if we assume that a value in the queue is less than or equal to the first element in the queue, then that value is a valid value in the queue. Otherwise, the queue is empty. The only condition that is not fulfilled is when the queue is empty.\n\nYou can also solve this problem using a stack, but since the number of operations in each operation is small, the complexity of the solution is exponential.\n\nYou have to implement the algorithm in a stack for computing the result. The stack is a stack of the elements with the order of operations that the stack needs to keep.\n\nTo avoid the sorting problem in the algorithm, you can put the elements in the stack as (number, value).\nThen the pop operation always requires (number, value) in the stack. If the stack is empty, then it is not worth the computation. Otherwise, the stack will have the elements that comes from the queue first.\n\nTo avoid the sorting problem, we can put the elements in the stack in sorted order. So, when sorting the stack, the number of operations increases.\n\nYou can put the elements in the stack in arbitrary order. So, the elements in the stack will have the same order of operations as the stack. For example, if the stack is {1,2,3}, then the number of operations increases.\n\nSo, you can put the elements in the stack in ascending order. So, the elements in the stack will have the same order as the stack.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers $n$ and $a$.\n\nThe second line contains a string of $n$ space-separated integers, denoting the number of digits in $a$.\n\nThe third line contains exactly $a$ integers, denoting the number of digits in $a$.\n\n-----Output-----\n\nPrint the maximum possible number you can obtain applying the operation described in the statement.\n\n\n-----Example 1-----\n\nInput\n\n3\n1\n1 2 3 4 5 6 7 8 9 10 11\n\nOutput\n\n8\n\nExplanation\n\nThe operations in the operation list are: 2, 5, 4, 5, 1, 2, 5, 3, 4, 1, 1, 3, 5, 3, 7, 5, 7, 7, 11, 7, 11, 9, 7, 5, 7, 7, 11.\n\n\n-----Example 2-----\n\nInput\n\n3\n1 1 1 1 1 1 1 1 1\n\nOutput\n\n15\n\nExplanation\n\nThe operations in the operation list are: 2, 5, 4, 5, 1, 2, 5, 3, 4, 1, 1, 3, 5, 3, 7, 5, 7, 7, 11, 7, 11, 9, 7, 5, 7, 7, 11.\n\n\n-----Example 3-----\n\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10 11\n\nOutput\n\n99\n\nExplanation\n\nThe operations in the operation list are: 2, 5, 4, 5, 1, 2, 5, 3, 4, 1, 1, 3, 5, 3, 7, 5, 7, 7, 11, 7, 11, 9, 7, 5, 7, 7, 11.\n\n\n------Expected output------------\n\nTest case 1:\nInput:\n3\n1 1 1 1 1 1 1 1 1\nOutput:\n15\nExpected output:\n99\nTest case 1:\nInput:\n3\n2 3 4 5 6 7 8 9 10 11\nOutput:\n99\nExpected output:\n99\nTest case 2:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 3:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\n\nTest case 4:\nInput:\n1\n1 2 3 4 5 6 7 8 9 10 11\nOutput:\n99\nExpected output:\n99\nTest case 5:\nInput:\n2\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 6:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 7:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 8:\nInput:\n1\n3\n1 2 3 4 5 6 7 8 9 10 11\nOutput:\n99\nExpected output:\n99\nTest case 9:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 10:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 11:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 12:\nInput:\n2\n1 1 1 1 1 1 1 1 1\nOutput:\n15\nExpected output:\n99\nTest case 13:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 14:\nInput:\n3\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 15:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 16:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 17:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 18:\nInput:\n3\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 19:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 20:\nInput:\n1\n3\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 21:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 22:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 23:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 24:\nInput:\n1\n1 1 1 1 1 1 1 1 1\nOutput:\n99\nExpected output:\n99\nTest case 25:"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4) == '1557'\nassert solution(5) == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"99999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '99999'\n\n\n-----Constraints-----\n1 <= n <= 1e6\n1 <= a[i] <= 9\n2 <= f(i) <= 9\nf(i) = 1, 2,..., 9\nf(i) = 1, f(i) = 1\n\n\n-----Bug alert: You are not allowed to use any form of array.'''"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"123\") == \"9\"\nassert solution(\"011\") == \"8\"\nassert solution(\"0011\") == \"8\"\nassert solution(\"100011\") == \"8\"\nassert solution(\"111111\") == \"1\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '1 1 3'\nassert solution(input()) == '1 2 3'\nassert solution(input()) == '1 3'\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, \"1 2 3 4\") == \"1 1 2\"\nassert solution(1, \"5 10 15\") == \"1 1 2\"\nassert solution(1, \"15 18 21\") == \"1 1 2\"\nassert solution(1, \"100 100 101\") == \"1 1 2\"\nassert solution(1, \"1 22 29\") == \"1 1 2\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1 2 3\"\n\nassert solution(input()) == \"123 321 456\"\n\nassert solution(input()) == \"5 10 15\"\n\nassert solution(input()) == \"15 18 21\"\n\nassert solution(input()) == \"100 100 101\""
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"solution fails\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"Your solution is not correct\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"123 321 456\") == \"5\"\nassert solution(\"15 18 21\") == \"15\"\nassert solution(\"100 100 101\") == \"100\"\nassert solution(\"1 22 29\") == \"4\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"1 1 3\"\nassert solution(\"1 2 3 4\") == \"1 1 3\"\nassert solution(\"123 321 456\") == \"1 1 3\"\nassert solution(\"1 10 15\") == \"1 1 3\"\nassert solution(\"15 18 21\") == \"1 1 3\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 1 3\"\nassert solution(stdin) == \"121\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3 2 3\"\nassert solution(stdin) == \"3 2 3\"\nassert solution(stdin) == \"3 2 3\"\nassert solution(stdin) == \"3 2 3\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(in_data) == out_data\nassert solution(in_data) == out_data\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"0\"\n\n\n-----Algorithm-----\n\nwe calculate instability of the array as a sum of squares of the elements in the array plus one (the smallest element), so we calculate the sum of squares of the elements in the array plus one by:\n    if the element a_i is less than the smallest element a_i, then we remove this element from the array $a$ (we want to remove one element from the array because it's smaller than the smallest element), but we do not want to remove all the elements from the array because they're larger than the smallest element, since they are now less than the smallest element).\n    if the element a_i is greater than the largest element a_i, then we remove all the elements from the array because they are smaller than the largest element, and we want to remove one element from the array, because it's greater than the largest element.\n    If both are the same, then we remove one element from the array and add the smallest element (it's smaller than the largest element).\n    So we do the same, but we do the same as the first solution.\n    To calculate the instability, we calculate the sum of squares of the array.\n\nAnd finally, we calculate the minimum possible instability of the array by:\n    if the sum of squares of the elements in the array is less than the sum of squares of the elements in the array plus one, then we remove one element from the array and add the smallest element (it's smaller than the largest element).\n    If the sum of squares of the elements in the array is greater than the sum of squares of the elements in the array plus one, then we remove all the elements from the array because they are smaller than the largest element, and we want to remove one element from the array, because it's greater than the largest element.\n    If both are the same, then we remove one element from the array and add the smallest element (it's smaller than the largest element).\n    So we do the same as the first solution, and we do the same as the second solution.\n\nWe calculate the instability as a sum of squares of the array plus one, which is the smallest element.\n\nSince we have to remove one element from the array, we can do it as follows:\n    if the sum of squares of the elements in the array is less than the sum of squares of the elements in the array plus one, then we remove one element from the array and add the smallest element (it's smaller than the largest element).\n    if the sum of squares of the elements in the array is greater than the sum of squares of the elements in the array plus one, then we remove all the elements from the array because they are smaller than the largest element, and we want to remove one element from the array, because it's greater than the largest element.\n    If both are the same, then we remove one element from the array and add the smallest element (it's smaller than the largest element).\n    So we do the same as the first solution.\n    So we do the same as the second solution.\n\nNow, we calculate the minimum possible instability of the array by:\n    if the sum of squares of the elements in the array is less than the sum of squares of the elements in the array plus one, then we remove one element from the array and add the smallest element (it's smaller than the largest element).\n    if the sum of squares of the elements in the array is greater than the sum of squares of the elements in the array plus one, then we remove all the elements from the array because they are smaller than the largest element, and we want to remove one element from the array, because it's greater than the largest element.\n    if both are the same, then we remove one element from the array and add the smallest element (it's smaller than the largest element).\n    So we do the same as the first solution.\n    So we do the same as the second solution.\n\nSo, we calculate the instability as a sum of squares of the array plus one, which is the smallest element.\n\nWe calculate the minimum possible instability of the array by:\n    if the sum of squares of the elements in the array is less than the sum of squares of the elements in the array plus one, then we remove one element from the array and add the smallest element (it's smaller than the largest element).\n    if the sum of squares of the elements in the array is greater than the sum of squares of the elements in the array plus one, then we remove all the elements from the array because they are smaller than the largest element, and we want to remove one element from the array, because it's greater than the largest element.\n    If both are the same, then we remove one element from the array and add the smallest element (it's smaller than the largest element).\n    So we do the same as the first solution.\n    So we do the same as the second solution.\n\nFinally, we calculate the minimum possible instability of the array by:\n    if the sum of squares of the elements in the array is less than the sum of squares of the elements in the array plus one, then we remove one element from the array and add the smallest element (it's smaller than the largest element).\n    if the sum of squares of the elements in the array is greater than the sum of squares of the elements in the array plus one, then we remove all the elements from the array because they are smaller than the largest element, and we want to remove one element from the array, because it's greater than the largest element.\n    If both are the same, then we remove one element from the array and add the smallest element (it's smaller than the largest element).\n    So we do the same as the first solution.\n    So we do the same as the second solution.\n\nFinally, we calculate the minimum possible instability of the array by:\n    if the sum of squares of the elements in the array is less than the sum of squares of the elements in the array plus one, then we remove one element from the array and add the smallest element (it's smaller than the largest element).\n    if the sum of squares of the elements in the array is greater than the sum of squares of the elements in the array plus one, then we remove all the elements from the array because they are smaller than the largest element, and we want to remove one element from the array, because it's greater than the largest element.\n    If both are the same, then we remove one element from the array and add the smallest element (it's smaller than the largest element).\n    So we do the same as the first solution.\n    So we do the same as the second solution.\n\nTo calculate the minimum possible instability of the array by:\n    if the sum of squares of the elements in the array is less than the sum of squares of the elements in the array plus one, then we remove one element from the array and add the smallest element (it's smaller than the largest element).\n    if the sum of squares of the elements in the array is greater than the sum of squares of the elements in the array plus one, then we remove all the elements from the array because they are smaller than the largest element, and we want to remove one element from the array, because it's greater than the largest element.\n    If both are the same, then we remove one element from the array and add the smallest element (it's smaller than the largest element).\n    So we do the same as the first solution.\n    So we do the same as the second solution.\n\nTo calculate the minimum possible instability of the array by:\n    if the sum of squares of the elements in the array is less than the sum of squares of the elements in the array plus one, then we remove one element from the array and add the smallest element"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n\nExplanation\nSolution 1:\nGiven an array of integers $a$ with $n$ elements, you are given an array $a$ consisting of $n$ integers.\n\nRemove at most $n - 1$ elements from this array.\n\nRemaining $n - 1$ elements will be the rest of the array, and the first $n - 1$ elements will also be the last $n - 1$ elements.\n\nYour choice of best solution will be an infinite number of numbers with the minimum possible instability.\n\nSo, the integer n, the minimal number of elements that you need to remove, is $n - 1$.\n\nSolution 2:\nGiven an array $a$, you are given an array $a$ consisting of $n$ integers.\n\nRemove exactly one element from this array to minimize instability of the resulting $(n-1)$-elements array.\n\nRemaining $n - 1$ elements will be the rest of the array, and the first $n - 1$ elements will also be the last $n - 1$ elements.\n\nYour choice of best solution will be an infinite number of numbers with the minimum possible instability.\n\nSo, the integer n, the minimum number of elements that you need to remove, is $n$.\n\nSolution 3:\nGiven an array $a$ consisting of $n$ integers, you are given an array $a$ consisting of $n$ integers.\n\nRemove the two smallest elements from the array $a$.\n\nRemaining $n - 1$ elements will be the rest of the array, and the first $n - 1$ elements will also be the last $n - 1$ elements.\n\nYour choice of best solution will be an infinite number of numbers with the minimum possible instability.\n\nSo, the integer n, the minimum number of elements that you need to remove, is $n$.\n\nSolution 4:\nGiven an array $a$ consisting of $n$ integers, you are given an array $a$ consisting of $n$ integers.\n\nYou have to remove the smallest number from this array to minimize the array's instability.\n\nRemaining $n - 1$ elements will be the rest of the array, and the first $n - 1$ elements will also be the last $n - 1$ elements.\n\nYour choice of best solution will be an infinite number of numbers with the minimum possible instability.\n\nSo, the integer n, the minimum number of elements that you need to remove, is $n$.\n\nSolution 5:\nGiven an array $a$ consisting of $n$ integers, you are given an array $a$ consisting of $n$ integers.\n\nRemove the smallest number from the array to minimize the array's instability.\n\nRemaining $n - 1$ elements will be the rest of the array, and the first $n - 1$ elements will also be the last $n - 1$ elements.\n\nYour choice of best solution will be an infinite number of numbers with the minimum possible instability.\n\nSo, the integer n, the minimum number of elements that you need to remove, is $n$.\n\nSolution 6:\nGiven an array $a$ consisting of $n$ integers, you are given an array $a$ consisting of $n$ integers.\n\nRemove the largest number from the array to minimize the array's instability.\n\nRemaining $n - 1$ elements will be the rest of the array, and the first $n - 1$ elements will also be the last $n - 1$ elements.\n\nYour choice of best solution will be an infinite number of numbers with the minimum possible instability.\n\nSo, the integer n, the minimum number of elements that you need to remove, is $n$.\n\nSolution 7:\nGiven an array $a$ consisting of $n$ integers, you are given an array $a$ consisting of $n$ integers.\n\nRemove the smallest number from the array to minimize the array's instability.\n\nRemaining $n - 1$ elements will be the rest of the array, and the first $n - 1$ elements will also be the last $n - 1$ elements.\n\nYour choice of best solution will be an infinite number of numbers with the minimum possible instability.\n\nSo, the integer n, the minimum number of elements that you need to remove, is $n$.\n\nSolution 8:\nGiven an array $a$ consisting of $n$ integers, you are given an array $a$ consisting of $n$ integers.\n\nRemove the largest number from the array to minimize the array's instability.\n\nRemaining $n - 1$ elements will be the rest of the array, and the first $n - 1$ elements will also be the last $n - 1$ elements.\n\nYour choice of best solution will be an infinite number of numbers with the minimum possible instability.\n\nSo, the integer n, the minimum number of elements that you need to remove, is $n$.\n\nSolution 9:\nGiven an array $a$ consisting of $n$ integers, you are given an array $a$ consisting of $n$ integers.\n\nRemove the smallest number from the array to minimize the array's instability.\n\nRemaining $n - 1$ elements will be the rest of the array, and the first $n - 1$ elements will also be the last $n - 1$ elements.\n\nYour choice of best solution will be an infinite number of numbers with the minimum possible instability.\n\nSo, the integer n, the minimum number of elements that you need to remove, is $n$.\n\nSolution 10:\nGiven an array $a$ consisting of $n$ integers, you are given an array $a$ consisting of $n$ integers.\n\nRemove the largest number from the array to minimize the array's instability.\n\nRemaining $n - 1$ elements will be the rest of the array, and the first $n - 1$ elements will also be the last $n - 1$ elements.\n\nYour choice of best solution will be an infinite number of numbers with the minimum possible instability.\n\nSo, the integer n, the minimum number of elements that you need to remove, is $n$.\n\nSolution 11:\nGiven an array $a$ consisting of $n$ integers, you are given an array $a$ consisting of $n$ integers.\n\nRemove the smallest number from the array to minimize the array's instability.\n\nRemaining $n - 1$ elements will be the rest of the array, and the first $n - 1$ elements will also be the last $n - 1$ elements.\n\nYour choice of best solution will be an infinite number of numbers with the minimum possible instability.\n\nSo, the integer n, the minimum number of elements that you need to remove, is $n$.\n\nSolution 12:\nGiven an array $a$ consisting of $n$ integers, you are given an array $a$ consisting of $n$ integers.\n\nRemove the largest number from the array to minimize the array's instability.\n\nRemaining $n - 1$ elements will be the rest of the array, and the first $n - 1$ elements will also be the last $n - 1$ elements.\n\nYour choice of best solution will be an infinite number of numbers with the minimum possible instability.\n\nSo, the integer n, the minimum number of elements that you need to remove, is $n$.\n\nSolution 13:\nGiven an array $a$ consisting of $n$ integers, you are given an array $a$ consisting of $n$ integers.\n\nRemove the smallest number from the array to minimize the array's instability.\n\nRemaining $n - 1$ elements will be the rest of the array, and the first $n - 1$ elements will"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"4 3 3 7\"\n) == \"2\"\nassert solution(\n    \"2 100000\"\n) == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2, [3, 3, 7, 7]) == 2\nassert solution(2, [1, 100000, 1, 100000]) == 0\nassert solution(2, [1, 100000, 1, 100000, 7]) == 2\nassert solution(2, [1, 100000, 1, 100000, 7, 7]) == 0\nassert solution(2, [1, 100000, 1, 100000, 7, 7, 7]) == 0\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('100000') == '0'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"0\", \"Your code should return \\\"0\\\"\"\nassert solution(\"4\") == \"2\", \"Your code should return \\\"2\\\"\"\nassert solution(\"1\") == \"1\", \"Your code should return \\\"1\\\"\"\nassert solution(\"100000\") == \"0\", \"Your code should return \\\"0\\\"\""
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('1 2 3') == '1 3'\nassert solution('1 1 1') == '1'\nassert solution('1 3') == '3'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '0 0 0'\nassert solution('4 9 9') == '0 0 0'\nassert solution('9 9 9') == '0 0 0'\nassert solution('3 1 1') == '0 0 0'\nassert solution('2 3 3') == '0 0 0'\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input() ) == -1, \"Input is not valid!\""
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 1\") == \"1 2 1\"\nassert solution(\"2 3 2\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"4 7 2\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"3 9 9\") == \"3 9 9\"\nassert solution(\"3 10 9\") == \"3 9 9\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 3 5\") == \"0\"\nassert solution(\"3 1 3\") == \"1\"\nassert solution(\"2 3 4 3\") == \"2\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= m <= 10^5\n0 <= s_i, d_i, c_i <= n\n\n\n-----Time Limit: 1 second\n-----Memory Limit: 10^6\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5 2') == '1 2 0 0 0'\nassert solution('3 2') == '1 3 1'\nassert solution('10 3') == '8 9 1'\nassert solution('4 7 2') == '2 4 4 1'\nassert solution('1 10 3') == '1 2 1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n\"\"\""
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n\nprint('solution(\"120 51840\") == \"7\"')\nprint('solution(\"42 42\") == \"0\"')\nprint('solution(\"48 72\") == \"1\"')\nprint('solution(\"48 72\") == \"2\"')\nprint('solution(\"48 72\") == \"3\"')\nprint('solution(\"48 72\") == \"4\"')\nprint('solution(\"48 72\") == \"5\"')\nprint('solution(\"48 72\") == \"6\"')\nprint('solution(\"48 72\") == \"7\"')\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7, 'No solution'\n\n\n-----Done-----\n'''\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 0\n\n\n-----Constraints-----\n\n1 <= n <= 10^6\n1 <= m <= 10^6\nn \\le m \\le 5*10^4\n\n\n-----Time Complexity-----\n\nO(n^2 * n)\n\nO(n)\n\n\n-----Space Complexity-----\n\nO(n)\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == -1\nassert solution(\"2 4\") == -1\nassert solution(\"1 4\") == 0\nassert solution(\"1 2 4\") == 0\nassert solution(\"1 1 4\") == 0\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\n\nInput\n120 51840\n\nOutput\n7\n\nInput\n42 42\n\nOutput\n0\n\nInput\n48 72\n\nOutput\n-1\n\n\n\nExplanation\nThere are two steps to transform $120$ to $72$: $120 \\to 240 \\to 720 \\to 1440 \\to 4320$ with three different sequences:\n\n$120 \\to 240 \\to 720 \\to 1440 \\to 4320$\n$120 \\to 240 \\to 720 \\to 1440 \\to 4320$\n$120 \\to 240 \\to 720 \\to 1440 \\to 4320$\nThe correct answer is $0$ due to the fact that in the second example, it is impossible to transform $120$ to $72$.\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(str(int(input()) + 1)) == str(-1)\n\n\n\n-----Constraints-----\n1 <= n <= 10^9\n1 <= stdin[i] <= 10^9\n0 <= stdin[i] <= 10^9\n\n\n-----Time complexity-----\nBest case: O(n)\nAverage case: O(n^2)\nWorst case: O(n^2)\n\n\"\"\""
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(0)\nassert solution(stdin) == str(-1)\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"ababababa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'cba'\n\nInput\n3 1\na\n\nOutput\na\n\nInput\n3 2\na\nb\nc\nd\ne\nf\ng\nh\n\nOutput\na\ng\nh\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'catcat'\nassert solution(input()) == 'catcatba'\nassert solution(input()) == 'catcabb'\nassert solution(input()) == 'catcatbabb'\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"ababababa\", \"Failed\"\nassert solution(inp) == \"abababababa\", \"Failed\"\nassert solution(inp) == \"ababababababa\", \"Failed\"\nassert solution(inp) == \"abababababababa\", \"Failed\"\nassert solution(inp) == \"ababababababababa\", \"Failed\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'catcat', \"unexpected output\"\n\n\n\n-----Advanced-----\n\n1. For each character, check if the index is in the range 0 \u2264 i < $n$ and this is the start index, or does it belong to the start index and end index of $s$?\nIf not, continue comparing the next character to check if it's also in the range.\n2. For each character, check if the index is in the range 0 \u2264 i < $n$ and this is the start index, or does it belong to the start index and end index of $s$?\nIf not, continue comparing the next character to check if it's also in the range.\n3. For each character, check if the index is in the range 0 \u2264 i < $n$ and this is the start index, or does it belong to the start index and end index of $s$?\nIf not, continue comparing the next character to check if it's also in the range.\n\n\"\"\"\n\nclass Solution:\n    def minSubstring(self, s: str, k: int) -> str:\n        pass"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('a', 3) == 'a'\nassert solution('a', 2) == 'aa'\nassert solution('a', 1) == 'aa'\nassert solution('a', 0) == 'a'\nassert solution('a', -1) == 'a'\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"aabccba\") == \"aba\"\nassert solution(\"abcabc\") == \"abca\"\nassert solution(\"abcabc\") == \"acba\"\nassert solution(\"aaabcc\") == \"abccba\"\nassert solution(\"aabbbaaabb\") == \"abca\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"abcde\") == \"abababababab\"\nassert solution(\"abcabc\") == \"abcabcabc\"\nassert solution(\"abcabcde\") == \"abcabcabcde\"\nassert solution(\"abcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcdef\") == \"abcabcabcabcdef\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"ab\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"]) == \"a\"\nassert solution([\"aa\"]) == \"a\"\nassert solution([\"aa\",\"aa\",\"aa\"]) == \"aa\"\nassert solution([\"ab\",\"ab\",\"ab\",\"ab\"]) == \"ab\"\nassert solution([\"aa\",\"aa\",\"aa\",\"aa\",\"aa\"]) == \"aa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"abcde\") == \"bcde\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5') == '3'\nassert solution('4') == '1'\nassert solution('5') == '0'\nassert solution('4') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"Your input is incorrect\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 2 1 2 2\") == \"3\"\nassert solution(\"4 8 3 5 2\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == 2\nassert solution(4) == 2\nassert solution(5) == 0\nassert solution(8) == 0\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\n        5\n    ]) == 3\nassert solution(\n    [\n        4\n    ]) == 0\nassert solution(\n    [\n        1, 2, 2, 2\n    ]) == 0\nassert solution(\n    [\n        1, 2, 2, 2\n    ]) == 1\nassert solution(\n    [\n        5, 2, 5, 5\n    ]) == 1\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 233\n\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 5\") == 2, \"Hello\"\n\nassert solution(\"5 7\") == 2, \"Hello\"\n\nassert solution(\"10 100\") == -1, \"Hello\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 233\n\n-----Constraints-----\n\n1 <= n <= 10^4\n1 <= k <= 10^12\n\n0 < s.length <= 2 * 10^5\ns contains only lowercase Latin letters.\n\n0 < t.length <= 10^12\nt contains only lowercase Latin letters.\n\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 233\n\n\n-----Explanation-----\n\nThe process of deletion is simple. Only one symbol may be deleted, because it can be removed by deleting some of it's remaining letters.\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 233\nassert solution(stdin) == -1"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 233\n\n-----Constraints-----\n\n1 <= k <= 10^4\n1 <= n <= 100\n\nk is greater than n and the input string is less than or equal to $10^5$.\n\nA substring is a contiguous sequence of characters.\n\nThe length of the string is $1$, and there are no additional characters in the string.\n\nThe string contains only lowercase letters and spaces.\n\nThe string ends with a space and is a subsequence of the string.\n\nExample\ns = \"aaaaa\"\nk = 6\nThe string \"asd\" is not a subsequence of \"asd\" because \"asd\" has no additional characters.\n\nThe string \"asdf\" is not a subsequence of \"asdf\" because \"asdf\" has no additional characters.\n\nThe string \"asd\" is not a subsequence of \"asdf\" because \"asd\" has no additional characters.\n\nThe string \"a\" is not a subsequence of \"asdf\" because \"a\" has no additional characters.\n\nThe string \"a\" is not a subsequence of \"asdf\" because \"a\" has no additional characters.\n\nThe string \"a\" is not a subsequence of \"asdf\" because \"a\" has no additional characters.\n\nThe string \"a\" is not a subsequence of \"asd\" because \"asd\" has no additional characters.\n\nThere are no duplicates in the set.\n\n------Submissions-----\n\nclass Solution:\n    def minimumCost(self, s: str, k: int) -> int:\n        def rec(idx):\n            if idx == len(s):\n                return 0\n            curr = s[idx]\n            count = 1\n            for j in range(len(curr)):\n                if curr[j] == \"a\":\n                    count += 1\n                else:\n                    count = rec(idx + 1)\n                    count += 1\n            return count\n\n        return rec(0)\n\nassert solution(s, k) == 4\nassert solution(s, k) == 10\nassert solution(s, k) == -1\nassert solution(s, k) == 233\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= n^2\n1 <= stdin.length <= 10^5\nstdin.length <= 10^4\n\n\n-----Time Complexity-----\nAccepted\n6,286\n\nDecisions\nAccepted\n77,946\n\nApproach\n\nInsert $S$ into the string $s$ in the same move. We can write the move from one position to the other and move from the start of the string to the end of the string.\n\nWhile the $S$ doesn't contain any duplicates, we have to find all the $S$ which is not already there.\n\nThe solution can be found by:\n\n1. Insert $S$ into the string $s$ in the same move.\n\n2. Remove $S$ from the string $s$.\n\n3. Remove $s$ from the string $s$.\n\n4. Update $S$ by inserting the $s$ in the end of the string $s$.\n\nTime\nO(n)\nSpace\nO(k)\n\n\n-----Algorithm-----\n\ninsert $S$ into the string $s$ in the same move\n\nwhile $s$ doesn't contains any duplicates\n\nremove $s$ from the string $s$\n\nupdate $s$ by inserting $s$ in the end of the string $s$.\n\nupdate $s$ by removing the $s$ from the string $s$.\n\nTime\nO(n)\nSpace\nO(k)\n\n---\n\n\n\"\"\"\nimport math\nfrom collections import Counter"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '-1'\nassert solution(input) == '-1'\nassert solution(input) == '1'\nassert solution(input) == '1'\nassert solution(input) == '0'\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('asdf') == -1, 'Error'\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 3 4'), 'NO'\nassert solution('2 3 4'), 'YES'\nassert solution('2 1 4'), 'YES'\nassert solution('1 2 3 4'), 'YES'\nassert solution('1 2 3 4'), 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"YES\"\nassert solution(\"2 3 4 5 6 7 8 9 10 11 12\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5') == 'YES'\nassert solution('2 1 2 3 4') == 'NO'"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 5 1') == 'YES'\nassert solution('4 5 3') == 'YES'\nassert solution('4 4 3') == 'NO'"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('7\\n2\\n5\\n1') == 'YES'\nassert solution('7\\n2\\n3\\n1') == 'NO'\nassert solution('3\\n1\\n3\\n1') == 'NO'\nassert solution('2\\n3\\n4\\n3') == 'YES'\nassert solution('2\\n1\\n3\\n3') == 'YES'\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '10:30'\nassert solution(stdin) == '11:11'\nassert solution(stdin) == '01:02'\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '11:11'\nassert solution(stdin) == '01:02'\nassert solution(stdin) == '00:00'\nassert solution(stdin) == '11:01'\nassert solution(stdin) == '00:00'\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10:00\") == \"00:00\"\nassert solution(\"10:00\") == \"10:00\"\nassert solution(\"01:02\") == \"00:02\"\nassert solution(\"01:02\") == \"01:02\"\nassert solution(\"10:00\") == \"00:00\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"10:30\""
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '30:00'\nassert solution(input()) == '02:02'\nassert solution(input()) == '01:02'\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:00\"\nassert solution(\"01:02\") == \"02:02\"\n\n\n-----Reminder-----\nThe contest starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts an even number of minutes (i.e. $m_1 \\% 2 = m_2 \\% 2$, where $x \\% y$ is $x$ modulo $y$). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.\n\nIn your implementation, the time taken is not counted, as it is a bit tricky to solve the challenge in the range of 0 - 23 seconds. The time taken for the midpoint is the absolute value of the time that a contest ended up at on the midpoint. So the time taken is $t \\% 2$ where $t \\% 2 = $t \\% 2$.\n\nThe contest starts from $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts at least two minutes.\n\nFor example, if the contest ends at $11:10$ then the answer is $10:30$, if the contest ends at $11:12$ then the answer is $11:11$\n\nThe time taken is also not counted, as it is a bit tricky to solve the challenge in the range of 0 - 23 seconds. The time taken for the midpoint is the absolute value of the time that a contest ended up at on the midpoint. So the time taken is $t \\% 2$ where $t \\% 2 = $t \\% 2$.\n\nThe midpoint is a more readable and simpler solution than using the divisors approach. It starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts at least two minutes.\n\nFor example, if the contest ends at $11:10$ then the answer is $10:30$, if the contest ends at $11:12$ then the answer is $11:11$\n\nThe time taken is also not counted, as it is a bit tricky to solve the challenge in the range of 0 - 23 seconds. The time taken for the midpoint is the absolute value of the time that a contest ended up at on the midpoint. So the time taken is $t \\% 2$ where $t \\% 2 = $t \\% 2$.\n\n\n-----Reminder-----\nThe contest starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts at least two minutes.\n\nIn your implementation, the time taken is not counted, as it is a bit tricky to solve the challenge in the range of 0 - 23 seconds. The time taken for the midpoint is the absolute value of the time that a contest ended up at on the midpoint. So the time taken is $t \\% 2$ where $t \\% 2 = $t \\% 2$.\n\nThe midpoint is a more readable and simpler solution than using the divisors approach. It starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts at least two minutes.\n\nFor example, if the contest ends at $11:10$ then the answer is $10:30$, if the contest ends at $11:12$ then the answer is $11:11$\n\nThe time taken is also not counted, as it is a bit tricky to solve the challenge in the range of 0 - 23 seconds. The time taken for the midpoint is the absolute value of the time that a contest ended up at on the midpoint. So the time taken is $t \\% 2$ where $t \\% 2 = $t \\% 2$.\n\n\n-----Reminder-----\nThe contest starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts at least two minutes.\n\nIn your implementation, the time taken is not counted, as it is a bit tricky to solve the challenge in the range of 0 - 23 seconds. The time taken for the midpoint is the absolute value of the time that a contest ended up at on the midpoint. So the time taken is $t \\% 2$ where $t \\% 2 = $t \\% 2$.\n\nThe midpoint is a more readable and simpler solution than using the divisors approach. It starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts at least two minutes.\n\nFor example, if the contest ends at $11:10$ then the answer is $10:30$, if the contest ends at $11:12$ then the answer is $11:11$\n\nThe time taken is also not counted, as it is a bit tricky to solve the challenge in the range of 0 - 23 seconds. The time taken for the midpoint is the absolute value of the time that a contest ended up at on the midpoint. So the time taken is $t \\% 2$ where $t \\% 2 = $t \\% 2$.\n\n\n-----Reminder-----\nThe contest starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts at least two minutes.\n\nIn your implementation, the time taken is not counted, as it is a bit tricky to solve the challenge in the range of 0 - 23 seconds. The time taken for the midpoint is the absolute value of the time that a contest ended up at on the midpoint. So the time taken is $t \\% 2$ where $t \\% 2 = $t \\% 2$.\n\nThe midpoint is a more readable and simpler solution than using the divisors approach. It starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts at least two minutes.\n\nFor example, if the contest ends at $11:10$ then the answer is $10:30$, if the contest ends at $11:12$ then the answer is $11:11$\n\nThe time taken is also not counted, as it is a bit tricky to solve the challenge in the range of 0 - 23 seconds. The time taken for the midpoint is the absolute value of the time that a contest ended up at on the midpoint. So the time taken is $t \\% 2$ where $t \\% 2 = $t \\% 2$.\n\n\n-----Reminder-----\nThe contest starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10:00\") == \"30\"\nassert solution(\"11:00\") == \"11\"\nassert solution(\"01:02\") == \"02\"\nassert solution(\"03:02\") == \"02\"\nassert solution(\"01:01\") == \"01:01\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '11:10'\nassert solution(input()) == '11:11'\nassert solution(input()) == '01:02'\nassert solution(input()) == '02:02'\n\"\"\"\nimport datetime"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"10:30\", \"Standard input 1 is not a valid input\"\nassert solution(stdin) == \"00:00\", \"Standard input 1 is not a valid input\"\nassert solution(stdin) == \"00:20\", \"Standard input 1 is not a valid input\"\nassert solution(stdin) == \"00:00\", \"Standard input 1 is not a valid input\"\nassert solution(stdin) == \"00:00\", \"Standard input 1 is not a valid input\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"02:02\"\n\n\n-----Sample Input-----\n\n6\n\n10:00\n11:00\n\nOutput\n10:30\n\nExplanation\n\nPolycarp is going to participate in the contest. It starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts an even number of minutes (i.e. $m_1 \\% 2 = m_2 \\% 2$, where $x \\% y$ is $x$ modulo $y$). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.\n\npolycarp wants to know the time of the midpoint of the contest. For example, if the contest lasts from $10:00$ to $11:00$ then the answer is $10:30$, if the contest lasts from $11:10$ to $11:12$ then the answer is $11:11$.\n\n\n-----Sample Output-----\n\nPrint two integers $h_3$ and $m_3$ ($0 \\le h_3 \\le 23, 0 \\le m_3 \\le 59$) corresponding to the midpoint of the contest in the format hh:mm. Print each number as exactly two digits (prepend a number with leading zero if needed), separate them with ':'.\n\n\n-----Examples-----\nInput\n6\n\n10:00\n11:00\n\nOutput\n10:30\n\nInput\n7:02\n11:02\n\nOutput\n7:02\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 5\nassert solution(stdin) == 6\nassert solution(stdin) == 1\n\n\n\nInput\n4\n\nOutput\n2\n\nInput\n7\n\nOutput\n1\n\nInput\n18\n\nOutput\n2\n\nInput\n46\n\nOutput\n3\n\nInput\n94\n\nOutput\n6\n\nInput\n153\n\nOutput\n1\n\nInput\n103\n\nOutput\n6\n\nInput\n153\n\nOutput\n6\n\nInput\n103\n\nOutput\n1\n\nInput\n102\n\nOutput\n1\n\nInput\n123456789\n\nOutput\n5\n\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\")\" ) == \"()\"\nassert solution(\"()\") == \"()\"\nassert solution(\"(\") == \"())\"\nassert solution(\"\") == \"\"\nassert solution(\"(\") == \"(\")\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 1\nassert solution(5) == 1\nassert solution(4) == 2\nassert solution(27) == 6\nassert solution(42) == 2\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '5'\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 5\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '5'\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"27\") == \"6\"\nassert solution(\"42\") == \"5\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    'The quick brown fox jumps over the lazy dog'\n) == 'jumps over the lazy dog'\nassert solution(\n    'The quick brown fox jumps over the lazy dog'\n) == 'jumps over the lazy dog'\nassert solution(\n    'The quick brown fox jumps over the lazy dog'\n) == 'jumps over the lazy dog'\nassert solution(\n    'The quick brown fox jumps over the lazy dog'\n) == 'jumps over the lazy dog'\nassert solution(\n    'The quick brown fox jumps over the lazy dog'\n) == 'jumps over the lazy dog'\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 6\nassert solution(stdin) == 0\nassert solution(stdin) == 7\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(lines) == \"1\"\nassert solution(lines) == \"2\"\nassert solution(lines) == \"0\"\nassert solution(lines) == \"3\"\nassert solution(lines) == \"0\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('4'),'should be 4'\nassert solution('5'),'should be 5'\nassert solution('3'),'should be 3'\nassert solution('2'),'should be 2'\nassert solution('0'),'should be 0'\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"0\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]) == \"0\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"]) == \"3\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\", \"245\", \"246\", \"247\", \"248\", \"249\", \"250\", \"251\", \"252\", \"253\", \"254\", \"255\", \"256\", \"257\", \"258\", \"259\", \"260\", \"261\", \"262\", \"263\", \"264\", \"265\", \"266\", \"267\", \"268\", \"269\", \"270\", \"271\", \"272\", \"273\", \"274\", \"275\", \"276\", \"277\", \"278\", \"279\", \"280\", \"281\", \"282\", \"283\", \"284\", \"285\", \"286\", \"287\", \"288\", \"289\", \"290\", \"291\", \"292\", \"293\", \"294\", \"295\", \"296\", \"297\", \"298\", \"299\", \"300\", \"301\", \"302\", \"303\", \"304\", \"305\", \"306\", \"307\", \"308\", \"309\", \"310\", \"311\", \"312\", \"313\", \"314\", \"315\", \"316\", \"317\", \"318\", \"319\", \"320\", \"321\", \"322\", \"323\", \"324\", \"325\", \"326\", \"327\", \"328\", \"329\", \"330\", \"331\", \"332\", \"333\", \"334\", \"335\", \"336\", \"337\", \"338\", \"339\", \"340\", \"341\", \"342\", \"343\", \"344\", \"345\", \"346\", \"347\", \"348\", \"349\", \"350\", \"351\", \"352\", \"353\", \"354\", \"355\", \"356\", \"357\", \"358\", \"359\", \"360\", \"361\", \"362\", \"363\", \"364\", \"365\", \"366\", \"367\", \"368\", \"369\", \"370\", \"371\","
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 1 3') == '1 1'\nassert solution('5 2 6') == '2 3'\nassert solution('0 4 0') == '0'\nassert solution('1 20') == '1 20'\nassert solution('5 20') == '0'\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\nprint('Examples:')\nfor example in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if solution(n, a):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(test_input) == 'YES'"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sys.argv[1]) == \"NO\"\n\nassert solution(sys.argv[2]) == \"YES\"\n\nassert solution(sys.argv[3]) == \"NO\"\n\n\n-----Constraints-----\n\n0 < n < 10^5\n0 < a_i < 10^9\n\nTime Limit: 10 seconds\n\n\n-----Example 1-----\n\nInput\n\n2\n2 5\n\nOutput\n\nNO\n\nInput\n\n3\n1 1 2\n\nOutput\n\nNO\n\n\n-----Example 2-----\n\nInput\n\n2\n3 2\n\nOutput\n\nYES\n\n\"\"\"\nimport math\n\nimport sys\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\n\nn, *bricks = map(int, input().split())\n\nwall = defaultdict(list)\nfor i in range(n):\n    for j in range(i + 1, n):\n        wall[i].append(j)\n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        wall[i].append(j)\n\nfor i, val in enumerate(bricks):\n    for j in range(i, n):\n        if val == 0:\n            wall[j].remove(i)\n        else:\n            wall[j].remove(i - 1)\n\ntotal_bricks = []\nfor i, val in enumerate(wall):\n    total_bricks.append(len(val))\n\ntotal_bricks = sum(total_bricks)"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 2 3 5 6 7 8\") == \"YES\"\nassert solution(\"1 3 1 4 3\") == \"NO\"\nassert solution(\"2 5 1 5 4 5 6 6 7\") == \"NO\"\nassert solution(\"2 1 3 2\") == \"YES\"\nassert solution(\"2 2 1 2\") == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\"\n\n\n### \uc774 \ucf54\ub4dc\ub294 \ubaa8\ub4e0 \uacbd\uc6b0\ub97c \ud569\uce5c\ub2e4. \uadf8\ub9ac\uace0 \ud55c \ubc88\ub9cc \ubc18\ubcf5\ub418\ub294 \uacbd\uc6b0\ub97c \ud328\uc558\ub2e4.\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"YES\"\nassert solution(\"5 1\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"2 4 3\") == \"NO\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\n-----Constraints-----\n1 <= n, k <= 100\n0 <= s.length <= 200\ns contains only lowercase English letters\n\nThis function should return an integer.\nInput Format\n\nThe first line contains two integers n and k.\n\nThe second line contains a string $s$ consisting of $n$ lowercase Latin letters.\n\nConstraints\n\nOutput Format\n\nPrint one integer \u2014 if it is impossible to obtain the set $S$ of size $k$, print -1. Otherwise, print the minimum possible total cost to do it.\n\nSample Input\n\n4 5\nasdf\n\nSample Output\n\n4\n\nExplanation\n\nIn this example we can generate $S$ = { \"asdf\", \"asd\", \"adf\", \"asf\", \"sdf\" }. The cost of the first element in $S$ is $0$ and the cost of the others is $1$. So the total cost of $S$ is $4$.\n\n\"\"\"\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        if not s: return 0\n        \n        d = {}\n        i = 0\n        for j in range(len(s)):\n            \n            if s[j] in d:\n                i = max(i, d[s[j]] + 1)\n            d[s[j]] = j\n        \n        return i\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 233, \"Test Failed\""
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 10\n\n\"\"\"\nimport math"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"6 9 8 10\"\n    ) == 233\nassert solution(\"3 2 4 0\") == -1\nassert solution(\"1 1 1 1 1\") == -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('asdf') == 'asdf'\nassert solution('asd') == 'asd'\nassert solution('asd') == -1"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 233\nassert solution(stdin) == 233\nassert solution(stdin) == 233\nassert solution(stdin) == 233\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 5 9 6 2 4 7\"\n    ) == \"2\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"asdf\") == \"asd\", \"failed\"\nassert solution(\"asdf\") == \"asdf\", \"failed\"\nassert solution(\"a\") == \"asdf\", \"failed\"\nassert solution(\"aaaa\") == -1, \"failed\"\n\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n\nassert solution(stdin) == 233\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 233\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '8'\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(sys.stdin.readline().rstrip()) == '7'\n\nassert solution(sys.stdin.readline().rstrip()) == '39'\n\nassert solution(sys.stdin.readline().rstrip()) == '0'\n\n-----Bonus-----\n\nInput\n\n5 4\n\nOutput\n\n1\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '7'\nassert solution(stdin) == '3'\nassert solution(stdin) == '39'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"29\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\") == \"7\"\nassert solution(\"3 2 2\") == \"3\"\nassert solution(\"3 3 3\") == \"3\"\nassert solution(\"3 4 1\") == \"1\"\nassert solution(\"3 5 3\") == \"1\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 1 1\") == \"3\"\nassert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"3 3 3\") == \"3\"\nassert solution(\"3 5 5\") == \"3\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\") == \"4\"\nassert solution(\"3 2 1\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\""
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"\\\"\\\"\\\"---\\n---\\n---\\n---\\n---\\n---\\n---\\n---\\n---\\n---\\n---\\n---\\n---\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '49'\nassert solution(stdin) == '5'\nassert solution(stdin) == '9'"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 4\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n4 6\n5 6\n6 7\n7 4\n8 9\n9 8\n9 9\n9 8\n8 5\n8 6\n1 2\n1 1\n1 1\n2 2\n2 2\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n2 2\n2 2\n2 2\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('6') == 'YES'\nassert solution('3 4') == 'YES'\nassert solution('1 2') == 'NO'\nassert solution('5 6') == 'NO'\nassert solution('5 7') == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2, \"2\") == \"YES\"\nassert solution(3, \"3\") == \"NO\"\nassert solution(4, \"4\") == \"NO\"\nassert solution(5, \"5\") == \"NO\"\nassert solution(6, \"6\") == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n----Sample Input----\n\n3\n5 4\n1 2\n4 3\n1 4\n2 2\n1 100\n3 5\n1 2\n3 3\n3 5\n3 4\n1 2\n2 2\n2 2\n1 100\n3 4\n4 7\n1 1\n2 1\n2 1\n1 1\n1 1\n2 2\n2 2\n2 2\n1 100\n3 4\n4 7\n5 4\n5 7\n5 8\n5 9\n\n-----Sample Output----\n\nYES\nNO"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"5\",\"3\",\"4\",\"2\",\"6\",\"2\",\"6\",\"1\",\"3\",\"7\",\"9\",\"4\",\"5\",\"6\",\"2\",\"8\",\"3\",\"1\",\"4\",\"2\",\"4\",\"2\",\"1\",\"2\",\"3\",\"1\",\"3\",\"4\",\"2\",\"6\",\"2\",\"5\",\"7\"]) == \"YES\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3,5,6\"\n) == 0\nassert solution(\n    \"1,2,3\"\n) == 1\nassert solution(\n    \"2,5,6\"\n) == 1\nassert solution(\n    \"3,4,5\"\n) == 0\nassert solution(\n    \"5,3,7\"\n) == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(4) == 0\nassert solution(6) == 1\nassert solution(5) == 1\nassert solution(7) == 1\nassert solution(6) == 0\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"n = 3\")\nprint(\"Exception : \")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"1\")\nprint(\"Explanation:\")\nprint(\"The sequence is divisible by both $1, 3$ and $2$.\")\n\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"n = 5\")\nprint(\"Exception : \")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"1\")\nprint(\"Explanation:\")\nprint(\"The sequence is divisible by both $1, 2, 3, 4, 5$.\")\n\nprint(\"Example 3:\")\nprint(\"Input : \")\nprint(\"n = 6\")\nprint(\"Exception : \")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"1\")\nprint(\"Explanation:\")\nprint(\"The sequence is divisible by both $1, 2, 3, 4, 5, 6$.\")\n\nprint(\"Example 4:\")\nprint(\"Input : \")\nprint(\"n = 1\")\nprint(\"Exception : \")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"1\")\nprint(\"Explanation:\")\nprint(\"The sequence is not divisible by both $1, 1$ and 1.\")"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 3 1') == '0'\nassert solution('2 3 1') == '1'\nassert solution('2 4 1') == '2'\nassert solution('3 5 1') == '1'\nassert solution('4 6 1') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\n\n----Constraints----\n1 <= stdin.length <= 2^31 - 1\n0 <= stdin[i] <= 10^9\n\"\"\"\n\nfrom math import inf\n\n\nclass Solution:\n    def minimumAbsoluteValue(self, nums: List[int]) -> int:\n        \"\"\"\n        using hashmap, store a unique hash of each number\n        \"\"\"\n        # array of (nums[i], nums[j])\n        # array to store unique numbers\n        # how many we can find in array\n        # answer\n        # return -inf if array size is less than 2\n\n        class Solution:\n            def solution(self, stdin):\n                pass\n\n        self.res = inf\n        self.hashmap = {nums[i]: [nums[i], 1] for i in range(len(nums))}\n        for num in nums:\n            if num not in self.hashmap:\n                self.hashmap[num] = [num, 1]\n            else:\n                self.hashmap[num][0] = max(self.hashmap[num][0], num * num)\n                self.hashmap[num][1] += 1\n\n        for i in range(len(nums)):\n            if self.hashmap[nums[i]][1] == 0:\n                continue\n            if self.hashmap[nums[i]][0] == nums[i]:\n                self.res = min(self.res, self.hashmap[nums[i]][1] * self.hashmap[nums[i]][0])\n            else:\n                self.hashmap[nums[i]][0] = nums[i] * nums[i]\n                self.hashmap[nums[i]][1] += 1\n            if self.hashmap[nums[i]][1] == self.hashmap[nums[i]][0]:\n                self.res = min(self.res, self.hashmap[nums[i]][1] * self.hashmap[nums[i]][0])\n        return self.res\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('12') == '1'\nassert solution('5') == '1'\nassert solution('6') == '1'\nassert solution('2') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 9\nassert solution(stdin) == 9\nassert solution(stdin) == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == str(5)\nassert solution(input()) == str(4)\nassert solution(input()) == str(0)"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"()()\") == 4\nassert solution(\"((()))\") == 5\nassert solution(\"(()()))\") == 5\nassert solution(\"()()()\") == 0\nassert solution(\"((((()))))\") == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('((()))') == '4', 'incorrect'\nassert solution('(())') == '1', 'incorrect'\nassert solution('()())') == '0', 'incorrect'\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"(())\") == \"4\"\nassert solution(\"((())\") == \"4\"\nassert solution(\"(()(())\") == \"5\"\nassert solution(\"(((()()\")) == \"5\"\nassert solution(\"((())()\") == \"5\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"()()\") == 5, \"Error in input.\"\nassert solution(\"((((((()))))())\") == 6, \"Error in input.\"\nassert solution(\"((()))\") == 2, \"Error in input.\"\nassert solution(\"((()()))\") == 4, \"Error in input.\"\nassert solution(\"((()()()))\") == 0, \"Error in input.\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution("
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == 5\nassert solution(3) == 5\nassert solution(2) == 4\nassert solution(4) == 0\nassert solution(4) == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"5\"\n\"\"\"\n\nclass Solution:\n    def countBrackets(self, s: str) -> int:\n        stack = []\n        s_count = 0\n\n        for i in s:\n            if i == '(':\n                stack.append(i)\n            elif i == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    s_count += 1\n            else:\n                s_count += 1\n\n        return s_count"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '0'\n\nassert solution(stdin) == -1\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 4\n\n\n-----Examples-----\nInput\n4470\n\nOutput\n-1\n\n\n-----Note-----\n\nIn the first example one of the possible sequences of moves is 4470 $\\rightarrow$ 4350 $\\rightarrow$ 4500 $\\rightarrow$ 4500, so we can swap the digits.\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"incorrect input\"\nprint(solution(input()))\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n\n------------------\nIn case of input data being supplied to the question, it is assumed to be a console input and is stored in an array. The array elements are separated by a single space.\n\n\n------------------"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"1\\n\"\n    \"2\\n\"\n    \"4\\n\"\n    \"5\\n\"\n    \"6\\n\"\n    \"7\\n\"\n    \"8\\n\"\n    \"9\\n\"\n    \"10\\n\"\n    \"11\\n\"\n    \"12\\n\"\n    \"13\\n\"\n    \"14\\n\"\n    \"15\\n\"\n    \"16\\n\"\n    \"17\\n\"\n    \"18\\n\"\n    \"19\\n\"\n    \"20\\n\"\n    \"21\\n\"\n    \"22\\n\"\n    \"23\\n\"\n    \"24\\n\"\n    \"25\\n\"\n    \"26\\n\"\n    \"27\\n\"\n    \"28\\n\"\n    \"29\\n\"\n    \"30\\n\"\n    \"31\\n\"\n    \"32\\n\"\n    \"33\\n\"\n    \"34\\n\"\n    \"35\\n\"\n    \"36\\n\"\n    \"37\\n\"\n    \"38\\n\"\n    \"39\\n\"\n    \"40\\n\"\n    \"41\\n\"\n    \"42\\n\"\n    \"43\\n\"\n    \"44\\n\"\n    \"45\\n\"\n    \"46\\n\"\n    \"47\\n\"\n    \"48\\n\"\n    \"49\\n\"\n    \"50\\n\"\n    \"51\\n\"\n    \"52\\n\"\n    \"53\\n\"\n    \"54\\n\"\n    \"55\\n\"\n    \"56\\n\"\n    \"57\\n\"\n    \"58\\n\"\n    \"59\\n\"\n    \"60\\n\"\n    \"61\\n\"\n    \"62\\n\"\n    \"63\\n\"\n    \"64\\n\"\n    \"65\\n\"\n    \"66\\n\"\n    \"67\\n\"\n    \"68\\n\"\n    \"69\\n\"\n    \"70\\n\"\n    \"71\\n\"\n    \"72\\n\"\n    \"73\\n\"\n    \"74\\n\"\n    \"75\\n\"\n    \"76\\n\"\n    \"77\\n\"\n    \"78\\n\"\n    \"79\\n\"\n    \"80\\n\"\n    \"81\\n\"\n    \"82\\n\"\n    \"83\\n\"\n    \"84\\n\"\n    \"85\\n\"\n    \"86\\n\"\n    \"87\\n\"\n    \"88\\n\"\n    \"89\\n\"\n    \"90\\n\"\n    \"91\\n\"\n    \"92\\n\"\n    \"93\\n\"\n    \"94\\n\"\n    \"95\\n\"\n    \"96\\n\"\n    \"97\\n\"\n    \"98\\n\"\n    \"99\\n\"\n    \"100\\n\"\n    \"101\\n\"\n    \"102\\n\"\n    \"103\\n\"\n    \"104\\n\"\n    \"105\\n\"\n    \"106\\n\"\n    \"107\\n\"\n    \"108\\n\"\n    \"109\\n\"\n    \"110\\n\"\n    \"111\\n\"\n    \"112\\n\"\n    \"113\\n\"\n    \"114\\n\"\n    \"115\\n\"\n    \"116\\n\"\n    \"117\\n\"\n    \"118\\n\"\n    \"119\\n\"\n    \"120\\n\"\n    \"121\\n\"\n    \"122\\n\"\n    \"123\\n\"\n    \"124\\n\"\n    \"125\\n\"\n    \"126\\n\"\n    \"127\\n\"\n    \"128\\n\"\n    \"129\\n\"\n    \"130\\n\"\n    \"131\\n\"\n    \"132\\n\"\n    \"133\\n\"\n    \"134\\n\"\n    \"135\\n\"\n    \"136\\n\"\n    \"137\\n\"\n    \"138\\n\"\n    \"139\\n\"\n    \"140\\n\"\n    \"141\\n\"\n    \"142\\n\"\n    \"143\\n\"\n    \"144\\n\"\n    \"145\\n\"\n    \"146\\n\"\n    \"147\\n\"\n    \"148\\n\"\n    \"149\\n\"\n    \"150\\n\"\n    \"151\\n\"\n    \"152\\n\"\n    \"153\\n\"\n    \"154\\n\"\n    \"155\\n\"\n    \"156\\n\"\n    \"157\\n\"\n    \"158\\n\"\n    \"159\\n\"\n    \"160\\n\"\n    \"161\\n\"\n    \"162\\n\"\n    \"163\\n\"\n    \"164\\n\"\n    \"165\\n\"\n    \"166\\n\"\n    \"167\\n\"\n    \"168\\n\"\n    \"169\\n\"\n    \"170\\n\"\n    \"171\\n\"\n    \"172\\n\"\n    \"173\\n\"\n    \"174\\n\"\n    \"175\\n\"\n    \"176\\n\"\n    \"177\\n\"\n    \"178\\n\"\n    \"179\\n\"\n    \"180\\n\"\n    \"181\\n\"\n    \"182\\n\"\n    \"183\\n\"\n    \"184\\n\"\n    \"185\\n\"\n    \"186\\n\"\n    \"187\\n\"\n    \"188\\n\"\n    \"189\\n\"\n    \"190\\n\"\n    \"191\\n\"\n    \"192\\n\"\n    \"193\\n\"\n    \"194\\n\"\n    \"195\\n\"\n    \"196\\n\"\n    \"197\\n\"\n    \"198\\n\"\n    \"199\\n\"\n    \"200\\n\"\n    \"201\\n\"\n    \"202\\n\"\n    \"203\\n\"\n    \"204\\n\"\n    \"205\\n\"\n    \"206\\n\"\n    \"207\\n\"\n    \"208\\n\"\n    \"209\\n\"\n    \"210\\n\"\n    \"211\\n\"\n    \"212\\n\"\n    \"213\\n\"\n    \"214\\n\"\n    \"215\\n\"\n    \"216\\n\"\n    \"217\\n\"\n    \"218\\n\"\n    \"219\\n\"\n    \"220\\n\"\n    \"221\\n\"\n    \"222\\n\"\n    \"223\\n\"\n    \"224\\n\"\n    \"225\\n\"\n    \"226\\n\"\n    \"227\\n\"\n    \"228\\n\"\n    \"229\\n\"\n    \"230\\n\"\n    \"231\\n\"\n    \"232\\n\"\n    \"233\\n\"\n    \"234\\n\"\n    \"235\\n\"\n    \"236\\n\"\n    \"237\\n\"\n    \"238\\n\"\n    \"239\\n\"\n    \"240\\n\"\n    \"241\\n\"\n    \"242\\n\"\n    \"243\\n\"\n    \"244\\n\"\n    \""
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n\n\nassert solution(stdin) == 5\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 4\n\n----------------------------------------------------------------------------------------------------------------------\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"abcd\") == \"1 1 2 1 2 1 2 1 2 1 1 2 1 2 1 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 2 1 1 2 1 1 1 2 1 1 2 1 2 1 1 2 1 2 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 2 1 1 2 1 1 1 2 1 1 2 1 2 1 1 1 2 1 2 1 1 1 2 1 1 2 1 2 1 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 2 1 1 2 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 1 1 1 2 1 1 1 2 1 1 2 1 1 2 1 2 1 1 2 1 1 2 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 2 1 2 1 1 1 2 1 1 2 1 2 1 1 2 1 2 1 2 1 2 1 2 1 2 1 1 2 1 1 1 2 1 2 1 1 1 2 1 2 1 1 2 1 2 1 1 2 1 1 2 1 1 1 2 1 2 1 1 2 1 1 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 2 1 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 9\nassert solution(stdin) == 11\nassert solution(stdin) == 11\nassert solution(stdin) == 1\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 1\nassert solution(\"abcde\") == 3\nassert solution(\"a\") == 1\nassert solution(\"\") == 1\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"a\",\"b\",\"a\",\"b\",\"b\",\"a\"]) == \"1\"\nassert solution([\"a\",\"b\",\"a\",\"b\",\"a\",\"b\"]) == \"2\"\nassert solution([\"a\",\"b\",\"a\",\"a\",\"b\",\"a\"]) == \"1\"\nassert solution([\"a\",\"b\",\"a\",\"b\",\"a\",\"a\"]) == \"3\"\nassert solution([\"a\",\"b\",\"a\",\"b\",\"a\",\"a\"]) == \"2\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('cab') == '1 1 1 1 1 2 1 1 1'\nassert solution('aaaaaa') == '1 1 1 1 1 1 1 2 1 1'\nassert solution('aabac') == '1 1 1 1 1 1 2 2 2'\nassert solution('aaabbc') == '1 1 1 1 1 1 2 3 3'\nassert solution('aaabb') == '1 1 1 1 1 1 2 2'\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution == 2\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('abacbecfd') == 2\nassert solution('ababababab') == 4\nassert solution('aabcdedc') == 2\nassert solution('abcdefgg') == 3\nassert solution('ababababab') == 6\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 10, 'failed'\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == \"YES\"\nassert solution(3) == \"YES\"\nassert solution(5) == \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"aababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, [\"ab\", \"a\", \"b\", \"ab\"]) == \"YES\"\nassert solution(5, [\"a\", \"ab\", \"b\", \"ab\", \"ba\", \"a\"]) == \"NO\"\nassert solution(3, [\"q\", \"w\"]) == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"qwerty\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == \"YES\"\nassert solution(3) == \"YES\"\nassert solution(1) == \"NO\"\nassert solution(4) == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n\nPass\n-----"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n\n1 <= n <= 100\n\n\n-----Submissions-----\nQuestion: 32\nAnswer: YES"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(test_cases[0]) == \"YES\"\nassert solution(test_cases[1]) == \"NO\"\nassert solution(test_cases[2]) == \"NO\"\nassert solution(test_cases[3]) == \"YES\"\nassert solution(test_cases[4]) == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"a\", \"b\", \"a\"]) == \"YES\"\nassert solution([\"a\", \"b\", \"c\"]) == \"NO\"\nassert solution([\"c\", \"d\", \"e\", \"c\", \"c\", \"d\"]) == \"YES\"\nassert solution([\"a\", \"b\", \"c\"]) == \"YES\"\nassert solution([\"a\", \"b\", \"c\"]) == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(['a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b']) == \"YES\"\nassert solution(['a', 'b', 'a', 'b', 'a']) == \"YES\"\nassert solution(['a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b']) == \"YES\"\nassert solution(['a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b']) == \"NO\""
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\"\n\n-----Sample Input\n\nInput\n6\n1 2 3 4 5 6\n\nOutput\n2\n\n-----Sample Output\n\nOutput\n0\n\n-----Sample Explanation\n\nMishka starts participating in a problem at the end of the list. The first half of the list is a list of the following problems:\n\n1. Problem 1:\n3. Problem 2:\n2. Problem 3:\n5. Problem 4:\n4. Problem 5:\n6. Problem 6:\n\nMishka's problem-solving skill is equal to the following:\n\n$k$\n\nMishka cannot solve a problem with difficulty greater than $k$.\n'''"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 100\") == \"5\"\nassert solution(\"5 12 34 55 43 21\") == \"0\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 5\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n\nInput\n5 100\n12 34 55 43 21\n\nOutput\n0\n\n'''"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input()\n) == str(sum(map(int, input().split())))\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n\n\n-----Advanced-----\n\nMishka's problem-solving skill is as follows:\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka starts counting from $1$, which means the first problem of the contest.\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka stops when the number of problems exceeds $k$, and it can't solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\nHere is the input in the dashed line:\n\n4 2\n3 1 2 1 3\n\nOutput\n5\n\n\n\n-----Advanced-----\n\nMishka's problem-solving skill is as follows:\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka starts counting from $1$, which means the first problem of the contest.\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka stops when the number of problems exceeds $k$, and it can't solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\nHere is the input in the dashed line:\n\n5\n\nOutput\n5\n\n\n\n-----Advanced-----\n\nMishka's problem-solving skill is as follows:\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka starts counting from $1$, which means the first problem of the contest.\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka stops when the number of problems exceeds $k$, and it can't solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\nHere is the input in the dashed line:\n\n5\n\nOutput\n5\n\n\n\n-----Advanced-----\n\nMishka's problem-solving skill is as follows:\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka starts counting from $1$, which means the first problem of the contest.\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka stops when the number of problems exceeds $k$, and it can't solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\nHere is the input in the dashed line:\n\n1\n\nOutput\n0\n\n\n\n-----Advanced-----\n\nMishka's problem-solving skill is as follows:\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka starts counting from $1$, which means the first problem of the contest.\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka stops when the number of problems exceeds $k$, and it can't solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\nHere is the input in the dashed line:\n\n2\n\nOutput\n0\n\n\n\n-----Advanced-----\n\nMishka's problem-solving skill is as follows:\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka starts counting from $1$, which means the first problem of the contest.\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka stops when the number of problems exceeds $k$, and it can't solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\nHere is the input in the dashed line:\n\n1\n\nOutput\n0\n\n\n\n-----Advanced-----\n\nMishka's problem-solving skill is as follows:\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka starts counting from $1$, which means the first problem of the contest.\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka stops when the number of problems exceeds $k$, and it can't solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\nHere is the input in the dashed line:\n\n2\n\nOutput\n0\n\n\n\n-----Advanced-----\n\nMishka's problem-solving skill is as follows:\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka starts counting from $1$, which means the first problem of the contest.\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka stops when the number of problems exceeds $k$, and it can't solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\nHere is the input in the dashed line:\n\n1\n\nOutput\n0\n\n\n\n-----Advanced-----\n\nMishka's problem-solving skill is as follows:\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka starts counting from $1$, which means the first problem of the contest.\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka stops when the number of problems exceeds $k$, and it can't solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\nHere is the input in the dashed line:\n\n2\n\nOutput\n0\n\n\n\n-----Advanced-----\n\nMishka's problem-solving skill is as follows:\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka starts counting from $1$, which means the first problem of the contest.\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka stops when the number of problems exceeds $k$, and it can't solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\nHere is the input in the dashed line:\n\n1\n\nOutput\n0\n\n\n\n-----Advanced-----\n\nMishka's problem-solving skill is as follows:\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka starts counting from $1$, which means the first problem of the contest.\n\n$k = 4 \\times n$ \u2014 difficulty of the contest.\n\nMishka stops when the number of problems exceeds $k$, and it can't solve any problem from any end of the list.\n\nHow many problems"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"3\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"5 5\") == \"0\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '5'\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n\nn = int(input())\nk = int(input())\n\nnums = []\nfor _ in range(n):\n    nums.append(int(input()))\n\nprint(nums)\nnums.sort()\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"incorrect input\""
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('4 4') == '12', 'incorrect'\nassert solution('3 9') == '14', 'incorrect'\nassert solution('3 6') == '12', 'incorrect'\nassert solution('506 2708') == '3218', 'incorrect'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"3 4\"\n) == \"14\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"12\"\n\nassert solution(stdin) == \"14\"\n\n\nassert solution(stdin) == \"3218\"\n\n\nassert solution(stdin) == \"3323\"\nassert solution(stdin) == \"3323\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '12'\nassert solution(stdin) == '14'\nassert solution(stdin) == '3218'\nassert solution(stdin) == '3.141592653589793'\nassert solution(stdin) == '22675251831253759848'\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"1 2\"\nassert solution(\"1 1 5\") == \"1 5 2\"\nassert solution(\"1 1 10\") == \"1 10 2\"\nassert solution(\"1 1 6 13\") == \"1 6 13 2\"\nassert solution(\"1 1 13 11 12 15\") == \"1 13 12 15 2\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"12\"\n\nassert solution(input) == \"14\"\n\nassert solution(input) == \"3218\"\n\"\"\"\n\na, b = map(int, input().split())"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"8\"\nassert solution(\"3 9\") == \"3\"\nassert solution(\"3 6\") == \"14\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(3218)\n\"\"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 3\", \"1 2\") == \"3 2\"\nassert solution(\"2 3\", \"1 2\") == \"3 2\"\nassert solution(\"1 2\", \"1 2\") == \"3 2\"\nassert solution(\"2 3\", \"1 2\") == \"3 2\"\nassert solution(\"1 2\", \"1 3\") == \"3 2\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'YES'\n\n\n\n\n'''\n\nclass Solution:\n    def colorString(self, s: str) -> str:\n        \n        \n        st = sorted(list(set(s)))\n        \n        for i in st:\n            \n            colored = ''\n            \n            for j in range(len(st)):\n                if s[j] == i:\n                    \n                    colored += '0'\n                else:\n                    colored += '1'\n                    \n            st[st.index(i)] = colored\n            \n            if i == st[-1]:\n                \n                break\n        \n        return ''.join(st)\n        "
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"aabababab\") == \"YES\", \"aabababab\"\nassert solution(\"abcdefa\") == \"YES\", \"abcdefa\"\nassert solution(\"abcdcdcdcd\") == \"NO\", \"abcdcdcdcd\"\nassert solution(\"aabcdcdcd\") == \"YES\", \"aabcdcdcd\"\nassert solution(\"abcdefa\") == \"NO\", \"abcdefa\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"abacd\") == \"NO\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"aaa\") == \"YES\"\nassert solution(\"\") == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(9) == 'YES', \"test failed\"\nassert solution(8) == 'NO', \"test failed\"\nassert solution(7) == 'YES', \"test failed\"\nassert solution(5) == 'YES', \"test failed\""
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"aaabbcbb\") == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3) == \"YES\"\nassert solution(9) == \"NO\"\nassert solution(5) == \"NO\"\nassert solution(8) == \"YES\"\nassert solution(7) == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"abacbecfd\") == \"YES\", \"No\"\nassert solution(\"aaabbcbb\") == \"NO\", \"Yes\""
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"aabbc\") == \"abcd\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcd\") == \"abcd\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"ababcccbc\") == \"NO\", \"Expected 'YES' but got 'NO'.\"\nassert solution(\"ababcbcd\") == \"YES\", \"Expected 'YES' but got 'NO'.\"\nassert solution(\"abcdec\") == \"YES\", \"Expected 'YES' but got 'NO'.\"\nassert solution(\"abc\") == \"YES\", \"Expected 'YES' but got 'NO'.\"\nassert solution(\"abcdef\") == \"NO\", \"Expected 'YES' but got 'NO'.\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"solution failed\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 25\nassert solution(input('2')) == 25\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == 25\nassert solution(\"2 5\") == -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"7 2\") == 25, \"7\"\nassert solution(\"3 2\") == -1, \"3\"\nassert solution(\"4 5\") == 5, \"4\"\nassert solution(\"5\") == -1, \"5\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2, 2) == 25\nassert solution(2, 1) == 1\nassert solution(1, 1) == -1"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == 2\nassert solution(\"2 3\") == 3\nassert solution(\"3 2\") == 2\nassert solution(\"4 2\") == -1"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == 25\nassert solution(\"2 3\") == -1\nassert solution(\"2 2 3\") == 25\nassert solution(\"2 3 2 4 3\") == 25\nassert solution(\"2 2 3 2 4 3\") == 25\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == -1"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"2 2\") == 25\nassert solution(\"2 2\") == \"25\"\nassert solution(\"3 2\") == \"11\"\nassert solution(\"3 2\") == \"25\"\nassert solution(\"4 3\") == \"13\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == 25\nassert solution(\"2 2\") == -1\nassert solution(\"4 3\") == 25\nassert solution(\"5 4\") == -1\nassert solution(\"100 5\") == 25\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 4 2 4 8 10 11 5 3 8') == 'YES'\nassert solution('2 1 4 5 7 8 11') == 'NO'"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 3 4 3 4 2 2 4 1\") == \"YES\"\nassert solution(\"1 2 4 2 1\") == \"NO\"\nassert solution(\"2 2 4 2 1\") == \"NO\"\nassert solution(\"2 3 2 3 1\") == \"YES\"\nassert solution(\"2 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"NO\"\nassert solution(\"1 4\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"1 10\") == \"YES\"\nassert solution(\"1 10 10 10\") == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(str) == 'NO'\nassert solution(str(123)) == 'YES'\nassert solution(str(10)) == 'NO'\nassert solution(str(12345)) == 'NO'\nassert solution(str(12345678901234567890)) == 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(sys.stdin.readline().strip()) == \"YES\""
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"5 20\") == \"5\"\nassert solution(\"45 -6\") == \"45\"\nassert solution(\"34 -15\") == \"34\"\nassert solution(\"10 34\") == \"10\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"\"\nprint(\"The answer is:\", len(solution(inp)),\"Numbers\")\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('10 -2') == '2'\nassert solution('10 -2') == '2'\nassert solution('10 -2') == '2'\nassert solution('10 -2') == '1'\nassert solution('10 -2') == '1'\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\n        [\"4\", \"6\", \"10\", \"10\", \"30\"],\n        [\"-300\", \"300\", \"1\", \"-1\", \"-1\", \"1\", \"\", \"-123\", \"34\", \"34\", \"1\"],\n        [\"10\", \"-2\", \"6\", \"-1\", \"-1\", \"1\", \"\", \"-345\", \"34\", \"1\", \"-345\"],\n        [\"8\", \"-1\", \"-1\", \"1\", \"\", \"-1\", \"-1\", \"1\", \"-123\", \"34\", \"34\", \"1\"],\n    ]\n) == \"5\"\n\nassert solution(\n    [\n        [\"3\", \"7\", \"6\", \"3\", \"8\", \"5\", \"4\", \"2\", \"1\"],\n        [\"-300\", \"-300\", \"1\", \"-1\", \"-1\", \"-1\", \"-1\", \"-123\", \"34\", \"34\", \"1\"],\n        [\"8\", \"-1\", \"-1\", \"-1\", \"-1\", \"1\", \"\", \"\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"],\n        [\"-1\", \"-1\", \"1\", \"-1\", \"-1\", \"-1\", \"1\", \"\", \"\", \"-123\", \"34\", \"34\", \"1\"],\n    ]\n) == \"5\"\n\nassert solution(\n    [\n        [\"4\", \"6\", \"10\", \"10\", \"30\"],\n        [\"-300\", \"300\", \"1\", \"-1\", \"-1\", \"1\", \"\", \"-123\", \"34\", \"34\", \"1\"],\n        [\"10\", \"-2\", \"6\", \"-1\", \"-1\", \"1\", \"\", \"-345\", \"34\", \"1\", \"-345\"],\n        [\"8\", \"-1\", \"-1\", \"1\", \"\", \"-1\", \"1\", \"\", \"-123\", \"34\", \"34\", \"1\"],\n    ]\n) == \"5\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input().split()) == '3'"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 4') == '3'\nassert solution('5 20') == '3'\nassert solution('45 -6') == '3'\nassert solution('34 -15') == '3'\nassert solution('10 34') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1-2\") == \"1\"\nassert solution(\"4 4\") == \"3\"\nassert solution(\"3 7\") == \"3\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"3 15\") == \"1\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4\", \"1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\"\nassert solution(\"3\", \"1 1 1 1 1 3 3 3 3\") == \"YES\"\nassert solution(\"4\", \"1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"YES\"\nassert solution(\"4\", \"0 1 0 0 1 0 1 0 1 0 0 1 0 0 1\") == \"NO\"\nassert solution(\"3\", \"0 1 0 0\") == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution == \"YES\"\nassert solution == \"NO\"\n\n\"\"\"\nGiven an array of integers and an integer k, return all possible permutations of the array [1, 2,..., k].\n\nYou can return the answer in any order.\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 2, 3, 4, 5, 6) == \"YES\", \"stdin output does not equal expected value\"\nassert solution(1, 2, 1, 1, 3, 4) == \"NO\", \"stdin output does not equal expected value\"\nassert solution(1, 2, 1, 1, 1, 1) == \"NO\", \"stdin output does not equal expected value\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Notes-----\n\nTo solve this problem, we only need to check if the matrix is palindromic, and we don't need to check for boundaries (i.e., whether it's single letter).\n\nThe matrix itself is a palindromic matrix if it contains the same characters as the matrix.\n\n\n'''"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2, [9, 10, 1, 2]) == \"YES\"\nassert solution(3, [1, 1, 1, 3, 3, 3, 1, 1, 1]) == \"YES\"\nassert solution(4, [1, 1, 1, 1, 1, 2, 2, 2, 2, 2]) == \"YES\"\nassert solution(4, [2, 2, 2, 1, 1, 1, 1, 1, 1, 1]) == \"NO\"\nassert solution(4, [5, 6, 8, 9, 10, 1, 2, 3, 4, 5]) == \"NO\"\n\n\n\n\n\nTime complexity\n\n0.02 (32 ms)\n\nSpace Complexity\n\n0.00 (16 ms)\n\nAbove line of code is a constant.\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(in_str) == \"YES\"\nassert solution(in_str) == \"YES\"\nassert solution(in_str) == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"NO\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \n    stdin=input\n    ) == \"YES\"\n\nassert solution(\n    \n    stdin=input\n    ) == \"NO\"\n\nassert solution(\n    \n    stdin=input\n    ) == \"YES\"\n\nassert solution(\n    \n    stdin=input\n    ) == \"NO\"\n\nassert solution(\n    \n    stdin=input\n    ) == \"NO\"\n\n\n-----My solution-----"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\n'''"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('11 -2') == 'YES'\nassert solution('10 -2') == 'YES'\nassert solution('-10') == 'NO'\nassert solution('-10 -10') == 'NO'\nassert solution('0 -3') == 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n5 2\\n10 -2\\n8 -1\\n10 -10\\n30 0\\n5 -3\\n2 1\\n4 -2\\n1 3\\n\\n\"), \"YES\"\nassert solution(\"4 4\\n5 2\\n6 1\\n\\n\"), \"YES\"\nassert solution(\"4 10\\n10 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n30 0\\n10 -10\\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9\") == \"NO\"\nassert solution(\"3 4 3 2 1 3 7\") == \"YES\"\nassert solution(\"3 1 3 1\") == \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == [\"YES\", \"NO\", \"NO\"]\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\n'''"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1 2\") == \"1 0 0 0 0 0 0 0 1 0 1\"\nassert solution(\"10 1 11\") == \"0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\") == \"0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 6\") == \"0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 7\") == \"0 0 0 0 0 0 0 0 0 1\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'YES'\n\nassert solution(stdin) == 'NO'\n\nassert solution(stdin) == 'NO'\n\nassert solution(stdin) == 'NO'\n\n-----Advanced-----\n\nimport math"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == ['NO', 'YES']\n\nassert solution(stdin) == ['YES', 'YES', 'NO', 'NO', 'YES', 'YES', 'NO', 'NO', 'YES']\nassert solution(stdin) == ['YES', 'NO', 'NO', 'NO', 'YES']\nassert solution(stdin) == ['YES', 'NO', 'NO', 'YES', 'YES']\nassert solution(stdin) == ['YES', 'YES', 'NO', 'NO', 'NO']\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\nInput:\n3 3\n4 2\n5 1\nOutput:\nYES\n2\nOutput:\nYES\n0\nOutput:\nNO\nOutput:\nNO\nOutput:\nno\nOutput:\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('[]') == 'YES'\nassert solution('[0 1 0 0 2 0 2]') == 'YES'\nassert solution('[1 1 0 0 2 0 2]') == 'NO'\nassert solution('[1 0 0 0 0 0 0]') == 'NO'\nassert solution('[2 0 0 0 0 0 0]') == 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"\nn = 7\nm = 3\nd = 2\nc = [1, 2, 1]\n\"\"\") == \"NO\"\nassert solution(\"\"\"\nn = 7\nm = 3\nd = 2\nc = [1, 2, 1]\n\"\"\") == \"YES\"\nassert solution(\"\"\"\nn = 7\nm = 3\nd = 2\nc = [1, 2, 1]\n\"\"\") == \"YES\"\nassert solution(\"\"\"\nn = 7\nm = 3\nd = 2\nc = [1, 2, 1]\n\"\"\") == \"YES\"\nassert solution(\"\"\"\nn = 7\nm = 3\nd = 2\nc = [1, 2, 1]\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('bbab') == 3\nassert solution('abab') == 3\nassert solution('abcde') == 2\nassert solution('asdfasdf') == 1"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"a\") == 3\nassert solution(\"a\") == 3\nassert solution(\"a\") == 3\nassert solution(\"a\") == 3\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"aababcdasd\") == 2\nassert solution(\"aababcdabasd\") == 3\nassert solution(\"aababcd\") == 3\nassert solution(\"abcde\") == 3\nassert solution(\"aab\") == 3"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"abca\") == 2\nassert solution(\"abcde\") == 0\nassert solution(\"asdfasdf\") == 3"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    s=\"test\",\n    t=\"tst\"\n) == 3\nassert solution(\n    s=\"tset\",\n    t=\"se\"\n) == 5\nassert solution(\n    s=\"contest\",\n    t=\"contest\"\n) == 6\nassert solution(\n    s=\"\",\n    t=\"test\"\n) == \"test\"\nassert solution(\n    s=\"\",\n    t=\"test\"\n) == \"\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('bbaba') == 3, 'Test failed'\nassert solution('bb') == 2, 'Test failed'\nassert solution('abcde') == 0, 'Test failed'\nassert solution('asdfasdf') == 3, 'Test failed'\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('sabad', 'ababasab') == 1\nassert solution('abab', 'abab') == 0\nassert solution('dadasd', 'abab') == 0\nassert solution('abab', 'a') == 0\nassert solution('a', 'a') == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 3\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(10)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(9)\nassert solution(stdin) == str(9)\nassert solution(stdin) == str(9)\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '10 3'\n\nassert solution(stdin) == '9 9'\n\nassert solution(stdin) == '10'\n\nassert solution(stdin) == '3 2'\n\nassert solution(stdin) == '3'"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"10 3\"\nassert solution(stdin) == \"9 9\"\nassert solution(stdin) == \"10 3\"\nassert solution(stdin) == \"10 2\"\nassert solution(stdin) == \"10 3\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 12\nassert solution(stdin) == 14\nassert solution(stdin) == 15\nassert solution(stdin) == 16\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1.200000000000000000000100\") == 3, \"test 1 failed\"\nassert solution(\"2.572479\") == 10, \"test 2 failed\"\nassert solution(\"3.024922\") == 9, \"test 3 failed\"\nassert solution(\"4.024922\") == 9, \"test 4 failed\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == [\"3\",\"2\",\"1\"]\n\nassert solution(stdin) == [\"2\",\"1\"]\n\nassert solution(stdin) == [\"2\",\"1\"]\n\nassert solution(stdin) == [\"3\",\"2\"]\n\nassert solution(stdin) == [\"2\",\"1\"]"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2.572479) == 3\nassert solution(1.0) == 3\nassert solution(2.0) == 3\nassert solution(2.5) == 3\nassert solution(2.1) == 4\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == ['1', '2', '3', '4', '5', '6']\nassert solution(stdin) == ['1', '2', '3', '4', '5', '6']\nassert solution(stdin) == ['1', '2', '3', '4', '5', '6']\nassert solution(stdin) == ['1', '2', '3', '4', '5', '6']\nassert solution(stdin) == ['1', '2', '3', '4', '5', '6']\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"10 3\"\nassert solution(stdin) == \"9 9\"\nassert solution(stdin) == \"10 3\"\nassert solution(stdin) == \"9 9\"\nassert solution(stdin) == \"10 3\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 10\nassert solution(stdin) == 9\nassert solution(stdin) == 1\n\n\n-----Discussion-----\nThis problem was asked by Facebook.\n\nA map is a tree-like data structure that satisfies some strict binary tree definition.\n\nGiven the root of a binary tree, return a string indicating the level order traversal of its nodes.\n\nFor example, in the given binary tree, a leaf node is represented by \u201c#\u201d.\n\nLevel order traversal of a tree:\n\nLevel 1: the root\nLevel 2: the left subtree\nLevel 3: the right subtree\nLevel 4: the leaf\n\nYour algorithm should handle the following cases:\n\nLevel 1: the root of the tree\nLevel 2: a leaf node\nLevel 3: the left subtree\nLevel 4: the right subtree\n\"\"\""
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\n\nassert solution(input()) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution == \"YES\" or solution == \"NO\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"YES\"\nassert solution(\"1 2 3 4 5 6 7 8 10\") == \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3 3 2 1\") == \"YES\"\nassert solution(\"1 2 1 3 4 3\") == \"YES\"\nassert solution(\"4 3 3 2 1\") == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '01010100'\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"110100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2,3,4) == 101100\nassert solution(2,5,6) == 101100\nassert solution(2,3,3) == 1100\nassert solution(5,3,5) == 1100\nassert solution(5,6,5) == 1100\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"110110101011\"\nassert solution(inp) == \"1010101010101\"\nassert solution(inp) == \"1011111111111\"\nassert solution(inp) == \"111111111111\"\nassert solution(inp) == \"111111111111\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"12331110\",4) == \"01010100\"\n\n\nassert solution(\"12331110\",5) == \"11010011\"\n\n\nassert solution(\"12331110\",6) == \"1101100\"\n\n\nassert solution(\"12331110\",7) == \"11010011\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"01010100\") == \"100110\"\nassert solution(\"101100\") == \"101101\"\nassert solution(\"011111011\") == \"001101\"\n\n\n\"\"\""
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(sys.stdin.readline()) == '01010100'\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"01010100\"\nassert solution(stdin) == \"1111111111101100\"\nassert solution(stdin) == \"10101101111111101\"\nassert solution(stdin) == \"1100101110110100\"\nassert solution(stdin) == \"1101110110110100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"101100\"\n\n\"\"\""
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 3 4 1\", \n    \"3 2 3 4 5\", \n    3) == \"101100\"\nassert solution(\n    \"3 3 3 3\", \n    \"3 2 3 3 4\", \n    3) == \"110100\"\nassert solution(\n    \"3 3 3 3 3\", \n    \"3 2 3 3 4\", \n    3) == \"110010\"\nassert solution(\n    \"3 3 3 3 3\", \n    \"3 2 3 3 4\", \n    3) == \"100110\"\nassert solution(\n    \"3 3 3 3 3\", \n    \"3 2 3 3 4\", \n    3) == \"011001\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('abcdefghijklmnopqrstuvwxyz') == 'defghijklmnopqrstuvwxyz'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'abefghijklmnopqrstuvwxyz'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('ab') == 'YES', 'No'\nassert solution('abcd') == 'NO', 'Yes'\nassert solution('cba') == 'YES', 'Yes'\nassert solution('d') == 'YES', 'Yes'"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"YES\", \"No\"\nassert solution(\"bc\") == \"YES\", \"No\"\nassert solution(\"bb\") == \"NO\", \"Yes\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('aa') == 'acb'\n\n\n-----Time complexity-----\n\nIn this problem, the time complexity of the algorithm is O(n).\n\nThe size of the largest string is O(n).\n\nThe size of the string in the worst case is O(n) in the worst case.\n\nInput\n4\nab\nbc\n\nOutput\nYES\nacbbac\n\nInput\n1\naa\nbc\n\nOutput\nNO\n\n-----Submission-----\n\nRuntime: 76 ms, faster than 73.17% of Python3 online submissions for Valid Perfect Substrings.\nMemory Usage: 14.9 MB, less than 58.50% of Python3 online submissions for Valid Perfect Substrings.\n\"\"\"\n\n\nclass Solution:\n    def validPalindrome(self, s: str) -> bool:\n        def check(s: str, l: int, r: int) -> bool:\n            while l < r:\n                if s[l]!= s[r]:\n                    return False\n                l += 1\n                r -= 1\n            return True\n\n        i, j = 0, len(s) - 1\n        while i < j:\n            if s[i] == s[j]:\n                i += 1\n                j -= 1\n            else:\n                if i + 1 < j and s[i] == s[i + 1]:\n                    i += 1\n                if j - 1 >= i and s[j] == s[j - 1]:\n                    j -= 1\n        return check(s, i, j)\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\""
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['ab', 'bc', 'ab']) == 'YES'\nassert solution(['aa', 'bb', 'bc']) == 'NO'\nassert solution(['bb', 'aa', 'ab']) == 'NO'\nassert solution(['aa', 'bb', 'c']) == 'NO'\nassert solution(['c', 'a', 'b', 'a']) == 'YES'\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"ab\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\nassert solution(\"ab\") == \"NO\"\nassert solution(\"abab\") == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"abc\") == \"YES\"\nassert solution(\"abcc\") == \"YES\"\nassert solution(\"aaccb\") == \"NO\"\nassert solution(\"abcabc\") == \"NO\"\nassert solution(\"aabcd\") == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"ab\") == \"NO\"\nassert solution(\"ca\") == \"YES\"\nassert solution(\"ca\") == \"NO\"\nassert solution(\"bb\") == \"YES\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1 2 3 4 5\"\nassert solution(input) == \"2 1 3 2 4\"\nassert solution(input) == \"3 2 1 1\"\nassert solution(input) == \"1 1 1 1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 1 1 1\"\n\n\"\"\""
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1 2 3 4 5'\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(str(2**2 + 1)) == str(-1)\nassert solution(str(2**2 + 2)) == str(1)\nassert solution(str(2**2 + 2)) == str(1)\nassert solution(str(2**2 + 1)) == str(-1)\nassert solution(str(2**2 + 2)) == str(-1)\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"-2\", \"1\", \"1\", \"1\"]) == \"1 1 2 3 4 5\"\nassert solution([\"-1\", \"1\", \"1\", \"1\", \"1\"]) == \"1 1 2 3 4 5\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1 1 2 3 4 5\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1 1 2 3 4 5\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"-1\") == -1\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '1 2 3 4 5'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1, \"Solution exist\"\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\"5\", \"1\", \"2\", \"3\", \"4\"]) == \"3 1 2\"\nassert solution(\n    [\"4\", \"2\", \"3\", \"1\"]) == \"1 1 2\"\nassert solution(\n    [\"4\", \"2\", \"3\", \"1\", \"5\"]) == \"1 2 3 4 5\"\n\nassert solution(\n    [\"4\", \"3\", \"1\"]) == \"3 1 2\"\nassert solution(\n    [\"1\", \"2\", \"3\", \"4\"]) == \"1 2 3 4\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, [1, 2, 3, 4, 5]) == '3 1 2'\nassert solution(5, [1, 1, 1, 1, 1]) == '1 2 3 4 5'\nassert solution(4, [-1, 2, 2]) == '-1'\nassert solution(4, [-1, 2, 3, 4]) == '1 2 3 4'\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\n'''"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 3 4 6 7 8\") == \"3\"\nassert solution(\"1 1 2 2 2 4 4 6 7 8\") == \"4\"\nassert solution
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\") == 2\nassert solution(\"1 1 2\") == 1\nassert solution(\"2 1 1\") == 2\nassert solution(\"3 3 3\") == 0\nassert solution(\"1 2 3\") == 2\n\n\nConstraints\n1 <= n <= 1000\n\nTime Limit: 1 sec\n\nSample Input\n\n2\n1 2 3\n\nSample Output\n\n2\n\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n\nInput\n\n5\n10 2 3 5 7\n\nOutput\n\n2\n\n\n\n----Constraints----\n\n1 <= n <= 100\n\n-100 <= x_i <= 100\n\nx_i!= 0\n\n\n-----Time Limit-----\n1 minute\n\nSample Input\n\n3\n1 2 3 4 5\n\nSample Output\n\n2\n\n------Problem Area-------\nWrite an algorithm to print the minimum number of coins required to move all the chips to the same coordinate (i.e. all $x_i$ should be equal after some sequence of moves).\nInput\n\n\nSample Input-1\n\n4\n10 2 4 5 3\n\nSample Output-1\n\n2\n\n\n----Constraints----\n\n1 <= n <= 10^5\n\n-10^9 <= x_i <= 10^9\n\nx_i!= 0\n\n\n------Time Limit-----\n0.0001 minute\n\n\nSample Input-2\n\n4\n10 1 4 5 3\n\nSample Output-2\n\n2\n\n\n------Problem Area-------\nYou are given $n$ chips on a number line. The $i$-th chip is placed at the integer coordinate $x_i$. Some chips can have equal coordinates.\n\nYou can perform each of the following types of moves any (possibly, zero) number of times on any chip:\n\n  Move the chip $i$ by $2$ to the left or $2$ to the right for free (i.e. replace the current coordinate $x_i$ with $x_i - 2$ or with $x_i + 2$).  move the chip $i$ by $1$ to the left or $1$ to the right and pay one coin for this move (i.e. replace the current coordinate $x_i$ with $x_i - 1$ or with $x_i + 1$). \n\nNote that it's allowed to move chips to any integer coordinate, including negative and zero.\n\nYour task is to find the minimum total number of coins required to move all $n$ chips to the same coordinate (i.e. all $x_i$ should be equal after some sequence of moves).\n\n\n\n----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of chips.\n\nThe second line of the input contains $n$ integers $x_1, x_2, \\dots, x_n$ ($1 \\le x_i \\le 10^9$), where $x_i$ is the coordinate of the $i$-th chip.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum total number of coins required to move all $n$ chips to the same coordinate.\n\n\n-----Example 1-----\nInput\n\n3\n1 2 3\n\nOutput\n\n1\n\n-----Example 2-----\nInput\n\n5\n1 2 3 4 5\n\nOutput\n\n2\n\n\n------Constraints-----\n\n1 <= n <= 100\n\n-10^9 <= x_i <= 10^9\n\nx_i!= 0\n\n\n-----Time Limit-----\n0.0001 minute\n\n\nSample Input-1\n\n4\n10 2 4 5 3\n\nSample Output-1\n\n2\n\n\n-----Explanation-----\n\nIn the first example, we need to move the first chip by 2 and the second chip by 1 and the third chip by 2. The minimum number of coins needed to move all the chips to the same coordinate is $2$ coins.\n\nIn the second example, we need to move two chips with coordinate $3$ by 1 and the third chip with coordinate $3$ by 2. The minimum number of coins needed to move all the chips to the same coordinate is $2$ coins.\n\nIn the third example, we need to move two chips with coordinate $3$ by 2 and the third chip with coordinate $3$ by 1. The minimum number of coins needed to move all the chips to the same coordinate is $2$ coins.\n\nFor example, if we place the first chip at $2$ and the second chip at $1$, then we need to move all the coins from $1$ to $2$ and all the coins from $2$ to $3$ so we need to move $3$ coins. So the minimum number of coins needed to move all the chips to the same coordinate is 2.\n\nAlso, if we move the third chip by 2 and the first chip by 1, then we need to move all the coins from $1$ to $2$ and all the coins from $2$ to $3$ so we need to move $2$ coins. So the minimum number of coins needed to move all the chips to the same coordinate is 2.\n\n\n------Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of chips.\n\nThe second line of the input contains $n$ integers $x_1, x_2, \\dots, x_n$ ($1 \\le x_i \\le 10^9$), where $x_i$ is the coordinate of the $i$-th chip.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum total number of coins required to move all $n$ chips to the same coordinate.\n\n\n-----Example 1-----\nInput\n\n3\n1 2 3\n\nOutput\n\n1\n\n-----Example 2-----\nInput\n\n5\n1 2 3 4 5\n\nOutput\n\n2\n\n\n-----Constraints-----\n\n1 <= n <= 100\n\n-10^9 <= x_i <= 10^9\n\nx_i!= 0\n\n\n------Time Limit-----\n0.0001 minute\n\n\nSample Input-1\n\n3\n1 2 3 4 5\n\nSample Output-1\n\n1\n\n\n------Explanation-----\n\nIn the first example, we need to move the first chip by 2 and the second chip by 1 and the third chip by 2. The minimum number of coins needed to move all the chips to the same coordinate is $2$ coins.\n\nIn the second example, we need to move two chips with coordinate $3$ by 1 and the third chip with coordinate $3$ by 2. The minimum number of coins needed to move all the chips to the same coordinate is $2$ coins.\n\nIn the third example, we need to move two chips with coordinate $3$ by 2 and the third chip with coordinate $3$ by 1. The minimum number of coins needed to move all the chips to the same coordinate is $2$ coins.\n\nFor example, if we place the first chip at $2$ and the second chip at $1$, then we need to move all the coins from $1$ to $2$ and all the coins from $2$ to $3$ so we need to move $3$ coins. So the minimum number of coins needed to move all"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(sys.stdin) == 5\n\n\n'''"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n\n'''"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1') == 0\nassert solution('0') == -1\nassert solution('1') == -1\nassert solution('5') == 2\nassert solution('8') == 1\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 5\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 5\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\") == 5\n\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 5 3\") == \"1\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"6 4 5\") == \"3\"\nassert solution(\"10 10\") == \"5\"\nassert solution(\"2 10 1\") == \"4\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5, \"incorrect answer\""
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"3\",\"4\",\"6\"]) == \"5\"\nassert solution([\"1\",\"4\",\"5\"]) == \"3\"\nassert solution([\"1\",\"2\",\"3\"]) == \"4\"\nassert solution([\"1\",\"3\",\"4\",\"4\"]) == \"4\"\nassert solution([\"2\",\"1\",\"3\",\"4\",\"4\"]) == \"4\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == 2\nassert solution(\"2\") == 2\nassert solution(\"3\") == 4\nassert solution(\"4\") == 2\nassert solution(\"5\") == 1\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"Please print answer correctly\""
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"5\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"0 3\") == \"0\"\nassert solution(\"1 0\") == \"2\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 5 1 1\") == \"3 1\"\nassert solution(\"3 5 1 2\") == \"3 2\"\nassert solution(\"3 5 1 3\") == \"3 3\"\nassert solution(\"3 5 1 4\") == \"3 4\"\nassert solution(\"3 5 1 5\") == \"3 5\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"0 1\"\nassert solution(\"5 5 5\") == \"5 5\"\nassert solution(\"5 5 5 1\") == \"5 1\"\nassert solution(\"5 5 5 1 1\") == \"1 1\"\nassert solution(\"5 5 5 1 1 1\") == \"1 1\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"Standard input incorrect or error.\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '119 226'\nassert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"0 10\"\nassert solution(stdin) == \"3 0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"1 0\"\nassert solution(stdin) == \"1 0\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('{1, 0}') == '0'\nassert solution('{0, 1}') == '1'\nassert solution('{0, 1, 0}') == '2'\nassert solution('{1, 0, 0}') == '2'\nassert solution('{0, 0, 0}') == '3'\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0 1 2\"\nassert solution(stdin) == \"0 1 3\"\nassert solution(stdin) == \"0 1 4\"\nassert solution(stdin) == \"0 1 5\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == solution(\"4 1 2 2 1 5 3\")\nassert solution(stdin) == solution(\"11\")\nassert solution(stdin) == solution(\"4 1 2 2 1 5 3\")\nassert solution(stdin) == solution(\"4 1 2 2 1 5 3\")\nassert solution(stdin) == solution(\"4 1 2 2 1 5 3\")\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3'), '1 1 2 3'\nassert solution('5'), '2 1 3 2'\nassert solution('4'), '4 1 3'\nassert solution('7'), '7 4 1'\nassert solution('11'), '2 3 4 5'\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"4 4\"\nassert solution(stdin) == \"5 5\"\nassert solution(stdin) == \"7 7\""
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2 4\"\n\nassert solution(stdin) == \"3 4\"\n\nassert solution(stdin) == \"5 6\"\n\nassert solution(stdin) == \"5 5\"\n\nassert solution(stdin) == \"5 5\""
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('4 1 2 2 1 5 3') == '7'\nassert solution('11 -5 -4 -3 -2 0 1 2 3 4 5') == '2'\nassert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 0 1 2 3 4 5') == '1'\nassert solution('4 1 2 2 1 5 3') == '4'\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution == '2 3'\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '4 3 4 5'\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 4 1 2 3\") == \"4\"\nassert solution(\"1 4 1 2 3 4\") == \"3\"\nassert solution(\"1 4 1 2 3 5\") == \"3 5\"\nassert solution(\"1 4 1 2 3 6\") == \"3 6\"\nassert solution(\"1 4 1 2 3 7\") == \"4\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"6\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"3\"]) == \"YES\"\nassert solution([\"2\", \"1\", \"2\", \"3\", \"3\"]) == \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, [1, 2, 3]) == \"NO\"\nassert solution(3, [1, 2, 3, 4]) == \"NO\"\nassert solution(3, [1, 2, 3, 4, 5]) == \"YES\"\nassert solution(3, [1, 2, 3, 4, 5, 6]) == \"YES\"\nassert solution(3, [1, 2, 3, 4, 5, 6, 7]) == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n\n)"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2\\n1\\n3') == 'YES', \"No\"\nassert solution('2\\n2\\n2') == 'NO', \"Yes\"\nassert solution('4\\n2\\n4\\n2\\n3') == 'YES', \"No\"\nassert solution('3\\n1\\n2') == 'NO', \"Yes\"\nassert solution('2\\n3') == 'NO', \"Yes\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5\", \"6\", \"2\", \"3\", \"4\"]) == \"NO\"\nassert solution([\"1\", \"2\", \"2\", \"3\", \"4\"]) == \"YES\"\nassert solution([\"1\", \"2\", \"3\", \"4\"]) == \"YES\"\nassert solution([\"5\", \"6\", \"3\", \"4\", \"1\"]) == \"NO\"\nassert solution([\"5\", \"6\", \"2\", \"3\", \"4\"]) == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 2 3') == 'NO'\nassert solution('2 1 3') == 'YES'\nassert solution('3 1 2') == 'NO'\nassert solution('2 1 3') == 'YES'\nassert solution('2 1 2') == 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\\\"3 2 3\\\") == \"NO\"\nassert solution(\\\"1 2 3\\\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"3 3 3 4 3 3 3\"\n) == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, [1, 2, 3]) == \"YES\"\nassert solution(3, [1, 3, 2]) == \"NO\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(6, [\"abcdef\", \"abdcef\", \"abdcfe\", \"abdfce\", \"abdfec\"]) == \"4\"\nassert solution(6, [\"abdfce\", \"abdcef\", \"abdfce\", \"abdfce\", \"abdfce\", \"abdfce\"]) == \"3\"\n\n\n-----Constraints-----\n1 <= n <= 100\n1 <= s.length <= 100\ns and t consist of lowercase Latin letters.\n\nFor any move $s_i$ to $t_i$ the strings s_i and t_i can be changed by modifying the strings s and t.\n\nFor example, there are two moves $s_i$ to $t_i$: $s_i$ and $t_i$.\ns_i can be modified by swapping two adjacent characters.\nt_i can be modified by swapping two adjacent characters.\ns and t are lowercase English letters.\n\nGuaranteed constraints:\n1 <= k <= 10^4\n\"\"\"\n\nclass Solution:\n    def findSolution(self, n: int, s: str, t: str) -> int:\n        def swap(s, i, j):\n            return s[:i] + t[j:] + s[i] + t[:j]\n        \n        def compute(s, t):\n            s = s.replace(\"ab\", \"abc\")\n            s = s.replace(\"cd\", \"cde\")\n            s = s.replace(\"ee\", \"ef\")\n            s = s.replace(\"ff\", \"fg\")\n            s = s.replace(\"gg\", \"gg\")\n            s = s.replace(\"hh\", \"hhh\")\n            \n            t = t.replace(\"ab\", \"abc\")\n            t = t.replace(\"cd\", \"cde\")\n            t = t.replace(\"ee\", \"ef\")\n            t = t.replace(\"ff\", \"fg\")\n            t = t.replace(\"gg\", \"gg\")\n            t = t.replace(\"hh\", \"hhh\")\n            \n            \n            s = swap(s, 1, 0)\n            t = swap(t, 1, 0)\n            \n            return s + t[1:] + t[0]\n            \n        \n        \n        res = 0\n        for i in range(n):\n            res = max(res, len(compute(s, t)))\n        return res\n        \n        \n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"aaabcdd\") == \"aaabcdd\"\nassert solution(\"acd\") == \"acd\"\nassert solution(\"aaabcde\") == \"aabcdee\"\nassert solution(\"a\") == \"a\"\nassert solution(\"abc\") == \"abc\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('abcdef') == 'abcd'\nassert solution('abcd') == 'abdcef'\nassert solution('abcd') == 'abdcfe'\nassert solution('abcd') == 'abdfce'\n\n\n-----Constraints-----\n\n0 < $n$ < 2^50\n0 < $s$ < $t$\n\n\n------Code-------\n\nimport math\n\nn = int(input())\ns = input()\nt = input()\ns_t = list(map(str, input().split()))\ns_t_len = len(s_t)"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"-1\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abcd\") == \"abcdef\"\nassert solution(\"abcd\") == \"abdfce\"\nassert solution(\"abcd\") == \"abdfec\"\nassert solution(\"abcd\") == \"abdcfe\"\nassert solution(\"abcd\") == \"abcde\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    s=\"abcdef\"\n    ),\n    \"Unimplemented\"\n\nprint(\"[\uc544\ub2c8\uba54\ubaa8\ub9ac \uc804\uccb4 \uc2dc\uac04 \ucd08\uacfc]\")\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"abcd\",\"abc\",\"def\"]) == \"def\"\nassert solution([\"abcd\",\"abc\",\"def\"]) == \"abdfe\"\nassert solution([\"abcd\",\"abc\",\"def\"]) == \"abdcfe\"\nassert solution([\"abcd\",\"abc\",\"def\"]) == \"abdfc\"\nassert solution([\"abcd\",\"abc\",\"def\"]) == \"abdce\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"t\"\n\n-----Constraints-----\n\n1 <= n <= 10^3\n\n0 <= $s$ <= $t$\n\n1 <= $s$ < $t$\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n'''\n\nfrom collections import defaultdict"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"abdfcfe\"\n\nassert solution(stdin) == \"abdcef\"\n\nassert solution(stdin) == \"abcdef\"\n\nassert solution(stdin) == \"abdcef\"\n\nassert solution(stdin) == \"abdfce\""
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"abcdef\") == \"4\"\nassert solution(\"abdcef\") == \"3 5 4 5\"\nassert solution(\"abdfce\") == \"0\"\nassert solution(\"abdfe\") == \"0\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"SPPSPSPS\", \"solution() should return SPPSPSPS\"\nassert solution(stdin) == \"PS\", \"solution() should return PS\"\nassert solution(stdin) == \"PS\", \"solution() should return PS\"\nassert solution(stdin) == \"SP\", \"solution() should return SP\"\n\n\n'''\n\n\nimport sys\n\nimport math\n\ninput = sys.stdin.readline"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"ba\"), \"Should be SPPSPSPS\"\nassert solution(\"ba\"), \"Should be SPPSPSPS\"\nassert solution(\"a\"), \"Should be PPSPSPS\"\nassert solution(\"a\"), \"Should be PPSPSPS\"\nassert solution(\"aa\"), \"Should be SPPSPSPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"baa\") == \"SP\"\nassert solution(\"a\") == \"P\"\nassert solution(\"bab\") == \"PPSPSPS\"\nassert solution(\"abab\") == \"PPSP\"\nassert solution(\"abab\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"SPPSPSPS\"\nassert solution(stdin) == \"SPSP\"\nassert solution(stdin) == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"SP\"\nassert solution(stdin) == \"SPPSP\"\nassert solution(stdin) == \"PS\"\nassert solution(stdin) == \"SPS\"\nassert solution(stdin) == \"SP\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"SSPP\""
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"SPPSPSPS\"\nassert solution(stdin) == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"SPPSPSPS\"\nassert solution(stdin) == \"SPPSPSP\"\nassert solution(stdin) == \"PS\"\nassert solution(stdin) == \"SPSP\"\nassert solution(stdin) == \"SPPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ba\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"aababab\") == \"PPSS\"\nassert solution(\"baaabbaa\") == \"PS\"\nassert solution(\"ababa\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"ba\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"abab\") == \"P\"\nassert solution(\"aba\") == \"PS\"\nassert solution(\"aabb\") == \"P\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\n\nInput\n3 7 3\n\nOutput\n3"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\n\n-----Known bugs-----\n\nInput\n4\n\nOutput\n3\n\nExplanation\n\nSample input 1:\n\n5\n\nSample output 1:\n\n1\n\nSample input 2:\n\n6\n\nSample output 2:\n\n3\n\nSample input 3:\n\n8\n\nSample output 3:\n\n12\n\nSample input 4:\n\n10\n\nSample output 4:\n\n17\n\n\n### Notes\n\n### Solve by looping through the string and the integers a_i:"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\nimport sys\nimport itertools\nimport math"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == '1'\nassert solution(inp) == '12'\nassert solution(inp) == '123'\nassert solution(inp) == '12345'\nassert solution(inp) == '123456'\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 5 2 5 6 5 5 4 7 5 3 5\") == \"3\"\nassert solution(\"5 6 7 8 9 6 5 4 7 3 3 4 3 5 5 4 7 5 5 4\") == \"2\"\nassert solution(\"5 6 7 8 9 6 5 4 7 3 3 4 3 4 5 5 4 7 5 5 4\") == \"1\"\nassert solution
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 1\nassert solution(input) == 1\nassert solution(input) == 0\nassert solution(input) == 0\nassert solution(input) == 0\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\n>>> def solution(stdin: str) -> str:\n    pass\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"25\"\nassert solution(stdin) == \"45\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 11\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"10\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\nprint(\"Example 1:\")\nprint(\"Input :\")\nprint(\"stdin : 23\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 1:\")\nprint(\"Input :\")\nprint(\"stdin : 1234\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 1:\")\nprint(\"Input :\")\nprint(\"stdin : 1234\")\nprint(\"Exception :\")\nprint(\"1\")\nprint(\"Output :\")\nprint(\"Example 1:\")\nprint(\"Input :\")\nprint(\"stdin : 1234\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 2:\")\nprint(\"Input :\")\nprint(\"stdin : 200\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 2:\")\nprint(\"Input :\")\nprint(\"stdin : 987\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 2:\")\nprint(\"Input :\")\nprint(\"stdin : 987\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 3:\")\nprint(\"Input :\")\nprint(\"stdin : 200\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 3:\")\nprint(\"Input :\")\nprint(\"stdin : 987\")\nprint(\"Exception :\")\nprint(\"1\")\nprint(\"Output :\")\nprint(\"Example 3:\")\nprint(\"Input :\")\nprint(\"stdin : 987\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 4:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 4:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 5:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 5:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 6:\")\nprint(\"Input :\")\nprint(\"stdin : 400\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 6:\")\nprint(\"Input :\")\nprint(\"stdin : 400\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 7:\")\nprint(\"Input :\")\nprint(\"stdin : 800\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 7:\")\nprint(\"Input :\")\nprint(\"stdin : 800\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 8:\")\nprint(\"Input :\")\nprint(\"stdin : 800\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 8:\")\nprint(\"Input :\")\nprint(\"stdin : 800\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 9:\")\nprint(\"Input :\")\nprint(\"stdin : 800\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 10:\")\nprint(\"Input :\")\nprint(\"stdin : 800\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 11:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 12:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 13:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 14:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 15:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 16:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 17:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 18:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 19:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 20:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 21:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 22:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 23:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 24:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 25:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 26:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 27:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 28:\")\nprint(\"Input :\")\nprint(\"stdin : 600\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"Example 29:\")\nprint(\"Input :"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"5\", \"1\", \"1\", \"0\", \"0\"]) == \"1\"\nassert solution([\"5\", \"1\", \"1\", \"1\", \"0\"]) == \"0\"\nassert solution([\"5\", \"1\", \"1\", \"1\", \"1\"]) == \"0\"\nassert solution([\"5\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"5\", \"1\", \"0\", \"0\", \"0\"]) == \"1\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"./dark_light.txt\") == 7\nassert solution(\"./dark_light.txt\") == 0\nassert solution(\"./dark_light.txt\") == 4\nassert solution(\"./dark_light.txt\") == 2\nassert solution(\"./dark_light.txt\") == 0\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('10' + '1' * 10 + '0' * 10 + '1' * 10 + '0' * 10 + '1' * 10 + '0' * 10 + '1' * 10 + '0' * 10 + '1' * 10 + '0' * 10 + '1' * 10 + '0' * 10 + '1' * 10) == '0'\nassert solution('5' + '1' * 10 + '0' * 10 + '1' * 10 + '0' * 10 + '1' * 10 + '0' * 10 + '1' * 10 + '0' * 10 + '1' * 10 + '0' * 10 + '1' * 10 + '0' * 10 + '1' * 10 + '0' * 10 + '1' * 10) == '0'\nassert solution('5' + '0' * 10 + '1' * 10 + '1' * 10 + '0' * 10 + '1' * 10 + '1' * 10 + '0' * 10 + '1' * 10 + '1' * 10 + '0' * 10 + '1' * 10 + '1' * 10 + '1' * 10 + '0' * 10 + '1' * 10) == '0'\nassert solution('4' + '1' * 10 + '0' * 10 + '0' * 10 + '0' * 10 + '0' * 10 + '0' * 10 + '0' * 10 + '1' * 10 + '0' * 10 + '0' * 10 + '0' * 10 + '1' * 10 + '1' * 10 + '1' * 10 + '0' * 10 + '1' * 10) == '0'\nassert solution('4' + '1' * 10 + '0' * 10 + '0' * 10 + '0' * 10 + '0' * 10 + '0' * 10 + '1' * 10 + '0' * 10 + '0' * 10 + '0' * 10 + '1' * 10 + '0' * 10 + '1' * 10 + '1' * 10 + '0' * 10 + '1' * 10) == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n4\\n0\") == \"2\"\nassert solution(\"5\\n1 1 0 1 1\\n0\\n1 0 1 1 0\") == \"1\"\nassert solution(\"5\\n0\\n1 0 1 1\") == \"1\"\nassert solution(\"5\\n0\\n1 0 1 0\") == \"1\"\nassert solution(\"5\\n0\\n0 1 0\\n1\\n1 0 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10'), 'No solution.'\nassert solution('5'), 'No solution.'\nassert solution('4'), 'No solution.'\nassert solution('0'), 'No solution.'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4'\n\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '4'\n\"\"\"\nimport sys"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 5') == 1, \"Your answer is wrong!\"\nassert solution('12 3') == 3, \"Your answer is wrong!\"\nassert solution('1 2 3 4 5') == 4, \"Your answer is wrong!\""
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input().split()) == \"1\"\nassert solution(input().split()) == \"2\"\nassert solution(input().split()) == \"6\"\nassert solution(input().split()) == \"90\"\nassert solution(input().split()) == \"12\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 10\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 6\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n\nhttps://github.com/bunatixi/solution\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, [2, 4, 6, 2, 10]) == 3\nassert solution(4, [2, 4, 6, 2, 10]) == 2\nassert solution(5, [2, 4, 6, 2, 10]) == 2\nassert solution(6, [2, 4, 6, 2, 10]) == 4\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 2') == 2\nassert solution('4 3') == 4\nassert solution('5 1') == 1\nassert solution('1 2') == 2\nassert solution('1 3') == 1\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(n, a) == min(a)\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom collections import Counter"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, [1, 2, 4, 3, 3, 2]) == 2\nassert solution(1, [1, 2, 4]) == 1\nassert solution(4, [2, 3, 4]) == 1\nassert solution(1, [1, 2]) == 1\nassert solution(3, [2, 3, 3, 4, 4, 4, 4]) == 5\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n\n\n-----Constraints-----\n1\n1\n\n\"\"\"\nfrom collections import defaultdict\nimport heapq\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\n'''"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('4') == '3'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('4 3 2') == 2\nassert solution('4 3') == -1\nassert solution('4 4 3 5 6 7 8 10') == 3\nassert solution('5 4 4 3 4 5 6 5 6 5 7') == -1\nassert solution('5 2 5 3 4 5 6 5 6 5 6 7') == -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == str(-1)"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"5 3\"\n) == \"3\"\nassert solution(\n    \"5 10\"\n) == \"2\"\nassert solution(\n    \"10 3\"\n) == \"0\""
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == 3\nassert solution(\"5 10\") == -1\nassert solution(\"10 3\") == 3\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"6 2\") == 2\nassert solution(\"5 3\") == 3\nassert solution(\"5 10\") == -1"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == str(-1)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(2)\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 10') == '-1'\nassert solution('10 3') == '3'\nassert solution('5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '-1'\n\ninput:\n5 3\n1 0 0 0 1\noutput:\n3\n\ninput:\n5 10\n0 0 0 0 0\noutput:\n2\n\ninput:\n10 3\n0 0 1 1 0 1 0 0 0 1\noutput:\n-1\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    inp: str\n) == '3'\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == '3'\nassert solution(9) == '1'\nassert solution(10) == '0'\nassert solution(4) == '1'\nassert solution(3) == '3'\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp := list(map(int, inp.split()))) == \"3\""
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3) == '3'\nassert solution(5) == '3'\nassert solution(6) == '3'\nassert solution(6) == '2'\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input: str\n    ) == 4, \"Test Case Failed\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3) == \"4\"\nassert solution(1) == \"1\"\nassert solution(10) == \"6\"\n\nfor n in range(1, int(input()) + 1):\n    a, b, c = map(int, input().split())\n    x = b + c\n    y = a * b + c\n    if x < y:\n        print(n, end=\" \")\n    elif x == y:\n        print(\"2\", end=\" \")\n    else:\n        print(\"1\", end=\" \")\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(4) == 2\nassert solution(3) == 1\nassert solution(10) == 0\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(n) == \"2\", \"Error in solution()\"\nassert solution(1) == 1, \"Error in solution()\"\nassert solution(6) == 12, \"Error in solution()\""
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(str) == 1"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 1"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 4\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"\") == 0\nassert solution(\"\") == 0\nassert solution(\"\") == 0\nassert solution(\"(())\") == 2\nassert solution(\"(()())\") == 4\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1()+2()\") == 1\nassert solution(\"(1)+(2)\") == 2\nassert solution(\"()+1\") == 3\nassert solution(\"(()\") == 1\nassert solution(\"((()\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 3\nassert solution(input()) == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n        \"((()))\",\n        \"()()(()(())()\") == 5\nassert solution(\"((())\") == 0\nassert solution(\"((()(\") == 0\nassert solution(\"()((\") == 0\nassert solution(\"(())\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"()()()\") == 0\nassert solution(\"((()\") == 0\nassert solution(\"((()()\") == 1\nassert solution(\"(((()\") == 2\nassert solution(\"()(((((()\") == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\nassert solution('asdfasdf') == 2\nassert solution('fasd') == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abcde\") == 3\nassert solution(\"asdfasdf\") == 2\nassert solution(\"baaba\") == 1\nassert solution(\"ccbccc\") == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"asd\") == 2\nassert solution(\"aaa\") == 3\nassert solution(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n1 <= s.length <= 10^5\ns contains at least one lowercase letter, and at most 10^5\ns contains at most two lowercase letters\nstdin contains at least one lowercase letter and at most two lowercase letters.\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('bbaba') == 3\nassert solution('bbab') == 3\nassert solution('aaaa') == 3\nassert solution('bcbda') == 2\nassert solution('cbdasdf') == 2"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"bbaba \")\nprint(\"Output : \")\nprint(3)\nprint(\"Exception :\")\nprint(\"0\")\n\n\nassert solution(stdin) == 3\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"bbaba \")\nprint(\"Output : \")\nprint(2)\nprint(\"Exception :\")\nprint(\"1\")\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(st) == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('bbab') == 3,'solution(bbab)'\nassert solution('baab') == 2,'solution(baab)'\nassert solution('abcde') == 0,'solution(abcde)'\nassert solution('asdfasdf') == 3,'solution(asdfasdf)'\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1\",\"2\",\"1\"]) == \"2\"\nassert solution([\"2\",\"2\"]) == \"2\"\nassert solution([\"1\",\"2\"]) == \"2\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 4 5 7\") == \"4 7\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 1, 1) == 1, \"1\"\nassert solution(2, 1, 1) == 2, \"2\"\nassert solution(2, 2, 1) == 2, \"2\"\nassert solution(1, 2, 1) == 1, \"1\"\nassert solution(1, 3, 2) == 3, \"3\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"1 2 2\") == \"2\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5,5,5,5) == 2\nassert solution(5,1,1,1) == 5\nassert solution(1,1,2,1) == 1\nassert solution(4,3,4,3) == 4\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 3\") == \"2\"\nassert solution(\"2 4 5\") == \"2\"\nassert solution(\"1 2 1\") == \"1\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\n\nassert solution(input()) == \"2\"\n\nassert solution(input()) == \"2\"\n\nprint(\"The solution is correct.\")\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 3 1\") == \"5\"\nassert solution(\"2 2 1\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 1 2\") == \"2\"\nassert solution(\"2 3 1\") == \"3\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\n\"\"\"\nPython solution\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '2'\n\n-----Example 1 -----\n\nInput\n\n6\n9 4 3 4 5 6\n\nOutput\n\n4\n\nExplanation\n\nThe valid combinations of K are (9 4, 3 4, 4 5, 6)\n\nThe valid combinations of K are (9 4 4, 3 4 4, 4 5, 6 7, 6)\n\nThe valid combinations of K are (9 4 4, 3 4 3, 4 5, 6 7, 6 7, 6)\n\nThe valid combinations of K are (9 4 5, 3 4 5, 4 5 6, 6 7, 6 7, 6)\n\nThe valid combinations of K are (9 4 6, 3 4 6, 4 5 6, 6 7, 6 7, 6 7, 6 7, 6)\n\nThe valid combinations of K are (9 4 6, 3 4 6, 4 5 6, 6 7, 6 7, 6 7, 6 7, 6 7, 6 7, 6)\n\n-----Example 2 -----\n\nInput\n\n7\n2 4 5 6\n\nOutput\n\n2\n\nExplanation\n\nThe valid combinations of K are (2 4, 5 6, 7, 6, 7, 6, 7, 6, 7)\n\nThe valid combinations of K are (2 4 5, 6 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6)\n\nThe valid combinations of K are (2 4 5, 6 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6)\n\nThe valid combinations of K are (2 4 4, 5 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6)\n\nThe valid combinations of K are (2 4 4, 5 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6)\n\nThe valid combinations of K are (2 4 4, 5 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"2\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"6\"\n\n---------------------------------------------------\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Expected Output-----\nOutput for Problem 1:\n\n------Expected Output------\n3\n\nOutput for Problem 2:\n\n------Expected Output------\n3\n\nOutput for Problem 3:\n\n------Expected Output------\n4\n\"\"\"\n\nd_i = 10**5"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    input: str\n    ) == \"2\"\nassert solution(\n    input: str\n    ) == \"2\"\nassert solution(\n    input: str\n    ) == \"2\"\nassert solution(\n    input: str\n    ) == \"2\"\nassert solution(\n    input: str\n    ) == \"2\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 3 4 5 6\") == \"2\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'\n\n\"\"\""
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"16 17 14 20 20 11 22\") == \"3\"\nassert solution(\"15 11 14 15 19\") == \"4\"\nassert solution(\"21 19 10 20 9 22 12\") == \"5\"\nassert solution(\"16 19 23 11 12 19\") == \"4\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"16 17 14 20 20 11 22\") == \"15\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3 2 3\") == \"3\"\nassert solution(\"1 4 5 6 7 8 9 10 11 12\") == \"3\"\nassert solution(\"1 6 12 10 13 14 15 16 17 18 19\") == \"3\"\nassert solution(\"1 7\") == \"3\"\nassert solution(\"1 1 1 1\") == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"7 24 21 23\") == 3"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 24 20 21\") == \"3\"\nassert solution(\"4 6 5 9\") == \"6\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"6 23 1 23\") == \"1\"\nassert solution(\"4 20 20 21\") == \"0\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"7 24 21 23\") == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\n\n\"\"\"\n    def solution(stdin):\n        pass\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"3\"\nassert solution(\"4 0\") == \"4\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"0 2\") == \"0\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"3\"\nassert solution(\"10\") == \"3\"\nassert solution(\"21\") == \"3\"\nassert solution(\"100\") == \"2\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10\") == 4\nassert solution(\"5\") == 2\nassert solution(\"6\") == 1\nassert solution(\"7\") == 3\nassert solution(\"10\") == 4\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 5 6 7 10 21 23 24 49\") == \"4\"\n\n\nassert solution(\"6 7 12 100 150 199\") == \"3\"\n\n\nassert solution(\"1 2 4 7 10\") == \"3\"\n\n\n\n-----Constraints-----\n0 <= n <= 10^5\n\nAccepted\n7\n\nSubmissions\n1\n\n--- Nguyen Van Duc ---\n'''"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    input().split()\n) == \"4\"\nassert solution(\n    input().split()\n) == \"3\"\nassert solution(\n    input().split()\n) == \"3\"\nassert solution(\n    input().split()\n) == \"4\""
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '4'\n\nassert solution(stdin) == '2'\n\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"4\"\nassert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"2 4\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"1 2\"\nassert solution(input) == \"1 2 4 8\"\nassert solution(input) == \"1 2 4\"\nassert solution(input) == \"1 2\"\nassert solution(input) == \"3\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"5 2 8 3 6\"\n) == \"1 4\"\nassert solution(\n    \"5 5 11 1 10 2\"\n) == \"2 4\"\nassert solution(\n    \"6 5 10 1 10 2\"\n) == \"1 4\""
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"1 2\"\nassert solution(input) == \"3\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2 4\"\nassert solution(input) == \"1 4\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"2\", \"5\", \"4\", \"2\", \"6\", \"8\", \"10\", \"6\", \"8\"]) == \"1 4\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == \"1 5\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"1 2\"\nassert solution([\"3\", \"7\", \"7\", \"8\", \"5\", \"5\", \"6\", \"2\", \"2\", \"2\"]) == \"2 3\"\nassert solution([\"1\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"2 4\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1 4'\n\n\"\"\""
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3 4\") == \"1 2\"\nassert solution(\"5 7\") == \"1 2\"\nassert solution(\"5 5\") == \"1 2\"\nassert solution(\"2 2\") == \"1 2\"\nassert solution(\"2 2\") == \"1 2\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"2\", \"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"10\", \"11\", \"12\"]) == str(1)\nassert solution([\"2\", \"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"10\", \"11\", \"12\"]) == str(1)\nassert solution([\"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]) == str(3)\nassert solution([\"2\", \"2\", \"2\"]) == str(2)\nassert solution([\"3\", \"3\", \"3\"]) == str(2)\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1\", \"0\", \"1\", \"1\", \"0\", \"1\", \"0\"]) == \"001122\"\nassert solution([\"1\", \"0\", \"1\", \"1\", \"1\", \"1\", \"0\"]) == \"112020\"\nassert solution([\"1\", \"0\", \"1\", \"0\", \"0\", \"1\", \"1\"]) == \"111011\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"111011\"\nassert solution([\"1\", \"0\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"111011\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '021'"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(str(6)) == \"001122\"\nassert solution(str(211200)) == \"211200\"\nassert solution(str(6)) == \"211201\"\nassert solution(str(211200)) == \"211201\"\nassert solution(str(211201)) == \"211201\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"021\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('0') == '1'\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('10') == '11'\nassert solution('11') == '11'\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"00111010101111011\") == \"11101010101111011\"\nassert solution
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('120110') == '211200'\nassert solution('211200') == '120120'\nassert solution('120110') == '211201'\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '021'\n\n\n\"\"\"A more pythonic approach was to write a function that is already tested (and implemented), but for more difficult tasks, I would like to\nkeep using a single recursive function and not make repeated calls to it (my solution would need to be shorter, but that would be tricky in my python\nprogram). Hence, I tried making a recursive function and added more testing cases. The solution doesn't change anything very much in all cases,\nbecause there is no need to add unnecessary tests.\n\"\"\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '021'\nassert solution(input()) == '21122'\nassert solution(input()) == '120121'\nassert solution(input()) == '120122'\nassert solution(input()) == '120123'\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '021'\nassert solution(input()) == '001122'\nassert solution(input()) == '211200'"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"6 1\") == \"4\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"0\") == \"1\"\nassert solution(\"0 0\") == \"0 0 0\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"4\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '5'\nassert solution(input()) == '6'\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '6'\nassert solution(input()) == '12'"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 1') == '4'\nassert solution('3 2') == '4'\nassert solution('3 3') == '3'\nassert solution('3 4') == '3'\nassert solution('3 5') == '3'\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4'"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '4'\nassert solution(input) == '4'\nassert solution(input) == '4'\nassert solution(input) == '4'\nassert solution(input) == '4'\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n      N,\n      a_1,\n      a_2,\n      a_3,\n      a_4,\n      a_5,\n      a_6\n    ) == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '4'\n\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"2\"\n'''\n\nimport sys"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '4'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 2"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"1 4\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 7\") == \"3\"\nassert solution(\"1 2\") == \"3\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\n'''\nfrom collections import deque\n\nDIRECTIONS = {'U':(-1,0), 'D':(0,1), 'L':(0,-1), 'R':(1,0)}"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"1\") == 1\nassert solution(\"2\") == 0\nassert solution(\"3\") == 1\nassert solution(\"4\") == 0\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(4) == 2\nassert solution(1) == 0\nassert solution(10000000) == 1\nassert solution(50000000) == 0\nassert solution(10001000000000001) == 0\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(51441) == 2\nassert solution(61441) == 0\nassert solution(571576) == 10\nassert solution(2128506) == 2\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"2\"\n\n\n-----Tests-----\nstdin = '18'\nassert solution(stdin) == \"2\"\n\n\n-----In-Place-----\nstdin = '18'\nassert solution(stdin) == \"2\"\n\n\n-----Attempting to solve a riddle without finding all the required solutions.\nInput\n6\n\nOutput\n0\n\nInput\n6\n\nOutput\n0\n\nInput\n6\n\nOutput\n0\n\nInput\n6\n\nOutput\n0\n\nInput\n6\n\nOutput\n0\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == '1'\nassert solution(14) == '2'\nassert solution(61441) == '0'\nassert solution(571576) == '2'\nassert solution(2128506) == '10'"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(12) == \"2\"\nassert solution(65537) == \"0\"\nassert solution(16785) == \"5\"\nassert solution(749) == \"1\"\nassert solution(5) == \"1\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"12\") == 2\nassert solution(\"214\") == 0\nassert solution(\"18\") == 2\nassert solution(\"1234\") == 0\nassert solution(\"16\") == 2\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 20\") == \"27\"\nassert solution(\"12 3\") == \"27\"\nassert solution(\"14\") == \"27\"\nassert solution(\"51\") == \"27\"\nassert solution(\"-1\") == \"0\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2\", \"3\", \"5\"]) == \"28\"\nassert solution([\"1\", \"4\", \"7\"]) == \"28\"\nassert solution([\"4\", \"7\", \"9\", \"10\", \"0\"]) == \"53\"\nassert solution([\"4\", \"5\", \"7\"]) == \"13\"\nassert solution([\"5\", \"5\", \"4\", \"5\"]) == \"28\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"27\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"45\") == \"27\"\nassert solution(\"23\") == \"27\"\nassert solution(\"6\") == \"27\"\nassert solution(\"5\") == \"27\"\nassert solution(\"7\") == \"27\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"27\"\nassert solution(\"2\") == \"4\"\nassert solution(\"7\") == \"9\"\nassert solution(\"7\") == \"26\"\n\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n'3'\n) == '27'\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 27\n\n\nInput\n2\n\nOutput\n26\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == 27\nassert solution(\"7\") == 27\nassert solution(\"9\") == 27\nassert solution(\"5\") == 27\nassert solution(\"1\") == 27\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3\"\n) == \"27\"\n\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(13) == \"1\"\nassert solution(927) == \"0\"\nassert solution(48) == \"1\"\nassert solution(9) == \"0\"\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(13) == \"1\"\nassert solution(927) == \"1\"\nassert solution(48) == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == \"1\"\nassert solution(999) == \"1\"\nassert solution(0) == \"0\"\nassert solution(24) == \"0\"\nassert solution(7887) == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 0\n\n\n------ Solutions -----"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1\") == 1\nassert solution(\"927\") == 1\n\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(13) == 1\nassert solution(927) == 1\nassert solution(48) == 0\nassert solution(0) == 1\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\n\n\"\"\"\nclass Solution:\n    def solution(self, n):\n        return str(bin(sum(list(map(int, str(n))))))[2:]\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\") == \"8\"\nassert solution(\"3 2 3 2\") == \"7\"\nassert solution(\"3 3 3 3\") == \"10\"\nassert solution(\"4 2 4 1\") == \"15\"\nassert solution(\"3 4 3 1\") == \"3\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\\\"\\\"\\\"\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '4'\n\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 2 5 3 1\") == \"2\"\n\nassert solution(\"1 2 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 5 3 3\") == \"4\"\nassert solution(\"1 10 3 1\") == \"10\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"4\", \"5\", \"3\", \"1\"]) == \"4\"\nassert solution([\"2\", \"4\", \"1\"]) == \"4\"\nassert solution([\"1\", \"3\", \"2\", \"4\"]) == \"4\"\nassert solution([\"2\", \"4\", \"1\"]) == \"4\"\nassert solution([\"1\", \"2\", \"1\", \"1\", \"1\", \"3\"]) == \"1\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 4 1 2 4 3 4 3 2 4 4 4 4 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"2 4\", \"3 2\", \"1 2\", \"4 3\", \"1 1\", \"1 1\"]) == \"1\"\nassert solution([\"2 4\", \"3 2\", \"1 2\", \"4 3\", \"1 1\", \"2 2\", \"1 1\", \"1 1\", \"1 1\"]) == \"2\"\nassert solution([\"2 4\", \"3 2\", \"1 2\", \"4 3\", \"1 1\", \"1 1\", \"1 1\", \"2 2\", \"1 2\", \"1 1\", \"1 1\", \"2 2\", \"1 2\", \"1 1\"]) == \"2\"\nassert solution([\"2 4\", \"3 2\", \"1 2\", \"4 3\", \"1 1\", \"1 1\", \"1 1\", \"2 2\", \"1 2\", \"1 1\", \"1 1\", \"2 2\", \"1 2\", \"1 1\", \"1 1\", \"1 1\"]) == \"2\""
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 3 1') == '3'\nassert solution('2 2 1') == '3'\nassert solution('2 4 2') == '4'\nassert solution('3 3 3') == '6'\nassert solution('3 1 2') == '9'\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"4\", \"2\", \"5\", \"3\", \"1\"]) == \"4\"\nassert solution([\"10\", \"6\", \"1\", \"7\", \"7\", \"7\", \"7\", \"9\"]) == \"11\"\nassert solution([\"6\", \"1\", \"2\", \"3\", \"3\", \"4\", \"5\", \"5\", \"6\", \"7\", \"7\", \"9\", \"9\"]) == \"15\"\nassert solution([\"10\", \"3\", \"4\", \"1\"]) == \"10\"\nassert solution([\"1\", \"2\"]) == \"0\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 5\n\nExplanation\nThe houses are just with the first 2 houses. The total number of packages that should be bought is 5 = 2 + 2 = 4.\n\nThe houses have 2 different types of packages, and each type has a different number of packages.\n\nThe houses will be sold in the array houses. You need to buy 2 packages of the house with the smallest number of packages and the number of packages in each type.\n\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n\nInput\n\nThe first line contains an integer $t$ (1\u2264t\u2264100) \u2014 the number of test cases. The next line contains $t$ test cases, each containing two positive integers $n$ and $k$ (2\u2264n,k\u2264100) \u2014 the number of shovels and the number of types of packages.\n\nConstraints\n\n1\u2264t\u2264100\n0\u2264n,k\u2264100\n0\u2264n\u2264k\u2264100\n\n\n\nOutput\n\nPrint the minimum number of packages that will be buy.\n\n\n-----Example-----\nInput\n\n3\n2 4 2 3\n\nOutput\n\n1\n3\n\n\n\n-----Note-----\n\nThe answer to the first test case was explained in the statement.\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp := input()) == \"1\"\nassert solution(inp := input()) == \"2\"\nassert solution(inp := input()) == \"3\"\nassert solution(inp := input()) == \"4\"\nassert solution(inp := input()) == \"5\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == '8'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '8'\n\nassert solution(stdin) == '1'"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 1 2\") == \"3\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"0 1\") == \"2\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 1, \"The function'solution' returns 'false' when the input is incorrect.\"\nassert solution(input) == 1, \"The function'solution' returns 'true' when the input is correct.\"\nprint('Example 1:')\nprint('Input :'+ '\\n' + input)\nprint('Exception :')\nprint('1')\nprint('Output :')\nprint('1')\n\nprint('Example 2:')\nprint('Input :'+ '\\n' + input)\nprint('Exception :')\nprint('1')\nprint('Output :')\nprint('1')\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"2 1 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"0 1\") == \"0\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"2\",\"2\",\"1\",\"2\"]) == \"1\"\nassert solution([\"2\",\"1\",\"1\",\"2\"]) == \"1\"\nassert solution([\"2\",\"1\",\"1\",\"1\"]) == \"1\"\nassert solution([\"2\",\"1\",\"2\",\"1\"]) == \"1\"\nassert solution([\"1\",\"1\",\"1\",\"2\"]) == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['2 2', '2 1 2', '1 2', '0 1', '0 1']) == '1'\nassert solution(['2 2', '2 1 2', '1 2', '0 1']) == '1'\nassert solution(['2 2', '2 1 2', '1 2', '0 1']) == '2'\nassert solution(['2 2', '2 1 2', '1 2', '0 1']) == '2'\nassert solution(['2 2', '2 1 2', '1 2', '0 1']) == '2'\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"1\"\nassert solution(input) == \"2\"\nassert solution(input) == \"3\"\nassert solution(input) == \"4\"\nassert solution(input) == \"5\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 1 2\") == \"1\"\nassert solution(\"2 1 1\") == \"2\"\nassert solution(\"2 1 0\") == \"2\"\nassert solution(\"2 1 3\") == \"2\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"5.00000000000000000000\"\nassert solution(inp) == \"5.000000000000000000000\"\nassert solution(inp) == \"5.000000000000000000000\"\nassert solution(inp) == \"5.000000000000000000000\"\nassert solution(inp) == \"5.000000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '5.00000000000000000000'\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input()\n) == '5.00000000000000000000', 'Output of solution incorrect!'\n\nThe input consists of three integers A, B and H. The integer H represents the hour hand and the integer M represents the minute hand.\n\nThe input is a string in the following format:\nA B H M\n\nThe function returns the distance in centimeters between the two hands, which is represented as a string in the following format:\n\"A1B2H3M4\".\n\nSample Input\n\n3 4 9\n\nSample Output\n\n5.1\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4 9\") == \"5.00000000000000000000\"\nassert solution(\"5 5 5\") == \"1.00000000000000000000\"\nassert solution(\"1 3 4\") == \"2.00000000000000000000\"\nassert solution(\"1 1 1\") == \"2.00000000000000000000\"\nassert solution(\"2 6 9\") == \"3.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '5.00000000000000000000'\n\nassert solution(input().replace(\"5\", \"1\")) == \"12.00000000000000000000\"\n\nassert solution(input().replace(\"5\", \"1\").replace(\"5\", \"1\")) == \"12.00000000000000000000\"\n\n---Your code here---\nimport math"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '5.00000000000000000000'\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 4 9 0\") == \"5.00000000000000000000\"\nassert solution(\n    \"4 9 0\") == \"5.00000000000000000000\"\nassert solution(\n    \"4 9 0\") == \"5.00000000000000000000\"\nassert solution(\n    \"3 9 0\") == \"5.00000000000000000000\"\nassert solution(\n    \"3 9 0\") == \"5.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\nassert solution(\"5 4 9 0\") == \"5.00000000000000000000\"\nassert solution(\"4 4 0 0\") == \"4.00000000000000000000\"\nassert solution(\"2 4 9 0\") == \"2.00000000000000000000\"\nassert solution(\"1 0 0 0\") == \"1.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\nstdin) == \"5.00000000000000000000\""
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1.00000000000000000000\"\nassert solution(\"3 3 2\") == \"5.00000000000000000000\"\nassert solution(\"5 0 0 0\") == \"0.00000000000000000000\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '297'\n\n--------Test Cases--------\nExpected Output:\n\nOutput:\n\nExample:\nInput:\n5 4\n1 4 5 60 4\n\nOutput:\n8\n\nInput:\n3 1\n1 1 1\n\nOutput:\n6\n\nInput:\n15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n\nOutput:\n97\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"15 2\") == \"97\"\nassert solution(\"3 1\") == \"8\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"1 1 1 1 2\") == \"3\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '97'\nassert solution(stdin) == '8'\nassert solution(stdin) == '6'\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 5 2 1 2 3 1 2 3 1 2 3 1 2 3\") == \"8\"\nassert solution(\"2 3 4 2 1 2 3 1 2 3 1 2 3 1 2 3\") == \"6\"\nassert solution(\"2 3 2 4 1 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '7'\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"97\"\n\"\"\"\n\nimport heapq\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        n = int(stdin.split()[-1])\n        \n        a_l = [int(x) for x in stdin.split()[:-1]]\n        a_r = [int(x) for x in stdin.split()[-1:]]\n        \n        a_l.sort()\n        a_r.sort()\n        \n        m = int(stdin.split()[0])\n        \n        pairs = set()\n        \n        for i in range(m):\n            m_l = heapq.heappop(a_l)\n            m_r = heapq.heappop(a_r)\n            \n            heapq.heappush(pairs, (m_l + m_r, i + 1))\n            \n        \n        for i in range(n):\n            l, r = heapq.heappop(pairs)\n            \n            if l == r:\n                continue\n            \n            heapq.heappush(pairs, (l, i + 1))\n            \n            heapq.heappush(pairs, (r, i + 1))\n            \n        print(len(pairs))"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0, \"Should be 0\"\n\"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n-10^5 <= stdin[i] <= 10^5\n-10^6 <= a_1,a_2, \\dots, a_n <= 10^6\n\nInput\n0\n\nOutput\n0\n\n\n-----Tags-----\n\nPyPy"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n7\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n\"\n\nassert solution(\"5 4\\n2 -2 3 1 4\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"3 2\\n1 2\\n2 4\\n\"\n\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n\"\n\nassert solution(\"1 0\\n1000000\\n1000000\\n\") == \"1\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n\n\n-----Time complexity-----\nWe need O(n) to print the segments you can perform and O(m) to choose the subset in which we perform the segments.\n\nWe need O(n) to solve the problem.\n\nWe need O(1) to print the answer.\n\nThis is guaranteed to be correct.\n\nSince we will be trying to solve the problem we need to have some base case.\n\nIn the last example, we will find the answers to the base case.\n\nIn the last example, we have some base case.\n\nSince the base case can be solved, we should not have any problem.\n\nWe will only need O(n^2) for printing.\n\nWe will only need O(m) to choose subset.\n\nThis is guaranteed to be correct.\n\nSince we will be trying to solve the problem we need to have some base case.\n\nIn the last example, we will find the answers to the base case.\n\nIn the last example, we have some base case.\n\nSince the base case can be solved, we should not have any problem.\n\nWe will only need O(n^2) for printing.\n\nWe will only need O(m) to choose subset.\n\nThis is guaranteed to be correct.\n\nSince we will be trying to solve the problem we need to have some base case.\n\nIn the last example, we will find the answers to the base case.\n\nIn the last example, we have some base case.\n\nSince the base case can be solved, we should not have any problem.\n\nWe will only need O(n^2) for printing.\n\nWe will only need O(m) to choose subset.\n\nThis is guaranteed to be correct.\n\nSince we will be trying to solve the problem we need to have some base case.\n\nIn the last example, we will find the answers to the base case.\n\nIn the last example, we have some base case.\n\nSince the base case can be solved, we should not have any problem.\n\nWe will only need O(n^2) for printing.\n\nWe will only need O(m) to choose subset.\n\nThis is guaranteed to be correct.\n\nSince we will be trying to solve the problem we need to have some base case.\n\nIn the last example, we will find the answers to the base case.\n\nIn the last example, we have some base case.\n\nSince the base case can be solved, we should not have any problem.\n\nWe will only need O(n^2) for printing.\n\nWe will only need O(m) to choose subset.\n\nThis is guaranteed to be correct.\n\nSince we will be trying to solve the problem we need to have some base case.\n\nIn the last example, we will find the answers to the base case.\n\nIn the last example, we have some base case.\n\nSince the base case can be solved, we should not have any problem.\n\nWe will only need O(n^2) for printing.\n\nWe will only need O(m) to choose subset.\n\nThis is guaranteed to be correct.\n\nSince we will be trying to solve the problem we need to have some base case.\n\nIn the last example, we will find the answers to the base case.\n\nIn the last example, we have some base case.\n\nSince the base case can be solved, we should not have any problem.\n\nWe will only need O(n^2) for printing.\n\nWe will only need O(m) to choose subset.\n\nThis is guaranteed to be correct.\n\nSince we will be trying to solve the problem we need to have some base case.\n\nIn the last example, we will find the answers to the base case.\n\nIn the last example, we have some base case.\n\nSince the base case can be solved, we should not have any problem.\n\nWe will only need O(n^2) for printing.\n\nWe will only need O(m) to choose subset.\n\nThis is guaranteed to be correct.\n\nSince we will be trying to solve the problem we need to have some base case.\n\nIn the last example, we will find the answers to the base case.\n\nIn the last example, we have some base case.\n\nSince the base case can be solved, we should not have any problem.\n\nWe will only need O(n^2) for printing.\n\nWe will only need O(m) to choose subset.\n\nThis is guaranteed to be correct"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"fced\", 7), \"Yes\"\nassert solution(\"xyz\", 8), \"Yes\"\nassert solution(\"r\", 5), \"Yes\"\nassert solution(\"dabcef\", 4), \"Yes\"\nassert solution(\"az\", 1), \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"fced\"), \"fced\"\nassert solution(\"xyz\"), \"xyz\"\nassert solution(\"r\"), \"r\"\nassert solution(\"dabcef\"), \"dabcef\"\nassert solution(\"az\"), \"az\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"fced\"), \"fced\"\nassert solution(\"xyz\"), \"xyz\"\nassert solution(\"r\"), \"r\"\nassert solution(\"dabcef\"), \"dabcef\"\nassert solution(\"az\"), \"az\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"Yes\"\n\n\n------*Type Hint*------"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == [\"Yes\"]\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"fced\"), \"Yes\"\nassert solution(\"xyz\"), \"Yes\"\nassert solution(\"r\"), \"No\"\nassert solution(\"dabcef\"), \"Yes\"\nassert solution(\"az\"), \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'No'\nassert solution('az') == 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'Yes'\nassert solution('az') == 'Yes'\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '6'\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n-10^6 <= a[i] <= 10^6\n1 <= n <= 10^6\na[i] is in the range [1, 10^5]\n-10^6 <= l_i <= r_i <= n\n-10^6 <= c_1, c_2,..., c_q <= 10^6\n-10^6 <= b[i] <= 10^6"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"6\"\nassert solution(inp) == \"7\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 300\n\n1 <= a_1, a_2,..., a_n <= 10^6\n-10^6 <= l_j < 10^6\n-10^6 <= r_j < 10^6\n-10^6 <= c_j < 10^6\n\n1 <= l_j, r_j <= n\n\n1 <= c_i <= m\n\na_i <= a_i < a_j\n\n1 <= q < m\n\nq > 0\n\na_i >= -10^6\na_i < 10^6\n\n-10^6 <= c_i < 10^6"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"7\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\""
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0\n\n-----Sample Input-----\n\n3 2 4 1 4\n1 3\n1 1\n2 4\n3 4\n\n-----Sample Output-----\n\n6\n1\n0\n1\n\n-----Constraints-----\n\n1 <= n <= 1000\n1 <= m <= 1000\n-10^4 <= a_i, l_i, r_j, c_i <= 10^5\n-10^3 <= a_j, l_j, r_j <= 10^4\n-10^2 <= a_k, l_k, r_k <= 10^3\n\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 -2 3 1 2\") == 6\nassert solution(\"1 -1 -1 3 5\") == 4\nassert solution(\"1 2 -2 -1 -2 3 -2 -2 -2 -2 -2 -2 -1 -2 -2 -2 -1 -2 -1 -2 -1 -1 -2 -1 -2 -1 2 -2 -2 -2 -2 -2 -2 -1 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -2 -2 -2 -2 -1 -2 -2 -2 -2 -2 -2 -1 2 -2 -2 -1 2 -2 -2 -2 -1 2 -2 -2 -2 -1 2 -2 -2 -1 2 -2 -2 -1 2 -1 2 -1 2 -1 -2 -2 -1 2 -2 -2 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 0\") == \"0\"\nassert solution(\"2 -2 3 1 2\") == \"4 2\"\nassert solution(\"2 -2 3 1 4\") == \"2 2\"\nassert solution(\"1 3\") == \"0\"\nassert solution(\"1 -1\") == \"0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, [3,2,1]) == 7\nassert solution(2, [1,3,2]) == 2\nassert solution(4, [1,2,3,4]) == 2"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 12\n\nassert solution(stdin) == 4\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 0"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 0\") == \"1\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"[2, 1, 5, 4, 3]\") == 4\nassert solution(\"[1, 5, 4, 3]\") == 4\nassert solution(\"[1, 5, 4, 3]\") == 5\nassert solution(\"[1, 5, 4, 3]\") == 4\nassert solution(\"[1, 5, 4, 3]\") == 5\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 7\n\n-----Constraints-----\n\n1 <= n <= 2^10\n\n1 <= stdin.length <= 10^5\nstdin contains only digits, alphabets and spaces.\nstdin does not contain any duplicate digits and alphabets.\nstdin does not contain any spaces.\n\n\n-----Time Complexity-----\n\nTime complexity: O(n^2), with $n$ as input.\nTime complexity: O(n), with $n$ as input.\n\nSpace Complexity: O(n)\n\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"LRRR\"\nassert solution(stdin) == \"LLRL\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('2 1') == '1 2'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4 5 6') == '3'\nassert solution('1 2 3 4') == '4'\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\n\n\n\n----My Solution----"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"[2, 1, 5, 4, 3]\") == \"4\"\nassert solution(\"[1, 5, 4, 3]\") == \"5\"\nassert solution(\"[1, 5, 4, 3]\") == \"5\"\nassert solution(\"[1, 5, 4, 3]\") == \"5\"\nassert solution(\"[1, 5, 4, 3]\") == \"4\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"LRRRLLL\"\n\n\n\n\"\"\"\nclass Solution:\n    def solve(self, input: str) -> str:\n        pass\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12, \"Your solution is not correct\"\nassert solution(stdin) == 6, \"Your solution is not correct\"\nassert solution(stdin) == 6, \"Your solution is not correct\"\nassert solution(stdin) == 4, \"Your solution is not correct\"\nassert solution(stdin) == 4, \"Your solution is not correct\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 8\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"LLL\"\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\nassert solution(stdin) == 2\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def findStrictlyIncreasingSubarray(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n <= 2:\n            return max(nums)\n        length = [1] * n\n        length[0] = 1\n        for i in range(1, n):\n            length[i] = length[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            length[i] = max(nums[i + 1] - nums[i], length[i + 1])\n        return max(length)\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, [1, 2, 5, 3, 4]) == 4\nassert solution(7, [6, 5, 4, 3, 2, 4]) == 2\nassert solution(5, [1, 2, 3, 4]) == 2\nassert solution(2, [6, 5, 4, 3, 2, 4]) == 2\nassert solution(7, [6, 5, 4, 3, 2, 4]) == 2\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"Your code does not pass the test\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\n\n-----Known Issues-----\n\nIf $a$ is empty, return 0.\n\nIf $a$ is not a subarray of $a$, return -1.\n\nInput\n5\n1 2 5 3 4\n\nOutput\n4\n\nInput\n2\n1 2\n\nOutput\n2\n\nInput\n5\n6 5 3 4\n\nOutput\n2\n\n-----Solution-----\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '4'\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\", \"1\", \"3\", \"4\", \"2\"]) == \"4\"\nassert solution([\"2\", \"1\", \"3\", \"4\", \"5\"]) == \"2\"\nassert solution([\"5\", \"6\", \"5\", \"7\", \"8\"]) == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == \"4\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 3 2\") == \"1\"\nassert solution(\"1 3 4 2\") == \"2\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 3\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2, 'Output is not 2'\nassert solution(stdin) == 1, 'Output is not 1'\nassert solution(stdin) == 0, 'Output is not 0'"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0, 0) == 0\nassert solution(2, 2) == 2\nassert solution(1, 2) == 1\nassert solution(2, 2) == 2"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1 2 2\", \"1 3 2\", \"1 4 3\", \"1 5 4\", \"1 6 4\", \"2 3 6\", \"3 4 6\", \"4 5 6\", \"5 6 6\", \"6 7 6\"]) == \"6\"\nassert solution([\"1 2 2\", \"1 3 2\", \"1 4 3\", \"1 5 4\", \"1 6 4\", \"2 3 6\", \"3 4 6\", \"4 5 6\", \"5 6 6\", \"6 7 6\"]) == \"0\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin),'solution does not work'"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\") == 0\nassert solution(\"1 3 4 5\") == 1\nassert solution(\"1 3\") == 1\nassert solution(\"1 4\") == 2\nassert solution(\"1 4\") == 1\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin: str) == \"2\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1\n\n\n-----Searching in a sorted array-----\n\nUse a binary search tree to find the index of a number $n$.\n\n\n-----Examples-----\nInput\n5 3\n1 2 2 4 5\n\nOutput\n1\n\nInput\n5 3\n1 2 3 3 3\n\nOutput\n3\n\nInput\n5 3\n1 2 3 3 4\n\nOutput\n0\n\n\"\"\"\n\nclass Node:\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n        \nclass Solution:\n    def findIndex(self, num: int) -> int:\n        l = 0\n        r = len(str(num)) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if num % mid == 0:\n                return mid\n            if num % mid > 0:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l\n    \nclass Solution:\n    def findIndex(self, num: int) -> int:\n        l = 0\n        r = len(str(num)) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if num % mid == 0:\n                return mid\n            if num % mid > 0:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l\n    \n\"\"\"\n@lc main=new\n10 2\n8 6\n5 3\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \n)\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('a b') == '4'\nassert solution('a b b') == '4'\nassert solution('a b b b') == '0'\nassert solution('a b b b b') == '0'\nassert solution('a b b b b b') == '0'\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution( \"2 3 4\" ) == \"4\"\nassert solution( \"2 2\" ) == \"1\"\nassert solution( \"3 3\" ) == \"1\"\nassert solution( \"3 4\" ) == \"1\"\nassert solution( \"3 4\" ) == \"1\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"4 4\") == \"4\"\nassert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"3 4\") == \"0\"\nassert solution(\"4 4 5\") == \"0\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '4'"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"4 3 5 4\") == \"3\"\nassert solution(\"2 5 3 2\") == \"3\"\nassert solution(\"6 5 2 3\") == \"2\"\nassert solution(\"6 2 5 7\") == \"1\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"8\", \"3\", \"4\"]) == \"4\"\nassert solution([\"5\", \"1\", \"2\", \"3\", \"4\", \"5\"]) == \"4\"\n\"\"\"\nfrom collections import defaultdict\nfrom math import factorial"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(8, 3, 4) == 4\nassert solution(8, 10, 0) == 0\nassert solution(10, 10, 0) == 0\nassert solution(10, 0, 0) == 0\nassert solution(0, 0, 0) == 0\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), 'Function solution is not defined'\n'''\n\nimport math\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2,8) == 48\nassert solution(2,8) == 0\nassert solution(2,8) == -1\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"48\"\nassert solution(\"1\") == -1"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"48\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"48\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == -1\n\n-----Constraints-----\n1 \u2264 t \u2264 100\n1 \u2264 n \u2264 100\n1 \u2264 d_i \u2264 10^6\n\n-----Time complexity-----\nBest case: O(logn) | O(n)\n\nWorst case: O(logn) | O(n)\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 48\n\n-----Constraints-----\n1 <= t <= 25\n0 <= n <= 10^5\n\n-----Tags-----\nleetcode\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 48\n\n------Challenge-----\n\nYou are given an integer $x$. This is a number that is a perfect number if it is a sum of two primes less than $x$. For example, 2 is a sum of primes of 2 and 3, but it is not a perfect number because 1+2+3 = 4.\n\nYou are given $t$ queries. You are going to answer $t$ queries using constant space.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 25$) \u2014 the number of queries. Then $t$ queries follow.\n\nThe first line of the query contains one integer $n$ ($1 \\le n \\le 300$) \u2014 the number of divisors in the list.\n\nThe second line of the query contains $n$ integers $d_1, d_2, \\dots, d_n$ ($2 \\le d_i \\le 10^6$), where $d_i$ is the $i$-th divisor of the guessed number. It is guaranteed that all values $d_i$ are distinct.\n\n\n-----Output-----\n\nFor each query print the answer to it.\n\nIf the input data in the query is contradictory and it is impossible to find such number $x$ that the given list of divisors is the list of almost all its divisors, print -1. Otherwise print the minimum possible $x$.\n\nAlternatives:\n\n-write a clever method to find the minimum number of perfect number\n-write a clever method to find the minimum perfect number\n\n-----Challenge-----\n\nWrite 2 lines of code to test the correctness of solution:\n\nWe guessed some integer number $x$. You are given a list of almost all its divisors. Almost all means that there are all divisors except $1$ and $x$ in the list.\n\nYour task is to find the minimum possible integer $x$ that can be the guessed number, or say that the input data is contradictory and it is impossible to find such number.\n\nYou have to answer $t$ independent queries.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 25$) \u2014 the number of queries. Then $t$ queries follow.\n\nThe first line of the query contains one integer $n$ ($1 \\le n \\le 300$) \u2014 the number of divisors in the list.\n\nThe second line of the query contains $n$ integers $d_1, d_2, \\dots, d_n$ ($2 \\le d_i \\le 10^6$), where $d_i$ is the $i$-th divisor of the guessed number. It is guaranteed that all values $d_i$ are distinct.\n\n\n-----Output-----\n\nFor each query print the answer to it.\n\nIf the input data in the query is contradictory and it is impossible to find such number $x$ that the given list of divisors is the list of almost all its divisors, print -1. Otherwise print the minimum possible $x$.\n\nAlternatives:\n\n-write a clever method to find the minimum number of perfect number\n-write a clever method to find the minimum perfect number\n\n-----Challenge-----\n\nWrite 2 lines of code to test the correctness of solution:\n\nWe guessed some integer number $x$. You are given a list of almost all its divisors. Almost all means that there are all divisors except $1$ and $x$ in the list.\n\nYour task is to find the minimum possible integer $x$ that can be the guessed number, or say that the input data is contradictory and it is impossible to find such number.\n\nYou have to answer $t$ independent queries.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 25$) \u2014 the number of queries. Then $t$ queries follow.\n\nThe first line of the query contains one integer $n$ ($1 \\le n \\le 300$) \u2014 the number of divisors in the list.\n\nThe second line of the query contains $n$ integers $d_1, d_2, \\dots, d_n$ ($2 \\le d_i \\le 10^6$), where $d_i$ is the $i$-th divisor of the guessed number. It is guaranteed that all values $d_i$ are distinct.\n\n\n-----Output-----\n\nFor each query print the answer to it.\n\nIf the input data in the query is contradictory and it is impossible to find such number $x$ that the given list of divisors is the list of almost all its divisors, print -1. Otherwise print the minimum possible $x$.\n\nAlternatives:\n\n-write a clever method to find the minimum number of perfect number\n-write a clever method to find the minimum perfect number\n\n-----Challenge-----\n\nWrite 2 lines of code to test the correctness of solution:\n\nWe guessed some integer number $x$. You are given a list of almost all its divisors. Almost all means that there are all divisors except $1$ and $x$ in the list.\n\nYour task is to find the minimum possible integer $x$ that can be the guessed number, or say that the input data is contradictory and it is impossible to find such number.\n\nYou have to answer $t$ independent queries.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 25$) \u2014 the number of queries. Then $t$ queries follow.\n\nThe first line of the query contains one integer $n$ ($1 \\le n \\le 300$) \u2014 the number of divisors in the list.\n\nThe second line of the query contains $n$ integers $d_1, d_2, \\dots, d_n$ ($2 \\le d_i \\le 10^6$), where $d_i$ is the $i$-th divisor of the guessed number. It is guaranteed that all values $d_i$ are distinct.\n\n\n-----Output-----\n\nFor each query print the answer to it.\n\nIf the input data in the query is contradictory and it is impossible to find such number $x$ that the given list of divisors is the list of almost all its divisors, print -1. Otherwise print the minimum possible $x$.\n\nAlternatives:\n\n-write a clever method to find the minimum number of perfect number\n-write a clever method to find the minimum perfect number\n\n-----Challenge-----\n\nWrite 2 lines of code to test the correctness of solution:\n\nWe guessed some integer number $x$. You are given a list of almost all its divisors. Almost all means that there are all divisors except $1$ and $x$ in the list.\n\nYour task is to find the minimum possible integer $x$ that can be the guessed number, or say that the input data is contradictory and it is impossible to find such number.\n\nYou have to answer $t$ independent queries.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 25$) \u2014 the number of queries. Then $t$ queries follow.\n\nThe first line of the query contains one integer $n$ ($1 \\le n \\le 300$) \u2014 the number of divisors in the list.\n\nThe"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6\") == 48\nassert solution(\"1 2 3 4 8 12 4 16\") == -1"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '48'"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 2 2 3 2 2 3 3 2 2 3 3 2 3 2\") == \"3\"\nassert solution(\"5 5 12 24\") == \"1\"\nassert solution(\"2 7 6 16\") == \"1\"\nassert solution(\"1 3 1 1 1 1 1 1 1 1\") == \"1\"\nassert solution
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '48'\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '5'\nassert solution(stdin) == '1 3 5 1 6 1'\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(6) == \"3\"\nassert solution(5) == \"2\"\nassert solution(5) == \"1\"\nassert solution(5) == \"0\"\nassert solution(5) == \"0\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 4 3 6\") == \"3 2 4\"\nassert solution(\"1 2 4 3 6 5\") == \"5\"\nassert solution(\"1 2 4 3 6 5 6\") == \"3\"\nassert solution(\"1 2 4 3 6 7 8 9 10\") == \"1\"\nassert solution(\"1 2 4 3 6 7 8 9 10\") == \"1 2 4\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1 4'\nassert solution(stdin) == '3 6'\nassert solution(stdin) == '1 2 4'\nassert solution(stdin) == '1 6'\nassert solution(stdin) == '1 1 1 1'\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 6 6 6 6') == '3 6 5'\nassert solution('3 2 1 3 3') == '3 2'\nassert solution('2 2 2 2 2') == '1 2'\nassert solution('2 2 1 3 4') == '2 3'\nassert solution('4 6 6 6 6') == '4 6 6'\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 5 5 1 6 1') == 3, 'incorrect'\nassert solution('2 4 2 4 4') == 2, 'incorrect'\nassert solution('5 6 6 6 6') == 1, 'incorrect'"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 5 1 5 2 5 1\") == \"2\"\nassert solution(\"5 4 2 4 4 5 6\") == \"2 3 4 5\"\nassert solution(\"5 5 6 6 6 5 1\") == \"2 3 4 5\"\nassert solution(\"2 1 2\") == \"1\"\nassert solution(\"2 4 2 4\") == \"1 2\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5 3 2') == 2\nassert solution('1 3 4') == 2\nassert solution('2 4 2 4') == 3\nassert solution('5 6 6 6') == 1\nassert solution('6 6 6 6 6') == 6\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('43') == 43\nassert solution('123') == 124\nassert solution('1523') == 523\nassert solution('1') == 1\nassert solution('23') == 23\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(432) == 435\nassert solution(99) == 103\nassert solution(237) == 237"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '435'\nassert solution(stdin) == '44'\nassert solution(stdin) == '237'\nassert solution(stdin) == '42'\nassert solution(stdin) == '99'\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(s) == \"435\"\n\"\"\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 44\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(432) == 435\nassert solution(99) == 103\nassert solution(237) == 237\nassert solution(42) == 44\n\n\n'''\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(42) == 44\nassert solution(103) == 233"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 4\nassert solution(stdin) == 8\nassert solution(stdin) == 3\nassert solution(stdin) == 5\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3) == 4\nassert solution(4) == 4\nassert solution(1) == 1\nassert solution(1, 9) == 1\nassert solution(8) == 7\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'aac'\nassert solution(stdin) == 'b'\nassert solution(stdin) == 'c'\nassert solution(stdin) == 'ab'\nassert solution(stdin) == 'd'\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"aac'b'\"\n\nInput\n5\n5\n7\n1 2 3 4 5\n4\n5\n1 3 5 4\n3\n1 0 3 4\n6\n2 1 2 5\n2\n2\n2 0 1 2\n3\n2\n2\n2 2 3 2\n2 2 3 2\n4 0 3 3\n3\n3\n5 2\n3\n3\n3 2\n3 2 3\n3 3 2 2 2 3 2 3 2\n\nOutput\n'abac'\n'a', 'b', 'c'\n'ba'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'\n'a'"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abac\") == \"aab\"\nassert solution(\"abac\") == \"aba\"\nassert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"abac\"\n\n\"\"\""
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\")), (\") == '(((()))'\nassert solution(\"(1))\") == \"1\"\nassert solution(\"1(())(())\") == \"(1)()\"\nassert solution(\"1(())\") == \"(1)\"\nassert solution(\"abc\") == \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"abac\"\nassert solution(inp) == \"abc\"\nassert solution(inp) == \"baac\"\nassert solution(inp) == \"abca\"\nassert solution(inp) == \"aaac\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"bac\"\nassert solution(stdin) == \"abc\"\nassert solution(stdin) == \"aac\"\nassert solution(stdin) == \"b\"\nassert solution(stdin) == \"abb\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"aac\", \"First line should have a string of lowercase English letters.\"\nassert solution(stdin) == \"a\", \"Second line should have an integer corresponding to the length of the string $s$.\"\nassert solution(stdin) == \"aac\", \"Third line should have an integer corresponding to the length of the array $b$.\"\nassert solution(stdin) == \"aba\", \"Third line should have an integer corresponding to the length of the array $b$.\"\nassert solution(stdin) == \"abba\", \"Third line should have an integer corresponding to the length of the array $b$.\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"aac\", \"stdin[6] = 'aac'!= 'aac'\"\nassert solution(stdin) == \"a\", \"stdin[2] = 'a'!= 'a'\"\nassert solution(stdin) == \"a\", \"stdin[5] = 'a'!= 'a'\"\nassert solution(stdin) == \"abc\", \"stdin[2:5] = 'abc'!= 'abc'\"\nassert solution(stdin) == \"abcde\", \"stdin[2:5] = 'abcde'!= 'abcde'\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"aac\"\nassert solution(stdin) == \"aab\"\nassert solution(stdin) == \"abca\"\nassert solution(stdin) == \"aacab\"\nassert solution(stdin) == \"c\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1000000000000001 dogs suddenly appeared under the roof of Roger's house, all of which he decided to keep. The dogs had been numbered 1 through 1000000000000001, but he gave them new names, as follows:\") == \"aaaaa\"\nassert solution(\"1000\") == \"a\"\nassert solution(\"101\") == \"b\"\nassert solution(\"10\") == \"c\"\nassert solution(\"001\") == \"d\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'b'\nassert solution(input()) == 'b'\nassert solution(input()) == 'b'\nassert solution(input()) == 'b'\nassert solution(input()) == 'b'\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"b\"\nassert solution(\"5\") == \"b\"\nassert solution(\"5\") == \"b\"\nassert solution(\"5\") == \"b\"\nassert solution(\"5\") == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"a\") == \"c\"\nassert solution(\"b\") == \"d\"\nassert solution(\"b\") == \"e\"\nassert solution(\"a\") == \"f\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"b\"\n\n-----Basic Test Cases-----\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1000000000000001') == 'b'\nassert solution('1000000000000001') == 'c'\nassert solution('1000000000000001') == 'd'\nassert solution('1000000000000001') == 'e'\nassert solution('1000000000000001') == 'f'\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"b\"\nassert solution(\"2\") == \"a\"\nassert solution(\"1\") == \"b\"\nassert solution(\"4\") == \"c\"\nassert solution(\"8\") == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1000000000000001\") == \"b\"\nassert solution(\"10000000000000\") == \"b\"\nassert solution(\"1000000000000000\") == \"b\"\nassert solution(\"1000000000000000\") == \"b\"\nassert solution(\"1000000000000000\") == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1000000000000001 dogs suddenly appeared under the roof of Roger's house, all of which he decided to keep. The dogs had been numbered 1 through 1000000000000001, but he gave them new names, as follows:\") == \"1000000000000001 dogs suddenly appeared under the roof of Roger's house, all of which he decided to keep. The dogs had been numbered 1 through 1000000000000001, but he gave them new names, as follows: a, b,..., z, aa, ab,..., az, ba, bb,..., bz,..., aa, aab,..., aaz, aba, abb,..., abz,..., zyy, aaaa,..., aaaa,..., azz,..., azzz, aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., aaaaa,..., a"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"b\"\nassert solution(\"5\") == \"b\"\nassert solution(\"4\") == \"b\"\nassert solution(\"1\") == \"b\"\nassert solution(\"10\") == \"b\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nwords = []\n\nfor _ in range(n):\n    words.append(input().strip())\n\nans = 0\nfor i in range(len(words)):\n    for j in range(i + 1, len(words)):\n        for t in range(len(words[i])):\n            if words[i][:t] + words[j][t] == words[i][t:] + words[j][:t]:\n                ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"to be or not to be\", \"a ab aa aa bb bb\", \"aa bb aa bb bb\", \"a ab aa aa bb bb\"]) == \"12\"\nassert solution([\"to be or not to be\", \"a ab aa aa bb bb\", \"aa bb aa bb bb\", \"a ab aa aa bb bb\"]) == \"11\"\nassert solution([\"a baba\", \"a babb\", \"bababa\", \"bababab\", \"babababab\", \"bababababab\", \"babababababab\"]) == \"11\"\nassert solution([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]) == \"12\"\nassert solution([\"to be or not to be\", \"a ab aa aa bb bb\", \"aa bb aa bb bb\", \"a ab aa aa bb bb\"]) == \"12\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == len(stdin), \"Should be %d\" % len(stdin)\n\npass"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('to be or not to be') == 12\nassert solution('a ab aa aa bb bb') == 11\nassert solution('aa bb aa aa bb bb') == 13\nassert solution('AA AB AA B B C') == 10\nassert solution('AB aa AB aa B bb') == 12\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()), \"Min Length of text after at most one abbreviation\"\nassert solution(input()), \"Min Length of text after at most one abbreviation\""
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 13, \"The text after the minimum length of one abbreviation is not correct\"\n\n-----Known cases-----\n\nInput:\n3\nto be or not to be to be to be to be\nOutput:\n3\n\nInput:\n2\nto be\nOutput:\n2\n\nInput:\n1\nto be or not to be or not to be\nOutput:\n1\n\nInput:\n2\naab aa\nOutput:\n1\n\nInput:\n2\nabab\nOutput:\n1\n\nInput:\n1\naab\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n1\n\nInput:\n1\naab\nOutput:\n1\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n3\nabab\nOutput:\n3\n\nInput:\n2\nabab\nOutput:\n2\n\nInput:\n1\naab\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n1\n\nOutput:\n2\n\nInput:\n2\naab\nOutput:\n2\n\nInput:\n2\naab\nOutput:\n2\n\nInput:\n1\nab\nOutput:\n1\n\nInput:\n1\naa\nOutput:\n1\n\nInput:\n2\naaaa\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n2\naaab\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n1\n\nInput:\n2\naaa\nOutput:\n1\n\nInput:\n2\naaa\nOutput:\n1\n\nInput:\n1\naab\nOutput:\n1\n\nInput:\n2\naaab\nOutput:\n2\n\nInput:\n2\naabab\nOutput:\n2\n\nInput:\n1\naaa\nOutput:\n1\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naabab\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n1\naaaa\nOutput:\n1\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n1\naaaa\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n1\naab\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n1\naaaa\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n2\naaaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n1\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n1\naaa\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n1\naab\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n1\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n1\naaa\nOutput:\n1\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n1\naaa\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n1\naaa\nOutput:\n1\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n1\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n1\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n1\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n1\naaa\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n1\n\nInput:\n2\naaa\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n1\naaa\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n1\naaa\nOutput:\n1\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n1\naaa\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n1\n\nInput:\n1\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n2\naaa\nOutput:\n1\n\nInput:\n2\naaa\nOutput:\n2\n\nInput:\n1\naaa\nOutput:\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, [\"to be or not to be\", \"a ab aa aa bb bb\", \"a ab aa bb bb\", \"a a a a a b b bb\", \"a b b b b b b b b b b\"]) == 11\nassert solution(1, [\"to be or not to be\"]) == 1\nassert solution(4, [\"to be or not to be\", \"a ab aa aa bb bb\"]) == 1\nassert solution(5, [\"to be or not to be\", \"a a a a a a b b b b b\"]) == 4\nassert solution(6, [\"a ab aa aa bb bb\", \"a ab aa bb bb\", \"a a a a a a b b bb\", \"a b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12\n\"\"\""
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 11, \"11\"\n\nassert solution(stdin) == 12, \"12\"\n\nassert solution(stdin) == 13, \"13\"\n\nassert solution(stdin) == 14, \"14\"\n\n\n-----Code-----\n\nfor i in range(int(input())):\n    words = input().split(' ')\n    word = input()\n    word = word.upper()\n    for j in range(len(words)):\n        word = word.replace(words[j], word[:j]+word[j+1:])\n    print(len(word))\n\n-----Time Complexity-----\n\nn = len(input())"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 12\nassert solution(input()) == 13\nassert solution(input()) == 11\nassert solution(input()) == 13\nassert solution(input()) == 13"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('8 3' ) == '20'\nassert solution('5 4 2 6 5 1 9 2' ) == '3 2 3'\nassert solution('4 2') == '4'\nassert solution('1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1') == '1 1'\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '4000'\nassert solution(stdin) == '1 2000'\nassert solution(stdin) == '1 2000 2000'\nassert solution(stdin) == '1 2 2000 2000'\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), 'Error'\n\nIn the second example there is only one possible distribution.\n\nIn the third example the best answer is to distribute problems in the following way: $[1, 2, 3], [2, 4, 5]$. The total profit of this distribution is $2 + 4 + 5 = 10$\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4000'\nassert solution(stdin) == '4000'\n\nassert solution(stdin) == '4000'\nassert solution(stdin) == '4000'\n\nassert solution(stdin) == '4000'\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '4000'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4000'\n\n------Constraints----\n\n1 <= stdin.length <= 100\n1 <= stdin[i] <= 2000\n\n1 <= a_i <= 2000\n\n------Time Limit (Coding Time Limit)----\n\nO(nk)\n\nO(n)\n\n------Solutions----\n\nSolution:\n-------------------\n\nRuntime: 48 ms, faster than 63.10% of Python3 online submissions for Maximum Profit with Different Difficulty.\nMemory Usage: 21.2 MB, less than 97.66% of Python3 online submissions for Maximum Profit with Different Difficulty.\n\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        diff = []\n        for i in range(len(prices)):\n            diff.append(prices[i] - prices[i+1])\n        for i in range(len(diff)):\n            diff[i] = diff[i] if diff[i] < 0 else 0\n        return max(diff)\n\n\"\"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"No solution\"\n\n-----Constraints-----\n1 <= stdin.length <= 15\n1 <= stdin[i] <= 2000\nstdin.length <= k <= stdin.length\n\n------Submissions-----\n724ms\n\nclass Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        def dfs(k, profits):\n            if not k:\n                return 0\n            if len(profits) == k:\n                return max(profits) - min(profits)\n            max_profit = 0\n            for i in range(k):\n                max_profit = max(profits[i] + dfs(k - 1, profits[:i] + profits[i + 1:]), max_profit)\n            return max_profit\n\n        return dfs(k, prices)\n\"\"\"\n\nclass Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        if len(prices) <= k:\n            return 0\n        dp = []\n        dp.append(0)\n        for i in range(1, len(prices)):\n            dp.append(max(dp[i - 1] + prices[i], prices[i]))\n        return dp[-1]\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '4000'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4000\"\nassert solution(stdin) == \"2000\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 -5 3 2') == '0'\nassert solution('5 -11 -15 10 5 4 -4') == '3'\nassert solution('8 -5 -11 -15 10 5 4 -4') == '0'\nassert solution('9 -1 1 -1 1 1 -1 -1') == '1'\nassert solution('-1 1 -1 1 -1 1 -1 -1') == '1'\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 -5 3 2\") == \"0\"\nassert solution(\"1 4 -2 3 -9 2\") == \"0\"\nassert solution(\"1 -1 1 -1 1 1 -1 -1\") == \"0\"\nassert solution(\"1 1 -1 1 -1 1 -1 -1\") == \"0\"\nassert solution(\"1 10 -5 -11 -15 10 5 4 -4\") == \"0\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 -5 3 2') == '1'\nassert solution('5 -2 3 -9 2') == '0'\nassert solution('8 -1 1 -1 1 1 -1 -1') == '3'\n\n\nInput\n3\n1 1 1 -1 1 1 1 -1\n\nOutput\n3\n\nInput\n3\n-1 -1 1 -1 1 1 1 -1 -1\n\nOutput\n0\n\n\nInput\n3\n1 1 1 -1 1 1 -1 1 1\n\nOutput\n0\n\n\nInput\n5\n1 3 2 4 -1\n\nOutput\n5\n\n\nInput\n5\n1 2 3 -4 1 -3\n\nOutput\n5\n\n\nInput\n6\n2 4 3 3 -7 -3 4 -4 -2 -2 -2 -2 2 -2 -3 2 -3\n\nOutput\n3\n\n\nInput\n10\n-1 1 -1 1 -1 1 1 -1 -1 -1 -1 1 -1 -1 1 -1\n\nOutput\n0\n\n\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 -1 -1 -1 -1 -1 -1 1 2\") == \"3\"\nassert solution(\"9 0 3 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 4\") == \"1\"\nassert solution(\"4 2 1\") == \"1\"\nassert solution(\"2 4 7\") == \"0\"\nassert solution(\"2 4 9\") == \"0\"\nassert solution(\"2 4 8\") == \"0\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"9 -1 1 -1 1 1 -1 -1 -1 1 1 1 -1 -1 -1 1 -1 1 -1 -1 -1 1 1 1 -1 -1 -1 1 1 -1 -1 -1 1 1 1 -1 -1 -1 1 -1 1 -1 -1 -1 1 1 1 -1 -1 -1 1 1 1 -1 -1 -1 1 1 1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"3\"\n\nInput\n10\n
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 -5 3 2') == '1'\nassert solution('4 -2 3 -9 2') == '0'\nassert solution('8') == '0'\nassert solution('9') == '0'\nassert solution('10') == '0'\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '10'\nassert solution(stdin) == '1000000000'\nassert solution(stdin) == '2000000000'\nassert solution(stdin) == '0'"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    (\"5\", 1, \"100\", \"2\", \"5\", \"2\", \"0\", \"0\", \"3\", \"0\", \"0\", \"3\", \"0\", \"0\", \"0\", \"10\")\n), \"0\""
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, [1, 100, 2, 2]) == 0\nassert solution(5, [1, 100, 2, 2, 5]) == 2\nassert solution(5, [1, 100, 2, 2, 5, 5]) == 10\nassert solution(5, [1, 100, 2, 2, 5, 5, 0]) == 2\n\n\n-----Time complexity-----\n\nTime complexity of recursive function: O(n^2)\nTime complexity of constant: O(n^2)\n\n\n-----space complexity-----\n\nSpace complexity of constant: O(1)\nSpace complexity of recursive function: O(n)\nSpace complexity of constant: O(n)\n\n\n-----Bonus-----\n\nTime complexity: O(n)\nSpace complexity: O(1)\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 100\") == \"2\"\nassert solution(\"1 100 100\") == \"10\"\nassert solution(\"1 100 0\") == \"2\"\nassert solution(\"1 100 1\") == \"2\"\nassert solution(\"1 100 10\") == \"11\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"5\"\nassert solution(\"3\") == \"12\"\nassert solution(\"4\") == \"10\"\nassert solution(\"4\") == \"10\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 10\n\n\n\"\"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '10'\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 4\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"7\") == \"4\"\nassert solution(\"77\") == \"5\"\nassert solution(\"777\") == \"4\"\nassert solution(\"7 9 7 8 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9 7 9"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\")((\") == -1\nassert solution(\")(('))\") == 7\nassert solution(\"))(('\") == -1\nassert solution(\"))(('\")) == -1\nassert solution(\"))(('))\") == 7\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == -1\nassert solution(inp) == 4\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"77\") == 4\nassert solution(\"7\") == -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 3, \"The function should return a string.\"\nprint(type(pass))\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"101\") == 4\nassert solution(\"101\") == 4\nassert solution(\"1\") == -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"7,77,777,77,777\") == 4\nassert solution(\"\") == -1\nassert solution(\"1,3,5\") == 2\nassert solution(\"1,3,5,7,9\") == 4\nassert solution(\"1,3,5,7,9,13,21,34\") == -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 8\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\n\n-----Extra Credit-----\n\nCode by @csound."
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"48\"\n\n----Constraints----\n1 <= n <= 10^5\n1 <= m <= n\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 1 3 4 5') == '1 2 3 4 5'\nassert solution('1 1 2 3 4 5') == '1 2 3 4 5'\nassert solution('1 1 2 3 4 5') == '1 2 3 4 5'\nassert solution('1 1 2 3 4 5') == '1 2 3 4 5'\nassert solution('1 1 2 3 4 5') == '1 2 3 4 5'\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\n\nOutput\n1\nExplanation\n\nThe problem is solved using a two-pass algorithm.\n\nThe first two pairs will be the smallest and the second pair will be the largest one.\nSo, there will be a single pair with value 4 and the pairs with values 2, 3, 4 and 5.\n\nThe second pair (2, 3) will be the smallest and the second pair (3, 2) will be the largest one.\nSo, there will be a single pair with value 4 and the pairs with values 2, 3, 4 and 5.\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5\") == \"4\"\nassert solution(\"1 2 3 4 5 1\") == \"1\"\nassert solution(\"1 2 3 4 5 2\") == \"1\"\nassert solution(\"1 2 3 4 5 2 1\") == \"1\"\nassert solution(\"1 2 3 4 5 3 1\") == \"2\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input().strip()) == 7\n\n-----Constraints-----\n0 < stdin.length < 100\n\n0 < m < 100\n\n0 < p_i < n\n\n-----Time Limit-----\n1 second\n\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"48\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '4'\n\n-----Constraints-----\n0 <= n <= 100\n0 <= m <= 10^6\n\n0 < stdin.length <= 10^5\n0 < stdin[i] <= 10^9\n\n[input]\n\nThe first line of input contains a single integer, $n$ denoting the length of the given sequence.\n\nThe second line contains a permutation of the integers $1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606,"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n\n\n-----Example-----\n\nInput\n5 8\n2 3 1 1 2\n\nOutput\n4\n\nInput\n5 16\n5 5 5 5 5\n\nOutput\n2\n\nInput\n5 26\n5 5 5 5 5\n\nOutput\n2\n\nInput\n5 26\n5 5 5 5 5\n\nOutput\n-1\n\nThe answer can be written by the program Polycarp. However, the time is much higher. The program Polycarp has written $n$ cups of coffee and $k$ cups of coffee in a cup.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe coursework can be written by the program Polycarp.\n\nThe"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(1)\n\n\n\nExample 1:\nInput:\n    5\n    2\n    1\n    2\n    1\n    1\n    3\nOutput:\n    4\n\nInput:\n    7\n    5\n    5\n    3\n    4\n    2\n    2\nOutput:\n    2\n\nInput:\n    5\n    5\n    5\n    4\n    3\n    4\n    1\nOutput:\n    -1\n\n\n\nConstraints:\n\n1 <= stdin.length <= 10^5\n1 <= n <= 10^4\n1 <= a_1, a_2, a_3, a_n <= 100\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 4\") == \"4\"\nassert solution(\"1 4 1 1 2\") == \"4\"\nassert solution(\"1 4 1 1 2 5\") == \"3\"\nassert solution(\"1 4 5 6 7 8 9 10\") == \"1\"\nassert solution(\"1 4 6 9 10 11 12 13\") == \"3\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 8', '2 3 1 1 2') == 4\nassert solution('7 10', '5 5 5 5 5') == 2\nassert solution('5 16', '5 5 5 5 5') == 1\nassert solution('5 26', '5 5 5 5 5') == -1\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 3 1 1 2') == '2'\nassert solution('2 3 4 2 1 4 2') == '3'\nassert solution('1') == '1'\nassert solution('0 1 1') == '0'\nassert solution('0 0 1') == '0'\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 5 8 3 1 1 2\") == \"4\"\nassert solution
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0, \"\\\"\" + str(stdin) + \"\\\"\" + \" is not an arithmetic progression\"\nassert solution(stdin) == -1, \"\\\"\" + str(stdin) + \"\\\"\" + \" is not an arithmetic progression\"\nassert solution(stdin) == 0, \"\\\"\" + str(stdin) + \"\\\"\" + \" is not an arithmetic progression\"\nassert solution(stdin) == 0, \"\\\"\" + str(stdin) + \"\\\"\" + \" is not an arithmetic progression\"\nassert solution(stdin) == 0, \"\\\"\" + str(stdin) + \"\\\"\" + \" is not an arithmetic progression\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"24\") == 3, \"24\"\nassert solution(\"2421\") == 3, \"2421\"\nassert solution(\"242114\") == 3, \"242114\"\nassert solution(\"242112\") == 3, \"242112\"\nassert solution(\"242112\") == -1, \"242112\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '-1'"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == -1"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1, \"It is impossible to make an arithmetic progression with described operations.\"\nassert solution(stdin) == 1, \"It is impossible to make an arithmetic progression without described operations.\""
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5 1 1 4 5 4 4') == 3\nassert solution('2 3 3 6 1') == 0\nassert solution('4 3 4 4 2') == 0\nassert solution('1 1 1 0 0') == 1\nassert solution('2 1 2 1 1') == 2\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == str(-1)\nassert solution(stdin) == str(0)"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\""
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n\nExplanation\nThe students are in teams 1, 2 and 3, each of which has their skills ranging from 1 to 50, and each team is also balanced by only having a skill of 1.\n\nWe can also perform a balance in teams 2 and 3, which is unique, because the skill of a team is the maximum possible for the difference between the student's skills from a team and the skill of the next team.\n\nThe tasks are balanced in teams 2 and 3.\n\nThe input file contains only one line, the number of students and the maximum number of teams.\n\nThe output file contains one line, the maximum possible total number of students in no more than $k$ (and at least one) non-empty balanced teams.\n\nThe input file contains the same set of lines as the input file, but there are $n$ lines, each containing two integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is a programming skill of the $i$-th student.\n\nOutput\n500\n\nThe input file contains the same set of lines as the input file, but there are $n$ lines, each containing two integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is a programming skill of the $i$-th student.\n\nThe output file contains the maximum possible total number of students in no more than $k$ (and at least one) non-empty balanced teams.\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    [\"5\",\"2\",\"2\",\"1\",\"3\"]\n) == \"5\"\nassert solution(\n    [\"6\",\"1\",\"5\",\"4\",\"2\",\"1\"]\n) == \"2\"\nassert solution(\n    [\"6\",\"1\",\"3\",\"5\",\"4\",\"2\",\"1\"]\n) == \"1\"\nassert solution(\n    [\"6\",\"1\",\"3\",\"5\",\"4\",\"2\",\"1\"]\n) == \"3\"\nassert solution(\n    [\"6\",\"1\",\"3\",\"5\",\"4\",\"2\",\"1\"]\n) == \"3\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 21\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 6\n\nInput\n5 3\n1 2 15 15 15\n\nOutput\n3\n\nInput\n5 4\n1 10 100 1000\n\nOutput\n2\n\nInput\n4 4\n1 100 1000 10000\n\nOutput\n4\n\n------------------"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '5'\n\n\n-----Example-----\nInput\n2\n6 1\n1 10 100 1000\n\nOutput\n3\n3\n\n-----Constraints-----\n1 \u2264 n \u2264 5000, 1 \u2264 k \u2264 10000, 1 \u2264 a_i \u2264 10^9\n\nTime Limit: 10s\n\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '2'\n\n\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == str(int(1e9))\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(str) == 18\nassert solution(str) == 18\nassert solution(str) == 18\nassert solution(str) == 18\nassert solution(str) == 18\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"7\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"4\",\"10\"]) == \"7\"\nassert solution([\"6\",\"8\",\"10\",\"3\",\"3\",\"3\"]) == \"7\"\nassert solution([\"2\",\"7\",\"6\",\"6\"]) == \"5\"\nassert solution([\"2\",\"3\",\"5\",\"4\",\"6\"]) == \"5\"\nassert solution([\"2\",\"3\",\"4\",\"5\",\"6\"]) == \"7\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, 7) == 8,'solution should return 8, given 5 and 7'\nassert solution(5, 3) == 3,'solution should return 3, given 5 and 3'\nassert solution(4, 5) == -1,'solution should return -1, given 4, 5'\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"7\"\nassert solution(input) == \"-1\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"incorrect input\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\\\"\"\"\n+\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n\"\"\") == -1\nassert solution(\\\"\"\"\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n++++\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0) == -1\nassert solution(1) == 7\nassert solution(2) == 10\nassert solution(3) == 5\nassert solution(4) == 6\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 8\n\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 10 7\") == \"7\"\nassert solution(\"8 10 3 6\") == \"10\"\nassert solution(\"8 10 3 6\") == \"-1\"\nassert solution(\"10 5\") == \"0\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"6 3 4 3 2 2 1 1 2\") == \"Yes\"\nassert solution(\n    \"6 3 4 3 2 2 1 1 2\") == \"No\"\nassert solution(\n    \"6 3 4 3 2 2 1 1 2\") == \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    ['6 3 4', '3', '1', '3', '2', '1']\n    ), '3'\nassert solution(\n    ['1', '1', '1', '1', '1', '1']\n    ), 'No'\nassert solution(\n    ['6', '4', '5', '3', '2', '1']\n    ), 'No'\nassert solution(\n    ['2', '1', '2', '1', '1', '1']\n    ), 'No'\nassert solution(\n    ['4', '3', '2', '1', '1', '1']\n    ), 'No'\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"No\"\nassert solution(\"1 4\") == \"No\"\nassert solution(\"1 7\") == \"Yes\"\nassert solution(\"2 1\") == \"Yes\"\nassert solution(\"2 2\") == \"Yes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 3 4') == 'Yes'\nassert solution('2 3 2') == 'No'\nassert solution('2 3') == 'No'\nassert solution('1 1 1') == 'No'\nassert solution('1 1 1 1') == 'Yes'\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['3 4', '3', '2', '3', '2', '1']) == 'Yes'\nassert solution(['4 4', '3', '2', '2', '1', '3']) == 'Yes'\nassert solution(['5 4', '4', '2', '3', '2', '2']) == 'No'\nassert solution(['3', '3', '1', '3', '1', '1']) == 'No'\nassert solution(['4', '4', '2', '3', '2', '2']) == 'No'\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 'No'\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'No'\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"6 3 4\") == \"No\"\nassert solution(\"3 4\") == \"No\"\nassert solution(\"3 4 5\") == \"No\"\nassert solution(\"1 2 1\") == \"No\"\nassert solution(\"1 3 2\") == \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'No'\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution) == \"Yes\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"NO\"\nassert solution(\"5 4\") == \"YES\"\nassert solution(\"5 4\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0 0 0 1 1 1\") == \"YES\"\nassert solution(\"1 0 0 0 1 1\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"4 3\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"0 0 0 1\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution == \"NO\" or solution == \"YES\", \"Not implemented\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 2 1\") == \"YES\"\nassert solution(\"3 4\\n0 0 0 1\") == \"NO\"\nassert solution(\"3 2\\n1 1 1 1\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 0 0 0 0 0') == 'NO'\nassert solution('2 1 0 0 0 0') == 'YES'\nassert solution('3 1 0 0 0 0') == 'NO'"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    f\n) == 'YES'\n\n\n\"\"\"\nO(n^3)\nO(n)\n\"\"\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"YES\"\nassert solution(inp) == \"YES\"\nassert solution(inp) == \"YES\"\nassert solution(inp) == \"NO\""
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"123546345\") == \"No\"\nassert solution(\"121\") == \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('53') == 'Yes'\nassert solution('53') == 'No'\nassert solution('376') == 'Yes'\nassert solution('377') == 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4\") == \"No\"\nassert solution(\"100\") == \"Yes\"\nassert solution(\"9001\") == \"Yes\"\nassert solution(\"5\") == \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, \"12\") == \"Yes\"\nassert solution(1, \"27\") == \"No\"\nassert solution(1, \"36\") == \"No\"\nassert solution(2, \"1\") == \"No\"\nassert solution(2, \"6\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1234567890\") == \"Yes\"\nassert solution(\"123456789012345678901234567890\") == \"No\"\nassert solution(\"123456789012345678901234567890\") == \"Yes\"\nassert solution(\"123456789012345678901234567890\") == \"No\"\nassert solution(\"123456789012345678901234567890\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\n------IMP---\n\nThe only input contains a string of digits. The length of the string is between 1 and 10, inclusive.\n\nInput\n373\n\nOutput\nYes\n\nInput\n121\n\nOutput\nNo\n\nInput\n436\n\nOutput\nNo\n\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"prime\") == \"Yes\"\nassert solution(\"pqrst\") == \"Yes\"\nassert solution(\"pqrstfive\") == \"No\"\nassert solution(\"pqrstfourseven\") == \"No\"\nassert solution(\"pqrstsixseveneight\") == \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2121\") == \"Yes\", \"incorrect\"\nassert solution(\"2121\") == \"No\", \"incorrect\""
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"73167176531330624919225119674426574742355349194934\\\n82496908474638506326239578318016984801869478851843\\\n85861560789112949495459501737958331952853208805511\\\n12540698747158523863050715693290963295227443043557\\\n66896648950445244523161731856403098711121722383113\\\n62229893423380308135336276614282806444486645238749\\\n30358907296290491560440772390713810515859307960866\\\n70172427121883998797908792274921901699720888093776\\\n65727333001053367881220235421809751254540594752243\\\n52584907711670556013604839586446706324415722155397\\\n53697817977846174064955149290862569321978468622482\\\n83972241375657056057490261407972968652414535100474\\\n82166370484403199890008895243450658541227588666881\\\n16427171479924442928230863465674813919123162824586\\\n17866458359124566529476545682848912883142607690042\\\n24219022671055626321111109370544217506941658960408\\\n07198403850962455444362981230987879927244284909188\\\n84580156166097919133875499200524063689912560717606\\\n05886116467109405077541002256983155200055935729725\\\n71636269561882670428252483600823257530420752963450\") == \"Yes\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"4 1 3 4 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 3') == '3'\nassert solution('2 3 1') == '3'\nassert solution('2 3 2 1') == '3'\nassert solution('1 3 1 0 1') == '3'\nassert solution('1 3 2 1 0') == '3'\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n1 2\n0 0 0\n1 1 1\n1 1 0\n0 1 0\n1 0 0\n0 1 0\n0 1 0\n2\n3\n4\n5\n6\n\"\"\") == \"3\"\nassert solution(\"\"\"\n0 1 2\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n0 0 0\n0 0 0\n1 0 0\n0 1 0\n0 0 0\n0 1 0\n1 1 0\n1 0 0\n0 0 0\n1 0 0\n1 1 0\n2\n3\n4\n5\n6\n\"\"\") == \"5\"\nassert solution(\"\"\"\n0 1 2\n0 0 0\n0 0 0\n0 1 0\n0 0 0\n0 0 0\n0 0 0\n0 1 0\n1 1 0\n0 0 0\n0 1 0\n0 0 0\n0 0 0\n0 0 0\n0 1 0\n1 1 0\n0 0 0\n0 0 0\n0 1 0\n1 0 0\n1 1 0\n1 0 0\n2\n3\n4\n5\n6\n\"\"\") == \"5\"\nassert solution(\"\"\"\n1 0 0\n0 0 0\n0 1 0\n0 0 0\n0 0 0\n1 0 0\n0 0 0\n1 0 0\n0 0 0\n0 0 0\n0 1 0\n0 0 0\n0 0 0\n0 0 0\n0 1 0\n0 0 0\n0 0 0\n0 0 0\n1 0 0\n1 1 0\n1 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 1 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 0 0\n1 1 0\n0 0 0\n1 0 0\n1 1 0\n1 0 0\n1 1 0\n1 0 0\n0 0 0\n1 0 0\n1 1 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 0 0\n1 1 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 0 0\n1 1 0\n1 0 0\n1 1 0\n1 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 0 0\n1 1 0\n1 0 0\n1 1 0\n1 0 0\n1 1 0\n1 0 0\n0 0 0\n0 0 0\n1 0 0\n0 0 0\n1 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    input()\n) == '3'\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 3 4\") == \"5\"\nassert solution(\"0 2 1 0 1 0 0\") == \"3\"\nassert solution(\"2 0 0 0 0 0 1 0 0 1\") == \"2\"\nassert solution(\"1 0 0 1 0 1 0 1 0 0\") == \"3\"\nassert solution(\"0 1 0 1 0 1 0 1 0 0\") == \"3\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"5\", \"2\", \"1\"]) == \"3\"\nassert solution([\"6\", \"1\", \"0\"]) == \"4\"\nassert solution([\"6\", \"0\", \"0\"]) == \"3\"\nassert solution([\"6\", \"0\", \"0\"]) == \"4\"\nassert solution([\"5\", \"1\", \"0\"]) == \"1\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 2 1\") == \"5\"\nassert solution(\"6 2 1\") == \"3\"\nassert solution(\"7 2 1\") == \"1\"\nassert solution(\"8 2 1\") == \"1\"\nassert solution(\"9 2 1\") == \"1\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == 2\nassert solution(\"0 0 0\") == 3\nassert solution(\"0 0 1\") == 2\nassert solution(\"0 1 0\") == 2\nassert solution(\"1 1 1\") == 2\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\",\"2\",\"1\",\"0\",\"1\",\"0\",\"0\",\"0\"]) == \"4\"\nassert solution([\"6\",\"2\",\"1\",\"0\",\"1\",\"0\",\"0\",\"0\"]) == \"3\"\nassert solution([\"6\",\"2\",\"1\",\"0\",\"1\",\"0\",\"0\",\"0\"]) == \"3\"\nassert solution([\"6\",\"2\",\"1\",\"0\",\"1\",\"0\",\"0\",\"0\"]) == \"5\"\nassert solution([\"6\",\"2\",\"1\",\"0\",\"1\",\"0\",\"0\",\"0\"]) == \"5\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '3'"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"8-7+6-5+4-3+2-1-0\",\n    \"8+5\"\n    ) == \"4\"\nassert solution(\n    \"3+3\",\n    \"3+\"\n    ) == \"7\"\nassert solution(\n    \"10+10\",\n    \"1\"\n    ) == \"2\"\nassert solution(\n    \"5+5\",\n    \"4\"\n    ) == \"6\"\nassert solution(\n    \"3-2\",\n    \"3-0\"\n    ) == \"5\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(8-7+6-5+4-3+2-1-0) == 4\nassert solution(112-37) == -46\nassert solution(12) == 5"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"+\") == \"375\"\nassert solution(\"-\") == \"375\"\nassert solution(\"-7\") == \"375\"\nassert solution(\"12+13\") == \"56\"\nassert solution(\"2+2+12\") == \"824\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '5'\nassert solution('1') == '2'\nassert solution('0') == '1'\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1-3*2+3\") == \"1\"\nassert solution(\"5*7-3\") == \"121\"\nassert solution(\"2*4-1-0\") == \"0\"\nassert solution(\"1-3*2\") == \"2\"\nassert solution(\"5*7*3\") == \"0\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1+1\") == \"3\"\nassert solution(\"2*3-1\") == \"-1\"\nassert solution(\"-9*1\") == \"7\"\nassert solution(\"1+8\") == \"12\"\nassert solution(\"1*1\") == \"0\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"375\"\nassert solution(\"112-37\") == \"4\"\nassert solution(\"--\") == \"0\"\nassert solution(\"--\") == \"0\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"375\""
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3+4\") == \"7\"\nassert solution(\"1+2*3-4\") == \"14\"\nassert solution(\"2-1+3\") == \"3\"\nassert solution(\"2*3-4\") == \"6\"\nassert solution(\"1*2-3\") == \"0\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1+1\") == \"2\"\nassert solution(\"2+2\") == \"4\"\nassert solution(\"10+9\") == \"13\"\nassert solution(\"1+2\") == \"1\"\nassert solution(\"2+3\") == \"1\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('123456') == 'YES'\nassert solution('123456789') == 'YES'\nassert solution('113322') == 'NO'\nassert solution('12345678') == 'NO'\nassert solution('12345679') == 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\nstdin) == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n[\n    \"1 5\",\n    \"1 4\",\n    \"2 1\",\n    \"2 2\",\n    \"2 2\",\n    \"2 3\",\n    \"3 4\",\n    \"3 4\",\n    \"3 1\",\n    \"3 4\",\n    \"4 1\",\n    \"4 2\",\n    \"4 3\",\n    \"5 4\",\n    \"5 4\",\n    \"6 1\",\n    \"6 2\",\n    \"6 2\",\n    \"7 1\",\n    \"7 2\",\n    \"7 3\",\n    \"8 3\",\n    \"8 3\",\n    \"8 4\",\n    \"9 1\",\n    \"9 2\",\n    \"9 3\",\n    \"10 1\",\n    \"10 2\",\n    \"10 3\",\n    \"11 4\",\n    \"11 4\",\n    \"12 1\",\n    \"12 2\",\n    \"12 2\",\n    \"13 1\",\n    \"13 2\",\n    \"13 3\",\n    \"14 1\",\n    \"14 2\",\n    \"14 3\",\n    \"15 3\",\n    \"16 4\",\n    \"16 4\",\n    \"17 1\",\n    \"17 2\",\n    \"18 2\",\n    \"19 1\",\n    \"19 3\",\n    \"20 1\",\n    \"20 3\",\n    \"21 1\",\n    \"21 2\",\n    \"22 1\",\n    \"22 2\",\n    \"23 1\",\n    \"23 2\",\n    \"24 1\",\n    \"24 2\",\n    \"25 1\",\n    \"25 2\",\n    \"26 1\",\n    \"26 2\",\n    \"27 1\",\n    \"27 2\",\n    \"28 1\",\n    \"28 2\",\n    \"29 1\",\n    \"29 2\",\n    \"30 1\",\n    \"30 2\",\n    \"31 1\",\n    \"31 2\",\n    \"32 1\",\n    \"32 2\",\n    \"33 1\",\n    \"33 2\",\n    \"34 1\",\n    \"34 2\",\n    \"35 1\",\n    \"35 2\",\n    \"36 1\",\n    \"36 2\",\n    \"37 1\",\n    \"37 2\",\n    \"38 1\",\n    \"38 2\",\n    \"39 1\",\n    \"39 2\",\n    \"40 1\",\n    \"40 2\",\n    \"41 1\",\n    \"41 2\",\n    \"42 1\",\n    \"42 2\",\n    \"43 1\",\n    \"43 2\",\n    \"44 1\",\n    \"44 2\",\n    \"45 1\",\n    \"45 2\",\n    \"46 1\",\n    \"46 2\",\n    \"47 1\",\n    \"47 2\",\n    \"48 1\",\n    \"48 2\",\n    \"49 1\",\n    \"49 2\",\n    \"50 1\",\n    \"50 2\",\n    \"51 1\",\n    \"51 2\",\n    \"52 1\",\n    \"52 2\",\n    \"53 1\",\n    \"53 2\",\n    \"54 1\",\n    \"54 2\",\n    \"55 1\",\n    \"55 2\",\n    \"56 1\",\n    \"56 2\",\n    \"57 1\",\n    \"57 2\",\n    \"58 1\",\n    \"58 2\",\n    \"59 1\",\n    \"59 2\",\n    \"60 1\",\n    \"60 2\",\n    \"61 1\",\n    \"61 2\",\n    \"62 1\",\n    \"62 2\",\n    \"63 1\",\n    \"63 2\",\n    \"64 1\",\n    \"64 2\",\n    \"65 1\",\n    \"65 2\",\n    \"66 1\",\n    \"66 2\",\n    \"67 1\",\n    \"67 2\",\n    \"68 1\",\n    \"68 2\",\n    \"69 1\",\n    \"69 2\",\n    \"70 1\",\n    \"70 2\",\n    \"71 1\",\n    \"71 2\",\n    \"72 1\",\n    \"72 2\",\n    \"73 1\",\n    \"73 2\",\n    \"74 1\",\n    \"74 2\",\n    \"75 1\",\n    \"75 2\",\n    \"76 1\",\n    \"76 2\",\n    \"77 1\",\n    \"77 2\",\n    \"78 1\",\n    \"78 2\",\n    \"79 1\",\n    \"79 2\",\n    \"80 1\",\n    \"80 2\",\n    \"81 1\",\n    \"81 2\",\n    \"82 1\",\n    \"82 2\",\n    \"83 1\",\n    \"83 2\",\n    \"84 1\",\n    \"84 2\",\n    \"85 1\",\n    \"85 2\",\n    \"86 1\",\n    \""
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"YES\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"4 5\") == \"NO\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"YES\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"2 3\") == \"NO\"\nassert solution(\"1 3\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"NO\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 3 1') == '-1'\nassert solution('6 1 3 10 1') == '-1'\nassert solution('4 3 1') == '100'\nassert solution('1 100 1 1') == '100'\nassert solution('1 100 1 2') == '100'\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input().split()) == 1\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"5\",\"2\",\"3\",\"1\",\"1\"]) == \"1\"\nassert solution([\"5\",\"2\",\"3\",\"1\",\"1\"]) == \"3\"\nassert solution([\"5\",\"2\",\"3\",\"1\",\"1\"]) == \"1\"\nassert solution([\"5\",\"2\",\"3\",\"1\",\"1\"]) == \"1\"\nassert solution([\"5\",\"2\",\"3\",\"1\",\"1\"]) == \"3\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\n'''\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1, 'The solution should be -1'\n\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5 2 3') == 18\nassert solution('5 1 3 10 1') == -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"5 2 3\", \"5 1 3\", \"10 1 5\", \"10 1 1\", \"10 1 1\"]) == \"18\"\nassert solution([\"4 3 1\", \"1 100 1\", \"1 100 1\", \"1 100 1\", \"1 100 1\"]) == \"100\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 5 0 0 0\") == \"0\"\nassert solution(\"12 6\") == \"3\"\nassert solution(\"12 6\") == \"3\"\nassert solution(\"11 10\") == \"2\"\nassert solution(\"11 10\") == \"2\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '3'\nassert solution('3') == '3'\nassert solution('4') == '3'\nassert solution('12') == '3'\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('01') == '3'\nassert solution('11') == '4'\nassert solution('0') == '1'\nassert solution('001') == '0'\nassert solution('0111111') == '0'\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"5\", \"2\"]) == \"3\"\nassert solution([\"5\", \"0\"]) == \"0\"\nassert solution([\"4\", \"1\", \"0\", \"1\", \"0\"]) == \"1\"\nassert solution([\"5\", \"0\", \"1\", \"0\", \"0\"]) == \"0\"\nassert solution([\"4\", \"0\", \"1\", \"0\", \"1\", \"0\", \"0\"]) == \"4\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"15\""
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"5 2\",\n    \"00100\",\n    \"000010000100\"\n) == \"3\"\nassert solution(\n    \"6 1\",\n    \"000000\",\n    \"000010000100\"\n) == \"21\"\nassert solution(\n    \"4 1\",\n    \"0011\",\n    \"000010000100\"\n) == \"4\"\nassert solution(\n    \"12 6\",\n    \"000010000100\",\n    \"000010000100\"\n) == \"15\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"12\""
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"Yes\"\n\"\"\"\nimport collections"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\nimport sys\nfrom collections import defaultdict\nfrom copy import deepcopy\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"aaz\", \"a\"]) == \"Yes\"\nassert solution([\"aaz\", \"baz\"]) == \"Yes\"\nassert solution([\"aaz\", \"aaz\"]) == \"No\"\nassert solution([\"aaz\", \"ab\"]) == \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('abcde') == 'Yes', 'No'\nassert solution('abcde') == 'No', 'Yes'\nassert solution('abcde') == 'Yes', 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('azel') == 'apple'\nassert solution('apple') == 'apple'\nassert solution('azel') == 'apple'\nassert solution('apple') == 'apple'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"aaaazbzzzba\") == \"Yes\"\nassert solution(\"aaaaaaaa\") == \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"A\", \"b\", \"c\"]) == \"Yes\"\nassert solution([\"ab\", \"cd\"]) == \"Yes\"\nassert solution([\"a\"]) == \"No\"\nassert solution([\"ab\", \"b\"]) == \"No\"\nassert solution([\"abc\"]) == \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(st) == \"Yes\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"Yes\"\n'''\n\nfrom collections import deque\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"azzel\"), \"azzel can be changed to apple, as follows: azzel becomes azzle.\"\nassert solution(\"apple\"), \"apple can be changed to azzel, as follows: azzel becomes azzel.\"\nassert solution(\"aaa\"), \"aaa can be changed to azzel, as follows: azzel becomes azzel.\""
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"0\") == \"0\"\nassert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 3 3') == '120'\nassert solution('1 1 2 1 3') == '35'\nassert solution('3 3 3 3 3 3 3 3') == '105'\nassert solution('1 1 1') == '2'\nassert solution('2 1 2') == '1'\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('A2') == 'A2'\nassert solution('A4') == 'A4'\nassert solution('A4') == 'A4'\nassert solution('A4') == 'A4'\nassert solution('A4') == 'A4'\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10000\") == \"1\"\nassert solution(\"100100100\") == \"2\"\nassert solution(\"10000100\") == \"3\""
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"5\"\nassert solution([\"2\", \"2\", \"3\"]) == \"3\"\nassert solution([\"1\", \"1\", \"2\", \"3\", \"3\"]) == \"2\"\nassert solution([\"1\", \"1\", \"2\", \"2\"]) == \"0\"\nassert solution([\"3\", \"2\", \"3\", \"3\", \"3\"]) == \"3\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"0 3 2\") == \"3\"\nassert solution(\n    \"1 4 2\") == \"3\"\nassert solution(\n    \"2 4 3\") == \"3\"\nassert solution(\n    \"0 0 0\") == \"3\"\nassert solution(\n    \"1 1 1\") == \"3\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"6\") == \"4\"\nassert solution(\"4\") == \"5\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"5\"\nassert solution(\"9\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"A\") == \"\"\nassert solution(\"B\") == \"\"\nassert solution(\"A B\") == \"\"\nassert solution(\"AABBB\") == \"B\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\""
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 700') == '3'\nassert solution('3 500') == '1'\nassert solution('5 800') == '2'\nassert solution('3 500 2') == '2'\nassert solution('5 800 3') == '2'\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(string) == \"3\"\n\n-----Example 1 -----\nInput\nD 7\n10 500\n\nOutput\n4\n\nExplanation\nAt this stage, there are four problems with score 100i.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 400 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 200 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 500 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 800 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 500 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 500 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1, 10, 500, 800\n\nAt this stage, he/she earns the perfect bonus of 600 points.\n- 1"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '3'\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 700\") == \"3\"\nassert solution(\"3 500\") == \"3\"\nassert solution(\"5 800\") == \"3\"\nassert solution(\"5 600\") == \"4\"\nassert solution(\"5 600\") == \"5\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 700\") == \"3\"\nassert solution(\"3 500\") == \"1\"\nassert solution(\"5 800\") == \"2\"\nassert solution(\"7 800\") == \"4\"\nassert solution(\"9 800\") == \"0\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"1\") == \"3\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nInput\n2\n6 6 9\n\nOutput\n2\n\nInput\n3\n10 8 7 6 8 4 9\n\nOutput\n3\n\nInput\n4\n12 7 10 9\n\nOutput\n5\n\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"\"5\n\"\"\") == \"2\nassert solution(\"\"\"5\n\"\"\") == \"1\nassert solution(\"\"\"5\n\"\"\") == \"2\nassert solution(\"\"\"5\n\"\"\") == \"3\nassert solution(\"\"\"5\n\"\"\") == \"3\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n\nInput\n8\n1 2 3 4 5 6 7\n\nOutput\n3\n\n\"\"\"\nimport sys\nimport itertools"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3 2 3 3\") == \"3\"\nassert solution(\"2 4 2 2\") == \"1\"\nassert solution(\"4 5 4 5 5\") == \"1\"\nassert solution(\"3 8 8 8 7 8 4 4 5\") == \"1\"\nassert solution(\"3 6 4 4 4 4 5\") == \"2\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\n\n-----Quick Sort-----"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5\", \"2\", \"3\", \"1\", \"1\", \"5\"]) == \"100\", \"for example, stdin = '5 3 1 1 5' should output 1\""
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1, \"It is not possible to repost at least one of the pictures\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 100"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 0 0 0 0 1 2 0 0 0 0 0 1 2 0 0 0 0 1 1 1 0 0 0 1 0\") == 10\nassert solution(\"1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 1 0 0 0\") == 10\nassert solution(\"1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0\") == 10\nassert solution(\"1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0\") == 10\nassert solution(\"1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0\") == 10\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"100\", \"Vova failed to repost all the pictures\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 1 3 10 1') == 18\nassert solution('6 1 3 10 1') == 100\nassert solution('4 3 1') == -1\nassert solution('4 5 1') == 100\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2 1\") == -1\nassert solution(\"1 3 3\") == 10\nassert solution(\"3 3 1\") == 10\nassert solution(\"1 2 3 10 1\") == 18\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"No\"\n\nThis is an accepted solution.\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n) == \"No\"\n\nassert solution(\n) == \"No\"\n\n\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('ABC') == 'Yes'\nassert solution('ABC') == 'No'\nassert solution('ABABC') == 'No'\nassert solution('ABCDEF') == 'Yes'\nassert solution('ABC') == 'Yes'\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 5\") == \"Yes\"\nassert solution(\"2 6\") == \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"Yes\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(11) == \"Yes\""
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"Yes\"\nassert solution(\"1 2\") == \"Yes\"\nassert solution(\"2 3\") == \"No\"\nassert solution(\"2 4\") == \"No\"\nassert solution(\"2 5\") == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"Yes\"\nassert solution(\"10 3\") == \"No\"\nassert solution(\"3 1\") == \"No\"\nassert solution(\"6 2\") == \"Yes\"\nassert solution(\"10 4\") == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 'No'\n\n\n----------------------------------------------------\n\nPython support str and list in print"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2 6\") == \"2 2 6\"\nassert solution(\"2 4 5\") == \"2 2 5\"\nassert solution(\"2 4 3\") == \"2 2 3\"\nassert solution(\"2 3 3\") == \"2 2 3\"\nassert solution(\"2 4 3\") == \"2 2 3\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '2 3'\nassert solution('2 1 5') == '2'\nassert solution('1 2 4') == '1'\nassert solution('3 2 5') == '3'\nassert solution('3 1 5') == '3'\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '2 2 6'\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('4 3 5') == '2 2 6'\nassert solution('4 3 1 5') == '2 2 6'\nassert solution('1 2 5') == '3 2 5'\nassert solution('1 1 5') == '3 2 5'\nassert solution('3 2 5') == '3 2 5'\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2 2 6\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n2 3 5\n2 1 5\n1 2 5\n3 2 5\n\n\"\"\") == \"2 2 6\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"2 2 6\"\nassert solution(inp) == \"2 2 5\"\nassert solution(inp) == \"1 2 5\"\nassert solution(inp) == \"1 2 4\"\nassert solution(inp) == \"1 2 3\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"2 2 6\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 1, 1, 1, 1, 1, 1, 1, 1) == \"2 2 6\"\nassert solution(2, 2, 2, 2, 2, 2, 2, 2, 2) == \"2 2 6\"\nassert solution(3, 3, 3, 3, 3, 3, 3, 3, 3) == \"3 3 3\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 0\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['redcoder', 'coder', 'coder', 'corner', 'cod']),'redcoder'\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"abcdcd\"]) == \"d\"\nassert solution([\"abcdcd\", \"bca\", \"cda\", \"abdcd\"]) == \"bca\"\nassert solution([\"aaabb\", \"cdfd\", \"zcccc\"]) == \"zcccc\"\nassert solution([\"aaabbb\", \"cdfd\", \"zcccc\"]) == \"zcccc\"\nassert solution([\"aabc\", \"abcb\", \"aacba\", \"aabca\"]) == \"aacba\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 1\n\n----- Sample Input -----\nabacadab\n\n----- Sample Output -----\n1\n\nFor example, we can change the fifth character to o and get a palindrome.\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution( \"redcoder\") == 3\nassert solution(\"\") == 0\nassert solution(\"redcoder\") == 3\nassert solution(\"redcoder\") == 3\nassert solution(\"redcoder\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('redcoder') == 1\nassert solution('redcoder') == 2\nassert solution('redcoder') == 2\nassert solution('redcoder') == 1\nassert solution('redcoder') == 1\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(palindrome) == 1\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 1\n    "
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 1\n\n-----Explanation-----\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted in the middle.\nFor example, the string is made of redcoder and first two characters are changed to o and o.\n\nThe minimum number of hugs needed is 1.\n\n----Explanation----\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\n----Explanation----\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\n----Explanation----\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\n----Explanation----\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\n------Modification------\nIn standard input, S contains only lowercase letters.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\n------Modification------\nIn standard input, S contains only lowercase letters.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nIn standard input, S contains only lowercase letters.\n\n------Modification------\nIn standard input, S contains only lowercase letters.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nFor example, in standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\n------Modification------\nIn standard input, S contains only lowercase letters.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nFor example, in standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nFor example, in standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nFor example, in standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nFor example, in standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nIn standard input, S contains only lowercase letters.\n\nTo change the fourth character to o, it is inserted at the middle of S.\nFor example, the string is made of redcoder and o is inserted at the middle of S.\n\nThe minimum number of hugs needed is 1.\n\nFor example, in standard input, S"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('redcoder') == 1\nassert solution('redcoder') == 1\nassert solution('redcoder') == 1\nassert solution('redcoder') == 1\nassert solution('redcoder') == 1\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(6) == \"Yes\"\nassert solution(10) == \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"1\") == \"No\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"0\") == \"No\"\nassert solution(\"5\") == \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(10) == \"Yes\"\nassert solution(20) == \"No\"\n\"\"\"\nclass Solution:\n    def numberToWords(self, num: int) -> str:\n        str_val = \"One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen Fourteen Fifteen Sixteen Seventeen Eighteen Nineteen\".split()\n\n        tens = [\"\", \"Thousand\", \"Hundred\", \"Thousand\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\"]\n        def solve(digit):\n            if digit == 0:\n                return tens[0]\n            elif digit < 20:\n                return str(digit) + \" \" + solve(digit - 10)\n            elif digit < 100:\n                return str(digit) + \" \" + tens[digit // 10] + \" \" + solve(digit % 10)\n            elif digit < 1000:\n                return str(digit) + \" \" + solve(digit // 100) + \" \" + tens[digit % 100]\n        return solve(num)"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2) == \"Yes\"\nassert solution(3) == \"No\"\nassert solution(4) == \"No\"\nassert solution(5) == \"Yes\"\nassert solution(6) == \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == 'Yes', 'No'\nassert solution(13) == 'Yes', 'No'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"No\"\nassert solution(\"12\") == \"No\"\nassert solution(\"5\") == \"No\"\nassert solution(\"1\") == \"No\"\nassert solution(\"2\") == \"Yes\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    solution(input())\n) == \"Yes\"\n\n-----Sample Input-----\n10\n\n-----Sample Output-----\nNo\n\n10 can be represented as, for example, 2 \\times 5.\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"Yes\""
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 2 4 2\") == \"3\"\nassert solution(\"4 4 4 5\") == \"5\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 3 3 3\") == \"0\"\nassert solution(\"1 1 1 2 3 4 5 6\") == \"2\""
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 3 4 7 5') == '2'\nassert solution('1 4 4 8 9 2') == '3'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 219 220 220 221 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"23\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '5'"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"123456789\") == 6\nassert solution(\"234\") == 0\nassert solution(\"5\") == 0\nassert solution(\"1\") == 0\nassert solution(\"4\") == 0\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\""
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\n\n------Sample Output------\n\nSample Input:\n5\n5 3 4\nSample Output:\n5\n\nSample Input:\n3\n10\nSample Output:\n5\n\nConstraints:\n- 10^9 <= N <= 10^9\n- 1 \\leq L_i \\leq 10^9\n- 1 \\leq L_i \\leq N\n\n------Sample Output------\n\nSample Input:\n6\n6 4 6 7\nSample Output:\n3\n\nSample Input:\n3\n1 4 7\nSample Output:\n2\n\n\"\"\"\nN = int(input())\nL_1 = [int(i) for i in input().split()]\nL_2 = [int(i) for i in input().split()]\nL_3 = [int(i) for i in input().split()]\nL_4 = [int(i) for i in input().split()]\nL_5 = [int(i) for i in input().split()]\nL_6 = [int(i) for i in input().split()]\n\nfor i in L_1:\n    for j in L_2:\n        for k in L_3:\n            for l in L_4:\n                for m in L_5:\n                    for n in L_6:\n                        if i < j < k < m < l < n:\n                            if (i + j + k + m + l + n == N):\n                                print(1)"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 1 1\") == \"2\"\nassert solution(\"4 4 9 7 5\") == \"5\"\nassert solution(\"1 4 9 7 5\") == \"5\"\nassert solution(\"1 4 3 9 7\") == \"3\"\nassert solution(\"1 4 3 9 7\") == \"3\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3 4 5\") == \"5\"\nassert solution(\"2 4 7 5\") == \"5\"\nassert solution(\"1 2 5 3 4\") == \"7\"\nassert solution(\"1 1 9 5 9\") == \"3\"\nassert solution(\"2 1 1 2 3\") == \"3\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 10"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"5 8\") == \"8\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"0 8 9\") == \"0\"\nassert solution(\"2 3 9 5 7\") == \"-1\""
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 10\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 10,'solution() failed'"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"2 5\") == 10, \"2 5\"\nassert solution(\n    \"2 5 2\") == -1, \"2 5 2\"\n\"\"\"\nimport math"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 10\n'''\n\nfrom math import factorial as fact"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 2') == '10', '5 2'\nassert solution('2 2') == '1', '2 2'\nassert solution('1 2') == '0', '1 2'\nassert solution('0 2') == '1', '0 2'\nassert solution('0 1') == '0', '0 1'\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == -1\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"10\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"5\"\nassert solution(\"4 8\") == \"10\"\nassert solution(\"1 4\") == \"4\"\nassert solution(\"2\") == \"-1\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 5\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 5\"), \"Invalid input\"\nassert solution(\"2 2 4\"), \"Invalid input\"\nassert solution(\"2 4 5 6 7 8 9 10\"), \"Invalid input\"\nassert solution(\"2 5\"), \"Invalid input\"\nassert solution(\"1 2 4\"), \"Invalid input\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 12 1 2 14\") == \"5\"\nassert solution(\"10 12 1 2 14\") == \"3\"\nassert solution(\"10 12 1 2 14\") == \"0\"\nassert solution(\"10 12 1 2 14\") == \"0\"\nassert solution(\"10 12 1 2 14\") == \"0\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '0'"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"5\"\n\"\"\"\nimport sys\ninput = sys.stdin.readline\n\nn,m = map(int,input().strip().split())\nnum_list = [i for i in range(n+1)]\nboard = []\nfor _ in range(m):\n    board.append(int(input().strip()))\nanswer = 0"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '5'\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"5\"\nassert solution(input) == \"10\"\nassert solution(input) == \"12\"\nassert solution(input) == \"14\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"5\""
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == 5\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n\nInput\n5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n\nOutput\n1\n111100\n\"\"\"\nn = int(stdin)\nk = int(stdin[1:])\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('4 4 3') == '2'\nassert solution('4 6 3') == '1'\nassert solution('4 4 3') == '1'\nassert solution('4 6 2') == '1'\nassert solution('4 6 1') == '0'\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 4 3\") == \"2\"\nassert solution(\"3 4 3 1\") == \"1\"\nassert solution(\"3 4 3 1 4\") == \"2\"\nassert solution(\"3 4 3 1 4 1 2 3 3\") == \"1\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"2\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n\"\"\"\n\nn, m, k = map(int, input().split())\nt = int(input())\n\nprint(k)\n\nprint(t//k)\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1 2'\nassert solution(stdin) == '1 1'\nassert solution(stdin) == '1 2'\nassert solution(stdin) == '2 3'\nassert solution(stdin) == '2 2'\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 1 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 1 0 1 1 0 0 1 1 0 0 1 1 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 1 0 0 0 1 1 0 0 0 1 1 0 1 0 0 1 1 0 1 0 0 1 1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 1 0 1 1 0 0 1 0 0 1 0 1 1 0 0 1 1 0 0 1 0 0 1 1 0 1 1 0 0 1 1 0 1 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 0 1 1 0 1 0 1 1 0 0 1 1 0 1 0 1 1 0 1 0 1 1 0 0 0 1 1 0 0 1 1 0 0 1 1 1 0 0 1 1 0 1 1 0 0 0 0 1 1 0 0 1 1 0 0 0 0 1 1 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 1 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '1 2 3 4'\nassert solution(input()) == '2 3 1'\nassert solution(input()) == '1 4 1'\nassert solution(input()) == '3 1 1'\nassert solution(input()) == '1 2'\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\") == \"1 1 0\"\nassert solution(\"3 4 3 1\") == \"1 1 0\"\nassert solution(\"3 4 3 1 2\") == \"1 1 0\"\nassert solution(\"3 4 3 2 1\") == \"1 1 0\"\nassert solution(\"3 4 3 2 2\") == \"0 0 0\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 0 1 0 1 0 1 0 1\""
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"2\") == \"YES\""
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 5\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\n\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\"The next paragraph explains the version 2 of the problem, but only because it is a perfectionist. I'm excited to keep it all in one place.\"\n\nFor example, given the following wall, we can:\n\n    * vertically,\n    * horizontally and,\n    * any parts,\n    * a brick on every part,\n    * a brick on all parts.\n\nSo, Vova can put a brick there and thus increase both heights by 1. Clearly, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$ of the wall or to the right of part $n$ of it).\n\nThe next paragraph explains the version 1 of the problem.\n\nVova can also put bricks horizontally.\n\nFor example, given the following wall, we can:\n\n    * vertically,\n    * horizontally and,\n    * any parts,\n    * a brick on every part,\n    * a brick on all parts.\n\nSo, Vova can put a brick there and thus increase both heights by 1. Clearly, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$ of the wall or to the right of part $n$ of it).\n\nVova can also put bricks vertically.\n\nFor example, given the following wall, we can:\n\n    * vertically,\n    * horizontally and,\n    * any parts,\n    * a brick on every part,\n    * a brick on all parts.\n\nSo, Vova can put a brick there and thus increase both heights by 1. Clearly, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$ of the wall or to the right of part $n$ of it).\n\nFor example, given the following wall, we can:\n\n    * vertically,\n    * horizontally and,\n    * any parts,\n    * a brick on every part,\n    * a brick on all parts.\n\nSo, Vova can put a brick there and thus increase both heights by 1. Clearly, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$ of the wall or to the right of part $n$ of it).\n\nFor example, given the following wall, we can:\n\n    * vertically,\n    * horizontally and,\n    * any parts,\n    * a brick on every part,\n    * a brick on all parts.\n\nSo, Vova can put a brick there and thus increase both heights by 1. Clearly, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$ of the wall or to the right of part $n$ of it).\n\nFor example, given the following wall, we can:\n\n    * vertically,\n    * horizontally and,\n    * any parts,\n    * a brick on every part,\n    * a brick on all parts.\n\nSo, Vova can put a brick there and thus increase both heights by 1. Clearly, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$ of the wall or to the right of part $n$ of it).\n\n\"\"\"\n\nimport math\nfrom sys import stdin"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3') == 'NO'\nassert solution('3 1 5') == 'NO'\n\n\n-----Constraints-----\n0 < stdin.readline().length <= 3 * 10^4\n1 <= a_i < 10^9\n1 <= n <= 10^5\n\nTime Limit: 1 sec\nSpace Limit: 1M\n\n\n-----Alternatives-----\n\n1. More precise solution to Vova's problem.\n2. More faster solution that only uses more branches.\n3. Time Limit: 1 sec\nSpace Limit: 1M\n\n\n-----Submissions-----\nSubmissions are submitted in a single-line.\n\"\"\"\n\nfrom math import factorial as fac\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, [2, 1, 2, 5]) == 'YES', 'Vova can complete the wall using any amount of bricks'\nassert solution(3, [1, 2, 2, 2, 5]) == 'YES', 'Vova can complete the wall using any amount of bricks'\nassert solution(3, [1, 1, 1]) == 'NO', 'Vova can complete the wall using any amount of bricks'\nassert solution(3, [10, 10]) == 'NO', 'Vova can not complete the wall using any amount of bricks'\n\n'''\n\nfrom itertools import combinations\nimport sys"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0,0) == \"YES\", \"The wall is already complete.\"\nassert solution(1,0) == \"NO\", \"The wall is not complete.\"\nassert solution(2,0) == \"YES\", \"The wall is complete.\"\nassert solution(2,1) == \"NO\", \"The wall is incomplete.\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5\"), \"False\"\nassert solution(\"3\"), \"False\"\nassert solution(\"2\"), \"True\"\nassert solution(\"1\"), \"True\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2) == \"YES\"\nassert solution(1) == \"NO\"\nassert solution(4) == \"YES\"\nassert solution(5) == \"NO\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\""
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 4\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1000000000000 5\") == '9'\nassert solution(\"10 4\") == '4'\nassert solution(\"-3 -6 5 4\") == '-1'\n\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\n    [-1, 0, 0, 0, 0],\n    [-1, 0, 0, 0, 0],\n    [-1, 0, 0, 0, 0],\n    [-1, 0, 0, 0, 0],\n    [-1, 0, 0, 0, 0]\n    ]) == 5\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1000000000000 5) == 4999999999996, 'true'\nassert solution(10) == -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('-100 -200 -300 125 77 -4') == '999999999996'\nassert solution('-100 -200 -300 125 77 -4') == '-1'\nassert solution('-1 0 0 0 0') == -1\nassert solution('1000000000000 5') == -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\") == \"4999999999996\"\nassert solution(\"10 4\") == \"5\""
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\"1000 6\", \"-100 -200 -300 125 77 -4\"]\n) == \"9\"\nassert solution(\n    [\"1000000000000 5\", \"-1 0 0 0 0\"]\n) == \"4999999999996\"\nassert solution(\n    [\"10 4\", \"5 -6 4 4 4\"]\n) == \"0\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, \"ABACABA\") == \"AB\"\nassert solution(5, \"ZZZAA\") == \"ZZ\"\nassert solution(5, \"BBAABBBA\") == \"BB\"\nassert solution(5, \"ABA\") == \"A\"\nassert solution(5, \"ZZZAAZZZZ\") == \"ZZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"BB\"\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"AABA\") == \"BB\"\nassert solution(\"AZ\") == \"AZ\"\nassert solution(\"BAABAABBA\") == \"AZAA\"\nassert solution
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"BB\"\n\nassert solution(stdin) == \"BBAABBBA\"\n\nassert solution(stdin) == \"BBAABBBA\"\n\nassert solution(stdin) == \"BBAABBBA\"\n\nassert solution(stdin) == \"BBAABBBA\""
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"ZZ\"\n\nassert solution(stdin) == \"BB\"\n\nassert solution(stdin) == \"BA\"\n\nassert solution(stdin) == \"ZZZ\"\n\nassert solution(stdin) == \"BBAABBBA\"\n\n------------------\n\n\nimport collections"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"BBAABBBA\"\n) == \"BB\"\nassert solution(\n    \"ZZ\"\n) == \"ZZ\"\nassert solution(\n    \"ABA\"\n) == \"A\"\nassert solution(\n    \"BBAA\"\n) == \"BB\"\nassert solution(\n    \"ABA\"\n) == \"A\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"\")\nassert solution(\"\")\nassert solution(\"aabab\") == \"abab\"\nassert solution(\"aababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(s) == \"BB\"\nassert solution(s) == \"BA\"\nassert solution(s) == \"ZZ\"\nassert solution(s) == \"AZ\"\nassert solution(s) == \"AA\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"ZZZZAA\"\nassert solution(stdin) == \"ZZ\"\n\n-----Constraints-----\n\n1 <= n <= 100\n\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"AZ\"\nassert solution(input()) == \"AA\"\nassert solution(input()) == \"ZA\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\n\n\n-----Example-----\n\nInput\ns\nt\n\nOutput\n2\n\nInput\ns\nt\n\nOutput\n3\n\nInput\ns\nt\n\nOutput\n1\n\nInput\ns\nt\n\nOutput\n0\n\nInput\ns\nt\n\nOutput\n0\n\n\n-----Note-----\n\nIn the first example, you should apply the move once to the first string and apply the move once to the second string. As a result, both strings will be equal to \"est\".\n\nIn the second example, the move should be applied to the string \"codeforces\" $8$ times. As a result, the string becomes \"codeforces\" $\\to$ \"es\". The move should be applied to the string \"yes\" once. The result is the same string \"yes\" $\\to$ \"es\".\n\nIn the third example, you can make the strings equal only by completely deleting them. That is, in the end, both strings will be empty.\n\nIn the fourth example, the first character of the second string should be deleted.\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"est\""
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"hello\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"hello\"\nassert solution([\"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"codeforces\"\nassert solution([\"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"yes\"\nassert solution([\"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"es\"\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"s\") == \"est\"\nassert solution(\"t\") == \"est\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"codeforces\") == \"est\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '10'\nassert solution(stdin) == '9'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"west\",\"codeforces\",\"yes\",\"b\",\"ab\",\"ab\"])==\"1\"\nassert solution([\"west\",\"codeforces\",\"yes\",\"b\",\"ab\",\"a\"])==\"3\"\nassert solution([\"west\",\"codeforces\",\"yes\",\"b\",\"ab\",\"a\"])==\"2\"\nassert solution([\"a\",\"a\"])==\"1\"\nassert solution([\"a\",\"a\",\"a\",\"a\",\"a\"])==\"2\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"est\"\nassert solution(\"bab\") == \"bab\"\nassert solution(\"caf\") == \"caf\"\nassert solution(\"leetcode\") == \"est\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 8\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\nprint(solution(input))"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"5\"]) == \"2\"\nassert solution([\"3\", \"7\", \"11\"]) == \"2\"\nassert solution([\"1\", \"4\", \"8\", \"7\"]) == \"2\"\nassert solution([\"1\", \"3\", \"2\"]) == \"3\"\nassert solution([\"1\", \"6\", \"7\", \"2\"]) == \"5\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 188 189 190 191 194 195 196 199 200 201 202 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 251 252 253 253 255 257 256 258 259 259 260 261 262 263 264 265 266 267 268 269 280 281 282 283 284 285 286 287 288 289 290 291 291 292 293 294 295 296 297 298 299 300 301 302 304 305 306 308 309 310 311 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 330 331 331 332 332 333 333 333 334 334 335 336 337 337 338 339 340 341 341 341 342 343 344 345 346 347 348 349 349 350 351 351 352 353 354 355 355 356 357 358 359 360 361 360 361 362 361 363 363 364 363 365 366 366 367 366 369 369 371 372 373 373 374 375 375 376 377 378 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"1 7 11\") == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1,2,3,4,5,6,7,8,9,10) == 2\nassert solution(1,2,3,4,5,6,7,8,9,10) == 6\nassert solution(2,1,3,4,5,6,7,8,9,10) == 5\nassert solution(1,1,2,2,3,4,3,5,5,6) == 7\nassert solution(1,1,1,2,2,3,3,4,4,5) == 3\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\n\n-----Sample Input-----\n4\n1 2 3 4 5 6\n\n-----Sample Output-----\n3\n\nSetting D = 2 enables you to visit all the cities as follows, and this is the maximum value of such D.\n - Perform Move 2 to travel to coordinate 1.\n - Perform Move 1 to travel to coordinate 2.\n - Perform Move 2 to travel to coordinate 6.\n - Perform Move 1 to travel to coordinate 7.\n - Perform Move 1 to travel to coordinate 10.\n - Perform Move 1 to travel to coordinate 11.\n def solution(stdin: str) -> str:\n    pass\n\nassert solution(stdin) == 2\n\n------Sample Input------\n3\n1 2 3 4 5 6\n\n------Sample Output------\n2\n\nSetting D = 2 enables you to visit all the cities as follows, and this is the maximum value of such D.\n - Perform Move 2 to travel to coordinate 1.\n - Perform Move 1 to travel to coordinate 2.\n - Perform Move 2 to travel to coordinate 3.\n - Perform Move 1 to travel to coordinate 4.\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"kasaka\") == \"Yes\"\nassert solution(\"akasaka\") == \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"kakasaka\") == \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\", \"The problem is not solved\""
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"AKASAKA\") == \"Yes\", \"solution() failed\"\nassert solution(\"asd\") == \"No\", \"solution() failed\"\nassert solution(\"\") == \"No\", \"solution() failed\"\nassert solution(\"a\") == \"Yes\", \"solution() failed\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"aksaka\") == \"Yes\"\nassert solution(\"akasake\") == \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"aasaka\") == \"Yes\"\nassert solution(\"aasaka\") == \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\" or \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'Yes' or solution(stdin) == 'No'\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"198 1.10\"\n) == \"217\"\nassert solution(\n    \"198 5.2\"\n) == \"12\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('198 1.10') == '217'\nassert solution('198.1') == '217'\nassert solution('198.000') == '217'\nassert solution('198 1.3') == '217'\nassert solution('199.8.3') == '217'\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 217\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('198.10') == '217'\nassert solution('198.10.1') == '217'\nassert solution('198.10.1.0') == '217'\nassert solution('198.10.1.10') == '217'\nassert solution('198.10.1.1') == '217'\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '217'\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('4 0.2') == '4'\nassert solution('1 5.5') == '5.5'\nassert solution('2.1.1.1') == '2'\nassert solution('1.1.1') == '1.1'\nassert solution('1.1.1.1.1.1') == '1.1.1.1'\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2.01\") == \"217\"\nassert solution(\"2.2.1\") == \"317\"\nassert solution(\"3.0.0\") == \"634\"\nassert solution(\"3.1.0\") == \"634\"\nassert solution(\"3.1.0\") == \"634\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('0.1.2') == '1.2'\nassert solution('0.1.1') == '0.1'\nassert solution('0.1') == '0'\nassert solution('0.1.001') == '1'\nassert solution('0.1.01') == '1'\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 217\n\nExample 1:\nInput:\nA = 1.0\nB = 0.9\nOutput:\n5\nExplanation:\nA = 1.0\nB = 0.9\nAfter truncating the fractional part, we have the answer: 5.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Tuple\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(198 1.10) == 217\n\n\"\"\""
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 6) == 3\nassert solution(5, 1) == 0\nassert solution(5, 2) == 0\nassert solution(5, 3) == 1\nassert solution(5, 4) == 1\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '999999999'\nassert solution(stdin) == '381621773'\n\n\n\n\"\"\""
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"6\",\"7\",\"1\",\"2\",\"3\",\"2000000000\",\"763243547\"]) == \"3\"\nassert solution([\"7\",\"1\",\"2\",\"3\",\"2000000000\",\"763243547\"]) == \"1\"\nassert solution([\"6\",\"1\",\"2\",\"3\",\"2000000000\",\"763243547\"]) == \"0\"\nassert solution([\"3\",\"4\",\"3\",\"3\",\"2000000000\",\"763243547\"]) == \"0\"\nassert solution([\"5\",\"3\",\"3\",\"3\",\"2000000000\",\"763243547\"]) == \"0\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(6, 7) == 3\nassert solution(7, 6) == 0\nassert solution(7, 5) == 1\nassert solution(6, 2) == 0\nassert solution(5, 1) == 0\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n\n\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n\n\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"solution() is not implemented\"\n-----Constraints-----\n1 <= n <= 5000\n1 <= m <= 5000\n1 <= s <= n\n\nTime Limit: 60 seconds\nMemory Limit: 64 MB\n\n-----Bug Fixes-----\n1. Repeated code does not break the function\n2. Line index doesn't be correct for odd index\n3. This is a repeated code\n4. We have to use tuples, i.e. list, to maintain the order.\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 5 1 5 5 4 5\") == \"3\"\nassert solution(\n    \"7 5 1 5 5 4 5\") == \"0\"\n\nassert solution(\n    \"3 4 9\") == \"0\"\nassert solution(\n    \"3 5 1 5 5 4 5\") == \"2\"\nassert solution(\n    \"3 7 1\") == \"3\""
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 1 2 3 4 1 5 2 3 4 5 6\") == \"1\"\nassert solution(\"1 3 2 3 1 4 1 4 2 3 2 3\") == \"1\"\nassert solution(\"1 5 1 1\") == \"1\"\nassert solution(\"1 8 9\") == \"1\"\nassert solution(\"1 7 7\") == \"3\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 8 9 2 1\") == \"1\"\nassert solution(\"5 1 6\") == \"3\"\nassert solution(\"5 7 9\") == \"3\"\nassert solution(\"5 1 7\") == \"3\"\nassert solution(\"1 6 1\") == \"3\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '3' or solution(inp) == '0'\n\n\n-----Constraints-----\n1 <= n, m, s, v <= 100\n0 <= i <= n - 1\n0 <= u <= n - 1\n1 <= v <= n - 1\ns.t. u!= v\n1 <= s, v <= n\n\n---------------Factors----------------\n\n##for i in range(2, n):\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"3 3 5\") == \"6\"\nassert solution(\"4 3 5\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 5'), '1'\nassert solution('5 6'), '5'\nassert solution('5 4'), '5'\nassert solution('5 3'), '5'\nassert solution('5 1'), '0'"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"6 4 5\", \"5 1\", \"3 1\", \"3 1\", \"1 1\"]) == \"3\"\nassert solution([\"6 7\", \"5 8\", \"5 8\", \"1 3\", \"1 4\", \"2 1\", \"2 5\", \"2 6\", \"2 7\", \"2 8\", \"3 1\", \"3 2\", \"3 3\", \"4 4\", \"4 6\", \"4 7\", \"5 1\", \"6 5\", \"6 8\", \"7 1\", \"7 2\", \"8 1\", \"8 2\", \"8 3\", \"9 1\", \"9 2\", \"9 3\", \"9 4\", \"9 5\", \"9 6\", \"9 7\", \"9 8\", \"9 9\", \"10 1\", \"10 2\", \"10 3\", \"10 4\", \"10 5\", \"10 6\", \"10 7\", \"10 8\", \"10 9\", \"10 10\", \"10 11\", \"10 12\", \"11 2\", \"12 3\", \"12 4\", \"12 5\", \"12 6\", \"12 7\", \"12 8\", \"12 9\", \"12 10\", \"12 11\", \"12 12\"]) == \"3\"\nassert solution([\"4 1\", \"1 1\", \"1 4\", \"1 8\", \"1 10\", \"1 13\", \"1 14\", \"2 4\", \"2 10\", \"2 13\", \"2 14\", \"3 4\", \"3 10\", \"3 13\", \"3 14\", \"4 6\", \"4 9\", \"4 12\", \"5 4\", \"5 11\", \"5 13\", \"5 14\", \"5 15\", \"6 4\", \"6 11\", \"6 13\", \"6 14\", \"7 4\", \"7 11\", \"7 14\", \"7 15\", \"8 4\", \"8 11\", \"8 14\", \"8 15\", \"9 4\", \"9 11\", \"9 14\", \"9 15\", \"9 16\", \"10 4\", \"10 11\", \"10 14\", \"10 15\", \"10 16\", \"11 4\", \"11 11\", \"11 14\", \"11 15\", \"12 4\", \"12 11\", \"12 14\", \"12 15\", \"12 16\", \"13 4\", \"13 11\", \"13 14\", \"13 15\", \"13 16\"]) == \"0\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('6') == '4'\nassert solution('6') == '3'\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '6'\n\nInput\n5\n1 1 1 4 4 4\n\nOutput\n4\n\nInput\n5\n1 1 1 4 4 4\n\nOutput\n5\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4 1 4 4\") == \"4\"\nassert solution(\"1 1 1 4 4\") == \"3\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 4 5 3 4 5 3 3 4 5 3 4 5 3 4 5 4 4 4 4 4 4 4 5 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '5'\n\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input() == \"5\") == \"1\"\nassert solution(input() == \"6\") == \"2\"\nassert solution(input() == \"8\") == \"4\"\nassert solution(input() == \"1\") == \"3\"\nassert solution(input() == \"2\") == \"3\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3 1 4 1\") == \"5\"\nassert solution(\"6 1 1 1 4 1\") == \"5\"\nassert solution(\"6 3 1 4 1\") == \"3\"\nassert solution(\"6 4 1 4 1\") == \"3\"\nassert solution(\"6 5 1 4 1\") == \"2\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == 5\nassert solution('1 5 4 2') == 3\nassert solution('1 4 1 5') == 1\nassert solution('4 3 2 1') == 4\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"000101000002\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 4') == '1 2 3 4'\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 3') == '010001000101'\nassert solution('2 3 5 4 5') == '0010100010101'\nassert solution('2 3 5 4 6') == '0010100010101'\nassert solution('2 3 7 8 9') == '0010100010101'\nassert solution('2 3 7 8 9') == '0010100010101'\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\", \"Test failed\"\nassert solution(\"1\") == \"0\", \"Test failed\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"00000200000002\"\nassert solution(\"1 32\") == \"000002000001\"\nassert solution(\"1 12\") == \"00000200000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"000002000001\"\n\nassert solution(input()) == \"000002000001\"\n\nassert solution(input()) == \"000002000001\"\n\nassert solution(input()) == \"000002000001\"\n\nassert solution(input()) == \"000002000001\""
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 3') == '00000000000100'\nassert solution('2 3 2') == '000000000000'\nassert solution('2 3 3') == '00000000000001'\n\nprint('solution test passed')\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 3') == '000001000002'\nassert solution('2 3') == '000002000001'\nassert solution('2 3') == '000001000001'\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"5 2 9 4 3 1 8 1 6 7\"\n) == \"000002000001\"\nassert solution(\n    \"5 2 4 4\"\n) == \"000002000001\"\nassert solution(\n    \"5 2 5 1 3 1 2\"\n) == \"000002000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input()\n) == '000001000002\\n000002000001\\n000002000000'"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1 10 10\") == \"2\"\nassert solution(\"2 10 8 40\") == \"2\"\nassert solution(\"2 10 8 40 2\") == \"4\"\nassert solution(\"2 10 8 40 3\") == \"2\"\nassert solution(\"2 10 8 40 4\") == \"2\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 1 3\") == 2\nassert solution(\"3 1 4\") == 3\nassert solution(\"3 2 4 5\") == 3\nassert solution(\"3 3 3 4\") == 4\nassert solution(\"3 5 3 5\") == 3\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(list(map(int, input().split()))) == 2\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"The problem is not solved\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(test_input) == \"2\""
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"4 10 8 40\"\n) == \"2\"\nassert solution(\n    \"2 20 10 30\"\n) == \"3\"\nassert solution(\n    \"1 1 2\"\n) == \"1\"\nassert solution(\n    \"1 5 3\"\n) == \"2\"\nassert solution(\n    \"2 1 1\"\n) == \"1\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1 10 5\") == \"10\"\nassert solution(\"1 1 10 2\") == \"10\"\nassert solution(\"1 1 1 0\") == \"0\"\nassert solution(\"1 1 0 1\") == \"1\"\nassert solution(\"1 1 1 10\") == \"10\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"40\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2\",\"10\",\"8\",\"40\"]) == \"2\"\nassert solution([\"1\",\"1\",\"1\",\"2\"]) == \"1\"\nassert solution([\"3\",\"4\",\"7\",\"9\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"4\"]) == \"2\"\nassert solution([\"1\",\"1\",\"1\",\"1\"]) == \"1\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"01021\"\nassert solution(stdin) == \"0101\"\nassert solution(stdin) == \"0101\"\nassert solution(stdin) == \"0101\"\nassert solution(stdin) == \"0101\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"false\"\n\n\n-----Original code-----\n\nimport collections"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"?(_______/___*__)-__-_+_/_____)\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___)\") == \"0150341\"\n\n\n-----Sample Input-----\n\n?(_-_/___*__):-___>__.\n\n?(_________/___*__)-____<___,_____<__.\n\n?_________/_________/____+_______*__-_____*______-___.\n\n
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\n\nassert solution(\n?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\n\nassert solution(\n?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\n\nassert solution(\n?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\n\nassert solution(\n?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______."
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0250341\"\nassert solution(stdin) == \"0101\"\nassert solution(stdin) == \"0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"/____________+__-___/______*____+____________+__-___/____________+__-___/______*____+____________+__-___/____________+__-___/____________+__-___/____________+__-___\") == \"false\"\nassert solution(\n    \"/____________+__-___/____________+____________+____________+__-___/____________+__-___/____________+____________+__-___/____________+____________+__-___/____________+__-___/____________+__-___\") == \"false\"\nassert solution(\n    \"/____________+____________+____________+____________+____________+__-___/____________+____________+____________+____________+____________+__-___/____________+____________+____________+__-___/____________+____________+__-___\") == \"false\"\nassert solution(\n    \"/____________+____________+____________+____________+____________+____________+__-___/____________+____________+____________+____________+____________+____________+____________+____________+__-___/____________+____________+__-___\") == \"false\"\nassert solution(\n    \"/____________+__-___/____________+____________+____________+____________+____________+__-___/____________+____________+____________+____________+____________+____________+____________+__-___/____________+____________+__-___\") == \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"false\""
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.?\") == \"false\"\nassert solution(\"?(_______)/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"false\"\nassert solution(\"?(_______)/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0150341\"\nassert solution(\"?(_______)/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0250341\"\n\n'''\nfor line in stdin:\n    if line.startswith('?'):\n        print(solution(line.split('/')[1]))\n    else:\n        print(solution(line))\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"...,__--<__________,__.__________,__________.__.__.__,__.-__,__,__.__.__.,.__-___________,__,-_,-.__,-_,-.__-,_,-_,-_-.__,-,__,-_,-.__,-_-.__,-,-_-.__,-_,-_,-.__,-_,-_,-_,-_,-_,-_,-.__,-_,-_-.__,-_,-_,-_-.__,-_,-_,-_,-_,-_-.__,-_,-_,-_,-_,-_-.__,-_,-_,-_,-_,-_,-_,-_,-_-.__,-_,-_,-_,-_,-_-.__,-_,-_,-_,-_,-_,-_-.__,-_,-_,-_,-_,-_,-_,-_-.__,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_-.__,-_,-_,-_,-_,-_-.__,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_-.__,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_-.__,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_-.__,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-_,-"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"false\"\nassert solution(stdin) == \"0010\"\nassert solution(stdin) == \"0101\"\nassert solution(stdin) == \"0101\"\nassert solution(stdin) == \"0101\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\nassert solution(stdin) == '0'"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '0'\n\n\n\"\"\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '0'"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 4 3 2\") == \"5\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"2 0 2 0\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"4\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"5 3\") == \"5\"\nassert solution(\"5 2\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 4 2\") == \"3\"\nassert solution(\"3 4 1000000000000000000\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"3 4 1000111011101\") == \"4\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"plmaetwoxesisiht\"\n\nassert solution(stdin) == \"z\"\n\nassert solution(stdin) == \"z\"\n\n\n-----Known Issues-----\n\nSometimes you will get weird results because of a bug that has been fixed in the implementation. For example, the string \"a\" may become \"a-b-c-d-e-f-g-h\" while the string \"aei\" may become \"aeie\". If you find that a character is not present in the string, you can find an explanation about how to find that character.\n\n-----Submissions-----\n\nUnderstand\n1\n\nReorder\n\nInput\n10\ncodeforces\n\nOutput\ncodeforces\n\nInput\n16\nplmaetwoxesisiht\n\nOutput\nthisisexampletwo\n\nInput\n1\nz\n\nOutput\nz\n\n\n-----Solution-----\n1\n7\n2\n2\n3\n\n5\n3\n\n6\n4\n8\n\n7\n2\n5\n4\n6\n\n6\n5\n6\n\n6\n2\n5\n4\n8\n\n7\n2\n3\n5\n6\n8\n\n2\n5\n4\n6\n8\n\n7\n2\n5\n3\n6\n8\n\n6\n5\n4\n8\n\n2\n3\n5\n6\n7\n8\n\n4\n5\n6\n8\n\n2\n3\n4\n8\n\n8\n2\n5\n6\n7\n\n2\n4\n6\n8\n\n8\n2\n5\n6\n7\n\n7\n2\n4\n8\n\n7\n2\n6\n5\n8\n\n3\n2\n5\n6\n7\n8\n\n2\n5\n6\n7\n8\n\n3\n2\n4\n7\n8\n\n7\n2\n5\n6\n8\n\n2\n3\n4\n5\n7\n8\n\n6\n3\n8\n\n4\n5\n6\n7\n8\n\n2\n3\n5\n6\n7\n8\n\n5\n2\n4\n8\n\n4\n5\n6\n7\n8\n\n6\n7\n2\n8\n\n4\n5\n2\n8\n\n2\n3\n5\n6\n7\n8\n\n8\n2\n5\n6\n7\n\n8\n2\n5\n6\n7\n8\n\n5\n2\n3\n6\n7\n8\n\n6\n3\n8\n\n8\n2\n5\n7\n\n7\n2\n8\n\n2\n3\n5\n6\n7\n8\n\n8\n2\n5\n6\n7\n\n2\n3\n5\n8\n\n3\n2\n4\n5\n6\n7\n8\n\n7\n2\n4\n8\n\n5\n2\n6\n8\n\n8\n2\n5\n7\n\n7\n2\n4\n8\n\n4\n3\n6\n7\n8\n\n8\n2\n5\n6\n7\n\n6\n7\n2\n8\n\n2\n3\n5\n8\n\n8\n2\n5\n6\n7\n\n2\n3\n4\n5\n8\n\n2\n4\n6\n8\n\n5\n2\n6\n7\n8\n\n7\n2\n4\n5\n8\n\n4\n3\n6\n8\n\n8\n2\n5\n6\n7\n\n8\n2\n3\n5\n7\n\n6\n3\n7\n8\n\n8\n2\n5\n6\n7\n\n2\n3\n5\n8\n\n5\n2\n4\n7\n8\n\n6\n5\n7\n8\n\n7\n2\n8\n\n8\n2\n3\n5\n6\n7\n\n7\n2\n5\n8\n\n3\n2\n4\n5\n8\n\n2\n3\n5\n7\n8\n\n4\n2\n6\n7\n8\n\n7\n2\n8\n\n8\n2\n5\n6\n7\n\n2\n3\n5\n8\n\n6\n5\n7\n8\n\n8\n2\n5\n7\n\n2\n3\n5\n6\n8\n\n8\n2\n5\n7\n\n7\n2\n8\n\n2\n3\n5\n6\n8\n\n8\n2\n5\n7\n\n5\n2\n6\n7\n8\n\n2\n3\n6\n8\n\n8\n2\n5\n7\n\n7\n2\n4\n8\n\n8\n2\n5\n6\n7\n\n6\n3\n5\n8\n\n4\n2\n5\n7\n\n8\n2\n3\n6\n7\n\n7\n2\n5\n8\n\n3\n2\n4\n5\n8\n\n5\n2\n6\n7\n\n2\n3\n5\n8\n\n8\n2\n3\n5\n7\n\n7\n2\n4\n5\n8\n\n8\n2\n3\n5\n7\n\n7\n2\n5\n8\n\n8\n2\n3\n4\n5\n7\n\n6\n3\n5\n7\n\n7\n2\n8\n\n4\n2\n5\n6\n7\n\n8\n2\n3\n5\n7\n\n5\n2\n6\n7\n\n8\n2\n3\n6\n7\n\n3\n2\n5\n8\n\n8\n2\n3\n5\n7\n\n7\n2\n4\n5\n8\n\n4\n2\n6\n7\n\n8\n2\n3\n5\n7\n\n5\n2\n6\n7\n\n8\n2\n3\n5\n7\n\n6\n5\n7\n\n8\n2\n3\n4\n5\n7\n\n4\n2\n5\n7\n\n7\n2\n8\n\n8\n2\n3\n5\n6\n7\n\n6\n3\n5\n7\n\n5\n2\n6\n8\n\n8\n2\n3\n5\n7\n\n7\n2\n5\n8\n\n6\n3\n5\n7\n\n5\n2\n8\n\n7\n2\n4\n6\n8\n\n8\n2\n3\n5\n7\n\n7\n2\n4\n6\n8\n\n8\n2\n3\n5\n7\n\n7\n2\n6\n8\n\n2\n3\n5\n7\n\n8\n2\n3\n5\n7\n\n7\n2\n6\n8\n\n8\n2\n3\n5\n7\n\n7\n2\n6\n8\n\n8\n2\n3\n5\n7\n\n7\n2\n6\n8\n\n8\n2\n3\n5\n6\n7\n\n6\n3\n5\n7\n\n5\n2\n8\n\n8\n2\n3\n5\n7\n\n7\n2\n5\n8\n\n7\n2\n6\n8\n\n7\n2\n8\n\n8\n2\n3\n5\n6\n7\n\n8\n2\n3\n5"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"rocesfedoc\", \"solution does not work\"\nassert solution(\"16\") == \"plmaetwoxesisiht\", \"solution does not work\"\nassert solution(\"1\") == \"thisisexampletwo\", \"solution does not work\"\nassert solution(\"1000\") == \"codeforces\", \"solution does not work\"\nassert solution(\"10000\") == \"codeforces\", \"solution does not work\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'thisisexampletwo'\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        # split the text in the string into a list of strings\n        # the last string of the list is the actual text string,\n        # hence we can compute the reverse of the text using the last string\n        stdin = stdin.split('\\n')\n        \n        # create a dictionary to store the substring whose reverse is stored in the list\n        dict_rev = {}\n        \n        # split each string in the list into two lists, one for the reverse of each string and the other for the substring\n        for line in stdin:\n            if len(line) > 0:\n                tmp = line.split('\\n')\n                for i in range(1,len(tmp)):\n                    if tmp[i].strip().endswith('\\n'):\n                        tmp[i] = tmp[i].replace('\\n','')\n                    elif tmp[i].strip().endswith('\\t'):\n                        tmp[i] = tmp[i].replace('\\t','')\n                    elif tmp[i].strip().endswith(' '):\n                        tmp[i] = tmp[i].replace(' ','')\n                \n                dict_rev[tmp[0]] = tmp[1]\n                \n        # reverse the dictionary for the reverse of the substring\n        tmp = {}\n        for char in dict_rev:\n            tmp[char] = dict_rev[char][::-1]\n        \n        # join the two dictionaries into one\n        answer = ''\n        for char in dict_rev:\n            answer += dict_rev[char]\n            \n        return answer\n    \n\nTest cases:\n10\nrocesfedoc\n10\n\n1\nz\n10\n10\nz\n0\n\n2\nz\n10\n0\n0\nz\n\n0\n0\nz\n\n0\n0\n0\nz\n0\n0\n0\nz\n\n0\nz\n\n0\n0\n0\n0\nz\n0\n0\n0\nz\n0\n0\n0\nz\n\n0\n0\n0\n0\nz\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"s\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"thisisexampletwo\"\n\n\n\n\n-----Side-Effect-----\n\nThe input string is case-insensitive, so that for example the string \"z\" and \"Z\" does not match.\n\nInput\n\nInput the string \"rocesfedoc\"\nOutput\n\n\"rocesfedoc\"\n\nInput:\n\nInput the string \"plmaetwoxesisiht\"\nOutput\n\n\"plmaetwoxesisiht\"\n\nInput:\n\nInput the string \"plmaetwoxesisiht\"\nOutput\n\n\"plmaetwoxesisiht\"\n\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"thisisexampletwo\""
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('aa') == 'aa','stdin test failed'\nassert solution('abc') == 'abc','stdin test failed'\nassert solution('abcd') == 'abcd','stdin test failed'\nassert solution('defjklmnopqrstuvwxyz') == 'defjklmnopqrstuvwxyz','stdin test failed'\nassert solution('qwertyuiop') == 'qwertyuiop','stdin test failed'\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'codeforces'\nassert solution(stdin) == 'plmaetwoxesisiht'\nassert solution(stdin) == 'z'\nassert solution(stdin) == 'thisisexampletwo'\n\nprint('ok')"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'codeforces'\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"plmaetwoxesisiht\"\nassert solution(stdin) == \"z\"\n\nprint(solution(input().strip()))\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5 14) == '19'\nassert solution(381 492) == '873'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(main()) == '19'\nassert solution(submissions()) == '873'\nassert solution(valid(stdin)) == '19'\nassert solution(invalid(stdin)) == '9'\nassert solution(invalid(submissions())) == '9'"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 9 3 10 8\") == \"3366\"\nassert solution(\"381 489 2\") == \"998\"\nassert solution(\"381 489 2 3\") == \"55\"\nassert solution(\"381 489 2 3 5\") == \"339\"\nassert solution(\"381 489 2 3 6\") == \"868\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"877\"\nassert solution(stdin) == \"1858\"\nassert solution(stdin) == \"1437\"\nassert solution(stdin) == \"29\"\nassert solution(stdin) == \"61\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5 876') == '873'\nassert solution('381 492') == '873'\nassert solution('381 492') == '873'\nassert solution('381 492') == '873'\nassert solution('381 492') == '873'\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 3\") == \"0\"\nassert solution(\"3 4 5\") == \"3\"\nassert solution(\"4 0 1\") == \"2\"\nassert solution(\"4 2 1\") == \"4\"\nassert solution(\"3 6 9 8 9\") == \"16\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3881 492\"\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 14\\n') == '19'\nassert solution('381 492') == '873'\nassert solution('0\\n') == '0'\nassert solution('\\n') == '0'\nassert solution('\\n') == '0'\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\", \"14\", \"381\", \"492\", \"873\"]) == \"19\"\nassert solution([\"0\", \"0\", \"0\", \"0\", \"0\"]) == \"0\"\nassert solution([\"0\"]) == \"0\"\nassert solution([]) == \"\"\nassert solution([1, \"\"]) == \"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 4\") == \"381 492\"\nassert solution(\"5 5\") == \"873\"\nassert solution(\"381\") == \"873\"\nassert solution(\"381 2\") == \"873\"\nassert solution(\"13\") == \"13\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3+3\") == \"000111\"\nassert solution(\"2-3\") == \"11011\"\nassert solution(\"9-7\") == \"1111111\"\nassert solution(\"9+7\") == \"1110111\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(...) ==...\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2+3) == '++>'\nassert solution(9-7) == '+++++++++>'\nassert solution(9-7) == '+++++++>'\n\n-----Constraints-----\n\nOutput for all inputs will be valid and positive integers between 0 and 255.\n\nInput 1:\n\n2+3\n\nOutput 1:\n+++++++>\n<[<+>-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\nInput 2:\n\n9-7\n\nOutput 2:\n+++++++++>\n+++++++>\n<[<->-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\nInput 3:\n\n9-7\n\nOutput 3:\n+++++++>\n<[<->-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\n\"\"\"\nimport math"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(30000) == \"30000\"\nassert solution(3) == \"111\"\nassert solution(9) == \"111111110\"\nassert solution(9-7) == \"1111111111\"\nassert solution(9-7+1) == \"1111111111111\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"30000 memory cells.memory cells store integers from 0 to 255 with unsigned 8-bit wraparound.console input(, command) is not supported, but it's not needed for this problem.memory cells store integers from 0 to 255 with unsigned 8-bit wraparound.console input(, command) is not supported, but it's not needed for this problem.memory cells store integers from 0 to 255 with unsigned 8-bit wraparound.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, but it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for this problem.console input(, command) is not supported, and it's not needed for"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(solution(input())) == output()\n\n-----Notes-----\n\n1. The arithmetic expression in Brainfuck is represented in the form of a single line of binary representation. Each of these binary representation is between 0 and 255. The correct interpretation of the arithmetic expression is that for all operations except addition and subtraction, the binary representation is always stored in a 24 bit word, in which the first twenty bits represent the sign bit, and the last two bits represent the carry bit. For example, if you have the following input:\n\n1\n1\n1\n1\n1\n1\n\nthen the binary representation is:\n\n000000011010\n\nyou can calculate the binary representation of 1 + 1 + 1 = 6. This is a valid arithmetic expression.\n\n2. The arithmetic expression in Brainfuck is represented as a sequence of bytes. Each byte represents an operand, 0 <= byte < 255. The correct interpretation of the arithmetic expression is that for all operations except addition and subtraction, the bytes represent the sign bit, and the last two bits represent the carry bit. For example, if you have the following input:\n\n
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(solution) == '+++++>+++++++++++++>+++++++++++++>++++++++++++++>++++++++++++++>++++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>+++++++++++++>++++++++++++"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == brainfuck, \"An error occurred\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '++>'\nassert solution(stdin) == '+++>'\nassert solution(stdin) == '<[<+>-]<'\nassert solution(stdin) == '++++++++++++++++++++++++++++++++++++++++++++++++.\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '+>'\n\n-----Time Limit-----\n\nIf you have a long running computer that is taking very long to run,\nyou may want to try adding a limit on the time limit,\nwhich is given below.\n\n\nYou can try to solve it in parallel,\nbut it should be easy to code it carefully,\nso you don't have to take too long to\nconvert the input to Brainfuck.\n\n-----Discussion-----\n\nNow, the Brainfuck interpreter is quite simple,\nwe can simply replace the digits by their\noperand, which means that we will always have a binary\nvalue with two characters.\n\nFor example, the first digit is 3,\nand the second digit is 2, so the output is:\n\n+> 3 2\n+++++++>\n<[<+>-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\n\"\"\"\n\nimport sys\n\n\nclass Brainfuck:\n    def __init__(self, code):\n        self.code = code\n        self.index = 0\n        self.memory = []\n        self.memory_len = len(self.memory)\n        self.stack = []\n        self.is_program = False\n        self.is_binary = False\n        self.is_memory = False\n        self.is_str = False\n        self.is_terminated = False\n        self.is_error = False\n        self.is_success = False\n\n    def peek(self):\n        return self.memory[self.index]\n\n    def read(self):\n        try:\n            self.index += 1\n            return int(self.memory[self.index])\n        except:\n            print('Invalid input')\n            return -1\n\n    def write(self, val):\n        self.memory.append(val)\n        self.memory_len += 1\n        self.index += 1\n\n    def program(self):\n        self.is_program = True\n        self.stack.append(self.memory[self.index])\n        self.index += 1\n\n    def error(self):\n        self.is_error = True\n        self.stack.append(self.memory[self.index])\n\n    def stack_size(self):\n        return self.memory_len\n\n    def is_memory(self):\n        return self.is_memory\n\n    def is_str(self):\n        return self.is_str\n\n    def stack_stack(self):\n        return self.stack\n\n    def stack_stack_size(self):\n        return self.stack_size()\n\n    def is_terminated(self):\n        return self.is_terminated\n\n    def is_error(self):\n        return self.is_error\n\n    def is_success(self):\n        return self.is_success\n\n    def is_program(self):\n        return self.is_program\n\n    def is_binary(self):\n        return self.is_binary\n\n    def is_memory(self):\n        return self.is_memory\n\n    def is_str(self):\n        return self.is_str\n\n    def is_error(self):\n        return self.is_error\n\n    def is_success(self):\n        return self.is_success\n\n    def is_binary(self):\n        return self.is_binary\n\n    def is_program(self):\n        return self.is_program\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"2132\") == \"2\"\nassert solution(\"506\") == \"5\"\nassert solution(\"999999999999999999\") == \"3\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2, 1) == \"2\"\nassert solution(2, 1) == \"4\"\nassert solution(2, 2) == \"0\"\nassert solution(1, 2) == \"0\"\nassert solution(1, 3) == \"0\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, \"1121231234123451234512345671234567812345678912345678910\") == \"1\"\nassert solution(5, \"1121231234123451234512345671234567812345678912345678910\") == \"2\"\nassert solution(5, \"112123412345123451234512345671234567812345678912345678910\") == \"5\"\nassert solution(3, \"1121231234123451234512345671234567812345678912345678910\") == \"1\"\nassert solution(3, \"1121231234123451234512345671234567812345678912345678910\") == \"0\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == [\"1\", \"3\", \"20\", \"38\", \"56\"]\n\nassert solution(stdin) == [1, 3, 20, 38, 56]"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '8'\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '8'\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '8'\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == '4'\nassert solution(575) == '4'\nassert solution(99) == '5'\nassert solution(707) == '2'\nassert solution(1304) == '1'\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin)!= None\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"576\") == \"4\"\nassert solution(\"581\") == \"4\"\nassert solution(\"567\") == \"3\"\nassert solution(\"543\") == \"3\"\nassert solution(\"555\") == \"3\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"100\") == \"2\"\nassert solution(\"0\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"1\") == \"3\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"50000\") == \"25\"\nassert solution(\"60000\") == \"28\"\nassert solution(\"30000\") == \"12\"\nassert solution(\"300000001\") == \"10\"\nassert solution(\"300000002\") == \"12\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 6\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == str(4)"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(list(map(int, stdin.split()))) == 4"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 1\n\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(000) == \"1\"\nassert solution(001) == \"3\"\nassert solution(012) == \"0\"\nassert solution(013) == \"1\"\nassert solution(100) == \"2\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 3\n\nassert solution(input) == 4\n\nassert solution(input) == 5\n\nassert solution(input) == 7\n\nassert solution(input) == 8"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 10, \"Wrong answer\"\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0\") == 0, \"0\"\nassert solution(\"1\") == 1, \"1\"\nassert solution(\"01\") == 2, \"01\"\nassert solution(\"101\") == 3, \"101\"\nassert solution
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\"\n\n\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 2\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(st) == 1\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input().replace(\"0\", \"1\")) == \"1\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 1\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5 6 7 9 10 31\") == \"APPROVED\"\n\n\n'''"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == \"APPROVED\"\nassert solution(4) == \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"5 7 9 10 31\") == \"APPROVED\"\nassert solution(\n    \"6 7 9 10 31\") == \"DENIED\"\nassert solution(\n    \"3 4 8 2\") == \"DENIED\"\nassert solution(\n
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 5 1 1 1 1 2 3 3 3 3 1 2 2 1 2 3 3\") == \"APPROVED\"\n\n\n'''\n\nimport re\nimport math\n\nclass Solution:\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        # \u6bcf\u6b21\u53d6\u51fa\u4e00\u4e2a\u7a7a\u683c\u8fdb\u884c\u7b97\u5f0f\u8ba1\u7b97\n        # \u9047\u5230\u8fde\u7eed\u7684\u7a7a\u683c\uff0c\u5219\u8fdb\u884c\u4e00\u6b21\u5faa\u73af\n        # \u6bcf\u6b21\u53d6\u5230\u7a7a\u683c\u524d\u9700\u8981\u5224\u65ad\u6709\u6ca1\u6709\u9017\u53f7\n        # \u5982\u679c\u6709\u9017\u53f7\uff0c\u5219\u52a0\u4e00\uff0c\u5219\u6ca1\u6709\u9017\u53f7\n        # \u5982\u679c\u6ca1\u6709\u9017\u53f7\uff0c\u90a3\u4e48\u5224\u65ad\u6709\u6ca1\u6709\u9017\u53f7\n        if(s == \" \"):\n            return True\n        if(s.find(\".\")!= -1):\n            # print(s)\n            # print(s.find(\".\"))\n            if(s.find(\".\")!= -1):\n                # \u53ea\u6709\u9017\u53f7\n                return True\n            else:\n                # \u6ca1\u6709\u9017\u53f7\n                return False\n        else:\n            # \u5148\u68c0\u6d4b\u5f53\u524d\u5b57\u7b26\u662f\u5426\u4e3a\u6570\u5b57\n            # \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u52a0\u4e00\n            # \u5982\u679c\u4e0d\u662f\u6570\u5b57\uff0c\u5219\u9047\u5230\u8fde\u7eed\u7684\u7a7a\u683c\n            # \u6bcf\u6b21\u53d6\u5230\u7a7a\u683c\u524d\u9700\u8981\u5224\u65ad\u6709\u6ca1\u6709\u9017\u53f7\n            # \u5982\u679c\u6709\u9017\u53f7\uff0c\u5219\u52a0\u4e00\uff0c\u5219\u6ca1\u6709\u9017\u53f7\n            # \u5982\u679c\u6ca1\u6709\u9017\u53f7\uff0c\u90a3\u4e48\u5224\u65ad\u6709\u6ca1\u6709\u9017\u53f7\n            # \u5982\u679c\u6ca1\u6709\u9017\u53f7\uff0c\u90a3\u4e48\u5224\u65ad\u6709\u6ca1\u6709\u9017\u53f7\n            if(s.isdigit()):\n                # print(s)\n                # print(s.isdigit())\n                return True\n            else:\n                # \u6ca1\u6709\u9017\u53f7\n                return False\n\n    def solution(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        # \u6bcf\u6b21\u53d6\u51fa\u4e00\u4e2a\u7a7a\u683c\u8fdb\u884c\u7b97\u5f0f\u8ba1\u7b97\n        # \u9047\u5230\u8fde\u7eed\u7684\u7a7a\u683c\uff0c\u5219\u8fdb\u884c\u4e00\u6b21\u5faa\u73af\n        # \u6bcf\u6b21\u53d6\u5230\u7a7a\u683c\u524d\u9700\u8981\u5224\u65ad\u6709\u6ca1\u6709\u9017\u53f7\n        # \u5982\u679c\u6709\u9017\u53f7\uff0c\u5219\u52a0\u4e00\uff0c\u5219\u6ca1\u6709\u9017\u53f7\n        # \u5982\u679c\u6ca1\u6709\u9017\u53f7\uff0c\u90a3\u4e48\u5224\u65ad\u6709\u6ca1\u6709\u9017\u53f7\n        # \u5982\u679c\u6ca1\u6709\u9017\u53f7\uff0c\u90a3\u4e48\u5224\u65ad\u6709\u6ca1\u6709\u9017\u53f7\n        if(s == \" \"):\n            return True\n        if(s.find(\".\")!= -1):\n            # print(s)\n            # print(s.find(\".\"))\n            if(s.find(\".\")!= -1):\n                # \u53ea\u6709\u9017\u53f7\n                return True\n            else:\n                # \u6ca1\u6709\u9017\u53f7\n                return False\n        else:\n            # \u5148\u68c0\u6d4b\u5f53\u524d\u5b57\u7b26\u662f\u5426\u4e3a\u6570\u5b57\n            # \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u52a0\u4e00\n            # \u5982\u679c\u4e0d\u662f\u6570\u5b57\uff0c\u5219\u9047\u5230\u8fde\u7eed\u7684\u7a7a\u683c\n            # \u6bcf\u6b21\u53d6\u5230\u7a7a\u683c\u524d\u9700\u8981\u5224\u65ad\u6709\u6ca1\u6709\u9017\u53f7\n            # \u5982\u679c\u6709\u9017\u53f7\uff0c\u5219\u52a0\u4e00\uff0c\u5219\u6ca1\u6709\u9017\u53f7\n            # \u5982\u679c\u6ca1\u6709\u9017\u53f7\uff0c\u90a3\u4e48\u5224\u65ad\u6709\u6ca1\u6709\u9017\u53f7\n            if(s.isdigit()):\n                # print(s)\n                # print(s.isdigit())\n                return True\n            else:\n                # \u6ca1\u6709\u9017\u53f7\n                return False\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"APPROVED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 7 9 10') == \"DENIED\"\nassert solution('1 5 7 9 1') == \"APPROVED\"\nassert solution('0 5 1 5') == \"APPROVED\"\nassert solution('1 10') == \"APPROVED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(n, a) == \"APPROVED\"\nassert solution(n, a) == \"DENIED\"\n'''\n\nimport sys\ninput = sys.stdin.readline\n\nN, A = map(int, input().strip().split())\n\ndiv_sum = 0"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"DENIED\"\nassert solution(\"5\") == \"APPROVED\"\nassert solution(\"10\") == \"APPROVED\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\\\"RUDLUDR\\\"), \\\"Yes\\\"\nassert solution(\\\"DUDLUDDELU\\\"), \\\"No\\\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUDRU') == 'No'\nassert solution('RUDRU') == 'Yes'\nassert solution('RUDR') == 'No'\nassert solution('RUDR') == 'No'\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RUDR\") == \"No\"\nassert solution(\"UUDR\") == \"Yes\"\nassert solution(\"UUDRUDR\") == \"No\"\nassert solution(\"DRUDR\") == \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n'') == 'Yes'\nassert solution(\n'RUDLUDR') == 'No'"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(RUDLUDR) == \"Yes\"\nassert solution(RUDULDR) == \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(S) == \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RUDLUDR\") == \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(RUDLUDR) == Yes\nassert solution(RUDLUDR) == No\nassert solution(RUDLUDR) == Yes\nassert solution(RUDLUDR) == No\nassert solution(RUDLUDR) == Yes\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(RUDLUDR) == \"Yes\"\nassert solution(RUDSLU) == \"No\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 3 2 4\") == \"7\"\nassert solution(\"4 6 4\") == \"4\"\nassert solution(\"2 3 3\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"3 2\") == \"3\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"7\"\nassert solution(\"2 3 5 4\") == \"12\"\nassert solution(\"1 2 3 4 5\") == \"12\"\nassert solution(\"5 3\") == \"12\"\nassert solution(\"1 3 1 4 5\") == \"7\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 7"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"7\"\n\nThe input is formatted as shown in the sample input.\nThe output is a valid input.\n\nThe given input is formatted as shown in the sample input.\nThe output is a valid input.\n\"\"\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"7\"\nassert solution(input) == \"7\"\nassert solution(input) == \"7\"\nassert solution(input) == \"7\"\nassert solution(input) == \"7\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '7'\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"7\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"7\"\n\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 4\") == 7\nassert solution(\"5 3 2 4 5\") == \"7\"\nassert solution(\"5 3 2 5\") == \"5\"\nassert solution(\"5 3 4 4\") == \"7\"\nassert solution(\"5 3 4 5\") == \"7\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"2\"\n) == \"2\"\n\nassert solution(\n    \"1\"\n) == \"1\"\n\nassert solution(\n    \"1\"\n) == \"3\"\n\nassert solution(\n    \"0\"\n) == \"9\"\n\n-----Sample Input-----\n\n3\n\n0\n0\n0\n0\n0\n0\n\n-----Output-----\n1\n\n2\n0\n0\n\n-----Sample Input-----\n\n2\n\n0\n0\n0\n1\n\n0\n0\n0\n\n-----Output-----\n0\n\n0\n0\n0\n0\n\n-----Sample Input-----\n\n3\n\n0\n0\n0\n1\n\n0\n0\n0\n\n0\n0\n0\n0\n\n0\n\n-----Output-----\n1\n\n0\n\n-----Sample Input-----\n\n4\n\n0\n0\n0\n1\n\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n\n0\n\n-----Output-----\n0\n\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n3\n\n0\n0\n0\n0\n0\n0\n1\n\n0\n0\n0\n0\n0\n0\n\n0\n\n-----Output-----\n0\n\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n4\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Output-----\n0\n\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n5\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n\n-----Output-----\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n3\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n\n0\n\n-----Output-----\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n3\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Output-----\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n2\n\n0\n0\n0\n0\n1\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n\n0\n0\n0\n0\n0\n\n0\n\n-----Output-----\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n4\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n\n0\n\n-----Output-----\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n3\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n\n0\n0\n0\n0\n0\n\n-----Output-----\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n4\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Output-----\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n3\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Output-----\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n2\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Output-----\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n3\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"{0,9,0,9}\") == \"2\"\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]) == \"0 1 3 5 7 9\"\nassert solution([\"1\",\"0\",\"1\",\"1\"]) == \"0 1 0 1\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]) == \"0 2 3 4 5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n\"\"\"\n\nN = int(input())\n\nli = list(map(int, input().split()))\n\nfor i in range(N):\n    if li[i] == 0:\n        print(0, end=' ')\n    elif li[i] == 9:\n        print(9, end=' ')\n    else:\n        print(li[i], end=' ')"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"1\\n4\\n2\\n4\\n3\\n1\\n6\\n3\\n1\\n8\\n7\\n5\\n5\\n6\\n4\\n2\\n6\\n6\\n2\\n2\\n2\\n2\\n2\\n2\\n3\\n4\\n4\\n3\\n6\\n3\\n5\\n4\\n3\\n6\\n2\\n3\\n1\\n4\\n4\\n3\\n5\\n4\\n4\\n4\\n4\\n5\\n5\\n4\\n6\\n6\\n3\\n1\\n1\\n5\\n2\\n4\\n4\\n3\\n1\\n1\\n5\\n3\\n2\\n4\\n3\\n5\\n3\\n3\\n6\\n3\\n6\\n1\\n2\\n4\\n2\\n1\\n2\\n2\\n3\\n2\\n3\\n2\\n3\\n3\\n1\\n5\\n2\\n5\\n4\\n2\\n3\\n4\\n4\\n4\\n4\\n5\\n4\\n4\\n4\\n4\\n4\\n4\\n5\\n4\\n6\\n2\\n3\\n4\\n1\\n3\\n4\\n4\\n5\\n4\\n4\\n4\\n5\\n4\\n3\\n4\\n4\\n4\\n5\\n3\\n3\\n2\\n2\\n3\\n5\\n3\\n4\\n3\\n2\\n3\\n3\\n2\\n1\\n4\\n5\\n4\\n4\\n4\\n5\\n5\\n4\\n4\\n4\\n5\\n5\\n5\\n4\\n5\\n4\\n5\\n4\\n4\\n4\\n4\\n5\\n5\\n3\\n4\\n5\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n1\\n1\\n2\\n2\\n2\\n4\\n5\\n5\\n4\\n5\\n4\\n4\\n4\\n5\\n5\\n5\\n4\\n4\\n4\\n4\\n4\\n5\\n3\\n4\\n4\\n3\\n3\\n3\\n4\\n4\\n4\\n3\\n4\\n3\\n4\\n5\\n4\\n4\\n4\\n5\\n4\\n4\\n4\\n4\\n4\\n5\\n5\\n5\\n4\\n4\\n4\\n5\\n5\\n5\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n4\\n4\\n5\\n4\\n5\\n5\\n4\\n5\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n5\\n4\\n5\\n4\\n4\\n4\\n5\\n4\\n5\\n4\\n4\\n4\\n5\\n5\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n4\\n4\\n5\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"solution() does not return valid input\"\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 0 8 9\") == \"8\"\nassert solution(\"1 0 9 0 1 2 0 9 0\") == \"2\"\nassert solution(\"2 1 1 1 1 1 1 1 1\") == \"2\"\nassert solution(\"2 0 0 0 0 0 0 0 0\") == \"2\"\nassert solution(\"1 1 1 1 1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"2\"\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('0') == '0'\nassert solution('9') == '9'\nassert solution('1') == '1'\nassert solution('9') == '9'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 23\n'''"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 5\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"123\") == 23\nassert solution(\"4177252841\") == 23\nassert solution(\"12345\") == 23\nassert solution(\"1\") == 1\nassert solution(\"0\") == 0\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == 23\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"2\"\nassert solution(3) == \"2\"\nassert solution(5) == \"2\"\nassert solution(4) == \"2\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2) == 2\nassert solution(3) == 4\nassert solution(4) == 5\nassert solution(5) == 6"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '23'\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(int(stdin)) == 23\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '23'\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0) == \"0\"\nassert solution(1) == \"1\"\nassert solution(2) == \"2\"\nassert solution(3) == \"3\"\nassert solution(4) == \"4\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 1 3 2') == '1'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 2 3') == '1'\nassert solution('1 1 1 3 4 5 6 7 8 9') == '1'\nassert solution('1 1 1 3 4 5 6 7 8 9 1 2 3') == '2'\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\", \"Correct output not found\"\n'''"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"3\",\"1\",\"3\",\"2\"]) == \"1\"\nassert solution([\"1\",\"1\",\"3\",\"2\"]) == \"1\"\nassert solution([\"1\",\"3\",\"2\"]) == \"1\"\nassert solution([\"1\",\"1\",\"2\",\"3\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"4\"]) == \"1\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 1 3 2') == 1\nassert solution('5') == 0\nassert solution('2 1 3 4 5') == 1\nassert solution('2 1 3 4 5 6') == 1\nassert solution('6') == 1\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"1\""
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n        \"4\",\n        \"3 1 3 2\",\n    ]\n) == 3\nassert solution(\n    [\n        \"5\",\n        \"5\",\n    ]\n) == 5\nassert solution(\n    [\n        \"5\",\n        \"5\",\n    ]\n) == 2\nassert solution(\n    [\n        \"1\",\n        \"1\",\n    ]\n) == 2\nassert solution(\n    [\n        \"1\",\n        \"2\",\n    ]\n) == 2\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\n\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"3 1 3 2\"\n) == 2\nassert solution(\n    \"3 1 3 2\"\n) == 1\nassert solution(\n    \"1\"\n) == 1\nassert solution(\n    \"1\"\n) == 1\nassert solution(\n    \"3 1 3 2\"\n) == 2\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(st) == \"7\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"98\") == \"23\"\nassert solution(\"40\") == \"23\"\nassert solution(\"30\") == \"23\"\nassert solution(\"21\") == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"23\"\nassert solution(input()) == \"31\"\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 80\") == \"23\"\nassert solution(\"10 100\") == \"19\"\nassert solution(\"10 60\") == \"12\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 5\") == \"2\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"98\") == \"23\"\nassert solution(\"40\") == \"23\"\nassert solution(\"30\") == \"23\"\nassert solution(\"21\") == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5 100 90 80\") == \"12\"\nassert solution(\"5 100 90 80\") == \"12\"\nassert solution(\"5 100 90 80\") == \"12\"\nassert solution(\"5 100 90 80\") == \"12\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"3 100 90 80\") == \"23\"\nassert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5 100 90 80\") == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"23\"\n'''"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '23'\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"23\"\nprint(\"Example 1:\")\nprint(\"Expected output: 23\")\nprint(\"------------------------------\")\nprint(\"Example 2:\")\nprint(\"Expected output: 12\")\nprint(\"------------------------------\")\nprint(\"Example 3:\")\nprint(\"Expected output: 0\")\nprint(\"------------------------------\")"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"CDEZAB\"\n'''"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"ABCXYZ\"\n    ) == \"CDEZAB\"\nassert solution(\n    \"ABCXYZ\"\n    ) == \"CDEZAB\"\nassert solution(\n    \"ABCXYZ\"\n    ) == \"CDEZAB\"\nassert solution(\n    \"ABCXYZ\"\n    ) == \"CDEZAB\"\nassert solution(\n    \"ABCXYZ\"\n    ) == \"CDEZAB\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"GeeksforGeeks\", \"forGeeks\", \"GeeksforGeeks\"]) == \"GeeksforGeeksforGeeks\"\nassert solution([\"A\", \"Z\", \"A\"]) == \"A\"\nassert solution([\"A\", \"Z\"]) == \"A\"\nassert solution([\"Z\", \"A\", \"Z\"]) == \"A\"\nassert solution([\"G\", \"A\", \"D\"]) == \"Ad\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(s) == 'CDEZAB'\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"YBCB\") == \"CDEZAB\"\nassert solution(\"YBCB\") == \"AB\"\nassert solution(\"YBCB\") == \"YBCB\"\nassert solution(\"YBCB\") == \"BCB\"\nassert solution(\"YBCB\") == \"BCB\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n        stdin: str\n    ) == \"CDEZAB\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == \"CDEZAB\", \"Example 3\"\nassert solution(s) == \"ABDC\", \"Example 4\"\nassert solution(s) == \"A\", \"Example 5\"\nassert solution(s) == \"AB\", \"Example 6\"\nassert solution(s) == \"ABCXYZ\", \"Example 7\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin=\"2\"\n) == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"AAABBB\") == \"BABAB\"\nassert solution(\"A\") == \"A\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"ABC\", \"XYZ\"]) == \"CDEZAB\", \"Not a valid string\"\nassert solution([\"XYZ\", \"ABC\"]) == \"CDEZAB\", \"Not a valid string\"\nassert solution([\"AABBCC\", \"ABC\", \"A\", \"BC\"]) == \"ABC\", \"Not a valid string\"\nassert solution([\"A\", \"B\", \"C\", \"D\"]) == \"CD\", \"Not a valid string\"\nassert solution([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]) == \"EF\", \"Not a valid string\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15],\n    ]\n) == '3 4 2'\n\nassert solution(\n    [\n        [\n            'a',\n            'b',\n            'c',\n            'd',\n        ],\n        ['e', 'f', 'g', 'h'],\n        ['i', 'j', 'k', 'l'],\n    ]\n) == '4 1 2'\n\nassert solution(\n    [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15],\n    ]\n) == '4 11 6'\n\nassert solution(\n    [\n        [\n            'a',\n            'b',\n            'c',\n            'd',\n        ],\n        ['e', 'f', 'g', 'h'],\n        ['i', 'j', 'k', 'l'],\n    ]\n) == '2 3 4'\n\nassert solution(\n    [\n        [\n            'a',\n            'b',\n            'c',\n            'd',\n        ],\n        ['e', 'f', 'g', 'h'],\n        ['i', 'j', 'k', 'l'],\n        ['i', 'j', 'k', 'l'],\n        ['i', 'j', 'k', 'l'],\n        ['i', 'j', 'k', 'l'],\n        ['i', 'j', 'k', 'l'],\n        ['i', 'j', 'k', 'l'],\n        ['i', 'j', 'k', 'l'],\n        ['i', 'j', 'k', 'l'],\n        ['i', 'j', 'k', 'l'],\n        ['i', 'j', 'k', 'l'],\n    ]\n) == '4 1 2 3 4'"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1 3 2 4\"\nassert solution(input()) == \"2 3 6\"\n\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == inp\nassert solution(inp2) == inp2\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2 \nassert solution(\"3 5 2 3 2 4\") == \"6\""
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2 3 2 3 3 4 2 3 4 4 2 4 2 3 3 3 2 3 2\"\nassert solution(stdin) == \"3 1 5 2 3\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '200', 'Failed'\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2750131'\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('1') == '1'\nassert solution('1 4 2') == '1 2 4'\nassert solution('1 4 3') == '1 3 2 4'"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 4 2 3 2 4\") == \"3 4 2?\"\nassert solution(\"1\") == \"?\"\nassert solution(\"4 3 2 2 1\") == \"?\"\nassert solution(\"4 4 3 4 5\") == \"?\"\nassert solution(\"1\") == \"?\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 4 2\"\nassert solution(stdin) == \"3 4 2\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"111111\"\nassert solution(inp) == \"22111\"\nassert solution(inp) == \"111221\"\nassert solution(inp) == \"222122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"111122\""
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1121122'\n\"\"\""
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"7 1\") == \"22111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"3 4\") == \"1121122\"\nassert solution(\"1 4\") == \"1121122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"111\"\nassert solution(\"5 1\") == \"1121122\"\nassert solution(\"7 1\") == \"21112\"\nassert solution(\"7 2\") == \"22111\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 1\") == \"111221\"\nassert solution(\"7 1\") == \"111111\""
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '11111'\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"22111\"\nassert solution(\"7 1\") == \"111111\"\nassert solution(\"7 2\") == \"111111\"\nassert solution(\"7 3\") == \"111111\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 1, 2, 3, 5, 3, 4, 5, 7, 6) == [11111, 1121122]\nassert solution(5, 1, 2, 3, 5, 4, 3, 5, 6, 7) == [22111, 1121122]\nassert solution(7, 1, 2, 3, 5, 4, 4, 6, 7, 8) == [21112]\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 2, \"incorrect solution\"\n\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n        inp: str\n        ) == \"4\"\n\nNote: Standard input may be too large.\n'''"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\n\n-----Test-----\nInput\n10\n
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('10 10 1') == 2\nassert solution('11 11 1') == 3\nassert solution('11 11 2') == 4\nassert solution('11 11 3') == 4\nassert solution('1 1 2 3') == 2\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 5\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"18\"\nassert solution(stdin) == \"50\"\nassert solution(stdin) == \"36\"\nassert solution(stdin) == \"49\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"2 5 4 3\") == 4\nassert solution(\n    \"4 3 3 1\") == 2\nassert solution(\n    \"7 4 8 3 9\") == 3\nassert solution(\n    \"2 5 4 5 6\") == 6\nassert solution(\n    \"5 6 5 4 2 3 8 10 11 12\") == 8\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 22\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 10\n\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\n\n-----------------------------------------------------------------------------------------------\n\n\n'''"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 4\n\nassert solution(stdin) == 5\n\nassert solution(stdin) == 9"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '1'\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1, 'empty'\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\"\n\n\nassert solution(input()) == \"2\"\n\nassert solution(input()) == \"3\"\n\nassert solution(input()) == \"4\"\n\nassert solution(input()) == \"5\""
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\n\"\"\"\n\n\nclass Solution:\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        elif len(nums) == 1:\n            return 1\n        i = 0\n        for num in nums:\n            if num not in nums[i:i+1]:\n                i += 1\n                num = nums[i]\n                nums[i] = nums[-1]\n                nums[-1] = num\n            i += 1\n        return i\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\n\n-----Notes-----\nYou may assume $10^9$ is the only number in the range $1 \\le n \\le 10^9$.\n\n\"\"\"\nimport math\nimport sys\n\ninput = sys.stdin.readline"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1, \"There must be only one good sequence\"\n\n\n-----Tests-----\ntests = [\n    (\n        (\"5\", \"4\", \"7\"),\n        4,\n        0,\n    ),\n    (\n        (\"1\", \"4\", \"3\"),\n        0,\n        0,\n    ),\n    (\n        (\"1\", \"1\", \"1\"),\n        1,\n        0,\n    ),\n    (\n        (\"4\", \"1\", \"3\"),\n        1,\n        0,\n    ),\n    (\n        (\"3\", \"3\", \"3\"),\n        1,\n        0,\n    ),\n    (\n        (\"9\", \"9\", \"9\"),\n        1,\n        0,\n    ),\n    (\n        (\"3\", \"3\", \"3\"),\n        1,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        1,\n    ),\n    (\n        (\"0\", \"1\", \"0\"),\n        1,\n        0,\n    ),\n    (\n        (\"3\", \"3\", \"3\"),\n        1,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        1,\n    ),\n    (\n        (\"0\", \"1\", \"0\"),\n        1,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"1\"),\n        1,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"1\"),\n        1,\n        0,\n    ),\n    (\n        (\"0\", \"1\", \"0\"),\n        1,\n        0,\n    ),\n    (\n        (\"3\", \"3\", \"3\"),\n        1,\n        1,\n    ),\n    (\n        (\"3\", \"3\", \"3\"),\n        1,\n        0,\n    ),\n    (\n        (\"3\", \"3\", \"3\"),\n        1,\n        1,\n    ),\n    (\n        (\"0\", \"1\", \"0\"),\n        1,\n        0,\n    ),\n    (\n        (\"3\", \"3\", \"3\"),\n        1,\n        1,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        1,\n    ),\n    (\n        (\"1\", \"1\", \"1\"),\n        0,\n        1,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        1,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        1,\n        1,\n    ),\n    (\n        (\"0\", \"1\", \"0\"),\n        1,\n        1,\n    ),\n    (\n        (\"0\", \"0\", \"1\"),\n        1,\n        1,\n    ),\n    (\n        (\"0\", \"0\", \"1\"),\n        1,\n        1,\n    ),\n    (\n        (\"0\", \"0\", \"1\"),\n        1,\n        1,\n    ),\n    (\n        (\"0\", \"0\", \"1\"),\n        1,\n        1,\n    ),\n    (\n        (\"0\", \"1\", \"0\"),\n        1,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"1\"),\n        1,\n        1,\n    ),\n    (\n        (\"0\", \"0\", \"1\"),\n        1,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        1,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    ),\n    (\n        (\"0\", \"0\", \"0\"),\n        0,\n        0,\n    "
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"Failed\"\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 10, 'incorrect'\nassert solution(input) == 4, 'incorrect'"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('0011') == '4'\nassert solution('1010') == '3'\nassert solution('1010') == '3'\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(A) == 4\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['0011']), 2\nassert solution(['0111']), 2\nassert solution(['1011']), 1\nassert solution(['10']), 1\nassert solution(['100']), 1\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s) == \"4\""
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\n    \"00011101\",\n    \"00011100\",\n    \"00011101\",\n    \"00011100\",\n    \"00011101\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"00011100\",\n    \"0001"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(a) == 6\nassert solution(b) == 1\nassert solution(c) == 1\nassert solution(d) == 1\nassert solution(e) == 1\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"00110\") == 3\nassert solution(\"11111\") == 2\nassert solution(\"10\") == 0\nassert solution(\"011\") == 0"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"5 1\") == \"1\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(4 2) == 2\nassert solution(2 3) == 2\nassert solution(4 4) == 2\nassert solution(4 4) == 2\nassert solution(4 4) == 2\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 0\nassert solution(input) == 1\nassert solution(input) == 2\nassert solution(input) == 3\nassert solution(input) == 4\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 2\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"4\"\nassert solution(\"4 1\") == \"2\"\nassert solution(\"4 1\") == \"3\"\nassert solution(\"4 1\") == \"5\"\nassert solution(\"4 1\") == \"7\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n\n'''"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"4 4\") == \"3\"\nassert solution(\"4 4\") == \"0\"\nassert solution(\"4 2\") == \"1\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(get_input()) == \"2\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 1 3 4 4 4 4') == '5'\nassert solution('1 2 3 4 5 4 5') == '2'\nassert solution('2 4 5 6 7 8 9 9') == '1'\nassert solution('2 1 1 2 2 2 2') == '4'\nassert solution('2 3 3 3 3 3 3') == '3'\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 2\nassert solution(2) == 2\nassert solution(3) == 4\nassert solution(4) == 8"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 5 2 1\") == \"2\"\nassert solution(\"4 2 1 1\") == \"1\"\nassert solution(\"2 3 2 2\") == \"1\"\nassert solution(\"7\") == \"2\"\nassert solution(\"2 3 2 3\") == \"3\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,3), '1'\nassert solution(2,4), '2'\nassert solution(4,4), '4'\nassert solution(5,5), '5'\nassert solution(6,6), '6'\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('7 7 7 2') == '5'\n\"\"\"\nclass Solution:\n    def watering(self, heights: str) -> str:\n        pass\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"{1,2,3,2,1}\") == \"3\"\nassert solution(\"{1,1,1}\") == \"1\"\nassert solution(\"{1,1,1}\") == \"1\"\nassert solution(\"{1,1}\") == \"1\"\nassert solution(\"{1,1}\") == \"1\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"2\"\n\nInput\nThe first line contains an integer T, the number of test cases.\nEach test case contains one line containing an integer N, the number of flowers.\n\nConstraints\n1\u2264T\u2264100\n\n2\u2264N\u2264100\n\n3\u2264l\u2264r\u2264N\n\nOutput\nPrint the minimum number of watering operations required to satisfy the condition.\n\nSample Input\n2\n5\n4 2\n3 1\n1 1\n2\n3\nSample Output\n5\n\nThe minimum number of watering operations required is 3.\nOne way to achieve it is:\n - Perform the operation with (l,r)=(1,3).\n - Perform the operation with (l,r)=(2,4).\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"4\""
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == 3\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 3 1 2') == 2, \"Expected 2, got {}\"\nassert solution('1 2 3 1') == 1, \"Expected 1, got {}\"\nassert solution('5 4 4 5') == 4, \"Expected 4, got {}\"\nassert solution('3 4 1 1') == 1, \"Expected 1, got {}\"\nassert solution('2 3 2 4') == 2, \"Expected 2, got {}\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 2 1\") == \"2\"\nassert solution(\"1 2 3 2 2\") == \"2\"\nassert solution(\"2 2 1 3 3 2\") == \"1\"\nassert solution(\"2 2 1 3 3 1\") == \"1\"\nassert solution(\"3 3 3 2 3 2\") == \"1\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\n\n\n-----Constraints-----\n\n1 <= n <= 100, 1 <= w <= 10^6\n0 <= a_i <= 10^6\n\n--------Test Cases--------\n\nInput 1:\n\n3 5\n2 1 -3\n\nOutput 1:\n\n0\n\n\nInput 2:\n\n1 4\n-1 -1\n\nOutput 2:\n\n0\n\n-----Constraints-----\n\n1 <= n <= 100, 1 <= w <= 10^6\n-10^7 <= a_i <= 10^7\n\n-----Sample Input-1:\n\n3 5\n2 1 -3\n\n-----Sample Output-1:\n\n1\n\n-----Sample Input-2:\n\n4 1\n-1 2\n\n-----Sample Output-2:\n\n0\n\n-----Sample Input-3:\n\n10 10\n2 3 4 5\n-1 -1\n\n-----Sample Output-3:\n\n0\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"0\"\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\"\"2 4\n1 1\n2 2\"\"\") == 3\nassert solution(\"\"\"1 3\n1 1\n2 2\"\"\") == 1\nassert solution(\"\"\"1 2\n2 1\n3 2\"\"\") == 0\nassert solution(\"\"\"1 2\n0 1\n2 2\"\"\") == 0\nassert solution(\"\"\"2 1\n1 1\n2 2\"\"\") == 1\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '4'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\n\"\"\"\nimport sys\n\nt = int(sys.stdin.readline().rstrip())\n\nfor i in range(t):\n    stdin = sys.stdin.readline().rstrip()\n    a, w = list(map(int, stdin.split()))\n    a_list = []\n    b_list = []\n    for i in range(a):\n        a_list.append(int(sys.stdin.readline().rstrip()))\n    for i in range(a):\n        b_list.append(a_list[i]*w)\n    for i in range(a-1):\n        b_list.append(a_list[i]+b_list[i+1])\n    print(len(set(b_list)))\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"0\"\nassert solution(input) == \"1\"\nassert solution(input) == \"2\"\nassert solution(input) == \"3\"\nassert solution(input) == \"4\""
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 4\") == \"4\"\nassert solution(\"2 5\") == \"3\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"2 10\") == \"0\"\nassert solution(\"3 4\") == \"0\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3 4\") == \"2\"\nassert solution(\"5 0 1\") == \"1\"\nassert solution(\"10 0 1\") == \"1\"\nassert solution(\"10 1 0\") == \"1\"\nassert solution(\"10 1 0\") == \"0\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == [9,3,6,12,4,8]\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"8 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"9 3 6 12 4 8\"\nassert solution(stdin) == \"1000000000000000000 3000000000000000000\"\nassert solution(stdin) == \"1000000000000000000 1000000000000000000\"\nassert solution(stdin) == \"3000000000000000000 1000000000000000000\"\nassert solution(stdin) == \"1000000000000000000 3000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"[[2, 3, 4, 5], [6, 7, 8]]\") == [\"10\", \"6\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]\nassert solution(\"[1, 2, 3, 4, 5, 6, 7, 8, 9]\") == [\"100\", \"4\", \"2\", \"3\", \"5\", \"6\", \"7\", \"8\", \"9\"]\nassert solution(\"[[1, 2, 3, 4, 5, 6, 7, 8], [9, 3, 6, 12, 4, 8]]\") == [\"10\", \"6\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\nassert solution(\"[[1, 2, 3, 4, 5, 6, 7, 8], [9, 3, 6, 12, 4, 8]]\") == [\"10\", \"6\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"100\""
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3000000000000000000 1000000000000000000'\n\n-----Constraints-----\n0 <= stdin.length <= 100\n1 <= n <= 10^18\n-10^18 <= a_i, a_1, a_2,..., a_n <= 10^18\n\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"100101010\"\nassert solution(stdin) == \"100101011\"\nassert solution(stdin) == \"100101012\"\nassert solution(stdin) == \"100101013\"\nassert solution(stdin) == \"100101014\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3 3 6 12 4 8\"\nassert solution(stdin) == \"6 1 3 12 9\"\nassert solution(stdin) == \"12 42 84 28\"\nassert solution(stdin) == \"126 42 84 28\"\n\nTime Limit:  15 min\nSpace Limit:  1GB"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"9 3 6 12 4 8\"\nassert solution(input()) == \"12 4 8 6 3\"\nassert solution(input()) == \"100 2\"\nassert solution(input()) == \"100\"\nassert solution(input()) == \"100\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"12321\"\nassert solution(input()) == \"2125\"\nassert solution(input()) == \"4433\"\nassert solution(input()) == \"9233\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '[7, 3, 5]'\n\nassert solution(stdin) == '[7, 3, 5]'\n\nassert solution(stdin) == '[5, 4, 7]'\n\nassert solution(stdin) == '[-1, 2, 5]'\n\nassert solution(stdin) == '[8, -1, 3]'\n\n\n\"\"\"\n\nimport math\n\nclass Subset:\n    def __init__(self, n):\n        self.n = n\n        self.mem = {}\n\n    def __str__(self):\n        return str(self.n)\n\n    def __eq__(self, o):\n        return self.n == o.n\n\n    def __lt__(self, o):\n        return self.n < o.n\n\n    def __gt__(self, o):\n        return self.n > o.n\n\n    def __le__(self, o):\n        return self.n <= o.n\n\n    def __ge__(self, o):\n        return self.n >= o.n\n\n    def __ne__(self, o):\n        return self.n!= o.n\n\n    def __add__(self, o):\n        return Subset(self.n + o.n)\n\n    def __iadd__(self, o):\n        return self + o\n\n    def __sub__(self, o):\n        return self.n - o.n\n\n    def __isub__(self, o):\n        return self - o\n\n    def __mul__(self, o):\n        return self.n * o.n\n\n    def __imul__(self, o):\n        return self.n * o.n\n\n    def __truediv__(self, o):\n        return self.n / o.n\n\n    def __itruediv__(self, o):\n        return self.n / o.n\n\n    def __abs__(self):\n        return abs(self.n)\n\n    def __iand__(self, o):\n        return self.n & o.n\n\n    def __ior__(self, o):\n        return self | o\n\n    def __isub__(self, o):\n        return self - o\n\n    def __isub__(self, o):\n        return self - o\n\n    def __isub__(self, o):\n        return self - o\n\n    def __pow__(self, o):\n        return self ** o.n\n\n    def __rpow__(self, o):\n        return self ** o.n\n\n    def __and__(self, o):\n        return self & o\n\n    def __rand__(self, o):\n        return self & o\n\n    def __ror__(self, o):\n        return self | o\n\n    def __ror__(self, o):\n        return self | o\n\n    def __xor__(self, o):\n        return self ^ o\n\n    def __rxor__(self, o):\n        return self ^ o\n\n    def __or__(self, o):\n        return self | o\n\n    def __ror__(self, o):\n        return self | o\n\n    def __rxor__(self, o):\n        return self ^ o\n\n    def __abs__(self):\n        return math.pow(self.n, 1/self.n)"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == '3'\nassert solution(inp) == '5'\nassert solution(inp) == '7'\nassert solution(inp) == '11'\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"6\"\n    \"3 5 4 7 10 12\"\n    \"5\"\n    \"1 2 5 8 11\"\n    \"5\"\n    \"1 2 5\"\n    \"8\"\n    \"1 3 5\"\n    \"8\"\n    \"1 5 5\"\n    \"8\"\n    \"1 2 3\"\n    \"8\"\n    \"1 2 2\"\n    \"8\"\n    \"1 2 1\"\n    \"8\"\n    \"1 2 3\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3\"\n    \"8\"\n    \"1 3 2\"\n    \"8\"\n    \"1 3 1\"\n    \"8\"\n    \"1 3 3"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '[3, 5]', 'Wrong answer'\n\nassert solution(stdin) == '[-1, 2, 5]', 'Wrong answer'\n\nassert solution(stdin) == '[1, 7]', 'Wrong answer'\n\nassert solution(stdin) == '[3, 8, 10, 12]', 'Wrong answer'\n\n\"\"\"\nn = int(input())\np = list(map(int, input().split()))\nx = [list(map(int, input().split())) for i in range(n)]\nfor i in range(n):\n    for j in range(n):\n        if x[i][j]!= p[i] or x[j][i]!= p[j]:\n            print(\"Invalid input\", i, j)\n            break\n        for k in range(n):\n            if x[i][k]!= p[i] or x[k][i]!= p[k]:\n                print(\"Invalid input\", i, j, k)\n                break\n        else:\n            print(\"Valid input\", i, j, k)\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n\n\n-----Constraints-----\n0 \u2264 stdin.length \u2264 100,000\n\nTime Limit: 1 sec\n\n-------SOLUTION-------\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4, [1, 2, 3, 4]) == 7\nassert solution(3, [-1, 2, 3]) == 3\nassert solution(1, [1, 2, 3, 4, 5]) == 8\nassert solution(6, [3, 5, 10, 12, 15, 17]) == 9\nassert solution(3, [-1, 2, 3, 4]) == 0\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"8\"\n\n-----Sample Input\n\n1\n2 4 3 1 2 5\n\n-----Sample Output\n\n3\n7 3 5\n\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"6 5 4 7 10 12\") == \"3 7 5\"\nassert solution(\"5 -1 2 5 8 11\") == \"8 3 5\"\nassert solution(\"5 -1 2 5 8 11\") == \"5\"\nassert solution(\"5 -1 2 5 8 11\") == \"1\"\nassert solution(\"5 -1 2 5 8 11\") == \"3\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == [\"7\", \"3\", \"5\"]\n\nassert solution(stdin) == [\"5\", \"-1\", \"2\", \"8\"]\nassert solution(stdin) == [\"5\", \"-1\", \"2\", \"8\"]\n\nassert solution(stdin) == [\"5\", \"-1\", \"2\", \"8\"]\nassert solution(stdin) == [\"5\", \"2\", \"8\"]"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\") == [1, 2]\nassert solution(\"-1 -1 -1\") == [3, 5]\nassert solution(\"0 0 0\") == [2, 5]\nassert solution(\"3\") == [3]\nassert solution(\"0\") == [3]\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"0 2\"\nassert solution(inp) == \"2 1\"\nassert solution(inp) == \"0 1\"\nassert solution(inp) == \"2 1\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stmt) == '0 2'\n\"\"\"\n\n\nclass Solution:\n    def number_of_cookies(self, k: int) -> str:\n        if k == 1:\n            return '1'\n        return f'{k - 1} {self.number_of_cookies(k - 1)}'\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 2, \"Takahashi does not eat any cookies.\"\nassert solution(input()) == 0, \"Aoki does not eat any cookies.\"\nassert solution(input()) == 2, \"Takahashi eats one of his cookies.\"\nassert solution(input()) == 2, \"He has one cookie left, and he eats it.\"\nassert solution(input()) == 0, \"He has no cookies left, but Aoki has three, so he eats one of them.\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(a = \"2 3 3\") == \"0 2\"\nassert solution(a = \"2 1 3\") == \"1\"\nassert solution(a = \"2 4 1\") == \"2 2\"\nassert solution(a = \"1 2\") == \"1\"\nassert solution(a = \"1 3\") == \"3\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"1 2\"\nassert solution(input) == \"0 2\"\nassert solution(input) == \"0 3\"\nassert solution(input) == \"0 4\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\nassert solution(\"2 3 4\") == \"0 1\"\nassert solution(\"2 3 1\") == \"1 2\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\nassert solution(\"2 1 2\") == \"0 1\"\nassert solution(\"2 5 4\") == \"3 1\"\nassert solution(\"2 2 1\") == \"0 1\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3,3) == 2\nassert solution(3,4) == 1\nassert solution(3,2) == 1\nassert solution(0,0) == 0\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3, \"incorrect result\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\"\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\\\"103\\\") == 3\nassert solution(\\\"100\\\") == 2\nassert solution(\\\"101\\\") == 1\nassert solution(\\\"102\\\") == 0\nassert solution(\\\"103\\\") == 0\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"101\") == \"0\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\n\n\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"5.5\") == \"5\"\nassert solution(\"5.999999999999999999999\") == \"3\"\nassert solution(\"100.1\") == \"1\"\nassert solution(\"1.5\") == \"3\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '9'\nassert solution(stdin) == '12'\nassert solution(stdin) == '15'\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '9'\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(string=input()) == '9'\n-----Bonus-----\nWrite a program to calculate the solution of the problem of the following problems.\n- Find \\displaystyle{\\sum_{a=1}^{K}\\sum_{b=1}^{K}\\sum_{c=1}^{K} \\gcd(a,b,c)}.\nHere \\gcd(a,b,c) denotes the greatest common divisor of a, b, and c.\n\"\"\"\n\nK = int(input())\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '9'\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"9\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '9'"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"9\"\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"9\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"9\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == str(9)\n\n\"\"\"\n\nfrom sys import stdin\n\nt = int(stdin.readline().rstrip())\n\nfor _ in range(t):\n    N = int(stdin.readline().rstrip())\n    if N%2 == 0:\n        N -= 1\n    else:\n        N += 1\n\n    print(N)"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 4 6\") == \"10\"\nassert solution(\"3 4 6\") == \"10\"\nassert solution(\"3 4 5\") == \"10\"\nassert solution(\"3 4 6\") == \"10\"\nassert solution(\"3 4 2\") == \"10\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"11\") == 10\nassert solution(\"113\") == 10\nassert solution(\"114\") == 10\nassert solution(\"116\") == 10\nassert solution(\"117\") == 10\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(Input) == \"10\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9') == '5'\nassert solution('1 3 4 5 6 7 8 9') == '3'\nassert solution('1 4 5 6 7 8 9') == '4'\nassert solution('1 6 7 8 9') == '6'\nassert solution('1 3 4 9') == '5'\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == 10\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 2 5 4\") == \"10\"\nassert solution(\"9 3\") == \"9\"\nassert solution(\"0 3\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 2\") == \"5\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"10\"\n\nMy Answer:\n\nprint(max(f(i) for i in range(1, len(a)+1)))"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\nf(3) + f(4) + f(6) == 10) == \"10\"\nassert solution(\nf(3) + f(4) + f(6) == 10) == \"10\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"10\""
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(a) == 10\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'Yes'\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"No\"\nprint(\"Pass\" if solution(input) == \"Yes\" else \"Fail\")\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"5 4 1 3 3 3\") == \"Yes\""
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\"\n\nN=int(stdin.strip())\nD_i,D_j=map(int,stdin.strip().split())\nD_ij=D_i+D_j\nfor i in range(N):\n    D_i,D_j=map(int,stdin.strip().split())\n    if D_ij==D_i+D_j:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\"\"\"\n\n\nclass Solution:\n    def check_doublets(self, dice: List[int]) -> bool:\n        pass\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"Yes\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\"3\",\n    \"2\",\n    \"2\",\n    \"6\"]\n) == \"Yes\"\nassert solution(\n    [\"1\",\n    \"4\",\n    \"3\",\n    \"3\"]\n) == \"No\"\nassert solution(\n    [\"1\",\n    \"1\",\n    \"1\",\n    \"1\"]\n) == \"No\"\nassert solution(\n    [\"2\",\n    \"4\",\n    \"4\",\n    \"3\"]\n) == \"Yes\"\nassert solution(\n    [\"1\",\n    \"3\",\n    \"3\",\n    \"3\"]\n) == \"Yes\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(string) == 'Yes'\nassert solution(string) == 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"{1,2,3}\") == \"Yes\"\nassert solution(\"{6,6,6}\") == \"Yes\"\nassert solution(\"{1,4,5}\") == \"No\"\nassert solution(\"{1,3,2}\") == \"Yes\"\nassert solution(\"{6,6,6}\") == \"No\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == \"4\"\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '4'\n'''"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == \"15\"\nassert solution(3) == \"3\"\nassert solution(4) == \"5\"\nassert solution(5) == \"5\"\nassert solution(5) == \"5\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '5'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"8\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\"]) == \"1\"\nassert solution([\"0.5\"]) == \"1\"\nassert solution([\"1\", \"1.5\"]) == \"2\"\nassert solution([\"-1\"]) == \"1\"\nassert solution([\"1.5\", \"0.5\"]) == \"2\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"1\") == \"3\"\nassert solution(\"1000000000\") == \"3\"\nassert solution(\"10000000000000\") == \"2\"\nassert solution(\"100000000000000000\") == \"1\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == str(4)\n\"\"\"\n\nimport math"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '4'\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\"1\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", \"6\", \"7\", \"7\", \"8\", \"8\", \"9\", \"9\", \"10\", \"10\", \"11\", \"11\", \"12\", \"12\", \"13\", \"13\", \"14\", \"14\", \"15\", \"15\", \"16\", \"16\", \"17\", \"17\", \"18\", \"18\", \"19\", \"19\", \"20\", \"20\", \"21\", \"21\", \"22\", \"22\", \"23\", \"23\", \"24\", \"24\", \"25\", \"25\", \"26\", \"26\", \"27\", \"27\", \"28\", \"28\", \"29\", \"29\", \"30\", \"30\", \"31\", \"31\", \"32\", \"32\", \"33\", \"33\", \"34\", \"34\", \"35\", \"35\", \"36\", \"36\", \"37\", \"37\", \"38\", \"38\", \"39\", \"39\", \"40\", \"40\", \"41\", \"41\", \"42\", \"42\", \"43\", \"43\", \"44\", \"44\", \"45\", \"45\", \"46\", \"46\", \"47\", \"47\", \"48\", \"48\", \"49\", \"49\", \"50\", \"50\", \"51\", \"51\", \"52\", \"52\", \"53\", \"53\", \"54\", \"54\", \"55\", \"55\", \"56\", \"56\", \"57\", \"57\", \"58\", \"58\", \"59\", \"59\", \"60\", \"60\", \"61\", \"61\", \"62\", \"62\", \"63\", \"63\", \"64\", \"64\", \"65\", \"65\", \"66\", \"66\", \"67\", \"67\", \"68\", \"68\", \"69\", \"69\", \"70\", \"70\", \"71\", \"71\", \"72\", \"72\", \"73\", \"73\", \"74\", \"74\", \"75\", \"75\", \"76\", \"76\", \"77\", \"77\", \"78\", \"78\", \"79\", \"79\", \"80\", \"80\", \"81\", \"81\", \"82\", \"82\", \"83\", \"83\", \"84\", \"84\", \"85\", \"85\", \"86\", \"86\", \"87\", \"87\", \"88\", \"88\", \"89\", \"89\", \"90\", \"90\", \"91\", \"91\", \"92\", \"92\", \"93\", \"93\", \"94\", \"94\", \"95\", \"95\", \"96\", \"96\", \"97\", \"97\", \"98\", \"98\", \"99\", \"99\", \"100\", \"100\", \"101\", \"101\", \"102\", \"102\", \"103\", \"103\", \"104\", \"104\", \"105\", \"105\", \"106\", \"106\", \"107\", \"107\", \"108\", \"108\", \"109\", \"109\", \"110\", \"110\", \"111\", \"111\", \"112\", \"112\", \"113\", \"113\", \"114\", \"114\", \"115\", \"115\", \"116\", \"116\", \"117\", \"117\", \"118\", \"118\", \"119\", \"119\", \"120\", \"120\", \"121\", \"121\", \"122\", \"122\", \"123\", \"123\", \"124\", \"124\", \"125\", \"125\", \"126\", \"126\", \"127\", \"127\", \"128\", \"128\", \"129\", \"129\", \"130\", \"130\", \"131\", \"131\", \"132\", \"132\", \"133\", \"133\", \"134\", \"134\", \"135\", \"135\", \"136\", \"136\", \"137\", \"137\", \"138\", \"138\", \"139\", \"139\", \"140\", \"140\", \"141\", \"141\", \"142\", \"142\", \"143\", \"143\", \"144\", \"144\", \"145\", \"145\", \"146\", \"146\", \"147\", \"147\", \"148\", \"148\", \"149\", \"149\", \"150\", \"150\", \"151\", \"151\", \"152\", \"152\", \"153\", \"153\", \"154\", \"154\", \"155\", \"155\", \"156\", \"156\", \"157\", \"157\", \"158\", \"158\", \"159\", \"159\", \"160\", \"160\", \"161\", \"161\", \"162\", \"162\", \"163\", \"163\", \"164\", \"164\", \"165\", \"165\", \"166\", \"166\", \"167\", \"167\", \"168\", \"168\", \"169\", \"169\", \"170\", \"170\", \"171\", \"171\", \"172\", \"172\", \"173\", \"173\", \"174\", \"174\", \"175\", \"175\", \"176\", \"176\", \"177\", \"177\", \"178\", \"178\", \"179\", \"179\", \"180\", \"180\", \"181\", \"181\", \"182\", \"182\", \"183\", \"183\", \"184\", \"184\", \"185\", \"185\", \"186\", \"186\", \"187\", \"187\", \"188\", \"188\", \"189\", \"189\", \"190\", \"190\", \"191\", \"191\", \"192\", \"192\", \"193\", \"193\", \"194\", \"194\", \"195\", \"195\", \"196\", \"196\", \"197\", \"197\", \"198\", \"198\", \"199\", \"199\", \"200\", \"200\", \"201\", \"201\", \"202\", \"202\", \"203\", \"203\", \"204\", \"204\", \"205\", \"205\", \"206\", \"206\", \"207\", \"207\", \"208\", \"208\", \"209\", \"209\", \"210\", \"210\", \"211\", \"211\", \"212\", \"212\", \"213\", \"213\", \"214\", \"214\", \"215\", \"215\", \"216\", \"216\", \"217\", \"217\", \"218\", \"218\", \"219\", \"219\", \"220\", \"220\", \"221\", \"221\", \"222\", \"222\", \"223\", \"223\", \"224\", \"224\", \"225\", \"225\", \"226\", \"226\", \"227\", \"227\", \"228\", \"228\", \"229\", \"229\", \"230\", \"230\", \"231\", \"231\", \"232\", \"232\", \"233\", \"233\", \"234\", \"234\", \"235\", \"235\", \"236\", \"236\", \"237\", \"237\", \"238\", \"238\", \"239\", \"239\", \"240\", \"240\", \"241\", \"241\", \"242\", \"242\", \"243\", \"243\", \"244\", \"244\", \"245\", \"245\", \"246\", \"246\", \"247\", \"247\", \"248\", \"248\", \"249\", \"249\", \"250\", \"250\", \"251\", \"251\", \"252\", \"252\", \"253\", \"253\", \"254\", \"254\", \"255\", \"255\", \"256\", \"256\", \"257\", \"257\", \"258\", \"258\", \"259\", \"259\", \"260\", \"260\", \"261\", \"261\", \"262\", \"262\", \"263\", \"263\", \"264\", \"264\", \"265\", \"265\", \"266\", \"266\", \"267\", \"267\", \"268\", \"269\", \"269\", \"270\", \"271\", \"271\", \"272\", \"272\", \"273\", \"273\", \"274\", \"274\", \"275\", \"276\", \"276\", \"277\", \"277\", \"278\", \"278\", \"279\", \"279\", \"280\", \"281\", \"281\", \"282\", \"282\", \"283\", \"283\", \"284\", \"284\", \"285\", \"285\", \"286\", \"286\", \"287\", \"287\", \"288\", \"288\", \"289\", \"290\", \"290\", \"291\", \"291\", \"292\", \"293\", \"294\", \"294\", \"295\", \"295\", \"296\", \"296\", \"297\", \"297\", \"298\", \"298\", \"299\", \"299\", \"300\", \"300\", \"301\", \"301\", \"302\", \"302\", \"303\", \"303\", \"304\", \"304\", \"305\", \"305\", \"306\", \"306\", \"307\", \"307\", \"308\", \"308"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"Yes\"\n\"\"\"\nimport math"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"No\"\n\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"4 2 6 9\") == \"No\"\nassert solution(\n    \"5 7 10 4\") == \"No\"\nassert solution(\n    \"2 5 4 9\") == \"Yes\""
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"Yes\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 10\") == \"Yes\"\nassert solution(\"7 1 0 0\") == \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'Yes'"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 8 5 1\") == \"Yes\"\nassert solution(\"1\") == \"No\"\n\"\"\"\n\nN = int(input())\nL = input()\nL = L.split(' ')\nL = [int(i) for i in L]\nL.sort()\n\nmax_length = 0\nfor i in range(len(L)):\n    max_length = max(L[i], max_length)\n\nfor i in range(1, N+1):\n    if max_length < L[i-1] + L[i]:\n        print('No')\n        break\nelse:\n    print('Yes')"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"Yes\"\n\n-----Sample Input-----\n6\n5 6 4 5\n\n-----Sample Output-----\nNo\n\nSince 5 < 6 = 5 + 4 + 5 = 6 + 5 = 6 + 5 + 5 = 6 + 6 = 6 + 6 = 5 + 6 = 6 + 6 = 5 + 6 = 6\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"Yes\""
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"702\"\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(100000)\n\nclass Solution:\n    def solve(self, n, m, s):\n        \n        if s <= 0:\n            return -1\n        \n        res = 0\n        for i in range(n):\n            res = res + (s - m*i) * 10**(n-i-1)\n        \n        return str(res)\n    \n    def dfs(self,s,c):\n        if s == c:\n            return 1\n        \n        if s<c:\n            return 0\n        \n        return self.dfs(s,c-1) + self.dfs(s-c,c)\n            \n        \n    def count(self,n,m):\n        if n == 0 or m == 0:\n            return 1\n        \n        return self.dfs(n,m-1)\n            \n            \n            \n            \n            \n        \n        \n    def solve(self, n, m):\n        pass\n        \n        \n        \n        \n    def solve(self, n, m):\n        pass\n        "
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"wrong input format\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"5 4 3 1 7 3 2 4 4 7 8 3 8 3 3 9 9 2 9 5 9 5 9 7 8 7 5 9 9 7 8 7 7 9 9 7 4 8 3 5 9 7 9 7 3 9 9 9 2 4 9 7 9 3 9 3 7 9 3 5 9 2 7 9 5 9 9 7 7 9 7 9 3 4 7 9 9 9 9 8 6 4 3 5 9 9 9 7 9 3 5 9 9 2 7 9 5 9 9 7 9 7 9 7 9 9 5 9 9 5 9 9 3 9 3 7 9 9 3 9 7 9 9 3 9 7 9 9 7 3 9 9 9 7 9 9 2 7 9 9 4 7 9 9 3 9 4 7 9 9 3 7 9 5 9 9 9 7 9 7 9 7 9 5 9 9 9 7 9 9 3 9 9 9 9 2 7 9 3 9 3 9 9 3 4 7 9 9 3 9 3 9 3 3 9 9 9 4 5 9 9 9 7 9 9 4 9 9 4 9 9 9 7 9 9 9 3 5 9 9 9 3 9 3 9 9 3 9 3 9 9 9 4 9 9 9 9 4 9 3 9 9 3 9 3 9 9 4 9 9 3 9 3 9 9 3 9 9 4 9 9 3 9 3 9 9 3 9 9 3 9 9 9 9 5 9 9 7 9 9 5 9 7 9 9 9 9 9 9 9 9 9 9 5 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"702\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0, 0) == 1\nassert solution(1, 3) == 7\nassert solution(2, 4) == -1\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, 2) == 7\nassert solution(3, 1) == -1\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"702\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '702'\nassert solution(input) == '1'\nassert solution(input) == '1'\nassert solution(input) == '-1'\nassert solution(input) == '-1'\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"0\""
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, 5) == -1\nassert solution(3, 2) == 7\nassert solution(3, 1) == 7\nassert solution(5, 3) == -1\nassert solution(5, 1) == 7\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n\n\n###(1) \ud480\uc774\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"9\"\nassert solution(\"3 3\") == \"6\"\nassert solution(\"3 4\") == \"6\"\nassert solution(\"3 5\") == \"6\"\nassert solution(\"3 6\") == \"8\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"9\""
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"9\""
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"9\"\n'''\n\nimport sys"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9\") == \"9\"\nassert solution(\"10 1 9\") == \"9\"\nassert solution(\"16 9\") == \"9\"\nassert solution(\"4 9\") == \"9\"\nassert solution(\"-3 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10\") == \"3\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"9\"\nassert solution(\"1 5\") == \"5\"\nassert solution(\"2 10\") == \"5\"\nassert solution(\"3 10\") == \"3\"\nassert solution(\"3 10\") == \"3\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"9\"\nassert solution(input()) == \"9\"\nassert solution(input()) == \"9\"\nassert solution(input()) == \"9\"\nassert solution(input()) == \"9\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 9, \"Correct\"\nassert solution(input()) == 0, \"Incorrect\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(s) == \"1011\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('11201') == -2\n\"\"\"\n\nclass Solution:\n    def base_to_string(self, n):\n        return chr(n + ord('0'))\n\n    def solution(self, n: str) -> str:\n        res = ''\n        for i in range(len(n)):\n            if not n[i]:\n                break\n            if n[i:i + 2] in '101':\n                res += self.base_to_string(ord(n[i]) - ord('0'))\n            else:\n                res += self.base_to_string(ord(n[i]) - ord('0') - 2)\n        return res\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()), \"Empty\"\nassert solution(input().strip().lower()), \"Digit\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1112') == 1112\nassert solution('7') == 7\nassert solution('0') == 0\nassert solution('22') == 0\nassert solution('111') == 0\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '-2'\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('0') == 0\nassert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 0\nassert solution('4') == 0\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '1011'\nassert solution(input(\"Test cases: \")) == '1011'\nassert solution(input(\"Test cases: \")) == '1011'\nassert solution(input(\"Test cases: \")) == '1011'\nassert solution(input(\"Test cases: \")) == '1011'\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"1011\"\n\n\"\"\"\n\nclass Solution:\n    def convert(self, num: int, base: int) -> str:\n        def helper(num: int, base: int) -> str:\n            if num == 0:\n                return \"0\"\n            if base == 0:\n                return str(num)\n            res = \"\"\n            while num:\n                digit = num % base\n                num //= base\n                res += str(digit)\n            return res\n        \n        return helper(num, base)\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"01\"\n\n\n'''\nclass Solution:\n    def base_str_to_int(self, s: str) -> int:\n        str_list = [int(i) for i in s]\n        return str_list[0]\n\n'''\nclass Solution:\n    def base_str_to_int(self, s: str) -> int:\n        str_list = [int(i) for i in s]\n        res = str_list[0]\n        for idx in range(1, len(str_list)):\n            res *= 10\n            res += str_list[idx]\n        return res\n\n    def solution(self, N: int) -> int:\n        return self.base_str_to_int(str(N))\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('abc') == '-2'\nassert solution('12345') == '-2'\nassert solution('182871') == '-2'\nassert solution('23456789') == '-2'\nassert solution('9') == '9'\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2 5\", \"4 9\"]) == \"12\"\nassert solution([\"4 9\", \"5\"]) == \"12\"\nassert solution([\"4 9\", \"5\", \"5\"]) == \"12\"\nassert solution([\"4 9\", \"4 9\"]) == \"12\"\nassert solution([\"4 9\", \"5\", \"5\", \"5\"]) == \"12\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2,5) == 12\nassert solution(4,9) == 12\nassert solution(2,4) == 12\nassert solution(3,6) == 10\nassert solution(4,10) == 9\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"12\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()), \"Invalid Input\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"N M A B B\") == \"12\"\nassert solution(\"A_1 B_1 A_2 B_2 A_3 B_3 A_4 B_4 A_5 B_5\") == \"21\"\nassert solution(\"B_1 B_2 B_3 B_4 B_5\") == \"26\"\nassert solution(\"A_1 B_2 B_3 B_4 B_5\") == \"13\"\nassert solution(\"A_2 B_2 A_3 B_4 A_5 B_5\") == \"28\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 12"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('10') == '10'\nassert solution('10') == '10'\nassert solution('1000') == '1000'\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1,1,1,1) == 2\nassert solution(3,2,2,3) == 4\nassert solution(3,3,2,3) == 6\nassert solution(2,1,1,5) == 11\nassert solution(2,2,2,5) == 14\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 12\n'''"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 7 8 6 3') == '2'\nassert solution('5 6 9 3') == '1'\nassert solution('4 6 7 3') == '2'\nassert solution('4 6 8 7') == '2'\nassert solution('5 4 6 9 3') == '3'\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '2'\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == '2'\n\n\n=====Part 2 Solutions==========="
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"5 4 8 7 3\") == 2\nassert solution(\n    \"10 4 8 7 3\") == 2\nassert solution(\n    \"10 4 8 7 3\") == 2\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"5\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 3 4 5 6 7 8 9 10\") == \"9\"\nassert solution(\"2 2 3 2 4\") == \"4\"\nassert solution(\"5 5 2 2 2\") == \"5\"\nassert solution(\"5 5 5 5 5\") == \"5\"\nassert solution(\"1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 5\nassert solution(input()) == 2\nassert solution(input()) == 4\nassert solution(input()) == 7\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 10 4 8 7 3\") == 2, \"5 10 4 8 7 3\"\nassert solution(\"5 8 2 3\") == 3, \"5 8 2 3\"\nassert solution(\"5 8 7 3\") == 2, \"5 8 7 3\""
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == solution(stdin)\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 0\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1 2 3 4 5\", \"1 2 3 3 4\", \"1 2 3 3 3\", \"1 2 3 3 3\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\", \"1\"]) == \"2\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"2\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"2\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin\n    ) == \"3\"\n\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4 5 4 5\") == \"0\"\nassert solution(\"3 5 4 5 4 5\") == \"1\"\nassert solution(\"3 4 5 4 2 4 5\") == \"2\"\nassert solution(\"3 2 3 3 3 3 3 3 3 3 3 3\") == \"3\"\nassert solution(\"3 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin=\n    input\n    ) == 3\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2 3 4 5\"\n) == 1\nassert solution(\n    \"1 2 3 4 5\"\n) == 2\nassert solution(\n    \"1 2 3 4 5\"\n) == 0\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2\", \"3\", \"2\", \"1\", \"2\", \"2\"]) == \"1\"\nassert solution([\"1\", \"1\", \"2\", \"1\", \"2\", \"3\"]) == \"3\"\nassert solution([\"2\", \"1\", \"3\", \"3\"]) == \"2\"\nassert solution([\"2\", \"1\", \"2\", \"3\", \"1\", \"2\"]) == \"3\"\nassert solution([\"1\", \"1\", \"2\", \"3\", \"1\", \"2\"]) == \"1\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == 4\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 3"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"6 5\",\n    \"1 2 2 4 2 3\",\n    \"1 1 1 1 1 1 3\",\n    ), \"4\"\nInput\n6 5\n1 2 2 4 2 3\n\nOutput\n3\nInput\n7 5\n3 3 2 1 1 1 3\nOutput\n4"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 0\nassert solution(1) == 1\nassert solution(4) == 3\nassert solution(2) == 0\nassert solution(2) == 1\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1 2 2 4 2 3\",\"3 4 6 6 6 6\",\"3 6 6 6 6 6\",\"1 1 1 1 1 1\",\"3 3 3 3 3 3\",\"1 2 2 2 2 2\"]) == \"3\"\nassert solution([\"1 2 2 4 2 3\",\"3 4 6 6 6 6\",\"3 6 6 6 6 6\",\"1 1 1 1 1 1\",\"3 3 3 3 3 3\",\"1 2 2 2 2 2\"]) == \"4\"\nassert solution([\"1 2 2 4 2 3\",\"3 4 6 6 6 6\",\"3 6 6 6 6 6\",\"1 1 1 1 1 1\",\"3 3 3 3 3 3\",\"1 2 2 2 2 2\"]) == \"1\"\nassert solution([\"1 2 2 4 2 3\",\"3 4 6 6 6 6\",\"3 6 6 6 6 6\",\"1 1 1 1 1 1\",\"3 3 3 3 3 3\",\"1 2 2 2 2 2\"]) == \"1\"\nassert solution([\"1 2 2 4 2 3\",\"3 4 6 6 6 6\",\"3 6 6 6 6 6\",\"1 1 1 1 1 1\",\"3 3 3 3 3 3\",\"1 2 2 2 2 2\"]) == \"2\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 4\n'''"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5, [1,2,3,4,5]) == 3\nassert solution(4, [1,2,3,4,5]) == 3\nassert solution(5, [3,2,1,1,3]) == 4\nassert solution(5, [3,2,1,1,3]) == 4\nassert solution(5, [3,2,1,1,3]) == 3\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1\",\"1\",\"1\",\"1\"]) == \"1\"\nassert solution([\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\""
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 7 5 200 10\") == \"10\"\nassert solution(\"4 8 10\") == \"4\"\nassert solution(\"1 2 4\") == \"3\"\nassert solution(\"1 3 8\") == \"4\"\nassert solution(\"2 4 5\") == \"3\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 10\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"42 844\"\nassert solution(stdin) == \"1000\"\nassert solution(stdin) == \"1000\"\nassert solution(stdin) == \"1000\"\nassert solution(stdin) == \"1000\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution == 1000\n'''"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2000000000\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"10\"\n\nclass TestSolution(unittest.TestCase):\n    def test_0(self):\n        self.assertEqual(solution(\"4\"), \"10\")\n        self.assertEqual(solution(\"10 1 3\"), \"7\")\n        self.assertEqual(solution(\"7 3 2\"), \"1 1000 1\")\n        self.assertEqual(solution(\"1000000000000 42 88\"), \"1000000000000\")\n    def test_1(self):\n        self."
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 3 1 1000 1\") == \"1000\"\nassert solution(\"1 3 1 1000 2\") == \"2000\"\nassert solution(\"1 2 5 6\") == \"200\"\nassert solution(\"1 5 6\") == \"200\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 1 1') == '1000'\nassert solution('1 5 1') == '1000'\nassert solution('1 1 3') == '1000'\nassert solution('3 5 1') == '1000'\nassert solution('2 4 1') == '1000'\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n'''\n\nimport numpy as np"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"X\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '2'\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"123\") == \"3\"\nassert solution(\"456\") == \"1\"\nassert solution(\"10\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\",\"3\",\"5\",\"7\"]) == \"2\"\nassert solution([\"2\",\"4\",\"6\",\"10\"]) == \"2\"\nassert solution([\"2\",\"3\",\"7\"]) == \"0\"\nassert solution([\"2\",\"4\",\"6\"]) == \"2\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(123) == 6\n\nassert solution(12345678) == 2\n\nassert solution(123456) == 1\n\nassert solution(1234567890) == 0\n\n----- Sample Input -----\n3 4\n10 10 10 10\n\n----- Sample Output -----\n\nThe ball will make a bounce at the coordinates 0, 10, 20, and 30, among which two are less than or equal to 10.\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(string) == \"3\"\n\"\"\"\nimport math"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(INPUT) == ''\nassert solution(\"5 5\") == '2'\nassert solution(\"4 4 5\") == '1'\nassert solution(\"6 6\") == '2'\nassert solution(\"10 10\") == '3'\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '2'\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3 5 8 12\") == \"6\"\nassert solution(\"2 4 5 9\") == \"6\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"1 2 3 4 5 6\") == \"5\"\nassert solution
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    'hoge') == 'No'\nassert solution('hoge') == 'No'\nassert solution('hgg') == 'Yes'\nassert solution('hgg') == 'Yes'\nassert solution('enigma') == 'Yes'\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(solution) == \"Yes\"\nassert solution(solution) == \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge hoge ho"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"hoge\"\n) == \"No\"\nassert solution(\n    \"english\"\n) == \"Yes\"\nassert solution(\n    \"hoge\"\n) == \"No\"\nassert solution(\n    \"enigma\"\n) == \"Yes\"\nassert solution(\n    \"hoge\"\n) == \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n        \"hoge\"\n        ), '\"hoge\" is not a valid word.'\nassert solution(\n        \"e1\"\n        ), '\"e1\" is not a valid word.'\nassert solution(\n        \"ha1\"\n        ), '\"ha1\" is not a valid word.'\nassert solution(\n        \"e1e2\"\n        ), '\"e1e2\" is not a valid word.'\nassert solution(\n        \"ha1e3\"\n        ), '\"ha1e3\" is not a valid word.'\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('') == 'No'\nassert solution('hoge') == 'Yes'\nassert solution('hghe') == 'No'\nassert solution('ehg') == 'No'\nassert solution('hg') == 'No'\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"5 6 5 6 5\"\n) == \"3\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 6"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"6\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 2\") == \"1\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"1000 5\") == \"1\"\nassert solution(\"1000 10\") == \"1\"\nassert solution(\"1000 20\") == \"2\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"6\"\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2 3) == 6\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"6\"\n'''"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    input:\n    A B\n    ) == 6\nassert solution(\n    input:\n    A B\n    ) == 6\nassert solution(\n    input:\n    A B\n    ) == 6\nassert solution(\n    input:\n    A B\n    ) == 6\nassert solution(\n    input:\n    A B\n    ) == 6\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 1\") == \"1 1\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"hello\") == \"lll\"\nassert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"abc\") == \"bc\"\nassert solution(\"aaabbbbbcccdddde\") == \"ddeeeefl\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\\\"sardine\\\") == \\\"sardinex\\\"\nassert solution(\\\"alice\\\") == \\\"alicex\\\"\nassert solution(\\\"dog\\\") == \\\"dox\\\"\nassert solution(\\\"lion\\\") == \\\"lop\\\"\nassert solution(\\\"rat\\\") == \\\"rolx\\\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"sararr\") == \"ararr\"\nassert solution(\"aardt\") == \"adt\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"abcde\") == \"cde\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"marsupial\") == \"marxial\"\nassert solution(\"codewars\") == \"xcodewars\"\nassert solution(\"coder\") == \"xcodewars\"\nassert solution(\"dodecrypt\") == \"dodecrypt\"\nassert solution(\"stupid\") == \"spitz\""
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"sardine\") == \"xxxxxx\"\nassert solution(\"sardine\") == \"xxxxx\"\nassert solution(\"sardine\") == \"x\"\n\n\"\"\"\n\nclass Solution:\n    def replace(self, s, old, new):\n        s = list(s)\n        \n        for c in s:\n            if s.count(c) == 1:\n                s[s.index(c)] = new\n            else:\n                s[s.index(c)] = old\n        \n        return ''.join(s)\n        \n    def solution(self, stdin: str) -> str:\n        s = list(stdin)\n        \n        for i in range(len(s)):\n            if s[i] == 'x':\n                s[i] = 'x'\n                \n            elif s[i] == 'y':\n                s[i] = 'y'\n                \n        return self.replace(*s)\n        \n    def replace(self, s, old, new):\n        return s.replace(old, new)"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == \"x\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('Sardine') == 'xxxX'\nassert solution('SarDine') == 'xxxX'\nassert solution('sArDine') == 'xX'\nassert solution('ArS') == 'xX'\nassert solution('ArD') == 'xX'\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n\n-------------------------------\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"xxxxxxx\"\nprint(solution(input()))\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\nassert solution(input()) == 'No'\nassert solution(input()) == 'Yes'\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"7\") == \"No\"\nassert solution(\"9\") == \"Yes\"\nassert solution(\"10\") == \"No\"\n\nassert solution(\"7\") == \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 'Yes', '3'\nassert solution(2) == 'Yes', '3'\nassert solution(3) == 'No', '3'\n\nassert solution(4) == 'No', '4'\nassert solution(5) == 'No', '5'"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"Yes\"\nassert solution(1) == \"No\"\nassert solution(4) == \"No\"\nassert solution(3) == \"Yes\"\nassert solution(4) == \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(test_input) == 'Yes'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, 2, 1, 3) == \"Yes\"\nassert solution(2, 2, 2, 2) == \"Yes\"\nassert solution(3, 1, 2, 3) == \"No\"\nassert solution(3, 1, 3, 3) == \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, 2, 1, 3, 4) == \"Yes\"\nassert solution(5, 2, 1, 3, 4) == \"No\"\nassert solution(5, 2, 1, 3, 4) == \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"Yes\"\nassert solution(inp) == \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\"]) == \"Yes\"\nassert solution([\"1\"]) == \"No\"\nassert solution([\"5\"]) == \"No\"\nassert solution([\"3\"]) == \"Yes\"\nassert solution([\"5\"]) == \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 3 4 5 6 7 8 9') == '6'"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(Input) == '1'\nassert solution(Input) == '1'\nassert solution(Input) == '1'\nassert solution(Input) == '1'\nassert solution(Input) == '1'\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input().replace(\" \", \"\")) == \"2\"\nassert solution(input().replace(\" \", \"\")) == \"2\"\nassert solution(input().replace(\" \", \"\")) == \"1\"\nassert solution(input().replace(\" \", \"\")) == \"1\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 3 4 5 6\") == \"4\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"2\"\nassert solution(\"2 3 1 -10\") == \"0\"\nassert solution(\"2 3 1 -10\") == \"1\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1 1\") == \"1 1 1 1 1\"\nassert solution(\"3 2 3 3 1\") == \"3 3 3 3 3\"\nassert solution
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 1\n\n--------Constraints:--------\n0 \\leq N \\leq 100\n-100 \\leq A_{ij} \\leq 100\n-100 \\leq B_i \\leq 100\n-100 \\leq C \\leq 100\n\n--------Input Format:\nThe first line contains the space separated values of N and M.\nThe next N lines contains M space separated integers.\nThe last line contains A_{11} A_{12}... A_{1M} A_{N1}\n\nThe second line contains A_{21} A_{22}... A_{2M} A_{NM}\n\nThe third line contains the values of B_1 B_2... B_M\n\nThe fourth line contains the values of C.\n\nOutput Format:\nPrint a single integer, the number of codes for the problem.\n\nSample Input:\n2 3 -10\n1 2 3\n3 2 1\n1 2 2\n\nSample Output:\n1\n\"\"\"\nN, M = map(int, input().split())\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 3 -10') == 1\nassert solution('1 2 3') == 1\nassert solution('1 2 2') == 1\nassert solution('1 2 2') == 2\nassert solution('1 2 2') == 3\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(100) == 100\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n1\n\n-----Sample Explanation-----\nOur solution means that we can buy 4 yen (the currency of Japan) at a shop and\nsale 1 yen.\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 100\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(n) == 100\n\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 100\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 100, \"Solution must return '100'\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 100\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 100\n\nprint(\"Test passed\")\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(solution(input())) == 100\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(string) == 100\n\nassert solution(string) == 100\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 100\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('', '', 1, '', 0) == 3\n\nInput:\nN = int(stdin.readline())\nA_1 = int(stdin.readline())\nB_1 = int(stdin.readline())\nA_2 = A_1 + B_1\nA_3 = A_1 - B_1\nA_4 = A_1 * B_1\nA_5 = A_1 / B_1\nA_6 = A_1 ** B_1\nA_7 = A_1 // B_1\nA_8 = A_1 % B_1\nA_9 = A_1 // B_1\nA_10 = A_1 % B_1\nA_11 = A_1 ** B_1\nA_12 = A_1 / B_1\nA_13 = A_1 % B_1\nA_14 = A_1 ** B_1\nA_15 = A_1 // B_1\nA_16 = A_1 % B_1\nA_17 = A_1 ** B_1\nA_18 = A_1 // B_1\nA_19 = A_1 % B_1\nA_20 = A_1 ** B_1\nA_21 = A_1 // B_1\nA_22 = A_1 % B_1\nA_23 = A_1 ** B_1\nA_24 = A_1 // B_1\nA_25 = A_1 % B_1\nA_26 = A_1 ** B_1\nA_27 = A_1 // B_1\nA_28 = A_1 % B_1\nA_29 = A_1 ** B_1\nA_30 = A_1 // B_1\nA_31 = A_1 % B_1\nA_32 = A_1 ** B_1\nA_33 = A_1 // B_1\nA_34 = A_1 % B_1\nA_35 = A_1 ** B_1\nA_36 = A_1 // B_1\nA_37 = A_1 % B_1\nA_38 = A_1 ** B_1\nA_39 = A_1 // B_1\nA_40 = A_1 % B_1\nA_41 = A_1 ** B_1\nA_42 = A_1 // B_1\nA_43 = A_1 % B_1\nA_44 = A_1 ** B_1\nA_45 = A_1 // B_1\nA_46 = A_1 % B_1\nA_47 = A_1 ** B_1\nA_48 = A_1 // B_1\nA_49 = A_1 % B_1\nA_50 = A_1 ** B_1\nA_51 = A_1 // B_1\nA_52 = A_1 % B_1\nA_53 = A_1 ** B_1\nA_54 = A_1 // B_1\nA_55 = A_1 % B_1\nA_56 = A_1 ** B_1\nA_57 = A_1 // B_1\nA_58 = A_1 % B_1\nA_59 = A_1 ** B_1\nA_60 = A_1 // B_1\nA_61 = A_1 % B_1\nA_62 = A_1 ** B_1\nA_63 = A_1 // B_1\nA_64 = A_1 % B_1\nA_65 = A_1 ** B_1\nA_66 = A_1 // B_1\nA_67 = A_1 % B_1\nA_68 = A_1 ** B_1\nA_69 = A_1 // B_1\nA_70 = A_1 % B_1\nA_71 = A_1 ** B_1\nA_72 = A_1 // B_1\nA_73 = A_1 % B_1\nA_74 = A_1 ** B_1\nA_75 = A_1 // B_1\nA_76 = A_1 % B_1\nA_77 = A_1 ** B_1\nA_78 = A_1 // B_1\nA_79 = A_1 % B_1\nA_80 = A_1 ** B_1\nA_81 = A_1 // B_1\nA_82 = A_1 % B_1\nA_83 = A_1 ** B_1\nA_84 = A_1 // B_1\nA_85 = A_1 % B_1\nA_86 = A_1 ** B_1\nA_87 = A_1 // B_1\nA_88 = A_1 % B_1\nA_89 = A_1 ** B_1\nA_90 = A_1 // B_1\nA_91 = A_1 % B_1\nA_92 = A_1 ** B_1\nA_93 = A_1 // B_1\nA_94 = A_1 % B_1\nA_95 = A_1 ** B_1\nA_96 = A_1 // B_1\nA_97 = A_1 % B_1\nA_98 = A_1 ** B_1\nA_99 = A_1 // B_1\nA_100 = A_1 % B_1\nA_101 = A_1 ** B_1\nA_102 = A_1 // B_1\nA_103 = A_1 % B_1\nA_104 = A_1 ** B_1\nA_105 = A_1 // B_1\nA_106 = A_1 % B_1\nA_107 = A_1 ** B_1\nA_108 = A_1 // B_1\nA_109 = A_1 % B_1\nA_110 = A_1 ** B_1\nA_111 = A_1 // B_1\nA_112 = A_1 % B_1\nA_113 = A_1 ** B_1\nA_114 = A_1 // B_1\nA_115 = A_1 % B_1\nA_116 = A_1 ** B_1\nA_117 = A_1 // B_1\nA_118 = A_1 % B_1\nA_119 = A_1 ** B_1\nA_120 = A_1 // B_1\nA_121 = A_1 % B_1\nA_122 = A_1 ** B_1\nA_123 = A_1 // B_1\nA_124 = A_1 % B_1\nA_125 = A_1 ** B_1\nA_126 = A_1 // B_1\nA_127 = A_1 % B_1\nA_128 = A_1 ** B_1\nA_129 = A_1 // B_1\nA_130 = A_1 % B_1\nA_131 = A_1 ** B_1\nA_132 = A_1 // B_1\nA_133 = A_1 % B_1\nA_134 = A_1 ** B_1\nA_135 = A_1 // B_1\nA_136 = A_1 % B_1\nA_137 = A_1 ** B_1\nA_138 = A_1 // B_1\nA_139 = A_1 % B_1\nA_140 = A_1 ** B_1\nA_141 = A_1"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    [\n    [\"2\", \"3\", \"5\"],\n    [\"4\", \"5\"],\n    [\"6\", \"7\"],\n    [\"8\", \"9\", \"10\", \"11\"],\n    [\"12\", \"13\"],\n    [\"14\", \"15\"],\n    [\"16\", \"17\", \"18\", \"19\", \"20\"],\n    [\"21\", \"22\", \"23\", \"24\", \"25\"]\n    ]\n    ) == \"9\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '9'\n\"\"\"\nN, A, B, B_1, B_2 = map(int, stdin.split())"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 9,'solution() should return 9'\n'''"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 18\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq A_i \\leq 10^9\n - 1 \\leq B_i \\leq 10^9\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '9'\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 9\n\n\n-----Sample Input-----\n2\n3 5 2\n4 5\n\n-----Sample Output-----\n2\n\nIf the heroes choose the monsters to defeat as follows, they can defeat two monsters in total, which is the maximum result.\n - The first hero defeats two monsters attacking the first town and two monsters attacking the second town.\n - The second hero defeats three monsters attacking the second town and two monsters attacking the third town.\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5\", \"2\", \"5\", \"5\", \"5\"]) == \"15\"\nassert solution([\"5\", \"4\", \"3\", \"3\", \"3\", \"5\"]) == \"14\"\nassert solution([\"5\", \"1\", \"2\", \"1\", \"3\", \"1\"]) == \"2\"\nassert solution([\"5\", \"3\", \"1\", \"1\", \"3\", \"1\"]) == \"1\"\nassert solution([\"1\", \"1\", \"3\", \"2\", \"1\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('4 5') == 9\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 5 2\") == 9\nassert solution(\"2 4\") == 2\nassert solution(\"2 3\") == 1\nassert solution(\"1 2\") == 1\nassert solution(\"1 3\") == 1\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"No War\"\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"War\"\nassert solution(stdin) == \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"War\"\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('8 16 22') == 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 2 10 20\"\n    \"8 15 13\"\n    \"16 22\"\n    ) == \"No War\"\nassert solution(\n    \"2 5 10 20\"\n    \"1 1 1\"\n    \"4 3 2\"\n    \"6 6 6\"\n    ) == \"War\"\nassert solution(\n    \"1 1 1\"\n    \"1 1 1\"\n    \"2 2 2\"\n    \"3 3 3\"\n    ) == \"No War\"\nassert solution(\n    \"3 5 10 20\"\n    \"1 1 1\"\n    \"2 2 2\"\n    \"3 3 3\"\n    \"4 4 4\"\n    ) == \"War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 10 20\") == \"No War\"\nassert solution(\"8 15 13\") == \"War\"\nassert solution(\"16 22\") == \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"1 8 10 20\\n2 10 13\\n3 15 22\\n4 15 13\") == \"No War\"\nassert solution(\n    \"1 8 10 20\\n2 10 13\\n3 15 22\\n4 15 13\") == \"No War\"\nassert solution(\n    \"1 8 10 20\\n2 10 13\\n3 15 22\\n4 15 13\") == \"War\"\nassert solution(\n    \"1 8 10 20\\n2 10 13\\n3 15 22\\n4 15 13\") == \"War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"War\"\nassert solution(input) == \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 2 10 20\") == \"War\"\nassert solution(\n    \"8 15 13\") == \"No War\"\nassert solution(\n    \"16 22\") == \"No War\"\nassert solution(\n    \"1 2 1\") == \"No War\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 6\nassert solution(3) == 6\nassert solution(4) == 12\nassert solution(5) == 18\nassert solution(6) == 27\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == \"5\"\nassert solution(\"5 5\") == \"4\"\nassert solution(\"5 6\") == \"4\"\nassert solution(\"5 7\") == \"3\"\nassert solution(\"5 8\") == \"3\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '6'\nprint('solution test passed!')\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"6\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"2 1\") == \"6\"\nassert solution(\n    \"2 2\") == \"5\"\nassert solution(\n    \"2 3\") == \"5\"\nassert solution(\n    \"2 4\") == \"4\"\nassert solution(\n    \"2 5\") == \"4\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '6'\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '6'\nprint(solution(input))\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 0\n\n-----Sample Input-----\n3\n1 2 3\n\n-----Sample Output-----\n1\n\n\"\"\"\n\nimport unittest\n\n\nclass Solution(object):\n    def solution(self, T, weights):\n        \"\"\"\n        :type T: int\n        :type weights: List[int]\n        :rtype: int\n        \"\"\"\n        if T == 0 or not weights:\n            return 0\n\n        if len(weights) == 1:\n            return max(0, weights[0] - T)\n\n        last_index = 0\n        maximum = 0\n        for index, weight in enumerate(weights):\n            if index > T:\n                continue\n            # if last_index + weight > T:\n            #     return 0\n            last_index = max(last_index, weight)\n            maximum = max(maximum, weight - last_index)\n\n        return maximum\n\n\nclass TestSolution(unittest.TestCase):\n    def test_0(self):\n        weights = [1, 2, 3]\n        T = 2\n        ret = Solution().solution(T, weights)\n        self.assertEqual(ret, 0)\n\n    def test_1(self):\n        weights = [1, 1, 2]\n        T = 3\n        ret = Solution().solution(T, weights)\n        self.assertEqual(ret, 0)\n\n    def test_2(self):\n        weights = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        T = 4\n        ret = Solution().solution(T, weights)\n        self.assertEqual(ret, 0)\n\n    def test_3(self):\n        weights = [1, 1, 1, 1]\n        T = 2\n        ret = Solution().solution(T, weights)\n        self.assertEqual(ret, 0)\n\n    def test_4(self):\n        weights = [1, 3, 4]\n        T = 3\n        ret = Solution().solution(T, weights)\n        self."
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"3\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"5 1 10\"\n) == \"1\"\nassert solution(\n    \"5 1 10 11\"\n) == \"5\"\nassert solution(\n    \"5 1 10 11 12\"\n) == \"10\"\nassert solution(\n    \"5 1 10 12 13\"\n) == \"0\"\nassert solution(\n    \"5 1 10 12 14\"\n) == \"4\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3 4 5 6\") == \"2\"\nassert solution(\"1 2 3 4 5 6\") == \"0\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '0'"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\") == 0\nassert solution(\"6 2 3\") == 1\nassert solution(\"1 2 3\") == 3\nassert solution(\"3 4 1\") == 0\nassert solution(\"1 4 1\") == 0\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n\"\"\"\n\nclass Solution:\n    def solution(self, S):\n        num = {}\n        for i in range(len(S)):\n            if S[i] not in num:\n                num[S[i]] = 1\n            else:\n                num[S[i]] += 1\n        return max(num.values()) - min(num.values())"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2 3\"\n    ) == \"0\"\nassert solution(\n    \"4 4 3\"\n    ) == \"0\"\nassert solution(\n    \"5 6 2\"\n    ) == \"5\"\nassert solution(\n    \"10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Sample Input-----\n4\n2 1 2 1 1 1 2\n\n-----Sample Output-----\n5\n\nIf T = 4, S_1 = 2 + 2 + 2 + 2 = 5 and S_2 = 2, with the absolute difference of 5.\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"0\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"4 5\") == \"2\"\nassert solution(\"4 6\") == \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 3) == \"6\"\nassert solution(4, 3) == \"0\"\nassert solution(3, 4) == \"2\"\nassert solution(4, 4) == \"0\""
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3 3') == '6'\nassert solution('4 3') == '2'\nassert solution('5 6') == '3'\nassert solution('7 8 9') == '2'\nassert solution('10 11 12') == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0\n\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5,3) == 1\nassert solution(4,3) == 1\nassert solution(3,4) == 2\nassert solution(5,3) == 2\nassert solution(3,3) == 1\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input().replace('.','')) == \"2\"\nassert solution(input().replace(',','')) == \"3\"\nassert solution(input().replace('.','0')) == \"4\"\nassert solution(input().replace('.','0',1)) == \"5\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3,3) == 6\nassert solution(4,4) == 0\nassert solution(3,5) == 1\nassert solution(3,6) == 1\nassert solution(3,7) == 1\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 3') == '0'\nassert solution('4 3') == '0'\nassert solution('5 3') == '6'\nassert solution('7 8 9') == '2'\nassert solution('10 11 12') == '2'\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"6\") == 5\nassert solution(\"2\") == 5\nassert solution(\"5\") == 3\nassert solution(\"1\") == 1\nassert solution(\"3\") == 2\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '5'"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '5'\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('0') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\nassert solution('7') == '2'\nassert solution('8') == '1'\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('1 1 2') == '2'\nassert solution('1 1 2 3') == '3'\nassert solution('1 1 5') == '5'\nassert solution('1 2 1') == '1'\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4, [5, 10, 2, 3]) == \"1\"\nassert solution(7, [5, 10, 2, 3]) == \"5\"\nassert solution(12, [5, 10, 2, 3]) == \"5\"\nassert solution(6, [5, 10, 2, 3]) == \"2\"\nassert solution(9, [5, 10, 2, 3]) == \"2\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3, 5, 2, 1, 99\") == \"5\"\nassert solution(\"2, 1, 99\") == \"2\"\nassert solution(\"3, 1, 99\") == \"2\"\nassert solution(\"3, 99, 4\") == \"2\"\nassert solution(\"3, 99, 4\") == \"3\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"6 10 2 3 14 5\"\n) == \"5\"\nassert solution(\n    \"2 1 100\"\n) == \"99\"\n\n\n-----Constraints-----\n1 <= n <= 100\n\n1 <= a_i <= 100\n\n------Time complexity-----\nApproximate: O(n)\n\n\n------Space Complexity-----\nApproximate: O(n)\n'''\n\nimport sys\ninput = sys.stdin.readline\n\nn = int(input().strip())\n\na_1 = int(input().strip())\na_2 = int(input().strip())\n\na = []\n\nfor i in range(n):\n    a.append([int(j) for j in input().strip().split()])"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 0 1 0 1') == '2'\nassert solution('0 0 0 0 0') == '2'\nassert solution('1 1 1 1 1') == '2'\nassert solution('1 0 1 1 1') == '2'\nassert solution('0 0 0 0 0 1') == '3'\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5' '1 0 1 0 1') == '2'\nassert solution('6' '0 1 0 1 1') == '2'\nassert solution('7') == '3'\nassert solution('3') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0\") == \"2\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5\\n5\") == \"2\"\nassert solution(\"6\\n1\\n0 0 1 1 1\") == \"0\"\nassert solution(\"7\\n0 0 1 1 1 0 1\") == \"0\"\nassert solution(\"3\\n1 0 1 1 1 0 1\") == \"0\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n\n\n-----Example 1-----\n\nInput\n5\n1 0 1 0 1\n\nOutput\n2\n\nInput\n6\n1 0 1 0 1 0\n\nOutput\n2\n\nInput\n7\n1 0 1 1 1 1 1\n\nOutput\n0\n\nInput\n3\n1 0 1 1 1 1 1\n\nOutput\n0\n\nInput\n3\n0 0 0 1 0 1 1\n\nOutput\n1\n\n\n-----Example 2-----\n\nInput\n6\n0 0 1 1 1 1 1 0\n\nOutput\n3\n\nInput\n2\n0 0 0 0 1 0 0 0\n\nOutput\n1\n\nInput\n0\n0 0 0 1 1 1 0 0\n\nOutput\n2\n\n\n-----Note-----\n\nPolycarp starts at $0$ and falls to $1$.\n\nPolycarp will work every hour, but with every other hour of the day.\n\nPolycarp is working in the $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92, $93, $94, $95, $96, $97, $98, $99, $100, $101, $102, $103, $104, $105, $106, $107, $108, $109, $110, $111, $112, $113, $114, $115, $116, $117, $118, $119, $120, $121, $122, $123, $124, $125, $126, $127, $128, $129, $130, $131, $132, $133, $134, $135, $136, $137, $138, $139, $140, $141, $142, $143, $144, $145, $146, $147, $148, $149, $150, $151, $152, $153, $154, $155, $156, $157, $158, $159, $160, $161, $162, $163, $164, $165, $166, $167, $168, $169, $170, $171, $172, $173, $174, $175, $176, $177, $178, $179, $180, $181, $182, $183, $184, $185, $186, $187, $188, $189, $190, $191, $192, $193, $194, $195, $196, $197, $198, $199, $200, $201, $202, $203, $204, $205, $206, $207, $208, $209, $210, $211, $212, $213, $214, $215, $216, $217, $218, $219, $220, $221, $222, $223, $224, $225, $226, $227, $228, $229, $230, $231, $232, $233, $234, $235, $236, $237, $238, $239, $240, $241, $242, $243, $244, $245, $246, $247, $248, $249, $250, $251, $252, $253, $254, $255, $256, $257, $258, $259, $260, $261, $262, $263, $264, $265, $266, $267, $268, $269, $270, $271, $272, $273, $274, $275, $276, $277, $278, $279, $280, $281, $282, $283, $284, $285, $286, $287, $288, $289, $290, $291, $292, $293, $294, $295, $296, $297, $298, $299, $300, $301, $302, $303, $304, $305, $306, $307, $308, $309, $310, $311, $312, $313, $314, $315, $316, $317, $318, $319, $320, $321, $322, $323, $324, $325, $326, $327, $328, $329, $330, $331, $332, $333, $334, $335, $336, $337, $338, $339, $340, $341, $342, $343, $344, $345, $346, $347, $348, $349, $350, $351, $352, $353, $354, $355, $356, $357, $358, $359, $360, $361, $362, $363, $364, $365, $366, $367, $368, $369, $370, $371, $372, $373, $374, $375, $376, $377, $378, $379, $380, $381, $382, $383, $384, $385, $386, $387, $388, $389, $390, $391, $392, $393, $394, $395, $396, $397, $398, $399, $400, $401, $402, $403, $404, $405, $406, $407, $408, $409, $410, $411, $412, $413, $414, $415, $416, $417, $418, $419, $420, $421, $422, $423, $424, $425, $426, $427, $428,"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 3\n\nInput\n5\n1 0 1 0 1\n\nOutput\n2\n\nInput\n5\n1 1 0 1 1\n\nOutput\n2\n\nInput\n6\n0 1 0 1 1 0 1\n\nOutput\n3\n\nInput\n3\n0 0 0\n\nOutput\n0\n\n===== Solutions =====\n\nFirst, use a counter to determine how many hours are in a day.\n\nFor example, if a day has 2 hours, it would be considered as having 2 hours in a day. Therefore, the counter should be 2*7=48.\n\nSecond, use a flag to determine how many hours are in a day.\n\nFor example, if a day has 3 hours, it would be considered as having 3 hours in a day. Therefore, the counter should be 3*7=24.\n\nThird, use a flag to determine how many hours are in a day.\n\nFor example, if a day has 2 hours, it would be considered as having 2 hours in a day. Therefore, the counter should be 2*3=6.\n\nFourth, use a flag to determine how many hours are in a day.\n\nFor example, if a day has 3 hours, it would be considered as having 3 hours in a day. Therefore, the counter should be 3*2=6.\n\nFor example, if a day has 4 hours, it would be considered as having 4 hours in a day. Therefore, the counter should be 4*2=4.\n\nFor example, if a day has 2 hours, it would be considered as having 2 hours in a day. Therefore, the counter should be 2*3=6.\n\nFor example, if a day has 4 hours, it would be considered as having 4 hours in a day. Therefore, the counter should be 4*3=12.\n\nFor example, if a day has 5 hours, it would be considered as having 5 hours in a day. Therefore, the counter should be 5*4=24.\n\nFor example, if a day has 6 hours, it would be considered as having 6 hours in a day. Therefore, the counter should be 6*5=60.\n\nFor example, if a day has 7 hours, it would be considered as having 7 hours in a day. Therefore, the counter should be 7*4=60.\n\nFor example, if a day has 8 hours, it would be considered as having 8 hours in a day. Therefore, the counter should be 8*5=120.\n\n===== Error Cases =====\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not valid.\n\nInput is not"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 7, \"Problem Statement\"\nassert solution(stdin) == 2, \"Problem Statement\"\nassert solution(stdin) == 0, \"Problem Statement\"\nassert solution(stdin) == 0, \"Problem Statement\"\nassert solution(stdin) == 0, \"Problem Statement\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"5\"\n    ) == \"2\"\n\nassert solution(\n    \"6\"\n    ) == \"2\"\n\nassert solution(\n    \"7\"\n    ) == \"3\"\n\nassert solution(\n    \"3\"\n    ) == \"0\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0, \"Failed on line {}\".format(stdin.index(1))\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    '7'\n    ), 'Expected \"0\" got \"7\"'\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\"]) == \"0\"\nassert solution([\"7\"]) == \"1\"\nassert solution([\"7\",\"1\"]) == \"1\"\nassert solution([\"3\",\"4\"]) == \"1\"\nassert solution([\"4\",\"3\",\"4\"]) == \"1\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == \"1\"\nassert solution(7) == \"0\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\nassert solution('6') == '1'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n        [1,7,2,5,3,4,6,2,1]\n    ) == 1\n\n\n-----Constraints-----\n0\n\n\"\"\"\n\nimport sys\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 1\nassert solution(7) == 0\nassert solution(2) == 1\nassert solution(7) == 0\nassert solution(3) == 1\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 4\nassert solution(9) == 1\nassert solution(1) == 1\nassert solution(21) == 0\nassert solution(4) == 0\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(9) == 0\nassert solution(12) == 1\nassert solution(45) == 4\nassert solution(13) == 5\nassert solution(40) == 6\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"brie soft\") == \"soft\"\nassert solution(\"brie soft\") == \"soft\"\nassert solution(\"camembert soft\") == \"hard\"\nassert solution(\"feta soft\") == \"soft\"\nassert solution(\"goat soft\") == \"hard\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\", \"solution() should return an empty string.\"\nassert solution(\"brie soft\") == \"brie soft\", \"solution() should return 'brie soft'.\"\nassert solution(\"camembert soft\") == \"camembert soft\", \"solution() should return 'camembert soft'.\"\nassert solution(\"feta soft\") == \"feta soft\", \"solution() should return 'feta soft'.\"\nassert solution(\"goat soft\") == \"goat soft\", \"solution() should return 'goat soft'.\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 4\"), \"10\"\nassert solution(\"1 1 1\"), \"1\"\nassert solution(\"\"), \"\"\nassert solution(\"feta\") == \"feta\"\nassert solution(\"feta\") == \"feta\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"brie\", \"camembert\", \"feta\", \"goat\", \"muenster\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental\", \"edam\", \"colby\", \"gruyere\", \"asiago\", \"cheddar\", \"gouda\", \"swiss\", \"parmesan\", \"emmental"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\")) == \"soft\"\nassert solution(\"brie\") == \"soft\"\nassert solution(\"camembert\") == \"soft\"\nassert solution(\"feta\") == \"hard\"\nassert solution(\"goat\") == \"hard\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"brie soft\") == \"brie soft\"\nassert solution(\"camembert soft\") == \"camembert soft\"\nassert solution(\"feta soft\") == \"feta soft\"\nassert solution(\"goat soft\") == \"goat soft\"\nassert solution(\"muenster soft\") == \"muenster soft\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5\",\"4\",\"3\",\"2\",\"1\"]) == \"1\"\nassert solution([\"4\",\"2\",\"1\"]) == \"0\"\nassert solution([\"3\",\"4\",\"2\"]) == \"0\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 0 0 2!\"\n'''"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"7 3 2 1 3 1\") == \"1 0 0 2\"\nassert solution(\"6 4 3 2 1 3 4\") == \"0 0 0 0\"\nassert solution(\"5 5 5 5 5 5 5 5 5 5 5 5 5 5\") == \"0 0 0 0\"\nassert solution(\"5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\") == \"0 0 0 0\""
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0 0 0 2'\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0 0 0 0 0 2 0 0 0\"\nassert solution(stdin) == \"0 0 0 1 0 2 0 0 0\"\nassert solution(stdin) == \"0 0 0 0 0 0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0 0 0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0 0 0 0 0 0\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \n) == '2'\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 0 0 2 0\"\nassert solution(stdin) == \"0 0 0 2 1\"\nassert solution(stdin) == \"0 0 0 1 2\"\nassert solution(stdin) == \"0 0 0 2 1\"\nassert solution(stdin) == \"0 0 0 1 0\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 0 0 2\"\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1 0 0 2'\n\nassert solution(stdin) == '1 0 0 2'\n\nassert solution(stdin) == '1 0 0 2'\n\nassert solution(stdin) == '1 0 0 2'\n\nassert solution(stdin) == '1 0 0 2'"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"011\") == \"0\"\nassert solution(\"1111\") == \"1\"\nassert solution(\"1101\") == \"0\"\nassert solution(\"111111\") == \"1\"\nassert solution(\"1111110000\") == \"1\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('0') == '1'\nassert solution('1') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(raw_input) == \"0\"\n\n-----Discussion-----\nThe input consists of four lines, each line containing a single digit 0 or 1.\n\n\n-----Constraints-----\n0 <= stdin.length <= 1000\n\n\n-----Time complexity-----\nO(N)\n\n\n-----Space Complexity-----\nO(1)\n\n\n-----Note-----\nThe input consists of four lines, each line containing a single digit 0 or 1.\n\n\n-----Algorithm-----\nUse two pointers, the first pointer moves through the input, the second pointer moves through the input, and both of them move in the same direction as they both move through the input. For each of the four lines of code, move one pointer in the direction of the first pointer and move one pointer in the direction of the second pointer.\n\nAlternate-form solution using a stack, keeping track of the line that has been moved, and moving the line from the top of the stack until the next line of code that has been moved.\n\nRepeat the same process from the top to the end of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\n\n-----Discussion-----\nThe input consists of four lines, each line containing a single digit 0 or 1.\n\n\n-----Constraints-----\n0 <= stdin.length <= 1000\n\n\n-----Time Complexity-----\nO(N)\n\n\n-----Space Complexity-----\nO(1)\n\n\n-----Note-----\nThe input consists of four lines, each line containing a single digit 0 or 1.\n\n\n-----Algorithm-----\nUse two pointers, the first pointer moves through the input, the second pointer moves through the input, and both of them move in the same direction as they both move through the input. For each of the four lines of code, move one pointer in the direction of the first pointer and move one pointer in the direction of the second pointer.\n\nAlternate-form solution using a stack, keeping track of the line that has been moved, and moving the line from the top of the stack until the next line of code that has been moved.\n\nRepeat the same process from the top to the end of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\n\n-----Discussion-----\nThe input consists of four lines, each line containing a single digit 0 or 1.\n\n\n-----Constraints-----\n0 <= stdin.length <= 1000\n\n\n-----Time Complexity-----\nO(N)\n\n\n-----Space Complexity-----\nO(1)\n\n\n-----Note-----\nThe input consists of four lines, each line containing a single digit 0 or 1.\n\n\n-----Algorithm-----\nUse two pointers, the first pointer moves through the input, the second pointer moves through the input, and both of them move in the same direction as they both move through the input. For each of the four lines of code, move one pointer in the direction of the first pointer and move one pointer in the direction of the second pointer.\n\nAlternate-form solution using a stack, keeping track of the line that has been moved, and moving the line from the top of the stack until the next line of code that has been moved.\n\nRepeat the same process from the top to the end of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the top to the bottom of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\nRepeat the same process from the bottom to the top of the stack.\n\nRepeat the same process from the top to the top of the stack.\n\n\n-----Discussion-----\nThe input consists of four lines, each line containing a single digit 0 or 1.\n\n\n-----Constraints-----\n0 <= stdin.length <= 1000\n\n\n-----Time Complexity-----\nO(N)\n\n\n-----Space Complexity-----\nO(1)\n\n\n-----Note-----\nThe input consists of four lines, each line containing a single digit 0 or 1.\n\n\n-----Algorithm-----\nUse two pointers, the first pointer moves through the input, the second pointer moves through the input, and both of them move in the same direction as they both move through the input. For each of the four lines of code, move one pointer in the direction of the first pointer and move one pointer in the direction of the second pointer.\n\nAlternate-form"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('0') == '1'\n\n\n'''\n\nclass Solution:\n    def solution(self, str: str) -> str:\n        if len(str) == 1:\n            return str\n        \n        if str[0] == '0':\n            return str[1:] + self.solution(str[1:])\n        else:\n            return self.solution(str[1:]) + str[0]\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(string) == '0'\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= string[i] <= 9\nstring consists of digits 0 or 1\n\n\n-----Tips-----\n- Determine all digits in the string as 0 or 1\n- Write a method to perform the following:\n- first find all digits of the string and find all indices where digits of the string are 1\n- if there is any such index, then keep it\n- if there is no such index, then remove it\n- After removing the digit from the string, return the modified string.\n- If you can't get the index of the number, return the original string.\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1'\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0\") == \"0\", \"0 should be 0\"\nassert solution(\"1\") == \"1\", \"1 should be 1\"\nassert solution(\"1\") == \"1\", \"1 should be 1\"\nassert solution(\"0\") == \"0\", \"0 should be 0\"\nassert solution(\"0\") == \"0\", \"0 should be 0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0'\n\nInput\n0\n0\n1\n\nOutput\n0\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"0\") == \"1\"\nassert solution(\"1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"Yes\"\nassert solution(\"2 5\") == \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\", \"10\", \"15\", \"8\", \"5\", \"1\"]) == \"No\"\nassert solution([\"1\", \"3\", \"4\", \"5\", \"2\", \"1\"]) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\", \"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\"]) == \"Yes\"\nassert solution([\"5\", \"2\", \"15\", \"35\", \"40\", \"50\", \"60\"]) == \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 0 1\") == \"No\"\nassert solution(\"1 2 10\") == \"Yes\"\nassert solution(\"1 3 3\") == \"Yes\"\nassert solution(\"1 0 1\") == \"No\"\nassert solution(\"3 0 2\") == \"Yes\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 10\") == \"Yes\"\nassert solution(\"2 4 9\") == \"No\"\nassert solution(\"1 1 10\") == \"No\"\nassert solution(\"1 10 1\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1000 20 80\") == \"No\"\n\n-----Performance-----\n- Runtime: 852 ms, faster than 9.98% of Python3 online submissions for Meeting Rooms.\n- Memory Usage: 14.2 MB, less than 41.98% of Python3 online submissions for Meeting Rooms.\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0\") == \"No\"\nassert solution(\"1\") == \"No\"\nassert solution(\"2\") == \"Yes\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 5 10\") == \"Yes\"\nassert solution(\"2 2 10\") == \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 3 10\") == \"Yes\"\nassert solution(\"2 5 8 3 1\") == \"No\"\nassert solution(\"4 5 7 8 2\") == \"Yes\"\nassert solution(\"2 1 6 2\") == \"No\"\nassert solution(\"1 1 9 6\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"Yes\"\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        d = defaultdict(list)\n        for i in range(len(s)):\n            if s[i] == '(':\n                d['('] = d.get(s[i], []) + [i]\n            elif s[i] == '[':\n                d['['] = d.get(s[i], []) + [i]\n            else:\n                return False\n\n        for i, j in d.items():\n            if not (len(j) == 3 and i in {'(', '[', '{'}):\n                return False\n\n        return True"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"Yes\"\nassert solution(\"61 59 7\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"89\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'No'\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"No\"\nassert solution(\"61 59 7\") == \"Yes\"\nassert solution(\"7\") == \"No\"\nassert solution(\"7\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 22 78 32 78 30 80\") == \"Yes\"\nassert solution(\"79 1 1 1\") == \"No\"\nassert solution(\"79 1 2\") == \"No\"\nassert solution(\"79 1 2 3 4 5 6 7 8 9 10\") == \"Yes\"\nassert solution(\"16 6 4 2 8 5 1 3 7 2 9 4\") == \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 0 1 1 1 1 1 0\") == \"1\"\nassert solution(\"2 3 2 1 1 1 1 1 0\") == \"1\"\nassert solution
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(sample_input) == \"Yes\"\n\nassert solution(sample_input) == \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('84 97 66') == 'Yes'\nassert solution('79 89 11') == 'Yes'\nassert solution('61 59 7') == 'Yes'\nassert solution('7') == 'Yes'\nassert solution('89') == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"Yes\"\n\n'''"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"No\"\nassert solution(\"61 59 7\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"7\") == \"No\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 30"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2, 5) == 30\n\"\"\"\n\nclass Solution:\n    def maxDays(self, n: int, m: int, a: List[int], b: List[int]) -> int:\n        answer = 0\n        def cal(a:int, b: int, n: int, m: int) -> int:\n            for i in range(a, b+1):\n                if a < n:\n                    for j in range(a,i+1):\n                        a -= j\n                    return m\n                elif a == i:\n                    return n-m\n                else:\n                    return -1\n        for i in range(1,n+1):\n            answer += cal(a,b,i,m)\n            a += 1\n            answer += cal(a,b,i,m)\n            b += 1\n            answer += cal(a,b,i,m)\n            a += 1\n            answer += cal(a,b,i,m)\n        answer += cal(a,b,n,m)\n        return answer"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '30'"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 30, \"incorrect answer\"\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('10 2 5') == 30\nassert solution('10 5 6') == 5\nassert solution('10 6 7') == -1\n\n'''\nimport collections\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"3\"\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n  a=4, b=6, d=2\n) == 30\nassert solution(\n  a=4, b=6, d=3\n) == -1\nassert solution(\n  a=4, b=6, d=3\n) == -1\nassert solution(\n  a=4, b=6, d=1\n) == -1\nassert solution(\n  a=4, b=6, d=0\n) == -1\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"5 4\"\n) == \"30\"\nassert solution(\n    \"6 5\"\n) == \"30\"\nassert solution(\n    \"5 3\"\n) == \"60\"\nassert solution(\n    \"5 3\"\n) == \"60\"\nassert solution(\n    \"5 3\"\n) == \"60\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(problem) == \"30\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 30\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == 1\nassert solution(1) == 2\nassert solution(2) == 3\nassert solution(3) == 4\nassert solution(4) == 5\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == str(5)\n\nMy solution seems to be the same, but the above solution uses //."
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 5\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 5\") == 5\nassert solution(\"0 3\") == 3\nassert solution(\"1 5\") == 5\nassert solution(\"1 0\") == 0\nassert solution(\"2 5\") == 5\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"7\") == \"5\"\nassert solution(\"9\") == \"5\"\nassert solution(\"10\") == \"5\"\nassert solution(\"11\") == \"5\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\n\nD = 5\nN = int(stdin)"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n'''"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n  int(\n    input()\n  )\n) == \"5\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\")\"\n\n----Description----\nThe task is to write a function solution which takes an integer as a parameter and returns the greatest common divisor of all integers in the range 1 to the given integer.\n\nThe given input is not limited to the range 1 to 10^9.\nThe function should return -1 if the given integer is not in the range 1 to 10^9.\nThe function should return the answer as a string.\nThe input will only contain digits.\n\nSample Input\n\n7\n10 5 3 4 9 2\nSample Output\n\n2\nExplanation\n\n7 = 2 + 10 = 3, because 3 + 9 = 2, which is the greatest common divisor.\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"2\"\nassert solution(\"11\") == \"2\"\nassert solution(\"10\") == \"1\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 7 6 8\"\n) == 7\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '2'\n'''\nimport math"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"2\"\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 10^5\n - 1 \\leq A_i \\leq 10^9\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"7 6 8\") == \"2\"\nassert solution(\"1 1 1\") == \"2\"\nassert solution(\"1 8 7\") == \"2\"\nassert solution(\"1 7 6\") == \"2\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '7'\n\nAssumptions:\n- Input contains only integers in range [1, 10^9]\n\n-----Sample Input-----\n2\n2\n\n-----Sample Output-----\n1\n\n-----Sample Input-----\n1\n\n-----Sample Output-----\n0\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(INPUT) == '2'\n\nassert solution(INPUT) == '4'\n\nassert solution(INPUT) == '1'\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == [\"3\", \"1\", \"2\"]\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(get_input_lines()), \"Your program does not solve the problem\"\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 3\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"1 2 3\"\nassert solution(input) == \"1 2 3 4\"\nassert solution(input) == \"1 2 3 4 5\"\nassert solution(input) == \"1 2 3 4 5 6\"\nassert solution(input) == \"1 2 3 4 5 6 7\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3 1 2'\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"1 2\"\nassert solution(\"4 5\") == \"3 5\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 2\") == \"2 1\"\nassert solution(\"1 3\") == \"1 2 3\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3 4 1\") == \"1 2 3 4 5\"\nassert solution(\"2 2 4 1\") == \"2 4 3 1\"\nassert solution(\"2 2 4 2\") == \"1 3 4 2\"\nassert solution(\"3 3 2 2\") == \"2 3 1 2\"\nassert solution(\"3 3 4 2\") == \"2 3 1 4\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\") == \"3 1 2\"\nassert solution(\"1 2 3\") == \"3 1 3\"\nassert solution(\"1 4 2\") == \"3 1 3\"\nassert solution(\"1 4 1\") == \"1 4 1\"\nassert solution(\"2 4 1\") == \"2 4 1\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"4 4\""
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 1 2\"\n\n-----Sample Input-----\n3\n2 3 1\n\n-----Sample Output-----\n3 1 2\n\"\"\"\n\nN, A = map(int, input().split())\n\nfor i in range(N):\n    print(i + 1, end=' ')\nprint(end='\\n')\n\nA = list(map(int, input().split()))\n\nl = 0\nr = len(A)-1\n\nwhile l <= r:\n    m = (l + r) // 2\n\n    if A[m] - A[m - 1] == A[i] - A[i - 1]:\n        print(m + 1, end=' ')\n        r = m - 1\n    elif A[m] - A[m - 1] > A[i] - A[i - 1]:\n        r = m - 1\n    else:\n        l = m + 1"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '9'\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 4\") == \"9\"\nassert solution(\"3 2\") == \"7\"\nassert solution(\"4 3\") == \"100\"\nassert solution(\"4 2\") == \"9\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == 1\nassert solution(\"2 2\") == 2\nassert solution(\"3 3\") == 3\nassert solution(\"4 4\") == 4\nassert solution(\"5 5\") == 5\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 7 100\"), \"4 7 100\"\nassert solution(\"5 9\"), \"5 9\"\nassert solution(\"5 10\"), \"5 10\"\nassert solution(\"10 7\"), \"10 7\"\nassert solution(\"10 100\"), \"10 100\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == 4\nassert solution(\"4 2\") == 5\nassert solution(\"4 2\") == 9\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"9\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"10 7 100\"\n) == \"9\"\n\nassert solution(\n    \"10 7 1000000\"\n) == \"9\"\n\nassert solution(\n    \"12345\"\n) == \"12345\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 5 1\") == \"9\"\nassert solution(\"10 7 100\") == \"9\"\nassert solution(\"12345\") == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '9'\nassert solution(inp) == '9'\nassert solution(inp) == '0'\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4, 150, 150, 100, 200, 2) == 2\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == '2'\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3,3) == 2\nassert solution(2,1) == 2\nassert solution(1,1) == 2\nassert solution(2,2) == 2\nassert solution(1,2) == 2\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"The function does not exist\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"1 5\") == \"5\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"1 25\") == \"10\"\nassert solution(\"2 7\") == \"10\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"2\""
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 7"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\"), \"5 is not a valid solution\"\nassert solution(\"5 6\"), \"6 is not a valid solution\"\nassert solution(\"5 6 7 8 9 10\"), \"7 is not a valid solution\"\nassert solution(\"5 6 10 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 220 221 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\""
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2,4) == 'Yes', 'Test failed.'\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input=\n    \"1 1 1\"\n) == \"Yes\"\nassert solution(\n    input=\n    \"2 4 3\"\n) == \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 4 1\") == \"Yes\"\nassert solution(\"5 2 1\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"1 2 1\") == \"No\"\nassert solution(\"1 2 3 4\") == \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 'Yes'\nassert solution(input) == 'No'\n\n'''\n\n\nfrom collections import Counter"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"Yes\"\nassert solution(\"2 1\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"2 2\") == \"No\"\nassert solution(\"3 1\") == \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 1\") == \"No\"\nassert solution(\"4 4 2\") == \"Yes\"\nassert solution(\"3 4 2 1\") == \"Yes\"\nassert solution(\"1 1\") == \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\"\n\nclass Solution:\n    def popularTooley(self, votes: List[int]) -> str:\n        counts = [0 for _ in range(len(votes))]\n        for i in range(len(votes)):\n            counts[i] += votes[i]\n        top_value = counts.index(max(counts))\n        if top_value == 0:\n            return 'No'\n        return 'Yes'"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 4 2 2 3 3') == 'Yes'\nassert solution('0 5 5 1 3 3') == 'No'\n\n-------------------------------------------------------------------------------------\nExplanation\nThe problem is solved using the following strategy:\n\n1. Get the number of votes in each item.\n2. Get the number of popular items.\n3. Get the number of votes in each item with the products having the same number of votes.\n4. Select the product with the lowest number of votes.\n5. Select the product with the smallest number of votes.\n6. Select the product with the highest number of votes.\n7. Select the product with the smallest number of votes.\n8. Select the product with the highest number of votes.\n9. Select the product with the smallest number of votes.\n10. Select the product with the highest number of votes.\n11. Select the product with the lowest number of votes.\n12. Select the product with the smallest number of votes.\n13. Select the product with the highest number of votes.\n14. Select the product with the smallest number of votes.\n15. Select the product with the highest number of votes.\n16. Select the product with the smallest number of votes.\n17. Select the product with the highest number of votes.\n18. Select the product with the smallest number of votes.\n19. Select the product with the highest number of votes.\n20. Select the product with the smallest number of votes.\n21. Select the product with the highest number of votes.\n22. Select the product with the smallest number of votes.\n23. Select the product with the highest number of votes.\n24. Select the product with the smallest number of votes.\n25. Select the product with the highest number of votes.\n26. Select the product with the smallest number of votes.\n27. Select the product with the highest number of votes.\n28. Select the product with the smallest number of votes.\n29. Select the product with the highest number of votes.\n30. Select the product with the smallest number of votes.\n31. Select the product with the highest number of votes.\n32. Select the product with the smallest number of votes.\n33. Select the product with the highest number of votes.\n34. Select the product with the smallest number of votes.\n35. Select the product with the highest number of votes.\n36. Select the product with the smallest number of votes.\n37. Select the product with the highest number of votes.\n38. Select the product with the smallest number of votes.\n39. Select the product with the highest number of votes.\n40. Select the product with the smallest number of votes.\n41. Select the product with the highest number of votes.\n42. Select the product with the smallest number of votes.\n43. Select the product with the highest number of votes.\n44. Select the product with the smallest number of votes.\n45. Select the product with the highest number of votes.\n46. Select the product with the smallest number of votes.\n47. Select the product with the highest number of votes.\n48. Select the product with the smallest number of votes.\n49. Select the product with the highest number of votes.\n50. Select the product with the smallest number of votes.\n51. Select the product with the highest number of votes.\n52. Select the product with the smallest number of votes.\n53. Select the product with the highest number of votes.\n54. Select the product with the smallest number of votes.\n55. Select the product with the highest number of votes.\n56. Select the product with the smallest number of votes.\n57. Select the product with the highest number of votes.\n58. Select the product with the smallest number of votes.\n59. Select the product with the highest number of votes.\n60. Select the product with the smallest number of votes.\n61. Select the product with the highest number of votes.\n62. Select the product with the smallest number of votes.\n63. Select the product with the highest number of votes.\n64. Select the product with the smallest number of votes.\n65. Select the product with the highest number of votes.\n66. Select the product with the smallest number of votes.\n67. Select the product with the highest number of votes.\n68. Select the product with the smallest number of votes.\n69. Select the product with the highest number of votes.\n70. Select the product with the smallest number of votes.\n71. Select the product with the highest number of votes.\n72. Select the product with the smallest number of votes.\n73. Select the product with the highest number of votes.\n74. Select the product with the smallest number of votes.\n75. Select the product with the highest number of votes.\n76. Select the product with the smallest number of votes.\n77. Select the product with the highest number of votes.\n78. Select the product with the smallest number of votes.\n79. Select the product with the highest number of votes.\n80. Select the product with the smallest number of votes.\n81. Select the product with the highest number of votes.\n82. Select the product with the smallest number of votes.\n83. Select the product with the highest number of votes.\n84. Select the product with the smallest number of votes.\n85. Select the product with the highest number of votes.\n86. Select the product with the smallest number of votes.\n87. Select the product with the highest number of votes.\n88. Select the product with the smallest number of votes.\n89. Select the product with the highest number of votes.\n90. Select the product with the smallest number of votes.\n91. Select the product with the highest number of votes.\n92. Select the product with the smallest number of votes.\n93. Select the product with the highest number of votes.\n94. Select the product with the smallest number of votes.\n95. Select the product with the highest number of votes.\n96. Select the product with the smallest number of votes.\n97. Select the product with the highest number of votes.\n98. Select the product with the smallest number of votes.\n99. Select the product with the highest number of votes.\n100. Select the product with the smallest number of votes.\n\nGiven two integers N and M, print Yes if the two integers can be selected as an assortment of items. Otherwise, print No.\nInput Format:\nA single integer N and M\nOutput Format:\nA single integer Yes or No\nSample Input:\n4\n8\n5 4 2 1\nSample Output:\nYes\n\nSample Input:\n2\n4\n2\nSample Output:\nNo\n\n\"\"\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"..#\",\"#.#\"]) == \"5\"\nassert solution([\"..\",\"#\"]) == \"1\"\nassert solution([\"#\",\"#\"]) == \"1\"\nassert solution([\"#\",\"...\",\"....\",\"....\"]) == \"2\"\nassert solution([\"..\",\"..\",\"..\"]) == \"1\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"8 8 8 8\") == 5\nassert solution(\"4 4 4 4\") == 5\nassert solution(\"3 3 3 3\") == 5\nassert solution(\"2 2 2 2\") == 5\nassert solution(\"1 1 1 1\") == 5\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"Error\"\n-----Example 1-----\nInput:\nH W K\nc\n.c\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 5, \"The problem has not been solved\"\n\n\"\"\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(test_cases[0]) == \"5\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"5\"\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"5\""
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"..#\") == 5\nassert solution(\"###\") == 1\nassert solution(\"....#\") == 5\nassert solution(\"...#\") == 1\nassert solution(\"#....\") == 5\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2040 2040\") == \"2\"\n\n------Sample Input----\nInput\n2 2040\n\nOutput\n2\n\nWhen (i, j) = (2020, 2021), (i \\times j) \\mbox{ mod } 2019  = 2.\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2040 2020') == 2\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '2'\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 4 5\") == \"2\"\nassert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"2 2 2\") == \"3\"\nassert solution(\"2 2 4\") == \"6\"\nassert solution(\"2 2 2 2\") == \"6\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"4 6\") == \"2\"\nassert solution(\"2 4\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 0\") == \"1\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"2040\", \"2070\"]) == \"2\"\nassert solution([\"2020\", \"2070\"]) == \"2\"\nassert solution([\"2040\", \"2040\"]) == \"2\"\nassert solution([\"2020\", \"2020\"]) == \"2\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10 20\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ATCoder\") == 'WA'\nassert solution(\"ATCoder\") == 'AC'\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\":;\") == \"WA\""
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"A\", \"A\", \"A\"]) == \"WA\"\nassert solution([\"A\", \"B\", \"A\"]) == \"WA\"\nassert solution([\"A\", \"C\", \"C\"]) == \"WA\"\nassert solution([\"A\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\"]) == \"WA\"\nassert solution([\"A\", \"B\", \"C\"]) == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\\\")\\\"\\\"\\\")\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"AtCoder\") == \"WA\"\nassert solution(\"ATCA\") == \"WA\"\nassert solution(\"AcaC\") == \"WA\"\nassert solution(\"AaCc\") == \"WA\"\nassert solution(\"AtCoder\") == \"AC\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ATCoder\") == \"WA\"\nassert solution(\"ABC\") == \"WA\"\nassert solution(\"ABCD\") == \"WA\"\nassert solution(\"ABCE\") == \"WA\"\nassert solution(\"ABCF\") == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == 'WA'\nassert solution(inp) == 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"AaC\") == \"WA\", \"Expected: WA, but got: AC\"\nassert solution(\"AaB\") == \"WA\", \"Expected: WA, but got: AC\"\nassert solution(\"A\") == \"WA\", \"Expected: WA, but got: AC\"\nassert solution(\"AA\") == \"WA\", \"Expected: WA, but got: AC\"\nassert solution(\"AAC\") == \"AC\", \"Expected: AC, but got: WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"A\", \"C\", \"A\"]) == \"WA\"\nassert solution([\"A\", \"C\", \"A\", \"B\"]) == \"AC\"\nassert solution([\"A\", \"C\", \"A\", \"C\", \"B\"]) == \"WA\"\nassert solution([\"a\", \"c\", \"b\"]) == \"AC\"\nassert solution([\"a\", \"b\"]) == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"\"]) == \"\"\nassert solution([\"a\"]) == \"A\"\nassert solution([\"a\",\"a\",\"a\",\"a\",\"a\",\"c\"]) == \"WA\"\nassert solution([\"aa\",\"a\",\"cc\",\"cc\"]) == \"WA\"\nassert solution([\"a\",\"c\",\"a\",\"b\",\"c\",\"c\",\"b\"]) == \"AC\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1214) == 2\nassert solution(123) == \"2\"\nassert solution(12) == \"2\"\nassert solution(1324) == \"1\"\nassert solution(1324) == \"3\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1324') == '2'\nassert solution('1324') == '4'\nassert solution('1324') == '8'\nassert solution('1214') == '2'\nassert solution('1214') == '4'\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin),'solution: no solution'\nassert solution(stdin) == '2','solution: incorrect result'\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1324) == 2\nassert solution(1333224444) == 4\nassert solution(13333333332222444444444444444444) == 55555\nassert solution(133333333322224444444444444444444444444444444444444444444444444444444444444444) == 666666\nassert solution(123) == 1\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '2'\nassert solution(inp) == '6'"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\", \"Empty string\"\nassert solution(\"1\") == \"\", \"Single digit\"\nassert solution(\"2\") == \"6\", \"Two digit\"\nassert solution(\"4\") == \"3\", \"Four digit\"\nassert solution(\"1123\") == \"1\", \"Single digit, just one digit\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '2'"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '2'"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1214') == 2\nassert solution('1214') == 2\nassert solution('1214') == 2\nassert solution('1214') == 2\nassert solution('1214') == 2\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5,5,5,5,5) == 'YES','solution() should return YES'\nassert solution(2,2,3,3,4) == 'NO','solution() should return NO'\nassert solution(0,0,0,0,0) == 'NO','solution() should return NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['5', '5 2', '5 3', '5 4', '5 1']) == 'YES'\nassert solution(['5', '5 2', '5 3', '5 4', '5 1']) == 'NO'\nassert solution(['1', '2', '3', '4', '5']) == 'YES'\nassert solution(['1', '2', '3', '4', '5']) == 'NO'\nassert solution(['1', '2', '3', '4', '5']) == 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"5 2 3 4 1\") == \"YES\"\nassert solution(\n    \"5 2 3 4 1\") == \"NO\"\n\nassert solution(\n    \"5 4 1 2\") == \"NO\"\nassert solution(\n    \"5 3 2 4 1\") == \"NO\"\n\nassert solution(\n    \"5 4 3 1 2\") == \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(list(map(int,input().split()))) == 'YES'"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n        \"5 2 3 4 1\",\n        [\"5\", \"2\", \"3\", \"4\", \"1\"]\n    ) == \"YES\"\nassert solution(\n        \"5 2 3 4 1\",\n        [\"5\", \"2\", \"3\", \"4\", \"1\"]\n    ) == \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 5 3 4 2\") == \"YES\"\nassert solution(\"2 2 3 4 1\") == \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == YES\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\nassert solution(\"1 2 3 4 5\") == \"NO\"\n\nassert solution(\"5 4 1 3 2\") == \"YES\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"5 3 4 2 1\") == \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'YES'\n'''\n\nfrom collections import deque\n\nclass Solution:\n    def permutation(self, S: str) -> str:\n        if len(S) == 1:\n            return S\n        return ''.join(sorted(S))"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3121) == 2\nassert solution(6) == 1\nassert solution(1000000000000000000000000000000000) == 33\nassert solution(201920181) == 4\nassert solution(201624252910) == \"Out of bounds\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\n\n\n-----Expected output-----\n\nPrint the maximum number of numbers divisible by $3$ that Polycarp can get by making vertical cuts in the given number $s$.\n\n\n-----Constraints-----\n\n1 <= s <= 10^5\n\n\n-----Time Limit: 0.5 seconds per test case -----\n\n--- Nguyen Van Duc ---\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\nassert solution(\"201920181\") == 4"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 2\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"0\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"19\") == \"1\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(s) == \"33\"\nassert solution(s) == \"4\"\nassert solution(s) == \"2\"\nassert solution(s) == \"1\"\nassert solution(s) == \"3\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\nassert solution(\"201920181\") == 4\nassert solution(\"00\") == 1\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input() == '3') == 2\nassert solution(input() == '3') == 0\nassert solution(input() == '1') == 0\nassert solution(input() == '2') == 0\nassert solution(input() == '2') == 0\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\npass\n\n-----Success!-----\nTest cases passed.\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == solution(3) == solution(5)\nassert solution(stdin) == solution(4) == solution(1)\nassert solution(stdin) == solution(6) == solution(-1)\n\n\n-----Constraints-----\n0 < n < 10^5\n\n\n-----Time Complexity-----\nBest case O(n) | Average case O(n^2)\n\nWorst case O(n) | Average case O(n^2)\n\nSpace complexity O(1)\n\n-----Algorithms-----\nUse two pointers: two pointers, one for each element of array, which we always call after one pointer.\n\nRunning all the elements of array $a$ through the pointers, swap the two pointers.\n\nSo, we have to swap the two pointers.\n\nBinary Search\n\nIn this problem, we try to find the element which takes the maximum value $i$ to the right of the current one, i.e., $d_i$ in array $a$.\n\nBinary Search\n\nIf $d_i \\geq i$, we swap $d_i$ with $d_i + b_i$.\nIf $d_i \\le i$, we swap $d_i$ with $d_i - b_i$.\n\nWe maintain the array after that, i.e., $d_i$ does not change anymore.\n\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\n\n\n-----Constraints-----\n0 < n < 10^4\n-10^9 < a_i, b_i < 10^9\n-10^9 < c_i, d_i < 10^9\n\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n\n-----Space complexity-----\nO(n)\n\nO(n)\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500\\n501\\n502\\n503\\n504\\n505\\n506\\n507\\n508\\n509\\n510\\n511\\n512\\n513\\n514\\n515\\n516\\n517\\n518\\n519\\n520\\n521\\n522\\n523"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"2\"\n\nassert solution(input()) == \"3\"\n\nassert solution(input()) == \"4\"\n\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"0\") == \"0\"\nassert solution(\"-1 0 -12 6\") == \"1\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"6\") == \"0\"\nassert solution(\"7\") == \"3\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"3 1 1 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"10\", \"dodivthree\", \"abaca\", \"zabbbcc\", \"hellocode\", \"code??????\", \"??test\", \"10\", \"bambarbia\", \"hellocode\"]) == \"5\"\nassert solution([\"10\", \"dodivthree\", \"abaca\", \"zabbbcc\", \"hellocode\", \"code??????\", \"??test\", \"10\", \"bambarbia\", \"hellocode\"]) == \"5\"\nassert solution([\"9\", \"bambarbia\", \"hellocode\", \"code??????\", \"??test\", \"10\", \"bambarbia\", \"hellocode\"]) == \"9\"\nassert solution([\"10\", \"dodivthree\", \"abaca\", \"zabbbcc\", \"hellocode\", \"code??????\", \"??test\", \"10\", \"bambarbia\", \"hellocode\"]) == \"10\"\nassert solution([\"9\", \"bambarbia\", \"hellocode\", \"code??????\", \"??test\", \"10\", \"bambarbia\", \"hellocode\"]) == \"10\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\nprint(solution(stdin))\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n\nfrom sys import stdin\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10\") == 5\nassert solution(\"7\") == 0\nassert solution(\"9\") == 10\nassert solution(\"10\") == 6\nassert solution(\"5\") == 6\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"7\") == \"5\"\nassert solution(\"9\") == \"5\"\nassert solution(\"10\") == \"1\"\nassert solution(\"11\") == \"4\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"7\") == \"0\"\nassert solution(\"9\") == \"0\"\nassert solution(\"10\") == \"0\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('10') == '5'\nassert solution('7') == '6'\nassert solution('9') == '0'\nassert solution('10') == '10'\nassert solution('10') == '10'\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 5\nassert solution(stdin) == 0\nassert solution(stdin) == 9\nassert solution(stdin) == 1\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('7') == '3'\nassert solution('11') == '3'\nassert solution('4') == '2'\nassert solution('-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('4 1 2 2 1 5 3') == '3'\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"4 1 2 2 1 5 3\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 1 2 2\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution == \"2 3\"\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == str(len(inp)-2)\nassert solution(inp) == str(len(inp)-1)\nassert solution(inp) == str(len(inp))\nassert solution(inp) == str(len(inp)-1)\nassert solution(inp) == str(len(inp))\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 4 1 2 2 1 5 3\") == \"3 1 2 2 1 5 3\"\nassert solution(\"15 2 5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2 1 2 2 1 5 3\"\nassert solution(\"11 5 3 -2 -1 0 1 2 3 4 5\") == \"4 5 3\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution == 10\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"3 1 2 2 1 5 3\", \"4 1 2 2 1 5 3\", \"4 1 2 2 1 5 3\"]) == \"1 2 3 4\"\nassert solution([\"3 1 2 2 1 5 3\", \"4 1 2 2 1 5 3\", \"4 1 2 2 1 5 3\"]) == \"2 3 4\"\nassert solution([\"3 1 2 2 1 5 3\", \"4 1 2 2 1 5 3\", \"4 1 2 2 1 5 3\"]) == \"2 3 4\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4 5\"\n\"\"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2 3 4\"\n\nassert solution(stdin) == \"1 4\"\n\nassert solution(stdin) == \"1 2\"\n\nassert solution(stdin) == \"1 5\"\n\nassert solution(stdin) == \"1 3\""
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"12\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n\n1 <= n <= 100\n0 <= k <= 10^9\n\nSubmissions: Accepted\n209/209 cases passed (88 ms)\nAccepted\n1 case passed (39 ms)\n\nSubmissions: Accepted\n217/217 cases passed (73 ms)\nAccepted\n1 case passed (46 ms)\n\nSubmissions: Accepted\n218/218 cases passed (70 ms)\nAccepted\n1 case passed (43 ms)\n\nSubmissions: Accepted\n219/219 cases passed (69 ms)\nAccepted\n1 case passed (40 ms)\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4 2' ) == '7'\nassert solution('4 2 3' ) == '12'\nassert solution('4 2 3 4' ) == '12'\nassert solution('4 2 3 4 5' ) == '0'\nassert solution('4 2 3 4 6' ) == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"6 11\") == \"7\"\nassert solution(\"4 2\") == \"12\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 3\") == \"0\"\nassert solution(\"5 4\") == \"0\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"7\"\nassert solution(\"4 2\") == \"7\"\nassert solution(\"5 2\") == \"12\"\nassert solution(\"5 3\") == \"12\"\nassert solution(\"5 4\") == \"12\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('aabbccdddd') == '3'\nassert solution('baabbac') == '0'\nassert solution('baaab') == '1'\nassert solution('abccba') == '3'\nassert solution('babab') == '1'\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin = \n    [\n        \"45 10 12 11 7\",\n        \"1 2 3 4 5 6 7\",\n        \"2\",\n        \"1 3\",\n        \"4\",\n        \"2\"\n    ]) == \"12\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12\n\nExplanation\n\nThe number of ordered pairs are divisible by $11$.\n\nOutput:\n2\n\nExplanation\n\nThere are 2 pairs $(1, 2)$, $(2, 3)$.\n\n\"\"\""
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 11\n\n\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '9'\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution( stdin ) == '9'\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"9\"\nassert solution(input()) == \"9\"\nassert solution(input()) == \"9\"\nassert solution(input()) == \"9\"\nassert solution(input()) == \"9\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('10 10 20 20 30 30 40 50 60 60 70 80 50 60') == '50'\nassert solution('7 20 3 4') == '7'\nassert solution('2 4') == '6'\nassert solution('10 5 4') == '12'\nassert solution('5 10 7') == '12'\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('B_1 B_2... B_{N-1}') == '9'\nassert solution('B_1 B_2... B_{N-1}') == '9'\nassert solution('B_1 B_2... B_{N-1}') == '9'\nassert solution('B_1 B_2... B_{N-1}') == '9'\nassert solution('B_1 B_2... B_{N-1}') == '9'\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == 10\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '9'"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2 5\", \"5 4\", \"4 6\", \"6 7\", \"7 2\", \"8 1\"]) == \"7\"\nassert solution([\"3 5\", \"5 3\", \"3 7\", \"7 2\", \"6 7\", \"7 3\", \"8 6\", \"8 1\"]) == \"9\"\nassert solution([\"1 2\", \"2 1\"]) == \"2\"\nassert solution([\"-4\", \"4 -1\", \"1 -2\", \"2 -1\", \"1 4\", \"1 -1\", \"2 -2\", \"1 -3\", \"1 2\", \"2 3\", \"1 -4\", \"1 -5\", \"1 -6\"]) == \"6\"\nassert solution([\"1 4\", \"1 3\", \"1 -3\", \"2 -1\", \"1 -2\", \"1 -1\", \"2 -2\", \"1 -4\", \"1 -5\", \"1 1\", \"2 1\", \"1 1\"]) == \"7\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 9\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"{1, 3, 4}\" == \"110\") == \"110\"\nassert solution(\"{1, 3, 4}\") == \"110\"\nassert solution(\"{1, 2, 3}\") == \"110\"\nassert solution(\"{1, 2, 3}\") == \"110\"\nassert solution(\"{1, 3, 2}\") == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == '110'\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"110\"\n'''\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 110, \"solution() FAILED\""
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"3\", \"4\"]) == \"4\"\nassert solution([\"1\", \"3\", \"3\"]) == \"1\"\nassert solution([\"1\", \"2\", \"2\", \"3\", \"3\"]) == \"3\"\nassert solution([\"1\", \"2\", \"2\", \"3\", \"3\", \"3\"]) == \"3\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"4\", \"4\"]) == \"3\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\", \"3\", \"4\"]) == \"110\"\nassert solution([\"1\", \"3\", \"4\", \"10\"]) == \"110\"\nassert solution([\"1\", \"2\", \"3\", \"4\"]) == \"101\"\nassert solution([\"2\", \"3\", \"4\", \"10\"]) == \"101\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"10\", \"20\"]) == \"100\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 4, 3, 2) == 11\nassert solution(3, 4, 2, 1) == 11\nassert solution(3, 4, 1, 1) == 11\nassert solution(3, 4, 1, 2) == 11\nassert solution(3, 4, 1, 3) == 11\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    )\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"4 4 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(a) == '5'\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 4\nassert solution(4) == 5\nassert solution(5) == 5\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    str\n) == \"5\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"5\"\n'''"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(solution(input())) == 5, \"true\"\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 3 6 7 8 3 4 3\") == 5, \"solution: expected 5, got: {}\".format(solution(\"1 3 6 7 8 3 4 3\"))\nassert solution(\"1 4 6 3\") == 4, \"solution: expected 4, got: {}\".format(solution(\"1 4 6 3\"))\nassert solution(\"1 1 3 3 4 3\") == 3, \"solution: expected 3, got: {}\".format(solution(\"1 1 3 3 4 3\"))\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 114 115 116 117 118 119 120 121 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 165 166 167 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 190 191 191 192 193 194 195 196 196 197 198 199 199 200 200 201 201 202 202 203 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 237 238 239 240 241 240 241 242 243 244 245 246 246 247 248 249 250 251 252 253 253 255 255 256 257 259 259 260 261 261 262 263 265 266 267 268 269 270 271 272 274 275 275 277 276 278 279 280 281 282 283 284 285 286 287 288 289 290 291 291 292 293 294 295 296 297 298 299 300 301 301 302 304 305 306 308 309 310 310 311 311 313 314 315 316 317 318 320 321 322 323 324 325 326 327 327 328 329 330 330 331 332 333 333 334 334 335 336 337 336 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n\n------IMPORTS----\nimport sys"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 1\") == \"3\"\nassert solution(\"5 1 1 0 0 0 0 0\") == \"2\"\nassert solution(\"1 1 0 1\") == \"2\"\nassert solution(\"1 1 1 0 0 0 0 1\") == \"0\"\nassert solution(\"2 2 2 1 2 1 2 2 2\") == \"2\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3\") == 2.2761423749\nassert solution(\"0\") == 1.0\nassert solution(\"1\") == 1.0\nassert solution(\"0 1\") == 1.0\nassert solution(\"0 0\") == 1.0\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2.2761423749\"\nassert solution(\"1\") == \"2.2761423749\"\nassert solution(\"0\") == \"2.2761423749\"\nassert solution(\"1\") == \"2.276142...\nassert solution(\"2\") == \"2.276142...\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2') == 2.2761423749\nassert solution('1') == 1\nassert solution('0') == 1\nassert solution('1 0') == 1.283110124\nassert solution('1 1') == 1.283110124\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2.2761423749'"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"2.2761423749\""
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\ninput()) == 2\n\"\"\"\n\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"0\"\nassert solution(\"6\") == \"1\""
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '4'\n'''\nfrom collections import deque\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        A, B = map(int, stdin.split())\n        \n        # print(A, B)\n        \n        if A < B:\n            a = A\n            b = B\n        else:\n            a = B\n            b = A\n        \n        count = 1\n        \n        # find all windows\n        queue = deque()\n        window = deque()\n        \n        # add window to window queue\n        queue.append(a)\n        window.append(a)\n        \n        # while window queue is not empty\n        while window:\n            current_window = window.popleft()\n            \n            # if current window length is the same as a or b\n            if current_window == a or current_window == b:\n                count += 1\n                # if window has length 1\n                if not window:\n                    # set a as the window current_window\n                    window.append(current_window)\n                    # add a as the window current_window\n                    queue.append(current_window)\n            else:\n                # if current window length is not the same as the last window length\n                if count > 1:\n                    # add window to window queue\n                    window.append(current_window)\n                    # add current window to window queue\n                    queue.append(current_window)\n                \n                # decrement window current_window\n                current_window += 1\n                # add window to window queue\n                window.append(current_window)\n                \n                # if window length is greater than 2\n                if len(window) > 2:\n                    # remove window from window queue\n                    window.pop()\n        \n        # print(window)\n        return str(len(window)) + \" \"\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"4\""
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"12 4\") == 4\nassert solution(\"3 2\") == 3\nassert solution(\"1 3 1 2 2\") == 1\nassert solution(\"1 4 5 2 3\") == 1\nassert solution(\"1 2 1 1 2\") == 2\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5\",\"4\",\"4\",\"4\",\"4\"]) == 4\nassert solution([\"2\",\"2\",\"3\",\"3\",\"3\"]) == 2\nassert solution([\"1\",\"1\",\"1\",\"1\",\"1\"]) == 1\nassert solution([\"2\",\"3\",\"2\",\"1\"]) == 2\nassert solution([\"4\",\"4\",\"4\",\"4\",\"4\"]) == 4\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '4'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == solution(12)\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == '4'\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 10\") == 3\n\"\"\"\n\nA, B = map(int, input().split())\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0) == \"4\"\nassert solution(3) == \"5\"\nassert solution(8) == \"0\"\nassert solution(10) == \"6\"\nassert solution(12) == \"0\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"3\"\nassert solution(\"11\") == \"1\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '3'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"3\""
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '3'\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\n\"\"\"\nimport math"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(A,B) == F(A,B)\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3\", \"5\") == \"3\"\nassert solution(\"3\", \"6\") == \"3\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 3\n\nSample Input:\n1\n\nSample Output:\n1\n\nExplanation:\n1 has a minimum value of 1.\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\n\n-----Reference for sample input-----\nhttps://www.codechef.com/problems/SAMPLE/submissions/1\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '1'\n\"\"\"\n\nimport sys\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom collections import deque\n\nT = int(input())"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution( \"3 4\") == \"1\"\nassert solution(\"3 4\") == \"1\"\nassert solution(\"3 4 2\") == \"2\"\nassert solution(\"3 4 2 3\") == \"2\"\nassert solution(\"3 4 2 3 4\") == \"2\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [3, 4]) == \"3\"\nassert solution([2, 1, 3, 2, 3]) == \"1\"\nassert solution([2, 1, 3, 2, 3, 4]) == \"1\"\nassert solution([3, 2, 3, 1, 2, 3, 4]) == \"1\"\nassert solution([3, 2, 3, 1, 2, 3, 4, 5, 6, 7]) == \"6\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3 1\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"1\"\nassert solution(\"2 2 3\") == \"1\"\nassert solution(\"1 3 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 3 1\") == \"1\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"2\", \"3\", \"4\", \"5\", \"6\"]) == \"3\"\nassert solution([\"1\"]) == \"1\"\nassert solution([\"2\", \"3\", \"4\", \"5\", \"6\"]) == \"1\"\nassert solution([\"3\", \"1\"]) == \"3\"\nassert solution([\"4\", \"3\", \"2\", \"6\"]) == \"1\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"3\"\n\n(3, 1, 3)\n(3, 1, 2)\n(2, 1, 3)\n(3, 1, 3)\n(2, 2, 3)\n\n-----Sample Input-----\n5\n5 3 3 2 3 1\n1 2 3 3 1\n2 1 2 3\n2 3 2\n\n-----Sample Output-----\n1\n\nThe first food is liked by all the N people, which are only like the first 3 foods.\n1\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nN, M, K = map(int, input().split())\nA = list(map(int, input().split()))"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '0.5'\nassert solution(input) == '0.5'\nassert solution(input) == '0.5'\nassert solution(input) == '0.5'\nassert solution(input) == '0.5'\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"0.5000000000\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp := input()) == \"0.5\"\nassert solution(inp := input()) == \"0.5\"\nassert solution(inp := input()) == \"0.5\"\nassert solution(inp := input()) == \"0.5\"\nassert solution(inp := input()) == \"0.5\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"0.5\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"0.5\"\nassert solution(\"4\") == \"0.6\"\n\nassert solution
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 0\nassert solution(inp) == 0.5\nassert solution(inp) == 0\nassert solution(inp) == 0.5\nassert solution(inp) == 0.5\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0.5'"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"0.5\""
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '0.5'\n\"\"\"\nclass Solution:\n    def is_odd(self, n: int) -> bool:\n        return n % 2!= 0\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '0.5000000000'\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"3 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(str) == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5, \"exercise1\"\nassert solution(stdin) == 4, \"exercise2\"\nassert solution(stdin) == 2, \"exercise3\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\""
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(read_input()) == \"2\"\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\") == 1\nassert solution(\"2 1 0\") == 1\nassert solution(\"2 0 1\") == 1\nassert solution(\"1 1 1\") == 1\nassert solution(\"1 1 0\") == 1\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('') == 0\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 3 7 3\") == \"2\"\nassert solution(\"1 10 1 3\") == \"3\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"0\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"1\") == \"3\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...nikoand\""
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"nikoand...\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(nikoandsolstice) == 'nikoand...'\nassert solution(nikoandsolstice) == 'nikoand...'\nassert solution(nikoandsolstice) == 'nikoand...'\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"nikoand...nikoand...\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'nikoand...'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(S) == S\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"na na na na\") == \"na na na na\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]) == \"jklmnpqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"\n\n\"n\"\n\"\"\"\"\"\"\nprint(\"Sample Input\")\nprint(\"2\")\nprint(\"Sample Output\")\nprint(\"\")\nprint(\"1\")\nprint(\"\"\"\nnikoand...\n\"\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"stdin is not valid\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"nikoansolstice\"]) == \"nikoansolstice\"\nassert solution([\"nikoansolstice\", \"nikoand\"]) == \"nikoand\"\nassert solution([\"nikoansolstice\", \"nikoand\"]) == \"nikoansolstice\"\nassert solution([\"nikoansolstice\", \"nikoand\", \"nikoand\"]) == \"nikoansolstice\"\nassert solution([\"nikoansolstice\", \"nikoand\", \"nikoand\"]) == \"nikoand\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"apple\") == \"apples\", \"Fail\"\nassert solution(\"apples\") == \"apple\", \"Fail\"\nassert solution(\"apples\") == \"apple\", \"Fail\"\nassert solution(\"apples\") == \"apple\", \"Fail\"\nassert solution(\"apples\") == \"apple\", \"Fail\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"apples\", \"Failed\"\n-----Sample Input-----\nbanana\n\n-----Sample Output-----\nbananas\n\nbananas end with b, so its plural form is bananas.\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(s) == 'apples'\n\n-----Explanation-----\nInput is a string of length 1, meaning the only word ends in s. The suffixes are:\n\neses, es, eseses, es, eseses, es, es, e, eseses, es, eseses, es, eseses, e.\n\nOutput of the program is the plural form of the string s, which ends in e.\n\n-----Sample Input-----\nSample input:\nSample input:\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\nInput for stdin:\napple\nOutput for stdout:\napples\n\n-----Sample Output-----\nSample input:\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\nInput for stdin:\napple\nOutput for stdout:\napples\n\nSample input:\nInput for stdin:\napple\nOutput for stdout:\napples\n\n---- Sample Output ----\nSample input:\nInput for stdin:\napple\nOutput for stdout:\napples\n\n-----Sample Input-----\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\n-----Sample Output-----\nSample input:\nInput for stdin:\napple\nOutput for stdout:\napples\n\n-----Sample Output-----\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\n---- Sample Output ----\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\n-----Sample Output-----\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\n----Sample Output ----\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\n----Sample Output ----\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\n----Sample Output ----\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\napples\n\nInput for stdin:\napple\nOutput for stdout:\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"apples\") == \"apples\"\n\"\"\"\n\nimport collections\nimport math"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('apple') == 'apples'\nassert solution('app') == 'app'\nassert solution('apple') == 'apples'\nassert solution('apple') == 'apples'\nassert solution('app') == 'app'\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"apple\",\"apples\",\"app\"]) == \"apples\"\nassert solution([\"app\",\"app\",\"app\"]) == \"app\"\nassert solution([\"app\",\"app\",\"app\",\"app\",\"app\"]) == \"app\"\nassert solution([\"app\",\"app\",\"app\",\"app\",\"app\",\"app\"]) == \"app\"\nassert solution([\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\"]) == \"app\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 'apples'\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    s=\"apple\") == \"apples\"\nassert solution(\n    s=\"abcd\") == \"abcde\"\nassert solution(\n    s=\"pqrstuv\") == \"prstuvwxyz\"\nassert solution(\n    s=\"a\") == \"a\"\nassert solution(\n    s=\"test\") == \"t\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 'apples', 'output is not the expected string'"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"apples\") == \"apples\"\nassert solution(\"abacus\") == \"ac'a'bac'a'ba'a'c'a'a'ba'a\"\nassert solution(\"babu\") == \"babu\"\nassert solution(\"abac\") == \"abac\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 3\") == \"1\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"\"2\nd_1\nA_{1, 1} \\cdots A_{1, d_1}\n\\vdots\nd_K\nA_{K, 1} \\cdots A_{K, d_K}\n\nd_2\nA_{1, 2} \\cdots A_{1, d_2}\n\\vdots\nd_K\nA_{K, 2} \\cdots A_{K, d_K}\n\nd_3\nA_{1, 3} \\cdots A_{1, d_3}\n\\vdots\nd_K\nA_{K, 3} \\cdots A_{K, d_K}\n\n\"\"\") == \"1\"\n\n-----Sample Input-----\n2 3\n3 2\n2\n1 4\n3\n\n-----Sample Output-----\n2\n\n\"\"\"\n)\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4 1 3\") == \"1\"\nassert solution(\"2 1 3 4 5\") == \"3\"\nassert solution(\"1 2 1 3 4 5\") == \"4\"\nassert solution(\"2 1 3 4 5\") == \"0\"\nassert solution(\"2 4 1 3\") == \"0\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 20 30 20 60 30 40 50 10 30 20 40 20 40 60 30 60 30 70 10 20 50 10 20 20 50 10 20 60 30 50 30 30 30 30 60 30 50 60 30 60 30 60 30 60 30 30 30 30 30 30 30 30\") == \"1\"\nassert solution(\"1 3 2\") == \"3\"\nassert solution(\"6 3 4 5\") == \"5\"\nassert solution(\"3 4 2 4 1\") == \"1\"\nassert solution(\"3 4 5 3 1\") == \"1\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\n\nimport sys\nimport io\nimport os\n\nsys.setrecursionlimit(10 ** 7)\ninput = io.StringIO.readline\n\nN, K = map(int, input().rstrip().split())"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\n'''\n\nimport sys\nimport time\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 2) == 1\nassert solution(2, 1) == 1\nassert solution(3, 3) == 1\nassert solution(3, 3) == 0"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n-----Explanation-----\nGiven the standard input, which is a string of lines separated by a single space, the function will return the number of Snuke 1 who have Snack 1.\n\nExample:\nInput:\n3 2\n2\n1 3\n1\n3\n\nOutput:\n1\n\nExplanation:\nThe three Snuke 1 have Snack 1.\n\nExample:\nInput:\n1\n1\n1\n3\n\nOutput:\n0\n\nExplanation:\nThe Snuke 1 who have Snack 1 does not have Snack 2.\n\nExample:\nInput:\n2\n2\n2\n2\n\nOutput:\n0\n\nExplanation:\nThe Snuke 1 who have Snack 1 and Snack 2 does not have any Snacks.\n\nExample:\nInput:\n1\n1\n2\n1\n\nOutput:\n0\n\nExplanation:\nThe Snuke 2 has no snacks.\n\n'''\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 5\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"5\"\n\n\n\n=====Good Strategy=====\n\n2^(N-1)\n\nhttps://towardsdatascience.com/how-to-define-n-strategies-to-generate-slimes-in-python-b88fe9d2de2a\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()\n) == 10\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(s) == 5, 'Wrong answer'\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == 2, \"solution(3) should return 2\"\nassert solution(2) == 1, \"solution(2) should return 1\"\nassert solution(1) == 0, \"solution(1) should return 0\"\nassert solution(10) == 3, \"solution(10) should return 3\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"aabbbbaaca\") == 5\nassert solution(\"aaabbbcaaa\") == 4\nassert solution(\"aaaaaaaa\") == 3\nassert solution(\"aabbbbabbb\") == 1\nassert solution(\"aabbbbbabab\") == 0\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(solution) == '5'\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 5\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"15\"\nassert solution(input()) == \"15\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 4\") == \"3\"\nassert solution(\"5 2 4\") == \"3\"\nassert solution(\"5 2 3 4\") == \"5\"\nassert solution(\"5 2 5 4\") == \"5\"\nassert solution(\"5 2 4\") == \"5\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 4\") == \"3\"\nassert solution(\"5 2 4\") == \"5\"\nassert solution(\"5 3 4\") == \"15\"\nassert solution(\"5 2 4\") == \"45\"\nassert solution(\"5 3 4\") == \"135\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 5\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 5 2 4\"\n) == 8\nassert solution(\n    \"5 4 2 3 4 5\"\n) == 1\nassert solution(\n    \"5 2 4\"\n) == 5\nassert solution(\n    \"5 3 4 2\"\n) == 3\nassert solution(\n    \"5 3 4 2 3 4\"\n) == 7\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 2 4\") == \"3\"\nassert solution(\"5 2 4 3\") == \"3\"\nassert solution(\"5 2 4 5\") == \"3\"\nassert solution(\"5 2 4 6\") == \"3\"\nassert solution(\"5 2 4 7\") == \"3\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('12345') == '5'\nassert solution('1123') == '2'\nassert solution('1-3-14') == '23'\nassert solution('1-3-2') == '3'\nassert solution('1-3-1') == '4'\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 5 2 4\") == \"3\"\nassert solution(\"5 3 2 4\") == \"3\"\nassert solution(\"5 6 2 4\") == \"3\"\nassert solution(\"5 7 2 4\") == \"3\"\nassert solution(\"5 8 2 4\") == \"3\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 1, 1, 1, 1) == 1\nassert solution(3, 1, 1, 1, 1) == 3\nassert solution(15, 6, 2, 1, 1) == 15\nassert solution(45, 3, 6, 1, 1) == 6\nassert solution(135, 9, 3, 1, 1) == 13\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"2 1 1 3\"\n) == \"2\"\n\nassert solution(\n    \"2 2 1 3\"\n) == \"3\"\n\nassert solution(\n    \"2 1 1 2\"\n) == \"4\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"A A 1 1 1 -1 -1 -1 0 1 1 1\") == \"2\"\n\n---------------Code-------------------"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input()\n) == \"3\""
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1 1 0) == 1\nassert solution(2 1 1) == 2\nassert solution(2 0 0) == 2\nassert solution(2 1 1) == 3\nassert solution(0 1 0) == 0\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 3 1') == '2'\nassert solution('1 2 1') == '2'\nassert solution('1 3 -1') == '1'\nassert solution('1 3 0') == '2'\nassert solution('1 3 0 1') == '3'\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\"2\", \"1\", \"1\", \"3\", \"1\"]\n) == \"2\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('3 4') == 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \n    \n    ) == \"Yes\"\n    pass\n    "
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 8') == 'Yes', \"Wrong answer\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\nassert solution(\"2 2\") == \"No\"\nassert solution(\"3 3\") == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"X Y\"\n    ) == \"Yes\"\nassert solution(\n    \"X\"\n    ) == \"No\"\nassert solution(\n    \"X X\"\n    ) == \"No\"\nassert solution(\n    \"X X X\"\n    ) == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 4 8\") == \"Yes\"\nassert solution(\"1 1 2 3 4 5 8 9 10 12\") == \"No\"\nassert solution(\"3 8\") == \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"Yes\" or \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'Yes'\n\nInput format:\n\nThe first line contains an integer, X.\n\nThe second line contains an integer, Y.\n\nThe third line contains an integer, N.\n\nThe fourth line contains an integer, M, denoting the number of cranes and turtles in the garden.\n\nThe fifth line contains M space separated integers, where each integer represents the number of legs of the crane in that number of legs.\n\nConstraints:\n1 \\leq X \\leq 100\n1 \\leq Y \\leq 100\n1 \\leq N \\leq 100000\n1 \\leq M \\leq 100\n\nOutput Format:\nPrint \"Yes\" if there is a combination of numbers of cranes and turtles in which the statement is correct, otherwise print \"No\".\n\nSample Input:\n2\n5\n2 2\n7\n2 4\n5\nSample Output:\nYes\n\nExplanation:\n1. There are two cranes and two turtles.\n2. There is a combination of numbers of cranes and turtles in which the statement is correct.\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"3 6\") == \"No\""
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nThe given graph is shown in the following figure:\nThe following two paths satisfy the condition:\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\nExplanation\nGiven the following undirected graph, the following path satisfies the condition:\nFigure 1: an example of an undirected graph\nThe following path shown in Figure 2 satisfies the condition.\nFigure 2: an example of a path that satisfies the condition\nHowever, the following path shown in Figure 3 does not satisfy the condition, because it does not start from vertex 1.\nFigure 3: an example of a path that does not satisfy the condition\nNeither the following path shown in Figure 4, because it does not start from vertex 1.\nFigure 4: another example of a path that does not satisfy the condition\n\nThe given graph is shown in the following figure:\nThe following two paths satisfy the condition:\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('ABCDE') == 'A2B1C2D3E'\nassert solution('ABCDEF') == 'A2B1C2D3E1'\nassert solution('ABCDEFG') == 'A2B1C2D3E1F'\nassert solution('ABCDEFGABC') == 'A2B1C2D3E1F2'\nassert solution('ABCDEFGABCD') == 'A2B1C2D3E1F3'\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(string) == \"4\"\nassert solution(string) == \"2\"\nassert solution(string) == \"0\"\nassert solution(string) == \"3\"\nassert solution(string) == \"1\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n\nSee https://www.hackerrank.com/challenges/graph-theory/problem\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 7, \"There is no path with a self-loop\"\n\nThe given graph is shown in the following figure:\nThe following two paths do not satisfy the condition:\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"2\"\n\nFor Example\n2\n1\n2\n2\n1\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"2\"\n\nprint(input)\nprint(type(input))\nprint(type(input.split()))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(input.split())\nprint(type(input.split()))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input)\nprint(type(input.split(' ')))\nprint(type(input.split(' ')))\n\nprint(input"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1,2,3,4,5') == '18'\nassert solution('1,2,3,4,5,6') == '18'\nassert solution('4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5 2) == 18\nassert solution(5) == 17\nassert solution(4) == 1\nassert solution(3) == 3\nassert solution(1) == 0\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, 2) == 18\nassert solution(5, 4) == 8\nassert solution(5, 5) == 14\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"18\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"18\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"18\""
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['5', '2']) == '18'\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 2') == '18'\nassert solution('5 5') == '21'\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2,5) == 4\nassert solution(2,4) == 8\nassert solution(5,3) == 3\nassert solution(5,3) == 9\nassert solution(1,1) == 0\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, 2) == 18\nassert solution(5, 4) == 6\nassert solution(5, 3) == 6\nassert solution(5, 1) == 18\nassert solution(5, 1) == 18\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"5 3\") == \"13\"\nassert solution(\"1 7\") == \"21\"\nassert solution(\"2 5\") == \"28\"\nassert solution(\"3 8\") == \"31\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    input(\"Input string: \\n\")) == \"60\""
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(0) == '1'\nassert solution(1) == '2'\nassert solution(5) == '14'\nassert solution(10) == '40'\nassert solution(15) == '60'"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 60, \"solution is not correct\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '60'\n\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()), \"fail\"\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '60'\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 60\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"5\"\n) == \"60\"\nassert solution(\n    \"10\"\n) == \"61\"\nassert solution(\n    \"15\"\n) == \"62\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 60\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '8'\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 6 4 10 1 2\") == \"8\"\nassert solution(\"6 7 3 1 4 1\") == \"8\"\nassert solution(\"5 10 3 4 7\") == \"8\"\nassert solution(\"4 4 2\") == \"3\"\nassert solution(\"5 5 1\") == \"1\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"8\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('8') == '8'\nassert solution('3 4 6 9') == '3'\nassert solution('0 0 0') == '0'\nassert solution('3 7 10 6 5') == '7'\nassert solution('2 2 2') == '0'\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('4 7 10 6 5') == '8'\nassert solution('4 6 5 8 2') == '8'\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"8\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"1 2 3 4 5\") == \"1\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(<sample input>), '<sample input>'\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 3 2\") == 2\nassert solution(\"4 7 10 6 5\") == 2\nassert solution(\"4 7 10 6 5 1\") == 2\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"2 4 3\") == \"2\"\nassert solution(\"4 7 6 5\") == \"4\"\nassert solution(\"5 8 9\") == \"8\"\nassert solution(\"5 5 5 5 5\") == \"5\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\n\n\nimport sys\n\ninput = sys.stdin.readline"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    input:\n    \"3 2\\n2 1\\n\"\n    \"2\\n1\\n\")) == \"1\"\nassert solution(\n    input:\n    \"1\\n1\\n1\\n1\\n\") == \"1\"\nassert solution(\n    input:\n    \"1\\n1\\n2\\n\"\n    \"1\\n2\\n\")) == \"1\"\nassert solution(\n    input:\n    \"1\\n1\\n1\\n1\\n\") == \"1\"\nassert solution(\n    input:\n    \"1\\n1\\n2\\n\"\n    \"1\\n2\\n\")) == \"1\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('1 1 1') == '3'\nassert solution('2 1 3') == '3'\nassert solution('2 1 2') == '3'\nassert solution('2 2 2') == '3'\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n\n-----Sample Input-----\n2 2\n1 1\n\n-----Sample Output-----\n1\n\nThere are 2 rows and 1 column of cells. When two rows and one column are chosen and painted in black, there is always one white cell that remains.\n\"\"\"\n\nfrom collections import defaultdict\n\nH, W = map(int, stdin.strip().split())\ngrid = []\n\nfor _ in range(H):\n    grid.append(list(map(int, stdin.strip().split())))"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    input:\n    \"1 2\"\n) == 1\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 1') == '1'\nassert solution('5') == '2'\nassert solution('6') == '2'\nassert solution('7') == '1'\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == 3\nassert solution(\"2 2 1\") == 1\nassert solution(\"1 2 1 3\") == 1\nassert solution(\"1 1 1 1\") == 1\nassert solution(\"1 2 2 2 2 2 2\") == 6\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 5\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \n\n)\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(7, 3) == 6\nassert solution(7, 7) == -1\n\nassert solution(7, 4) == 6\nassert solution(7, 5) == 6\n\nassert solution(7, 6) == 6\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5 10 20') == '-1'\nassert solution('6') == '-1'\nassert solution('3 7 5 1 10 3 20') == '6'\nassert solution('4 2 7 10 20') == '6'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-1'\nprint(stdin)\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"7 3 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\") == \"1\"\n\n\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"7 4\",\n    \"3 7 5 1 10 3 20\",\n    \"6\"\n) == \"6\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= k <= n\n1 <= a_i < 10^9\n\n\n-----Tips-----\n- Suppose that you have a sequence of integers $a_1, a_2, \\dots, a_n$ and you want to check whether every element is less than or equal to $x$.\n- If there are no such $x$, print \"-1\" (without quotes).\n- If a sequence is valid, then you can print any integer number $x$ in the range of $[1; 10^9]$.\n\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\"]) == \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"-1\""
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['5', '8', '*', '.']) == 3\nassert solution(['5', '8', '*', '.', '.']) == -1\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\n\n\n-----Notes-----\n\nTime complexity: O(N^2)\nSpace complexity: O(N^2)\n\n\n-----Brute Force---\n\nTime complexity: O(N^2)\nSpace complexity: O(N^2)\n\n\n-----Leetcode---\n\nTime complexity: O(N^2)\nSpace complexity: O(1)\n\n[Time limit exceeded]\n\n\n-----Medium-English---\n\nTime complexity: O(N^3)\nSpace complexity: O(1)\n\n\n\n-----Easy---\n\nTime complexity: O(N^3)\nSpace complexity: O(N^2)\n\n[Time limit exceeded]\n\n\n\n-----Medium-Python---\n\nTime complexity: O(N^3)\nSpace complexity: O(N^2)\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]\n\n[Time limit exceeded]"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"6 8\") == \"3 3 1\"\nassert solution(\"5 5\") == \"3 5 1\"\nassert solution(\"5 5\") == \"3 5 1\"\nassert solution(\"5 5\") == \"3 5 1\"\nassert solution(\"5 5\") == \"3 5 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3 4 1\"\nassert solution(stdin) == \"3 5 2\"\nassert solution(stdin) == \"3 5 1\"\nassert solution(stdin) == \"3 4 1\"\nassert solution(stdin) == \"3 4 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-1'\n\nOutput\n3\n3 4 1\n3 5 2\n3 5 1\n\n-----Constraints-----\n\n1 <= stdin.length <= 20\n\n1 <= k <= n * m <= 100\n\n-1<= k,n,m<=100\n\n-----Time Limit-----\n\nO(n*m)\n\nIf you finish all your code, you should have run for at least one test case (in the example below) and the whole test case run.\n\nIt is guaranteed that there is at least one solution.\n\n\n\n\"\"\"\n\nclass Solution:\n    def solve(self, n, m, k):\n        pass\n        \nsolution(6, 5, 5)\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\n-----Be Happy----\n\n\"\"\""
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3 4 1\"\nassert solution(stdin) == \"3 5 2\"\nassert solution(stdin) == \"3 5 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"6 8\"\n    \"....*...\\n\"\n    \"...**...\\n\"\n    \"..*****.\\n\"\n    \"..*****.\\n\"\n    \".*...*..\\n\"\n    \".**.****\\n\"\n    \"..*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \"........\\n\"\n    ) == \"-1\"\nassert solution(\n    \"5 5\"\n    \"....*...\\n\"\n    \"..*..*..\\n\"\n    \"..**.****\\n\"\n    \".*...*..\\n\"\n    \"....*...\\n\"\n    \".......*\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \"........\\n\"\n    ) == \"2\"\nassert solution(\n    \"3 3\"\n    \"....*...\\n\"\n    \"..*..*..\\n\"\n    \"..**.****\\n\"\n    \".*...*..\\n\"\n    \"....*...\\n\"\n    \".......*\\n\"\n    \".*..*..\\n\"\n    \"..*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \"........\\n\"\n    ) == \"3\"\nassert solution(\n    \"5 5\"\n    \"....*...\\n\"\n    \"..*..*..\\n\"\n    \"..**.****\\n\"\n    \".*...*..\\n\"\n    \"....*...\\n\"\n    \".......*\\n\"\n    \"..*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \"........\\n\"\n    ) == \"3\"\nassert solution(\n    \"6 8\"\n    \"....*...\\n\"\n    \"...**...\\n\"\n    \"..*****.\\n\"\n    \"..*****.\\n\"\n    \".*...*..\\n\"\n    \"..***..\\n\"\n    \"..***..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \".*..*..\\n\"\n    \"........\\n\"\n    ) == \"3\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == \"def\"\nassert solution(4) == \"aabc\"\nassert solution(0) == \"def\"\nassert solution(3) == \"abc\"\nassert solution(0) == \"def\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 0, f\"{1} should be 0\"\nassert solution(3) == 3, f\"{3} should be 3\"\nassert solution(0) == 0, f\"{0} should be 0\"\nassert solution(1) == 1, f\"{1} should be 1\"\nassert solution(3) == 3, f\"{3} should be 3\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0, \"Minimum 3 characters are not in the string\"\nassert solution(stdin) == 1, \"More than one character are in the string\"\nassert solution(stdin) == 2, \"Not enough characters are in the string\"\nassert solution(stdin) == 3, \"Not enough characters are in the string\"\nassert solution(stdin) == 4, \"String is already good\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"good\") == \"good\"\nassert solution(\"bad\") == \"def\"\nassert solution(\"aab\") == \"abc\"\nassert solution(\"ab\") == \"def\"\nassert solution(\"abc\") == \"abcd\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == solution('good')\nassert solution(stdin) == solution('aabc')\nassert solution(stdin) == solution('aaa')\nassert solution(stdin) == solution('aaaa')\nassert solution(stdin) == solution('aaaa')\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(sys.stdin.readline().strip()) == 2\nassert solution(sys.stdin.readline().strip()) == 3\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 'def'\nassert solution(input()) == 'gh'\nassert solution(input()) == 'gh'\nassert solution(input()) == 'bc'\nassert solution(input()) == 'cb'\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"defa\"\nassert solution(input()) == \"a\"\nassert solution(input()) == \"abc\"\nassert solution(input()) == \"abc\"\nassert solution(input()) == \"aaaa\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\nprint(stdin)"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'def'\nassert solution(stdin) == 'abc'\nassert solution(stdin) == 'ab'\nassert solution(stdin) == 'def'\nassert solution(stdin) == ''\n\nExplanation\n\nstdin -> string\n\nInput\n4\ngood\n\nOutput\n0\ngood\n\nInput\n3\naaaa\n\nOutput\n3\naaaa\n\nInput\n3\naaa\n\nOutput\n2\naaaa\n\nInput\n4\naaaaaaaaaaa\n\nOutput\n0\naaaaaaa\n\nInput\n4\naaaaaaaaaaa\n\nOutput\n0\naaaaaaa\n\nExplanation\n\nstdin -> string\n\nInput\n4\ngood\n\nOutput\n3\nbad\n\nInput\n3\naaa\n\nOutput\n1\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"11\"\nassert solution(\"2 4 1 5\") == \"11\"\nassert solution(\"3 1 1\") == \"11\"\nassert solution(\"3 4 1\") == \"11\"\nassert solution(\"3 5\") == \"11\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n------Constraints-----\n\n1 <= stdin.length <= 10^5\n2 <= n,m <= 10^5\n2 <= u_i, v_i <= n-1, m\n\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u_i, v_i <= n\nedges is in standard form.\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"NO\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n'''"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"0\"\n\n\n-----My Answer-----"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('0') == '0', '1 does not belong to any segment'\nassert solution('1') == '0', '2 does not belong to any segment'\nassert solution('2') == '0', '3 does not belong to any segment'\nassert solution('3') == '0', '4 does not belong to any segment'\nassert solution('4') == '0', '5 does not belong to any segment'\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 5\",\n    \"2 2\",\n    \"1 2\",\n    \"5 5\"\n) == \"0\"\nassert solution(\n    \"1 7\",\n    \"1 7\",\n    \"5 5\",\n    \"3 5\"\n) == \"2\"\nassert solution(\n    \"2 1\",\n    \"1 1\",\n    \"1 2\",\n    \"2 2\",\n    \"2 3\",\n    \"2 4\"\n) == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\"]) == \"0\"\nassert solution([\"2\", \"5\"]) == \"0\"\nassert solution([\"1\", \"3\"]) == \"1\"\nassert solution([\"2\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\n-----Constraints-----\n1 <= n, m <= 10^4\n\n-----Algorithm-----\nThe algorithm is:\n\n1. Set the minimum number of segments and the minimum coordinate of any segment.\n\n2. Keep track of the minimum number of segments that can be formed.\n\n3. Add all the points that do not belong to any segment.\n\n4. Delete any points that belong to any segment.\n\n5. If a point does not belong to any segment, print it's index in the list.\n\n-----Time Complexity-----\n\nTime complexity: O(n)\n\nSpace complexity: O(n)\n\nExample:\n\nInput:\n3 5\n2 2\n1 2\n5 5\n\nOutput:\n2\n3 4 \n\nExplanation:\n\nFirst, we add the points 1, 2, and 5. The minimum number of segments is 2, so we can have exactly 2 points. The second minimum is the point 2, so we can have two points.\n\nFor the second point, we delete the point 2, because we can have only one point.\n\nFor the third point, we remove the point 5, because we can have two points.\n\nFor the fourth point, we delete the point 5, because we can have three points.\n\nFor the fifth point, we delete the point 5, because we can have four points.\n\nThe code snippet above says that we have three points, each with an index of 2, which means we add one to the minimum number of segments, and the second minimum number of segments, which are 2, 3, and 4, respectively.\n\nWe then delete the points 2, 5, and 4, because they belong to the second segment, and we have four points, all of which belong to the third segment.\n\nTo see how many pairs of points we can form, we need to look at all the points in the segment that do not belong to any segment, and for each of those points we need to find all the segment numbers that do not belong to any segment.\n\nIn other words, we need to know the minimum number of segments that must be formed to get all points to belong to any segment. So, we need to find all the segment numbers that do not belong to any segment.\n\nThe list is stored as a hash table, where the key is the index of the segment, and the value is the minimum number of segments. For example, the table stores all the segments that do not belong to any segment.\n\nThe hash table is the default implementation of a dictionary. In a function, a function is a linear time operation.\n\nExample:\n\nInput:\n3 5\n2 2\n1 2\n5 5\n\nOutput:\n2\n3 4 \n\nExplanation:\n\nWhen adding the points 1, 2, and 5, we add the index of the segment 1, 2, and 5.\nIf we remove the points 2, 5, and 4, we only have one segment, and thus, it is represented as 1.\nIf we remove the points 5, 2, and 3, we only have two segments, and thus, it is represented as 2.\nIf we remove the points 5, 2, and 4, we only have three segments, and thus, it is represented as 3.\n\nSince the code snippet above does not include the code that removes points 2, 5, and 4, it is represented as 3.\n\nIf we remove the points 1, 2, and 5, it is represented as 5.\n\nSince the code snippet above does not include the code that removes points 5, 2, and 3, it is represented as 4.\n\nSo, we need to construct a map from the index of the segment to the minimum number of segments that must be formed.\n\nThe map is the default implementation of a dictionary. In a function, a function is a linear time operation.\n\nExample:\n\nInput:\n3 5\n2 2\n1 2\n5 5\n\nOutput:\n2\n3 4 \n\nExplanation:\n\nIn the case of the two segments, only one of them must belong to any segment.\n\nSince the code snippet above does not include the code that removes points 2, 5, and 4, it is represented as 5.\n\nIn the case of the three segments, we need to construct a map from the index of the segment to the minimum number of segments that must be formed.\n\nThe map is the default implementation of a dictionary. In a function, a function is a linear time operation.\n\nExample:\n\nInput:\n3 5\n2 2\n1 2\n5 5\n\nOutput:\n2\n3 4 \n\nExplanation:\n\nIn the case of the two segments, only one of them must belong to any segment.\n\nSince the code snippet above does not include the code that removes points 2, 5, and 4, it is represented as 5.\n\nIn the case of the three segments, we need to construct a map from the index of the segment to the minimum number of segments that must be formed.\n\nThe map is the default implementation of a dictionary. In a function, a function is a linear time operation.\n\nExample:\n\nInput:\n3 5\n2 2\n1 2\n5 5\n\nOutput:\n2\n3 4 \n\nExplanation:\n\nIn the case of the two segments, only one of them must belong to any segment.\n\nSince the code snippet above does not include the code that removes points 2, 5, and 4, it is represented as 5.\n\nIn the case of the three segments, we need to construct a map from the index of the segment to the minimum number of segments that must be formed.\n\nThe map is the default implementation of a dictionary. In a function, a function is a linear time operation.\n\nExample:\n\nInput:\n3 5\n2 2\n1 2\n5 5\n\nOutput:\n2\n3 4 \n\nExplanation:\n\nIn the case of the two segments, only one of them must belong to any segment.\n\nSince the code snippet above does not include the code that removes points 2, 5, and 4, it is represented as 5.\n\nIn the case of the three segments, we need to construct a map from the index of the segment to the minimum number of segments that must be formed.\n\nThe map is the default implementation of a dictionary. In a function, a function is a linear time operation.\n\nExample:\n\nInput:\n3 5\n2 2\n1 2\n5 5\n\nOutput:\n2\n3 4 \n\nExplanation:\n\nIn the case of the two segments, only one of them must belong to any segment.\n\nSince the code snippet above does not include the code that"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 2 3 4 5 6') == '1 3 4 6 7'\nassert solution('2 3 1 5 6 7') == '1 2 3 6 7'\nassert solution('2 3 2 2 2') == '2 3 2 2 2'\nassert solution('1 2 2 2 2') == '0'\nassert solution('1 2 2 1 2') == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"4\", \"9\", \"2\", \"3\"]) == \"2\"\nassert solution([\"4\", \"9\", \"2\", \"1\"]) == \"2\"\nassert solution([\"2\", \"4\", \"5\", \"2\"]) == \"2\"\nassert solution([\"2\", \"3\", \"1\", \"5\"]) == \"2\"\nassert solution([\"1\", \"4\", \"2\", \"3\"]) == \"2\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4 9 2 3') == 2"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(<sample input>) == '2'\nassert solution(<sample input>) == '2'\nassert solution(<sample input>) == '2'\nassert solution(<sample input>) == '2'\nassert solution(<sample input>) == '2'\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('a 4 9 3') == '1'\nassert solution('a 5 9 3') == '2'\nassert solution('a 6 9 3') == '2'\nassert solution('a 7 9 3') == '2'\nassert solution('a 9 9 3') == '1'\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '4'\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 4 4 4\") == 2\n\"\"\"\na, b, c, d = map(int, input().split())\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5,9,2,3) == 2\nassert solution(5,9,6,4) == 5\nassert solution(6,6,2,3) == 0\nassert solution(0,0,2,0) == 0\nassert solution(3,3,0,0) == 2\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"././a b c d\") == 0\nassert solution(\"././a d b c\") == 0\nassert solution(\"././a f b c\") == 0\nassert solution(\"././a e f c\") == 0\nassert solution(\"././a b e f\") == 0\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '5 7'"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('1234') == 'No'"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == 'Yes'\nassert solution(9) == 'No'\n\"\"\"\nfrom typing import Dict, Union, Any, cast\n\nfrom functools import lru_cache\nfrom collections import Counter\n\nN = int(input())\n\n\n@lru_cache(None)\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('') == 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"Yes\"\nassert solution(10) == \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'Yes'"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(solution(\"123456789\")) == \"Yes\"\nassert solution(\"0123456789\") == \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"34\") == \"Yes\"\nassert solution(\"16\") == \"No\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"5\") == \"No\"\nassert solution(\"12345\") == \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(123456789) == Yes\nassert solution(123456789) == No\n\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(123456789) == Yes\n\n------ Sample Input:\n\n----\n2\n2\n5\n5\n2\n3\n4\n----- Sample Output:\nNo\nNo\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(6) == 1\nassert solution(9) == 1\nassert solution(127) == 7\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"127\"\nassert solution(\"2\") == \"64\"\nassert solution(\"3\") == \"33\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"25\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(127) == 4\nassert solution(98) == 4\nassert solution(126) == 2\nassert solution(15) == 1\nassert solution(127) == 1\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(12) == 4\nassert solution(14) == 3\nassert solution(13) == 0\nassert solution(15) == 0\nassert solution(16) == 0\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '4'\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"127\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(12),'The number of operations is wrong'\nassert solution(1),'The number of operations is wrong'\nassert solution(2),'The number of operations is wrong'\nassert solution(3),'The number of operations is wrong'\nassert solution(4),'The number of operations is wrong'\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(127) == 4\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(123) == 0\nassert solution(34) == 1\nassert solution(9) == 1\nassert solution(100) == 0\nassert solution(4) == 2\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('kyoto') == 'oyoto'\nassert solution('tokyo') == 'oyoto'\nassert solution('kyoto') == 'oyoto'\nassert solution('tokyo') == 'oyoto'\nassert solution('kyoto') == 'oyoto'\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"Yes\" or \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(tokyo) == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\n[output] string\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"KYOTO\") == \"YES\"\nassert solution(\"tokyo\") == \"NO\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"kyoto\",\"tokyo\",\"kyoto\",\"tokyo\"]) == \"Yes\"\nassert solution([\"kyoto\",\"tokyo\",\"tokyo\",\"tokyo\"]) == \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(a=\"cabacc\") == 5\nassert solution(a=\"abc\") == 3\nassert solution(a=\"abcd\") == 1"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n\"\"\"\nfrom typing import Optional\n\nclass Solution:\n    def minChanges(self, S: str, T: str) -> int:\n        # if the substring matches, then we need to change the substring\n        # if the substring doesn't match, then we need to change the substring\n        # if the substring doesn't match, then we need to change all the characters\n        # if substring doesn't match, then we need to add one character\n\n        # maintain a list to keep track of the unique characters\n        unique_chars = set(S)\n        # we need to fill the max_chars dict with the length of the unique_chars\n        max_chars = {}\n        for char in unique_chars:\n            max_chars[char] = len(S)\n\n        # for each char in the string S, if it doesn't match any character in T,\n        # we need to change it\n        # note that we need to add the char in T\n        # we need to add the char in S if it's not in T\n        # if the char is not in T, then we can add it in S\n\n        # if we've filled all the unique chars, then we need to return the min of the unique chars\n        # if we've used all the unique chars, then we need to return 0\n        if len(unique_chars) == len(S):\n            return 0\n\n        # if we need to add any char in T\n        # add any char from the string S to the T\n        # if we have matched T's char in S, then we need to add one char\n        # if we have not matched T's char in S, then we need to add one char\n        # if we have not matched T's char in S, then we need to add T's char\n        # if we have matched T's char in S, then we need to add T's char\n        for char in T:\n            if char in unique_chars:\n                if char in max_chars:\n                    unique_chars.remove(char)\n                else:\n                    unique_chars.add(char)\n                max_chars[char] -= 1\n                if max_chars[char] == 0:\n                    unique_chars.remove(char)\n                    max_chars[char] -= 1\n            else:\n                unique_chars.add(char)\n\n        # if we have not matched any char in S, then we need to add one char\n        # if we have not matched any char in S, then we need to add one char\n        # if we have matched T's char in S, then we need to add T's char\n        # if we have not matched T's char in S, then we need to add T's char\n        # if we have matched T's char in S, then we need to add T's char\n        # if we have not matched T's char in S, then we need to add T's char\n        for char in S:\n            if char not in unique_chars:\n                unique_chars.add(char)\n\n        # if we have matched T's char in S, then we need to add one char\n        # if we have not matched T's char in S, then we need to add one char\n        # if we have matched T's char in S, then we need to add T's char\n        # if we have not matched T's char in S, then we need to add T's char\n        # if we have matched T's char in S, then we need to add T's char\n        # if we have not matched T's char in S, then we need to add T's char\n        # if we have matched T's char in S, then we need to add T's char\n        # if we have not matched T's char in S, then we need to add T's char\n        if len(unique_chars) == len(S):\n            return len(unique_chars)\n\n        return -1"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 2\n    \nInput\n  cabacc\n  aaa\nOutput\n  2\n  3\n\nInput\n  cabacc\n  abc\nOutput\n  3\n  6\n'''\n\nimport itertools\nimport sys"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"cabacc\") == \"1\"\nassert solution(\"aaa\") == \"2\"\nassert solution(\"cba\") == \"3\"\nassert solution(\"acb\") == \"3\"\nassert solution(\"a\") == \"2\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1, \"solution() returns false\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, \"cabacc\") == 1\nassert solution(5, \"abac\") == 1\nassert solution(5, \"baccac\") == 1\nassert solution(5, \"cabac\") == 1\nassert solution(5, \"abc\") == 1\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(s) == 0, \"Found a substring, but it does not have T\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(s) == 5\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 4\n\"\"\"\nimport re"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(s) == '2'\n'''"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1\", \"2\", \"4\"]) == \"4\"\nassert solution([\"1\", \"2\", \"3\"]) == \"3\"\nassert solution([\"2\", \"5\", \"8\"]) == \"5\"\nassert solution([\"2\", \"4\", \"6\"]) == \"6\"\nassert solution([\"1\", \"2\", \"3\", \"3\"]) == \"1\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"8 12 2\") == \"2\"\nassert solution(\"10 4\") == \"4\"\nassert solution(\"9 7\") == \"7\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"9 5\") == \"5\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"2\",\"5\",\"3\",\"1\"]) == \"1\"\nassert solution([\"2\",\"3\",\"3\"]) == \"3\"\nassert solution([\"2\",\"3\",\"6\",\"4\",\"5\"]) == \"5\"\nassert solution([\"4\",\"6\",\"3\",\"1\"]) == \"6\"\nassert solution([\"8\",\"2\",\"5\",\"3\",\"7\"]) == \"8\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input: str\n    ) == \"2\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n\n'''\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"8 12 2\") == 2\nassert solution(\"8 3\") == 3\nassert solution(\"12 2\") == 2\nassert solution(\"3 3\") == 3\nassert solution(\"3 3\") == 3\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('2') == 2\nassert solution('5') == 5\nassert solution('1') == 1\nassert solution('4') == 4\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2020\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(10) == 2020, \"Solution not implemented\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2020'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '10'\n\nassert solution(stdin) == '50'\n\nassert solution(stdin) == '200'"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2020\n-----Sample Output-----\n15\n\nBy exchanging his money so that he gets three 500-yen coins and three 5-yen coins, he gains two 2020 happiness points, which is the maximum number of happiness points that can be earned."
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"500-yen\") == \"2020\"\nassert solution(\"500-yen\") == \"50000\"\nassert solution(\"1000-yen\") == \"40000\"\nassert solution(\"500-yen\") == \"500000\"\nassert solution(\"1000-yen\") == \"1000000\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"Solution to the question is wrong\"\n\"\"\"\n\nimport collections\nfrom typing import Collection\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"incorrect input\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1000-500\") == \"2020\"\nassert solution(\"100-500\") == \"2020\"\nassert solution(\"50-500\") == \"2020\"\nassert solution(\"10-500\") == \"2020\"\nassert solution(\"5-500\") == \"2020\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(X) == 2020\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2020'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 5\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"15\"\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 1 1 2 1') == '5'\nassert solution('2 1 1 2 3') == '7'\nassert solution('1 2 1 2 4') == '3'\nassert solution('2 1 1 2 2') == '5'\nassert solution('1 2 1 2 1') == '2'\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5') == '5'\nassert solution('3') == '2'\nassert solution('3') == '1'\nassert solution('1') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4, 2) == 4\nassert solution(10, 5) == 16\nassert solution(20, 20) == 16\nassert solution(20, 20) == 16\nassert solution(50, 5) == 50\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 4 5\\n4 3 8\\n8 2 10\\n10 3 5\\n10 3 10\\n5 2 5\\n5 2 10\\n8 3 10\\n10 3 10\") == \"5\"\nassert solution(\n    \"1 4 5\\n4 3 8\\n8 2 10\\n10 3 5\\n10 3 10\\n5 2 5\\n5 2 10\\n8 3 10\\n10 3 10\") == \"10\"\nassert solution(\n    \"1 4 5\\n4 3 8\\n8 2 10\\n10 3 5\\n10 3 10\\n5 2 5\\n5 2 10\\n8 3 10\\n10 3 10\") == \"10\"\nassert solution(\n    \"1 4 5\\n4 3 8\\n8 2 10\\n10 3 5\\n10 3 10\\n5 2 5\\n5 2 10\\n8 3 10\\n10 3 10\") == \"5\"\nassert solution(\n    \"1 4 5\\n4 3 8\\n8 2 10\\n10 3 5\\n10 3 10\\n5 2 5\\n5 2 10\\n8 3 10\\n10 3 10\") == \"10\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2\",\"1\",\"4\"]) == \"5\"\nassert solution([\"1\",\"3\",\"2\"]) == \"6\"\nassert solution([\"2\",\"2\",\"3\",\"2\",\"1\",\"1\",\"4\"]) == \"2\"\nassert solution([\"2\",\"3\",\"2\",\"1\",\"3\",\"2\",\"1\"]) == \"3\"\nassert solution([\"1\",\"3\",\"2\",\"1\"]) == \"3\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"15\"\nassert solution(\"1 1\") == \"9\"\nassert solution(\"1 2\") == \"8\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 1\") == \"0\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 10\"\n) == \"3\"\nassert solution(\n    \"2 3\"\n) == \"2\"\nassert solution(\n    \"1 2 3 4 5 6 7 8 9\"\n) == \"4\"\nassert solution(\n    \"1 2 3 4 5 6 7 8 9 10\"\n) == \"1\"\nassert solution(\n    \"2 3 4 5 6 7 8 9 10\"\n) == \"1\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(sample_input) == '3'"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(6,4) == 3\nassert solution(1,6) == 2\nassert solution(3,10) == 1\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == str(3)\n'''"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 10') == 3, \"The function does not return expected result\"\nassert solution('4 10 1') == 3, \"The function does not return expected result\"\nassert solution('4 4 2') == 1, \"The function does not return expected result\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\n\nTODO:\n\n-----Sample Output-----\nSample Input:\n4 10\n\nSample Output:\n3\n\n----Constraints----\n- All values in input are integers.\n- 2 \\leq A \\leq 20\n- 1 \\leq B \\leq 20\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint the minimum number of power strips required.\n\n-----Sample Input-----\n5 5\n\n-----Sample Output-----\n4\n\n2 power strips, each with 4 sockets, extend the socket into 5 empty sockets.\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('12345') == 3\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 10\") == 4\nassert solution(\"5 10 3\") == 4\nassert solution(\"5 10 2\") == 3\nassert solution(\"5 10 1\") == 3\nassert solution(\"5 10 0\") == 2\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('CSR'), \"The given string is not a valid weather forecast\"\nassert solution('CSS'), \"The given string is not a valid weather forecast\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"CSR\",\"CS\",\"SR\"]) == 5\nassert solution([\"CS\",\"CS\",\"CS\"]) == 2\nassert solution([\"CS\",\"CS\",\"CR\"]) == 0\nassert solution([\"CS\",\"CS\",\"C\"]) == 0\nassert solution([\"CS\",\"CS\",\"R\"]) == 3\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"CSS\") == 2, \"f(S, T) should be (1, 2)\"\nassert solution(\"CSR\") == 2, \"f(S, T) should be (1, 2)\"\nassert solution(\"CSS\") == 1, \"f(S, T) should be (1, 2)\"\nassert solution(\"CSR\") == 1, \"f(S, T) should be (1, 2)\"\nassert solution(\"CSS\") == 0, \"f(S, T) should be (0, 0)\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"CSR\", \"CSC\", \"SSR\"]) == 3, \"Expected 3, got {}\".format(3)\nassert solution([\"SSR\", \"CSR\", \"CSC\"]) == 2, \"Expected 2, got {}\".format(2)\nassert solution([\"CSR\", \"CSC\"]) == 1, \"Expected 1, got {}\".format(1)\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"CSR\") == \"2\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"CSS\") == 2\n\nassert solution(\"CSR\") == 2\n\nassert solution(\"CSR\") == 2\n\nassert solution(\"CSS\") == 2\n\nassert solution(\"CSS\") == 2\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"C\", \"R\", \"R\"]) == \"2\"\nassert solution([\"S\", \"C\", \"C\"]) == \"1\"\nassert solution([\"R\", \"C\", \"C\"]) == \"1\"\nassert solution([\"R\", \"C\", \"R\"]) == \"1\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\"CSR\", \"CCW\", \"ACW\", \"CW\"]\n    ) == \"2\"\nassert solution(\n    [\"SSR\", \"CNSR\", \"CSR\", \"CNSR\"]\n    ) == \"3\"\nassert solution(\n    [\"SSR\", \"CNSR\", \"CSR\", \"CNSR\", \"ACW\", \"CNSR\", \"CSR\"]\n    ) == \"4\"\nassert solution(\n    [\"SSR\", \"CNSR\", \"CSR\", \"CNSR\", \"ACW\", \"CNSR\", \"CSR\", \"CNSR\"]\n    ) == \"5\""
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('CSS') == 2\nassert solution('CSR') == 2\nassert solution('SSL') == 2"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '3'\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 5 4 2\") == \"2\"\nassert solution(\"4 3 5 2\") == \"2\"\nassert solution(\"1 3 5 4 2\") == \"2\"\nassert solution(\"5 3 4 2\") == \"2\""
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"4 5 2 3 1\") == \"1\"\nassert solution(\"2 4 5 3 1\") == \"2\"\nassert solution(\"5 5 4 5\") == \"2\"\nassert solution(\"5 3 1\") == \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('p_1 p_2') == 2, \"Expected p_1 p_2, but got {}\".format(solution('p_1 p_2'))\nassert solution('p_1 p_3') == 3, \"Expected p_1 p_3, but got {}\".format(solution('p_1 p_3'))\nassert solution('p_1 p_4') == 5, \"Expected p_1 p_4, but got {}\".format(solution('p_1 p_4'))\nassert solution('p_1 p_5') == 4, \"Expected p_1 p_5, but got {}\".format(solution('p_1 p_5'))\nassert solution('p_1 p_6') == 6, \"Expected p_1 p_6, but got {}\".format(solution('p_1 p_6'))\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 4 2\") == \"2\"\nassert solution(\"6 4 3\") == \"2\"\nassert solution(\"4 4 4\") == \"1\"\nassert solution(\"6 5 4\") == \"1\"\nassert solution(\"3 5 1\") == \"1\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 3 5 4 2\") == \"2\"\nassert solution(\"3 1 5 4 2\") == \"3\"\nassert solution(\"5 4 3 2 1\") == \"4\"\nassert solution(\"1 3 5 4 2\") == \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 4\") == \"2\"\nassert solution(\"1 1 2 4 3\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"2 1 3 4 5\") == \"2\"\nassert solution(\"2 2 3 4 5\") == \"1\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \n    ), \"The function does not return anything\"\n\"\"\"\nimport math"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"8\") == \"5.410\"\nassert solution(\"5\") == \"5.410\"\nassert solution(\"8\") == \"5.410\"\nassert solution(\"5\") == \"5.410\"\nassert solution(\"8\") == \"5.410\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['8', '-2.14 2.06', '-1.14 2.04', '-2.16 1.46', '-2.14 0.70', '-1.42 0.40', '-0.94 -0.48', '-1.42 -1.28', '-2.16 -1.62', '-2.14 -1.62', '-2.16 -1.62', '-1.58 0.66', '-3.24 0.66', '-7.16 0.30', '-7.82 1.24', '8', '6.98 2.06', '6.40 1.12', '5.98 0.24', '5.54 -0.60', '7.16 0.30', '7.82 1.24', '8.34 0.24', '8.74 -0.76', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16']) == '5.410'\nassert solution(['8', '-2.14 2.06', '-1.14 2.04', '-2.16 1.46', '-2.14 0.70', '-1.42 0.40', '-0.94 -0.48', '-1.42 -1.28', '-2.16 -1.62', '-2.14 -1.62', '-2.16 -1.62', '-1.58 0.66', '-3.24 0.66', '-7.16 0.30', '-7.82 1.24', '8', '6.98 2.06', '6.40 1.12', '5.98 0.24', '5.54 -0.60', '7.16 0.30', '7.82 1.24', '8.34 0.24', '8.74 -0.76', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16']) == '6.040'\nassert solution(['8', '-2.14 2.06', '-1.14 2.04', '-2.16 1.46', '-2.14 0.70', '-1.42 0.40', '-0.94 -0.48', '-1.42 -1.28', '-2.16 -1.62', '-2.14 -1.62', '-2.16 -1.62', '-1.58 0.66', '-3.24 0.66', '-7.16 0.30', '-7.82 1.24', '8', '6.98 2.06', '6.40 1.12', '5.98 0.24', '5.54 -0.60', '7.16 0.30', '7.82 1.24', '8.34 0.24', '8.74 -0.76', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16']) == '6.520'\nassert solution(['8', '-2.14 2.06', '-1.14 2.04', '-2.16 1.46', '-2.14 0.70', '-1.42 0.40', '-0.94 -0.48', '-1.42 -1.28', '-2.16 -1.62', '-2.14 -1.62', '-2.16 -1.62', '-1.58 0.66', '-3.24 0.66', '-7.16 0.30', '-7.82 1.24', '8', '6.98 2.06', '6.40 1.12', '5.98 0.24', '5.54 -0.60', '7.16 0.30', '7.82 1.24', '8.34 0.24', '8.74 -0.76', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9.00 0.16', '9."
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"4 2 2.11 1.47 2.45 3.35 2.44 2.60 2.67\"\n    ) == \"12.28\"\nassert solution(\n    \"4 2 2.11 1.47 2.45 3.35 2.44 2.60 2.67\"\n    ) == \"5.478\"\nassert solution(\n    \"4 2 2.11 1.47 2.45 3.35 2.44 2.60 2.67\"\n    ) == \"6.315\"\nassert solution(\n    \"4 2 2.11 1.47 2.45 3.35 2.44 2.60 2.67\"\n    ) == \"5.318\"\nassert solution(\n    \"4 2 2.11 1.47 2.45 3.35 2.44 2.60 2.67\"\n    ) == \"5.507\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"5.410\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"8\") == \"5\"\nassert solution(\"5\") == \"5\"\nassert solution(\"8\") == \"5\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('3') == '3'\nassert solution('9') == '3.5'\nassert solution('4.2.7') == '13.5'\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution == \"5.410\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5.620\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"8\") == 5.410, \"test case 1 failed\"\nassert solution(\"5\") == 5.620, \"test case 2 failed\"\nassert solution(\"8\") == 5.480, \"test case 3 failed\"\nassert solution(\"8\") == 6.040, \"test case 4 failed\"\nassert solution(\"8\") == 6.720, \"test case 5 failed\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"5.410\"\nassert solution(\"5\") == \"5.410\"\nassert solution(\"8\") == \"5.410\"\nassert solution(\"5\") == \"5.410\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == min(inp)\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\", \"5\", \"5\", \"5\", \"5\", \"5\"]) == \"1\"\nassert solution([\"5\", \"5\", \"5\", \"5\", \"5\", \"5\"]) == \"2\"\nassert solution([\"5\", \"5\", \"5\", \"5\", \"5\", \"5\"]) == \"2\"\nassert solution([\"5\", \"5\", \"5\", \"5\", \"5\", \"5\"]) == \"2\"\nassert solution([\"5\", \"5\", \"5\", \"5\", \"5\", \"5\"]) == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-1'\n\n-----Constraints-----\n\n1 <= n <= 2^5\n1 <= n <= 10^9\n1 <= a_i <= 10^9\n\n------Time Limit: 0.5 seconds per test------\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    {\n        \"n\": 4,\n        \"a_1\": 2,\n        \"a_2\": 1,\n        \"a_3\": 2\n    }\n) == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 4\nassert solution(stdin) == 4\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '7 3'\nassert solution(input()) == '1 1 1 1 1 2 1 1 2 1 1 1 1 1'\nassert solution(input()) == '1 1 1 1 1 2 1 1 2 1 1 1 1 1'\nassert solution(input()) == '1 1 1 1 1 2 1 1 2 1 1 1 1 1'\n\nprint('solution test passed')"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 2 4 3 1') == '3 1 2'\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= n\n1 <= s_1, s_2, s_3, s_4 <= 10^5\n1 <= s_i < s_n\ns_i <= 2^23\n\nTime Limit: 1 sec\n\n\n-----Discussion-----\nAt most 2^23 permutations are required.\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution( \"10 4\" ) == \"1 3 1 3 4 1 2 2 1 1 1 2 1 2 1 1 2 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 2 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 2 1 1 2 1 2 1 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 2 1 1 1 2 1 2 1 1 2 1 1 2 1 2 1 1 2 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 2 1 1 2 1 2 1 2 1 1 2 1 2 1 1 2 1 1 2 1 2 1 1 1 1 2 1 1 1 2 1 1 1 2 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 2 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 2 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"1 3 1 3 10 3 7 7 12 3\"\nassert solution(\"15 2\") == \"7 3 1 3\"\nassert solution(\"\") == \"\"\nassert solution(\"1 1 1\") == \"1 1 1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == \"1 1 1\"\nassert solution(\"10 3 2 3 4 3 1 1 2 1 1 2 1 1 1 1\") == \"3 3 1 1 1 2 1 1 1 2 1 1 1 1\"\nassert solution(\"15 2 3 2 1\") == \"15 2 3 2\"\nassert solution(\"15 2 3\") == \"15 2\"\nassert solution(\"15 2\") == \"15 2\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 1 1 1 1 1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1 1 1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1 1 1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1 1 1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 3\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 2 3 4\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 2 1 1 1 2 1 1 2 1 1 2 1 1 1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 3 1') == '1 3 1 3'\nassert solution('1 2 3 4 5 3 4 4') == '1 5 1 3'\nassert solution('1 1 1 1 1 2 2 2 2 2') == '1 1 1'\nassert solution('1 3 1 1 2 3 2 3 2 3 2 3 2') == '1 3 1'\nassert solution('1 1') == '1 1'\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input().split()\n) == 5\n\nprint('solution OK')"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '5'\n\nassert solution(input) == '0'\n\nassert solution(input) == '3'\n\nassert solution(input) == '1'\n\nassert solution(input) == '0'"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n\n\n-----Constraints-----\n\n1 <= n, m <= 10^4\n\n\n------IMPORTANT-----\n\nThe problem is solved using a recurrence relation. This means that, for example, if you have one row then all its cells are taken up.\nFor example, if you have 3 columns, then the remaining cells are taken up.\nFor example, if you have 2 rows then the remaining cells are taken up.\nThere are no duplicates in the given matrix.\nTime Limit: O(nm)\nSpace Limit: O(nm)\n\n\"\"\"\nclass Solution:\n    def maxK(self, rows: int, cols: int, k: int) -> str:\n        def getRow(row: int, col: int) -> int:\n            if row > col:\n                return getRow(row, col + 1)\n            if row == col:\n                return 0\n            if row == 0 or col == 0:\n                return 1\n            return getRow(row - 1, col - 1) + 1\n        if rows == cols:\n            return str(k)\n        self.res = str(k)\n        def rec(row: int, col: int) -> str:\n            if row == col:\n                return '0'\n            if row > col:\n                return rec(row, col + 1)\n            if row == 0 or col == 0:\n                return '0'\n            if row == col:\n                return '1'\n            return '{} {}'.format(getRow(row - 1, col), rec(row - 1, col - 1))\n        return rec(rows, cols)\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"3 2\") == \"5\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"5 4\") == \"3\"\nassert solution(\"6 1\") == \"5\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1 2 3 4 5 6 7 8 9\") == \"5\"\nassert solution(\"1 3 1 5\") == \"3\"\nassert solution(\"1 3 1 5\") == \"3\"\nassert solution(\"1 3 1 5\") == \"3\"\nassert solution(\"1 1 2 3 4\") == \"5\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '0'"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution == 0, \"solution failed\"\n\n\"\"\"\n\nn, m = list(map(int, input().split()))"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(6) == \"1\"\nassert solution(5) == \"0\"\nassert solution(10) == \"8\"\n\nassert solution(20) == \"2\"\nassert solution(101) == \"0\""
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"xxxiii\"\n    ), 0\n\n\n-----See also-----\n\nProblem:\n\nhttps://leetcode.com/problems/minimum-number-of-chars-to-remove-from-the-file-name/discuss/1261305/Python-solution-with-explanation\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\nprint(solution(stdin))\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"8\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(solution(\"Codehorses\")) == \"xxxii\"\nassert solution(solution(\"BobSloth\")) == \"BxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxBxB"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\n\n-----Personal info-----\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(str(1000000)) == \"0\"\nassert solution(str(1000000000)) == \"0\"\nassert solution(str(100000)) == \"0\"\nassert solution(str(2)) == \"1\"\nassert solution(str(10)) == \"0\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 8\nassert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0, f\"stdin = {stdin}, solution(stdin) = {solution(stdin)} \"\n\"\"\"\n\nimport string"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"48\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 48"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    [\n    '4',\n    '5',\n    '10',\n    '50'\n    ]) == 48, 'The area of regular dodecagon is 48'\nassert solution(\n    [\n    '3',\n    '10',\n    '50',\n    '1000'\n    ]) == 36, 'The area of regular dodecagon is 36'"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"3\""
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"48\"\nassert solution(\"2\") == \"4\"\nassert solution(\"4\") == \"9\"\nassert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == \"48\"\nassert solution(2) == \"34\"\nassert solution(3) == \"33\"\nassert solution(4) == \"25\"\nassert solution(5) == \"23\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"48\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5\"]) == \"5\"\nassert solution([\"5\", \"5\"]) == \"15\"\nassert solution([\"5\", \"5\", \"5\"]) == \"15\"\nassert solution([\"2\", \"1\", \"5\", \"5\"]) == \"6\"\nassert solution([\"2\", \"1\", \"2\", \"1\", \"2\"]) == \"10\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"48\"\nassert solution(\"1\") == \"3\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"64\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"48\", \"The expected answer is '48'.\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('unsafe') == 'unsafe'\nassert solution('safe') =='safe'\nassert solution('unsafe') == 'unsafe'\nassert solution('safe') =='safe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"unsafe\"\nassert solution(input()) == \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"unsafe\"\n\n\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"unsafe\"\nassert solution(\"2 2\") == \"unsafe\"\nassert solution(\"2 3\") == \"safe\"\nassert solution(\"2 3 2\") == \"safe\"\nassert solution(\"1 1\") == \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"unsafe\"\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"unsafe\"\nassert solution(stdin) == \"safe\"\nassert solution(stdin) == \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"unsafe\""
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"S W\") == \"unsafe\"\nassert solution(\"S W 5\") == \"safe\"\nassert solution(\"S W 4\") == \"safe\"\nassert solution(\"S W 3\") == \"safe\"\nassert solution(\"S W 2\") == \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"unsafe\""
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) =='safe'\n\n-----Sample Input-----\n3\n1 2\n2\n2\n\n-----Sample Output-----\nunsafe\n\nThere are three sheep and two wolves. The number of wolves is not greater than the number of sheep, so they will attack them.\n\n-----Sample Input-----\n1\n2 2\n3\n\n-----Sample Output-----\nunsafe\n\nThere are two sheep and two wolves. The number of wolves is not greater than that of sheep, so they will attack them.\n\n-----Sample Input-----\n2\n1 2\n3\n\n-----Sample Output-----\nsafe\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    {\n    'A': 3,\n    'B': 4,\n    'C': 5,\n    'D': 6\n    }\n    ) == '6'\n    \nassert solution(\n    {\n    'A': 3,\n    'B': 2,\n    'C': 4,\n    'D': 4\n    }\n    ) == '9'\n    \nassert solution(\n    {\n    'A': 2,\n    'B': 3,\n    'C': 2,\n    'D': 1\n    }\n    ) == '24'\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('123') == '6'\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '6'\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stmt) == \"6\"\n\n\n'''"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()), \"expected {}, got {}\".format(\"6\", \"6\")\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(a) == \"6\"\nassert solution(b) == \"14\"\nassert solution(c) == \"18\"\nassert solution(d) == \"23\"\nassert solution(e) == \"30\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 4 5\") == \"6\"\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"3 4 5\\\") == \"6\"\n\n\nclass Solution:\n    def rightTriangle(self, a: int, b: int, c: int) -> int:\n        if a+b < c or b+c < a or a+c < b:\n            return \"Triangle is not right\"\n        elif a == b == c:\n            return \"Equilateral triangle\"\n        elif (a*b) < (c*c):\n            return \"Scalene triangle\"\n        elif (a*c) < (b*b):\n            return \"Isosceles triangle\"\n        else:\n            return \"Isosceles triangle\"\n\n\nprint(Solution().rightTriangle(6, 3, 5))\nprint(Solution().rightTriangle(3, 6, 5))\nprint(Solution().rightTriangle(1, 1, 1))"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin: str) == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('A B C') == '4'\nassert solution('A') == '1'\nassert solution('A') == '1'\nassert solution('A') == '2'\nassert solution('A') == '1'\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 12, 'incorrect solution'\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 11 4\") == \"4\"\nassert solution(\"7 3\") == \"4\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"2 2\") == \"3\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 4\nassert solution(stdin) == 4\nassert solution(stdin) == 4\nassert solution(stdin) == 4\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 11 4\") == \"4\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 3 4\") == \"4\"\nassert solution(\"1 5 1 5\") == \"1\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"4\"\n\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"4\""
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"1 1 0\") == \"2\"\nassert solution(\"1 1 0\") == \"4\"\nassert solution(\"1 1 0\") == \"2\"\nassert solution(\"2 1 0\") == \"2\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 4\nassert solution(input) == 8\nassert solution(input) == 12\nassert solution(input) == 24\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n\n------Quick Sort-----\nA \\times B = sorted array A \\times B"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == 10\nassert solution(\"5 2\") == 10\nassert solution(\"10\") == 10\n\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"10\"\nassert solution(\"10 10\") == \"10\"\nassert solution(\"1 2 2\") == \"10\"\nassert solution(\"1 2 2 3\") == \"11\"\nassert solution(\"1 2 2 3 4\") == \"15\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == 10\nassert solution(\"1 1\") == 2\nassert solution(\"1 2\") == 1\nassert solution(\"1 3\") == 2\nassert solution(\"1 4\") == 2\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 10"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(solution) == \"10\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 7 2\") == 7\nassert solution(\"5 8 9\") == 8\nassert solution(\"4 5\") == 5\nassert solution(\"4 7\") == 7\nassert solution(\"4 7 5\") == 7\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"2 5\") == \"10\", \"solution() failed to print 10\"\nassert solution(\"2 2\") == \"20\", \"solution() failed to print 20\"\nassert solution(\"1 4\") == \"22\", \"solution() failed to print 22\"\nassert solution(\"2 4\") == \"10\", \"solution() failed to print 10\"\nassert solution(\"2 4 2\") == \"22\", \"solution() failed to print 22\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 5') == 10\nassert solution('3 4') == 25\nassert solution('1 2') == 1\nassert solution('3 6') == 6\nassert solution('1 4') == 6\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 5\"\n) == 10\nassert solution(\n    \"2 2\"\n) == 2\nassert solution(\n    \"2 4\"\n) == 0\nassert solution(\n    \"2 6\"\n) == 2\nassert solution(\n    \"1 1\"\n) == 2\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 10\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 4 5\") == \"10\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"4 3 5\") == \"15\"\nassert solution(\"4 4 7\") == \"15\"\nassert solution(\"4 4 6\") == \"22\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 7'), 'Five biscuits must produce six seconds after activation'\nassert solution('3 5 7'), 'Secondary stamrts for five and another five biscuits produce six seconds after activation'\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '6'\n\n\"\"\"\n\nimport sys\nimport math\nfrom collections import deque"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 10\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '13'\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\") == \"12\"\nassert solution(\"3 5 7\") == \"18\"\nassert solution(\"4 2 2 4\") == \"24\"\nassert solution(\"4 4 4 4\") == \"32\"\nassert solution(\"5 4 4\") == \"32\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution((\"7 5\",\"7\",\"5\",\"5\",\"\",\"\",\"\",\"\",\"\",\"\")) == \"10\"\n\n\n-----Sample Input-----\n10 10 10 10\n\n-----Sample Output-----\n10\n\n - All three biscuits will be produced three seconds after activation.\n - All five biscuits will be produced seven seconds after activation.\n - All six biscuits will be produced eight seconds after activation.\n - Thus, a total of ten biscuits will be produced within 10 seconds after activation.\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 5 7\") == \"10\"\nassert solution(\"4 5 7\") == \"10\"\nassert solution(\"4 5 8\") == \"10\"\nassert solution(\"3 5 8\") == \"10\"\nassert solution(\"3 5 9\") == \"10\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 5 7\"\n) == \"10\"\nassert solution(\n    \"3 2 1 0 0 0 0 0 0 0 0 0\"\n) == \"15\"\nassert solution(\n    \"5 5 4\"\n) == \"15\"\nassert solution(\n    \"2 2 3 2 2\"\n) == \"6\"\nassert solution(\n    \"4 4 2\"\n) == \"12\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(str(K)) == str(A) + str(B)\nassert solution(str(A)) == str(A + B)\nassert solution(str(B)) == str(A + B)\nassert solution(str(K)) == str(A) + str(B)\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 4 5 6\") == \"NG\"\nassert solution(\"3 2 4 5 6\") == \"NG\"\nassert solution(\"1 2 3 5\") == \"OK\"\nassert solution(\"1 3\") == \"NG\"\nassert solution(\"2 4 5\") == \"OK\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"OK\"\nassert solution(\"4\") == \"NG\"\nassert solution(\"0\") == \"NG\"\nassert solution(\"2.5\") == \"OK\"\nassert solution(\"4.3\") == \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"7500 600\") == \"OK\"\nassert solution(\"567 600\") == \"NG\"\nassert solution(\"7000 600\") == \"NG\"\nassert solution(\"500 600\") == \"OK\""
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"7500 600\") == \"OK\"\nassert solution(\"100 600\") == \"NG\"\nassert solution(\"900 600\") == \"OK\"\nassert solution(\"1000 600\") == \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"7 500 600\") == \"OK\"\nassert solution(\"7 500 600\") == \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 4 5 6 7 8\") == \"OK\"\nassert solution(\"2 5 6 7 9\") == \"NG\"\nassert solution(\"2 4 5 6 6 7 8 9\") == \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NG\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'OK'\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"OK\"\n\n------------------------------\nPossible Answers\n\nOK\n\nNG\n\"\"\"\n\nimport math"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2.6666...\", \"solution()\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '2.6666666667'\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '2.6666666667'\nassert solution(input()) == '2.6666666667'\nassert solution(input()) == '2.6666666667'\nassert solution(input()) == '2.6666666667'\nassert solution(input()) == '2.6666666667'\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2.6666666667\"\n\n-----Sample Input-----\n3 3\n\n-----Sample Output-----\n1.33333333333\n\n-----Sample Input-----\n2 2\n\n-----Sample Output-----\n3.33333333333\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2.6666666667\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"6 3\") == \"2\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"5 1\") == \"2\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '2'\n'''"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(Input) == '2.6666666667'\nassert solution(Input) == '2.6666666667'\nassert solution(Input) == '2.6666666667'\nassert solution(Input) == '2.6666666667'\nassert solution(Input) == '2.6666666667'\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"2.6666666667\"\n-----Explanation-----\nThe input is given as follows:\nT X\n\nThe output is also given as follows:\n0.6666666667\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '2.6666666667'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"1\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2\", \"1\"]) == \"1\"\nassert solution([\"2\", \"1\", \"3\"]) == \"3\"\nassert solution([\"1\", \"2\", \"3\"]) == \"1\"\nassert solution([\"1\", \"3\", \"2\"]) == \"2\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"6 4 3\") == \"1\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"6\") == \"3\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 4 3') == '2'\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"6\", \"4\", \"3\"]) == \"1\"\nassert solution([\"4\", \"4\", \"3\", \"1\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"10\"\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"10\", \"5\", \"3\", \"1\"]) == \"1\"\nassert solution([\"10\", \"5\", \"1\"]) == \"10\"\nassert solution([\"10\", \"1\", \"5\", \"3\"]) == \"20\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 10 3 4\") == \"2\"\nassert solution(\"5 3 10 4\") == \"1\""
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 5 3\") == 1\nassert solution(\"6 4 3\") == 1\nassert solution(\"1 2 3 4 5 6\") == 3\nassert solution(\"2 3 4\") == 3\nassert solution(\"1 1 1 1 2 2 2\") == 0\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '1'\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1 1 1\", \"1 1 2\", \"1 3 1\", \"1 3 2\", \"1 4 1\", \"1 4 2\", \"1 5 1\", \"1 5 2\"]) == \"3\"\nassert solution([\"1 3 1\", \"1 2 3\", \"1 3 2\", \"1 2 2\", \"1 1 2\", \"1 4 1\", \"1 4 2\", \"1 5 1\", \"1 5 2\"]) == \"5\"\nassert solution([\"1 2 3\", \"1 3 2\", \"1 2 1\", \"1 1 3\", \"1 3 1\", \"1 2 3\", \"1 4 1\", \"1 4 2\", \"1 5 1\", \"1 5 2\"]) == \"3\"\nassert solution([\"1 2 1\", \"1 2 3\", \"1 3 2\", \"1 1 2\", \"1 3 1\", \"1 1 3\", \"1 4 1\", \"1 4 2\", \"1 5 1\", \"1 5 2\"]) == \"5\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"3 1 2 3\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 2\") == \"2\"\nassert solution(\"1 2 1 3\") == \"2\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"3 1 2\") == \"3\"\nassert solution(\"3 1 3\") == \"3\"\nassert solution(\"3 1 4\") == \"3\"\nassert solution(\"1 1 2\") == \"3\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\"\n) == \"3\"\nassert solution(\n    \"(1, 3, 7, 2)\"\n) == \"2\"\nassert solution(\n    \"1 2 3\"\n) == \"2\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1 2 3 4 5 6 7 8 9\") == \"3\"\nassert solution(\"1 1 2 3 4 5\") == \"3\"\nassert solution(\"3 3 4 1 2\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"3\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\n'''\n\n\nclass Solution:\n    def find(self, nums, k):\n        pass\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '3'\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\") == \"3\"\nassert solution(\"3 1 2\") == \"3\"\nassert solution(\"1 2 1\") == \"2\"\nassert solution(\"2 1 1\") == \"1\"\nassert solution(\"3 2 1\") == \"3\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ATCODER\") == \"CODER\"\nassert solution
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"CTCODER\") == \"CCT\"\nassert solution(\"TAC\") == \"CTC\"\nassert solution(\"TACGAT\") == \"CTCGAT\"\nassert solution(\"TC\") == \"CTC\"\nassert solution(\"ATC\") == \"CT\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('ATCODER') == 'A'\nassert solution('ATCODER') == 'A'\nassert solution('CODER') == 'C'\nassert solution('A') == 'A'\nassert solution('AAAA') == 'A'\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"ACATC\") == 3\nassert solution(\"TACATC\") == 6\n\n\n'''\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        i, j = 0, 0\n        max_len = 0\n\n        # i, j is start index of the substring,\n        # max_len is the length of the longest substring\n        # of a given string s\n        while i < len(s) and j < len(s):\n            if s[j] not in \"ACGT\":\n                j += 1\n                continue\n\n            # i, j is the end index of substring,\n            # the longest substring of a given string s\n            if j - i > max_len:\n                max_len = j - i\n\n            i, j = i + 1, j + 1\n\n        return max_len"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 'A'\nassert solution(inp) == 'T'\nassert solution(inp) == 'C'\nassert solution(inp) == 'G'\nassert solution(inp) == 'A'\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['ATCODER', 'TCODER', 'TCODER', 'ACER']), \"one or more ACGT strings that are not a substring of ATCODER, but have a substring of CODER and GAGACGG\"\nassert solution(['ATCODER', 'TCODER', 'TCODER', 'ACER']), \"one or more ACGT strings that are not a substring of ATCODER, but have a substring of CODER and GAGACGG\"\nassert solution(['ATCODER', 'TCODER', 'TCODER', 'ACER']), \"one or more ACGT strings that are not a substring of ATCODER, but have a substring of CODER and GAGACGG\"\nassert solution(['ATCODER', 'TCODER', 'TCODER', 'ACER']), \"one or more ACGT strings that are not a substring of ATCODER, but have a substring of CODER and GAGACGG\"\nassert solution(['ATCODER', 'TCODER', 'TCODER', 'ACER']), \"one or more ACGT strings that are not a substring of ATCODER, but have a substring of CODER and GAGACGG\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(test) == \"A\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '3'\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"9\""
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 1\nassert solution(4) == 2\nassert solution(5) == 3\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"9\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"9\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == 9, \"Incorrect output\"\nassert solution(\"9\") == 4, \"Incorrect output\"\nassert solution(\"9\") == 3, \"Incorrect output\"\nassert solution(\"1\") == 0, \"Incorrect output\"\nassert solution(\"6\") == 2, \"Incorrect output\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"9\"\nassert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"1\"\nassert solution(\"1 5 10\") == \"0\"\nassert solution(\"10 7 8 9\") == \"7\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '9'\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 3\nassert solution(10) == 0\nassert solution(6) == 1\nassert solution(10) == 1\nassert solution(12) == 2\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(f) == \"9\"\nassert solution(e) == \"0\"\nassert solution(x) == \"\"\nassert solution(0) == \"\"\nassert solution(\"1\") == \"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 9\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"111\"\nassert solution(inp) == \"10011\"\nassert solution(inp) == \"10001111100\"\nassert solution(inp) == \"1111111111\"\nassert solution(inp
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(s) == \"5\"\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Solution:\n    def minOperations(self, S, T):\n        m = len(S)\n        n = len(T)\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        #dp[0][0] = 0\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + 1\n        for i in range(1, n):\n            dp[0][i] = dp[0][i-1] + 1\n        for i in range(1, m):\n            for j in range(1, n):\n                if S[i] == T[j]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n        return dp[m-1][n-1]"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('cucoc') == 'hte'\nassert solution('cucod') == 'tte'\nassert solution('cucof') == 'cuu'\nassert solution('cuctco') == 'huu'\nassert solution('cufftte') == 'cuu'\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"cufcoffee\") == \"hcuhcoeftt\"\nassert solution(\"cufcoffee\") == \"cufhttcoe\"\n\"\"\"\n\nfrom collections import Counter\nimport re"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"4\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"57\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"fT\") == \"fT\"\nassert solution(\"dT\") == \"dT\"\nassert solution(\"T\") == \"T\"\nassert solution(\"A\") == \"A\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"cupofcoffee\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupofhottea\", \"cupof"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('h' 'e' 'f' 'c') == '3'\nassert solution('c' 'a' 'f' 'e') == '2'\nassert solution('c' 'f' 'e') == '1'\nassert solution('a' 'c' 'f' 'e') == '3'\nassert solution('g' 'a' 'f' 'e') == '5'\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nassert solution(\"4 3\") == \"5 4 3\"\nassert solution(\"5 4 7\") == \"5 7 4\"\nassert solution(\"5 7 8 9 10\") == \"5 8 9 10\""
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '5 6 7 8 9'"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"./test_cases/day14/input.txt\") == \"5 6 7 8 9\"\nassert solution(\"./test_cases/day14/input2.txt\") == \"5 7 8 9\"\nassert solution(\"./test_cases/day14/input3.txt\") == \"5 6 7 8 9\"\nassert solution(\"./test_cases/day14/input4.txt\") == \"5 7 8 9\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"5 6 7 8 9\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"7 6 8 9\""
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == str(list(map(int,stdin.split())))\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '5 6 7 8 9'\n\"\"\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 6 7 8 9') == '5 6 7 8 9'\nassert solution('3 7') == '3 7'\nassert solution('1 2 3 4 5 6 7 8 9') == '1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin='3 7'\n) == '5 6 7 8 9'\n\nassert solution(\n    stdin='3 5'\n) == '1 5'\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nassert solution(\"3 6 7 8 9\") == \"5 6 7 8 9\"\nassert solution(\"3 7\") == \"5 6 7 8 9\"\nassert solution(\"1 9\") == \"1 9\"\nassert solution(\"1 9 9 9\") == \"1 9 9 9\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"No\" or solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"25\"]) == \"No\"\nassert solution([\"-20\", \"-18\"]) == \"Yes\"\nassert solution([\"-20\", \"-18\", \"-27\", \"-26\", \"-25\"]) == \"Yes\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"1\") == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"5,1,3,2,5,3,2,4,1,5,1,3,2,4,1,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(str(input())) == \"Yes\" or solution(str(input())) == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(st := input()) == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 'No'\nassert solution(2) == 'No'"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == 2\nassert solution(\"1 1\") == 1\nassert solution(\"5 5\") == 1\nassert solution(\"1 2\") == 0\nassert solution(\"2 1\") == 1\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 2') == 2\nassert solution('5 5') == 1\nassert solution('-2 8') == 3\nassert solution('1 2') == 1\nassert solution('5 5') == 0\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Sample Output-----\n1\n\n-----Sample Input-----\n3 2\n1 2\n1 2\n5 5\n-2 8\n\n-----Sample Output-----\n2\n\n-----Sample Input-----\n5 2\n5 5\n-2 8\n\n-----Sample Output-----\n2\n\"\"\""
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 2') == '1'\nassert solution('1 2') == '2'\nassert solution('5 5') == '3'\nassert solution('-2 8') == '2'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"-2 8\") == \"1\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\n\n\nprint('Example 1:')\nprint('Input : ')\nprint('N D')\nprint('X_11 X_12... X_1D')\nprint('X_{21} X_{22}... X_{2D}')\nprint('\\nOutput :')\nprint('1')\n\nprint('Example 2:')\nprint('Input : ')\nprint('5 2')\nprint('-2 8')\nprint('X_5 X_2')\nprint('X_5 X_8')\nprint('-2 -1')\nprint('X_5 -2')\nprint('X_8 X_5')\nprint('-1 -1')\nprint('X_8 X_1')\nprint('-1 -1')\nprint('X_1 X_8')\nprint('-1 -1')\nprint('X_1 X_1')\nprint('-1 -1')\nprint('-1')\nprint('1')\n\nprint('Exception :')\nprint('1')"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('2 2') == '3'\nassert solution('1 2') == '1'\nassert solution('1 2 1') == '1'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3776) == 'Bad'\nassert solution(3776) == 'Good'\nassert solution(3776) == 'Good'\nassert solution(3776) == 'Good'\nassert solution(3776) == 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3776) == 'Bad'\nassert solution(27) == 'Good'\nassert solution('hgq') == 'Good'\nassert solution('s') == 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 'Bad'\nassert solution(4) == 'Good'\nassert solution(444) == 'Good'\nassert solution(123) == 'Bad'\nassert solution(333) == 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1,1,1\") == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3776) == \"Bad\"\nassert solution(7000) == \"Good\"\nassert solution(0) == \"\"\nassert solution(\"\") == \"\""
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s) == 'Good'\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"Hello123\") == \"Good\"\nassert solution(\"Good\") == \"Good\"\nassert solution(\"4444\") == \"Bad\"\nassert solution(\"4444d\") == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1234\") == \"Bad\"\nassert solution(\"123456\") == \"Good\"\nassert solution(\"1123\") == \"Bad\"\nassert solution(\"1237\") == \"Bad\"\nassert solution(\"12345\") == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3776) == \"Bad\", \"3776 is not hard to enter!\"\n\n-----Constraints-----\n - 1 <= S.length <= 100\n\n-----Input-----\nInput is given from stdin. Input is a string of 4 digits in the range of 0-9 inclusive.\n\n-----Output-----\nIf S is hard to enter, print Bad; otherwise, print Good.\n\n-----Sample Input-----\n353474\n\n-----Sample Output-----\nGood\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('4 2 3 4') == 4.0\nassert solution('4 2 3 4 1') == 2.5\nassert solution('4 4 4 1 2 3 4') == 3.5\nassert solution('3 4 4 3 4 3') == 4.5\nassert solution('1 1 1 1 2 3 2') == 2.5\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '3.49999'\nassert solution(input()) == '3.5'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '4'\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"3.50001\", \"incorrect answer\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3 4\") == \"3.5\"\nassert solution(\"2 3 4 2 4 5 6 7 8 9 10\") == \"3.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 5\") == 3.5\nassert solution(\"5 1\") == 3.5\nassert solution(\"1 1\") == 1.5\nassert solution(\"4 4\") == 2.5\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"3.4\"\nassert solution(\"2 3 4\") == \"3.4\"\nassert solution(\"4 2\") == \"4\"\nassert solution(\"5 3 4 6 7 8 9 10\") == \"6.4\"\nassert solution(\"2 4 6 10\") == \"6.4\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3.5\"\nassert solution(input()) == \"3.50001\"\nassert solution(input()) == \"3.49999\"\n\n-----Sample Output-----\nInput\n2\n4 3\n\nOutput\n3.5\n\n-----Constraints-----\n - N \\leq 50\n - 1 \\leq v_i \\leq 1000\n - All values in input are integers\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solve(self, *args):\n        pass\n\n    def __str__(self):\n        pass\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 4 3\") == 3.50001\nassert solution(\"2 1\") == 2.5\nassert solution(\"2 2\") == 2.5\nassert solution(\"3 3\") == 3.5\nassert solution(\"2 1 2\") == 2.5\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3 4 6 7 8 9 10\") == \"3.5\"\nassert solution(\"5 2 3 4 5 7\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"1\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 7\") == \"1.0\"\nassert solution(\"4 3\") == \"0.0\"\nassert solution(\"1 1\") == \"1.0\"\nassert solution(\"4 5\") == \"4.5\"\nassert solution(\"2 3\") == \"2.0\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == str(14)\nassert solution(input().strip()) == str(14)\nassert solution(input().strip().split(\" \")) == str(14)\nassert solution(input().strip().split(\" \").sort()) == str(14)"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '14'\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"14\"\nassert solution(\"2 5 4\") == \"14\"\nassert solution(\"3 6\") == \"14\"\nassert solution(\"4 5 3\") == \"16\"\nassert solution(\"4 6\") == \"17\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '14'"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    Input:\n    3\n    3 1 2\n    2 5 4\n    3 6\n    \"\"\"\n    ), \"Expected 'Expected 1 satisfaction points, got 0\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     3\n    #     3 1 2\n    #     2 5 4\n    #     3 6\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 0\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     2\n    #     2 1 2\n    #     2 3\n    #     3 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 4 satisfaction points, got 2\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     2\n    #     2 1 2\n    #     3 3\n    #     3 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 0\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     1\n    #     1 1 2\n    #     1 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 0\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     2\n    #     1 1 2\n    #     2 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 0\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     2\n    #     1 1 2\n    #     3 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 1\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     2\n    #     1 1 2\n    #     3 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 1\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     2\n    #     1 1 2\n    #     1 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 0\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     2\n    #     1 1 2\n    #     2 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 2\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     2\n    #     1 1 2\n    #     1 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 2\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     1\n    #     2 2\n    #     1 2\n    #     1 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 0\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     2\n    #     2 2\n    #     1 2\n    #     1 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 0\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     1\n    #     2 1\n    #     1 2\n    #     1 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 0\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     1\n    #     2 1\n    #     1 2\n    #     1 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 1\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     1\n    #     2 1\n    #     1 2\n    #     2 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 1\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     2\n    #     2 1\n    #     2 2\n    #     1 2\n    #     1 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 1\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     2\n    #     2 1\n    #     2 2\n    #     2 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 1\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     3\n    #     2 1\n    #     2 2\n    #     2 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 1\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     2\n    #     1 1 2\n    #     2 2\n    #     2 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 1\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     3\n    #     1 1 2\n    #     2 2\n    #     2 3\n    #     1 4\n    #     \"\"\"\n    #     ), \"Expected 'Expected 1 satisfaction points, got 0\"\n    \n    # assert solution(\n    #     \"\"\"\n    #     Input:\n    #     3\n    # "
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"14\"\nassert solution(input()) == \"10\""
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '14'\n\"\"\"\n\nfrom typing import Counter\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"14\"\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"14\""
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '10'\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('ABAB') == 2\nassert solution('ADBC') == 3\nassert solution('ABA') == 1\nassert solution('ABC') == 1\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(10) == 2\nassert solution(4) == 2\nassert solution(9) == 2\nassert solution(3) == 2\nassert solution(0) == 1\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"ZABCDBABCQ\") == 2\nassert solution(\n    \"ABC\") == 2\nassert solution(\n    \"AA\") == 1\nassert solution(\n    \"AB\") == 1\nassert solution(\n    \"BABCQ\") == 3\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(s) == 3, \"abc is not a contiguous sequence\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 2, \"false\"\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\nassert solution(5) == 5\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 9\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"ZABCDBABCQ\", \"ABC\", \"ABC\", \"CBA\"]) == \"2\"\nassert solution([\"ABC\", \"AB\", \"BC\", \"CA\", \"CAB\", \"ABA\", \"BAB\", \"ABB\", \"BBA\", \"AC\", \"CAB\", \"ABA\", \"BAB\", \"ACB\"]) == \"2\"\nassert solution([\"A\", \"A\", \"B\", \"C\", \"A\", \"B\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"C\", \"A\","
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == [\"ABC\", \"ABC\", \"ABC\", \"ABC\", \"ABC\", \"ABC\", \"ABC\"]\nassert solution(\"ABCDBABCQ\") == [\"ABCDBABCQ\", \"ABCDBABCQ\", \"ABCDBABCQ\", \"ABCDBABCQ\", \"ABCDBABCQ\", \"ABCDBABCQ\", \"ABCDBABCQ\"]\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"MASHIKE, RUMOI, HABORO\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(test_input) == \"2\"\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\nSample Output\n2\n\nWe can choose three people with the following names:\n - MASHIKE, RUMOI, OBIRA\n - MASHIKE, RUMOI, HABORO\nThus, we have two ways.\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n-----Sample Execution-----\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\n\n$ python3 solution.py\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\nHOROKANAI\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('MASHIKE') == '2'\nassert solution('RUMOI') == '1'\nassert solution('OBIRA') == '1'\nassert solution('HABORO') == '1'\nassert solution('HOROKANAI') == '1'\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(sampleInput) == \"2\"\n\n'''\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"MASHIKE\") == \"2\"\nassert solution(\"RUMOI\") == \"2\"\nassert solution(\"OBIRA\") == \"2\"\nassert solution(\"HABORO\") == \"3\"\nassert solution(\"HOROKANAI\") == \"3\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 3\"\n) == \"Yes\"\n\nassert solution(\n    \"5 5\"\n) == \"No\"\n\nassert solution(\n    \"8 8\"\n) == \"No\"\n\n-----Sample Input-----\n6 5\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n3 3\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n6 5\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n6 5\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n6 5\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n5 5\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n6 5\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n5 5\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n5 5\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n5 5\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n6 5\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n5 5\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n6 5\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n5 5\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n6 5\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n5 5\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n5 5\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nNo\n\n-----Sample Input-----\n7 7\n\n-----Sample Output-----\nYes\n\n-----Sample Input"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"Yes\", \"solution(...) expected to return Yes\""
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 'Yes'\nassert solution(input) == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 'Yes'\nassert solution(input) == 'No'\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(test_cases) == \"Yes\" or \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"Yes\"\n\ntime out\nruntime: 39 ms\nmemory usage: 0.04 MB\n\nTestcases\n3 3\n'''\nclass Solution:\n    def solution(self, N, M):\n        pass\n\nclass Solution:\n    def solution(self, N, M):\n        pass\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"1 3\") == \"No\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"2 3\") == \"Yes\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"001\") == \"Yes\"\nassert solution(\"001\") == \"Yes\"\nassert solution(\"111\") == \"No\"\nassert solution(\"111\") == \"No\"\nassert solution(\"100\") == \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([]), \"no solution\"\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(sample_input) == 'Yes'\nassert solution(sample_input) == 'No'\nassert solution(sample_input) == 'Yes'\nassert solution(sample_input) == 'No'\nassert solution(sample_input) == 'Yes'\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 'Yes', \"The function does not work\"\nassert solution(input) == 'No', \"The function does not work\"\nassert solution(input) == 'No', \"The function does not work\"\nassert solution(input) == 'Yes', \"The function does not work\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"Ippuu\") == \"No\"\nassert solution(\"AIPuuA\") == \"Yes\"\nassert solution(\"AIPuuA\") == \"No\"\nassert solution(\"PuuAppuP\") == \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('sippuu') == 'No'\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('sippuu') == 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sippuu) == \"Yes\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'Yes'\n\nassert solution(stdin) == 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(sippuu) == Yes\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(sippuu) == \"Yes\"\nassert solution(sippuu) == \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(s) == 'Yes'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(sippuu) == \"Yes\"\nassert solution(sippuu) == \"No\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"TLE\"\nassert solution(input().split()) == \"TLE\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"3 70\") == \"70\"\nassert solution(\n    \"7 60\") == \"60\"\nassert solution(\n    \"1 80\") == \"80\"\nassert solution(\n    \"4 50\") == \"50\"\nassert solution(\n    \"3 7\") == \"TLE\"\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.cost = []\n        self.t_i = 0\n        self.N = int(input())\n        self.T = int(input())\n        self.c = [int(i) for i in input().split()]\n        self.t_1 = int(input())\n        self.t_2 = int(input())\n        self.route = [int(i) for i in input().split()]\n        self.pr = []\n\n    def cost(self, x, y):\n        return self.c[x] + self.c[y]\n\n    def t_i(self, x, y):\n        return self.t_1 + self.t_2\n\n    def solve(self, route):\n        self.route.insert(0, self.route[0])\n        self.route.append(route[0])\n        self.pr.append([self.cost(i, j) for i in range(self.N) for j in range(self.N)])\n        for i in range(self.N):\n            for j in range(self.N):\n                if i == j:\n                    continue\n                if self.cost(i, j) > self.cost(route[i], route[j]):\n                    self.cost(i, j)\n                    self.t_i(i, j)\n\n    def dfs(self, n):\n        if n == self.N:\n            return\n        self.route.append(n)\n        self.pr.append([self.cost(i, n) for i in range(self.N)])\n        self.t_i(n, n)\n        self.dfs(n+1)\n        self.route.pop()\n        self.pr.pop()\n\n    def solution(self):\n        self.dfs(0)\n        for i in range(self.N):\n            if self.pr[i][0] == self.t_i(i, i):\n                return self.t_i(i, i)\n        return \"TLE\""
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'TLE'\nprint('Test #1 passed.')"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"7\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(test_cases[0]) == 5\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"TLE\""
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('7 70') == '70'\nassert solution('7 60') == '4'\nassert solution('1 80') == '5'\nassert solution('1 50') == '2'\nassert solution('3 80') == '6'\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '4'\n\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"7\"\nassert solution(\"3 1\") == \"7\"\nassert solution(\"3 1\") == \"7\"\nassert solution(\"3 1\") == \"TLE\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '4'\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"4 2 9\"\n) == \"8\"\nassert solution(\"1 2 7\") == \"3\"\nassert solution(\"1 1 1\") == \"5\"\nassert solution(\"1 1 1 5\") == \"1\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == 8\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 5 9\") == \"8\"\nassert solution(\"6 7 1\") == \"8\"\nassert solution(\"2 4 1\") == \"7\"\nassert solution(\"5 9\") == \"8\"\nassert solution(\"3\") == \"1\"\n\"\"\"\nclass Solution:\n    def solution(self, nums: str) -> int:\n        total = 0\n        for i in nums:\n            total += int(i)\n        return total"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"8\"\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(string) == \"8\""
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '8'\n\n<p>"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 1', '9') == '8'\nassert solution('1 2', '9') == '6'\nassert solution('1 3', '9') == '2'\nassert solution('2 3', '9') == '7'\nassert solution('3 1', '9') == '3'\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '8'\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"8\"\n'''\n\n\nclass Solution:\n    def solve(self, n, a, b):\n        def solve(n, a, b):\n            if b == 0:\n                return a\n\n            if n == 1:\n                return a + b\n            else:\n                if n % 2 == 1:\n                    return solve(n - 1, a, b - a)\n                else:\n                    return solve(n - 1, a, b) + solve(n - 2, a, b)\n\n        return solve(n, a, b)\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 2 9\") == 8\nassert solution(\"4 3 2\") == 2\nassert solution(\"2 4 9\") == 9\nassert solution(\"2 5 7\") == 5\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        # Note: Python's default is a dictionary\n        \n        # Given: s is a string. p is a string of lowercase English letters.\n        \n        # Return: a list of integers. p has been sorted in sorted order.\n        \n        # Time Limit: 1 sec\n        \n        p_len = len(p)\n        \n        p_list = []\n        \n        # Initialize:  p_list = []\n        \n        # Keep adding characters to p_list until it is sorted in sorted order\n        \n        # Time: O(nlogn)\n        \n        for i in range(len(s) - p_len + 1):\n            p_list.append(i)\n        \n        p_list.sort()\n        \n        # Time: O(n)\n        \n        return p_list\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"aabbccdd\") == \"1\"\nassert solution(\"ababcd\") == \"1\"\nassert solution(\"abce\") == \"1\"\nassert solution(\"abceeee\") == \"1\"\nassert solution(\"abb\") == \"1\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"a\", \"c\", \"c\"]) == \"1\"\nassert solution([\"a\", \"c\", \"b\"]) == \"1\"\nassert solution([\"a\", \"b\", \"b\"]) == \"2\"\nassert solution([\"a\", \"b\", \"b\", \"a\", \"c\"]) == \"2\"\nassert solution([\"a\", \"a\", \"c\", \"b\"]) == \"2\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"acornistnt\") == 1\nassert solution(\n    \"peanutbomb\") == 2\nassert solution(\n    \"constraint\") == 1\nassert solution(\n    \"\") == 0\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\"\"acornistnt\"\"\") == \"1\"\nassert solution(\"\"\"peanutbomb\"\"\") == \"1\"\nassert solution(\"\"\"constraint\"\"\") == \"1\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 1\n'''"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('acornistnt') == 1"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"acornistnt\", \"peanutbomb\", \"constraint\"]) == \"1\"\nassert solution([\"acornistnt\", \"peanutbomb\", \"constraint\"]) == \"2\"\nassert solution([\"cannodag\", \"cannodag\", \"cannodag\"]) == \"1\"\nassert solution([\"acornistnt\", \"peanutbomb\", \"cannodag\"]) == \"2\"\nassert solution([\"acornistnt\", \"peanutbomb\"]) == \"1\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"4,3,3,4,5,3,3,3,5,4,5,4,5,5,4,3,3,4,3,3,3,4,3,4,4,5,3,3,3,4,5,5,3,5,4,3,4,3,3,3,3,4,3,4,4,5,5,5,5,5,4,4,4,5,3,3,3,3,4,3,5,5,5,5,5,5,5,4,5,3,4,5,4,5,4,4,5,5,5,5,5,5,4,4,5,4,4,4,5,3,3,3,3,4,4,3,4,4,5,5,5,4,4,5,4,4,5,5,5,5,4,5,4,3,5,4,3,5,4,3,5,5,4,5,3,4,3,3,3,3,4,3,4,4,5,5,5,4,5,4,4,3,4,5,4,4,4,4,4,4,5,5,5,5,5,4,3,5,3,4,3,4,3,4,4,4,5,5,4,3,5,3,5,4,3,5,3,5,4,4,5,5,5,4,5,5,5,5,4,4,5,4,4,5,4,5,5,4,5,3,3,5,4,5,5,5,5,5,5,4,3,3,3,3,4,3,3,3,3,4,3,5,4,3,3,3,3,4,3,5,5,4,3,5,4,5,4,3,4,3,3,4,5,3,3,5,3,4,4,4,4,4,5,5,4,4,5,5,5,5,4,5,5,4,3,5,4,4,5,4,4,5,5,4,5,4,5,5,5,5,5,5,4,5,5,5,5,4,5,3,3,3,4,3,3,4,3,3,3,4,3,4,3,5,4,5,3,4,3,3,3,3,3,3,3,3,4,3,3,3,4,3,4,4,4,5,5,5,5,5,4,5,5,5,4,4,5,4,4,5,5,5,5,5,5,4,3,5,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,5,5,4,5,5,4,4,5,5,5,4,3,3,5,3,5,4,4,4,5,4,3,5,4,4,5,4,5,4,4,5,5,4,4,4,5,5,5,4,5,5,5,5,5,5,4,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"Problem Statement Failed\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"Your code should print one line with one answer.\""
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == ['1','2','5','2','0']\n\nassert solution(stdin) == ['0']\n\nassert solution(stdin) == ['0']\n\nassert solution(stdin) == ['8']\n\nassert solution(stdin) == ['8']"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5,[\"1\",\"3\",\"20\",\"38\",\"56\"]) == \"2\"\nassert solution(4,[\"1\",\"3\",\"20\",\"38\",\"56\"]) == \"5\"\nassert solution(4,[\"2\",\"3\",\"20\",\"38\",\"56\"]) == \"2\"\nassert solution(5,[\"1\",\"3\",\"20\",\"38\",\"56\"]) == \"0\"\nassert solution(5,[\"2\",\"3\",\"20\",\"38\",\"56\"]) == \"0\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == 2\nassert solution(5) == 8\nassert solution(4) == 2\nassert solution(5) == 2\nassert solution(4) == 2\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '8'\nassert solution(stdin) == '8'\nassert solution(stdin) == '8'\nassert solution(stdin) == '8'\nassert solution(stdin) == '8'\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '8'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1') == '1', \"First example\"\nassert solution('1') == '1', \"Second example\"\nassert solution('1') == '1', \"Third example\"\nassert solution('1') == '1', \"Fourth example\"\nassert solution('1') == '1', \"Fifth example\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '8'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '9'\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"8\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 2\") == \"1 1 1 1 1\"\nassert solution(\"10 3\") == \"1 1 1 1 1 1 1\"\nassert solution(\"10 4\") == \"1 1 1 1 1 1\"\nassert solution(\"10 5\") == \"1 1 1 1 1 1\"\nassert solution(\"10 6\") == \"1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 5\") == 2\nassert solution(\"4 5\") == 1\nassert solution(\"3 4\") == 2"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 3\nassert solution(input()) == 3\nassert solution(input()) == 3\nassert solution(input()) == 3\nassert solution(input()) == 3\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 2\") == \"2 3 1 2 1 1 2\"\nassert solution(\"10 3\") == \"3 1 2 1 1 2 1\"\nassert solution(\"10 4\") == \"4 1 2 1 1 2 2\"\nassert solution(\"10 5\") == \"5 1 2 1 1 2 2\"\nassert solution(\"10 6\") == \"6 1 2 1 1 2 2\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == 5\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input().split()) == \"3\"\n\npass\n-----end-----\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2,5) == 1\nassert solution(4,3) == 1\nassert solution(10,20) == 1\nassert solution(6,5) == 2"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"Expected solution\"\nassert 0 == 0, \"Failed to find solution\""
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 4 1 4 1 2 1 1 2\") == 2\nassert solution(\"5 3 2 1 1 4 3 1\") == 2\nassert solution(\"4 5 2 3 1\") == 1\nassert solution(\"4 1 3 1 2\") == 1\nassert solution(\"1 1 1 1 1 1 1 1 1\") == 1\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 8\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3 6'\n\nprint('solution test passed')\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(sys.stdin.readline()) == \"3 8\"\nassert solution(sys.stdin.readline()) == \"3 8\"\nassert solution(sys.stdin.readline()) == \"3 8\"\nassert solution(sys.stdin.readline()) == \"3 8\"\nassert solution(sys.stdin.readline()) == \"3 8\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n1 2 4 4\n1 1 8 8 8 4 4 4 4\n1 1 1 7 9 5 2 3\n3 2 7 6 1 9 3 2\n4 3 7 3 4 6 4 3\n4 4 6 4 6 4 4 4\n4 4 4 4 4 4 4\n\n$n$ friends live in a city which can be represented as a number line. The $i$-th friend lives in a house with an integer coordinate $x_i$. The $i$-th friend can come celebrate the New Year to the house with coordinate $x_i-1$, $x_i+1$ or stay at $x_i$. Each friend is allowed to move no more than once.\n\nFor all friends $1 \\le x_i \\le n$ holds, however, they can come to houses with coordinates $0$ and $n+1$ (if their houses are at $1$ or $n$, respectively).\n\nFor example, let the initial positions be $x = [1, 2, 4, 4]$. The final ones then can be $[1, 3, 3, 4]$, $[0, 2, 3, 3]$, $[2, 2, 5, 5]$, $[2, 1, 3, 5]$ and so on. The number of occupied houses is the number of distinct positions among the final ones.\n\nSo all friends choose the moves they want to perform. After that the number of occupied houses is calculated. What is the minimum and the maximum number of occupied houses can there be?\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of friends.\n\nThe second line contains $n$ integers $x_1, x_2, \\dots, x_n$ ($1 \\le x_i \\le n$) \u2014 the coordinates of the houses of the friends.\n\n\n-----Output-----\n\nPrint two integers \u2014 the minimum and the maximum possible number of occupied houses after all moves are performed.\n\n\n-----Examples-----\nInput\n4\n1 2 4 4\n\nOutput\n2 4\n\nInput\n9\n1 1 8 8 8 4 4 4 4\n\nOutput\n3 8\n\nInput\n7\n4 3 7 1 4 3 3\n\nOutput\n3 6\n\n\n\n-----Note-----\n\nIn the first example friends can go to $[2, 2, 3, 3]$. So friend $1$ goes to $x_1+1$, friend $2$ stays at his house $x_2$, friend $3$ goes to $x_3-1$ and friend $4$ goes to $x_4-1$. $[1, 1, 3, 3]$, $[2, 2, 3, 3]$ or $[2, 2, 4, 4]$ are also all valid options to obtain $2$ occupied houses.\n\nFor the maximum number of occupied houses friends can go to $[1, 2, 3, 4]$ or to $[0, 2, 4, 5]$, for example.\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3 8'\nassert solution(stdin) == '3 6'\nassert solution(stdin) == '3 7'\nassert solution(stdin) == '3 8'\nassert solution(stdin) == '3 7'\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"5\") == \"4\"\nassert solution(\"9\") == \"6\"\nassert solution(\"10\") == \"7\"\nassert solution(\"20\") == \"8\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 8\\n3 3 7\\n6 6\\n1 1 2 4\\n7\\n4 5 3 8\\n4 7 3\\n9\\n6 3 7\\n2 8\\n1 3\\n1\\n2\\n3\\n4\\n5\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n3\\n4\\n5\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6\\n7\\n8\\n9\\n6"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"6 6\"\nassert solution(stdin) == \"6 6\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 3\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n10 5 6\n1 2 4 4\n1 1 8 8 8 4 4 4\n1 3 7 1 4 3 3\n1 4 1 4 2 4 4\n3 4 4 4 4 4 4\n\"\"\") == \"2 4\"\nassert solution(\"\"\"\n1 4\n2 2\n3 2\n4 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10 1\n\"\"\") == \"10\"\nassert solution(\"\"\"\n1 2\n1 4\n2 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 1\n2 2\n3 3\n4 4\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3 2 4 1 5\"\nassert solution(input()) == \"3 1 2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3 2 1'\nassert solution(stdin) == '3 1 2'\nassert solution(stdin) == '3 1 3'\nassert solution(stdin) == '3 1 4'\nassert solution(stdin) == '3 1 5'\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin.readline().split()\n    ) == ['3', '2', '1', '4', '5']\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3 2 4 1 5\"\nassert solution(input()) == \"3 1 2\""
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3 1 2 1 4') == '1 2 3 4'\nassert solution('3 4 1') == '3 4 1'\nassert solution('3 5 1') == '3 5 1'\nassert solution('1 4 1') == '1 4 1'\nassert solution('1 4 1') == '4 1 2'\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == [\"3\", \"2\", \"4\", \"1\", \"2\", \"1\", \"3\", \"2\", \"3\", \"1\", \"3\", \"2\", \"1\", \"3\", \"2\", \"1\"]"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 2 3 4 5\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(a) == b\nassert solution(a) == c\nassert solution(a) == d\nassert solution(a) == e\nassert solution(a) == f\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == [1, 2, 3, 4, 5]\nassert solution(stdin) == [1, 3, 2, 4, 5]\n\n\n------Test Cases-----\n\ntests = [\n    ([3, 2, 4, 1, 5], [3, 2, 1, 5]),\n    ([1, 1, 3, 3, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5], [2, 3, 2, 4, 1, 5, 5, 5, 3, 4, 1, 2, 3, 2, 4, 5, 5, 5, 5, 5, 5, 5, 5]),\n    ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]),\n    ([], [1, 2, 3, 4, 5]),\n]\n\nfor stdin, stdout in tests:\n    print(solution(stdin))\n    print(stdout)"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n\n\n------Constraints-----\n1 <= n <= 10^5\n\nTime Limit: 10 seconds\nSpace Limit: 2,048,000\n\nn = input()\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 1\nassert solution('4') == 2\nassert solution('5') == 3\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == str(3)\n\n-----Constraints-----\n1 <= n <= 10^5\n\n0 <= a_1, a_2,..., a_n <= 10^9\n\n$0 \\le n \\le 10^5$\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= stdin[i] <= 10^9\n\n-----Time Limit: 1 second per testcase -----\nInput\n\n\n\n-----Constraints-----\n1 <= stdin[i] <= 1000\n\n\n-----Sample Input\n\n3\n
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(10, \"a\") == \"3\"\n\nassert solution(10, \"a a\") == \"3\"\n\nassert solution(10, \"a a a\") == \"3\"\n\nassert solution(10, \"a a a a\") == \"3\"\n\n\n-----Discussion-----\n\nYou are already given that there are $10^5$ students, there are $1,000,000,000,000,000,000 students. To solve this problem, we use a balanced team of $2^24$ with $2^2^24$ students. In the code you should create a team of $3^24$ with $3^3^24$ students.\n\nYou have to write a program that reads a string in which only one integer is a team number.\n\nProgramme\n\nThe program asks for the number of students.\n\nWrite a program that checks whether a string can be encoded into a balanced team.\n\nSolution\n\nTesting case:\n\nInput\n\n10\n\nOutput\n\nfalse\n\nInput\n\n10\n\nOutput\n\ntrue\n\nInput\n\n1\n\nOutput\n\ntrue\n\n\"\"\"\n\nn = int(input())\na = input()\ns = int(input())\n\nfor i in range(s):\n    a = list(a)\n    a[i] = str(a[i])\n    b = ''.join(a)\n    if b.count(b[0]) == n:\n        print(b[0], end=\"\")\n    else:\n        print(0, end=\"\")\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n\n\n-----Constraints-----\n\n1 <= n <= 2^9\n1 <= a_i <= 10^9\n\n-------Solu\u00e7\u00e3o-------\n\nComplexity: O(n) where n is the number of students.\nTime: O(n) where n is the number of students.\nSpace: O(n) where n is the number of students.\n\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 12\n\"\"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 3 4 5\") == \"1\"\nassert solution(\"9 3 3 3\") == \"0\"\nassert solution(\"2 4 3 3\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1 3 2\") == \"3\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('15 5 3 2') == '0'\nassert solution('15 5 4 3') == '4'\nassert solution('15 5 2 1') == '5'\nassert solution('15 5 5 1') == '2'\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n\npass\n'''\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"0\"\n'''\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4,15,5,3,2,1,1,1) == -1\nassert solution(4,15,5,3,2,1,1,2) == 4\nassert solution(4,15,5,3,2,1,1,3) == -1\nassert solution(4,15,5,3,2,1,1,3) == -1\nassert solution(4,15,5,3,2,1,1,3) == -1\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(read().split()) == \"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n      '3 5 3 3') == '1'\nassert solution(\n      '3 4 3 2') == '2'\nassert solution(\n      '4 5 3 2') == '1'\nassert solution(\n      '4 5 2 1') == '2'\nassert solution(\n      '4 5 5 1') == '1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 15) == \"3\"\nassert solution(2, 5) == \"4\"\nassert solution(1, 2) == \"2\"\nassert solution(1, 1) == -1\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('') == 0, '''\n\n'''\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(7) == 24\nassert solution(9) == 0\nassert solution(5) == 46\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"24\"\nassert solution(input()) == \"2835\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"46\""
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('abc'), 'abc'\nassert solution('abca'), 'a'\nassert solution('abcabc'), 'abc'\nassert solution('abcbcb'), 'b'\nassert solution('bbaaa'), 'a'\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(st,6) == 10\nassert solution(st,7) == 2835\nassert solution(st,9) == 0\nassert solution(st,5) == 46\nassert solution(st,1) == 0\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 24, \"Expected 24, got {}\".format(24)\n\n\n-----Searching for '?' in a string can be used to remove non-alphabetic characters in the string and keep their case.\n\nInput\nabba\n\nOutput\nFalse\n\nInput\nab?ba\n\nOutput\nTrue\n\nInput\nab?ba\n\nOutput\nFalse\n\nInput\nab?ba\n\nOutput\nTrue\n\nInput\nab?ba\n\nOutput\nTrue\n\n'''\nimport re"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 24\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"24\"\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), 'The input contains an incorrect format.'\nassert solution(stdin) == '24', 'The input contains an incorrect format.'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == 24\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\n\n-----Side-effect-----\n\nThe solution does not change the input. The input is only used for testing and debugging.\n\nInput\n\nFirst line contains two integers $n$ and $m$ ($1 \\le n \\le 2 \\cdot 10^5$, $0 \\le m \\le 2 \\cdot 10^5$) \u2014 the number of vertices in the graph and the number of special offers, respectively.\n\nSecond line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^{12}$) \u2014 the numbers written on the vertices.\n\nThird line contains $m$ lines follow, each containing three integers $x$, $y$ and $w$ ($1 \\le x, y \\le n$, $1 \\le w \\le 10^{12}$, $x \\ne y$) denoting a special offer: you may add an edge connecting vertex $x$ and vertex $y$, and this edge will cost $w$ coins.\n\nOutput\n\nPrint one integer \u2014 the minimum number of coins you have to pay to make the graph connected.\n\n\"\"\""
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'\n\n-----Constraints-----\n0 < stdin.length < 100\n1 < stdin[i] < 10000\n0 <= stdin[j] <= 10^12\n1 <= a_i, a_j <= 10^12\n\n----Solution-----\nTests passed.\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, [1,2,3,4,5,10]) == 5\nassert solution(3, [3,5,7]) == 16\nassert solution(4, [1,2,3,4,5]) == 18\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 18\n\n\n-----Test-----\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    edges = list(map(int, input().split()))\n    print(solution(n, m, edges, a))\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5 4 0') == '5'\nassert solution('5 4') == '5'\nassert solution('5 4 1') == '10'\nassert solution('5 4 1 3') == '12'\nassert solution('5 4 1 3 2') == '14'\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n2 3 3\\n2 1 1\\n1 3 3 7\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"16\"\nassert solution(\"5 4\\n1 2 3 4 5\") == \"18\"\nassert solution(\"5 4\\n1 2 3 4 5\") == \"18\"\nassert solution(\"5 4\\n1 2 3 4 5\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('',\n    '') == '0'\nassert solution('',\n    '') == '0'\nassert solution('',\n    '') == '0'\nassert solution('',\n    '') == '0'\nassert solution('',\n    '') == '0'\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == 18\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"4 4\"\n) == \"5\"\nassert solution(\n    \"5 3\"\n) == \"5\"\nassert solution(\n    \"5 1\"\n) == \"5\"\nassert solution(\n    \"4 1\"\n) == \"1\"\nassert solution(\n    \"1 2 3\"\n) == \"1\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"No solution.\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"14\"\n\n\n-----Solution-----"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '14'\nassert solution(stdin) == '-1'\n\nassert solution(stdin) == '-1'\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('10 2 4') == '14'\nassert solution('10 1 1') == '45'\nassert solution('10 1 0') == '-1'\nassert solution('10 1 -1') == '-1'\nassert solution('10 2 1') == '-1'\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 1 1\") == \"14\"\nassert solution(\"10 1 2\") == \"15\"\nassert solution(\"10 1 3\") == \"15\"\nassert solution(\"10 1 4\") == \"15\"\nassert solution(\"10 1 5\") == \"15\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 2 4\") == \"14\"\nassert solution(\"10 1 1\") == \"45\"\nassert solution(\"10 1 1\") == \"-1\""
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 2 4\") == \"14\"\nassert solution(\"10 1 1\") == \"45\""
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10 1 1\") == \"0\"\nassert solution(\"10 1 2\") == \"-1\"\nassert solution(\"10 1 3\") == \"45\"\nassert solution(\"10 1 4\") == \"45\"\nassert solution(\"10 1 5\") == \"14\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('10 1 1') == '-1'\nassert solution('10 0') == '-1'\nassert solution('10 3') == '-1'\nassert solution('10 7') == '-1'\nassert solution('10 1') == '14'\n\n\n-----Constraints-----\n1 <= stdin.length <= 5^2\n1 <= stdin[i] <= 10^3\n1 <= a, n <= 200\n0 <= l_i < r_i < a\n1 <= x_i < p_i <= 10^5\n\n-----Time Limit-----\nO(n)\n\nO(n^2)\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        def solve(x, a, n, m, l_i, r_i):\n            if l_i > r_i:\n                return -1\n            if x == a:\n                return 1\n            if x < a:\n                return solve(x + 1, a, n, m, l_i, r_i)\n            return solve(x, a, n, m, l_i, r_i)\n        return solve(0, 10, 10, 10, 0, 10)\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '-1'\nassert solution(input()) == '14'\nassert solution(input()) == '45'\nassert solution(input()) == '-1'"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10 1 1\") == \"14\"\nassert solution(\"10 1 1\") == \"45\"\nassert solution(\"10 1 2\") == \"15\"\nassert solution(\"10 1 2\") == \"14\"\nassert solution(\"10 1 3\") == \"15\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5 7 5) == 'Yes'\nassert solution(5 7 4) == 'No'\nassert solution(5 7 3) == 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == 'Yes'\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"12 4 7\") == \"No\"\nassert solution(\"3 3 3\") == \"No\"\nassert solution(\"0 1 2\") == \"No\"\nassert solution(\"0 4 5\") == \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 'Yes'\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 7 5\") == \"No\"\nassert solution(\"7 6\") == \"No\"\nassert solution(\"1 2 4\") == \"Yes\""
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"Yes\"\nassert solution(input) == \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    str(5)\n    + str(7)\n    + str(5)\n) == 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(test) == \"No\"\nassert solution(test1) == \"No\"\nassert solution(test2) == \"Yes\""
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '1'\n'''\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"12 5\") == \"1\"\nassert solution(\"1000 2000\") == \"1\"\nassert solution(\"100\") == \"1\"\nassert solution(\"0\") == \"1\""
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('N 9') == 'H_1'\nassert solution('N 9') == 'H_2'\nassert solution('N 9') == 'H_3'\nassert solution('N 9') == 'H_4'\nassert solution('N 9') == 'H_5'\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '1'\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"1\"\n\nSample Tests\nThese tests should pass under given constraints.\nThese tests should pass under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should pass under given constraints.\nThese tests should pass under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under given constraints.\nThese tests should fail under"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"1\"\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"1\"\n\"\"\"\nn = int(input())\ntemp = list(map(int,input().split()))"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 4\") == \"2\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == 1\nassert solution(\"1 1\") == 1\nassert solution(\"2 1\") == 1\nassert solution(\"3 1\") == 1\nassert solution(\"4 1\") == 2"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(str(input())) == '1'\nassert solution(str(input())) == '1'\nassert solution(str(input())) == '1'\nassert solution(str(input())) == '1'\nassert solution(str(input())) == '1'\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 2\"\n) == \"1\"\nassert solution(\n    \"1 2\"\n) == \"2\"\nassert solution(\n    \"1 1\"\n) == \"1\"\nassert solution(\n    \"4 2\"\n) == \"2\"\nassert solution(\n    \"3 3\"\n) == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2, 1) == '1'\nassert solution(2, 2) == '1'\nassert solution(2, 4) == '1'\nassert solution(1, 1) == '0'\nassert solution(1, 2) == '0'\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 1') == '2'\nassert solution('2 4') == '2'"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == 2\nassert solution(\"2 2\") == 1\nassert solution(\"3 3\") == 0\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input()) == \"5\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"4\",\"0\",\"1\",\"2\",\"3\",\"3\",\"2\"]) == \"4\"\nassert solution([\"4\",\"0\",\"1\",\"2\",\"2\",\"2\",\"0\"]) == \"0\"\nassert solution([\"4\",\"0\",\"1\",\"2\",\"2\",\"2\",\"0\",\"3\"]) == \"2\"\nassert solution([\"4\",\"0\",\"1\",\"2\",\"3\",\"2\",\"3\",\"2\"]) == \"3\"\nassert solution([\"4\",\"3\",\"1\",\"2\",\"2\",\"2\",\"2\",\"0\"]) == \"1\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('ACACTACG') == '0'\nassert solution('ACACTACG') == '3'\nassert solution('ACACTACG') == '2'\nassert solution('ACACTACG') == '1'\nassert solution('ACACTACG') == '1'\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\n\nassert solution(input()) == \"3\""
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"ACACTACG\") == \"1\"\nassert solution(\"ACACTACG\") == \"2\"\nassert solution(\"ACACTACG\") == \"0\"\nassert solution(\"ACACTACG\") == \"3\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ACACTACG\") == \"3\"\nassert solution(\"ACACTACG\") == \"0\"\nassert solution(\"ACACTACG\") == \"1\"\nassert solution(\"ACACTACG\") == \"3\"\nassert solution(\"ACACTACG\") == \"0\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ACACTACG\") == \"1\"\nassert solution(\"ACACTACG\") == \"3\"\nassert solution(\"ACACTACG\") == \"0\"\nassert solution(\"ACACTACG\") == \"0\"\nassert solution(\"ACACTACG\") == \"0\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('ATCGTCODER') == 7\nassert solution('A') == 2\nassert solution('C') == 2\nassert solution('G') == 2\nassert solution('T') == 3\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"ATCAODGCA\") == \"3\"\nassert solution(\"A\") == \"1\"\nassert solution(\"AACGTCA\") == \"1\"\nassert solution(\"CATCTCGAA\") == \"0\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('50 100 80 120 80') == '210'\nassert solution
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    [\n        [\"100\", \"80\", \"120\", \"80\", \"120\"],\n        [\"100\", \"80\", \"120\", \"80\", \"120\"],\n        [\"100\", \"80\", \"120\", \"80\", \"120\"],\n        [\"100\", \"80\", \"120\", \"80\", \"120\"],\n    ]\n) == \"210\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == 210\nassert solution(\"10\") == 210\nassert solution(\"5 7\") == 210\nassert solution(\"20\") == 210\nassert solution
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 210\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 210"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()), \"The minimum total price of fruits is 50 + 80 + 80 = 210 yen when choosing Fruit 1, 3, and 5.\"\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input: \"\\n\".join(\n        [\n            \"5 3\",\n            \"50 100 80 120 80\"\n        ]\n    )\n) == \"210\"\nassert solution(\n    input: \"\\n\".join(\n        [\n            \"5 3\",\n            \"50 100 80 120 80\",\n            \"500 100 120 120\"\n        ]\n    )\n) == \"300\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"210\"\n\n'''\nimport math\nn,k = map(int, input().split())\ndata = list(map(int, input().split()))\ndp = [0]*n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 210\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '210'\n\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 4 5 5 4 6 5 5 5 5 5 5 5 5 5 5\") == \"0\"\nassert solution(\"2 3 4 5 6 7 8 9\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"7\"\nassert solution(\"2 3 4 5 6 7 8 8 9 10 11 12\") == \"4\"\nassert solution(\"4 5 4 5 6 5 4 5 4 5 5 4 5 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == '4'\nassert solution(inp) == '7'\nassert solution(inp) == '5'\nassert solution(inp) == '4'\nassert solution(inp) == '4'\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 1 0 0 0 1 1 0 0') == '4'\nassert solution('1 1 0 0 1 1 0 0') == '6'\nassert solution('1 1 0 0 1 1 0 0') == '7'\nassert solution('1 1 0 0 1 1 0 0') == '5'\nassert solution('1 1 0 0 1 1 0 0') == '3'\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"P Q R\") == \"4\"\nassert solution(\"P Q S\") == \"5\"\nassert solution(\"P Q S\") == \"5\"\nassert solution(\"P Q S\") == \"5\"\nassert solution(\"P Q Q\") == \"6\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input=\n    '1 3 4'\n) == 4\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 3 4 5\") == \"5\"\nassert solution(\"1 4 3\") == \"1\"\nassert solution(\"1 4 5\") == \"15\""
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1 3 4\", \"2 5 6\", \"2 4 4\"]) == \"4\"\nassert solution([\"2 5 6\", \"3 4 4\", \"1 4 3\", \"2 4 4\", \"1 4 3\"]) == \"4\"\nassert solution([\"1 5 2\", \"2 4 6\", \"2 6 5\", \"1 6 1\", \"1 2 2\", \"1 3 3\", \"1 4 4\", \"1 5 5\"]) == \"8\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 5 4') == '2 4'\nassert solution('2 1 3 4 5') == '4 3'\nassert solution('1 1 2 2 3 1 4 1') == '3'\nassert solution('1 3 2 4 3 5 1') == '4'\nassert solution('2 3 2 1 2 4') == '5'\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"4\""
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3,5) == 0\nassert solution(7,5) == 10"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 5) == 0\nassert solution(1, 2) == 10\nassert solution(5, 1) == 10\nassert solution(7, 2) == 10"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 5) == 0\nassert solution(1, 10) == 10"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 10\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('5') == '0'\nassert solution('5') == '10'\nassert solution('1') == '0'\nassert solution('4') == '10'\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"13\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('a') == 10\nassert solution('5') == 0\nassert solution('6') == 10\nassert solution('3') == 0\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == 0\nassert solution(\"1 1\") == 0\nassert solution(\"9\") == 10\nassert solution(\"3 3\") == 10\nassert solution(\"4 1\") == 10\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(f) == 1\nassert solution(g) == 1\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n\n'''\nclass Solution:\n    def minimumAbsDifference(self, x: int, K: int) -> str:\n        #print(x)\n        if x == 0:\n            return '0'\n        elif x <= K:\n            return str(x)\n        else:\n            return str(K-x)\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2,5) == 1, \"2 is the minimum possible value taken by N\"\nassert solution(10,2) == 1, \"10 is the minimum possible value taken by N\"\nassert solution(19,9) == 1, \"19 is the minimum possible value taken by N\"\nassert solution(7,7) == 1, \"7 is the minimum possible value taken by N\"\nassert solution(3,1) == 1, \"3 is the minimum possible value taken by N\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\\\"\\\"\\\"Input: \\\")\\\"\\\")\nassert solution(\\\"\\\"\\\"Sample Input: \\\")\\\"\\\")\nassert solution(\\\"\\\"\\\"Output: \\\")\\\"\\\")\nassert solution(\\\"\\\"\\\"Sample Output: \\\")\\\"\\\")\nassert solution(\\\"\\\"\\\"4 7\\\")\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(str(input().rstrip())) == \"1\"\nassert solution(str(input().rstrip())) == \"1\"\nassert solution(str(input().rstrip())) == \"1\"\nassert solution(str(input().rstrip())) == \"1\"\nassert solution(str(input().rstrip())) == \"1\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(7,4) == 3\nassert solution(7,4) == 1\nassert solution(7,4) == 1\nassert solution(7,4) == 1\nassert solution(7,4) == 1\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"1 6\"\n) == \"1\"\nassert solution(\n    \"1 10\"\n) == \"1\"\nassert solution(\n    \"2 3\"\n) == \"0\"\nassert solution(\n    \"5 3\"\n) == \"0\"\nassert solution(\n    \"2 3\"\n) == \"2\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 -5') == '3'\nassert solution('1 4') == '1'\nassert solution('4 5') == '0'\nassert solution('2 3') == '0'\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 7 9') == 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('5 8 9') == 'win'\nassert solution('5 8 9') == 'win'\nassert solution('5 8 9') == 'bust'\nassert solution('5 8 9') == 'bust'\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5,7,9) == \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(test_input) == 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"2 2 3\") == \"bust\"\nassert solution(\"1 1 1\") == \"win\"\nassert solution(\"0 0 0\") == \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"win\"\nassert solution(input()) == \"bust\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 4 3') == 'win'\nassert solution('5 9 7') == 'win'\nassert solution('4 7 3') == 'win'\nassert solution('3 4 2') == 'win'\nassert solution('3 5 1') == 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"8 6 7\") == \"win\"\nassert solution(\"12 20\") == \"win\"\nassert solution(\"0 3 3\") == \"win\"\nassert solution(\"24\") == \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"win\", \"solution failed\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, 7, 9) == 'win', \"Not win\"\nassert solution(5, 7, 22) == 'win', \"Not win\"\nassert solution(5, 7, -1) == 'bust', \"Not bust\""
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(string) == \"6\"\nassert solution(string) == \"3\"\n\nprint(solution(input()))"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"6\"\n\nprint(\"Congrats! The answer is {0}\".format(input()))\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(int(stdin)) == 6"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(sys.argv) == 6\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(13) == \"6\"\nassert solution(24) == \"6\"\nassert solution(98) == \"6\"\nassert solution(9) == \"2\"\nassert solution(2458) == \"2\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(8) == 6"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution( \"3\") == \"6\"\nassert solution( \"12\") == \"12\"\nassert solution( \"42\") == \"42\"\nassert solution( \"1234567890123456789012345678901234567890\") == \"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input() == \"6\") == 6\nassert solution(input() == \"8\") == 2\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == 6\nassert solution(\"7\") == 5\nassert solution(\"0\") == 1\nassert solution(\"0\") == 1\nassert solution(\"1\") == 0\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '6'\n'''\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\"]) == \"3\"\nassert solution([\"10\", \"7\", \"6\", \"4\", \"7\", \"6\", \"5\", \"5\", \"6\", \"6\", \"4\", \"5\"]) == \"3\"\nassert solution([\"7\", \"7\", \"7\", \"6\", \"6\", \"6\", \"5\", \"4\", \"4\", \"6\", \"7\", \"6\"]) == \"4\"\nassert solution([\"3\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\"]) == \"3\"\nassert solution([\"2\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"3\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('') == ''\n\nprint('Example 1:')\nprint('Input : ')\nprint('N D')\nprint('Output : ')\nprint('2')\nprint('Exception :')\nprint('2')\n\nprint('Example 2:')\nprint('Input : ')\nprint('3 2')\nprint('Output : ')\nprint('2')\nprint('Exception :')\nprint('1')\n\nprint('Example 3:')\nprint('Input : ')\nprint('5 4')\nprint('Output : ')\nprint('3')\nprint('Exception :')\nprint('2')\n\nprint('Example 4:')\nprint('Input : ')\nprint('2 3')\nprint('Output : ')\nprint('3')\nprint('Exception :')\nprint('3')\n\nprint('Example 5:')\nprint('Input : ')\nprint('5 2 3 4')\nprint('Output : ')\nprint('1')\nprint('Exception :')\nprint('1')\n\nprint('Example 6:')\nprint('Input : ')\nprint('4 5')\nprint('Output : ')\nprint('2')\nprint('Exception :')\nprint('3')"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2\"\n\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, 2) == 2\nassert solution(3, 3) == 2\nassert solution(3, 4) == 2\nassert solution(3, 5) == 1\nassert solution(5, 5) == 1\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3) == 2\nassert solution(6) == 2\n\nassert solution(1) == 1\nassert solution(4) == 1\n\nassert solution(2) == 3\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\nassert solution(\"2\") == 2\nassert solution(\"1 1\") == 1\nassert solution(\"2 2\") == 2\nassert solution(\"2 4\") == 2\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input: \"5 2\",\n    stdin: \"3 3 2 2 4 4 2\"\n    ) == \"3\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"pon\", \"The function does not return the correct answer\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"pon\"\nassert solution(\"2\") == \"pon\"\nassert solution(\"3\") == \"pon\"\nassert solution(\"4\") == \"pon\"\nassert solution(\"5\") == \"pon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"pon\", \"stdin = \" + stdin\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"-1\") == \"1\"\nassert solution(\"9\") == \"pon\"\nassert solution(\"12\") == \"bon\"\nassert solution(\"7\") == \"pon\"\nassert solution(\"0\") == \"pon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1') == 'pon'\nassert solution('9') == 'pon'\nassert solution('0') == 'bon'\nassert solution('8') == 'bon'\nassert solution('3') == 'hon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(123) == \"pon\"\nassert solution(0000) == \"pon\"\nassert solution(000) == \"pon\"\nassert solution(0000123) == \"pon\"\nassert solution(000321) == \"pon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"pon\"\n\n-----Examples-----\nInput 1:\nInput 2:\nOutput 1:\nInput 3:\nOutput 2:\nNote:\nFor the given example input (4), the string is \"4\".\nFor the given example input (2), the string is \"2\".\n\nInput 4:\nInput 5:\nOutput 4:\nInput 7:\nOutput 5:\nInput 8:\nOutput 6:\nInput 9:\nOutput 7:\nInput 10:\nOutput 8:\nInput 11:\nOutput 9:\nInput 12:\nOutput 10:\nInput 13:\nOutput 11:\nInput 14:\nOutput 12:\nInput 15:\nOutput 13:\nInput 16:\nOutput 14:\nInput 17:\nOutput 15:\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(int(input())) == \"pon\"\n\n'''"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"pon\"\nassert solution(\"6\") == \"bon\"\nassert solution(\"6\") == \"bon\"\nassert solution(\"1\") == \"bon\"\nassert solution(\"2\") == \"hon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(8) == \"pon\"\nassert solution(1000) == \"pon\"\nassert solution(3.9) == \"bon\"\nassert solution(10.0) == \"bon\"\nassert solution(12.2) == \"bon\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12, \"The function does not return the expected result\"\n\"\"\"\n\nN = int(input())\nd_1, d_2, d_3 = map(int, input().split())\nassert N == d_1 + d_2 + d_3\nsum_d = 0\nfor i in range(N):\n    sum_d += (i+1)*(i+2)*(i+3)\nassert sum_d == 100, \"The function does not return the expected result\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == expected, \"Your code has failed\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 3 1 2\") == 11\nassert solution(\"3 3 1 2 3 3 3 3 3 3\") == 11\nassert solution(\"3 4\") == 10\nassert solution(\"3 5\") == 9\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\ninput\n) == '11'\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"11\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input().strip()\n) == '11'\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 3 2') == '11'\nassert solution('1 1 2') == '11'\nassert solution('1 1 2 1') == '2'\nassert solution('0 1 1 1 0 1 1') == '2'\nassert solution('0 0 1 1 0 1 1') == '2'\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"11\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"11\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '11'\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"3 4 1 2\") == \"3\"\nassert solution(\"4 3 1 2\") == \"3\"\nassert solution(\"4 3 1 2 3 4\") == \"3\"\nassert solution(\"3 4 1 2 4 3 4\") == \"4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1\",\"4\",\"3\",\"4\"]) == \"4\"\nassert solution([\"4\",\"3\",\"1\"]) == \"3\"\nassert solution([\"3\",\"2\"]) == \"3\"\nassert solution([\"4\",\"1\"]) == \"4\"\nassert solution([\"1\",\"4\",\"3\",\"4\"]) == \"4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"4\"\nassert solution(input) == \"3\"\nassert solution(input) == \"4\"\nassert solution(input) == \"3\"\nassert solution(input) == \"4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('4 1 2 3') == '4'\nassert solution('3 4 1') == '3'\nassert solution('3 1 4') == '3'\nassert solution('2 4 3') == '3'\nassert solution('2 4 1') == '4'\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"4\"\n\n\"\"\"\n\nclass Solution:\n    def maximum(self, nums):\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        else:\n            i = 0\n            while i < n:\n                if nums[i] < nums[i+1]:\n                    i += 1\n                else:\n                    nums[i], nums[i+1] = nums[i+1], nums[i]\n                    i += 1\n        return nums[0]"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1\",\"4\",\"4\",\"3\",\"1\"]) == \"3\"\nassert solution([\"1\",\"4\",\"4\",\"1\",\"4\"]) == \"3\"\nassert solution([\"3\",\"4\",\"3\",\"4\",\"4\",\"4\"]) == \"3\"\nassert solution([\"2\",\"3\",\"2\",\"1\",\"2\",\"4\",\"5\",\"4\",\"1\",\"2\",\"4\",\"5\",\"4\",\"1\",\"2\",\"4\",\"1\"]) == \"4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"5 3 4 2 3 1\"\n) == \"4 3 2\"\nassert solution(\n    \"1 2 3 4 5 6 7 8 9 10\"\n) == \"1 2 5\"\nassert solution(\n    \"4 4 1 2 4 4 4\"\n) == \"1 1 1\"\nassert solution(\n    \"1 2 3 4 4 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\"\n) == \"1005\"\nassert solution(\n    \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\"\n) == \"1005\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 3') == 9\nassert solution('4') == 2\nassert solution('1') == 1\nassert solution('4') == 2\nassert solution('2') == 1\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 3') == 9\n\nassert solution('5 3') == 5\n\nassert solution('3 4') == 3\n\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 9\nassert solution(input()) == 2\nassert solution(input()) == 2\nassert solution(input()) == 2\nassert solution(input()) == 2\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"4 5\") == \"1\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == str(9)\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"5\", \"3\"]) == \"9\"\nassert solution([\"5\", \"10\"]) == \"15\"\nassert solution([\"5\", \"5\"]) == \"15\"\nassert solution([\"5\", \"5\", \"3\"]) == \"9\"\nassert solution([\"5\", \"5\", \"4\"]) == \"15\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"9\"\n\n## Time complexity: O(n)\n## Space complexity: O(1)\n'''\n\nfrom collections import deque\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"9\") == \"9\"\nassert solution(\"10\") == \"10\"\nassert solution(\"15\") == \"9\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"A 5 2\") == \"9\"\nassert solution(\"A B\") == \"1\"\nassert solution(\"A B 5\") == \"2\"\nassert solution(\"A 3 B\") == \"2\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"40\"\n\"\"\"\n\nclass Solution:\n    def shortestToTable(self, N, K):\n        \"\"\"\n        :type N: int\n        :type K: int\n        :rtype: int\n        \"\"\"\n        pass\n    "
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5 3\", \"30 -10 10 20 50\"]) == \"40\"\nassert solution([\"5 4\", \"30 10 10\"]) == \"25\"\nassert solution([\"5 2\", \"30 10\"]) == \"25\"\nassert solution([\"5 1\", \"30 10\"]) == \"15\"\nassert solution([\"5 0\", \"30\"]) == \"15\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"The function is not found.\"\nassert \"35\" == str(solution(stdin))\n\"\"\"\nn = int(input())\nK = int(input())\n\ncandles = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    candles.append([x, y])\n\ncandles = sorted(candles, key=lambda x: x[1])\n\npath = []\nfor i in range(len(candles)):\n    if len(path) == 0:\n        path.append([0, i])\n    else:\n        temp = path[len(path) - 1]\n        if temp[0] > temp[1] and i - temp[1] < K:\n            path.append([temp[0] + 1, i])"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    '5 3'\n    ) == 40\nassert solution(\n    '5 3'\n    ) == 36\nassert solution(\n    '5 3'\n    ) == 15\n\n------Time and Space Complexity-------\nTime: O(N + K)\nSpace: O(1)\n\n------Recursive Solution-------\nRuntime: 96 ms\nMemory Usage: 17.7 MB\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 40\n\"\"\"\n\n\nclass Solution:\n    def __init__(self):\n        self.visited = []\n        self.K = int(stdin.split()[0])\n        self.X = []\n        self.N = int(stdin.split()[1])\n\n    def check(self, i, x):\n        if i == self.N:\n            return x not in self.visited\n        return not self.visited[i] or self.visited[i] <= x <= self.visited[i + 1]\n\n    def bfs(self, x, y, is_left):\n        q = [(-1, 0)]\n        visited = set()\n        self.visited.append(x)\n        self.X.append(x)\n        while q:\n            x, y = q.pop(0)\n            if y == 0:\n                if x == 0 or self.check(x, y):\n                    return self.visited[y]\n                self.visited[y] = self.visited[x] + 1\n                q.append((x + y, 0))\n                q.append((x - y, 0))\n                q.append((x, y + 1))\n                q.append((x, y - 1))\n            elif y == self.N:\n                if x == 0 or self.check(x, y):\n                    return self.visited[y]\n                self.visited[y] = self.visited[x] + 1\n                q.append((x + y, 0))\n                q.append((x - y, 0))\n                q.append((x, y + 1))\n                q.append((x, y - 1))\n            else:\n                if x == 0 or self.check(x, y):\n                    return self.visited[y]\n                self.visited[y] = self.visited[x] + 1\n                q.append((x + y, 0))\n                q.append((x - y, 0))\n                q.append((x, y + 1))\n                q.append((x, y - 1))\n\n    def solve(self, K):\n        if K == 0:\n            return 0\n        if K == 1:\n            return max(self.bfs(self.X[0], self.N - 1, False), self.bfs(self.X[0], self.N - 1, True))\n        else:\n            return max(self.bfs(self.X[0], self.N - 1, True), self.bfs(self.X[0], self.N - 1, False))\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"5 3\", \"3 4\", \"3 6\", \"2 4\", \"2 7\", \"1 3\", \"1 5\", \"1 6\", \"2 3\", \"2 4\", \"2 6\", \"1 7\", \"1 8\", \"2 7\", \"2 9\", \"3 6\", \"3 8\", \"3 10\", \"1 9\", \"1 11\", \"1 12\", \"1 13\", \"3 11\", \"3 14\", \"2 10\", \"2 12\", \"2 15\", \"1 13\", \"1 16\", \"2 11\", \"2 17\", \"1 17\", \"2 18\", \"2 19\", \"2 20\", \"1 21\", \"2 21\", \"1 22\", \"2 23\", \"1 24\", \"2 25\", \"3 22\", \"3 24\", \"3 25\", \"2 26\", \"3 27\", \"3 28\", \"3 29\", \"3 30\", \"3 31\", \"4 0\", \"4 1\", \"4 2\", \"4 3\", \"4 4\", \"4 5\", \"4 6\", \"4 7\", \"4 8\", \"4 9\", \"4 10\", \"4 11\", \"4 12\", \"4 13\", \"4 14\", \"4 15\", \"4 16\", \"4 17\", \"4 18\", \"4 19\", \"4 20\", \"5 0\", \"5 1\", \"5 2\", \"5 3\", \"5 4\", \"5 5\", \"5 6\", \"5 7\", \"5 8\", \"5 9\", \"5 10\", \"5 11\", \"5 12\", \"5 13\", \"5 14\", \"5 15\", \"5 16\", \"5 17\", \"5 18\", \"5 19\", \"5 20\", \"5 21\", \"5 22\", \"5 23\", \"5 24\", \"5 25\", \"5 26\", \"5 27\", \"5 28\", \"5 29\", \"5 30\", \"5 31\", \"5 32\", \"5 33\", \"5 34\", \"5 35\", \"5 36\", \"5 37\", \"5 38\", \"5 39\", \"5 40\", \"5 41\", \"5 42\", \"5 43\", \"5 44\", \"5 45\", \"5 46\", \"5 47\", \"5 48\", \"5 49\", \"5 50\", \"5 51\", \"5 52\", \"5 53\", \"5 54\", \"5 55\", \"5 56\", \"5 57\", \"5 58\", \"5 59\", \"5 60\", \"5 61\", \"5 62\", \"5 63\", \"5 64\", \"5 65\", \"5 66\", \"5 67\", \"5 68\", \"5 69\", \"5 70\", \"5 71\", \"5 72\", \"5 73\", \"5 74\", \"5 75\", \"5 76\", \"5 77\", \"5 78\", \"5 79\", \"5 80\", \"5 81\", \"5 82\", \"5 83\", \"5 84\", \"5 85\", \"5 86\", \"5 87\", \"5 88\", \"5 89\", \"5 90\", \"5 91\", \"5 92\", \"5 93\", \"5 94\", \"5 95\", \"5 96\", \"5 97\", \"5 98\", \"5 99\", \"6 0\", \"6 1\", \"6 2\", \"6 3\", \"6 4\", \"6 5\", \"6 6\", \"6 7\", \"6 8\", \"6 9\", \"6 10\", \"6 11\", \"6 12\", \"6 13\", \"6 14\", \"6 15\", \"6 16\", \"6 17\", \"6 18\", \"6 19\", \"6 20\", \"6 21\", \"6 22\", \"6 23\", \"6 24\", \"6 25\", \"6 26\", \"6 27\", \"6 28\", \"6 29\", \"6 30\", \"6 31\", \"6 32\", \"6 33\", \"6 34\", \"6 35\", \"6 36\", \"6 37\", \"6 38\", \"6 39\", \"6 40\", \"6 41\", \"6 42\", \"6 43\", \"6 44\", \"6 45\", \"6 46\", \"6 47\", \"6 48\", \"6 49\", \"6 50\", \"6 51\", \"6 52\", \"6 53\", \"6 54\", \"6 55\", \"6 56\", \"6 57\", \"6 58\", \"6 59\", \"6 60\", \"6 61\", \"6 62\", \"6 63\", \"6 64\", \"6 65\", \"6 66\", \"6 67\", \"6 68\", \"6 69\", \"6 70\", \"6 71\", \"6 72\", \"6 73\", \"6 74\", \"6 75\", \"6 76\", \"6 77\", \"6 78\", \"6 79\", \"6 80\", \"6 81\", \"6 82\", \"6 83\", \"6 84\", \"6 85\", \"6 86\", \"6 87\", \"6 88\", \"6 89\", \"6 90\", \"6 91\", \"6 92\", \"6 93\", \"6 94\", \"6 95\", \"6 96\", \"6 97\", \"6 98\", \"6 99\", \"7 0\", \"7 1\", \"7 2\", \"7 3\", \"7 4\", \"7 5\", \"7 6\", \"7 7\", \"7 8\", \"7 9\", \"7 10\", \"7 11\", \"7 12\", \"7 13\", \"7 14\", \"7 15\", \"7 16\", \"7 17\", \"7 18\", \"7 19\", \"7 20\", \"7 21\", \"7 22\", \"7 23\", \"7 24\", \"7 25\", \"7 26\", \"7 27\", \"7 28\", \"7 29\", \"7 30\", \"7 31\", \"7 32\", \"7 33\", \"7 34\", \"7 35\", \"7 36\", \"7 37\", \"7 38\", \"7 39\", \"7 40\", \"7 41\", \"7 42\", \"7 43\", \"7 44\", \"7 45\", \"7 46\", \"7 47\", \"7 48\", \"7 49\", \"7 50\", \"7 51\", \"7 52\", \"7 53\", \"7 54\", \"7 55\", \"7 56\", \"7 57\", \"7 58\", \"7 59\", \"7 60\", \"7 61\", \"7 62\", \"7 63\", \"7 64\", \"7 65\", \"7 66\", \"7 67\", \"7 68\", \"7 69\", \"7 70\", \"7 71\", \"7 72\", \"7 73\", \"7 74\", \"7 75\", \"7 76\", \"7 77\", \"7 78\", \"7 79\", \"7 80\", \"7 81\", \"7 82\", \"7 83\", \"7 84\", \"7 85\", \"7 86\", \"7 87\", \"7 88\", \"7 89\", \"7 90\", \"7 91\", \"7 92\", \"7 93\", \"7 94\", \"7 95\", \"7 96\", \"7 97\", \"7 98\", \"7 99\", \"8 0\", \"8 1\", \"8 2\", \"8 3\", \"8 4\", \"8 5\", \"8 6\", \"8 7\", \"8 8\", \"8 9\", \"8 10\", \"8 11\", \"8 12\", \"8 13\", \"8 14\", \"8 15\", \"8 16\", \"8 17\", \"8 18\", \"8 19\", \"8 20\", \"8 21\", \"8 22\", \"8 23\", \"8 24\", \"8 25\", \"8 26\", \"8 27\", \"8 28\", \"8 29\", \"8 30\", \"8 31\", \"8 32\", \"8 33\", \"8 34\", \"8 35\", \"8 36\", \"8 37\", \"8 38\", \"8 39\", \"8 40\", \"8 41\", \"8 42\", \"8 43\", \"8 44\", \"8 45\", \"8 46\", \"8 47\", \"8 48\", \"8 49\","
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == 40\nassert solution(\"5 2\") == 40\nassert solution(\"1 2 1\") == 5\nassert solution(\"1 1 1\") == 1\nassert solution(\"2 1 2\") == 3\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"40\"\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == 40\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"40\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"100\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"999\") == \"999\"\nassert solution(\"3\") == \"999\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"12\"\nassert solution(\"1 2 5\") == \"2\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 4\") == \"0\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,1) == 2\nassert solution(2,1) == 2\nassert solution(3,3) == 4\nassert solution(2,4) == 4\nassert solution(2,5) == 5\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4 3 6 7 8 9\") == \"3\"\nassert solution(\"2 4 3 6 7 8 9\") == \"1\"\nassert solution(\"2 4 3 6 7 8 9\") == \"0\"\nassert solution(\"2 4 3 6 7 8 9\") == \"0\"\nassert solution(\"2 4 3 6 7 8 9\") == \"1\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '4'\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"6 3\") == \"5\"\nassert solution(\"9 6\") == \"2\"\nassert solution(\"15 4\") == \"1\"\nassert solution(\"15 9\") == \"1\"\nassert solution(\"15 2\") == \"1\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n\n---Test Input File---\ntest_cases.txt\na b\n\nb a\n\n----Sample Output File----\nTest case 1:\nInput:\n8 13\n\nOutput:\n2\n\nTest case 2:\nInput:\n6 12\n\nOutput:\n2\n\nTest case 3:\nInput:\n8 2\n\nOutput:\n2\n\nTest case 4:\nInput:\n1 1\n\nOutput:\n1\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"15\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 4') == 3\nassert solution('1') == 0\nassert solution('2') == 0\nassert solution('3') == 0"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('10 4') == '3'\nassert solution('10 3') == '3'\nassert solution('20 1') == '2'\nassert solution('20 2') == '0'\nassert solution('20 3') == '0'\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n[10, 4, 7, 9, 10]\n) == \"3\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('4 2') == '3'\nassert solution('4 2') == '1'\nassert solution('1 1') == '2'\nassert solution('1 4') == '3'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"10 4\") == \"3\"\n\nassert solution(\n    \"10 2\") == \"3\"\n\nassert solution(\n    \"15 3\") == \"0\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('10 4') == '3'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"\"\n'''"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10 4') == 2\nassert solution('10 4') == 3\nassert solution('10 5') == 3\nassert solution('10 5') == 3\nassert solution('10 5') == 4\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z') == 60\nassert solution('a, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z') == 25\nassert solution('a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z') == 100\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0 0 75 25 100\") == 50\nassert solution(\"0 75 0 25 100\") == 50\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0 75 25 100\") == 50\nassert solution(\"1 75 25 100\") == 50\nassert solution(\"2 75 25 100\") == 50\nassert solution(\"3 75 25 100\") == 50\nassert solution(\"4 75 25 100\") == 50\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '50'\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0, 75, 25, 100) == 50\nassert solution(75, 25, 100, 100) == 50\nassert solution(75, 25, 100, 75) == 50\nassert solution(75, 25, 75, 100) == 50\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 50"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0 0 75 25 100\") == 5\nassert solution(\"1 0 75 25 100\") == 10\nassert solution(\"2 0 75 25 100\") == 8\nassert solution(\"3 0 75 25 100\") == 4\nassert solution(\"4 0 75 25 100\") == 2\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '50'\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 50\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0 75 25 100\") == 50\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"100\") == \"1\"\nassert solution(\"105\") == \"1\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(str) == \"1\""
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"105\") == \"1\"\nassert solution(\"106\") == \"2\"\nassert solution(\"107\") == \"2\"\nassert solution(\"108\") == \"1\"\nassert solution(\"109\") == \"2\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"Expected solution to return 0 but got '{}'.\".format(stdin)\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == \"2\"\nassert solution(105) == \"2\"\nassert solution(12) == \"0\"\nassert solution(52) == \"0\"\nassert solution(108) == \"0\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('105') == '1'\n\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(105) == 1\n\nGiven an array of integers nums. We define a positive integer s to be a smaller number if s \u2264 n (mod 10^9).\n\nGiven an integer target, return the number of indices i, j, k such that i < j < k such that nums[i] + nums[j] + nums[k] < target.\n\nYou may assume that each input would have exactly one solution and you may not use the same element twice.\n\n\n\nExample 1:\n\nInput: nums = [2,3,4,1,4,3], target = 6\nOutput: [1,2,3,5,6]\nExplanation: The first solution is [1,2,4,6].\nThe second solution is [1,3,4,6].\nThe third solution is [1,4,6].\nExample 2:\n\nInput: nums = [2,3,4,1,4,2], target = 10\nOutput: [1,2,4,6]\nExplanation: The first solution is [1,4,6].\nThe second solution is [2,3,4,6].\nThe third solution is [1,2,4,6].\nExample 3:\n\nInput: nums = [1], target = 1\nOutput: [1]\nExample 4:\n\nInput: nums = [1], target = 2\nOutput: [1,1]\n\n\nConstraints:\n\n2 <= nums.length <= 100\n0 <= nums[i] <= 1000\nnums is sorted in non-decreasing order.\n1 <= target <= 1000\n\nAccepted\n561,872\nSubmissions\n156,947\n\nclass Solution:\n    def countPositiveNumbersWithSums(self, nums: List[int], target: int) -> int:\n        nums = [i for i in nums]\n        nums.sort()\n        return sum([1 if i + num in nums else 0 for i,num in enumerate(nums)])\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(112) == 1\nassert solution(108) == 0\nassert solution(105) == 1\nassert solution(103) == 3\nassert solution(311) == 5\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(13) == '1'\nassert solution(52) == '1'\nassert solution(97) == '1'\nassert solution(404) == '1'\nassert solution(2001) == '1'\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('2 1') == '0'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0 3\"), \"0 3\"\nassert solution(\"0 3 2\"), \"0 3 2\"\nassert solution(\"0 3 2 2\"), \"0 3 2 2\"\nassert solution(\"0 3 2 2 3\"), \"0 3 2 2 3\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"2 1\") == \"3\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"6 5\") == \"2\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"1\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"1\"\nassert solution(\"1 5\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"2 6\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"1\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10 5 20 20\") == \"12\"\nassert solution(\"10 50 20 30\") == \"17\"\nassert solution(\"15 20 20\") == \"14\"\nassert solution(\"100 20 30\") == \"25\"\nassert solution(\"15 20 50\") == \"14\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0) == 0\nassert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"111\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('100') == '111'\nassert solution('000') == '1'\nassert solution('001') == '2'\nassert solution('010') == '3'\nassert solution('011') == '4'\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"011\") == \"111\"\nassert solution(\"1110\") == \"1110\"\nassert solution(\"1000\") == \"1000\"\nassert solution(\"\") == \"0\"\nassert solution(\"a\") == \"1\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"111\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(999)\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '111'\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '111'\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('111') == '111'\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('12') == '12'\nassert solution('123') == '123'\nassert solution('0') == '0'\nassert solution('1123') == '123'\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2 3\", \"1 4\", \"1 7\", \"1 12\"]) == \"7\"\nassert solution([\"3 1\", \"3 4\", \"1 6\", \"3 2\", \"1 7\", \"1 8\", \"3 9\", \"1 11\", \"1 12\"]) == \"2\"\nassert solution([\"2 3\", \"1 4\", \"1 7\", \"1 12\"]) == \"2\"\nassert solution([\"3 1\", \"3 4\", \"1 6\", \"3 2\", \"1 7\", \"1 8\", \"3 9\", \"1 11\", \"1 12\"]) == \"3\"\nassert solution([\"1 6\", \"1 7\", \"1 8\", \"1 12\"]) == \"2\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '5'\nassert solution('4 2') == '7'\nassert solution('1 1') == '2'\nassert solution('1 3') == '4'\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1 6 3\"\n) == 5\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\""
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"aabbaccc\") == \"5\"\nassert solution(\"ababcdcdababcdcd\") == \"10\"\nassert solution(\"abcabcdede\") == \"0\"\nassert solution(\"abcabcabcdededededede\") == \"4\"\nassert solution(\"ababababa\") == \"2\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 4 2 2\") == \"5\"\nassert solution(\"1 6 5\") == \"5\"\nassert solution(\"1 7 4 3\") == \"5\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"10\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1 6 3\", \"1 -1 -1\"]) == \"5\"\nassert solution([\"1 6 3\"]) == \"0\"\n\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n'''\nimport unittest\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(test_case1) == 5\nassert solution(test_case2) == 0\nassert solution(test_case3) == 5\nassert solution(test_case4) == 0\nassert solution(test_case5) == 0\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '5'\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 5\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n\n-----Sample Input-----\n5\n\n8\n8\n\n1\n1\n\n5\n5\n\na=\\{8,4,2,1,4,2,1,4,2,1,......\\}. As a_5=a_2, the answer is 5.\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(8) == 5\nassert solution(4) == 5\nassert solution(2) == 6\nassert solution(1) == 7\nassert solution(4) == 5\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"5\"\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n3"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"5\"\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"5\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 'No'\nassert solution(input) == 'Yes'\n"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 'Yes'\nassert solution(inp) == 'No'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(A,B,C,D) == \"No\"\nassert solution(A,B,C,D) == \"Yes\"\nassert solution(A,B,C,D) == \"No\"\nassert solution(A,B,C,D) == \"Yes\"\nassert solution(A,B,C,D) == \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 'Yes'\n\n>>> import sys\n>>> sys.setrecursionlimit(10**6)\n>>> from collections import defaultdict\n>>> import heapq\n>>> def solve(G, M):\n...     H = defaultdict(int)\n...     for s in G:\n...         H[s[0]] += s[1]\n...         H[s[1]] += s[0]\n...     q = []\n...     heapq.heappush(q, (0, [M]))\n...     while q:\n...         w, v = heapq.heappop(q)\n...         if w <= H[M]:\n...             continue\n...         for s in G[M]:\n...             if w + s[0] < H[s[1]]:\n...                 heapq.heappush(q, (w + s[0], v + [s]))\n...     return [m for m in H if H[m] == 0]\n\n>>> G = {\n...     'A': {'B': 1, 'C': 1, 'D': 1},\n...     'B': {'A': 1, 'C': 1, 'D': 1},\n...     'C': {'B': 1, 'A': 1, 'D': 1},\n...     'D': {'B': 1, 'A': 1, 'C': 1},\n...     'E': {'B': 2, 'C': 1},\n...     'F': {'A': 2, 'B': 2},\n...     'G': {'A': 1, 'B': 2, 'D': 1, 'E': 2, 'F': 2},\n... }\n>>> solution('G')\n['E', 'G']\n>>> solution('A')\n['B', 'D']\n>>> solution('A', G)\n['A']\n>>> solution('A', G, G)\n['A', 'B', 'D', 'E', 'G']\n>>> G = {\n...     'A': {'B': 2, 'C': 1},\n...     'B': {'A': 1, 'C': 1},\n...     'C': {'B': 1, 'A': 1, 'D': 1},\n...     'D': {'B': 1, 'A': 1, 'C': 1},\n...     'E': {'A': 2, 'B': 2},\n...     'F': {'A': 2, 'B': 2},\n...     'G': {'A': 1, 'B': 2, 'D': 1, 'E': 2, 'F': 2},\n... }\n>>> G['A']\n{'B': 2, 'C': 1, 'D': 1, 'E': 2, 'F': 2, 'G': 1}\n>>> solution('A', G)\n['A']\n>>> solution('A', G, G)\n['A', 'B', 'D', 'E', 'G']\n>>> G = {\n...     'A': {'B': 1, 'C': 1, 'D': 2},\n...     'B': {'A': 2, 'C': 2},\n...     'C': {'A': 2, 'B': 2},\n...     'D': {'B': 1, 'C': 2, 'A': 2},\n...     'E': {'A': 2, 'B': 2},\n...     'F': {'A': 1, 'B': 1},\n...     'G': {'A': 1, 'B': 1, 'D': 1},\n... }\n>>> G['A']\n{'B': 1, 'C': 1, 'D': 2, 'E': 2, 'F': 1, 'G': 1}\n>>> solution('A', G)\n['A', 'B', 'D', 'E', 'G']\n>>> G = {\n...     'A': {'B': 1, 'C': 1, 'D': 2, 'E': 2, 'F': 2},\n...     'B': {'A': 2, 'C': 2},\n...     'C': {'A': 2, 'B': 2, 'D': 1},\n...     'D': {'A': 1, 'B': 2},\n...     'E': {'A': 1, 'B': 1, 'C': 1},\n...     'F': {'A': 1, 'B': 1, 'C': 1},\n...     'G': {'A': 1, 'B': 1, 'D': 1},\n... }\n>>> G['A']\n{'B': 1, 'C': 1, 'D': 2, 'E': 2, 'F': 2, 'G': 1}\n>>> solution('A', G)\n['A', 'B', 'D', 'E', 'G']\n>>> G = {\n...     'A': {'B': 1, 'C': 1, 'D': 2, 'E': 2, 'F': 2, 'G': 1},\n...     'B': {'A': 2, 'C': 2},\n...     'C': {'A': 2, 'B': 2, 'D': 1},\n...     'D': {'A': 1, 'B': 2},\n...     'E': {'A': 1, 'B': 1, 'C': 1},\n...     'F': {'A': 1, 'B': 1, 'C': 1},\n...     'G': {'A': 1, 'B': 1, 'D': 1},\n... }\n>>> G['A']\n{'B': 1, 'C': 1, 'D': 2, 'E': 2, 'F': 2, 'G': 1}\n>>> solution('A', G)\n['A', 'B', 'D', 'E', 'G']\n>>> G = {\n...     'A': {'B': 1, 'C': 1, 'D': 2, 'E': 2, 'F': 2, 'G': 1},\n...     'B': {'A': 2, 'C': 2},\n...     'C': {'A': 2, 'B': 2, 'D': 1},\n...     'D': {'A': 1, 'B': 2, 'C': 1},\n...     'E': {'A': 1, 'B': 1, 'C': 1},\n...     'F': {'A': 1, 'B': 1, 'C': 1},\n...     'G': {'A': 1, 'B': 1, 'D': 1},\n... }\n>>> G['A']\n{'B': 1, 'C': 1, 'D': 2, 'E': 2, 'F': 2, 'G': 1}\n>>> solution('A', G)\n['A', 'B', 'D', 'E', 'G']\n>>> G = {\n...     'A': {'B': 1, 'C': 1, 'D': 2, 'E': 2, 'F': 2, 'G': 1},\n...     'B': {'A': 2, 'C': 2},\n...     'C': {'A': 2, 'B': 2, 'D': 1},\n...     'D': {'A': 1, 'B': 2},\n...     'E': {'A': 1, 'B': 1, 'C': 1},\n..."
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('10 9 10 10') == 'Yes'\nassert solution('1') == 'No'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"No\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 'Yes'\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '5'\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 10 6\"), \"Invalid input\"\nassert solution(\"3 10 5\"), \"Invalid input\"\nassert solution(\"3 10 4\"), \"Invalid input\"\nassert solution(\"3 10 1\"), \"Invalid input\"\nassert solution(\"3 2 4\"), \"Invalid input\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 2 5') == 5\nassert solution('3 4 6') == 6\nassert solution('6 3 4') == 6"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n  \"3 5 10 2\"\n) == \"5\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"15\"\n'''"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"5\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"2 4\") == \"6\"\nassert solution(\"3 4\") == \"8\"\nassert solution(\"3 5\") == \"9\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(n, c) == 5, 'expected 5, got {}'.format(5)\nassert solution(n, c) == 5, 'expected 5, got {}'.format(5)\nassert solution(n, c) == 5, 'expected 5, got {}'.format(5)\nassert solution(n, c) == 5, 'expected 5, got {}'.format(5)\nassert solution(n, c) == 5, 'expected 5, got {}'.format(5)\n\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 3 10') == 5\nassert solution('1 4 2') == 3\nassert solution('1 1 3') == 2\nassert solution('1 1 1') == 1\nassert solution('2 3 3 4') == 3\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"#\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \".##.\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"...#\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"H W\") == \"####\"\nassert solution(\"H W\") == \"##\"\nassert solution(\"H W\") == \"....\"\nassert solution(\"H W\") == \"....\"\nassert solution(\"H W\") == \"####\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"\"\"....\n...##\n.#..\n####\n###.\n\n....\n###.\n....\n\"\"\") == \"###.\"\nassert solution(\"\"\"\n.##\n..##\n...##\n.##\n\"\"\") == \"..##\"\nassert solution(\"\"\"\n.##\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"#.##\",\n                \".#.##\",\n                \"#.#.#\",\n                \"##.##\"]) == \"####\"\nassert solution([\"#.##\",\n                \"#.#.#\",\n                \"#.##\",\n                \"####\"]) == \"####\"\nassert solution([\"..#\",\n                \"###\",\n                \"###\",\n                \"###\"]) == \"##.#\"\nassert solution([\"#.#\",\n                \"#.#\",\n                \"##.#\",\n                \"##.#\"]) == \"####\"\nassert solution([\"...#\",\n                \"#...\",\n                \"###.#\",\n                \"##.##\"]) == \"####\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"#..#\") == \"..#\"\nassert solution(\"####\") == \"#\"\nassert solution(\"#...#\") == \"#\"\nassert solution(\"#.##\") == \"#\"\nassert solution(\"###.##\") == \".\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"###\n....\n##.#\n....\n##.#\n.##\"\"\") == \"###.###.###.###\"\nassert solution(\"\"\"###\n....\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \".\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \".####\"\n\n\n-----Sample Tests-----\nTest case 1:\nInput:\nH 4\na.aaaaaaaaaaa\nb.bbbbbbbbbbb\nc.ccccccccccc\nd.dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\nassert solution(\"2\") == \"6.28318530717958623200\"\nassert solution(\"3\") == \"6.28318530717958623200\"\nassert solution(\"4\") == \"6.28318530717958623200\"\nassert solution(\"5\") == \"6.28318530717958623200\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"-1\") == \"6\"\nassert solution(\"1\") == \"6.28318530717958623200\"\nassert solution
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"6.28318530717958623200\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == 6.28318530717958623200\nassert solution(\"0\") == \"No\"\nassert solution(\"1.23\") == \"No\"\nassert solution(\"0.23\") == \"No\"\nassert solution(\"1.0\") == \"No\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1') == '6.2831853071795865'\nassert solution('2') == '6.2832086956521739130895651628'\nassert solution('3') == '6.2832086956521739130895651628'\nassert solution('4') == '6.2832086956521739130895651628'\nassert solution('5') == '6.2831853071795865'\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(STDIN::\n        \"1\"\n        \"R\"\n    )\n\nassert solution(STDIN::\n        \"R\"\n        \"3\"\n    ) == \"3.141592653589793\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0\") == str(0), \"Invalid input\"\nassert solution(\"1\") == str(1), \"Invalid input\"\nassert solution(\"2\") == str(2), \"Invalid input\"\nassert solution(\"3\") == str(3), \"Invalid input\"\nassert solution(\"4\") == str(4), \"Invalid input\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '6.28318530717958623200'\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\"), \"1 is not a valid string\"\nassert solution(\"2\"), \"2 is not a valid string\"\nassert solution(\"3\"), \"3 is not a valid string\"\nassert solution(\"4\"), \"4 is not a valid string\"\nassert solution(\"5\"), \"5 is not a valid string\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '6.28318530717958623200'\n\n----------------------------\n'''"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(ASSS) == True\nassert solution(ASSD) == False"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"ASSS\") == \"Yes\"\nassert solution(\"ASAA\") == \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"ASSSAS\") == \"Yes\"\nassert solution(\"ASSSAS\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"A\",\"A\",\"A\",\"A\"]) == \"Yes\"\nassert solution([\"A\",\"A\",\"B\",\"B\",\"B\"]) == \"No\"\nassert solution([\"A\",\"B\",\"B\",\"B\",\"B\"]) == \"Yes\"\nassert solution([\"A\",\"B\",\"C\",\"C\",\"C\",\"C\"]) == \"No\"\nassert solution([\"A\",\"B\",\"C\",\"C\",\"D\",\"C\"]) == \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ASAS\") == \"Yes\"\nassert solution(\"Aaa\") == \"No\"\nassert solution(\"A\") == \"Yes\"\nassert solution(\"\") == \"No\"\n\"\"\"\n\nclass Solution:\n    def solution(self, s):\n        if len(s)<2:\n            return \"No\"\n        start = 0\n        end = 1\n        dic = {}\n        while end < len(s):\n            if s[start:end] not in dic:\n                dic[s[start:end]] = 1\n            else:\n                dic[s[start:end]] = dic[s[start:end]] + 1\n            start += 1\n            end += 1\n        if dic.get(s[0]) == 2:\n            return \"No\"\n        else:\n            return \"Yes\""
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 'Yes'\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        try:\n            return (self.solution_x(stdin))\n        except Exception:\n            return ('No')\n\n    def solution_x(self, string):\n        count = 0\n        for char in string:\n            if char == string[count]:\n                count += 1\n            else:\n                count = 0\n        if count == len(string):\n            return 'Yes'\n        else:\n            return 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"F\",\"E\"]) == \"F\"\nassert solution([\"A\",\"A\",\"A\",\"A\",\"A\"]) == \"A\"\nassert solution([\"AA\",\"AB\",\"AC\"]) == \"A\"\nassert solution([\"ABC\",\"CD\",\"ABC\"]) == \"A\"\nassert solution([\"B\",\"B\",\"B\",\"B\"]) == \"B\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(s) == \"Yes\"\n\n\n------------------\nSolution:\n\nfrom collections import defaultdict"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('AAAAA') == 'Yes'\nassert solution('B') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(str(1 + 4 * 5 * 6 * 7 * 8 * 9 * 10)) == str(10)\nassert solution(str(1 + 4 * 5 * 6 * 7 * 8 * 9 * 10)) == str(-16)\nassert solution(str(1 + 4 * 5 * 6 * 7 * 8 * 9 * 10)) == str(-39)\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\",\"3\",\"-2\",\"4\",\"1\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"5\"\nassert solution([\"1\",\"2\"]) == \"1\"\nassert solution([\"3\",\"2\",\"1\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\"]) == \"3\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"10\"\nassert solution(input()) == \"14\"\nassert solution(input()) == \"22\"\nassert solution(input()) == \"46\"\nassert solution(input()) == \"24\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 3\nassert solution(3) == 6\nassert solution(4) == 10\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3,3) == 5\nassert solution(2,3) == -1\nassert solution(5,5) == -10\nassert solution(12,5) == -16\nassert solution(13,5) == -39\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '-10'"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"9 3\") == \"13\", \"Checking solution\"\nassert solution(\"3 4\") == \"8\", \"Checking solution\"\nassert solution(\"4 7\") == \"16\", \"Checking solution\"\nassert solution(\"5 6\") == \"10\", \"Checking solution\"\nassert solution(\"3 5\") == \"5\", \"Checking solution\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('-13 3') == '-10'\nassert solution('-13 5') == '-13'\nassert solution('-13 1') == '-13'\nassert solution('-13 7') == '-13'\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"7 4\") == \"-10\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"0 3\") == \"0\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"16\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 4 6 8\") == \"3\"\nassert solution(\"3 5 6 7\") == \"1\"\nassert solution(\"3 3 2 1\") == \"2\"\nassert solution(\"10 10 10 10\") == \"6\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 5, \"expected 5\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == 3\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 5 6 8\") == \"3\"\nassert solution(\"1\") == \"3\"\nassert solution(\"4 6 8 10\") == \"2\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"1 5\") == \"0\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 3, \"Your function solution should return 3.\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 1 3 4 5 10 11 12\") == \"3\"\nassert solution(\"4 3 5 10\") == \"4\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5 6 3 9 2 6 8 4 10\") == \"4\"\nassert solution(\"3 3 2 5 1 4 2 8\") == \"1\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\nassert solution('4\\n4 6 8') == '3'\nassert solution('4\\n6 4') == '3'\nassert solution('4\\n10') == '4'\nassert solution('5\\n3\\n4\\n4\\n4\\n4') == '3'\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 6 5 5\") == \"3\"\nassert solution(\"6 8 5\") == \"3\"\nassert solution(\"6 10 5\") == \"2\"\nassert solution(\"7 7 10\") == \"1\"\nassert solution(\"1 2 1\") == \"2\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 5 6 3 4\") == \"3 4 1 1 2\"\nassert solution(\"4 5 3 4 3\") == \"1 2 3\"\nassert solution(\"1 2 3 4 3\") == \"1 3 2\""
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 2 3 4 1 2 3 4\"\nassert solution(stdin) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2 3 1 2 3 4'\nassert solution(stdin) == '3 4 2'\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 2\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"4 2 3 4 5\") == \"3 1 1 1\"\nassert solution(\n    \"2 4 5\") == \"2 1\"\nassert solution(\n    \"3 1 1 1\") == \"1 1 1\"\nassert solution(\n    \"1 2 3 4 5\") == \"2 1\"\nassert solution(\n    \"5 3 4 2 1\") == \"4 1\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1 2 3 4 5\", \"1 1 1 1\"]) == \"1 2 3 4 5 1 1 2 3 4\"\nassert solution([\"1 1 1 1\"]) == \"1 1 1 1\"\nassert solution([\"1\"]) == \"1\"\nassert solution([\"2 2 1\"]) == \"2 2 1\"\nassert solution([\"1 1 2 3 4 5\"]) == \"1 1 2 3 4 5\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3 4'"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"Tanya should start with $1$ or $2$ or $3$, but Tanya doesn't start with $1$, $2$ or $3$. Invalid sequence\"\n\"\"\""
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin = \"7\"\n    ) == \"2 2 3 1 1 1 1\"\nassert solution(\n    stdin = \"4\"\n    ) == \"4 1 1 1 1\"\nassert solution(\n    stdin = \"5\"\n    ) == \"1 1 1 1 1 1\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('7') == '1'\nassert solution('3') == '2'\nassert solution('6') == '1'\nassert solution('7') == '7'\nassert solution('21') == '4'\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '7'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '7'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '7'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, [\"1\", \"2\"]) == \"1\"\nassert solution(5, [\"1\", \"3\", \"4\", \"5\"]) == \"1\"\nassert solution(5, [\"2\", \"3\", \"4\", \"5\"]) == \"1\"\nassert solution(5, [\"1\", \"2\", \"3\"]) == \"1\"\nassert solution(5, [\"1\", \"2\", \"3\", \"4\"]) == \"1\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0) == \"1\"\nassert solution(1) == \"2\"\nassert solution(2) == \"1\"\nassert solution(3) == \"7\"\nassert solution(4) == \"4\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n'''7\n3\n6\n7\n21\n28\n999999999\n999999984'''\n) == 7\n\nassert solution(\n'''7\n3\n6\n7\n21\n28\n999999999\n999999984'''\n) == 3\n\nassert solution(\n'''7\n3\n6\n7\n21\n28\n999999999\n999999984'''\n) == 6\n\nassert solution(\n'''7\n3\n6\n7\n21\n28\n999999999\n999999984'''\n) == 2\n\nassert solution(\n'''7\n3\n6\n7\n21\n28\n999999999\n999999984'''\n) == 3"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10, \"Wrong input\"\n\n'''"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(123) == 50\nassert solution(5000) == 50\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 1000\n0 <= stdin[i] <= 10^9\n\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"50\"\nassert solution(\"12 3 4\") == \"50\"\nassert solution(\"1 4 5 6\") == \"50\"\nassert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9\") == \"11\"\nassert solution(\"0 1 1 1 1 1\") == \"0\"\nassert solution(\"3\") == \"3\"\nassert solution(\"6\") == \"5\"\nassert solution(\"34\") == \"10\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '50'\nassert solution(stdin) == '50'\nassert solution(stdin) == '50'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '50'\n\n-----Solution-----\n\nclass Solution:\n    def decrease(self, left, right, k):\n        count = 0\n        while count < k:\n            left -= 1\n            right -= 1\n            if left < 0:\n                return count\n            elif right < 0:\n                return count\n            else:\n                count += 1\n        return count\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"51\"\nassert solution(input()) == \"50\"\nassert solution(input()) == \"50\"\n\n\n-----Constraints-----\n0 < k < 10^9\n\nNote:\n\nFor $k$ = 1, the last digit of $n$ is always zero or positive.\nFor $k$ = 2, $n$ is even and $n$ is divisible by 2.\n\nInput Format\n\nA single line of input containing two space-separated integers $n$ and $k$ \u2014 the number from which Tanya will subtract and the number of subtractions correspondingly.\n\nConstraints\n\nOutput Format\n\nPrint one integer number \u2014 the result of the decreasing $n$ by one $k$ times.\n\n\n-----Example 1-----\nInput\n\n5\n5 5\n\nOutput\n\n50\n\n\n-----Example 2-----\nInput\n\n5\n1 3\n\nOutput\n\n3\n\n\n-----Example 3-----\nInput\n\n2\n4 6\n\nOutput\n\n0\n\n\n-----Example 4-----\nInput\n\n5 3\n\nOutput\n\n0\n\n\n-----Constraints-----\n\n0 < k < 10^9\n\nInput\n\n\n10\n\nOutput\n\n1\n\n\n-----Constraints-----\n\n0 < k < 10^9\n\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"512 4 \"\n) == \"51\"\nassert solution(\n    \"1000000000 9\"\n) == \"1\"\nassert solution(\n    \"1000000000 9\"\n) == \"0\"\nassert solution(\n    \"1000000000 9\"\n) == \"0\"\nassert solution(\n    \"1000000000 9\"\n) == \"0\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '50'\n\n\n-----Done-----\n'''"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '50'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 6, \"incorrect result\"\n'''\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin.readline().strip().split()\n) == \"2 3 5 1 2 2 1\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2 3'"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 7\nassert solution(stdin) == 7\nassert solution(stdin) == 7\nassert solution(stdin) == 7\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin=\"\"\"\n    7\n    4 3 5 1 2 2 1\n    \"\"\"\n), '63'\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 5\nassert solution(2) == 2\nassert solution(3) == 2\nassert solution(4) == 2\nassert solution(5) == 1\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 8\") == \"2\"\nassert solution(\"10 8\") == \"-1\"\nassert solution(\"7 4\") == \"0\"\nassert solution(\"3 1\") == \"0\"\nassert solution(\"5 4\") == \"0\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4 20') == '-1'\nassert solution('4 20') == '-1'\nassert solution('4 20') == '-1'\nassert solution('4 20') == '-1'\nassert solution('4 20') == '-1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"-1\""
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == 5\nassert solution(\"3 1\") == 1\nassert solution(\"1 10\") == 2\nassert solution(\"1 5\") == 1"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin=\n    input(\"Enter the stdin data to test\"\n    ),\n    stdin=\n    input(\"Enter the stdin data to test\"),\n    ) == \"2\""
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\n'''\n\nfrom sys import stdin\nfrom itertools import permutations"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"leelte\" or solution(stdin) == \"qwerty\" or solution(stdin) == \"vvvvvv\"\n\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3,7) == \"tleel\"\nassert solution(5,3) == \"qwerty\"\nassert solution(6,3) == \"vvvvvv\"\nassert solution(5,2) == \"abcde\""
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"leel\") == \"telle\"\nassert solution(\"leet\") == \"telle\"\nassert solution(\"lefte\") == \"telle\"\nassert solution(\"lepte\") == \"telle\"\nassert solution(\"lepqert\") == \"telle\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"tleelte\"\n\n-----My solution-----\nInput\n4\n7 5 3\n6 1 1\n6 6 1\n5 2 2\n\nOutput\ntleelte\nqwerty\nvvvvvv\nabcde\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"tleel\") == \"leelt\"\nassert solution(\"qwer\") == \"qwer\"\nassert solution(\"abcde\") == \"abcde\"\nassert solution(\"abcde\") == \"abcde\"\nassert solution(\"abcde\") == \"abcde\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"leelte\") == \"tleelte\"\nassert solution(\"qwerty\") == \"qwerty\"\nassert solution(\"vvvvvv\") == \"vvvvvv\"\nassert solution(\"abcde\") == \"abcde\"\nassert solution(\"abcde\") == \"abcde\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"qwerty\", \"Test case failed\"\nassert solution(stdin) == \"vvvvvv\", \"Test case failed\"\nassert solution(stdin) == \"abcde\", \"Test case failed\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(4) == \"tleel\"\nassert solution(7) == \"qwerty\"\nassert solution(6) == \"vvvvvv\"\nassert solution(5) == \"abcde\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('tleelteeeeeeeeeeelteeeeeeee') == 'qwertyu'\n\n\n--------Time complexity----------\n\nTime complexity of the function is O(n^2) \u2014 where n is the length of the strings and n^2 is the number of test cases.\n\nThe total number of test cases is O(n^2).\n\n\n--------Space complexity----------\n\nSpace complexity of the function is O(n).\n\nIf there are multiple valid answers, you must print them sequentially, as explained in the problem statement.\n\n\n---------Implementation---------\n\nWe have 2 pointers:\n\n1. We have to find a pair of indices whose sum is $n$ and $a$ and $b$ is the minimum index.\n2. When we reach that pair, we have to scan the string looking for the valid combinations of indices.\n\nWe will have to keep track of the total number of valid combinations, which is $b$, and increment $b$ as we scan the string.\n\nTo make sure that we have a valid answer, we will have to check whether we find a pair of indices whose sum is $n$ and $a$ and $b$ is the minimum index.\n\nTime complexity: O(n^2)\nSpace complexity: O(n^2)\n\nExample:\nInput:\n5\n6 2\n\nOutput:\ncle\nqw\nqr\nqz\n\nExplanation:\n\nWhen we reach the pair with minimum sum, the valid combinations are:\ncle qr\nqw\nqr\nqz\nqr\nqw\nqr\n\nIn total $b$ = 2. If we scan the string, we will have to find valid combinations of indices whose sum is $n$ and $a$ and $b$ is the minimum index.\n\nTime complexity: O(n^2)\nSpace complexity: O(n^2)\n\nNotice that we will have to scan the string twice. The second scan should be O(n^2) to get the total number of valid combinations.\n\n-> More than 2^(n/2) valid combinations.\n\n2^(n/2) valid combinations.\n-> If we scan the string twice, we will have to scan the string twice.\n-> If we scan the string again, we will have to scan the string twice.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string again, we will have to scan the string again.\n-> If we scan the string twice again, we will have to scan the string twice.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> If we scan the string twice again, we will have to scan the string twice again.\n-> There are only 2^(n/2) valid combinations"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, 3), \"tleelte\"\nassert solution(5, 4), \"qwerty\"\nassert solution(6, 4), \"vvvvvv\"\nassert solution(6, 3), \"abcde\"\n\n\n-----Constraints-----\n1 <= t <= 2000\nn \\le a \\le n \\le a + b <= 2^16\n\nTime Limit: 1 sec\nMemory Limit: 256MB\n\n\n-----Sample Input 1-----\n\n5\n3\n1 2\n1 2\n1 3\n1 4\n1 5\n\nSample Output 1\n\nqwerty\n\nSample Input 2\n\n4\n1 3\n3 3\n4 5\n5 4\n\nSample Output 2\n\nabcde\n\nExplanation\n\nThere are four valid answers, only the first three are correct.\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\npass\npass\n\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"6\", \"12\", \"12\", \"1\", \"1\", \"0\"]) == \"12\"\nassert solution([\"6\", \"12\", \"12\", \"1\", \"1\", \"0\"]) == \"0\"\nassert solution([\"1\"]) == \"0\"\nassert solution([\"4\"]) == \"1\"\nassert solution([\"7\"]) == \"1\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nassert solution(\"10 10 20\") == \"2\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"10 4\") == \"3\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 7\") == \"12\"\nassert solution(\"0 0 0 0\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 0 1\") == \"1\"\nassert solution(\"2 2 2\") == \"4\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1') == 1\nassert solution('100') == 4\nassert solution('-10000') == 11\nassert solution('0123456789') == 12\nassert solution('0') == 0"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n  input()\n) == 12\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 12\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 6\") == 6\nassert solution(\"5 6\") == 0\nassert solution(\"1\") == 0\nassert solution(\"1 2\") == 0\nassert solution(\"1 3\") == 1\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 4 3 2\") == 4\nassert solution(\"1 1 1 1 1 1 1 1 1 1\") == 0\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == 0\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == 0\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == 0\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\", \"1 failed\"\nassert solution(\"2\") == \"0\", \"2 failed\"\nassert solution(\"3\") == \"1\", \"3 failed\"\nassert solution(\"4\") == \"1\", \"4 failed\"\nassert solution(\"5\") == \"1\", \"5 failed\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('20 6') == '12'\nassert solution('20 12 6') == '12'\nassert solution('20 12') == '12'\nassert solution('20 12 2') == '2'\nassert solution('20 12 2 3') == '3'\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 5\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"2\"\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 4\n\ninput is an integer n, the number of students in a school.\n\noutput is an integer, the maximum number of groups that can be formed, which can be found using at most two or less students.\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n5\n\nFor example, you can form two or more groups consisting of three or more students.\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]) == \"2\"\nassert solution([\"2\",\"2\",\"2\"]) == \"3\"\nassert solution([\"1\",\"1\",\"2\"]) == \"3\"\n\"\"\"\n\nclass Solution:\n    def solution(self, x: int, y: int) -> int:\n        count = 0\n        for i in range(1, min(x, y) + 1):\n            if x % i == 0 and y % i == 0:\n                count += 1\n        return count"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"2\""
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"5\") == 2\nassert solution(\"2\") == 2\nassert solution(\"1\") == 2\nassert solution(\"4\") == 2\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"5\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(string) == '2'\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2\"), 2\nassert solution(\"4\"), 2\nassert solution(\"8\"), 2\n\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 2 2 3 2\") == \"3\"\nassert solution(\"1 3 2 2 3 4\") == \"3\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\u201c2 3 4 5 6 7 8\u201d) == \u201c3\u201d\nassert solution(\u201c1 2 3 4 5 6 7 8 9\u201d) == \u201c4\u201d\nassert solution(\u201c2 3 4 5 6 7 8\u201d) == \u201c2\u201d\nassert solution(\u201c2 3 4 5 6 7 8 9\u201d) == \u201c2\u201d\nassert solution(\u201c2 3 4 5 6 7 8 9 1\u201d) == \u201c2\u201d\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"3 3\") == \"3\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('2 1 3') == '3'\nassert solution('3 1 2') == '3'\nassert solution('4 4 5') == '5'\nassert solution('6 7 8 9') == '6'\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"3 3 3\") == \"3\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"4 3 3\") == \"3\"\nassert solution(\"2 1 1\") == \"1\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"A apple piece of apple is a type of fruit\") == \"3\"\nassert solution(\"A piece of apple is a type of fruit\") == \"3\"\nassert solution(\"A piece of apple is a type of fruit\") == \"2\"\nassert solution(\"A piece of apple is a type of fruit\") == \"2\"\nassert solution(\"A piece of apple is a type of fruit\") == \"1\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 3') == '3'\nassert solution('0 0 0') == '0'\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"2 2 2\") == \"4\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"4 6\") == \"3\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 3' ==> 3') == True\nassert solution('2 4') == True\nassert solution('1 3') == True\nassert solution('1 1') == 1\nassert solution('1 2') == 2\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"4\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"4 12\"\n) == \"16\"\n\n\n---REMEMBER TO REMEMBER TO DO TESTING:\n\n---Constraints:---\n1 <= A <= B <= 20\n\n---Time Limit:---\n1 minute\n\n---Memory Usage:---\nO(1)\n\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"16\""
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"16\"\nassert solution(input) == \"14\"\nassert solution(input) == \"5\"\nassert solution(input) == \"2\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"16\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"16\"\nassert solution(input) == \"16\"\n\nprint(\"Congrats! Your solution seems correct!\")"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"5 5\"\n) == \"16\"\nassert solution(\n    \"7 7\"\n) == \"6\"\nassert solution(\n    \"4 9\"\n) == \"0\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"4 12\") == \"16\"\nassert solution(\"5 9\") == \"25\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"4 6\") == \"6\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"16\""
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(s) == 'Yes'\nassert solution(t) == 'No'"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('zxc') == 'Yes'\nassert solution('zxcz') == 'No'\nassert solution('zxczy') == 'Yes'\nassert solution('zxcxy') == 'No'\n\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"takahashi\") == \"Yes\"\nassert solution(\"babbab\") == \"No\"\nassert solution(\"chokudai\") == \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input(\"No, so can't have a possible ID\")) == \"No\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudai\") == \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"hello\") == \"Yes\"\nassert solution(\"hell\") == \"No\"\nassert solution(\"helloi\") == \"No\"\nassert solution(\"chokudai\") == \"Yes\"\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        import string\n        return string.ascii_lowercase[int(stdin)]\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"Takahashi\") == \"Yes\"\nassert solution(\"chokudai\") == \"No\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"1 6\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == solution(input())\nassert solution(input())!= solution(input())\n\n-----Sample Output-----\n2 16\n\n|2 - 9| = 7 and |16 - 9| = 7, so 9 does not satisfy the condition.\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '7'\nassert solution(input) == '7'\nassert solution(input) == 'IMPOSSIBLE'\nassert solution(input) == 'IMPOSSIBLE'\nassert solution(input) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '9'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '9'\n\"\"\"\nimport sys\nimport itertools\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 16\") == \"9\"\nassert solution(\"4 7\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2) == \"9\"\nassert solution(16) == \"9\"\nassert solution(16) == \"IMPOSSIBLE\"\nassert solution(\"a b\") == \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '7'\nassert solution(inp) == '7'\nassert solution(inp) == '7'\nassert solution(inp) == '7'\nassert solution(inp) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"2\",\"16\"]) == \"9\"\nassert solution([\"2\",\"3\",\"8\",\"4\",\"6\"]) == \"10\"\nassert solution([\"4\",\"5\",\"9\",\"10\",\"10\",\"9\",\"8\",\"7\",\"6\",\"5\",\"4\",\"3\",\"2\",\"1\",\"0\"]) == \"8\"\nassert solution([\"2\",\"3\",\"8\",\"4\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"3\",\"2\"]) == \"10\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(117) == \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(117) == 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"111111\") == \"Yes\"\nassert solution(\"0000\") == \"No\"\nassert solution(\"1111\") == \"No\"\nassert solution(\"11234\") == \"Yes\"\nassert solution(\"1234\") == \"Yes\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 'Yes'\nassert solution(input) == 'No'\n\n'''"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(117) == \"Yes\"\nassert solution(695) == \"No\"\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"111\") == \"Yes\"\nassert solution(\"111\") == \"No\"\nassert solution(\"1111\") == \"Yes\"\nassert solution(\"1111\") == \"No\"\nassert solution(\"111111\") == \"Yes\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(117) == 'Yes'\n\n\n---Constraints---\n 1 <= N <= 10^6\n\n------Time complexity------\nO(N)\n\n------Space complexity------\nO(N)\n'''\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(12) == \"Yes\""
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(12) == 'Yes'\nassert solution(12) == 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(12) == 'Yes', \"solution() failed!\"\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(12) == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\n\nIn this input, N=12.\nAs S(12) = 1 + 2 = 3, S(N) divides N.\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == \"Yes\"\nassert solution(7) == \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"12\") == \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(12) == 'Yes'\nassert solution(13) == 'No'\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"0 0 0 1\"\nassert solution(input()) == \"0 0 0 1\"\nassert solution(input()) == \"0 0 0 1\"\nassert solution(input()) == \"1 1 -1 0\"\nassert solution(input()) == \"1 1 -1 0\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"x_3,y_3,x_4,y_4\""
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\nassert solution(\"0 0 0 1\") == \"-1 -1 1 0\"\nassert solution(\"0 0 0 1\") == \"-1 -1 0 1\"\nassert solution(\"0 0 0 1\") == \"0 0 0 1\"\nassert solution(\"0 0 0 1\") == \"0 1 -1 0\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 10 10 10\") == \"-1 1 -1 0\"\nassert solution(\"10 10 10 -10 10\") == \"-1 1 -1 0\"\nassert solution(\"10 -10 -10 -10 -10 10\") == \"-1 1 -1 0\"\nassert solution(\"10 -10 0 0 0 -10 0 -10\") == \"-1 1 -1 0\"\nassert solution(\"10 -10 -10 10 -10 -10\") == \"-1 1 -1 0\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '0 0 1'\n'''"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"-1 1 -1 0\""
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\nassert solution('0 0 0 1') == '-1 1 -1 0'\nassert solution('0 0 0 1') == '-1 1 -1 0'\nassert solution('0 0 0 1') == '-1 1 -1 0'\nassert solution('0 0 0 1') == '-1 1 -1 0'\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\nassert solution(\"0 0 0 2\") == \"1 1 0 -1\"\nassert solution(\"0 0 0 3\") == \"0 1 0 -1\"\nassert solution(\"0 0 0 4\") == \"0 -1 -1 0\"\nassert solution(\"0 0 0 5\") == \"0 1 0 -1\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0 0 0 1\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1 1 -1 0'\nassert solution(stdin) == '-1 1 0'\nassert solution(stdin) == '-1 -1 0'\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('A5B'), \"The first ball of the 4 of A and B is not 5.\"\nassert solution('A'), \"The first ball of the 4 of A is not 1.\"\nassert solution('A5B'), \"The second ball of the 4 of A and B is not 5.\"\nassert solution('A5B5'), \"The third ball of the 4 of A and B is not 5.\"\nassert solution('A5B5'), \"The fourth ball of the 4 of A and B is not 5.\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"The function should return a string.\"\n'''\nimport unittest\n\nclass Solution(object):\n\n    def solution(self, stdin):\n        pass\n\n\nclass Test(unittest.TestCase):\n    def test_0(self):\n        solution_input = \"red blue\"\n        result = \"2 4\"\n        self.assertEqual(result, solution(solution_input))\n\n    def test_1(self):\n        solution_input = \"3 4\"\n        result = \"4\"\n        self.assertEqual(result, solution(solution_input))\n\n    def test_2(self):\n        solution_input = \"red blue\"\n        result = \"1 4\"\n        self.assertEqual(result, solution(solution_input))\n\n    def test_3(self):\n        solution_input = \"Takahashi chose a ball with red written on it and threw it away. Now we have two balls with the string S and four balls with the string T.\"\n        result = \"2 4\"\n        self.assertEqual(result, solution(solution_input))\n\n    def test_4(self):\n        solution_input = \"Takahashi chose a ball with red written on it and threw it away. Now we have two balls with the string S and four balls with the string T.\"\n        result = \"4\"\n        self."
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nassert solution(\"red\") == \"3\"\nassert solution(\"Takahashi chose a ball with red written on it and threw it away.\") == \"0 1\"\nassert solution(\"\") == \"0\"\nassert solution(\"red\") == \"3\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\".S.T\") == \"Takahashi chose a ball with red written on it and thrown it away. Now we have two balls with the string S and four balls with the string T.\nassert solution(\"S.T\") == \"4\"\nassert solution(\"S.T\") == \"3\"\nassert solution(\"S.T\") == \"1\"\nassert solution(\"T.S\") == \"2\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"red blue\"\n) == \"2 4\"\nassert solution(\n    \"red\"\n) == \"1\"\nassert solution(\n    \"red\"\n) == \"1\"\nassert solution(\n    \"red blue\"\n) == \"1\"\nassert solution(\n    \"red\"\n) == \"0\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(str) == \"2 4\""
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('red') == '4'\nassert solution('b') == '2'\nassert solution('T') == '1'\nassert solution('r') == '0'\nassert solution('T') == '0'\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('red blue'),'should be 3 4'\nassert solution('red red'),'should be 2 4'\nassert solution('red blue'),'should be 4'\nassert solution('red'),'should be 2'\nassert solution('red'),'should be 2'\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"TacKhan\") == \"5\"\nassert solution(\"TacKhan\") == \"10\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2 4\"\n\n>>>>>>> 3eab067e1d5e314f3f80f17dbe2f8f1e8dccc7b0\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(6) == \"Yes\"\nassert solution(5) == \"No\"\nassert solution(10) == \"Yes\"\nassert solution(18) == \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 'Yes'"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(6) == 'Yes'\nassert solution(5) == 'No'\nassert solution(4) == 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, \"abc\") == \"Yes\"\nassert solution(5, \"abcd\") == \"No\"\n\nassert solution(1, \"a\") == \"Yes\"\nassert solution(1, \"aa\") == \"Yes\"\nassert solution(1, \"aaa\") == \"Yes\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, \"aac\") == \"Yes\"\nassert solution(3, \"acb\") == \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"acd\") == \"No\"\nassert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abcdef\") == \"No\"\nassert solution(\"abcd\") == \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(6, \"abcabc\") == \"Yes\"\nassert solution(10, \"abcabc\") == \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(12, \"abccba\") == \"Yes\"\nassert solution(12, \"abcba\") == \"No\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3.000000\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\") == \"3\"\nassert solution(\"2 3 2\") == \"2\"\nassert solution(\"3 4 3\") == \"1\"\nassert solution(\"4 5 4\") == \"1\"\nassert solution(\"4 2 2\") == \"2\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 4\") == \"1 2\"\nassert solution(\"1 1 0\") == \"1\"\nassert solution(\"1 0 1\") == \"1\"\nassert solution(\"0 0 0\") == \"1\"\nassert solution(\"0 0 0.5\") == \"1\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3.000000\"\nassert solution(stdin) == \"3.000000\"\nassert solution(stdin) == \"3.000000\"\nassert solution(stdin) == \"3.000000\"\nassert solution(stdin) == \"3.000000\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 1 2\") == 3\nassert solution(\"2 4 3 1 2\") == 1\nassert solution(\"2 3 1 2\") == 0\nassert solution(\"2 3 1 2\") == 0\nassert solution(\"2 3 1 2\") == 0\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 1 2\") == 3\nassert solution(\"1 3 4\") == 3\nassert solution(\"2 3 2\") == 0\nassert solution(\"1 3 0\") == 3\nassert solution(\"2 0 2\") == 2\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0, \"The answer is incorrect\"\nassert solution(stdin) == 1, \"The answer is incorrect\"\nassert solution(stdin) == 0, \"The answer is incorrect\"\nassert solution(stdin) == 1, \"The answer is incorrect\"\nassert solution(stdin) == 0, \"The answer is incorrect\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1\") == \"3\"\nassert solution(\"1 1 3 1\") == \"1.000000\"\nassert solution(\"1 1 1 2\") == \"0.0\"\nassert solution(\"1 1 2 2\") == \"0.0\"\nassert solution(\"1 2 2 1\") == \"0.0\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3,4\") == \"5.000000 0\"\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\") == \"3.000000\"\nassert solution(\"1 1 1\") == \"0.000001\"\nassert solution(\"6 6 6\") == \"0.000000\"\nassert solution(\"0 2 4\") == \"0.000000\"\nassert solution(\"2 2 3\") == \"1.000000\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'Four'\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Four\"\nassert solution(\"2\") == \"Three\"\nassert solution(\"3\") == \"Four\"\nassert solution(\"4\") == \"Four\"\nassert solution(\"5\") == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"Four\"\nassert solution(input()) == \"Four\"\nassert solution(input()) == \"Four\"\nassert solution(input()) == \"Four\"\nassert solution(input()) == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"S_1 S_2... S_N\") == \"Four\", \"Failed to solve\"\nassert solution(\"G W Y P Y W\") == \"Three\", \"Failed to solve\"\nassert solution(\"P Y W G\") == \"One\", \"Failed to solve\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"Four\"\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(solution) == 'Four'\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nN, S = map(int, sys.stdin.readline().split())\nS_dict = {\n    'P': 'P',\n    'W': 'W',\n    'G': 'G',\n    'Y': 'Y'\n}\n\ndp = [0] * N"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('G W Y P Y W') == 'Four'\nassert solution('G W Y P Y W') == 'Four'\nassert solution('G W Y P Y W') == 'Four'\nassert solution('G W Y P Y W') == 'Four'\nassert solution('G W Y P Y W') == 'Four'\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\\\"3\\\") == \"Three\"\nassert solution(\\\"4\\\") == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(7) == \"Four\"\nassert solution(6) == \"Three\"\nassert solution(5) == \"Two\"\nassert solution(1) == \"One\"\nassert solution(5) == \"Two\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '1'\n\n\nassert solution(input()) == '0'\n\n\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 6\nassert solution(stdin) == 6\nassert solution(stdin) == 1\n\n\n------Observation-----\n\nYou are a man playing a game with a police. The game is turn-based and each turn consists of two phases. During the first phase you make your move and during the second phase you make your move.\n\nThere are $n$ doors, the $i$-th door initially has durability equal to $a_i$.\n\nDuring your move you can try to break one of the doors. If you choose door $i$ and its current durability is $b_i$ then you reduce its durability to $max(0, b_i - x)$ (the value $x$ is given).\n\nDuring Slavik's move he tries to repair one of the doors. If he chooses door $i$ and its current durability is $b_i$ then he increases its durability to $b_i + y$ (the value $y$ is given). Slavik cannot repair doors with current durability equal to $0$.\n\nThe game lasts $10^{100}$ turns. If some player cannot make his move then he has to skip it.\n\nYour goal is to maximize the number of doors with durability equal to $0$ at the end of the game. You can assume that Slavik wants to minimize the number of such doors. What is the number of such doors in the end if you both play optimally?"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 3 2\") == \"2\"\nassert solution(\"5 3 3\") == \"2\"\nassert solution(\"5 5 6\") == \"1\"\nassert solution(\"5 5 7\") == \"1\"\nassert solution(\"5 6 4 3\") == \"0\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"7\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 5 2' == '6') == '6'\n\n\n\n-----Solution-----"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5, 3) == 2\nassert solution(5, 2) == 4\nassert solution(5, 1) == 2\nassert solution(2, 1) == 3\nassert solution(2, 3) == 1\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n'''"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 7\n\n\n-----Sample Input 0-----\n\n3\n8 1 2 2\n\n-----Sample Output 0-----\n\n1\n\n-----Sample Input 1-----\n\n3\n4 5 6 2 6\n4 5 3 2 2\n\n-----Sample Output 1-----\n\n0\n\n-----Sample Input 2-----\n\n3\n8 1 2 2\n1 3 2 4\n1 3 2 4\n\n-----Sample Output 2-----\n\n1\n\n-----Sample Input 3-----\n\n3\n4 5 3 6 2\n5 4 3 2 2\n6 5 4 2 2\n\n-----Sample Output 3-----\n\n3\n\n-----Sample Input 4-----\n\n3\n1 4 1 3\n1 5 5 1\n1 6 6 6\n\n-----Sample Output 4-----\n\n3\n\n-----Sample Input 5-----\n\n5\n2 4 2 2\n2 4 2 2\n3 5 2 2\n\n-----Sample Output 5-----\n\n1\n\n-----Sample Input 6-----\n\n3\n1 2 2 1 1\n1 3 2 2 1\n1 4 4 1 1\n1 5 5 1\n\n-----Sample Output 6-----\n\n2\n\n-----Sample Input 7-----\n\n4\n1 3 2 6 2\n1 3 2 2 2\n1 4 4 1 1\n1 5 5 1\n\n-----Sample Output 7-----\n\n1\n\n-----Sample Input 8-----\n\n2\n2 3 2 2\n2 3 2 2\n1 4 4 1 1\n1 5 5 1\n\n-----Sample Output 8-----\n\n1\n\n-----Sample Input 9-----\n\n2\n1 2 2 1 1\n1 3 2 2 1\n1 4 4 1 1\n1 5 5 1\n\n-----Sample Output 9-----\n\n0\n\n\n-----Sample Input 10-----\n\n3\n6 5 5 5 5\n6 6 6 6 5\n6 6 6 6 6\n\n6\n\n5\n\n6\n6 6 6 6 6\n6 6 6 6 6\n\n6 6 6 6 6 6\n6 6 6 6 6 6\n6 6 6 6 6 6\n6 6 6 6 6 6\n6 6 6 6 6 6\n6 6 6 6 6 6\n\n\n-----Sample Output 10-----\n\n1\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= stdin.length <= 10^5\n1 <= a_i, b_i <= 10^9\n\n------Coding Rules------\n\nSpace complexity: O(n)\nTime complexity: O(n)\n\n------Time complexity----> n\n------Space complexity----> n\n\n------Time complexity----> 1\n------Space complexity----> 1\n\n------Time complexity----> 2\n------Space complexity----> n\n\n------Time complexity----> n\n------Space complexity----> n\n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('123456789') == 7\nassert solution('123456789') == 0\nassert solution('123456789') == 3\nassert solution('123456789') == 0\nassert solution('123456789') == 3\n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5, \"solution() return wrong answer\"\n\n\n-----Diagnostic-----\n\nTest cases are in standard input, each line contains a test case, where the first line contains the number of test cases, separated by a space.\n\nAfter each test case, the second line contains $i$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the interestingness of the $i$-th topic for the teacher.\n\nAfter each test case, the third line contains $i$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 10^9$), where $b_i$ is the interestingness of the $i$-th topic for the students.\n\nAfter each test case, the fourth line contains the string $i$ that represents the $i$-th topic (a/b/c/d/e/f). The string contains $i$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the interestingness of the $i$-th topic for the teacher.\n\nAfter each test case, the fifth line contains the string $i$ that represents the $i$-th topic (a/b/c/d/e/f). The string contains $i$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 10^9$), where $b_i$ is the interestingness of the $i$-th topic for the students.\n\nAfter each test case, the sixth line contains the string $i$ that represents the $i$-th topic (a/b/c/d/e/f). The string contains $i$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the interestingness of the $i$-th topic for the teacher.\n\nAfter each test case, the seventh line contains the string $i$ that represents the $i$-th topic (a/b/c/d/e/f). The string contains $i$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 10^9$), where $b_i$ is the interestingness of the $i$-th topic for the students.\n\nAfter each test case, the eighth line contains the string $i$ that represents the $i$-th topic (a/b/c/d/e/f). The string contains $i$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the interestingness of the $i$-th topic for the teacher.\n\n\nOutput\n\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 7\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"7\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 6\n\n\n-----Brute Force Approach-----\n\nHere we take a set of $n$ words and create a dictionary with each word and its index as key and the number of good pairs of topics as value.\n\nIn the sub problem, we need to find the number of good pairs of topics as a sum of the pair numbers of $n$ words.\n\nFor each key $i$ in the dictionary:\n\nFind the pair of topics $i$ and $j$ ($i < j$)\nIf the pair of topics $i$ and $j$ are not good, we remove the pair from the dictionary $n$.\n\nIf the pair of topics $i$ and $j$ are good, we add them in the dictionary $n$ and print the number of good pairs of topics.\n\nNote:\n\nIf the sum of the pair numbers of $n$ words is odd, return 0.\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\") == \"1 1 3 5 9\"\nassert solution(\"\") == \"\"\nassert solution(\"13\") == \"13\"\nassert solution(\"2 6 9 6\") == \"6 9 6\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 1 3 5 9\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 1 3 5 9\"\nassert solution(stdin) == \"1 1 3 5 9\"\nassert solution(stdin) == \"1 1 3 5 9\"\nassert solution(stdin) == \"1 1 3 5 9\"\nassert solution(stdin) == \"1 1 3 5 9\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"1 1 3 5 9\"\nassert solution(\"10\") == \"3 1 5 9\"\nassert solution(\"5\") == \"9 1 3 5 9\"\nassert solution(\"100\") == \"9 1 3 5 9\"\nassert solution(\"123456789\") == \"123456789\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1 1 3 5 9\"\nassert solution(stdin) == \"1 1 3 5 9\"\nassert solution(stdin) == \"1 1 3 5 9\"\nassert solution(stdin) == \"1 1 3 5 9\"\n\n\"\"\"\n\nclass Solution:\n    def solution(self, n: int, a: List[int]) -> str:\n        a = sorted(a)\n        answer = 0\n        for i in range(n):\n            answer += a[i]\n        return str(answer)"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 4 5 10\") == \"1 1 3 5 9\"\n\n\n-----Example-----\nInput\n5\n1 2 4 5 10\n\nOutput\n1 1 3 5 9\n\nInput\n10\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\n\nOutput\n9999 9 50605065 1 5 89 5 999999999 60506055 999999999\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 1000\n\n\n-----Example-----\nInput\n\n2\n100\n100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100\n
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"10 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1 1 3 5 9'\nassert solution(stdin) == '9999 9 50605065 1 5 89 5 999999999 60506056 1000000000'\nassert solution(stdin) == '1 1 3 5 9'\nassert solution(stdin) == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\nassert solution(stdin) == '1 1 3 5 9'\n"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solve(self, stdin: str) -> int:\n        pass\n\nclass Solution:\n    def solve(self, stdin: str) -> int:\n        pass\n\nassert solution(stdin) == 2\n\n\nclass Solution:\n    def solve(self, stdin: str) -> int:\n        pass\n\nassert solution(stdin) == 2\n"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 2\n\n\n\"\"\""
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"1\"\n\nassert solution(inp) == \"2\"\n\nassert solution(inp) == \"3\"\n\nassert solution(inp) == \"4\"\n\nassert solution(inp) == \"5\""
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n'''"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\n\nprint(solution(input()))\n'''\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nedges = {}\nfor _ in range(m):\n    p, q = map(int, sys.stdin.readline().split())\n    edges[p, q] = edges.get((p, q), 0) + 1\n    edges[q, p] = edges.get((q, p), 0) + 1\n\nfor i in range(n-1):\n    for j in range(i+1, n):\n        if edges[i, j] == 2:\n            print(i, j)\n            sys.exit()\n"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 0 0 1 2\") == \"1 2\"\nassert solution(\"2 0 0 0 0 1\") == \"0 1\"\nassert solution(\"1 2 0 0 0 1\") == \"2\"\nassert solution(\"1 0 0 0 0 0 1\") == \"1\"\nassert solution(\"1 2 0 0 0 1\") == \"1\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 3') == '4'\nassert solution('1 3') == '0'\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 0 0 1 2\") == \"4\"\nassert solution(\"3 0 0 0 0\") == \"0\"\nassert solution(\"3 0 0 0 0\") == \"0\"\nassert solution(\"3 0 0 0 1\") == \"0\"\nassert solution(\"3 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3,2,1,0,1,0,0,1,2') == \"4\"\nassert solution('4,1,2,1,2,2,2,0,0') == \"0\"\nassert solution('3,1,2,1,2,1,2,0,0') == \"0\"\nassert solution('3,1,2,1,2,2,2,0,0') == \"0\"\nassert solution('3,1,2,1,2,1,2,0,0') == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 2 1 2 0\") == \"4\"\nassert solution(\"0 1 0 0 0 0 1 2\") == \"0\"\nassert solution(\"1 0 0 0 0 1 2\") == \"0\"\nassert solution(\"2 2 0 0 0 0 1 0 0\") == \"1\"\nassert solution(\"1 1 1 0 1 1 1 0 0\") == \"3\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '4'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"1\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"1\"\n\n\"\"\""
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"qoztvz\", \"solution should return qoztvz\"\n\nInput\n2\nz\nx\n\nOutput\nz\n\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"nijfvj\") == \"qoztvz\"\nassert solution(\"tvqhwp\") == \"def solution\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"qoztvz\", \"expected 'qoztvz'\""
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"bc\"\nassert solution(input()) == \"alvuw\"\nassert solution(input()) == \"qoztvz\"\nassert solution(input()) == \"nijfvj\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"az\") == \"alvuw\"\nassert solution(\"az\") == \"qoztvz\"\nassert solution(\"az\") == \"nijfvj\"\nassert solution(\"az\") == \"tvqhwp\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin: str\n) == \"bc\"\nassert solution(\n    stdin: str\n) == \"qoztvz\"\nassert solution(\n    stdin: str\n) == \"alvuw\"\nassert solution(\n    stdin: str\n) == \"nijfvj\"\nassert solution(\n    stdin: str\n) == \"afogk\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'bc'\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"bc\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"bc\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('123') == 'bc', 'test failed'\n\n\n-----Constraints-----\n1 \u2264 k \u2264 10^5\ns, t = ''.join(stdin.split()).lower(), ''.join(stdin.split()).lower()\n"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\n\n---Submit this answer---\n\nHINT:\n\n1. Use a set to convert string to int if possible.\n2. The set is the set of distinct values of a set.\n3. The set of distinct values are sorted by their values.\n4. We have two types of students:\n\nindex to index\n\n1) pair in a set is not unique, which means if a value exists in a set that value is not present in the set, then the value is not unique.\n2) value of a set must be unique.\n3) value of a set cannot be in a set, so the value must be unique.\n4) the sorted value of a set cannot be in a set, so the value cannot be unique.\n5) the sorted value of a set cannot be in a set, so the value must not be unique.\n6) the sorted value of a set must be unique.\n\n\n\"\"\"\nimport math\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nans = []\nfor i in range(k):\n    if a[i] not in ans:\n        ans.append(a[i])\nprint('YES' if len(ans) == k else 'NO')\n"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"20 10 40 30\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\n\n\n\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n1 <= k <= 100\nstdin.length <= n <= 10^6\n1 <= a_i < 100\na_i < stdin.length\nstdin contains integers from 1 to n, for the students in the team.\n\nAccepted\n, you are not expected to receive the output directly. Instead, return a string that says YES or NO.\n'''"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n'''"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\n\nAssume that the students are numbered from 1 to $n$.\n\n\n------Challenge-----\n\n1. Only one grade can be less than 5.\n2. If the grade of a student is greater than or equal to 5 and less than or equal to 6, the student won a penalty.\n\n\n-----Time complexity-----\n\nTo store $k$ distinct numbers of the students and $n$ distinct indices of students in the team you need to form $k$ distinct numbers which should be the indices of students in the team you form.\n\n\n-----Space Complexity-----\n\nIn the worst case, $k$ distinct numbers and $n$ distinct indices of students in the team you need to form are $k$ distinct numbers which should be the indices of students in the team you form. So, space complexity is $k$ and we are choosing that space, which is O(k) when $n$ and $k$ are the same.\n\n\n-----Algorithm-----\n\n1. For each $k$ distinct numbers, we calculate the minimum and the maximum number of distinct numbers in the team.\n\n2. For each $k$ distinct numbers, if the minimum number of distinct numbers is greater than $a_i$, then we consider the $k$ distinct numbers as the possible values of the team, and take the minimum number of distinct numbers as the index of the team.\n\n3. We record the minimum number of distinct numbers in the team in a list.\n\n4. We calculate the index of the minimum number of distinct numbers as the value of the team.\n\n5. The minimum number of distinct numbers is the index of the team.\n\n6. The maximum number of distinct numbers is the index of the team.\n\n7. If the maximum number of distinct numbers is the index of the team, then the team is a solution.\n\n\n\n-----Constraints-----\n\n1. All numbers are in the range $0, 10000$\n2. $k$ is a positive integer\n3. $n$ is an integer\n\nSample Input 1:\n\nInput:\n\n5 3\n15 13 15 15 12\n\nSample Output 1:\n\nNO\n\nSample Input 2:\n\nInput:\n\n4 4\n20 10 40 30\n\nSample Output 2:\n\nNO\n\nSample Input 3:\n\nInput:\n\n5 4\n20 10 40 30\n\nSample Output 3:\n\nYES"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\nassert solution(\"4 4\") == \"YES\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"YES\"\n\"\"\"\nimport sys\nn = int(sys.stdin.readline())\narr = list(map(int,sys.stdin.readline().rstrip().split()))\nanswer = []\n"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0 1 2 3 4\") == \"YES\"\nassert solution(\"0 1 2 3 4\") == \"NO\""
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2 3 3 5\") == \"YES\"\nassert solution(\"5 1 0 5\") == \"NO\"\nassert solution(\"2 0 2 0 0\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\",\"1\",\"3\",\"6\",\"8\",\"2\",\"9\",\"0\",\"10\"]) == \"YES\"\nassert solution([\"5\",\"1\",\"3\",\"6\",\"8\",\"2\",\"9\",\"0\",\"10\"]) == \"NO\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]) == \"YES\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]) == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution == \"NO\", \"incorrect output\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\""
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 0\") == \"YES\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"YES\"\nassert solution(\"1 2 3 4 0 1 0 0\") == \"YES\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5, 1, 3, 6, 8, 2, 9, 10) == \"YES\"\nassert solution(5, 1, 3, 6, 8, 2, 9, 10) == \"YES\"\nassert solution(5, 1, 3, 6, 8, 2, 9, 10) == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5\\n1\\n6\\n8\\n0') == 'YES', 'NO'\nassert solution('3\\n2') == 'NO', 'NO'\nassert solution('2\\n0') == 'YES', 'NO'\nassert solution('1') == 'YES', 'NO'"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"YES\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"0\""
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(3)\nassert solution(stdin) == str(0)\nassert solution(stdin) == str(1134)\n\n-----Constraints-----\n0 < t < 10^4\n-10^6 < L, v, l, r < 10^9\n-10^9 < p < 10^9\n\n\"\"\""
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 20 30 40 50\") == \"0\"\nassert solution(\"1 10\") == \"1\"\nassert solution(\"2 3 1\") == \"3\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"0 1 0\") == \"1\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(3)"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1134\n"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 7\") == \"3\"\nassert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 3 5\") == \"5\"\nassert solution(\"1 2 3 6\") == \"6\"\nassert solution(\"1 2 3 7\") == \"7\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '3'\nassert solution('1') == '0'\nassert solution('0') == '0'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\n\n\n\"\"\""
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 1, \"2 not correct\"\nassert solution(4) == 3, \"4 not correct\"\nassert solution(8) == 1260, \"8 not correct\"\nassert solution(20) == 12164510040883200, \"20 not correct\"\nassert solution(100) == 1224461116128216\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2) == 1\nassert solution(4) == 3\nassert solution(8) == 1260\nassert solution(20) == 12164510040883200\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2) == 1\nassert solution(4) == 3\nassert solution(8) == 1260\nassert solution(20) == 12164510040883200\nassert solution(12) == 12\n\n----Code----\nn = int(input())\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '12164510040883200', 'incorrect output'\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(10) == 1\nassert solution(10) == 1\nassert solution(10) == 1\nassert solution(10) == 1\nassert solution(10) == 1\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 1\nassert solution(4) == 3\nassert solution(8) == 12\nassert solution(20) == 1260\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2) == 2\nassert solution(4) == 4\nassert solution(8) == 8\nassert solution(20) == 1260\nassert solution(64) == 12164510040883200\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2) == 1\nassert solution(4) == 3\nassert solution(8) == 1260\nassert solution(20) == 12164510040883200\nassert solution(64) == 82710681019\n\"\"\"\n\nimport math"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2') == 2\nassert solution('4') == 3\nassert solution('8') == 1260\nassert solution('20') == 12164510040883200\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2) == 1\nassert solution(4) == 3\nassert solution(8) == 1260\nassert solution(20) == 12164510040883200\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'ccccc'\nassert solution(stdin) == ''"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"cccaababacccbc\", \"The solution is incorrect\""
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(15, 9) == \"ccbcaabaccbc\"\nassert solution(15, 1) == \"cccccc\"\nassert solution(0, 1) == \"\"\nassert solution(0, 0) == \"u\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"cccaabababaccbc\", \"cccaabababaccbbc\", \"cccaabababaccbcc\", \"cccaababaccbbcc\", \"cccaababaccbcccc\", \"cccaababaccbbbbc\", \"cccaababaccbbbcc\", \"cccaababaccbbbcccc\"]) == \"cccccc\"\nassert solution([\"cbcb\", \"bb\"]) == \"bc\"\nassert solution([\"bb\"]) == \"bb\"\nassert solution([\"bcb\", \"bbc\", \"abc\"]) == \"abc\"\nassert solution([\"abc\"]) == \"abc\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"cccbbabaccbc\""
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'cccccc'\nassert solution(stdin) == 'def'\nassert solution(stdin) == 'abcdef'\nassert solution(stdin) == 'ab'\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('abbccc') == 'ccbbb'\nassert solution('abcccc') == 'cccccc'\nassert solution('aa') == 'aa'\nassert solution('bb') == 'b'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"ccbbbbb\""
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(15,3) == \"cccaabababaccbc\"\nassert solution(15,9) == \"cccccc\""
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'cbc'\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 3') == 8\nassert solution('5 3') == 20\nassert solution('5 3') == 10\nassert solution('5 3') == 10\nassert solution('5 3') == 15\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"20\"\n\nstdin = '5 3'\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n\nstdin = '5 1 2 3 4'\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 20\nassert solution(stdin) == 5\nassert solution(stdin) == 10\nassert solution(stdin) == 10\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 8, \"Error in solution()\"\n\"\"\"\n\nfrom math import factorial as fac"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n[\n    ['1 2', '2', '0'],\n    ['1', '2', '0'],\n    ['1', '2', '0']\n]) == '8'\n\"\"\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    inp=input,\n    stdin=sys.stdin.readline\n)\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"8\"\n\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '8'\nassert solution(stdin) == '20'"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 8, 'Expected 8, but got {stdin}'.format(stdin=stdin)\n\nInput\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n\nOutput\n20\n\nInput\n5 2\n4 1\n2 4\n2 5\n1 3\n1 2\n2 5\n\nOutput\n8\n"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n\"\"\""
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n[6, 8, 1, 5, 5, 3, 3,\n 3, 5, 3, 3, 3, 1, 1,\n 2, 3, 4, 3, 3, 2,\n 5, 5, 5, 1, 2, 2,\n 6, 5, 5, 1, 2, 2,\n 3, 3, 3, 2, 1, 1]) == '3 4 1'\nassert solution(\n[6, 8, 1, 5, 5, 3, 3,\n 3, 5, 3, 3, 3, 1, 1,\n 2, 3, 4, 3, 3, 2,\n 5, 5, 5, 1, 2, 2,\n 6, 5, 5, 1, 2, 2,\n 3, 3, 3, 2, 1, 1]) == '3 4 1'\n\n>>> import time\n>>> import os\n>>> start = time.time()\n>>> os.system('python3.\\Astar\\Astar.py')\n>>> end = time.time()\n>>> print(end - start)\n0.507733000434939\n>>> start = time.time()\n>>> os.system('python3.\\Astar\\Astar_new.py')\n>>> end = time.time()\n>>> print(end - start)\n1.002084262278559\n"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"The subproblem is not solved\""
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"3 1 2\""
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"-1\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"5 8\"\n) == \"3 4 1\"\nassert solution(\n    \"5 5\"\n) == \"3 2 1\"\nassert solution(\n    \"5 5\"\n) == \"3 2 1\"\nassert solution(\n    \"5 5\"\n) == \"3 2 1\"\nassert solution(\n    \"5 5\"\n) == \"3 2 1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n\n\nclass Solution:\n    def solution(self, n, m, k, x, y, s):\n        def get_row(start, end, s):\n            res = 0\n            for i in range(start, end+1):\n                res += s[i] * (end - start + 1)\n            return res\n        def get_col(start, end, s):\n            res = 0\n            for i in range(start, end+1):\n                res += s[i] * (end - start + 1)\n            return res\n\n        # get the upper left and lower right corners of the grid\n        x_min, y_min = max(x - 1, 0), max(y - 1, 0)\n        x_max, y_max = min(x + 1, n), min(y + 1, m)\n\n        # get the distance from the center of the grid to the top left corner\n        x_min, y_min = x_min - (n // 2), y_min - (m // 2)\n\n        # get the distance from the center of the grid to the bottom right corner\n        x_max, y_max = x_max - (n // 2), y_max - (m // 2)\n\n        # calculate the distance between the points of the grid\n        x_diff = x_max - x_min + 1\n        y_diff = y_max - y_min + 1\n\n        # calculate the central stars\n        central_x = (x + x_diff // 2) % n\n        central_y = (y + y_diff // 2) % m\n\n        # count the stars and check if they are overlapping\n        # todo: use the result of the function in the solution\n        for i in range(x, x_max + 1):\n            for j in range(y, y_max + 1):\n                res = get_row(i, j, s) - get_row(i, central_y, s) - get_row(central_x, j, s) - get_row(central_x, j, s)\n                if res == 0:\n                    res = 0\n                if res == -1:\n                    return -1\n        return s[central_y][central_x]\n\n\n        \nassert solution(6, 8, 5, 5, 6, \"*.*\") == 3\nassert solution(3, 3, 5, 5, 5, \"*.*\") == 3\nassert solution(3, 3, 5, 6, 5, \"*.*\") == -1\nassert solution(5, 5, 5, 6, 6, \"*.*\") == -1\n"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3 4 1\" or solution(stdin) == \"3 5 2\" or solution(stdin) == \"3 5 1\" or solution(stdin) == \"3 4 1\"\n\nassert solution(stdin) == \"3 3 1\" or solution(stdin) == \"3 4 1\" or solution(stdin) == \"3 5 1\" or solution(stdin) == \"3 5 2\" or solution(stdin) == \"3 4 1\"\n\nassert solution(stdin) == \"3 3\"\n\nassert solution(stdin) == \"-1\""
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"4 5 8 10 13\"\n) == 12\nassert solution(\n    \"5 5 8 10 11\"\n) == -1\nassert solution(\n    \"5 5 8 10 13\"\n) == 2\nassert solution(\n    \"5 5 8 10 11\"\n) == 1\nassert solution(\n    \"5 5 8 10 11\"\n) == 3\n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(12) == \"Yes\"\nassert solution(555) == \"No\"\nassert solution(111) == \"Yes\"\nassert solution(555) == \"No\"\nassert solution(123) == \"Yes\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 'Yes'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 'Yes'\n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\" or \"No\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == 'Yes'\nassert solution(6) == 'No'\nassert solution(0) == 'No'\nassert solution(9) == 'Yes'"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1354\") == \"Yes\"\nassert solution(\"10\") == \"No\"\nassert solution(\"0\") == \"No\"\nassert solution(\"100\") == \"Yes\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1234\") == \"Yes\"\nassert solution(\"12345\") == \"No\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(12) == 'Yes', \"12 is not a palindromic number\"\nassert solution(5) == 'Yes', \"5 is not a palindromic number\"\nassert solution(0) == 'No', \"0 is not a palindromic number\"\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Alice\"\nassert solution(input()) == \"Bob\"\nassert solution(input()) == \"Drawn\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == 'Alice'\nassert solution(inp) == 'Bob'\nassert solution(inp) == 'Draw'\nassert solution(inp) == 'Draw'\nassert solution(inp) == 'Draw'\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"8 5\") == \"Alice\"\nassert solution(\n    \"6 3\") == \"Alice\"\nassert solution(\n    \"3 2\") == \"Alice\"\nassert solution(\n    \"7 4\") == \"Bob\"\nassert solution(\n    \"7 3\") == \"Alice\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"9A\") == \"B\"\nassert solution(\"3A\") == \"A\"\nassert solution(\"4A\") == \"A\"\nassert solution(\"2A\") == \"A\"\nassert solution(\"1A\") == \"A\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'Alice'\nassert solution(stdin) == 'Bob'\nassert solution(stdin) == 'Draw'"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 2 3 4 5\") == \"Alice\"\nassert solution(\"6 9 7 3\") == \"Bob\"\nassert solution(\"5 5 5 5 5 5\") == \"Draw\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Alice\"\n\nassert solution(stdin) == \"Bob\"\n\nassert solution(stdin) == \"Draw\"\n\nassert solution(stdin) == \"Alice\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"Alice\"\n\n\n-----Sample Tests-----\n\nGiven A = 8, B = 6, return \"Alice\".\nGiven A = 13, B = 5, return \"Alice\".\nGiven A = 7, B = 3, return \"Alice\".\nGiven A = 10, B = 3, return \"Alice\".\nGiven A = 10, B = 1, return \"Alice\".\nGiven A = 2, B = 1, return \"Alice\".\nGiven A = 11, B = 1, return \"Alice\".\nGiven A = 0, B = 0, return \"Draw\"."
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n5 6\n1 2 4 2 1\n3 3 2 3 3\n4 4 2 4 4\n5 4 5 4 5\n3 3 3 3 3\n4 4 4 4 4\n3 4 3 4 4\n1 2 3 2 1\n1 2 1 2 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 2 1 2 1\n2 1 1 1 1\n2 1 2 2 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 2 1 2 1\n1 2 2 2 1\n1 3 2 3 3\n1 4 4 4 4\n2 4 2 4 4\n3 4 3 4 4\n4 3 3 3 3\n5 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n2 1 1 2 1\n2 1 2 2 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 2 1 2 1\n1 2 2 2 1\n1 3 2 3 3\n1 4 4 4 4\n2 4 2 4 4\n3 4 3 4 4\n4 4 3 3 3\n5 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 2 1 2 1\n1 2 2 2 1\n1 3 2 3 3\n1 4 4 4 4\n2 4 2 4 4\n3 4 3 4 4\n4 4 3 3 3\n5 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Alice\"\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['s,5,4','s,5,1','s,6,4']) =='sssss'\nassert solution(['happy,newyear,enjoy']) == 'happy newyear enjoy'"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"happy\",\"newyear\",\"enjoy\"]) == \"happy new year enjoy\"\nassert solution([\"happy\",\"newyear\",\"enjoy\",\",\",\",\"\"]) == \"happy new year enjoy\"\nassert solution([\"happy\",\"newyear\",\"enjoy\",\",\",\",\",\"\"]) == \"happy new year enjoy\"\nassert solution([\"happy\",\"newyear\",\"enjoy\",\",\",\",\",\",\"\"]) == \"happy new year enjoy\"\nassert solution([\"happy\",\"newyear\",\"enjoy\",\",\",\",\",\",\",\"\"]) == \"happy new year enjoy\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"five,four,two,four,two,six,seven,three,seven\") == \"fivefourseven\"\nassert solution(\"one,two,three,four,five,six,seven,eight,nine\") == \"onetwo3foursixseveneightnine\"\nassert solution(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,fifteen,sixteen,seven sixteen,eight seventeen,nine nineteen\") == \"one2twelve3fourfiveseveneight\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy,newyear\") == \"happy newyear newyear enjoy\"\nassert solution(\"happy newyear,enjoy newyear,enjoy newyear,enjoy newyear\") == \"happy newyear newyear newyear enjoy newyear newyear enjoy newyear newyear enjoy newyear newyear enjoy newyear newyear enjoy newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear newyear"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"Happy\", \"New year\", \"enjoy\"]) == \"Happy New year enjoy\"\nassert solution([\"Hi\",\"hello\",\"good morning\"]) == \"Good morning Hi good morning\"\nassert solution([\"Come on in, my name is Rich, what's your name?\"]) == \"Rich My name is Rich\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"happy,newyear,enjoy\"]) == \"happy newyear enjoy\"\nassert solution([\",happy,newyear,enjoy\"]) == \"happy newyear enjoy\"\nassert solution([\"happy,newyear,enjoy\",\",,happy,newyear,enjoy\"]) == \"happy newyear enjoy\"\nassert solution([\",\"happy,newyear,enjoy\",\",,happy,newyear,enjoy\"]) == \"happy newyear enjoy\"\nassert solution([\"happy,newyear,enjoy\",\",,happy,newyear,enjoy\"]) == \"happy newyear enjoy\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"happy new year enjoy\") == \"happy new year enjoy\"\nassert solution(\"1,3,4,6,5\") == \"1,3,5,6,5\"\nassert solution(\"happy,new,year,enjoy\") == \"happy new year enjoy\"\nassert solution(\"new,enjoy\") == \"new,enjoy\"\nassert solution(\"new,,,, new\") == \"new,new\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"five,twenty,\", \"four,\", \"three\", \"two,\", \"one,\", \"five,\"]) == \"five twenty three two three\", \"solution failed\"\nassert solution([\"five,twenty,\", \"four,\", \"three\", \"two,\", \"one,\", \"five,\"]) == \"five twenty three two three\", \"solution failed\"\nassert solution([\"five,twenty,\", \"four,\", \"three,\", \"two,\", \"one,\", \"five,\"]) == \"five twenty three two three\", \"solution failed\"\nassert solution([\"five,\", \"twenty,\", \"four,\", \"three,\", \"two,\", \"one,\", \"five,\"]) == \"five twenty three two three\", \"solution failed\"\nassert solution([\"five,\", \"twenty,\", \"four,\", \"three,\", \"two,\", \"one,\", \"five,\"]) == \"five twenty three two three\", \"solution failed\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"fh,)\") == \"f,h,n\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy newyear enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy newyear,enjoy, \") == \"happy newyear enjoy\"\nassert solution(\"happy newyear,enjoy,\") == \"happy newyear enjoy\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 1 1\") == \"2\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"0 2\") == \"2\"\nassert solution(\"0 0\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"-1 0\") == \"1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"\"2 2\n2 0\n0 0\n-1 0\n1 0\n\"\"\") == \"2\"\nassert solution(\"\"\"2 2\n2 0\n0 0\n-1 0\n1 0\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"2\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n\nN, M = map(int, input().split())\n\narr = []\n\nfor i in range(N):\n    arr.append([int(j) for j in input().split()])\n\nresult = []\nfor i in range(M):\n    check = []\n    for j in range(N):\n        check.append(abs(arr[j][i]-arr[j][i+1]))\n    result.append(min(check))\n\nresult = sum(result)\nprint(result)"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"0 0\") == \"1\"\nassert solution(\"-1 0\") == \"2\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(2)\n\n-----Sample Input-----\n2 1\n2 0\n1 0\n-1 0\n1 0\n\n-----Sample Output-----\n1\n1\n\nThe Manhattan distance between the first student and each checkpoint is:\n - For checkpoint 1: |2-(-1)|+|0-0|=1\n - For checkpoint 2: |2-1|+|0-0|=1\nThe nearest checkpoint is checkpoint 2. Thus, the first line in the output should contain 1.\nThe Manhattan distance between the second student and each checkpoint is:\n - For checkpoint 1: |0-(-1)|+|0-0|=1\n - For checkpoint 2: |0-1|+|0-0|=1\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n'''\n2\n2\n0 0\n-1 0\n1 0\n\n''') == 2\n\nassert solution(\n'''\n2\n2\n0 0\n-1 0\n1 0\n\n''') == 2\n\nassert solution(\n'''\n2\n2\n0 0\n-1 0\n1 0\n\n''') == 2\n\nassert solution(\n'''\n2\n2\n0 0\n-1 0\n1 0\n\n''') == 2\n\nassert solution(\n'''\n2\n2\n0 0\n-1 0\n1 0\n\n''') == 1"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n'), '2' # Check solution(2 2)\nassert solution('2 0\\n2 0\\n0 0\\n-1 0\\n1 0\\n'), '2' # Check solution(2)\nassert solution('2 0\\n1 0\\n0 0\\n-1 0\\n1 0\\n'), '2' # Check solution(2)\nassert solution('2 0\\n1 0\\n0 0\\n-1 0\\n1 0\\n'), '1' # Check solution(1)\nassert solution('2 0\\n0 0\\n-1 0\\n0 0\\n-1 0\\n1 0\\n'), '0' # Check solution(0)\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"2\"\nassert solution(inp) == \"2 1\"\nassert solution(inp) == \"2 2\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"14\""
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2) == \"14\"\nassert solution(3) == \"33\""
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2\") == 14\n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2) == \"14\"\n\nassert solution(3) == \"6\"\n\nassert solution(4) == \"2\"\n\nassert solution(5) == \"19\"\n\nassert solution(6) == \"36\""
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '14'\n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"5\"\nassert solution(\"5\") == \"6\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2) == 14\nassert solution(1) == 1\nassert solution(3) == 3\n\nExample 1:\n\nInput:\na = 2\nOutput:\n14\nExplanation:\n2 + 2^2 + 2^3 = 2 + 2^2 + 2^3 = 2 + 4 + 8 = 14.\nExample 2:\n\nInput:\na = 1\nOutput:\n1\nExplanation:\n1. At the beginning, you only get one row.\n2. The first row contains only one number.\n3. The second row contains only two numbers.\n4. The third row contains only three numbers.\n5. The fourth row contains only four numbers.\n6. The fifth row contains only five numbers.\n7. The sixth row contains only six numbers.\n8. The seventh row contains only seven numbers.\n9. The eighth row contains only eight numbers.\n10. The ninth row contains only nine numbers.\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2) == 14\nassert solution(3) == 27\n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == '14'\nassert solution(2) == '5'\nassert solution(0) == ''\nassert solution(1) == '1'\nassert solution(2) == '2'\n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(a=2) == 14\nassert solution(a=3) == 2 + 2*3\nassert solution(a=4) == 4 + 4*4\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\n\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(a, b, c) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"#.#\"), \"NO\"\nassert solution(\".#.#\"), \"NO\"\nassert solution(\"#.##\"), \"NO\"\nassert solution(\"#..#\"), \"YES\"\nassert solution(\"#.#.#\"), \"YES\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"#.#\", \"#.#\", \"..#\", \"..#\", \"###\"]) == \"Yes\"\nassert solution([\"#.#\", \"#.#\", \"..#\", \"..#\", \"###\"]) == \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 2\"\n    ) == \"Yes\"\n    pass\n\nassert solution(\n    \"#.#\"\n    ) == \"No\"\n    pass\n\nassert solution(\n    \"#.#\"\n    ) == \"No\"\n    pass\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == \"Yes\"\nassert solution(2) == \"No\"\nassert solution(3) == \"No\"\nassert solution(4) == \"No\"\nassert solution(5) == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10.png') == 'Yes'\nassert solution('10.jpg') == 'No'"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(A, B, C) == 53, 'incorrect result'"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 4 3 5\") == \"5\"\nassert solution(\"1 5 2\") == \"1\"\nassert solution(\"1 6\") == \"2\"\nassert solution(\"1 8\") == \"3\"\nassert solution(\"1 9\") == \"4\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution((\"2 5\", \"5 2\", \"6 3\", \"3 6\")) == \"53\"\nassert solution((\"9 9\", \"9 1\", \"9 2\", \"3 3\")) == \"0\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1\",\"5\",\"2\"]) == \"63\", \"Solution to example 1 failed.\"\nassert solution([\"1\",\"6\",\"2\"]) == \"33\", \"Solution to example 2 failed.\"\nassert solution([\"1\",\"3\",\"4\"]) == \"23\", \"Solution to example 3 failed.\"\nassert solution([\"1\",\"3\",\"8\"]) == \"24\", \"Solution to example 4 failed.\"\n\n[Sample Input]\n3 1 5\n\n[Sample Output]\n63\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, 5, 2) == \"5\"\nassert solution(5, 2, 2) == \"5\"\nassert solution(5, 2, 5) == \"21\"\nassert solution(3, 1, 2) == \"0\"\nassert solution(5, 2, 1) == \"4\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s) == \"53\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"53\"\nassert solution(\"1 2 3\") == \"16\"\nassert solution(\"1 0 3\") == \"11\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"1 0\") == \"0\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"53\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"1 5 2\"\"\"\n) == \"53\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\",\"5\",\"2\",\"6\",\"3\"]) == \"53\", \"1, 5, 2, 6, 3 expected\"\nassert solution([\"1\",\"3\",\"2\"]) == \"1\", \"1, 3 expected\"\nassert solution([\"2\",\"5\",\"6\",\"4\"]) == \"2\", \"2, 5, 6, 4 expected\"\nassert solution([\"1\",\"3\",\"2\",\"5\",\"6\",\"4\",\"7\",\"8\",\"9\",\"10\"]) == \"12\", \"1, 3, 2, 5, 6, 4, 7, 8, 9, 10 expected\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"15950.0\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"15950\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '15950.0'\nassert solution(stdin) == '15950.0'\nassert solution(stdin) == '15950.0'\nassert solution(stdin) == '15950.0'\nassert solution(stdin) == '15950.0'\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"4980\", \"7980\", \"6980\"]) == \"15950\"\nassert solution([\"3\", \"1\"]) == \"1\"\nassert solution([\"4980\", \"7980\", \"6980\"]) == \"6\"\nassert solution([\"100\", \"7980\", \"6980\"]) == \"21\"\nassert solution([\"2\", \"1\"]) == \"10\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"15950\"\nassert solution(input()) == \"15950\"\nassert solution(input()) == \"15950\"\nassert solution(input()) == \"15950\"\nassert solution(input()) == \"15950\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '15950.0'"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 4') == '7.0'\nassert solution('5 4') == '8.0'\nassert solution('2 1') == '10.0'\nassert solution('2 1 2') == '10.0'\nassert solution('2 1 3') == '9.0'\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 N 1000 5980 7980 6980\") == \"4980\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '15950'\nassert solution(input()) == '6100'\nassert solution(input()) == '100'\nassert solution(input()) == '10000'\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 N\") == \"5920\"\nassert solution(\"N 2\") == \"8920\"\nassert solution(\"N 3\") == \"9120\"\nassert solution(\"N 5\") == \"8940\"\nassert solution(\"N 9\") == \"8790\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5') == '7'\nassert solution('5') == '35'\nassert solution('5') == '120'\nassert solution('3') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(line) == \"215\"\nassert solution(line) == \"217\"\nassert solution(line) == \"217\"\nassert solution(line) == \"217\"\nassert solution(line) == \"217\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"210\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('ABC Don') == '5'\nassert solution('ARC Curry') == '13'\nassert solution('AGC Pasta') == '16'\nassert solution('ATC Hanbagu') == '67'\nassert solution('APC Ramen') == '48'\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"9\") == \"25\"\nassert solution(\"24\") == \"6\"\nassert solution(\"14\") == \"11\"\nassert solution(\"19\") == \"11\"\nassert solution(\"55\") == \"17\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '215'\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '215'"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"215\"\nassert solution(input()) == \"35\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"50\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '210'\n\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"29 20 7 35 120\") == \"215\"\nassert solution(\n    \"29 20 7 35 120\") == \"7\"\nassert solution(\n    \"29 20 7 35 120\") == \"6\"\nassert solution(\n    \"29 20 7 35 120\") == \"12\"\nassert solution(\n    \"29 20 7 35 120\") == \"13\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '7.5'\nassert solution(\"3\") == \"7\"\nassert solution(\"6\") == \"7\"\nassert solution(\"10\") == \"7\"\nassert solution(\"24\") == \"2\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"7.5\"\nassert solution(\"5\") == \"7.5\"\nassert solution(\"1.3\") == \"7.50001\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1e-5\") == \"0.0005\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"10\", \"30\"]) == \"7.5\"\nassert solution([\"10\", \"30\", \"60\"]) == \"7.5\"\nassert solution([\"20\", \"30\", \"40\", \"50\"]) == \"7.5\"\nassert solution([\"60\", \"30\"]) == \"7.5\"\nassert solution([\"40\", \"20\", \"50\"]) == \"7.5\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5\"]) == \"7\"\nassert solution([\"5\",\"1\"]) == \"7\"\nassert solution([\"5\",\"5\"]) == \"7\"\nassert solution([\"5\",\"4\"]) == \"2\"\nassert solution([\"5\",\"6\"]) == \"1\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"7.50001\"\nassert solution(inp) == \"7.50001\"\nassert solution(inp) == \"7.49999\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 4 3 1') == '1'\nassert solution('4 3 1') == '1'\nassert solution('5 4 3 1') == '1'\nassert solution('5 4 3 2') == '1'\nassert solution('5 4 3 3') == '1'\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '7.5'\nassert solution(stdin) == '7.50001'\nassert solution(stdin) == '7.49999'\n\n-----Sample Output-----\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2') == 7.5\nassert solution('2.5') == 7.5\nassert solution('2.5.5') == 7.5\nassert solution('2.0.0.0.0.1') == 7.0\nassert solution('10.0.0.0.0') == 10.0\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == 7.5, \"solution does not return correct answer\"\nassert solution(\"5\") == 7.5, \"solution does not return correct answer\"\nassert solution(\"9\") == 7.5, \"solution does not return correct answer\"\nassert solution(\"4\") == 7.5, \"solution does not return correct answer\"\nassert solution(\"30\") == 7.5, \"solution does not return correct answer\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 7.5\n"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5\", \"3\", \"5\"]) == \"2\"\nassert solution([\"4\", \"1\", \"5\", \"1\"]) == \"2\"\nassert solution([\"5\", \"2\", \"4\", \"2\", \"2\"]) == \"1\"\nassert solution([\"5\", \"2\", \"2\", \"1\", \"2\"]) == \"1\"\nassert solution([\"5\", \"1\", \"2\", \"4\", \"2\"]) == \"1\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\", \"3\", \"5\"]) == \"12\"\nassert solution([\"5\", \"3\", \"5\", \"6\"]) == \"3\"\nassert solution([\"5\", \"3\", \"5\", \"4\", \"6\"]) == \"5\"\nassert solution([\"5\", \"3\", \"5\", \"4\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"]) == \"11\"\nassert solution([\"5\", \"3\", \"5\", \"4\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"]) == \"13\"\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\", \"3\", \"1\", \"5\", \"2\"]) == \"6\"\nassert solution([\"5\", \"3\", \"1\", \"2\"]) == \"4\"\nassert solution([\"2\", \"5\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"6\"\nassert solution([\"2\", \"5\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"4\", \"5\"]) == \"4\"\nassert solution([\"2\", \"5\", \"1\", \"3\", \"4\", \"5\", \"6\", \"4\", \"5\", \"2\"]) == \"3\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '2'\n\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 3') == '12'\nassert solution('5 3') == '10'\nassert solution('5 3') == '10'\nassert solution('5 3') == '12'\nassert solution('5 3') == '10'\n"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"2\"\n'''"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    str(input())\n) == '2'\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"A\"\nassert solution(input(\"Enter uppercase or lowercase string: \")) == \"A\"\nassert solution(input(\"Enter a string: \")) == \"A\"\nassert solution(input(\"Enter uppercase string: \")) == \"A\"\nassert solution(input(\"Enter a string: \")) == \"A\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'A'\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'A'\nassert solution(input()) == 'a'"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(alpha) == A\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(A) == \"A\"\n\n### Solution:\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"A\") == \"A\"\nassert solution(\"Aa\") == \"A\"\nassert solution(\"Aa A\") == \"A\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"\u03b1\") == \"A\"\nassert solution(\"\u03b1_\") == \"A\"\nassert solution(\"A_\") == \"A\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n        \"A\",\n        \"a\"\n    ) == \"A\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"A\"\nassert solution(\"B\") == \"a\"\nassert solution(\"Aa\") == \"Aa\"\nassert solution(\"ZZ\") == \"ZZ\"\nassert solution(\"abc\") == \"abc\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\""
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['2', '2', '2']) == '6'\nassert solution(['1', '2', '2']) == '3'\nassert solution(['0', '1', '1']) == '1'\nassert solution(['0', '2', '0']) == '1'\nassert solution(['0', '1', '1']) == '2'\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 2') == '3'\nassert solution('1 1 2') == '6'\nassert solution('0 1 0 0 2') == '6'"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"2 2\", \"0 3\"]) == \"3\"\nassert solution([\"0 2\", \"2 3\"]) == \"2\"\nassert solution([\"1 3\", \"0 2\"]) == \"0\"\nassert solution([\"1 3\", \"1 2\", \"3 2\"]) == \"0\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"2 2\"\n) == \"6\"\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2,2) == 6\nassert solution(2,3) == 6\nassert solution(3,2) == 6\nassert solution(3,3) == 6\nassert solution(4,3) == 6\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '4'\nassert solution(inp) == '6'\nassert solution(inp) == '2'\nassert solution(inp) == '2'\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"2 2\") == 6\nassert solution(\"2 2\") == 1\nassert solution(\"2 2 1 1\") == 2"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('0 0 2') == '6'\nassert solution('0 2 0') == '6'\nassert solution('0 1 0') == '6'\nassert solution('2 0 1') == '6'\nassert solution('2 0 1 2') == '6'\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == 6\nassert solution(\"2 3\") == 2\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1234) == \"YYMM\"\nassert solution(01234) == \"MMYY\"\nassert solution(1212) == \"AMBIGUOUS\"\nassert solution(1211) == \"NA\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"YYMM\"\nassert solution(input(\"Invalid input, try again\")) == \"NA\"\nassert solution(input(\"Invalid input, try again\")) == \"NA\"\nassert solution(input(\"Invalid input, try again\")) == \"NA\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"MMYY\"\nassert solution(\"1905\") == \"AMBIGUOUS\"\nassert solution(\"1905\") == \"NA\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1905) == \"YYMM\"\nassert solution(1905) == \"01\"\nassert solution(1905) == \"05\"\nassert solution(1905) == \"10\"\nassert solution(1905) == \"19\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1911') == 'MMYY'\nassert solution('1945') == 'AMBIGUOUS'\nassert solution('1951') == 'NA'\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == inp, \"invalid string\"\nassert inp == \"YYMM\", \"invalid string\"\nassert inp == \"0101\", \"invalid string\"\nassert inp == \"1905\", \"invalid string\"\nassert inp == \"1905\", \"invalid string\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 'YYMM'"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"YYMM\") == \"YYMM\", \"Invalid YYMM\"\nassert solution(\"MMYY\") == \"MMYY\", \"Invalid MMYY\"\nassert solution(\"01\") == \"01\", \"Invalid 01\"\nassert solution(\"202\") == \"202\", \"Invalid 2002\"\nassert solution(\"201\") == \"201\", \"Invalid 201\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"MMYY\"\nassert solution(\"1905\") == \"AMBIGUOUS\"\nassert solution(\"1905\") == \"NA\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1906\") == \"MMYY\"\nassert solution(\"1908\") == \"AMBIGUOUS\"\nassert solution(\"1910\") == \"NA\"\nassert solution(\"1912\") == \"NA\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '2'\nassert solution(input()) == '2'\nassert solution(input()) == '2'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1,1) == 2\nassert solution(2,1) == 2\nassert solution(3,1) == 3\nassert solution(1,3) == 0\nassert solution(2,3) == 0\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '2'"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nprint(\"solution test passed\")\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp := \"3\") == \"2\"\nassert solution(inp := \"4\") == \"3\"\nassert solution(inp := \"5\") == \"3\"\nassert solution(inp := \"10\") == \"2\"\nassert solution(inp := \"100\") == \"3\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\nassert solution('2') == '2'\nassert solution('1') == '2'\nassert solution('100') == '2'\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 2\nassert solution(5) == 2\nassert solution(5) == 2\nassert solution(10) == 2\nassert solution(100) == 2\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5 6\") == \"4\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"21\"\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('9:00') == '21'\nassert solution('21') == '21'\nassert solution('9:30') == '21'\nassert solution('9:00') == '21'\nassert solution('9:00') == '21'\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"21\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '21'\n\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution((\"21 o'clock\", \"9:00 p.m.\")), \"21 o'clock\"\nassert solution((\"21 o'clock\", \"11:00 p.m.\")), \"21 o'clock\"\nassert solution((\"09:00 p.m.\", \"10:00 p.m.\")), \"21 o'clock\"\nassert solution((\"09:00 p.m.\", \"11:00 p.m.\")), \"21 o'clock\"\nassert solution((\"09:00 p.m.\", \"11:00 p.m.\")) == \"21 o'clock\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"9 12\") == \"21\"\nassert solution(\"9 4\") == \"12\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 5\") == \"3\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"21\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(a=\"1\", b=\"22\") == \"21\"\nassert solution(a=\"3\", b=\"4\") == \"23\"\nassert solution(a=\"9\", b=\"21\") == \"22\"\nassert solution(a=\"0\", b=\"23\") == \"23\""
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(9 12) == 21\nassert solution(9 5) == 17\nassert solution(10 10) == 15\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"21\""
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"10\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"8\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"2\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"1\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"3719\"\n\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"4 19\") == 3719\nassert solution(\n    \"1 1\") == 1\nassert solution(\n    \"4 3\") == 100\nassert solution(\n    \"6 9\") == 200\nassert solution(\n    \"2 0\") == 0\n"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3719\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '3719'"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3719'\nassert solution(stdin) == '7200'\nassert solution(stdin) == '7500'\nassert solution(stdin) == '7200'\nassert solution(stdin) == '7200'\n"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2 2919\"\n) == \"3719\"\n\nassert solution(\n    \"2 2997\"\n) == \"7401\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 2919\") == \"3719\"\nassert solution(\"2 2919\") == \"4719\"\nassert solution(\"2 2919\") == \"3719\"\nassert solution(\"2 2919\") == \"4719\"\nassert solution(\"2 2919\") == \"3719\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3719\"\n'''"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(INPUT) == \"3719\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"11\") == \"4\"\n\n-----Explanation-----\nGiven is given as the following:\nN = 2\nK = 2\nsolution is 9 because 2 is a digit in base 2.\nInput:\n5\n2\nOutput:\n9\n\nInput:\n11\n3\nOutput:\n2\nExplanation:\n11 is a digit in base 3.\nN = 5\nK = 3\nsolution is 2 because 3 is a digit in base 3.\nInput:\n2\n5\nOutput:\n2\nExplanation:\n2 is a digit in base 5.\nN = 5\nK = 3\nsolution is 2 because 3 is a digit in base 3.\nInput:\n1\n10\nOutput:\n1\nExplanation:\nN = 1\nK = 10\nsolution is 1 because 1 is a digit in base 10.\nInput:\n9\n8\nOutput:\n9\nExplanation:\n9 is a digit in base 9.\nN = 8\nK = 9\nsolution is 9 because 9 is a digit in base 9.\n\n-----Original-----\nhttps://www.hackerrank.com/challenges/base10-base-2/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"11\") == \"5\"\nassert solution(\"10\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == str(int(input().strip())), \"Incorrect answer\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, 2) == 4, \"test\"\nassert solution(2, 10) == 2, \"test\"\nassert solution(0, 10) == 0, \"test\"\nassert solution(1, 10) == 1, \"test\"\nassert solution(11, 10) == 1, \"test\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 2\nassert solution(input()) == 1\nassert solution(input()) == 3\nassert solution(input()) == 1\nassert solution(input()) == 2\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"11 2\"\n) == \"4\"\nassert solution(\n    \"11111101011101\"\n) == \"10\"\nassert solution(\n    \"1122\"\n) == \"1\"\nassert solution(\n    \"0111\"\n) == \"10\"\nassert solution(\n    \"10\"\n) == \"10\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(13) == \"11\"\nassert solution(10) == \"5\"\nassert solution(10) == \"4\"\nassert solution(5) == \"1\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 10"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == \"3\"\nassert solution(15) == \"3\"\nassert solution(10) == \"3\"\nassert solution(20) == \"3\"\nassert solution(30) == \"3\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == '1'\nassert solution(5) == '2'\nassert solution(5) == '3'\nassert solution(5) == '4'\nassert solution(5) == '5'"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"27\"\nassert solution(\"4\") == \"14\"\nassert solution(\"5\") == \"21\"\nassert solution(\"2\") == \"15\"\nassert solution(\"5\") == \"22\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(4) == '3'\nassert solution(5) == '3'\nassert solution(6) == '5'\nassert solution(7) == '6'\nassert solution(8) == '7'\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"3\"\n\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yay!\"\n\n----Examples-----\nexample1:\n\ninput:\n5 4\nE869120\n\noutput:\nYay!\n\nexplanation:\nE869120 and square1001 can obey the instruction in the note and take desired numbers of pieces of cake.\n\"\"\"\n\nfrom collections import deque\n\nn, m = map(int, input().split())\n\nbaked_dishes = deque([i for i in range(1, n + 1)])\n\nsum_of_baked_dishes = [0] * (n + 1)\nfor i in range(n):\n    sum_of_baked_dishes[i + 1] = sum_of_baked_dishes[i] + baked_dishes.popleft()\n\nfor i in range(m):\n    name, num = input().split()\n    num = int(num)\n    if num in sum_of_baked_dishes:\n        print('yes')\n    else:\n        print('no')"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"E869120's and square1001's 16-th birthday is coming soon.\"), \"Yay!\"\nassert solution(\"E869120's and square1001's 16-th birthday is coming soon.\"), \"Yay!\""
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"E869120's and square1001's 16-th birthday is coming soon.\") == \"Yay!\"\nassert solution(\"the same person should not take two adjacent pieces of cake.\") == \"Yay!\"\nassert solution(\"A B\") == \"Yay!\"\nassert solution(\"A B\") == \"Yay!\"\nassert solution(\"A B\") == \"Yay!\"\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"Yay!\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5 4) == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yay!\"\n\nInput\nA B\n\nOutput\nYay!\n\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"Yay!\"\n\n-----Sample Input-----\n5 4\n\n-----Sample Output-----\nYay!\n\nInput is given from STDIN.\n\n-----Constraints-----\n - A and B are integers between 1 and 16 (inclusive).\n - A+B is at most 16.\n\n-----Input Format-----\nThe first line of the input contains an integer, N, denoting the number of elements in the array.\nThe next N lines contains the array, each element in the array separated by spaces.\n\nOutput Format\nOutput the value of the last element of the array as a string.\n\nSample Input\n3 5\n1 2 4\n1 2 5\n2 3 5\n3 4 5\n3 4\nSample Output\n4\nExplanation\nThe array has four pieces:\n1st piece of cake, 2nd piece of cake, 3rd piece of cake, 4th piece of cake.\nThe last piece of cake is not present.\n\nConstraints\n0 <= N <= 100\n\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"Yay!\"\n\"\"\"\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        nums.sort()\n        for i, num in enumerate(nums):\n            if target - num == nums[i + 1]:\n                return [i, i + 1]\n            \n        return [-1, -1]\n"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"E869120's and square1001's 16-th birthday is coming soon.\") == \"Yay!\"\n\nassert solution(\"\") == \"Yay!\"\n\nInput was given by the user using standard input.\n\nFor each test case, print:\n\nLine 1: E869120's and square1001's 16-th birthday is coming soon\nLine 2: E869120 and square1001's 16-th birthday is coming soon\n\nFor each test case, print:\n\nLine 1: E869120's and square1001's 16-th birthday is coming soon\nLine 2: E869120 and square1001's 16-th birthday is coming soon\n\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(string_input) == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"34\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"734\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"7\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 34, \"The minimum possible (absolute) difference between X and 753 is 34.\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1234567876\") == 34\nassert solution(\"56767876\") == 787\nassert solution(\"123456789\") == 798\nassert solution(\"567\") == 756\nassert solution(\"12345\") == 8\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1234\") == 7\nassert solution(\"13579\") == 7\nassert solution(\"16777\") == 7\nassert solution(\"4\") == 7\nassert solution(\"9\") == 7\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1234\") == 7\nassert solution(\"4177252841\") == 9\nassert solution(\"634\") == 7\nassert solution(\"1234345654321\") == 12\nassert solution(\"12345678\") == 7\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '34'\nassert solution(input) == '34'\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '34'\nassert solution(stdin) == '7'\nassert solution(stdin) == '787'\nassert solution(stdin) == '7'\nassert solution(stdin) == '34'\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1234567876') == 7\nassert solution('1234567') == 0\nassert solution('123456789') == 0\nassert solution('21234567') == 1\nassert solution('2123456789') == 0\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1234567876\") == 787, \"Number 786 is not allowed.\"\nassert solution(\"123456789\") == 34, \"Number 34 is not allowed.\"\nassert solution(\"9001\") == 7, \"Only the numbers in the range of 9001 are allowed.\"\nassert solution(\"9001\") == 7, \"Only the numbers in the range of 9001 are allowed.\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"11\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"23\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == str(1)\nassert solution(stdin) == str(5)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(4)\nassert solution(stdin) == str(6)\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '5'\nassert solution(stdin) == '7'\nassert solution(stdin) == '2999999987'\nassert solution(stdin) == '12 13'\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 3 2\"\n), \"solution() failed to return '3 3 2'\"\n\n\n    # TODO: Write your code here.\n    pass\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"1\"\nassert solution(\"2 5\") == \"3\"\nassert solution(\"2 7\") == \"2\"\nassert solution(\"2 10\") == \"2\"\nassert solution(\"1 1000000000 4 6 8 4 2\") == \"5\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 7 5 6 8 4 2\") == \"2\"\nassert solution(\"7 52 0 13 26 52\") == \"13\"\nassert solution(\"2 1000000000 4 6 8 4 2\") == \"12\"\nassert solution(\"0 13 50\") == \"0\"\n\n\n\n-----Constraints-----\n0 < n < 10^5\n0 < a_i < 10^9\n0 < a_j < 10^9\n2 < j < n\n0 < k < 10^9\na_i, a_j, a_k must be unique.\n\nSolution\u2019s input does not have to be the correct format, however the output does have to be the correct format.\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"1\"\nassert solution(\"7\") == \"12\"\nassert solution(\"6\") == \"13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2999999987'\nassert solution(stdin) == '1213'\nassert solution(stdin) == '2999999987'\nassert solution(stdin) == '1213'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2') == 7, 'Wrong answer'\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n0 <= a[i] <= 10^9\n\n----\n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 5 4 1') == 2\nassert solution('1 4 2') == 1\nassert solution('2 2 3 1') == 2\nassert solution('1 1 1') == 0\nassert solution('1 1 2') == 1\n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\n'''\n\nfrom collections import Counter"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n    [2, 1, 1, 1, 1, 1, 1, 1],\n    [3, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1]\n    ]\n) == 2\n\n\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 2 1 2\") == \"3\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"1 1 2 3\") == \"1\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"4 1 2\") == \"1\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(in_) == 4\nassert solution(in2) == 1\nassert solution(in3) == 2\nassert solution(in4) == 1\nassert solution(in5) == 1\n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\",\"2\"]) == \"1\"\nassert solution([\"3\"]) == \"1\"\nassert solution([\"1\",\"3\"]) == \"2\"\nassert solution([\"1\",\"3\",\"2\"]) == \"1\"\nassert solution([\"1\",\"3\",\"2\",\"1\"]) == \"1\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\""
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nprint(\"The solution is correct.\")"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\n2 3\n1 2\n1 3\n\\\"\\\"\\\") == 2\nassert solution(\\\"\\\"\\\"\\\"\n3 2\n1 3\n1 2\n1 4\n\\\"\\\"\\\") == 4\nassert solution(\\\"\\\"\\\"\\\"\n3 2\n1 3\n1 4\n1 2\n1 5\n\\\"\\\"\\\") == 5\nassert solution(\\\"\\\"\\\"\\\"\n2 2\n3 3\n2 4\n1 1\n1 3\n\\\"\\\"\\\") == 3\nassert solution(\\\"\\\"\\\"\\\"\n4 4\n2 3\n1 1\n1 2\n1 4\n1 5\n\\\"\\\"\\\") == 4\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"2\" or solution(inp) == \"2\"\n\n\"\"\""
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 0 0\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 3 4\") == \"3\"\nassert solution(\"1 4 2\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '4'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 11, \"Failed\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n'''\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 1\") == \"11\"\nassert solution(\"7 2\") == \"11\"\nassert solution(\"1 2 3 4 5\") == \"11\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"1 2 3 4 5 6 7 8 9 10\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 11, \"solution should return 4\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution == 3, \"Test failed\"\n\"\"\""
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == 11\nassert solution(\"1 2\") == 11\nassert solution(\"6 4\") == 11\nassert solution(\"6 5\") == 4\nassert solution(\"7 4\") == 7\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution == 11\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '11'\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 13\"\nassert solution(stdin) == \"1 9 12 23 26 37\"\nassert solution(stdin) == \"5 9 9999999999\"\nassert solution(stdin) == \"5 6 9999999999\"\nassert solution(stdin) == \"5 6 9999999999\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1 1'\nassert solution(stdin) == '1 9'\nassert solution(stdin) == '2 2'\nassert solution(stdin) == '2 13'\nassert solution(stdin) == '3 1'\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"3 6\"\n) == \"1 1\"\nassert solution(\n    \"2 3\"\n) == \"2 1\"\nassert solution(\n    \"5 10000000000\"\n) == \"5 10000000000\"\nassert solution(\n    \"5 10000000000\"\n) == \"5 10000000000\"\nassert solution(\n    \"6 99999999999999\"\n) == \"6 99999999999999\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"a1\") == \"1 9\"\nassert solution(\"a1 2\") == \"2 1\"\nassert solution(\"a2 4\") == \"4 2\"\nassert solution(\"a2 9\") == \"9 2\"\nassert solution(\"a1 5\") == \"5 1\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 9\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 13\"\nassert solution(stdin) == \"3 1\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"Hello\") == \"Hello\"\nassert solution(\"hello\") == \"Hello\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 9 1\"\nassert solution(stdin) == \"1 9 12\"\nassert solution(stdin) == \"1 9 13\"\nassert solution(stdin) == \"1 9 1\"\nassert solution(stdin) == \"1 6\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 6) == 2, 'The input is not correct'\nassert solution(2, 3) == 1, 'The input is not correct'\nassert solution(5, 10000000000) == 5, 'The input is not correct'\nassert solution(5, 5) == 5, 'The input is not correct'\nassert solution(2, 1) == 5, 'The input is not correct'\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 9\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 13\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 9\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 13\"\nassert solution(stdin) == \"3 1\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"20 20 20\"\nassert solution(stdin) == \"20 20 20\"\nassert solution(stdin) == \"3 6 5 4\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('2 2 2') == '2'\nassert solution('3 3 3') == '3'\nassert solution('3 4 4') == '3'\nassert solution('5 5 5') == '5'\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"2 1 3\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 6, 5, 4) == \"2 1 3\"\nassert solution(40, 40, 40, 60) == \"20 20 20\"\nassert solution(201, 101, 101, 200) == \"1 100 100\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"3 2 4\"\nassert solution(stdin) == \"1 2 4\"\nassert solution(stdin) == \"1 3 2\"\nassert solution(stdin) == \"1 4 2\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2 1 3\", \"Should be 2 1 3\"\nassert solution(stdin) == \"20 20 20\", \"Should be 20 20 20\"\nassert solution(stdin) == \"1 100 100\", \"Should be 1 100 100\"\nassert solution(stdin) == \"2 1 3\", \"Should be 2 1 3\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"1 100 100\"\nassert solution(stdin) == \"1 100 100\"\nassert solution(stdin) == \"1 100 100\"\nassert solution(stdin) == \"1 100 100\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2 1 3'\nassert solution(stdin) == '1 100 100'\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 7 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == [\"2\", \"1\", \"3\", \"4\"]\nassert solution(stdin) == [\"20\", \"20\", \"20\", \"20\"]\nassert solution(stdin) == [\"2\", \"1\", \"3\", \"4\", \"1\"]\nassert solution(stdin) == [\"2\", \"1\", \"3\", \"4\"]\nassert solution(stdin) == [\"2\", \"1\"]\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"6\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '6'\nassert solution(stdin) == '2'\nassert solution(stdin) == '6'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"RBRGRBRGR\") == \"RBRGRGRGR\"\nassert solution(\"BBB\") == \"BBRBRBRBRBRBRB\"\nassert solution(\"B\") == \"BBRBRBRBRBRBRB\"\nassert solution(\"R\") == \"BRBRBRBRBRBRBRB\"\nassert solution(\"RR\") == \"BBRBRBRBRBRBRBRB\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"2\"\nassert solution(\"0\") == \"3\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1,2,3,4,5,6,7,8,9,10) == 'BRGRGBRGR'\n\n\n    def solution(stdin: str) -> str:\n        n = int(stdin)\n        if n % 2!= 0:\n            return 'error'\n\n        if n == 1:\n            return 'RBGR'\n        if n == 2:\n            return 'RBGR'\n        if n == 3:\n            return 'BGR'\n        if n == 4:\n            return 'BGGR'\n        if n == 5:\n            return 'BGR'\n        if n == 6:\n            return 'GRG'\n        if n == 7:\n            return 'GGGR'\n        if n == 8:\n            return 'GGGR'\n        if n == 9:\n            return 'GGGR'\n        if n == 10:\n            return 'GGGR'\n        return 'error'\n\n\nassert solution(1,2,3,4,5,6,7,8,9,10) == 'RBGR'\n\nassert solution(1,2,3,4,5,6,7,8,9,10) == 'BGR'\n\nassert solution(1,2,3,4,5,6,7,8,9,10) == 'BGGR'\n\nassert solution(1,2,3,4,5,6,7,8,9,10) == 'BGR'"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 6\nassert solution(stdin) == 4\nassert solution(stdin) == 1\nassert solution(stdin) == 3\nassert solution(stdin) == 5\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"8\"\nassert solution(\"3\") == \"3\"\nassert solution(\"1\") == \"3\"\nassert solution(\"3\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\"]) == \"1\"\nassert solution([\"1\", \"2\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\"]) == \"4\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"5\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"6\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\n\n\n-----Other Solutions-----"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"4\"\nassert solution(input) == \"2\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '6'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"4\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"3\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"6\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 2 3 4 7 5 6 8\"\nassert solution(stdin) == \"2 3 5 6 \nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3 1) == \"Yes\"\nassert solution(5) == \"No\"\nassert solution(17) == \"No\"\nassert solution(4) == \"No\"\nassert solution(1) == \"Yes\""
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(9) == \"Yes\"\nassert solution(10) == \"No\"\nassert solution(16) == \"Yes\"\nassert solution(14) == \"No\"\nassert solution(9) == \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3,1) == \"Yes\"\nassert solution(3,2) == \"No\"\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"Yes\"\nassert solution(input) == \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\"\"\"\n\nclass Solution:\n    def isOddNum(self, A, B):\n        if B % 2!= 0:\n            return False\n        if A % 3 == 0:\n            return True\n        \n        return False\n        "
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3 1) == \"Yes\"\nassert solution(3 2) == \"No\"\nassert solution(1) == \"Yes\"\nassert solution(2) == \"No\"\nassert solution(3) == \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(test_case) == \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"4 5\") == \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"110\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '110'\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"2\"\nassert solution(\"1 1 3\") == \"1\"\nassert solution(\"1 1 4\") == \"3\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '110'"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"200 80\") == 110\nassert solution(\"200 80 50\") == 110\nassert solution(\"300 100\") == 110\nassert solution(\"300 100 50\") == 110\nassert solution(\"400 100 100\") == 110\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\", 1) == \"1\"\nassert solution(\"1000\", 1) == \"1000\"\nassert solution(\"2\", 2) == \"2\"\nassert solution(\"101\", 1) == \"101\"\nassert solution(\"2\", 2) == \"2\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '110'\n\n\"\"\"\n\nimport sys\nimport math\n\nX, Y = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 4 3\") == \"110\"\nassert solution(\"2 3 4\") == \"110\"\nassert solution(\"1 7\") == \"110\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"110\"\nassert solution(\"1 5 3 6 7 8 9 10 11 12 13 14 15\") == \"110\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"110\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10 2\") == \"10\"\nassert solution(\"60 3\") == \"60\"\nassert solution(\"100 10\") == \"100\"\nassert solution(\"100 10 5\") == \"15\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(string) == \"8\"\n'''\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"8\"\nassert solution(\"7\") == \"2\"\nassert solution(\"1\") == \"2\"\nassert solution(\"8\") == \"8\"\nassert solution(\"110\") == \"10\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"8\"\nassert solution(input) == \"8\"\nassert solution(input) == \"8\"\nassert solution(input) == \"8\"\nassert solution(input) == \"8\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 8, \"No solution\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == '8'\nassert solution(inp) == '2'\n\n[input]\n\na, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n\n[output]\n\na\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n[input]\n\na, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n\n[output]\n\na\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n[input]\n\na, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n\n[output]\n\na\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n[input]\n\na, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n\n[output]\n\na\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n[input]\n\na, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n\n[output]\n\na\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n[input]\n\na, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n\n[output]\n\na\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n[input]\n\na, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n\n[output]\n\na\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n[input]\n\na, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n\n[output]\n\na\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n[input]\n\na, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n\n[output]\n\na\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n[input]\n\na, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n\n[output]\n\na\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n[input]\n\na, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n\n[output]\n\na\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n[input]\n\na, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n\n[output]\n\na\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n[input]\n\na, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n\n[output]\n\na\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer."
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"8\"\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin=\n    input\n    ) == 8"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"0123456789\"\n) == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 8\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"8\""
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"X\") == \"YES\"\nassert solution(\"X\") == \"NO\"\n'''\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(4) == \"NO\"\nassert solution(4) == \"NO\"\nassert solution(5) == \"YES\"\nassert solution(3) == \"YES\"\nassert solution(2) == \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5') == 'YES'\nassert solution('6') == 'NO'\nassert solution('7') == 'NO'\nassert solution('8') == 'YES'\nassert solution('9') == 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['5', '4', '3', '2', '1']) == \"YES\"\nassert solution(['5', '4', '3', '2', '1', '3', '2', '1']) == \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\", \"Expected 'YES' but got 'NO'\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"7-5-3\") == \"NO\"\nassert solution(\"Seven-Five-Three\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    inp: str\n)\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5') == 'YES'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('0') == 'ABC'\nassert solution('1') == 'B'\nassert solution('2') == 'A'\nassert solution('3') == 'C'\nassert solution('4') == 'E'\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'ABC'\nassert solution(input()) == 'ABCD'\nassert solution(input()) == 'ABCDE'\nassert solution(input()) == 'ABCDEF'\nassert solution(input()) == 'ABCFG'\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(solution) == \"ABC\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'ABC'\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"ABC\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ABC001\") == \"ABC\"\nassert solution(\"ABC002\") == \"ABD\"\nassert solution(\"ABC003\") == \"ABD\"\nassert solution(\"ABC004\") == \"ABD\"\nassert solution(\"ABC005\") == \"ABD\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"ABC\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"ABC\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"A\"\nassert solution(\"2\") == \"D\"\nassert solution(\"3\") == \"B\"\nassert solution(\"4\") == \"C\"\nassert solution(\"5\") == \"A\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(sys.stdin) == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(raw_input) == 'Yay!', \"incorrect output\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\ninput(\"Enter: \")) == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1') == 'Yay!'\nassert solution('2') == 'Nay!'\nassert solution('4') == 'Nay!'\nassert solution('8') == 'Nay!'\nassert solution('9') == 'Nay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Yay!\"\nassert solution(\"2\") == \"Yay!\"\nassert solution(\"3\") == \"Yay!\"\nassert solution(\"4\") == \"Yay!\"\nassert solution(\"5\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('a') == 'Yay!'\nassert solution('b') == 'Yay!'\nassert solution('c') == 'Yay!'\nassert solution('d') == 'Yay!'\nassert solution('e') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Yay!\"\nassert solution(\"2\") == \"No!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"Yay!\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"Yay!\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"pink\"\nassert solution(\"7\") == \"red\"\nassert solution(\"123\") == \"red\"\nassert solution(\"123\") == \"red\"\nassert solution(\"1234\") == \"red\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"pink\""
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3200) == 'pink'\nassert solution(5200) =='red'\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3200) == \"pink\", \"pink not smaller than 3200\"\nassert solution(3400) == \"red\", \"red not smaller than 3400\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3200) == 'pink'\nassert solution(3200) =='red'\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(a) == s\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'pink', \"solution should be pink\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(a = 3200) == 'pink', 'Should be pink.'\nassert solution(a = 3200) == 'pink', 'Should be pink.'\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(123) == \"pink\"\nassert solution(123) == \"red\"\nassert solution(1) == \"red\"\nassert solution(3200) == \"pink\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(a = 3200) == 'pink','should print pink'\nassert solution(stdin = \"pink\") =='red','should print red'\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('ABC') == 'ABC'\nassert solution('ARC') == 'ARC'\nassert solution('AGC') == 'AGC'\nassert solution('ARC') == 'ARC'\nassert solution('AGC') == 'AGC'"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1199\") == \"ABC\"\nassert solution(\"1214\") == \"ARC\"\nassert solution(\"1214\") == \"AGC\"\nassert solution(\"1429\") == \"ARC\"\nassert solution(\"1214\") == \"AGC\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"ABC\"\nassert solution(\"A\") == \"ABC\"\nassert solution(\"A\") == \"ABC\"\nassert solution(\"A\") == \"ARC\"\nassert solution(\"A\") == \"ARC\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(120) == \"ABC\"\nassert solution(99) == \"ARC\"\nassert solution(10) == \"AGC\"\nassert solution(120) == \"AGC\"\nassert solution(90) == \"ARC\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == \"ABC\"\nassert solution(3) == \"ARC\"\nassert solution(3) == \"AGC\"\nassert solution(2) == \"ARC\"\nassert solution(9) == \"ARC\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"A\") == \"ABC\"\nassert solution(\"AR\") == \"ARC\"\nassert solution(\"A\") == \"AGC\"\nassert solution(\"A\") == \"AGC\"\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"ABC\"\n\"\"\"\nfrom math import factorial"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"177597\") == \"ABC\", \"15\"\nassert solution(\n    \"959\") == \"ARC\", \"26\"\nassert solution(\n    \"2453\") == \"AGC\", \"14\"\nassert solution(\n    \"2452\") == \"ARC\", \"2\"\nassert solution(\n    \"2451\") == \"ARC\", \"1\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'AGC'\nassert solution('AGC') == 'ARC'\nassert solution('ABC') == 'ARC'\nassert solution('ABC') == 'ABC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution) == \"ABC\", \"solution()\"\n\nassert solution(solution) == \"ARC\", \"solution()\"\nassert solution(solution) == \"AGC\", \"solution()\"\n\nassert solution(solution) == \"ARC\", \"solution()\"\nassert solution(solution) == \"AGC\", \"solution()\""
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(112) == 991\nassert solution(999) == 991\nassert solution(10) == 9\nassert solution(100) == 9\nassert solution(1000) == 991\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(979) == 991, \"Your code failed to correct the output.\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(123) == \"0101\"\nassert solution(1234) == \"01010001\"\nassert solution(12345) == \"01010010101010001\"\nassert solution(12341434) == \"010100010001000101010001\"\nassert solution(12345678) == \"010100010001000101000100010101000100010001000101000100010001010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(str(111)) == \"991\"\nassert solution(str(999)) == \"911\"\nassert solution(str(1111)) == \"911\"\nassert solution(str(999)) == \"999\"\nassert solution(str(1111)) == \"1111\""
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(str(input())), \"Wrong result\"\nprint(str(input()))\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '9991'\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1') == '1', '1'\nassert solution('101') == '1', '101'\nassert solution('111') == '1', '111'\nassert solution('999') == '1', '999'"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(119) == 991, \"Test failed\"\nassert solution(1234) == 991, \"Test failed\"\nassert solution(1234567890) == 991, \"Test failed\"\nassert solution(1234567891) == 991, \"Test failed\"\nassert solution(\"a\" * 3) == \"aa\" * 3, \"Test failed\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(119) == 991\nassert solution(1239) == 991\nassert solution(1299) == 991\nassert solution(1013) == 991\nassert solution(10) == 991\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\nstdin: str = \"11\") == \"1\"\nassert solution(\nstdin: str = \"111\") == \"9\"\nassert solution(\nstdin: str = \"1000\") == \"1\"\nassert solution(\nstdin: str = \"9999\") == \"0\"\nassert solution(\nstdin: str = \"9999999\") == \"0\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(open(\"A.txt\").read().splitlines()) == \"aabac\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('aac') == 'ac', 'Solution not correct'\nassert solution('aac') == 'ac', 'Solution not correct'\nassert solution('aac') == 'aac', 'Solution not correct'\nassert solution('aac') == 'aac', 'Solution not correct'\nassert solution('aac') == 'aac', 'Solution not correct'\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"abac\"\nassert solution(stdin) == \"ac\"\nassert solution(stdin) == \"bcdaf\"\nassert solution(stdin) == \"abac\"\nassert solution(stdin) == \"ac\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"abac\"\nassert solution(inp) == \"ac\"\nassert solution(inp) == \"bcdaf\""
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution( \"abac\" ) == \"abc\"\nassert solution( \"ac\" ) == \"a\"\nassert solution( \"bccddaaf\" ) == \"bccdda\"\nassert solution( \"zzzzzz\" ) == \"zzzzzzzzz\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(string) == 'abbac'\nassert solution(string) == 'ac'\nassert solution(string) == 'bcdaf'\n\n\n-----Constraints-----\n\n1 <= t <= 1000\n\n\n-----Brute Force Approach-----\n\nSince the answer can be not unique, we can directly solve with brute force by computing the number of letters needed to construct a unique string. We simply need to split the string from each character, and once we split, we can construct the string, so that the answer is unique.\n\nSo the first step is to build the word array, and the second step is to split the string in the words, and we build the dictionary to split the word array, so that we can solve the problem.\n\nTime complexity: O(n * m)\nSpace Complexity: O(1)\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.letters = {}\n        self.dictionary = {}\n\n    def get_string(self, string):\n        for char in string:\n            if char not in self.letters:\n                self.letters[char] = 1\n            else:\n                self.letters[char] += 1\n        return string\n\n    def solution(self, stdin: str) -> str:\n        for i in range(len(stdin)):\n            self.get_string(stdin[:i] + stdin[i+1:])\n        for key in self.letters:\n            if self.letters[key] > 1:\n                self.dictionary[key] = key\n        return ''.join(sorted(self.dictionary, reverse=True))\n\ntest_cases = [\n    (\"aaac\", \"abac\"),\n    (\"abcabac\", \"abcab\"),\n    (\"aaabcc\", \"abccdd\"),\n    (\"abbc\", \"bcabc\"),\n    (\"aaaaa\", \"aaaaa\")\n]\n\n\nfor case in test_cases:\n    print(f'{case[0]} = {Solution().solution(case[0])}')"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"abac\", \"stdin\"\nassert solution(stdin) == \"ac\", \"stdin\"\nassert solution(stdin) == \"bcdaf\", \"stdin\"\nassert solution(stdin) == \"abac\", \"stdin\"\nassert solution(stdin) == \"ac\", \"stdin\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"aabbacddddbbbabacacddddcbaaaacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaabacacddddcdaaab"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"ac\"\nassert solution(input()) == \"bcdaf\"\nassert solution(input()) == \"abc\"\nassert solution(input()) == \"abcddaa\"\nassert solution(input()) == \"aabcba\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'abac'\nassert solution(stdin) == 'ac'\nassert solution(stdin) == 'bcdaf'\nassert solution(stdin) == 'zzzzzz'\n\n'''"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1,1) == 2\nassert solution(2,2) == 5\nassert solution(5,4) == 2\nassert solution(5,6) == 0\nassert solution(2,2) == 1\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(test_case) == [2,3,0]\nassert solution(test_case_1) == [0,1,3]\nassert solution(test_case_2) == [0,1,3,2,1,1,2,1,0,0]\nassert solution(test_case_3) == [0,1,3,2,1,1,2,1,0,0,0]\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(int(sys.stdin.readline().strip())) == 100\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n            \"TestCase#1\\n\"\n            \"5\\n\"\n            \"10 4\\n\"\n            \"13 9\\n\"\n            \"100 13\\n\"\n            \"123 456\\n\"\n            \"92 46\\n\"\n            \"123 456\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n            \"0\\n\"\n    "
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 2\n\n'''"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, 10) == 2\nassert solution(5, 13) == 3\nassert solution(5, 9) == 4\nassert solution(5, 13) == 0\nassert solution(5, 13) == 1\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 5\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n\n----------Examples--------------\n\nInput\n1\n5\n5 1\n3\n2 1\n2 2\n3 2\n3 3\n4 3\n5 4\n6 5\n\nOutput\n6\n2\n6\n8\n8\n\nExplanation\nIn this case we make 5 moves by increasing $a$ by $1$ (replace $a$ with $a+1$). So we need to make $a$ divisible by $b = $3.\nThe answer is $2$, because we need to make $a$ divisible by $3$.\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10') == 2\nassert solution('5') == 2\nassert solution('2') == 1\nassert solution('3') == 3\nassert solution('10') == 4\n"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"4\", \"3\", \"4 1 2\"], \"3 1 1 2\") == \"2.666666666666667\"\nassert solution([\"4\", \"1 1\", \"2 2\", \"3 3\", \"4 4\", \"4 4\"], \"3 4 1 2\") == \"2.333333333333333\"\nassert solution
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2.666666666666667'\n'''"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2.666666666666667'\n\n\n-----Advanced-----\n\nUse bisection method to compute the maximum average temperature over all segments of not less than $k$ consecutive days.\n\nYou can determine the temperature by using the formula:\n\n$a_n = \\frac{a_n + \\frac{a_n + 1}{2}}{\\frac{2}{2} + \\frac{2}{2} - 1}$\n\nIt is also possible to compute the heat intensity value of the period by\n\n$T_n = T_n/\\frac{a_n}{2} + \\frac{1}{2}$\n\nWe can see that the average temperature is always smaller than $T_n$.\n\nYou have been hired by Berland State University to write a program that would compute the heat intensity value of a given period of days. Are you up to this task?\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 5000$) \u2014 the number of days in the given period, and the minimum number of days in a segment we consider when calculating heat intensity value, respectively.\n\nThe second line contains $n$ integers $a_1$, $a_2$,..., $a_n$ ($1 \\le a_i \\le 5000$) \u2014 the temperature measures during given $n$ days.\n\n\n-----Output-----\n\nPrint one real number \u2014 the heat intensity value, i. e., the maximum of average temperatures over all segments of not less than $k$ consecutive days.\n\nYour answer will be considered correct if the following condition holds: $|res - res_0| < 10^{-6}$, where $res$ is your answer, and $res_0$ is the answer given by the jury's solution.\n\n-----Advanced-----\n\nUse bisection method to compute the maximum average temperature over all segments of not less than $k$ consecutive days.\n\nYou can determine the temperature by using the formula:\n\n$a_n = \\frac{a_n + \\frac{a_n + 1}{2}}{\\frac{2}{2} + \\frac{2}{2} - 1}$\n\nIt is also possible to compute the heat intensity value of the period by\n\n$T_n = T_n/\\frac{a_n}{2} + \\frac{1}{2}$\n\nWe can see that the average temperature is always smaller than $T_n$.\n\nYou have been hired by Berland State University to write a program that would compute the heat intensity value of a given period of days. Are you up to this task?\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 5000$) \u2014 the number of days in the given period, and the minimum number of days in a segment we consider when calculating heat intensity value, respectively.\n\nThe second line contains $n$ integers $a_1$, $a_2$,..., $a_n$ ($1 \\le a_i \\le 5000$) \u2014 the temperature measures during given $n$ days.\n\n\n-----Output-----\n\nPrint one real number \u2014 the heat intensity value, i. e., the maximum of average temperatures over all segments of not less than $k$ consecutive days.\n\nYour answer will be considered correct if the following condition holds: $|res - res_0| < 10^{-6}$, where $res$ is your answer, and $res_0$ is the answer given by the jury's solution.\n\n-----Advanced-----\n\nUse bisection method to compute the maximum average temperature over all segments of not less than $k$ consecutive days.\n\nYou can determine the temperature by using the formula:\n\n$a_n = \\frac{a_n + \\frac{a_n + 1}{2}}{\\frac{2}{2} + \\frac{2}{2} - 1}$\n\nIt is also possible to compute the heat intensity value of the period by\n\n$T_n = T_n/\\frac{a_n}{2} + \\frac{1}{2}$\n\nWe can see that the average temperature is always smaller than $T_n$.\n\nYou have been hired by Berland State University to write a program that would compute the heat intensity value of a given period of days. Are you up to this task?\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 5000$) \u2014 the number of days in the given period, and the minimum number of days in a segment we consider when calculating heat intensity value, respectively.\n\nThe second line contains $n$ integers $a_1$, $a_2$,..., $a_n$ ($1 \\le a_i \\le 5000$) \u2014 the temperature measures during given $n$ days.\n\n\n-----Output-----\n\nPrint one real number \u2014 the heat intensity value, i. e., the maximum of average temperatures over all segments of not less than $k$ consecutive days.\n\nYour answer will be considered correct if the following condition holds: $|res - res_0| < 10^{-6}$, where $res$ is your answer, and $res_0$ is the answer given by the jury's solution.\n\n-----Advanced-----\n\nUse bisection method to compute the maximum average temperature over all segments of not less than $k$ consecutive days.\n\nYou can determine the temperature by using the formula:\n\n$a_n = \\frac{a_n + \\frac{a_n + 1}{2}}{\\frac{2}{2} + \\frac{2}{2} - 1}$\n\nIt is also possible to compute the heat intensity value of the period by\n\n$T_n = T_n/\\frac{a_n}{2} + \\frac{1}{2}$\n\nWe can see that the average temperature is always smaller than $T_n$.\n\nYou have been hired by Berland State University to write a program that would compute the heat intensity value of a given period of days. Are you up to this task?\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 5000$) \u2014 the number of days in the given period, and the minimum number of days in a segment we consider when calculating heat intensity value, respectively."
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2.666666666666667\"\n\n-----Constraints-----\n1 \u2264 stdin.length \u2264 1,000,000\n1 \u2264 k \u2264 stdin.length\n0 \u2264 a_1, a_2,..., a_n \u2264 stdin.length\n1 \u2264 n \u2264 5000\n0 \u2264 a_i \\le 5000\n\n[Time Limit Exceeded]\n\n'''\n"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1.666666666666667'\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 1 000 000\nstdin.length <= k\nk > 1\n\"\"\"\n\nfrom math import sqrt, log\n\nn = int(input())\nk = int(input())"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin=\n    \"3 4 1 2\"\n) == \"2.333333333333333\"\n\"\"\""
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '2.666666666666667'\nInput\n3 3\n5 5 1 2\n\nOutput\n4\n-----Example-----\nInput\n3 3\n6 6 5 1 2\n\nOutput\n3.5\n-----Explanation-----\nThe heat intensity value of a period of 3 days is $4 \\times 2^{0}$ and $5 \\times 2^{0}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 4 days is $4 \\times 2^{1}$ and $4 \\times 2^{1}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 5 days is $5 \\times 2^{1}$ and $5 \\times 2^{1}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 6 days is $6 \\times 2^{1}$ and $6 \\times 2^{1}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 7 days is $6 \\times 2^{2}$ and $6 \\times 2^{2}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 8 days is $6 \\times 2^{3}$ and $6 \\times 2^{3}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 9 days is $6 \\times 2^{4}$ and $6 \\times 2^{4}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 10 days is $6 \\times 2^{5}$ and $6 \\times 2^{5}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 11 days is $6 \\times 2^{6}$ and $6 \\times 2^{6}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 12 days is $6 \\times 2^{7}$ and $6 \\times 2^{7}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 13 days is $6 \\times 2^{8}$ and $6 \\times 2^{8}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 14 days is $6 \\times 2^{9}$ and $6 \\times 2^{9}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 15 days is $6 \\times 2^{10}$ and $6 \\times 2^{10}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 16 days is $6 \\times 2^{11}$ and $6 \\times 2^{11}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 17 days is $6 \\times 2^{12}$ and $6 \\times 2^{12}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 18 days is $6 \\times 2^{13}$ and $6 \\times 2^{13}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 19 days is $6 \\times 2^{14}$ and $6 \\times 2^{14}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 20 days is $6 \\times 2^{15}$ and $6 \\times 2^{15}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 21 days is $6 \\times 2^{16}$ and $6 \\times 2^{16}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 22 days is $6 \\times 2^{17}$ and $6 \\times 2^{17}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 23 days is $6 \\times 2^{18}$ and $6 \\times 2^{18}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 24 days is $6 \\times 2^{19}$ and $6 \\times 2^{19}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 25 days is $6 \\times 2^{20}$ and $6 \\times 2^{20}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 26 days is $6 \\times 2^{21}$ and $6 \\times 2^{21}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 27 days is $6 \\times 2^{22}$ and $6 \\times 2^{22}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 28 days is $6 \\times 2^{23}$ and $6 \\times 2^{23}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 29 days is $6 \\times 2^{24}$ and $6 \\times 2^{24}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 30 days is $6 \\times 2^{25}$ and $6 \\times 2^{25}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 31 days is $6 \\times 2^{26}$ and $6 \\times 2^{26}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 32 days is $6 \\times 2^{27}$ and $6 \\times 2^{27}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 33 days is $6 \\times 2^{28}$ and $6 \\times 2^{28}$:\n$n \\le n \\le 5000$\n\nThe heat intensity value of a period of 34 days is $6 \\times 2^{29}$ and $6 \\times 2^{29}$:\n$n \\le n \\"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2.666666666666667'\n"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 2 2 1 5 3 4 5 4 4\") == \"3.333333333333333\"\nassert solution(\"5 1 5 1 4 3 2 1\") == \"2.666666666666667\"\nassert solution(\"3 4 1 2\") == \"1.333333333333333\"\nassert solution(\"2 4 1 3 4 3 4 4 1 1\") == \"1.666666666666667\""
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 3 4 5\") == '2.666666666666667'\nassert solution(\"1 3 5 2\") == '2.666666666666667'\nassert solution(\"1 3 7 2\") == '3.333333333333333'\nassert solution(\"1 3 7 1\") == '2.333333333333333'\nassert solution(\"1 3 7 2\") == '3.333333333333333'\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stderr=False) == \"YES\""
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"YES\"\nassert solution(\"3 2 1\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"4 2\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\u201c1 2 3 4 5 1 2 3 4\u201d) == \u201cYES\u201d\nassert solution(\u201c1 2 3 4 5 1 2 3 4\u201d) == \u201cNO\u201d\nassert solution(\u201c1 2 3 4 5 1 2 3 4\u201d) == \u201cYES\u201d\nassert solution(\u201c1 2 3 4 5 1 2 3 4\u201d) == \u201cNO\u201d\nassert solution(\u201c1 2 3 4 5 1 2 3 4\u201d) == \u201cNO\u201d\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 2 1 2 4 1 4 1 2 4 2 4 1 2 3 2 4 1 1 3 1 2 4 1 1 3 1 2 4 4 1 2 1 2 1 2 2 2 4 1 2 1 2 1 2 2 2 4 4 1 2 1 2 1 2 2 2 4 4 1 2 1 2 1 2 2 2 4 4 1 2 1 2 1 2 2 2 4 4 1 2 1 2 1 2 2 2 4 1 2 1 2 1 2 2 2 4 4 1 2 1 2 1 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 2 2 2 4 4 1 2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"4 2\", \"3 2 1\", \"1 2\", \"4 2\", \"4 1 2 3\", \"1 3\", \"4 2\", \"4 3 2 1\", \"1 3\", \"5 2\", \"1 4 3 4 5\", \"1\", \"4 2\", \"2 1 4 3\", \"1 3\", \"5 2\", \"2 1 2 3 3\", \"1 3\", \"5 2\"]) == \"YES\"\nassert solution([\"4 2\", \"3 2 1\", \"1 2\", \"4 2\", \"4 1 2 3\", \"1 3\", \"4 2\", \"4 3 2 1\", \"1 3\", \"5 2\", \"1 4 3 4 5\", \"1\", \"4 2\", \"2 1 4 3\", \"1 3\", \"5 2\"]) == \"NO\"\nassert solution([\"4 2\", \"3 2 1\", \"1 2\", \"4 2\", \"4 1 2 3\", \"1 3\", \"4 2\", \"4 3 2 1\", \"1 3\", \"5 2\", \"1 4 3 4 5\", \"1\", \"4 2\", \"2 1 4 3\", \"1 3\", \"5 2\"]) == \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5') == 'YES'\nassert solution('1 2 3 4 5') == 'NO'\nassert solution('1 2 3 4 5') == 'NO'\nassert solution('1 2 3 4 5') == 'YES'\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 1 3 3 2 4\") == \"YES\"\nassert solution(\"3 4 2\") == \"NO\"\nassert solution(\"3 4\") == \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\nfor t in range(int(input())):\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    p.sort()\n    res = 0\n    for i in range(m):\n        if p[i]!= p[i+1]:\n            res += 1\n            if res > 1:\n                res = 0\n    print(\"YES\" if res == 0 else \"NO\")\n    \n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10 10 5 1 0 2') == 'NO'\nassert solution('4 4 3 3') == 'YES'"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"baabbb\"), \"One or two repeats\"\nassert solution(\"baabbb\"), \"One or two repeats\"\nassert solution(\"baabbb\"), \"Two repeats\"\nassert solution(\"baabbb\"), \"One repeat\"\nassert solution(\"baabbb\"), \"Two repeats\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'z'\n\n'''"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'bab','solution failed'\nassert solution(stdin) == 'aabbb','solution failed'"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, [\"baab\"]) == \"baabbb\"\nassert solution(1, [\"a\", \"ab\"]) == \"aabbb\"\nassert solution(10, [\"bb\", \"a\"]) == \"bb\"\nassert solution(0, [\"a\", \"\"]) == \"\"\nassert solution(1, [\"a\", \"a\"]) == \"a\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"z\"\nassert solution(stdin) == \"oops\"\nassert solution(stdin) == \"baabbb\"\nassert solution(stdin) == \"bab\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('hello') == 'lou'\nassert solution('g') == 'g'\nassert solution('a') == 'a'\nassert solution('a') == 'a'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'bab'\nassert solution(stdin) == 'baabbb'"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"aabbb\") == \"baabbb\"\nassert solution(\"oaoa\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\n\n\n-----Basic idea-----\n\nTo know how to solve the problem we create two variables:\n\n1. A list that stores all the letters in the alphabet.\n2. A list that stores the words of the encrypted string.\n\nIt is easy to understand that our order is always the same:\n\n[\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n]\n\nThe length of the alphabet is 1, and the length of the words is the length of the list that stores the letters of the alphabet.\n\n1. Find the length of the string\n2. Count the number of occurrences of each character\n3. Find the index of the first occurrence of each character\n4. Traverse through the list and return the results\n\nTo solve the problem, we start with the previous order of the characters and then find the first occurrence of each character and add it to the list.\n\na) create a list of letters, and the length of the list\nb) create a list of words, and the length of the list\nc) Create a new list that stores the occurrences of each character and add it to the list\nd) Traverse through the list and find the first occurence of each character, add it to the list\ne) For each character, insert it into the list\nf) Traverse through the list and return the results\n\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"baabbb\") == \"b\"\nassert solution(\"baab\") == \"baabbb\"\nassert solution(\"baab\") == \"baabbb\"\nassert solution(\"baab\") == \"baabbb\"\nassert solution(\"baab\") == \"baab\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('baab') == 'bbaa'\nassert solution('baab') == 'baaabbb'\nassert solution('bbba') == 'bba'\n\n\n-----Constraints-----\n1 \u2264 n \u2264 55\n\n0 \u2264 t \u2264 10^6\n\nsolution is case sensitive.\n\n-----------------------------------------------------------------------------------------------------------------------------------------\n\"\"\""
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 3') == '1'\nassert solution('3 3') == '2'\nassert solution('1 2 3 2 1 4 5 6 3') == '0'"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0'\n\nThis function takes a list of edges of the form (u, v, w) and returns the total cost of MST of this graph, \nwhere the edges $(u, v)$ and $(u, v, w)$ are in the correct order, and that it is only possible if the graph is connected.\n\nInput\nThe first line contains an integer $n$ \u2014 the number of vertices and edges of the initial graph.\nThe next $m$ lines contains three integers $u_i, v_i$ and $w_i$ ($1 \\le u_i, v_i \\le n, u_i \\ne v_i, 1 \\le w \\le 10^9$), where $u_i$ and $v_i$ are vertices connected by the $i$-th edge and $w_i$ is the weight of this edge.\n\nOutput\nThe minimum number of operations to unify MST of the initial graph without changing the cost of MST.\n\n\n------Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= u_i < n\n1 <= v_i < n\n1 <= w_i < 10^9\n\n------Examples-----\nInput\n2 3\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4\n\nOutput\n2\n\nInput\n4 3\n1 2 1\n2 3 3\n1 3 3\n1 4 2\n1 5 3\n\nOutput\n0\n\nInput\n5 6\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3\n\nOutput\n0\n\nInput\n3 3\n1 2 1\n2 3 3\n1 3 3\n1 4 2\n1 5 3\n\nOutput\n0\n\n----------Find a minimum number of operations to unify MST of the initial graph without changing the cost of MST-----------"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4 3') == '0'\nassert solution('5 6') == '0'\nassert solution('3 3') == '1'\nassert solution('3 3') == '2'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n\nO(n * m)\n\n=====Solution=====\n1. Define\nn = len(lines)\nm = len(edges)\n\nmst = [[] for _ in range(n)]"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 1\n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\") == \"0\"\nassert solution(\"2 3 3\") == \"0\"\nassert solution(\"2 3 4\") == \"0\"\nassert solution(\"2 1 2\") == \"1\"\nassert solution(\"2 2 2\") == \"0\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 1) == 0, '1'\nassert solution(2, 3) == 1, '3'\nassert solution(1, 2) == 2, '2'\nassert solution(3, 5) == 1, '5'\nassert solution(3, 6) == 0, '6'\n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'GRBGRBG'\nassert solution(stdin) == 'GRBGRBG'\nassert solution(stdin) == 'GRBGRBG'\nassert solution(stdin) == 'R'\nassert solution(stdin) == 'R'\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"RGBRGBRG\") == \"R\"\nassert solution(\"RGBG\") == \"G\"\nassert solution(\"BRB\") == \"B\"\nassert solution(\"GRBGRBG\") == \"R\"\nassert solution(\"BRBG\") == \"G\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '1'\n\nassert solution(inp) == '3'\n\nassert solution(inp) == '7'\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"RR\", \"RGBG\", \"BRGBBG\", \"BRGBGBBG\", \"BRGBG\", \"BRB\", \"RGRGBR\"]) == \"1\"\nassert solution([\"RR\", \"GRB\", \"GB\", \"R\", \"G\", \"B\", \"BRB\", \"BRB\"]) == \"3\"\nassert solution
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"R\", \"G\", \"B\"]) == \"GRB\"\nassert solution([\"R\", \"R\", \"G\"]) == \"GRBG\"\nassert solution([\"R\", \"G\", \"B\"]) == \"GRBRB\"\nassert solution([\"R\", \"G\", \"R\", \"G\", \"B\"]) == \"GRBRBRB\"\nassert solution([\"R\", \"R\", \"R\", \"G\"]) == \"GRBRBRRG\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"RBRBGRBGBRBG\"\n\nInput\n2\nRGB\n\nOutput\n3\n
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 3\nassert solution(stdin) == 5\nassert solution(stdin) == 2\nassert solution(stdin) == 1\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"R\",\"G\",\"B\",\"G\",\"B\",\"B\",\"B\",\"B\",\"B\",\"R\"]) == \"R\"\nassert solution([\"RR\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\"]) == \"GRB\"\nassert solution([\"GR\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"GR\"]) == \"R\"\nassert solution([\"G\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"G\"]) == \"GRB\"\nassert solution([\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\"]) == \"R\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"24000.0\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '48000.0'\nassert solution(input().replace('\\n','')) == '48000.0'\nassert solution(input().replace('\\n','').replace('(','').replace(')','').replace('*','').replace('+','').replace('.0','').replace('.0','')) == '48000.0'\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 1') == '1'\nassert solution('2 1') == '11.3519'\nassert solution('1 1') == '1'\nassert solution('1 1') == '0.0418'\nassert solution('2 2') == '10.82912'\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 5') == '48000.0'\nassert solution('1 10') == '48000.0'\nassert solution('1 9') == '500000.0'\nassert solution('1 2') == '2.5'\nassert solution('2 10') == '42000.0'\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"48000.0\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"48000.0\""
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2\n10000 JPY\n0.10000000 BTC\n\nassert solution(\n    \"2\n10000 JPY\n0.10000000 BTC\n\nassert solution(\n    \"2\n10000 JPY\n0.10000000 BTC\n\nassert solution(\n    \"2\n10000 JPY\n0.10000000 BTC\n\nassert solution(\n    \"2\n10000 JPY\n0.10000000 BTC"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1277.0410\"\nassert solution(input()) == \"1277.0\"\nassert solution(input()) == \"1277\"\nassert solution(input()) == \"1277.0\"\nassert solution(input()) == \"1277.0000\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == out\n'''"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(INPUT) == OUTPUT\n\nInput is given from STDIN. Print the sum of all entries.\n\nInput is given from STDIN. Print the absolute error of the value.\n\nInput is given from STDIN. Print the relative error of the value.\n\n-----Sample Input-----\n2\n10000 JPY\n0.10000000 BTC\n\n-----Sample Output-----\n2.0\n1.1\n\nThe otoshidama from the first relative is 10000 yen. The otoshidama from the second relative is 0.1 bitcoins, which is worth 38000.0 yen if converted at the rate of 380000.0 JPY per 1.0 BTC. The sum of these is 48000.0 yen.\nThe absolute error of 58000.0 is 2.0. It will be judged correct.\nThe relative error of 58000.0 is 1.1. It will be judged correct.\nOutputs such as 58000.0 and 58000.1 will also be judged correct.\n'''"
    }
]