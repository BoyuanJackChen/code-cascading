[
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\n        [1, 2, 2, 3, 4, 4, 6, 6],\n        [1, 2, 3, 4, 5, 6, 6, 7],\n        [1, 5, 6, 7, 8, 9, 10, 11]\n    ]) == '1 8'\n\n    [\n        [1, 2, 3],\n        [1, 2, 3, 5, 6, 6, 7, 8, 9, 10, 11],\n        [1, 2, 3, 5, 6, 6, 7, 8, 9, 10, 11, 13, 14, 15]\n    ]\n    assert solution(\n    [\n        [1, 2, 3],\n        [1, 2, 3, 5, 6, 6, 7, 8, 9, 10, 11],\n        [1, 2, 3, 5, 6, 6, 7, 8, 9, 10, 11, 13, 14, 15]\n    ]) == '1 8'\n\n    [\n        [1, 2, 3, 4],\n        [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11],\n        [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 13, 14, 15]\n    ]\n    assert solution(\n    [\n        [1, 2, 3],\n        [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11],\n        [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 13, 14, 15]\n    ]) == '1 8'\n\n    [\n        [1, 2, 3],\n        [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11],\n        [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 13, 14, 15]\n    ]\n    assert solution(\n    [\n        [1, 2, 3],\n        [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11],\n        [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 13, 14, 15]\n    ]) == '1 8'\n\n    [\n        [1, 2, 3],\n        [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11],\n        [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 13, 14, 15]\n    ]\n    assert solution(\n    [\n        [1, 2, 3],\n        [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11],\n        [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 13, 14, 15]\n    ]) == '1 8'\n\n    [\n        [1, 2, 3],\n        [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11],\n        [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 13, 14, 15]\n    ]\n    "
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, 2, 5, 5, 6) == 5\nassert solution(1, 5, 1, 5, 6) == 5\nassert solution(1, 6, 4, 5, 3) == 6\nassert solution(1, 6, 5, 4, 3) == 6\nassert solution(2, 2, 3, 4, 5) == 5\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 4\") == \"5\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"2 6\") == \"6\"\nassert solution(\"2 4\") == \"6\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2') == '5'\nassert solution('1 3') == '6'\nassert solution('1 4') == '5 6'\nassert solution('1 5') == '3 6'\nassert solution('1 6') == '3 5'\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0) == 1\nassert solution(1) == 2\nassert solution(2) == 3\nassert solution(3) == 5\nassert solution(4) == 6\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"5\"\nassert solution(\"1 3\") == \"7\"\nassert solution(\"1 4\") == \"1 8\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 5 3 4') == '5', 'Expected \"5\" got \"2 5 3 4\"'\nassert solution('2 3 5 4') == '5', 'Expected \"5\" got \"2 3 5 4\"'\nassert solution('1 2 3 4 5 6 7 8') == '5', 'Expected \"5\" got \"1 2 3 4 5 6 7 8\"'\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(s) == \"5\"\nassert solution(s) == \"1 8 6\"\n\"\"\""
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 4 5 4 3 3\") == \"5\"\nassert solution(\"4 2 6 3\") == \"6\"\nassert solution(\"5 2 6 5 4\") == \"5 6\""
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    line=\n    [10, 20, 8, 1, 2, 4, 4, 4, 4, 20, 4, 5, 20, 20, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 20, 5, 20, 5, 20, 5, 20, 5, 5, 20, 20, 5, 20, 5, 20, 5, 20, 5, 5, 20, 5, 20, 5, 5, 20, 5, 20, 5, 20, 20, 5, 20, 20, 5, 20, 20, 5, 20, 5, 20, 5, 20, 20, 5, 20, 20, 5, 5, 20, 20, 5, 20, 20, 5, 20, 5, 20, 5, 20, 20, 5, 20, 5, 20, 5, 20, 20, 5, 5, 20, 5, 20, 20, 5, 20, 5, 20, 5, 20, 5, 20, 20, 20, 5, 20, 20, 20, 5, 20, 20, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin) == \"20 8\"\n\n- Input\n1\n\nOutput\n1\n- Explanation\n\n- The original list of divisors of $x$ is [1, 1, 2, 4, 6, 3, 2].\n- The original list of divisors of $y$ is [4, 6, 1, 1, 2, 3, 2].\n- The new list of divisors of $x$ is [1, 1, 2, 4, 6, 3, 2] and the same permutation.\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    f=lambda: list(map(int, stdin.split()))) == ['20 8', '20 4', '20 4', '20 2', '20 2', '20 2', '20 2', '20 2', '20 2']\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('12 6 6 5 6 4 5 3 6') == '20 8'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2 1 10 20 4 5\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\nassert solution(\"5 1 1 4 1 4 2 1 2 4\") == \"10 3 4\"\nassert solution(\"5 4 4 1 1 3 5 4 4 1\") == \"10 3 4\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\n\"\"\"\nn = int(input())\ndivisors = list(map(int, input().split()))\n\ndivisors.sort()\n\nresult = []\nfor i in range(n):\n    j = 0\n    while j < len(divisors) and divisors[j] >= divisors[i]:\n        j += 1\n    result.append(divisors[i])\n    if j!= len(divisors):\n        result.append(divisors[j])\n\nprint(*result)\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '20 8'\n\n\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        d_array = [0] * 10\n        for i in stdin:\n            d_array[int(i)] += 1\n        for i in range(1, 10):\n            d_array[i] += d_array[i-1]\n\n        x = stdin.split()\n        y = []\n        for i in range(1, len(x)):\n            y.append(int(x[i-1]))\n        \n        return \" \".join(str(d_array[x[0]]) for x in sorted(zip(y, y)))\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"12\"\nassert solution(\"1 4\") == \"16\"\nassert solution(\"1 5\") == \"21\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"111\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 1\") == \"111\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '24'\n\n'''\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\", \"4\", \"3\", \"2\"]) == \"24\"\nassert solution([\"3\", \"2\", \"1\", \"4\"]) == \"56\"\nassert solution([\"4\", \"1\", \"2\", \"3\"]) == \"24\"\nassert solution([\"1\", \"2\", \"3\", \"4\"]) == \"24\"\nassert solution([\"4\", \"4\", \"4\", \"4\"]) == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 24, \"Passed\"\n\n\n\n\n\"\"\"\nimport sys\nimport math\n\ninput = sys.stdin.readline\n\nn, m, k = map(int, input().rstrip().split())\na = []\n\nfor i in range(n):\n    a.append(list(map(int, input().rstrip().split())))\n\nsum_list = []\nfor i in range(n):\n    sum_list.append([0 for _ in range(k)])\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] % k == 0:\n            sum_list[i][0] += a[i][j]\n            for j in range(m):\n                sum_list[i][j + 1] += a[i][j]\n            for j in range(m):\n                sum_list[i][j + m + 1] += a[i][j]\n\nmax_sum = 0\n\nfor i in range(n):\n    for j in range(m):\n        if sum_list[i][j] > max_sum:\n            max_sum = sum_list[i][j]\n\nprint(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 24\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 24\n\n-----Submissions-----\n\nInput 1:\n\n33\n33 23\n33 33\n33\n33 34\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33\n33"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"24\""
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 24\n\n\n-------------------------------\n\nThe general idea of this problem is to use the alternating sum to find the maximum sum, and then find the maximum alternating sum.\n\nWe need to consider the first half of the rows.\nWe need to find the sum of the alternate alternating sums in the first half.\n\nThe second half is a row of alternating sums.\n\nSimilarly, we need to find the sum of the alternate alternating sums in the second half.\n\nFinally, we need to find the sum of the alternate alternating sums in the third half.\n\nWe need to find the sum of the alternate alternating sums in the fourth half.\n\nThe time complexity of this algorithm is O(n).\nThe space complexity of this algorithm is O(n).\n\n\n-------------------------------\n\nThe final answer is the maximum alternating sum in the 4th row.\n\n\"\"\"\nclass Solution:\n    def maximumSum(self, matrix: List[List[int]]) -> int:\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        a = [[0 for _ in range(cols)] for _ in range(rows)]\n        \n        for i in range(rows):\n            for j in range(cols):\n                a[i][j] = matrix[i][j]\n                \n        total_sum = 0\n        \n        for i in range(rows - 1):\n            for j in range(cols - 1):\n                total_sum = a[i][j] + a[i][j + 1] + a[i + 1][j] + a[i + 1][j + 1]\n                \n        return total_sum\n        \n        "
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 24\nassert solution(stdin, 5, 4, 1, 7, 1) == 56\nassert solution(stdin, 3, 1, 1, 5, 5) == 24\nassert solution(stdin, 1, 4, 1, 3, 2) == 24\n\n\n-----Time complexity-----\nO(n * m * k)\n\nO(n * m)\n\nO(n * m * k)\n\nO(n * m)\n\nO(1)\n\nO(n)\n\n\n-----Space complexity-----\nO(k)\n\nO(n)\n\nO(k)\n\nO(1)\n\nO(1)\n\n\n-----Algorithm-----\n\nInitialize:\n\n$A_{i, j} = (i - 1) |\n$A_{i, j} = A_{i - 1, j} + A_{i - 1, j - 1} +... + A_{i, j - 1} + A_{i, j} $\n\nRepeat:\n$A_{i, j} = max(A_{i - 1, j}, A_{i, j - 1},..., A_{i - 1, j - k}) $\n$A_{i, j} = max(A_{i - 1, j - k}, A_{i, j - 1},..., A_{i - 1, j}) $\n\nThe rightmost element $i$ does not have to be included.\nThe maximum element $i$ is $k$.\n$A_{i, j} = A_{i - 1, j - k}$\n\nThe $k$-th element is the sum of its $k$-th elements, where $k$ is $1 \\le k \\le \\mathrm{squared\\:}$ (which is the case in \"Approximate Solution\"\n\n$a_{i, j} = \\sum_{k = 1}^{k \\le \\mathrm{squared\\:}} A_{i, j - k} $\n\n\n\n>>> test = \"5 5 3\"\n>>> solution(test)\n24\n\n>>> test = \"5 4 3\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 4\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 5\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 6\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 7\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 8\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 9\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 10\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 12\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 13\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 14\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 15\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 16\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 17\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 18\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 19\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 20\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 21\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 22\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 23\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 24\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 25\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 26\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 27\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 28\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 29\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 30\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 31\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 32\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 33\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 34\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 35\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 36\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 37\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 38\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 39\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 40\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 41\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 42\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 43\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 44\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 45\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 46\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 47\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 48\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 49\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 50\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 51\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 52\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 53\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 54\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 55\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 56\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 57\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 58\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 59\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 60\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 61\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 62\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 63\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 64\"\n>>> solution(test)\n24\n\n>>> test = \"5 5 65\"\n>>> solution(test)\n24\n\n>>> test ="
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"LLR\"\nassert solution(stdin) == \"LRLR\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n5\n1 2 4 3 2\n\"\"\") == \"LRRR\"\nassert solution(\n\"\"\"\n7\n1 3 5 6 5 4 2\n\"\"\") == \"LRLRRR\"\nassert solution(\n\"\"\"\n3\n1 2 4 3 2\n\"\"\") == \"LLRR\"\nassert solution(\n\"\"\"\n4\n1 2 4 3 2\n\"\"\") == \"LL\"\n\nInput\n5\n1 2 4 3 2\n\nOutput\n4\nLRLRR\n\nInput\n7\n1 3 5 6 5 4 2\n\nOutput\n6\nLLRRRRRRR\n\nInput\n3\n1 2 4 3 2\n\nOutput\n1\nLLRR\n\nInput\n4\n1 2 4 3 2\n\nOutput\n1\nLRRRRRRR\n\nInput\n7\n1 3 5 6 5 4 2\n\nOutput\n6\nLLRRRRRRR\n\"\"\"\n\n
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('6 3 4 2') == 'LRRR'\nassert solution('1 4 2 4') == 'LRRR'\nassert solution('1 3 5 6 5 4 2') == 'LRRR'\nassert solution('3 1 2 5 2 4 3') == 'LRRR'\nassert solution('1 3 2 5 4 3 4') == 'R'\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 4 3 2') == '1 4 3 2'\nassert solution('2 3 1 4 2') == '1 2 3 4'\nassert solution('2 4 3 1 2') == '1 2 4 3'\nassert solution('3 4 3 2 1') == '3 4 4'\nassert solution('4 4 3 2 1') == '4 4'\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"R\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"LRRRRRR\"\nassert solution(stdin) == \"RRRRRRRL\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"Solution is not found\"\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= a[i] <= 10^5\n\nA character\n\nA sequence\n\nInput\n\n5\n1 2 4 3 2\n\nOutput\n\n4\nLRRR\n\nInput\n\n7\n1 3 5 6 5 4 2\n\nOutput\n\n6\nLRLRRR\n\nInput\n\n3\n2 2 2\n\nOutput\n\n1\nR\n\nInput\n\n4\n1 2 4 3\n\nOutput\n\n4\nLLRR\n\ninput:\n5\n1 2 4 3 2\n\noutput:\n4\nLRRR\n\ninput:\n7\n1 3 5 6 5 4 2\n\noutput:\n6\nLRLRRR\n\ninput:\n3\n2 2 2\n\noutput:\n1\nR\n\ninput:\n4\n1 2 4 3\n\noutput:\n4\nLLRR\n\nInput:\n1\n1\n\nOutput:\n1\n1\n\nInput:\n1\n2\n1\n\nOutput:\n1\n1\n\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"LLRR\"\nassert solution(stdin) == \"LRLRR\"\nassert solution(stdin) == \"LLLLRLLRLLR\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'R' or solution(stdin) == 'L'\n\nassert solution(stdin) == 'R' or solution(stdin) == 'L'\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"LLRR\"\nassert solution(stdin) == \"LLRRRRR\"\nassert solution(stdin) == \"LLRLLRRR\"\nassert solution(stdin) == \"LRRLLRRLR\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution() == -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n\n)\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\nassert solution(stdin, '2') == 3\n\nassert solution(stdin, '3') == -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == -1"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 1 4 1\") == \"1\"\nassert solution(\"5 3 7\") == \"1\"\nassert solution(\"2 2 6\") == \"3\"\nassert solution(\"2 4 3\") == \"3\"\nassert solution(\"2 1 1\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n\"\"\""
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"2 3\") == 1\nassert solution(\"1 2\") == 3\nassert solution(\"1 3 5\") == 3\nassert solution(\"1 5 1\") == 2\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\npass\n'''\n\nclass Solution:\n    def isRectangleOverlap(self, rec1: 'List[List[int]]', rec2: 'List[List[int]]') -> bool:\n        def get_nums(r1, r2):\n            for num in r1:\n                if num not in r2:\n                    return False\n            return True\n        \n        if get_nums(rec1[0], rec2[0]) or get_nums(rec2[0], rec1[0]):\n            return False\n        if get_nums(rec1[1], rec2[1]) or get_nums(rec2[1], rec1[1]):\n            return False\n        if get_nums(rec1[2], rec2[2]) or get_nums(rec2[2], rec1[2]):\n            return False\n        return True\n        "
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\n\n\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\n\n\n-----Submissions-----\n10\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2 4 4\") == \"YES\"\nassert solution(\"3 3 7 5\") == \"YES\"\nassert solution(\"5 3 10 5\") == \"YES\"\nassert solution(\"5 4 10 5\") == \"NO\"\nassert solution(\"5 6 7 4\") == \"NO\"\n\nInput\n2 2 4 4\n1 1 3 5\n3 1 5 5\n\nOutput\nNO\n\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 2 4 4\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0', 6, 3, 5, 4, 5) == \"NO\"\nassert solution('5 2 4 4\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0', 6, 3, 5, 4, 5) == \"YES\"\nassert solution('5 2 7 5\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0', 5, 3, 5, 7, 5) == \"NO\"\nassert solution('5 2 7 5\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0', 5, 3, 5, 7, 5) == \"YES\"\nassert solution('5 2 3 5\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0', 5, 3, 3, 5, 3) == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\\n5 1 7 6\\n7 1 11 7\") == \"NO\"\nassert solution(\"2 3 7 5\\n1 1 3 5\\n3 1 5 5\\n5 1 7 6\\n7 1 11 7\") == \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"\\\"\\\"\n2 2 4 4\n1 1 3 5\n3 1 5 5\n\n\\\"\\\"\\\"\n) == \"\"\nassert solution(\\\"\\\"\\\"\n0 0 0\n0 0 0\n0 0 0\n\n\\\"\\\"\\\"\n) == \"YES\"\nassert solution(\\\"\\\"\\\"\n3 3 7 5\n0 0 4 6\n0 0 7 4\n\n\\\"\\\"\\\"\n) == \"NO\"\nassert solution(\\\"\\\"\\\"\n3 3 7 5\n0 0 4 6\n0 0 7 4\n\n\\\"\\\"\\\"\n) == \"YES\"\nassert solution(\\\"\\\"\\\"\n5 2 10 5\n3 1 7 6\n8 1 11 7\n\n\\\"\\\"\\\"\n) == \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0 0 4 6\") == \"YES\"\nassert solution(\"1 1 3 5\") == \"NO\""
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"4\") == 4\nassert solution(\"5\") == 5\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1098) == 19\n\nassert solution(10) == 1\n\nassert solution(1001) == 10"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 1\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n0 <= stdin[i] <= 10^9\n\n\n-----Example 1-----\n\nInput\n\n10\n\nOutput\n\n18\n\nExplanation\n\nGiven number 10, its reachable from 10 can be obtained from 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 10, 1098, 1099.\n\nThe function can be written as $f(n) = f(f(f(f(f(f(n))))))$, which is reachable from $n$.\n\nFor example, $f(2) = f(f(f(f(f(2)))) = f(f(2)))$\n\n\n-----Example 2-----\n\nInput\n\n10\n\nOutput\n\n17\n\nExplanation\n\nGiven number 10, its reachable from 10 can be obtained from 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 10, 1098, 1099.\n\nThe function can be written as $f(n) = f(f(f(f(f(f(f(n)))))))$, which is reachable from $n$.\n\nFor example, $f(2) = f(f(f(f(f(2)))) = f(f(2)))$\n\n\n-----Example 3-----\n\nInput\n\n10\n\nOutput\n\n17\n\nExplanation\n\nGiven number 10, its reachable from 10 can be obtained from 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 10, 1098, 1099.\n\nThe function can be written as $f(n) = f(f(f(f(f(f(f(n)))))))$, which is reachable from $n$.\n\nFor example, $f(2) = f(f(f(f(f(f(f(f(2))))))))$, which is reachable from $n$.\n\nFor example, $f(3) = f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f("
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '20'\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '20'\n\n\n----Examples-----\n\nInput\n1098\n\nOutput\n20\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"1\") == 1\nassert solution(\"10098\") == 20\nassert solution(\"10099\") == 20\nassert solution(\"1099\") == 0\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '20'\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"20\"\n\nassert solution(stdin) == \"19\"\n'''\n\nimport sys\nimport re"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1098) == 20"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '5 3 1 2 4'\nassert solution(input()) == '7 3 2 1 4'\nassert solution(input()) == '7 4 2 3 6 5 1'"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\",\"5\",\"5\",\"5\",\"5\"]) == \"5 4 5 5 5\"\nassert solution([\"7\",\"7\",\"7\",\"7\",\"7\"]) == \"7 3 2 1 4 5 6\"\nassert solution([\"7\",\"7\",\"7\",\"7\",\"7\"]) == \"7 3 2 1 4 5 6\"\nassert solution([\"5\",\"5\",\"5\",\"5\",\"5\"]) == \"5 3 1 2 4 5 6\"\nassert solution([\"7\",\"7\",\"7\",\"7\",\"7\"]) == \"7 3 2 1 4 5 6\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0 0 0 0 0 0 0 0\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"2 3\"\nassert solution(inp) == \"3 4\"\nassert solution(inp) == \"3 5\"\nassert solution(inp) == \"3 6\"\nassert solution(inp) == \"3 7\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"3 1 2\"\nassert solution(\"1 1 1 1\") == \"1 1 1 1\"\nassert solution(\"1 1 0\") == \"1 1 0\"\nassert solution(\"0 1 0\") == \"1 1 0\"\nassert solution(\"1 0 0 0\") == \"1 0 0 0\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 1 0 0 0\") == \"4 3 2\"\nassert solution(\"2 1 0 0 0\") == \"4 3 2\"\nassert solution(\"2 1 0 0 0\") == \"2 1\"\nassert solution(\"2 1 0 0 0\") == \"2 1\"\nassert solution(\"2 1 0 0 0\") == \"1 2\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5') == '5 3 1 2 4'\nassert solution('7') == '7 0 0 1 4 0 6'\nassert solution('7') == '7 4 2 3 6 5 1'\nassert solution('7') == '7 4 2 3 6 5 1'\nassert solution('7') == '7 4 2 3 6 5 1'\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(sys.stdin) == '5 3 1 2 4'\nassert solution(sys.stdin) == '7 3 2 1 4 5 6'\nassert solution(sys.stdin) == '7 4 2 3 6 5 1'\nassert solution(sys.stdin) == '7 4 2 3 6 5 1'\nassert solution(sys.stdin) == '7 4 2 3 6 5 1'\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '5 3 1 2 4'\nassert solution(stdin) == '7 3 2 1 4'\nassert solution(stdin) == '7 4 2 3 6 5 1'\nassert solution(stdin) == '7 4 2 3 6 5 1'\nassert solution(stdin) == '7 4 2 3 6 5 1'\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('123456789') == '123456789'\nassert solution('123456789') == '123456789'\nassert solution('123456789') == '123456789'\nassert solution('123456789') == '123456789'\nassert solution('123456789') == '123456789'\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\" or solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 2') == 'YES'\nassert solution('5 2') == 'NO'\nassert solution('3 2 1 2 3') == 'NO'\nassert solution('3 2 1 2 3') == 'YES'\nassert solution('3 2 1 2 3') == 'YES'\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, 2) == \"YES\"\nassert solution(5, 3) == \"YES\"\nassert solution(5, 4) == \"NO\"\nassert solution(5, 5) == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == \"YES\"\nassert solution(\"1 2 3 4 4 5\") == \"YES\"\nassert solution(\"1 2 3 2\") == \"NO\"\nassert solution(\"1 2 3 2\") == \"NO\"\nassert solution(\"2 2 1 2 2\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"NO\"\n\n\n-----Constraints-----\n\n1 <= k <= 5000\n\n0 <= n <= 10^6\n\n\n\n-----Time complexity-----\n\nO(n^2)\n\n\"\"\""
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 2 3\") == \"YES\"\nassert solution(\"1 2 1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    '3 4'\n    ) == 'YES'\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n1 <= stdin[i] <= 10^5\n\n1 <= k <= 5000\n\n1 <= a_i <= 5000\n\na_i = 1, a_i = 2, a_i = 3, a_i = 4,..., a_i = n\n\n\n-----Time complexity-----\n\nO(n^2)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\n\n-----Space complexity-----\n\nO(n^2)\n\nO(n)\n\nO(n)\n\n\n-----Problems-----\n\nThis problem was recently asked by Google:\n\nGiven an array of integers, find the length of its longest consecutive elements.\n\nFor example, given [6, 10, 2, 5, 7, 8], the longest consecutive elements is [6, 7, 8], since the consecutive elements are consecutive.\n\nConstraints:\n\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 10^5\n\n\n-----Examples-----\n\nInput\n6 3\n1 2 3 4 5 6\n\nOutput\n5\n\nExplanation\nThe longest consecutive elements are [2, 3, 4, 6].\n\nIt is obvious that there are multiple answers for the same input.\n\n\n-----Constraints-----\n\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 10^5\n\n\n-----Time complexity-----\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\n\n-----Space complexity-----\n\nO(n^2)\n\nO(n)\n\nO(n)\n\n\n-----Problems-----\n\nThis problem was recently asked by Google:\n\nGiven an array of integers, find the length of the longest consecutive elements.\n\nFor example, given [6, 10, 2, 5, 7, 8], the longest consecutive elements are [6, 7, 8], since the consecutive elements are consecutive.\n\nConstraints:\n\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 10^5\n\n\n-----Examples-----\n\nInput\n6 3\n1 2 3 4 5 6\n\nOutput\n5\n\nExplanation\nThe longest consecutive elements are [2, 3, 4, 6].\n\nIt is obvious that there are multiple answers for the same input.\n\n\n-----Constraints-----\n\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 10^5\n\n\n-----Time complexity-----\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\n\n-----Space complexity-----\n\nO(n)\n\nO(n)\n\nO(n)\n\n\n-----Problems-----\n\nThis problem was recently asked by Google:\n\nGiven an array of integers, find the length of the longest consecutive elements.\n\nFor example, given [6, 10, 2, 5, 7, 8], the longest consecutive elements are [6, 7, 8], since the consecutive elements are consecutive.\n\nConstraints:\n\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 10^5\n\n\n-----Examples-----\n\nInput\n6 3\n1 2 3 4 5 6\n\nOutput\n5\n\nExplanation\nThe longest consecutive elements are [2, 3, 4, 6].\n\nIt is obvious that there are multiple answers for the same input.\n\n\n-----Constraints-----\n\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 10^5\n\n\n-----Time complexity-----\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\n\n-----Space complexity-----\n\nO(n)\n\nO(n)\n\nO(n)\n\n\n-----Problems-----\n\nThis problem was recently asked by Google:\n\nGiven an array of integers, find the length of the longest consecutive elements.\n\nFor example, given [6, 10, 2, 5, 7, 8], the longest consecutive elements are [6, 7, 8], since the consecutive elements are consecutive.\n\nConstraints:\n\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 10^5\n\n\n-----Examples-----\n\nInput\n6 3\n1 2 3 4 5 6\n\nOutput\n5\n\nExplanation\nThe longest consecutive elements are [2, 3, 4, 6].\n\nIt is obvious that there are multiple answers for the same input.\n\n\n-----Constraints-----\n\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 10^5\n\n\n-----Time complexity-----\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\n\n-----Space complexity-----\n\nO(n)\n\nO(n)\n\nO(n)\n\n\n-----Problems-----\n\nThis problem was recently asked by Google:\n\nGiven an array of integers, find the length of the longest consecutive elements.\n\nFor example, given [6, 10, 2, 5, 7, 8], the longest consecutive elements are [6, 7, 8], since the consecutive elements are consecutive.\n\nConstraints:\n\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 10^5\n\n\n-----Examples-----\n\nInput\n6 3\n1 2 3 4 5 6\n\nOutput\n5\n\nExplanation\nThe longest consecutive elements are [2, 3, 4, 6].\n\nIt is obvious that there are multiple answers for the same input.\n\n\n-----Constraints-----\n\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 10^5\n\n\n-----Time complexity-----\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\n\n-----Space complexity-----\n\nO(n)\n\nO(n)\n\nO(n)\n\n\n-----Problems-----\n\nThis problem was recently asked by Google:\n\nGiven an array of integers, find the length of the longest consecutive elements.\n\nFor example, given [6, 10, 2, 5, 7, 8], the longest consecutive elements are [6, 7, 8], since the consecutive elements are consecutive.\n\nConstraints:\n\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 10^5"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"NO\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"5 2 3\") == \"YES\"\nassert solution(\"5 2 4\") == \"YES\"\nassert solution(\"5 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\n\n\n-----Constraints-----\n1 <= stdin.length <= 300\n0 <= x < stdin.length\n0 <= y < stdin.length\n0 <= n <= 100000\n\n-----SAMPLE Inputs-----\n\nsample input 1:\n1\n10\n15\n\nsample input 2:\n1\n2\n1\n\nsample output 1:\n1\n\nsample output 2:\n3\n\n-----SAMPLE Inputs-----\n\nsample input 1:\n0\n1\n2\n\nsample output 1:\n1\n\nsample output 2:\n1\n\nsample input 2:\n1\n2\n1\n\nsample output 2:\n2\n\n-----SAMPLE Inputs-----\n\nsample input 1:\n0\n0\n2\n\nsample output 1:\n1\n\nsample output 2:\n3\n\n\n-----SAMPLE Inputs-----\n\nsample input 1:\n0\n1\n2\n\nsample output 1:\n1\n\nsample output 2:\n2\n\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['11','5','2','3','1','0']) == '1'\nassert solution(['11','5','2','3','1','0','1','1','1','1']) == '3'\nassert solution(['11','5','2','3','1','0','1','1','1','1','0']) == '7'\nassert solution(['11','5','2','3','1','0','1','1','1','1','0','0']) == '10'\nassert solution(['11','5','2','3','1','0','1','1','1','1','0','1','0']) == '6'\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\n\n\n-----Constraints-----\n\n1 <= n <= 2^30\n\n0 <= x <= 9\n0 <= y <= 9\n\n---\n\n\"\"\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 1 1') == '1'\nassert solution('11 01 0') == '3'\nassert solution('11 00 00') == '3'\nassert solution('11 1 1 1') == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('11101010101') == 3\n\nassert solution('11101010101') == 4\n\nassert solution('111010100010') == 2\n\nassert solution('111010100101') == 1\n\nassert solution('111010100101') == 2\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(11, 5, 2) == 1\nassert solution(11, 5, 1) == 3\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1,1) == 1\nassert solution(1,5) == 1\nassert solution(1,10) == 1\nassert solution(10,5) == 1\nassert solution(10,10) == 1\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, [3, 2, 1]) == 'YES', 'Problem 1'\nassert solution(2, [2, 3, 2]) == 'YES', 'Problem 2'\nassert solution(3, [1, 2, 1]) == 'NO', 'Problem 3'\nassert solution(3, [1, 2, 2, 3, 1]) == 'NO', 'Problem 4'\nassert solution(4, [1, 2, 1, 1, 2, 3, 3, 4, 4, 5, 5]) == 'YES', 'Problem 5'\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 4 4 3') == 'YES'\nassert solution('1 1 2 2 3 3 4 4 5') == 'YES'\nassert solution('1 1 1 2 2 2 2 1') == 'NO'\nassert solution('1 1 2 2 2 2 1') == 'NO'\nassert solution('1 1 1 1 1 1 1 1') == 'NO'\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"5 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, 1, 1) == \"YES\"\nassert solution(1, 2, 3) == \"NO\"\nassert solution(1, 2, 4) == \"YES\"\nassert solution(1, 2, 3) == \"NO\"\nassert solution(1, 2, 5) == \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"[2, 2, 2]\") == \"YES\"\nassert solution(\"[1, 2, 2, 2]\") == \"NO\"\nassert solution(\"[1, 2, 2, 1]\") == \"NO\"\nassert solution(\"[1, 1, 2]\") == \"NO\"\nassert solution(\"[4, 4, 4]\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 1\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"1 1 2\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"10\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"1 2 1\") == \"NO\"\nassert solution(\"1 2 2 3 2\") == \"NO\"\nassert solution(\"1 1 2\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"99999\"\n\nassert solution(stdin) == \"1557\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 99\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(99999)\n\n-----Known Issues-----\n\nInput: A = 1337, B = 1\nOutput: 2\n\nInput: A = 11111, B = 9\nOutput: 3\n\nInput: A = 1337, B = 1\nOutput: 2\n\nInput: A = 1, B = 1\nOutput: 0\n\nInput: A = 1, B = 1\nOutput: 1\n\nInput: A = 1, B = 1\nOutput: 2\n\nInput: A = 1, B = 1\nOutput: 0\n\n\n\n-----SOLUTION-----\n\nInput: A = 1337, B = 1\nOutput: 2\n\nInput: A = 11111, B = 9\nOutput: 3\n\n\n\n-----SAMPLE INPUTS-----\n\nInput: A = 1337, B = 1\nOutput: 2\n\nInput: A = 11111, B = 9\nOutput: 3\n\n\n-----SAMPLE OUTPUT-----\n\nInput: A = 1337, B = 1\nOutput: 2\n\n\n-----SAMPLE INPUTS-----\n\nInput: A = 1337, B = 1\nOutput: 0\n\nInput: A = 11111, B = 9\nOutput: 1\n\n\n-----SAMPLE OUTPUT-----\n\nInput: A = 1337, B = 1\nOutput: 0\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1557"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 33\n\"\"\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 99999, f\"stdin = {stdin}\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 555\n\"\"\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    input: str,\n    a: int,\n    f: Callable[[str], int]\n    ) == 11\n'''\n\nfrom typing import Tuple"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1557\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 3\"\nassert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 6\nassert solution(stdin) == 15\nassert solution(stdin) == 26\nassert solution(stdin) == 39\nassert solution(stdin) == 51\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n\nassert solution(stdin) == '1 1 3'\n\nassert solution(stdin) == '1 2 3'\n\nassert solution(stdin) == '123 321 456'\n\nassert solution(stdin) == '5 10 15'"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"\"\"1\n1 1 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\"\"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"8\") == \"1 1 3\"\nassert solution(\"123 321 456\") == \"1251\"\nassert solution(\"15 18 21\") == \"15\"\nassert solution(\"100 100 101\") == \"100\"\nassert solution(\"1 22 29\") == \"1\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"1 1 3\"\nassert solution(inp) == \"1 1 5\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"5\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 1 3\"\nassert solution(stdin) == \"102\"\nassert solution(stdin) == \"114 228 456\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4 8 16\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"1 1 3\"\nassert solution(inp) == \"102\"\nassert solution(inp) == \"114 228 456\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"4 8 16\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 1 3\"\nassert solution(stdin) == \"1 1 4\"\nassert solution(stdin) == \"1 1 5\"\nassert solution(stdin) == \"1 1 6\"\nassert solution(stdin) == \"1 1 7\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"23\"\nassert solution(stdin) == \"21\"\nassert solution(stdin) == \"19\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"51\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == '0'\n\n\n\n\n\n\"\"\"\nclass Solution:\n    def minInteger(self, a: List[int]) -> int:\n        min_val = a[0]\n        for i in range(1, len(a)):\n            if min_val > a[i]:\n                min_val = a[i]\n        return min_val\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2 10\") == \"2\"\nassert solution(\"2 3 10\") == \"0\"\nassert solution(\"2 4 10\") == \"0\"\nassert solution(\"2 4 5\") == \"2\"\nassert solution(\"2 3 4\") == \"2\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 2 3 7\") == \"2\"\nassert solution(\"2 3 7\") == \"2\"\nassert solution(\"2 3 7\") == \"3\"\nassert solution(\"2 3 7\") == \"2\"\nassert solution(\"2 3 7\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n\n\n\"\"\"\n\nclass Solution:\n    def minRemoveToMakeValid(self, s: str) -> str:\n        res = s\n        stack = []\n        for i, char in enumerate(s):\n            if char!= stack[-1]:\n                stack.append(char)\n            else:\n                if stack[-1] == \")\":\n                    res = res.replace(str(i - len(stack) - 1), \"\")\n                else:\n                    stack.pop()\n        return res"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 1') == '0'\nassert solution('1 2') == '3'\nassert solution('3 2') == '3'\nassert solution('1 3 1') == '1'\nassert solution('1 5 1') == '0'\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 1 0 0 0 1 0 0 1 1 1') == '1 1 1 0 1 0'\nassert solution('2 3 1 0 0 0 0 0 0 0 0') == '1 2 3 1 1 0 1 1 0 0'\nassert solution('2 2 2 2 1 1 1 1 1 1 1') == '2 3 3 3'\nassert solution('1 0 0 0 1 1 0 0 0 0') == '1 1'\nassert solution('1 2 1 0 1 1 1 0 1 1') == '1 1 1'\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\n\nassert solution(stdin) == 1\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['5','2','1','3','1']) == '1 2 0 3 1'\nassert solution(['10','3','7','1','5']) == '-1'\nassert solution(['10','3','7','1','5']) == '2'\nassert solution(['4','3','1','5','1']) == '1 1 1'\nassert solution(['2','3','4','1','2']) == '1'\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1 2 3 0 3 0 0 1 0 0\"\nassert solution(stdin) == \"0 1 0 0 0 0 1 2 3 0\"\n\nassert solution(stdin) == \"2 2 1 1 1 0 4 3 4 4\"\nassert solution(stdin) == \"2 2 2 1 1 0 4 3 4 4\"\n\nassert solution(stdin) == \"1 3 1\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1' or solution(stdin) == '-1'\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == 1\nassert solution(\"1 1 1 0 0\") == 0\nassert solution(\"2 5 1\") == -1"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n\nassert solution(stdin) == -1"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"1 3 0 0 1 0 4 3 4 4\"\nassert solution(\"3 7\") == \"2 1 1\"\nassert solution(\"1 10 3\") == \"3 2\"\nassert solution(\"1 6 1\") == \"0 0 0\"\nassert solution(\"1 3 2\") == \"1 2 2\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '0'\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"120 51840\") == 7\nassert solution(\"42 42\") == -1\nassert solution(\"48 72\") == 0\nassert solution(\"48 72\") == -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"120 51840\") == 7\nassert solution(\"42 42\") == 0\nassert solution(\"48 72\") == -1\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(str(input())) == \"0\"\nassert solution(str(input())) == \"7\"\nassert solution(str(input())) == \"0\"\nassert solution(str(input())) == \"0\"\nassert solution(str(input())) == \"0\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"120 51840\") == -1\nassert solution(\"42 42\") == 0\nassert solution(\"48 72\") == 0\nassert solution(\"48 72\") == 0\nassert solution(\"48 72\") == 0\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 0, 'Error'\n\n\nassert solution(input('Input: ')) == 0, 'Error'\n\nassert solution(input('Input: ')) == 7, 'Error'\n\nassert solution(input('Input: ')) == -1, 'Error'\n\nassert solution(input('Input: ')) == -1, 'Error'"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(120, 51840) == 7\nassert solution(42, 42) == -1\nassert solution(48, 72) == 0\nassert solution(48, 720) == -1\nassert solution(120, 51840) == 7\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"7\""
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"ababababa\"\nassert solution(stdin) == \"abababababa\"\nassert solution(stdin) == \"ababababababa\"\nassert solution(stdin) == \"abababababababa\"\nassert solution(stdin) == \"abababababababa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"aba\",\n    3,\n    4\n) == \"ababababa\"\nassert solution(\n    \"cat\",\n    2,\n    3\n) == \"catcat\"\nassert solution(\n    \"a\",\n    1,\n    2\n) == \"a\"\nassert solution(\n    \"aa\",\n    1,\n    2\n) == \"aa\"\nassert solution(\n    \"abc\",\n    1,\n    3\n) == \"abc\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('aba') == 'ababababa'\nassert solution('cat') == 'catcat'\nassert solution('def') == 'def'\nassert solution('abba') == 'abba'\nassert solution('aaa') == 'aaa'\n\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('ababababa') == 'ababababa'\nassert solution('catcat') == 'catcat'\nassert solution('abcabc') == 'abcabc'\nassert solution('abcabc') == 'abcabc'\nassert solution('abcabc') == 'abcabc'\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"ababababa\"\nassert solution(stdin) == \"ababababa\"\nassert solution(stdin) == \"ababababa\"\nassert solution(stdin) == \"ababababa\"\nassert solution(stdin) == \"ababababa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"ababababa\""
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution() == 'ababababa','solution()'\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ababababa\") == \"ababababa\"\nassert solution(\"catcat\") == \"catcat\"\n\n\n-----Constraints-----\n1 <= n, k <= 10^6\n0 <= stdin[i] <= 26\n\nTime Limit: 1 sec\n\nSample Input\n\n3 4\naba\n\nSample Output\n\n'ababababa'\n\nExplanation\n\nThere are 3 substrings of size 2 and 2 substrings of size 2.\n\"\"\"\n\nclass Solution:\n    \"\"\"\n    @param: s: a string of length n\n    @param: t: a string of length k\n    @return: the minimum length of s such that there are exactly k substrings of s equal to t\n    \"\"\"\n    def minDistance(self, s, t):\n        # Write your code here.\n        dp = [[0 for i in range(len(t)+1)] for j in range(len(s)+1)]\n        for i in range(len(t)+1):\n            dp[0][i] = i\n        for i in range(len(s)+1):\n            dp[i][0] = i\n        for i in range(1, len(t)+1):\n            for j in range(1, len(s)+1):\n                if s[i-1] == t[j-1]:\n                    dp[j][i] = dp[j-1][i-1]\n                else:\n                    dp[j][i] = 1 + min(dp[j-1][i], dp[j][i-1], dp[j-1][i-1])\n\n        return dp[-1][-1]\n\nprint(Solution().minDistance(\"abc\", \"abcd\"))"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"aaa\") == \"aabbababbababababababab\"\nassert solution(\"aabb\") == \"abababababababababababab\"\nassert solution(\"ba\") == \"bba\"\nassert solution(\"abba\") == \"baababababababababababab\"\nassert solution(\"bbbbb\") == \"bbbabbbba\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('aabbba') == 'ababababa'\nassert solution('catcat') == 'catcat'\nassert solution('abcabc') == 'abcabc'\nassert solution('aac') == 'aac'\nassert solution('cat') == 'catcat'\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3,2,1) == 0\nassert solution(4,5,1) == 2\nassert solution(0,1,0) == 0\nassert solution(1,0,0) == 0\nassert solution(3,2,4) == 0\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2\", \"1\", \"2\", \"2\"]) == \"0\"\nassert solution([\"8\", \"3\", \"5\", \"2\"]) == \"0\"\nassert solution([\"8\", \"4\", \"5\", \"2\"]) == \"0\"\nassert solution([\"3\", \"3\", \"3\"]) == \"0\"\nassert solution([\"2\", \"3\", \"5\", \"7\"]) == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"2 5 1 2 2\"\n) == \"0\"\nassert solution(\n    \"4 3 5 2\"\n) == \"3\"\nassert solution(\n    \"4\"\n) == \"4\"\nassert solution(\n    \"1\"\n) == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, [2, 5, 2, 2]) == 3\nassert solution(4, [8, 3, 5, 2]) == 2\nassert solution(5, [2, 2, 2, 2]) == 0\nassert solution(5, []) == 0\nassert solution(5, [1, 3, 3, 7]) == 1\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 4 1 2 2') == '0'\nassert solution('2 4 1 2 2 7') == '1'\nassert solution('2 5 1 2 2') == '0'\nassert solution('2 5 1 2 2 7') == '0'\nassert solution('2 5 1 2 2 7 8') == '0'\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n\n\"\"\"\n\n\nclass Solution:\n    def sumOfBeautiestNums(self, arr):\n        s = set(arr)\n        return max(list(s)) + max(list(map(sum, zip(arr, s))))\n\n\nprint(Solution().sumOfBeautiestNums([2, 5, 2, 2, 2, 2, 4, 5]))\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 3\nassert solution(4) == 2\nassert solution(1) == 0\nassert solution(2) == 0\nassert solution(0) == 0\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == [\"2\"]\nassert solution(\"5\") == [\"0\", \"1\", \"2\", \"3\", \"4\"]\nassert solution(\"8\") == [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"]\nassert solution(\"3\") == [\"1\", \"2\"]\nassert solution(\"4\") == [\"0\"]\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"5\"\n    ) == \"0\"\nassert solution(\n    \"4\"\n    ) == \"1\"\nassert solution(\n    \"2\"\n    ) == \"0\"\nassert solution(\n    \"1\"\n    ) == \"2\"\nassert solution(\n    \"0\"\n    ) == \"2\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"asdf\") == \"1\"\nassert solution(\"aaaaa\") == \"4\"\nassert solution(\"asd\") == \"2\"\nassert solution(\"as\") == \"1\"\nassert solution(\"\") == \"2\"\n\n\n-----Constraints-----\n1 <= n <= 100, 1 <= k <= 10^{12}\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 6\"\n) == \"233\"\nassert solution(\n    \"10 100\"\n) == -1\nassert solution(\n    \"asdf\"\n) == -1\nassert solution(\n    \"asd\"\n) == -1\nassert solution(\n    \"aaaaa\"\n) == -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 22\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == 233\n\nassert solution(stdin) == 22"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 233\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"asd\") == -1\nassert solution(\"asdasd\") == 10\nassert solution(\"asda\") == -1\nassert solution(\"a\") == 10\nassert solution(\"aab\") == -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"asdfasd\") == -1\nassert solution(\"aaaaa\") == 10\nassert solution(\"asdfasd\") == 1\nassert solution(\"asdfasd\") == 2\nassert solution(\"asdfasd\") == 3\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"4\", \"5\", \"6\", \"7\", \"8\"]) == \"5\"\nassert solution([\"4\", \"5\", \"6\", \"7\", \"8\"]) == \"15\"\nassert solution([\"4\", \"5\", \"6\", \"7\", \"8\"]) == \"0\"\nassert solution([\"4\", \"5\", \"6\", \"7\", \"8\"]) == \"233\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 233, \"incorrect answer\""
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1\n\n\"\"\")\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5,4) == \"YES\"\n\n\nassert solution(5, 4) == \"NO\"\n\n\nassert solution(5, 4) == \"NO\"\n\n\nassert solution(5, 4) == \"YES\"\n\n-----Success----------------\nTotal Accepted: 5\nTotal Submissions: 37\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 5 1\") == \"YES\"\nassert solution(\"4 5 3\") == \"NO\"\nassert solution(\"4 4 3\") == \"NO\"\nassert solution(\"4 4 3\") == \"YES\""
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"YES\"\n\nassert solution(input) == \"NO\"\n\nassert solution(input) == \"NO\"\n\nassert solution(input) == \"YES\"\n\nassert solution(input) == \"YES\""
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 4 5 6\") == \"NO\"\nassert solution(\"1 2 3 4 7 8 9 10\") == \"NO\"\nassert solution(\"1 1 1\") == \"NO\"\n\n\n-----Constraints-----\n1 <= n <= 2^30\n0 <= D <= n\n1 <= m <= min(2^30, n)\n\nInput Format\nFirst line consists of three space-separated integers $n$, $m$ and $D$ ($2 \\le n \\le 2^5$, $n - 1 \\le m \\le min(2^5, n)$, $u_i \\le n$ \\le min(2^5, (n - 1) / 2)$) \u2014 the number of vertices, the number of edges and required degree of the first vertex, respectively.\n\nSecond line contains $m$ lines, each containing an integer $v_i$. The first $m$ lines denote edges: edge $i$ is represented by a pair of integers $v_i$, $u_i$ ($1 \\le v_i, u_i \\le n$, $u_i \\ne v_i$), which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair ($v_i, u_i$) there are no other pairs ($v_i, u_i$) or ($u_i, v_i$) in the list of edges, and for each pair $(v_i, u_i)$ the condition $v_i \\ne u_i$ is satisfied.\n\nThird line contains $D$ (or say that there are no such edges).\n\nOutput Format\nPrint \"YES\" if there is a spanning tree satisfying the condition from the problem statement, print \"NO\" otherwise.\n\nSample Input\n\n4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n\nSample Output\n\nYES\n2 1\n2 3\n3 4\n\nExplanation\n\nThe picture corresponding to the first example: [Image]\n\nThe picture corresponding to the second example: [Image]\n\nThe picture corresponding to the third example: [Image]\n\nThere is no spanning tree satisfying the condition from the problem statement.\n\"\"\"\nimport sys"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"01:02:02\") == \"02:02:02\""
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:00\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"10:30\"\nassert solution(stdin) == \"11:11\"\nassert solution(stdin) == \"01:02\"\nassert solution(stdin) == \"02:02\"\n\n\n---Python Challenges----\n\n1. Write a program which will allow the user to enter a number, check if the number is even and display the result of the fact that number is even, if it's odd, and display the result of the fact that number is odd, if it's even and display the result of the fact that number is even and odd, if it's odd and display the result of the fact that number is odd, if it's even and odd, and display the result of the fact that number is even and odd, if it's even and odd and odd, if it's odd and even and odd.\n\nInput\n\n\nOutput\n\n\nPrint the expression of the fact that number is even, if it's odd, and display the result of the fact that number is even, if it's odd, and display the result of the fact that number is even and odd, if it's odd and even, and display the result of the fact that number is odd, if it's even and odd, and even and odd, and even and odd, if it's even and odd and odd, if it's odd and even and odd, if it's even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd, and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, and even and odd and odd, if it's odd and even and odd and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, if it's odd and even and odd and odd, and even and odd and odd and odd, if it's odd and even and odd and odd, and even and odd and odd and odd, if it's odd and even and odd and odd, and even and odd and odd and odd, and even and odd and odd and odd, and even and odd and odd and odd, if it's odd and even and odd and odd, and even and odd and odd and odd, and even and odd and odd and odd and odd.\n\n>>> \n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10:00\") == \"00:30\",'stdin=10:00'\nassert solution(\"11:00\") == \"00:11\",'stdin=11:00'\nassert solution(\"01:02\") == \"02:02\",'stdin=01:02'\nassert solution(\"01:01\") == \"00:00\",'stdin=01:01'\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\nassert solution(\"01:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"11:01\") == \"10:30\"\nassert solution(\"11:02\") == \"11:11\"\nassert solution(\"01:02\") == \"00:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:00\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"02:02\"\nassert solution(\"01:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"02:02\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '10:30'\nassert solution(stdin) == '11:11'\nassert solution(stdin) == '01:02'\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:00\"\nassert solution(\"11:10\") == \"11:10\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"03:02\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"27\") == \"2\"\nassert solution(\"42\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"2\"\n) == \"1\"\nassert solution(\n    \"4\"\n) == \"2\"\nassert solution(\n    \"27\"\n) == \"5\"\nassert solution(\n    \"42\"\n) == \"6\"\nassert solution(\n    \"0\"\n) == \"0\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(4) == 1\nassert solution(6) == 2\nassert solution(27) == 5\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"2147483648\"\n) == \"1\"\nassert solution(\n    \"0050010001\"\n) == \"1\"\nassert solution(\n    \"500\"\n) == \"0\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2) == 1\nassert solution(4) == 2\nassert solution(27) == 5\nassert solution(42) == 6\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"6\") == \"4\"\nassert solution(\"9\") == \"5\"\nassert solution(\"25\") == \"1\"\nassert solution(\"22\") == \"4\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(42) == 6\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution()) == '1'\nassert solution(solution(\"\")) == '1'\nassert solution(solution(\"3\")) == '2'\nassert solution(solution(\"6\")) == '6'\nassert solution(solution(\"42\")) == '6'\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input()\n) == \"1\"\nassert solution(\n    input()\n) == \"2\"\nassert solution(\n    input()\n) == \"1\"\nassert solution(\n    input()\n) == \"0\"\nassert solution(\n    input()\n) == \"0\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"1\"\nassert solution(\"2 6\") == \"0\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"3 6\") == \"1\"\nassert solution(\"1 3 4 5\") == \"0\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"0\"\nassert solution(input) == \"0\"\nassert solution(input) == \"0\"\nassert solution(input) == \"0\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\n        [0, 1, 1],\n        [0, 2, 1],\n        [1, 3, 1],\n        [3, 3, 1],\n        [4, 4, 1],\n        [4, 5, 1],\n        [1, 6, 1],\n        [6, 6, 1],\n        [5, 5, 1],\n        [2, 6, 1],\n        [1, 1, 1],\n    ]) == \"0\"\n\nassert solution(\n    [\n        [1, 3, 0],\n        [0, 3, 0],\n        [0, 1, 0],\n        [3, 1, 0],\n        [3, 3, 0],\n        [4, 4, 0],\n        [4, 5, 0],\n        [5, 5, 0],\n        [6, 6, 0],\n        [6, 6, 0],\n        [6, 6, 0],\n    ]) == \"4\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == ''\nassert solution(input()) == ''\nassert solution(input()) == '1'\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'YES'\n\nassert solution(input()) == 'NO'\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 1 2 5') == 'NO'\nassert solution('1 3 1 2 5') == 'NO'\nassert solution('2 4 3 3') == 'YES'\nassert solution('2 5 5 5 5') == 'YES'\nassert solution('2 6 6 5') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 3 4 5\") == \"YES\"\nassert solution(\"1 3 4 5\") == \"NO\"\nassert solution(\"1 4 1\") == \"NO\"\nassert solution(\"1 10 10\") == \"NO\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i < 10^9\n\n-----Time Limit-----\nO(n)\n\n\n-----SAMPLE CASE-----\nInput\n5\n2 1 1 2 5\n\nOutput\nYES\n\n\"\"\"\n\n\nclass Solution:\n    def wall(self, N: int) -> str:\n        # Brute Force with memoization\n        # Time complexity: O(n^2)\n        # Space Complexity: O(1)\n        def wall_helper(N, part, height):\n            if N == 0:\n                return \"NO\"\n            if part == N:\n                return \"YES\"\n            if part > 0:\n                # Bottom part\n                if part % 2 == 0:\n                    height += part\n                    part += 2\n                    if part >= N:\n                        part = 1\n                    return wall_helper(N, part, height)\n\n                # Top part\n                if part % 2 == 1:\n                    height += part\n                    part += 1\n                    if part >= N:\n                        part = N\n                    return wall_helper(N, part, height)\n            else:\n                # Right part\n                if height % 2 == 0:\n                    height += height // 2\n                    part += 1\n                    if height >= N:\n                        part = 1\n                    return wall_helper(N, part, height)\n                # Left part\n                else:\n                    height += height // 2\n                    part += 1\n                    if height >= N:\n                        part = N\n                    return wall_helper(N, part, height)\n\n        return wall_helper(N, 0, 0)\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 2 1 2 5') == \"YES\"\nassert solution('3 5 3') == \"NO\"\n\nfor _ in range(int(stdin.strip())):\n    a, b, c = [int(i) for i in stdin.split()]\n    a = max(a, b, c)\n    c = max(c, b, a)\n    if a == b == c:\n        pass\n    elif a == b or b == c or c == a:\n        pass\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 233"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 233, \"incorrect output\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('asdf') == '234'\nassert solution('aaaa') == -1\n\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n\n----------------------\n\nInput\n\nInput is a single line.\n\nOutput\n\nThere are four lines in the given input.\n\nThe first line is a string $a$ consisting of $n$ lowercase Latin letters.\nThe second line is a string $b$ consisting of $n$ lowercase Latin letters.\nThe third line is a string $c$ consisting of $n$ lowercase Latin letters.\nThe fourth line is a string $d$ consisting of $n$ lowercase Latin letters.\n\n\nInput\n\nThe first line is one integer $n$ denoting the length of the string $a$\nThe second line is one string $a$\nThe third line is one string $b$\nThe fourth line is one string $c$\n\nOutput\n\nThere are four lines in the given input.\n\nThe first line is a string $a$ consisting of $n$ lowercase Latin letters.\nThe second line is a string $b$ consisting of $n$ lowercase Latin letters.\nThe third line is a string $c$ consisting of $n$ lowercase Latin letters.\nThe fourth line is a string $d$ consisting of $n$ lowercase Latin letters.\n\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"asdf\") == \"0\"\nassert solution(\"asdfasdf\") == \"1\"\nassert solution(\"ajihiushda\") == \"0\"\nassert solution(\"aaaaa\") == \"1\"\nassert solution(\"aaaaaaa\") == \"0\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1, 'incorrect'"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 233\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 233\n\nInput\n5 6\nasdf\n\nOutput\n-1\n\nInput\n10 100\najihiushda\n\nOutput\n233\n\nInput\n5 7\naaaaa\n\nOutput\n-1"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 1 1') == '7'\nassert solution('1 1 2') == '4'\nassert solution('1 1 3') == '4'\nassert solution('1 2 1') == '2'\nassert solution('1 3 1') == '2'\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\\\"\"\"\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday\nMonday\nFri\nSunday"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"30 20 10\") == \"39\"\n\n\n\nprint('Example 1:')\nprint('Input : ')\nprint('stdin : ')\nprint(str(input()))\nprint('Exception : ')\nprint('3')\nprint('Exception : ')\nprint(str(Solution().solution(stdin)))\nprint('Exception : ')\nprint('0')\nprint('Exception : ')\nprint(str(Solution().solution(stdin)))\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\") == \"4\"\nassert solution(\"3 1 2\") == \"7\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == 4\nassert solution(\"3\") == 7\nassert solution(\"4\") == 10\nassert solution(\"7\") == 11\nassert solution(\"30 20 10\") == 4\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 1 1') == '3'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '4'\nassert solution('30 20 10') == '39'\n\nExplanation\n\nPolycarps backpack contains:\n\na = 10\nb = 20\nc = 10\n\n2 1 1\n\n3 2 2\n\n7 20 10\n\n4\n\n3\n\n4\n\n\n[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == \"4\"\nassert solution(\"1 100 1\") == \"7\"\nassert solution(\"30 20 10\") == \"39\""
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '4'\n\nassert solution(stdin) == '7'\n\nassert solution(stdin) == '39'\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(testCases) == \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 4\"), \"NO\"\nassert solution(\"1 2\"), \"NO\"\nassert solution(\"5 6\"), \"YES\"\nassert solution(\"5 7\"), \"NO\"\nassert solution(\"7 4\"), \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 5\") == \"YES\"\n\n\n-----Inline-----\n\nInput\n6\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\nOutput\nYES\nNO\nYES\nNO\nYES\nYES\nNO\n\n\n-----Note-----\n\nThe first test case of the input has three types of tiles, they are shown on the picture below. [Image] \n\nMasha can construct, for example, the following square of size $4 \\times 4$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 5 & {7} & {8} & {9} \\\\ \\hline 7 & {4} & {9} & {8} \\\\ \\hline 8 & {9} & {5} & {7} \\\\ \\hline 9 & {8} & {7} & {4} \\\\ \\hline \\end{array} \\right.$\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= t <= 100\n0 <= n, m <= 100\n\n0 <= i <= n\n0 <= j <= m\n0 <= s[i][j] <= s[j][i]\n\n1 <= n \\le n^2, m \\le 100\n1 <= n \\le m^2\n1 <= m \\le 100\n\n\"\"\"\nfrom collections import defaultdict\nfrom queue import PriorityQueue"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 0\nassert solution(5) == 1\nassert solution(6) == 1"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 4\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"5 6\") == \"1\"\nassert solution(\"7 8 9\") == \"1\"\nassert solution(\"0 10\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"6\") == \"1\"\nassert solution(\"9\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1') == 0\nassert solution('1') == 1\nassert solution('3') == 1\nassert solution('4') == 1\nassert solution('5') == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"0\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"(((()))())\") == 5\nassert solution(\"(()())\") == 0\nassert solution(\"((()()))()\") == 1\nassert solution(\"(()((()))\") == 4\nassert solution(\"(((((()))()())()(((()()))))\") == 2\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(())\nassert solution(\"(())\") == 0\nassert solution(\"(((((((((((((((((((((()\nassert solution(\"(((((((((((((((((((((((((((((((((((((((((((((((\nassert solution(\"(())\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"((()))\") == 3\nassert solution(\"((()()))\") == 3\nassert solution(\"(()((()))\") == 3\nassert solution(\"(()(())\") == 3\nassert solution(\"(()()(())\") == 3\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input() == \"5\") == 5\nassert solution(input() == \"3\") == 4\nassert solution(input() == \"2\") == 2\nassert solution(input() == \"\") == 0\nassert solution(input() == \"()))())()\") == 1\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"()()\") == 4\nassert solution(\"((()\") == 4\nassert solution(\"((()()))\") == 0\nassert solution(\"((()()()))\") == 4\nassert solution(\"((())\") == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0'\n'''"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"5\"\n\"\"\"\n\n\nclass Solution:\n    def countPairs(self, root: TreeNode, target: str) -> int:\n        # get the number of possible sub-sequences\n        def dfs(node, sub_sequence, i):\n            if node is None:\n                return\n            if len(sub_sequence) == 0:\n                return\n            if len(sub_sequence) == 1:\n                # if this is the target sub-sequence, add it to the answer\n                if sub_sequence[0] == target:\n                    answer[i] += 1\n                return\n            # if this is not, it's a sub-sequence that is already visited, skip this and move on to the next sub-sequence\n            if sub_sequence[0]!= target:\n                return\n            # perform DFS on all the sub-sequences\n            dfs(node.left, sub_sequence[1:], i + 1)\n            dfs(node.right, sub_sequence[1:], i + 1)\n            # add the number of sub-sequences from this visit into the answer\n            answer[i] += sub_sequence[0] * sub_sequence[0]\n\n        answer = [0] * len(target)\n        # set root as the root of the given substring, this is done in order to avoid duplicates\n        root = TreeNode(root)\n        # set the first sub-sequence as the root\n        dfs(root, [target], 0)\n        return answer[0]\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(['(()', '(())']) == '0'\nassert solution(['(())', '(()()', '()()']) == '2'\nassert solution(['(((((((((((()'])]))((()))()()((()())()((()())()))()()))))']) == '0'\nassert solution(['(()()', '((()()()())(())()()()()()()']) == '3'\nassert solution(['(()((()()())(())()()()()']) == '0'\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(in_str) == -1\n\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1579\") == 4\nassert solution(\"167735\", \"10\") == -1\nassert solution(\"1325551452\") == -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('705') == 1\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^3\n\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Space Limit-----\n\n1"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1, \"You have only passed one test, but you did not get it\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1, 'Not possible'\nassert solution(stdin) == '-1', 'Not possible'\nassert solution(stdin) == '-1', 'Not possible'\nassert solution(stdin) == '-1', 'Not possible'\n\n'''\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, \"105\") == -1\nassert solution(10, \"95\") == -1\nassert solution(5, \"125\") == -1\nassert solution(7501, \"95\") == -1\nassert solution(105, \"125\") == -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n\nassert solution(stdin) == 0\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1\n\nInput\n5071\n\nOutput\n4\n\nInput\n705\n\nOutput\n1\n\nInput\n1241367\n\nOutput\n-1\n\nInput\n705\n\nOutput\n-1"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('ababcd') == 'abcde'\nassert solution('abcdef') == 'aecdef'\nassert solution('aabbcdef') == 'abcdef'\nassert solution('abcabc') == 'abcabc'\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3abcde') == 1\nassert solution('5abcde') == 2\nassert solution('7abcde') == 3\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('abcde'), 1\nassert solution('aaabbcbb'), 3\nassert solution('aabcdedc'), 2\nassert solution('aabcde'), 3\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(s) == 5\nassert solution(s1) == 6\nassert solution(s2) == 5\nassert solution(s3) == 5\nassert solution(s4) == 1\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('abcde'), \"string is not sorted\"\nassert solution('abca'), \"string is not sorted\"\nassert solution('ab'), \"string is not sorted\"\nassert solution('a'), \"string is not sorted\"\nassert solution('a'), \"string is not sorted\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 4, \"The function solution is incorrect\"\nassert solution(input(\"Input: \")) == 4, \"The function solution is incorrect\"\nassert solution(input(\"Input: \")) == 5, \"The function solution is incorrect\"\nassert solution(input(\"Input: \")) == 3, \"The function solution is incorrect\"\nassert solution(input(\"Input: \")) == 1, \"The function solution is incorrect\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    s_sorted = sorted(s)\n    res = 0\n    c = set(s)\n    i = 0\n    while i < n:\n        if i == n-1:\n            break\n        while i < n and s[i] == s_sorted[i]:\n            i += 1\n        i += 1\n        c.remove(s_sorted[i-1])\n        res += 1\n        if i == n:\n            break\n    print(res)"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 4\n\nExplanation\nInput\n5\nabaccedb\n\nOutput\n1\n2 1 1 1 1\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, \"qwerty\") == \"YES\"\nassert solution(5, \"qwerty\") == \"YES\"\nassert solution(3, \"qwerty\") == \"NO\"\nassert solution(3, \"qwerty\") == \"YES\"\nassert solution(4, \"qwerty\") == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == \"YES\", \"Incorrect answer\"\n\nassert solution(3) == \"YES\", \"Incorrect answer\"\n\nassert solution(1) == \"YES\", \"Incorrect answer\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,[\"a\"]) == \"YES\"\nassert solution(2,[\"a\", \"b\"]) == \"YES\"\nassert solution(3,[\"a\", \"b\", \"c\"]) == \"NO\"\nassert solution(4,[\"a\", \"b\", \"c\", \"d\"]) == \"YES\"\nassert solution(5,[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, \"qwertty\") == \"YES\"\nassert solution(3, \"qwerty\") == \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, \"abab\") == \"YES\"\nassert solution(3, \"qwerty\") == \"YES\"\nassert solution(5, \"qwerty\") == \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4) == \"YES\"\nassert solution(3) == \"NO\"\nassert solution(5) == \"YES\"\nassert solution(3) == \"NO\"\nassert solution(1) == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"123\") == \"YES\"\nassert solution(\"123\") == \"NO\"\nassert solution(\"123\") == \"YES\"\nassert solution(\"123\") == \"NO\"\nassert solution(\"123\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"a\", \"b\", \"ab\"]) == \"abab\"\nassert solution([\"q\", \"w\", \"x\"]) == \"qxw\"\nassert solution([\"q\", \"w\", \"x\", \"y\", \"z\"]) == \"zyzx\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, [\"abacaba\"]) == \"YES\"\nassert solution(3, [\"qwerty\", \"qwerty\", \"qwerty\"]) == \"YES\"\nassert solution(1, [\"a\"]) == \"YES\"\nassert solution(1, [\"a\", \"b\", \"c\"]) == \"NO\"\nassert solution(1, [\"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\"]) == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(sys.argv) == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\n-----Phrase-----\n\nMishka is an object who does not have any attributes. This means that the program is not designed to work with any other object.\n\nEvery problem is solved by a solution of a single problem. Each problem is represented by the integers $a_i$ and $a_i$-th variable. The problem is solved by a solution of exactly $a_i$ solutions in that order.\n\nMishka is designed to be able to solve all the problems in an integer sequence. Mishka solves problems using only one solution at a time.\n\nInput\n\nThe first line of input contains two integers $n$ and $k$ ($1 \\le n, k \\le 100$) \u2014 the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the difficulty of the $i$-th problem. The problems are given in order from the leftmost to the rightmost in the list.\n\nOutput\n\nPrint one integer \u2014 the maximum number of problems Mishka can solve.\n\n_____________________________________________________________________________________________________________"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '5'\nassert solution(input()) == '5'\nassert solution(input()) == '5'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\n\n-----Solution-----\n\nNote that there are four questions to solve:\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\nThe first and second question are to solve problems in the order of leftmost to rightmost in the list.\n\nSo, the number of solved problems is $5$. But, because the difficulties of problems from both ends are greater than $k$, the number of solved problems is $0$.\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$\n\n$[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"8 4\"\n) == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"5\"\n\n-----Examples-----\nInput\n5 3\n1 2\n2 3\n1 3\n2 4\n3 4\n\nOutput\n3\n\nInput\n6 3\n1 2\n2 3\n1 3\n2 4\n3 4\n3 5\n\nOutput\n0\n\nInput\n6 100\n12 34 55 43 21\n\nOutput\n5\n\nInput\n6 200\n1 3 2 4 5\n1 4 3 2 5\n1 3 4 5\n2 4 5\n3 5\n\nOutput\n0\n\nInput\n7 500\n1 3 2 4 5\n1 2 3 4 5\n1 3 2 4 5\n1 4 5\n1 4 3 2 5\n2 4 5\n3 5\n\nOutput\n0\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 5\n\nInput\n5 3\n1 3 3 1\n\nOutput\n0\n\nInput\n5 100\n12 34 55 43 21\n\nOutput\n5\n\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"0\"\nassert solution(\"5 100\") == \"5\"\nassert solution(\"5 12 34 55 43 21\") == \"5\"\nassert solution(\"5 100\") == \"0\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '5'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == '0'\nassert solution(1) == '1'\nassert solution(2) == '2'\nassert solution(3) == '3'\nassert solution(4) == '4'\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"4 4\", \"3 3\"]) == \"12\"\nassert solution([\"9 3\", \"3 6\"]) == \"14\"\nassert solution([\"6 8\", \"1 7\"]) == \"14\"\nassert solution([\"1 4\", \"1 5\"]) == \"12\"\nassert solution([\"1 6\", \"3 1\"]) == \"12\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == str(12)\nassert solution(input()) == str(14)\nassert solution(input()) == str(3218)\nassert solution(input()) == str(12)\nassert solution(input()) == str(12)\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\\\"\\\"\\\"\n    3 2\n    5 2\n    3 3\n    5 3\n    1 2\n    1 3\n    2 3\n    1 4\n    1 5\n    2 6\n    2 7\n    1 8\n    1 9\n    2 10\n    1 11\n    2 12\n    1 13\n    1 14\n    1 15\n    1 16\n    1 17\n    1 18\n    1 19\n    1 20\n    1 21\n    1 22\n    1 23\n    1 24\n    1 25\n    1 26\n    1 27\n    1 28\n    1 29\n    1 30\n    1 31\n    1 32\n    1 33\n    1 34\n    1 35\n    1 36\n    1 37\n    1 38\n    1 39\n    1 40\n    1 41\n    1 42\n    1 43\n    1 44\n    1 45\n    1 46\n    1 47\n    1 48\n    1 49\n    1 50\n    1 51\n    1 52\n    1 53\n    1 54\n    1 55\n    1 56\n    1 57\n    1 58\n    1 59\n    1 60\n    1 61\n    1 62\n    1 63\n    1 64\n    1 65\n    1 66\n    1 67\n    1 68\n    1 69\n    1 70\n    1 71\n    1 72\n    1 73\n    1 74\n    1 75\n    1 76\n    1 77\n    1 78\n    1 79\n    1 80\n    1 81\n    1 82\n    1 83\n    1 84\n    1 85\n    1 86\n    1 87\n    1 88\n    1 89\n    1 90\n    1 91\n    1 92\n    1 93\n    1 94\n    1 95\n    1 96\n    1 97\n    1 98\n    1 99\n    1 100\n    1 101\n    1 102\n    1 103\n    1 104\n    1 105\n    1 106\n    1 107\n    1 108\n    1 109\n    1 110\n    1 111\n    1 112\n    1 113\n    1 114\n    1 115\n    1 116\n    1 117\n    1 118\n    1 119\n    1 120\n    1 121\n    1 122\n    1 123\n    1 124\n    1 125\n    1 126\n    1 127\n    1 128\n    1 129\n    1 130\n    1 131\n    1 132\n    1 133\n    1 134\n    1 135\n    1 136\n    1 137\n    1 138\n    1 139\n    1 140\n    1 141\n    1 142\n    1 143\n    1 144\n    1 145\n    1 146\n    1 147\n    1 148\n    1 149\n    1 150\n    1 151\n    1 152\n    1 153\n    1 154\n    1 155\n    1 156\n    1 157\n    1 158\n    1 159\n    1 160\n    1 161\n    1 162\n    1 163\n    1 164\n    1 165\n    1 166\n    1 167\n    1 168\n    1 169\n    1 170\n    1 171\n    1 172\n    1 173\n    1 174\n    1 175\n    1 176\n    1 177\n    1 178\n    1 179\n    1 180\n    1 181\n    1 182\n    1 183\n    1 184\n    1 185\n    1 186\n    1 187\n    1 188\n    1 189\n    1 190\n    1 191\n    1 192\n    1 193\n    1 194\n    1 195\n    1 196\n    1 197\n    1 198\n    1 199\n    1 200\n    1 201\n    1 202\n    1 203\n    1 204\n    1 205\n    1 206\n    1 207\n    1 208\n    1 209\n    1 210\n    1 211\n    1 212\n    1 213\n    1 214\n    1 215\n    1 216\n    1 217\n    1 218\n    1 219\n    1 220\n    1 221\n    1 222\n    1 223\n    1 224\n    1 225\n    1 226\n    1 227\n    1 228\n    1 229\n    1 230\n    1 231\n    1 232\n    1 233\n    1 234\n    1 235\n    1 236\n    1 237\n    1 238\n    1 239\n    1 240\n    1 241\n    1 242\n    1 243\n    1 244\n    1 245\n    1 246\n    1 247\n    1 248\n    1 249\n    1 250\n    1 251\n    1 252\n    1 253\n    1 254\n    1 255\n    1 256\n    1 257\n    1 258\n    1 259\n    1 260\n    1 261\n    1 262\n    1 263\n    1 264\n    1 265\n    1 266\n    1 267\n    1 268\n    1 269\n    1 270\n    1 271\n    1 272\n    1 273\n    1 274\n    1 275\n    1 276\n    1 277\n    1 278\n    1 279\n    1 280\n    1 281\n    1 282\n    1 283\n    1 284\n    1 285\n    1 286\n    1 287\n    1 288\n    1 289\n    1 290\n    1 291\n    1 292\n    1 293\n    1 294\n    1 295\n    1 296\n    1 297\n    1 298\n    1 299\n    1 300\n    1 301\n    1 302\n    1 303\n    1 304\n    1 305\n    1 306\n    1 307\n    1 308\n    1 309\n    1 310\n    1 311\n    1 312\n    1 313\n    1 314\n    1 315\n    1 316\n    1 317\n    1 318\n    1 319\n    1 320\n    1 321\n    1 322\n    1 323\n    1 324\n    1 325\n    1 326\n    1 327\n    1 328\n    1 329\n    1 330\n    1 331\n    1 332\n    1 333\n    1 334\n    1 335\n    1 336\n    1 337\n    1 338\n    1 339\n    1 340\n    1 341\n    1 342\n    1 343\n    1 344\n    1 345\n    1 346\n    1 347\n    1 348\n    1 349\n    1 350\n    1 351\n    1 352\n    1 353\n    1 354\n    1 355\n    1 356\n    1 357\n    1 358\n    1 359\n    1 360\n    1 361\n    1 362\n    1 363\n    1 364\n    1 365\n    1 366\n    1 367\n    1 368\n    1 369\n    1"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('11 4') == '12'\nassert solution('2 3') == '13'\nassert solution('2 9') == '13'\nassert solution('5 6') == '14'\nassert solution('3 6') == '12'\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2 0\") == \"12\"\nassert solution(\"1 1 1\") == \"14\"\nassert solution(\"6 7 5\") == \"12\"\nassert solution(\"3 3 3\") == \"14\"\nassert solution(\"1 3 3\") == \"12\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '14'\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 9\") == 12\nassert solution(\"9 3\") == 14\nassert solution(\"3 6\") == 12\nassert solution(\"506 2708\") == 3218\nassert solution(\"3 6\") == 12\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"12\"\n\n\n-----Constraints-----\n1 <= a <= 10^{14}\n1 <= b <= 10^{14}\n\nWarnings\n1. The number of pixels that are white is $2^{14}$.\n2. The number of red marker is $1$ and the number of blue marker is $1$.\n3. The size of the board is $a+b$ and the number of tiles is $1+1$\n\n----Time complexity----\nO(n^2)\n\nO(n)\n\n----Solutions----\nTLE\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution == \"NO\" or solution == \"YES\", \"Type of solution not correct!\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abacbecfd\") == \"YES\", \"Wrong answer\"\nassert solution(\"aaabbcbb\") == \"NO\", \"Wrong answer\"\nassert solution(\"abcdedc\") == \"YES\", \"Wrong answer\"\nassert solution(\"abcdedc\") == \"NO\", \"Wrong answer\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"aaaa\") == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"8\") == \"NO\"\nassert solution(\"7\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('ababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcdababcdcd"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"YES\"\nassert solution(inp) == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"abcabcdefg\") == \"YES\"\nassert solution(\"ababababab\") == \"YES\"\nassert solution(\"abababababab\") == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\""
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2,2) == 1\nassert solution(2,3) == 1\nassert solution(2,5) == 1\nassert solution(2,10) == -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n10 50\n\"\"\") == \"10\"\nassert solution(\n\"\"\"\n3 100\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n2 20\n\"\"\") == \"10\"\nassert solution(\n\"\"\"\n3 100\n\"\"\") == \"10\"\nassert solution(\n\"\"\"\n1 200\n\"\"\") == \"0\"\n\"\"\"\n\n\"\"\"\n10 20\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n1 200\n1 100\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 25\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == 25\nassert solution(\"2 3\") == -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == 25\nassert solution(\"3 2\") == 2\nassert solution(\"3 3\") == 2\nassert solution(\"3 5\") == 3\nassert solution(\"2 2\") == 2"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '25' or -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2 2) == 25\nassert solution(2 3) == -1"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\"2 2\", \"2 4\", \"3 3\", \"4 3\"]\n) == 25, \"Solution failed\"\nassert solution(\n    [\"4 2\", \"5 2\", \"6 2\", \"7 3\", \"8 1\"]\n) == 25, \"Solution failed\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == 25\nassert solution(\"2 2\") == -1\nassert solution(\"1\") == 1\nassert solution(\"1 2\") == 2\nassert solution(\"1 2 3 4 5\") == 4\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 2\") == 25\nassert solution(\n    \"2 2 1\") == 26\nassert solution(\n    \"10 2 3 2\") == 2\nassert solution(\n    \"10 1 2 3 2\") == 2\nassert solution(\n    \"100 1 2 3 2\") == -1"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5 6 8\") == [\"NO\", \"1\", \"2\", \"4\", \"5\", \"6\", \"8\"]\nassert solution(\"2 3 4 5 6 8\") == [\"NO\", \"2\", \"3\", \"4\", \"5\", \"6\", \"8\"]\nassert solution(\"1 2 4 5 6 8\") == [\"NO\", \"1\", \"2\", \"4\", \"5\", \"6\", \"8\"]\nassert solution(\"1 2 4 5 6 8\") == [\"YES\", \"1\", \"2\", \"4\", \"5\", \"6\", \"8\"]"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 7\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"1 1 1 1\") == \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"23 11 21 24 33\") == \"NO\"\nassert solution(\"23 11 21 24 33\") == \"YES\""
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"1 1 2\") == \"YES\"\nassert solution(\"1 1 3 4 5 6 8\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n\n\n'''\n\nclass Solution:\n    def solution(self, n, k):\n        if k > n:\n            return \"NO\"\n        res = 0\n        dp = [0 for i in range(k + 1)]\n        for i in range(k + 1):\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n                if dp[i] > n:\n                    res = dp[i]\n                    return res\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"2\",\"1\",\"1\",\"2\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]) == \"YES\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\"]) == \"NO\""
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3, \"Invalid input\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 20\") == \"3\"\nassert solution(\"45 -6\") == \"3\"\nassert solution(\"34 -15\") == \"3\"\nassert solution(\"10 34\") == \"3\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n\"\"\"\nfrom sys import stdin\nfrom itertools import combinations\nimport math"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1\\n'), '1'\n\n\n-----Goals-----\n1. If we add $a_i$ units to $b_i$, Polycarp can take $b_i$ units and take $b_i$ units without taking $a_i$. \n2. If we take $a_i$ units, Polycarp can take $b_i$ units and take $b_i$ units without taking $a_i$. \n3. If we take $a_i$ units and take $b_i$ units without taking $a_i$, Polycarp can take $a_i$ and $b_i$ units without taking $a_i$. \n4. If we take $a_i$ units and take $b_i$ units without taking $a_i$, Polycarp can take $a_i$ and $b_i$ units without taking $a_i$. \n5. If we take $a_i$ units and take $b_i$ units without taking $a_i$, Polycarp can take $a_i$ units and take $b_i$ units without taking $a_i$. \n6. If we take $a_i$ units and take $b_i$ units without taking $a_i$, Polycarp can take $a_i$ units and take $b_i$ units without taking $a_i$. \n7. If we take $a_i$ units and take $b_i$ units without taking $a_i$, Polycarp can take $a_i$ and $b_i$ units without taking $a_i$. \n8. If we take $a_i$ units and take $b_i$ units without taking $a_i$, Polycarp can take $a_i$ and $b_i$ units without taking $a_i$. \n9. If we take $a_i$ units and take $b_i$ units without taking $a_i$, Polycarp can take $a_i$ and $b_i$ units without taking $a_i$. \n10. If we take $a_i$ units and take $b_i$ units without taking $a_i$, Polycarp can take $a_i$ and $b_i$ units without taking $a_i$.\n\nExample:\nInput:\n3 4\n4 6\n10 -2\n8 -1\n\nOutput:\n3\n\nExample:\nInput:\n5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45\n\nOutput:\n5\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"5 20\") == \"5\"\nassert solution(\"45 -6\") == \"4\"\nassert solution(\"34 -15\") == \"4\"\nassert solution(\"10 34\") == \"4\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\nprint(\"Example 1:\")\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"Output : \")\nprint(\"5\")\nprint(\"3\")\nprint(\"4\")\nprint(\"6\")\nprint(\"10\")\nprint(\"-2\")\nprint(\"8\")\nprint(\"-1\")\nprint(\"-123\")\nprint(\"300\")\nprint(\"1\")\nprint(\"234\")\nprint(\"123\")\nprint(\"123\")\nprint(\"40\")\nprint(\"45\")\nprint(\"-45\")\nprint(\"-345\")\nprint(\"45\")\nprint(\"-1\")\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"YES\"\n\nassert solution(input) == \"NO\"\n\nassert solution(input) == \"NO\"\n\nassert solution(input) == \"YES\"\n\nassert solution(input) == \"YES\""
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\") == \"YES\"\nassert solution(\"1 3 1\") == \"YES\"\nassert solution(\"1 4 1\") == \"YES\"\nassert solution(\"3 2 3\") == \"YES\"\nassert solution(\"4 1\") == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, \"1 2 1\") == \"YES\"\nassert solution(5, \"2 3 2\") == \"YES\"\nassert solution(5, \"3 4 2\") == \"YES\"\nassert solution(5, \"4 1 2\") == \"YES\"\nassert solution(5, \"4 3 2\") == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"YES\"\nassert solution(input) == \"NO\"\n\nInput\n\n6\n1 5 1 5 1 4 5 5 5 5 5 5 1 3 4 5 1 2 3 3 5 4 3 4 5\n\nOutput\nYES\n1 4 6\n3 1 5\n4 1 7\n6 2 3 2\n\nInput\n\n4\n1 2 1 1 1 2\n\nOutput\nNO\n\nInput\n\n1 2 1 3\n\nOutput\nYES\n3 2 1\n\nInput\n\n1 2 1 3\n\nOutput\nYES\n1 3 2\n\nInput\n\n4\n1 2 1 3\n\nOutput\nYES\n3 2 1\n\nInput\n\n1 1 1\n\nOutput\nYES\n1\n\n'''\n\n\n\nimport sys\n\ninput = sys.stdin.readline\nn = int(input().strip())\na = list(map(int, input().split()))\n\nfor i in range(0,n,2):\n    # print(a[i],a[i+1])\n    if a[i]!= a[i+1]:\n        print('NO')\n        break\n    else:\n        print('YES')\n\n'''\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(solution(stdin)) == \"YES\"\n\n\n-----Discussion-----\nGiven an array of integers A, we need to use all the integers from 1 to $n$ to form an array B of $n$ integers.\n\nInput:\nThe first line contains an integer $n$ denoting the size of the array.\nThe next line contains $n$ space-separated integers $a_1, a_2, \\dots, a_{n^2}$ denoting the elements of the array.\n\nOutput:\nA single line containing the elements of B, one on each line.\n\nExample:\nInput:\n5\n1 2 3 4 5\n1 2 3 4 5\n5 2 3 4 1\n5 2 3 4 1\n1 2 3 4 1\n\nOutput:\n1 2 3 4 5\n5 2 3 4 1\n5 2 3 4 1\n4 3 2 5 1\n3 4 2 1\n3 4 2 1\n4 3 2 1\n\nNote:\nThe array contains integers between 1 and $n$ in a strict increasing order.\n\nInput and output are expected to be handled by a single line.\n\nConstraints:\n1 <= n <= 10^4\n0 <= a_i < 10^4\n\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n\n\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'YES'\n\n\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1,1,2,2\") == \"YES\"\nassert solution(\"3,5,5,-3\") == \"NO\"\n\nassert solution(\"4,2,3,-2\") == \"NO\"\nassert solution(\"2,-2,2,-1\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"NO\"\nassert solution(\"2 -2\") == \"NO\"\nassert solution(\"2 1\") == \"NO\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 -1\") == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 'YES'\n\"\"\"\nimport sys"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n'''\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\n------Examples-----\nInput\n10 2\n3 4\n4 6\n1 3\n\nOutput\nYES\n\n\nInput\n10 -2\n4 -5\n4 -2\n1 3\n\nOutput\nNO\n\nInput\n10 0\n-10\n10 1\n-10\n30 0\n\nOutput\nNO\n\nInput\n10 -10\n-20\n-10\n-5\n-20\n-2\n2\n3\n\nOutput\nNO\n\nInput\n3 2\n2 -5\n1 -2\n\nOutput\nNO\n\n\n------Solution-----"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 11\") == \"YES\"\nassert solution(\"2 1\") == \"YES\"\nassert solution(\"2 0\") == \"NO\"\nassert solution(\"0 0 0 0 0 0 0 0 0\") == \"NO\"\nassert solution(\"1 0 0 0 0 0 0 0 0\") == \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == [\"YES\", \"NO\"]\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == [\"0 0 0 0 0 0 0 0 0 1\", \"1 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 1\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 1\", \"0 0 0 0 0 0 0 0 0 1\"]\nassert solution(10) == [\"0 0 0 0 0 0 0 0 0 0 0\", \"1 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\"]\nassert solution(20) == [\"0 0 0 0 0 0 0 0 0 0 0\", \"1 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\"]\nassert solution(30) == [\"0 0 0 0 0 0 0 0 0 0 0\", \"1 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\"]\nassert solution(40) == [\"0 0 0 0 0 0 0 0 0 0 0\", \"1 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'\n\n\"\"\"\n\nclass Solution:\n    def canJump(self, arr: List[int]) -> bool:\n        n = len(arr)\n        reach = 0\n        for i in range(n):\n            reach = max(reach, max(arr[i:n+i]))\n        if reach == n:\n            return True\n        return False\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == ['NO', 'YES']\nassert solution(stdin) == ['NO', 'YES', 'NO']\nassert solution(stdin) == ['NO', 'YES', 'YES', 'NO']\nassert solution(stdin) == ['NO', 'YES', 'YES', 'YES', 'NO']"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\nInput\n5 3\n1 0\n1 1 0 1\n1 2 2 3 0\n1 3 4 5\n1 4 6 7\n1 5 8 9\n2 3 5 6\n2 4 7 8\n2 5 10 9\n\nOutput\nYES\n0 1 0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 0 0 1\n\n\n'''"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"asdfasdf\") == 3\nassert solution(\"ab\") == 0\nassert solution(\"abcde\") == 3\nassert solution(\"baaba\") == 2\nassert solution(\"babb\") == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n\nassert solution(\"bbabababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abcde\") == 3\nassert solution(\"bbaaa\") == 3\nassert solution(\"baabaa\") == 2\nassert solution(\"abcde\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"Wrong input\"\nassert solution(stdin[:4]), \"Wrong input\"\nassert solution(stdin[:5]), \"Wrong input\"\nassert solution(stdin[:6]), \"Wrong input\"\nassert solution(stdin[:7]), \"Wrong input\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n\n\n------Time Complexity-----------------------\nStart: O(S)\nTotal Space: O(S)"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n\n\"\"\"\nInput:\ns = \"baabac\"\nt = \"aab\"\nOutput:\n1\n\nInput:\ns = \"aa\"\nt = \"a\"\nOutput:\n2\n\"\"\"\nclass Solution:\n    def removeSubstring(self, s, t):\n        # Time: O(n + m)\n        # Space: O(m)\n        l, r = 0, 0\n        for i in range(len(t)):\n            while l < len(s) and s[l] == t[i]:\n                l += 1\n            while r < len(s) and s[r]!= t[i]:\n                r += 1\n            if r == len(s):\n                return r - l - 1\n            if l == len(s):\n                return r - l\n            if r < len(s):\n                l, r = l + 1, r + 1\n        return 0"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"test\") == 0"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"10 3\"\nassert solution(stdin) == \"9 9\"\nassert solution(stdin) == \"10 10\"\n\n'''\n\nimport math"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('4.024922') == '9 9'\nassert solution('2.572479') == '3 2'\nassert solution('5.0') == '5 5'\nassert solution('6.0') == '6 6'\nassert solution('7.0') == '7 7'\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"3 2\"\nassert solution(input()) == \"10 3\"\n\n\n\n-----Incomplete-----\nInput\n1.200000\nOutput\n3 2\n\nInput\n2.572479\nOutput\n10 3\n\nInput\n4.024922\nOutput\n9 9\nassert solution(input()) == \"3 2\"\nassert solution(input()) == \"10 3\"\n\n\n-----Brute Force-----\nInput\n1.200000\nOutput\n3 2\n\nInput\n2.572479\nOutput\n10 3\n\nInput\n4.024922\nOutput\n9 9\nassert solution(input()) == \"3 2\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4.024922\") == \"10 3\"\nassert solution(\"2.572479\") == \"3 2\""
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4.024922\") == 10\nassert solution(\"3 2\") == 2\nassert solution(\"2 3\") == 2\nassert solution(\"6.0\") == 2\nassert solution(\"2.5\") == 2\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 2\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 3\nassert solution(5) == 4\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2.0') == '2'\nassert solution('2.1') == '1'\nassert solution('2.3') == '3'\nassert solution('2.5') == '10'\nassert solution('2.6') == '11'\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5.0\") == \"3\"\nassert solution(\"6.0\") == \"3\"\nassert solution(\"4.2\") == \"9\"\nassert solution(\"5.5\") == \"10\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(a) == \"3 2\"\nassert solution(b) == \"10 3\"\nassert solution(c) == \"9 9\"\nassert solution(d) == \"A B\"\n\n\n-----Discussion-----\nIn the input, the input contains only one integer.\nThe input is simply the string representation of the integer.\nIt is not valid for input such that any integer can be written as a string, or even if the number of decimal places is 1.\n\n\n-----Constraints-----\n1 <= stdin.length <= 1000\n1 <= x <= 5 * 10^9\n\n\n-----Time complexity-----\nSince the input is just a single string, the time complexity of the solution is O(n).\n\n\n-----Space complexity-----\nSince the input is not valid, space complexity of the solution is O(1).\n\n\n-----Elements of the input are read from standard input. The first line contains an integer, the size of the input array.\nThe second line contains n space separated integers, the elements of the array.\nThe third line contains an integer, n, which denotes the number of tests.\nThe next n lines contains n space separated integers, the elements of the input array.\n\n\n-----Algorithm-----\nThe algorithm is as follows:\nFor each test:\nFor each number, we calculate the number of solutions possible, then determine the left bound of the answer, and the right bound of the answer.\nIf the answer is within the left bound, then we place it at the right boundary of the answer, and the number of solutions is equal to the number of solutions possible.\nOtherwise, if the answer is greater than the right bound, then we place it at the right boundary of the answer, and the number of solutions is equal to the number of solutions possible.\nFor the same test, we do the same process for the next test.\nAt the end, if we can find solution to any of the tests, we must return the answer.\n\n\n-----Constraints-----\nThere can be at most 5 solutions.\nThere can be at most 100 inputs.\n\n\n-----Sample Input 1-----\n\nsample_input_a = 1\nsample_input_b = 2\nsample_input_c = 4\n\n-----Sample Output 1-----\n\nsample_output_a = 3 2\nsample_output_b = 10 3\nsample_output_c = 4 9\n\n-----Sample Output 2-----\n\nsample_output_a = 5 4\nsample_output_b = 10 5\nsample_output_c = 6 9\n\n-----Sample Output 3-----\n\nsample_output_a = 5\nsample_output_b = 10\nsample_output_c = 6 9\n\n-----Sample Output 4-----\n\nsample_output_a = 9 9\nsample_output_b = A B\nsample_output_c = A B C D\n\n-----Sample Output 5-----\n\nsample_output_a = A\nsample_output_b = B\nsample_output_c = C D E F\n\n\n-----Sample Input 2-----\n\nsample_input_a = 2\nsample_input_b = 1\n\n-----Sample Output 2-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 3-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 4-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 5-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 6-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 7-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 8-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 9-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 10-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 11-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 12-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 13-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 14-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 15-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 16-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 17-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 18-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 19-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 20-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 21-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 22-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 23-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 24-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 25-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 26-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 27-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 28-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 29-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 30-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 31-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 32-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 33-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 34-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 35-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 36-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 37-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 38-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 39-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 40-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 41-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 42-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 43-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 44-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 45-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 46-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 47-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 48-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 49-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 50-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 51-----\n\nsample_output_a = 2\nsample_output_b = 1\n\n-----Sample Output 52-----\n\nsample_output_a = 2"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2.0\") == \"10 3\"\nassert solution(\"3.000000\") == \"10 3\"\nassert solution(\"4.00000\") == \"9 9\"\n\n\n-----Constraints-----\n0 <= x <= 10^5\n\n\n-----Time complexity-----\nO(n)\n\n\n-----Space Complexity-----\nO(n)\n\n\n-----TODO-----\n\"\"\""
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nimport math\nimport sys\nfrom heapq import heappop, heappush\n\nsys.setrecursionlimit(10 ** 6)\nINF = float('inf')\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n-----Basic idea-----\n\nGiven: $n$ vertices, $d$ edges, and $k$ edges and $v$ vertices,\n\nThe graph is directed if there is at least one edge between $v$ and $u$, or $u$ and $v$ are connected to each other by an edge with $k$ edges, and $v$ is not directly connected to $u$.\n\nIf $n$ vertices are given, then the tree is constructed by $d$ edges.\n\nAfter construction, the vertices are numbered from $1$ to $n$, with $n \\le k$. Each vertex $i$ has $i \\le d \\cdot k$ edges, $i \\le n$ vertices. Each edge $(u, v)$ is directed with $u \\le v$.\n\nIf the graph is connected, there are $n \\le k$ vertices that belong to the same graph.\n\n\n-----Detailed information-----\n\nVertex       Edge\n2          0\n3          0\n4          1\n5          1\n6          2\n7          3\n8          4\n9          5\n10        6\n11        7\n12        8\n13        9\n14        10\n15        11\n16        12\n17        13\n18        14\n19        15\n20        16\n21        17\n22        18\n23        19\n24        20\n25        21\n26        22\n27        23\n28        24\n29        25\n30        26\n31        27\n32        28\n33        29\n34        30\n35        31\n36        32\n37        33\n38        34\n39        35\n40        36\n41        37\n42        38\n43        39\n44        40\n45        41\n46        42\n47        43\n48        44\n49        45\n50        46\n51        47\n52        48\n53        49\n54        50\n55        51\n56        52\n57        53\n58        54\n59        55\n60        56\n61        57\n62        58\n63        59\n64        60\n65        61\n66        62\n67        63\n68        64\n69        65\n70        66\n71        67\n72        68\n73        69\n74        70\n75        71\n76        72\n77        73\n78        74\n79        75\n80        76\n81        77\n82        78\n83        79\n84        80\n85        81\n86        82\n87        83\n88        84\n89        85\n90        86\n91        87\n92        88\n93        89\n94        90\n95        91\n96        92\n97        93\n98        94\n99        95\n100        96\n101        97\n102        98\n103        99\n104        100\n105        101\n106        102\n107        103\n108        104\n109        105\n110        106\n111        107\n112        108\n113        109\n114        110\n115        111\n116        112\n117        113\n118        114\n119        115\n120        116\n121        117\n122        118\n123        119\n124        120\n125        121\n126        122\n127        123\n128        124\n129        125\n130        126\n131        127\n132        128\n133        129\n134        130\n135        131\n136        132\n137        133\n138        134\n139        135\n140        136\n141        137\n142        138\n143        139\n144        140\n145        141\n146        142\n147        143\n148        144\n149        145\n150        146\n151        147\n152        148\n153        149\n154        150\n155        151\n156        152\n157        153\n158        154\n159        155\n160        156\n161        157\n162        158\n163        159\n164        160\n165        161\n166        162\n167        163\n168        164\n169        165\n170        166\n171        167\n172        168\n173        169\n174        170\n175        171\n176        172\n177        173\n178        174\n179        175\n180        176\n181        177\n182        178\n183        179\n184        180\n185        181\n186        182\n187        183\n188        184\n189        185\n190        186\n191        187\n192        188\n193        189\n194        190\n195        191\n196        192\n197        193\n198        194\n199        195\n200        196\n201        197\n202        198\n203        199\n204        200\n205        201\n206        202\n207        203\n208        204\n209        205\n210        206\n211        207\n212        208\n213        209\n214        210\n215        211\n216        212\n217        213\n218        214\n219        215\n220        216\n221        217\n222        218\n223        219\n224        220\n225        221\n226        222\n227        223\n228        224\n229        225\n230        226\n231        227\n232        228\n233        229\n234        230\n235        231\n236        232\n237        233\n238        234\n239        235\n240        236\n241        237\n242        238\n243        239\n244        240\n245        241\n246        242\n247        243\n248        244\n249        245\n250        246\n251        247\n252        248\n253        249\n254        250\n255        251\n256        252\n257        253\n258        254\n259        255\n260        256\n261        257\n262        258\n263        259\n264        260\n265        261\n266        262\n267        263\n268        264\n269        265\n270        266\n271        267\n272        268\n273        269\n274        270\n275        271\n276        272\n277        273\n278        274\n279        275\n280        276\n281        277\n282        278\n283        279\n284        280\n285        281\n286        282\n287        283\n288        284\n289        285\n290        286\n291        287\n292        288\n293        289\n294        290\n295        291\n296        292\n297        293\n298        294\n299        295\n300        296\n301        297\n302        298\n303        299\n304        300\n305        301\n306        302\n307        303\n308        304\n309        305\n310        306\n311        307\n312        308\n313        309\n314        310\n315        311\n316        312\n317        313\n318        314\n319        315\n320        316\n321        317\n322        318\n323        319\n324        320\n325        321\n326        322\n327        323\n328        324\n329        325\n330        326\n331        327\n332        328\n333        329\n334        330\n335        331\n336        332\n337        333\n338        334\n339        335\n340"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\n###\n###\n\n\nimport heapq\nimport sys"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('12') == 'YES'\nassert solution('13') == 'NO'\nassert solution('14') == 'NO'\nassert solution('15') == 'YES'\nassert solution('16') == 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('7') == 'YES'\nassert solution('6') == 'NO'\nassert solution('10') == 'YES'\nassert solution('3') == 'YES'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"2 4\") == \"NO\"\nassert solution(\"2 5\") == \"NO\"\nassert solution(\"2 3 4\") == \"NO\"\nassert solution(\"2 7\") == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n1 <= n <= 1e5\n\n1 <= d, k <= 4\n\n2 <= n, d <= 10^5\n\n\"\"\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '01010100','solution() returned incorrect result'\nassert solution(stdin) == '101100','solution() returned incorrect result'\nassert solution(stdin) == '1111','solution() returned incorrect result'\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2\", \"3\", \"3\", \"5\", \"5\", \"6\", \"6\", \"7\", \"7\"]) == \"01010100\"\nassert solution([\"1\", \"0\", \"1\", \"1\"]) == \"00010001\"\nassert solution([\"1\", \"1\", \"1\", \"0\"]) == \"00111100\"\nassert solution([\"1\", \"0\", \"1\", \"0\", \"1\", \"1\"]) == \"10111001\"\nassert solution([\"0\", \"1\", \"0\", \"1\"]) == \"11001000\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"111001\") == \"101100\"\nassert solution(\"01010100\") == \"101100\"\nassert solution(\"11000100\") == \"01010100\"\nassert solution(\"11000001\") == \"01101100\"\nassert solution(\"11010000\") == \"01101100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"2\", \"3\", \"1\"]) == \"01011\"\nassert solution([\"3\", \"5\", \"6\"]) == \"10100\"\nassert solution([\"1\", \"0\"]) == \"1101\"\nassert solution([\"1\", \"1\"]) == \"01\"\nassert solution([\"1\", \"1\", \"1\"]) == \"11\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"0011111111111111\"\nassert solution(input) == \"1110111011110111010111101100011101011110111100011111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(solution) == \"111100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2 2 1\",\n    \"3 3 3\"\n) == \"001101100100110\"\nassert solution(\n    \"4\",\n    \"4\"\n) == \"11101010111\"\nassert solution(\n    \"3\",\n    \"3\"\n) == \"1111110111\"\nassert solution(\n    \"5\",\n    \"5\"\n) == \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"101100\"\nassert solution(stdin) == \"01010100\""
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0110101', 'No answer'"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'YES', \"Run the program to see the output\""
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"ab\"), \"NO\"\nassert solution(\"aa\"), \"NO\"\nassert solution(\"ab\"), \"YES\"\nassert solution(\"bc\"), \"YES\"\nassert solution(\"cc\"), \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'NO'"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"abcd\") == \"NO\"\nassert solution(\"abc\") == \"YES\"\nassert solution(\"a\") == \"YES\"\nassert solution(\"abca\") == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"ab\", \"ab\", \"b\"]) == \"YES\"\nassert solution([\"a\", \"a\", \"b\"]) == \"YES\"\nassert solution([\"b\", \"b\", \"c\"]) == \"YES\"\nassert solution([\"a\", \"a\", \"c\"]) == \"YES\"\nassert solution([\"a\", \"b\", \"c\"]) == \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\", \"solution() returned an invalid solution\""
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ababcccbb\") == \"YES\"\nassert solution(\"cba\") == \"YES\"\nassert solution(\"aab\") == \"NO\"\nassert solution(\"aa\") == \"NO\""
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ab\", \"ab\") == \"YES\"\nassert solution(\"ab\", \"ac\") == \"YES\"\nassert solution(\"ab\", \"a\") == \"NO\"\nassert solution(\"ab\", \"b\") == \"NO\"\nassert solution(\"a\", \"\") == \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1, 3, 1, 1, 2) == \"3 1 2\"\nassert solution(3, 1, 2, 1, 2) == \"1 2 3\"\nassert solution(5, 4, -1, 1, 2) == \"1 2 3 4 5\"\nassert solution(6, 3, -1, 2, 2) == \"1 2 3 4 5 6\"\nassert solution(3, 2, -1, 1, 2) == \"1 2 3\""
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 1 1 1\"\n\"\"\""
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 1\") == \"-1\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == -1\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '1 1 1 1'"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5\") == \"3 1 2\"\nassert solution(\"-1 -1 -1\") == \"1 1 2\"\nassert solution(\"1 2 1\") == \"-1 2\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"1 2 1\") == \"2\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"-1\"\n\nInput\n4\n-1 1 1\n-1 2 2\n-1 3 3\n\nOutput\n-1\n\n\"\"\"\n\nn, q = map(int, input().split())\npermutation = []\n\nfor i in range(1, n + 1):\n    temp = list(map(int, input().split()))\n    permutation.append(temp)\n\nprint(permutation)\n\nfor i in range(1, n):\n    # temp = list(map(int, input().split()))\n    temp = [int(item) for item in list(input().split())]\n    temp.sort()\n    print(temp)\n    temp.remove(temp[0])\n    temp.append(temp[-1])\n    print(temp)\n    permutation.append(temp)\n\nprint(permutation)\n\nfor i in range(n-1):\n    temp = list(map(int, input().split()))\n    permutation.append(temp)\n\nfor i in range(1, n):\n    if permutation[i] == permutation[i-1]:\n        pass\n    else:\n        print(permutation[i])\n        break\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1\") == \"1 1 2\"\nassert solution(\"5\") == \"-1\"\nassert solution(\"5 -1 1 1\") == \"3 1 2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"2 -1 1 2\") == \"3 1 1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == -1\n\n\n-----Reminder-----\nPolycarp permutation code is very similar to the arrays. The second line of code contains a constant $q=q_1, q_2, \\dots, q_{n-1}$ of length $n-1$. Each value of $q_i = p_{i+1} - p_i$ should be contained in the array $q_i$.\n\nHere, $p_i=p_{i+1}-p_i$ means the value of $q_i$ is contained in $p_{i+1}-p_i$. That is, it means $p_i=p_{i+1}-p_i$ is not a permutation of $q_1, q_2, \\dots, q_{n-1}$ and is not a permutation of $q_1, q_2, \\dots, q_{n-1}$.\n\nInput\n5\n-1 2 2\n\nOutput\n-1 1 1 1\n\nInput\n5\n1 1 1 1 1 1 1 1\n\nOutput\n1 2 3 4 5\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3 1 2'\nassert solution(stdin) == '1 2 3 4 5'\nassert solution(stdin) == '1 1 1 1'\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"4\") == 5\nassert solution(\"5\") == 6\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 2 2 3 2\"), \"1\"\nassert solution(\"5 3 2 3 2\"), \"1\"\nassert solution(\"5 2 2 3\"), \"1\"\nassert solution(\"5 5\"), \"1\"\nassert solution(\"5 4\"), \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= x_1 <= 10^9\n1 <= x_2 <= 10^9\n1 <= x_i <= 10^9\n\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 0\") == \"1\"\nassert solution(\"5 1 0\") == \"2\"\nassert solution(\"5 2 3 3\") == \"2\"\nassert solution(\"5 2 3 4\") == \"1\"\nassert solution(\"5 2 4\") == \"0\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 1, \"error\"\nassert solution(1) == 1, \"error\"\nassert solution(1) == 1, \"error\"\nassert solution(1) == 1, \"error\"\nassert solution(1) == 1, \"error\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"2\", \"2\", \"1\", \"2\", \"1\", \"1\"]) == \"3\"\nassert solution([\"3\", \"1\", \"1\", \"3\", \"2\", \"1\"]) == \"2\"\nassert solution([\"2\", \"2\", \"2\", \"2\", \"3\", \"2\"]) == \"2\"\nassert solution([\"1\", \"2\", \"1\", \"2\", \"1\", \"1\"]) == \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"3\",\"2\",\"2\",\"3\",\"3\",\"3\",\"2\",\"2\",\"1\"]) == 5\n\n\n\"\"\"\nclass Solution:\n    def solution(self, x):\n        pass\n    "
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, 5) == 2\nassert solution(5, 3) == 2"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('10') == 5\nassert solution('5') == 2\nassert solution('4') == 3\nassert solution('3') == 1\nassert solution('2') == 0\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(10) == 5\n\n-----Bonus-----\nWe only need to calculate the minimum number of moves required to reach a square that contains the integer 10.\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n'''"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == 5\nassert solution(1) == 2\nassert solution(2) == 4\nassert solution(4) == 7\nassert solution(6) == 12\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(10) == 5"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 5"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"5\") == 5\n    assert solution(\"3\") == 3\n    assert solution(\"0\") == 0\n    assert solution(\"1\") == 1\n    assert solution(\"2\") == 1\n    "
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 0\nassert solution(10) == 5\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0) == 0\n\n------My Answer-----\nimport sys\nn = int(sys.stdin.readline().rstrip())"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"0\"\n\nprint(inp)\nassert solution(inp) == \"1\"\n\nprint(inp)\nassert solution(inp) == \"2\""
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0 1\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"119 226\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"0 15\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"0 15\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 0 3') == '3 3'\nassert solution('2 1 3') == '1 3'\nassert solution('3 1 3') == '2 3'\nassert solution('6 1 3') == '6 3'\nassert solution('1 3 0') == '0 3'\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('5') == '0'\nassert solution('5 5 5') == '3'\nassert solution('5 5 5') == '11'\nassert solution('5 5 5') == '119'\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution == \"3\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1 2 2 1 5 3\") == \"3\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"0 0 0 0 0\") == \"0\"\nassert solution(\"0 1 1 1 1\") == \"0\"\nassert solution(\"0 0 0 0 1\") == \"0\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('-5 -4 -3 -2 -1 0 1 2 3 4 5') == '3 4'\nassert solution('-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2 3'\nassert solution('-5 -4 -3 -2 -1 0 1 2 3 4 5') == '4 3'\nassert solution('-5 -4 -3 -2 -1 0 1 2 3 4 5') == '1 1 1 1'\nassert solution('-5 -4 -3 -2 -1 0 1 2 3 4 5') == '1 1 1 1'\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"11\"), \"Invalid Input\"\nassert solution(\"4\"), \"Invalid Input\"\nassert solution(\"-5\"), \"Invalid Input\"\nassert solution(\"5\"), \"Invalid Input\"\nassert solution(\"-3\"), \"Invalid Input\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3 4\\n2\\n3\\n2\\n4\\n1\\n1\\n2\\n1\\n\"\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3 2\"\nassert solution(\"11 -5 -4 -3 -2 0 1 2 3 4 5\") == \"2 3\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3 1\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3 1\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3 1\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"4 1 2 2 1 5 3\") == \"1\"\nassert solution(\"4 1 2 2 1 5 3\") == \"2\"\nassert solution(\"4 1 2 2 1 5 3\") == \"4\"\nassert solution(\"4 1 2 2 1 5 3\") == \"2\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"YES\"\nassert solution(inp) == \"NO\"\nassert solution(inp) == \"NO\"\nassert solution(inp) == \"NO\"\nassert solution(inp) == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 5 2 3\") == \"YES\"\nassert solution(\"12 3 4 5\") == \"YES\"\nassert solution(\"10 4 2\") == \"NO\"\nassert solution(\"2 1 3\") == \"NO\"\nassert solution(\"3 7 4 6\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"NO\"\nassert solution(\"10\") == \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('1 3 2') == 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\n\n\"\"\"\n\n\nimport numpy as np\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"4 3 2\") == \"YES\"\nassert solution(\"4 1 2 4\") == \"NO\"\nassert solution(\"4 6 7 2 3 1\") == \"YES\"\nassert solution(\"4 1 1 2 3 1\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, [1, 2, 3]) == 'YES'\nassert solution(3, [1, 1, 3]) == 'NO'\nassert solution(3, [1, 2]) == 'YES'\nassert solution(3, [2, 1]) == 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\"\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('abcdef') == '4'\nassert solution('abcd') == '4'\nassert solution('accd') == '4'\nassert solution('abdfec') == '0'\nassert solution('abdcef') == '0'\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('abcdef') == '3 5 4 5'\nassert solution('abcd') == '3 5 4 5'\nassert solution('abcdee') == '3 5 4 5'\nassert solution('abcdefd') == '3 5 4 5'\nassert solution('aabcef') == '3 5 4 5'\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"-1\"\n\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abcd\") == \"0\"\nassert solution(\"abc\") == \"0\"\nassert solution(\"abcde\") == \"0\"\nassert solution(\"abcdee\") == \"0\"\nassert solution(\"a\") == \"0\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"aabbcdefghiijo\") == \"ba\"\nassert solution(\"aabbbcd\") == \"abcde\"\nassert solution(\"\") == \"a\"\nassert solution(\"abc\") == \"cde\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdfeijo\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '-1'\n\nassert solution(stdin.replace('c', '')) == '4'\nassert solution(stdin.replace('d', '')) == '4'\nassert solution(stdin.replace('c', '1')) == '3'\nassert solution(stdin.replace('d', '2')) == '3'\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"abcd\") == \"abcdef\"\nassert solution(\"abdfg\") == \"abdcef\"\nassert solution(\"abdfe\") == \"abdff\"\nassert solution(\"abdfcf\") == \"abdfcf\""
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"abcdef\"\n    \"abdcef\"\n    \"abdcfe\"\n    \"abdfce\"\n    \"abdfec\"\n    \"abdfce\"\n    \"abdfec\"\n    \"abdfec\"\n) == \"fefce\"\n\nassert solution(\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n) == \"bcefghijklmnopqrstuvwxyz\"\n\nassert solution(\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n) == \"ccefghijklmnopqrstuvwxyz\"\n\nassert solution(\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n) == \"ccefghijklmnopqrstuvwxyz\"\n\nassert solution(\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n) == \"ccefghijklmnopqrstuvwxyz\""
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"abcdef\", \"abdcef\", \"abdcfe\", \"abdfce\", \"abdfec\"]) == \"4\"\nassert solution([\"abcef\", \"accd\", \"adfce\", \"adfec\", \"adfec\"]) == \"-1\"\n\n\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"abcdef\", \"abdcef\", \"abdcfe\", \"abdfce\", \"abdfec\"), \"error\"\nassert solution(\"abcde\", \"abcde\", \"abcde\", \"abcde\", \"abcde\"), \"error\"\nassert solution(\"abcde\", \"abcde\", \"abcde\", \"abcde\", \"abcde\"), \"error\"\nassert solution(\"abcde\", \"abcde\", \"abcde\", \"abcde\", \"abcde\"), \"error\"\nassert solution(\"abcde\", \"abcde\", \"abcde\", \"abcde\", \"abcde\"), \"error\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"SPPSPSPS\"\nassert solution(stdin) == \"PSS\"\nassert solution(stdin) == \"PPS\"\nassert solution(stdin) == \"SP\"\nassert solution(stdin) == \"SP\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"ba\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"ba\") == \"P\"\nassert solution(\"ba\") == \"PPS\"\nassert solution(\"abab\") == \"P\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'SP'\nassert solution(input()) == 'SP'\nassert solution(input()) == 'SP'\nassert solution(input()) == 'SP'\nassert solution(input()) == 'SP'\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"SPPSPSPS\"\nassert solution(stdin) == \"PSPSP\"\nassert solution(stdin) == \"PS\"\nassert solution(stdin) == \"SP\"\nassert solution(stdin) == \"SSS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"SPPSPSPS\"\nassert solution(stdin) == \"PSPS\"\nassert solution(stdin) == \"SPSP\"\nassert solution(stdin) == \"S\"\nassert solution(stdin) == \"SP\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'SP' or solution(stdin) == 'SPPSPSPS' or solution(stdin) == 'PS' or solution(stdin) == 'PSPSPSPS' or solution(stdin) == 'S' or solution(stdin) == 'SPSPSPSPS' or solution(stdin) == 'P' or solution(stdin) == 'PPSPSPSPS' or solution(stdin) == 'PPSPSPSPS' or solution(stdin) == 'PS' or solution(stdin) == 'PSPSPSPSPS' or solution(stdin) == 'SPS' or solution(stdin) == 'SPSPSPSPSPS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 'SPPSPSPS'\nassert solution(input) == 'SPPSP'\nassert solution(input) == 'SP'\nassert solution(input) == 'P'\nassert solution(input) == 'P'\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"PPSPSPS\"\nassert solution(stdin) == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'SPPSPSPS'"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"SSPPP\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n\n\n\n-----Examples-----\n\nInput\n3 5\n\nOutput\n3\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"21\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"6 9 8 10\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"3 4 3 2\") == \"1\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 7 5 1 3\") == \"1\"\nassert solution(\"5 4 6 7 3\") == \"4\"\nassert solution(\"0 0 0 0 0\") == \"0\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"1 3 1 5 1\") == \"3\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\n\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5 1 0\"]) == \"1\"\nassert solution([\"1 2 3 4\"]) == \"3\"\nassert solution([\"2 3 1\"]) == \"2\"\nassert solution([\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 88 89 90 91 92 93 94 95 96 97 98 99 100\"]) == \"100\"\nassert solution([\"5 5 4\"]) == \"1\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\n\n\n-----Constraints-----\n\n1 <= n <= 20\n1 <= k <= 10^3\n\n-----Time Limit-----\n\nO(n log n)\n\n\n-----Worst Case-----\n\nO(n^2)\n\n-----Space Limit-----\n\nO(n)\n\nExample 1:\n\nInput\n3\n1 1 0 1 1\n\nOutput\n2\n\nExplanation:\n\n2 people in the house are pairwise distinct, so if people from exactly 2 pairs of flats will turn off the light, then nobody will be disturbed.\n\nThe minimum number of pairs of flats that are pairwise distinct is 2.\n\nExample 2:\n\nInput\n3\n1 0 1 0 0\n\nOutput\n0\n\nExplanation:\n\nThere are no pairs of flats that are pairwise distinct.\n\nExample 3:\n\nInput\n3\n0 0 0 0 0\n\nOutput\n3\n\nExplanation:\n\nThere are no pairs of flats that are pairwise distinct.\n\nExample 4:\n\nInput\n3\n1 1 0 1 1\n\nOutput\n0\n\nExplanation:\n\nThere are no pairs of flats that are pairwise distinct.\n\n\n-----Note-----\n\nIn the first example people from flats $2$ and $7$ or $4$ and $7$ can turn off the light and nobody will be disturbed. It can be shown that there is no better answer in this example.\n\nThere are no disturbed people in second and third examples.\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"2 3 0 1 1 0 1 0 1 0\"\n    ),\n\"2\"\nassert solution(\n    \"5 4\"\n    ),\n\"0\"\nassert solution(\n    \"1 1 0 1 1\"\n    ),\n\"1\"\nassert solution(\n    \"1 1 1 1 1\"\n    ),\n\"0\"\nassert solution(\n    \"1 1 1 1 1\"\n    ),\n\"1\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"10\", \"1 1 0 1 1 0 1 0 1 0\"]) == \"1\"\nassert solution([\"10\", \"1 1 0 1 1 0 1 0 1 0\"]) == \"1\"\nassert solution([\"10\", \"1 1 0 1 1 0 1 0 1 0\"]) == \"1\"\nassert solution([\"10\", \"1 1 1 1\"]) == \"1\"\nassert solution([\"10\", \"1 1 1 1\"]) == \"1\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10\\n5\\n3\\n2\\n1\\n5\\n7\\n4\\n2\\n7\\n1\\n5\\n6\\n7\\n5\\n7\\n5\\n7\\n1\\n5\\n6\\n4\\n1\\n5\\n7\\n1\\n5\\n5\\n7\\n1\\n6\\n7\\n3\\n1\\n5\\n7\\n1\\n6\\n7\\n3\\n1\\n5\\n7\\n4\\n7\\n1\\n1\\n5\\n7\\n1\\n5\\n6\\n7\\n3\\n1\\n5\\n7\\n1\\n5\\n7\\n4\\n7\\n1\\n5\\n7\\n1\\n5\\n7\\n1\\n6\\n7\\n1\\n1\\n5\\n7\\n1\\n5\\n7\\n1\\n1\\n5\\n1\\n7\\n1\\n1\\n5\\n7\\n1\\n1\\n7\\n1\\n1\\n5\\n7\\n1\\n7\\n1\\n7\\n1\\n1\\n5\\n1\\n7\\n1\\n1\\n5\\n7\\n1\\n7\\n7\\n3\\n1\\n5\\n7\\n1\\n5\\n7\\n1\\n5\\n7\\n1\\n6\\n7\\n1\\n5\\n7\\n1\\n1\\n5\\n7\\n1\\n5\\n7\\n1\\n1\\n5\\n7\\n1\\n5\\n7\\n1\\n1\\n7\\n1\\n1\\n5\\n7\\n1\\n7\\n1\\n1\\n5\\n7\\n1\\n1\\n1\\n5\\n7\\n1\\n1\\n1\\n1\\n7\\n1\\n5\\n7\\n1\\n1\\n5\\n7\\n1\\n1\\n1\\n5\\n7\\n1\\n1\\n7\\n1\\n1\\n5\\n7\\n1\\n1\\n1\\n5\\n7\\n1\\n1\\n7\\n1\\n1\\n1\\n5\\n1\\n7\\n1\\n1\\n7\\n1\\n1\\n7\\n1\\n1\\n1\\n1\\n7\\n1\\n7\\n1\\n1\\n7\\n1\\n1\\n1\\n1\\n1\\n7\\n1\\n1\\n7\\n1\\n1\\n1\\n7\\n1\\n1\\n1\\n1\\n1\\n7\\n1\\n1\\n1\\n1\\n1\\n1\\n7\\n1\\n7\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n7\\n1\\n1\\n1\\n7\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n7\\n1\\n1\\n1\\n1\\n1\\n7\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n7\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n7\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5\") == 0\nassert solution(\"4\") == 0\nassert solution(\"4\") == 0\nassert solution(\"7\") == 2\nassert solution(\"4\") == 0\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1,1,1,0,1) == 1, \"1\"\nassert solution(1,2,1,0,0) == 0, \"0\"\nassert solution(1,3,0,0,0) == 0, \"0\"\nassert solution(2,2,0,1,1) == 2, \"2\"\nassert solution(2,3,0,1,1) == 2, \"2\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i \\le 10^12\n\nA = [2, 4, 6, 2, 10]\nA = [1, 2, 4, 6, 2, 10]\nA = [1, 2, 4, 6, 2, 10, 12, 18, 30, 18, 30]\nA = [1, 2, 4, 6, 2, 10, 12, 18, 30, 18, 30, 12, 12, 12, 12, 12, 12]\n\nThis is a solution.\n\n\nExplanation\n\nThe array $a$ has several subarrays with positive integers. The common divisors are:\n\n0 and 1\n1, 2\n2, 4, 6\n2, 6\n2, 12\n12, 18, 30\n30, 36, 60, 120\n60, 120, 36\n60, 120, 36, 12\n60, 120, 36, 12, 12\n60, 120, 36, 12, 12, 12\n60, 120, 36, 12, 12, 12, 12\n60, 120, 36, 12, 12, 12, 12, 12\n60, 120, 36, 12, 12, 12, 12, 12, 12\n60, 120, 36, 12, 12, 12, 12, 12, 12\n60, 120, 36, 12, 12, 12, 12, 12, 12, 12\n60, 120, 36, 12, 12, 12, 12, 12, 12, 12\n60, 120, 36, 12, 12, 12, 12, 12, 12, 12, 12\n60, 120, 36, 12, 12, 12, 12, 12, 12, 12, 12, 12\n60, 120, 36, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12\n60, 120, 36, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12\n60, 120, 36, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12\n60, 120, 36, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12\n60, 120, 36, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin: str) == 9, \"The solution for this test case is not correct\"\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"1 2 3 4 5\"\nassert solution([\"6\",\"90\",\"12\",\"18\",\"30\",\"18\",\"60\",\"60\"]) == \"4\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 5\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 1\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"No\"\n\n\n-----Example 1-----\n\nInput\n5\n1 2 3 4 5\n\nOutput\n1\n\nInput\n6\n6 90 12 18 30 18\n\nOutput\n3\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"4\""
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\", \"1\"]) == \"1\"\nassert solution([\"6\", \"90\", \"12\", \"18\", \"30\", \"18\", \"90\"]) == \"4\"\nassert solution([\"3\", \"1\"]) == \"1\"\nassert solution([\"2\", \"6\", \"90\", \"12\", \"18\", \"30\", \"18\", \"90\"]) == \"3\"\nassert solution([\"10\"]) == \"0\""
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 10"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 2\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 4"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(solution()), '0'\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, [1]) == 1\nassert solution(1, [2]) == 1\nassert solution(1, [3, 3, 3, 4, 4, 4]) == 1\nassert solution(1, [1, 4, 4]) == 1\nassert solution(1, [2, 2, 1, 1]) == 1\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin = \"6\"\n) == \"2\"\nassert solution(\n    stdin = \"1 2 4 3 3 2\"\n) == \"1\"\nassert solution(\n    stdin = \"1 2 4 3 3 2 5 6\"\n) == \"2\"\nassert solution(\n    stdin = \"1 3 4 5 6\"\n) == \"1\"\nassert solution(\n    stdin = \"2 1 2 3 3 2\"\n) == \"1\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 4 3 3 2\") == 2\nassert solution(\"1 1 1 1 1 1 1 1 1\") == 1\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 4 3 3 2\") == \"2\"\nassert solution(\"1 2 4 3 3 2\") == \"1\"\nassert solution(\"1 2 4 3 3 2\") == \"1\"\nassert solution(\"1 2 4 3 3 2\") == \"0\"\nassert solution(\"1 2 4 3 3 2\") == \"0\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(3)\nassert solution(stdin) == str(-1)\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('10 3 10') == 3\nassert solution('5 3 10') == 3\nassert solution('5 10 3') == 3\nassert solution('5 2 3') == 3\nassert solution('5 3 2') == -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('6 2\\n0 1 1\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '-1'\nassert solution('5 3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '3'\nassert solution('5 10\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '3'\nassert solution('10 3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '2'\nassert solution('10 3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '2'\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 3') == 3\n\nassert solution('10 3') == -1\n\nassert solution('0 0 0 0 0') == 3\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 5 1\") == \"3\"\nassert solution(\"3 3 3 3 3 3 3 3 3 3 3\") == \"3\"\nassert solution(\"3 3 3 3 3 3 3 3 3 3 3\") == \"3\"\nassert solution(\"3 3 3 3 3 3 3 3 3 3 3\") == \"3\"\nassert solution(\"3 3 3 3 3 3 3 3 3 3 3\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\".\\n.\\n\") == \"3\"\nassert solution(\".\\n.\\n\") == -1\nassert solution(\".\\n.\\n\") == 3\nassert solution(\".\\n.\\n\") == -1\nassert solution(\".\\n.\\n\") == -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == 3\nassert solution(\"5 3\") == 2\nassert solution(\"5 10\") == -1\nassert solution(\"10 3\") == 3\nassert solution(\"10 20\") == -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 10 5 0 0 1 0 0 0 0') == 3\nassert solution('3 2') == 2\nassert solution('5 3') == 2\nassert solution('10 3') == 2\nassert solution('5 10') == -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 0 1\") == \"3\"\nassert solution(\"1 1 0 0 1\") == \"2\"\nassert solution(\"1 0 0 0 0\") == \"1\"\nassert solution(\"0 0 0 0 0\") == \"0\"\nassert solution(\"1 0 0 0 1\") == \"2\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3\"\n) == \"3\"\nassert solution(\n    \"2\"\n) == \"3\"\nassert solution(\n    \"5\"\n) == \"3\""
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"3\""
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"9\") == \"3\"\nassert solution(\"4\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"12\") == \"0\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(f) == \"3\"\n'''"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"3\"\n\n'''"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3\") == 3\nassert solution(\"5\") == 6\nassert solution(\"4\") == 4\nassert solution(\"1\") == 1\nassert solution(\"1\") == 1\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5, \"OK\"\nassert solution(stdin) == 4, \"OK\"\nassert solution(stdin) == 3, \"OK\"\nassert solution(stdin) == 2, \"OK\"\nassert solution(stdin) == 2, \"OK\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(str) == '0'"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution( \"((()\" ) == 6)\nassert solution( \"((()\" ) == 0\nassert solution( \"((()\" ) == 0\nassert solution( \"((()\" ) == 3\nassert solution( \"()))((()\" ) == 1\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1, \"solution failed\"\n\nprint(\"Test passed!\")"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('((()' == '')\nassert solution('((()()' == '(()' == '()()' == '')\nassert solution('(((()' == '')\nassert solution('((()((()' == '')\nassert solution('((()())' == '())()' == '()()' == '(()' == ''\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1\n\n-----Constraints-----\n1 <= n <= 10^6\n\n\"\"\""
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('((()') == 0\nassert solution('(())') == 1\nassert solution('(((()') == 2\nassert solution('(())') == 2\nassert solution('())())') == 3\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 0"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('abcde') == 3\nassert solution('asdfasdf') == 2"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 1\nassert solution('abcde') == 2\nassert solution('asdfasdf') == 0\nassert solution('abcde') == 0"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"aaaabbbcccccdddaaaabcccbaaabcccccdcdddaababccccbcccdcddda\") == 3\nassert solution(\"abcabcabc\") == 2\nassert solution(\"abcabcabc\") == 1\nassert solution(\"abcabcabc\") == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"test\") == \"test\"\nassert solution(\"test\") == \"test\"\nassert solution(\"tt\") == \"tt\"\nassert solution(\"tset\") == \"tset\"\nassert solution(\"contest\") == \"contest\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('asdfasdf') == 2\nassert solution('abcde') == 0\nassert solution('baaba') == 1\nassert solution('bbaba') == 3\n\n\n----------Test Cases----------\ntest 1: [\"abcde\",\"ab\",\"abc\"]\ntest 2: [\"asdfasdf\",\"abc\",\"a\",\"b\",\"abc\",\"b\",\"d\"]\ntest 3: [\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"]\ntest 4: [\"a\",\"a\",\"a\",\"a\",\"a\"]\ntest 5: [\"asdfasdf\",\"a\",\"a\",\"a\",\"a\",\"a\"]\ntest 6: [\"asdfasdf\",\"aa\",\"aa\",\"aa\",\"aa\",\"aa\",\"aa\"]\n\nassert solution('asdfasdf') == 2\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('tst', 'tset') == 3\nassert solution('test', 'tst') == 3\nassert solution('a', 'a') == 2\nassert solution('abc', 'abc') == 2\nassert solution('aab', 'aab') == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n\n\n\"\"\"\nIn case $l\\geq$ $r\\leq$ $|s|$ the solution is performed by removing $l\\leq$ $r\\leq$ $|s|$ characters.\n\n\"\"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"\\\"\\\"\\\")\nassert solution(\\\"\\\"\\\")\nassert solution(\\\"\\\"\\\"\\\")\nassert solution(\\\"\\\")\nassert solution(\\\"\\\")\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"2\"\n'''"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('abcde') == '5'\nassert solution('aabcdee') == '12'\nassert solution('aaaaabbbbbccdddd') == '10'"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(a=1, b=1, c=1, d=1) == 1\nassert solution(a=2, b=2, c=2, d=2) == 2\nassert solution(a=1, b=2, c=1, d=3) == 1\nassert solution(a=2, b=1, c=2, d=3) == 2\nassert solution(a=2, b=1, c=2, d=3) == 2\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"2 2 2 2\") == \"2\"\nassert solution(\"3 3 3 3\") == \"1\"\nassert solution(\"4 4 4 4\") == \"1\"\nassert solution(\"5 5 5 5\") == \"1\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"2 1 1\") == 2, \"Should be 2\"\nassert solution(\n    \"3 2 4\") == 4, \"Should be 4\"\nassert solution(\n    \"2 2 3 4\") == 4, \"Should be 4\"\nassert solution(\n    \"1 2 2\") == 2, \"Should be 2\"\nassert solution(\n    \"1 3 3\") == 2, \"Should be 2\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 9 1 4 4 6 7\") == \"2\"\nassert solution(\"9 9 1 4 4 6 7\") == \"2\"\nassert solution(\"9 2 4 5 6 7\") == \"2\"\nassert solution(\"9 4 3 5 7\") == \"2\"\nassert solution(\"5 3 2 4 7\") == \"2\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '2'\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"3 4\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"4 7\") == \"3\"\nassert solution(\"6 7\") == \"1\"\nassert solution(\"7 5\") == \"2\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom functools import reduce\nfrom operator import mul\nfrom typing import DefaultDict, DefaultDict\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 4 5 6 7\") == \"2 3 4 5 6 7\"\nassert solution(\"3 2 4 3\") == \"3 2 4 3\"\nassert solution(\"2 6\") == \"2 6\"\nassert solution(\"1 2 3 4 5 6 7\") == \"1 2 3 4 5 6 7\"\nassert solution(\"5 1 2 4 6 7\") == \"3 4 5 6 7\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\n\n--------------------------\nType-it: int\nProblem-it: for all possible integer values, use the following formula:\na_i = a^i + b^i + c^i + d^i + e^i"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"2\"\n\n-----sample input-----\n2\n4\n\n-----sample output-----\n2\n\nIf we choose K=5 or 6, Problem 1, 5, and 6 will be for ARCs, Problem 2, 3, and 4 will be for ABCs, and the objective is achieved.\nThus, the answer is 2."
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3 4 5 6\") == 2\nassert solution(\"1 2 3 4\") == 2\nassert solution(\"1 3 4 5 6\") == 2\nassert solution(\"2 3 4 5 6\") == 2\nassert solution(\"1 4 5 6 7\") == 2\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 4 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 5, 6) == 2\nassert solution(1, 4, 5) == 1\nassert solution(6, 1, 4) == 1\nassert solution(9, 2, 2) == 1\nassert solution(10, 5, 5) == 1\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 5 8\") == \"3\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"4 1\") == \"2\"\nassert solution(\"1 2 2\") == \"3\"\nassert solution(\"1 3 2\") == \"2\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"0 0\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"0 1\") == \"2\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"16 17 14 20 20 11 22\") == \"15\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"7 24 21 23\") == 3\n\nassert solution(\"16 17 14 20 20 11 22\") == 7\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('7 24 21 23') == '3'\nassert solution('7 24 21 23') == '1'\nassert solution('7 24 21 23') == '0'\nassert solution('7 24 21 23') == '3'\nassert solution('7 24 21 23') == '1'\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"7 24 21 23 - 2\") == \"4\"\nassert solution(\"7 24 21 23 - 2 - 1\") == \"5\"\nassert solution(\"7 24 21 23 - 2 - 1 - 1\") == \"4\"\nassert solution(\"7 24 21 23 - 2 - 1 - 1 - 1\") == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"16 17 14 20 20 11 22\") == \"3\"\nassert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"0 3\") == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 24 21 23') == '3'\nassert solution('1 1 3') == '3'\nassert solution('1 1 0') == '0'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 1') == '1'\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 24 20 21 23\") == \"5\"\nassert solution(\"2 21 23 17 14 20\") == \"5\"\nassert solution(\"4 7 20\") == \"5\"\nassert solution(\"4 2 20\") == \"3\"\nassert solution(\"4 1 20\") == \"2\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('10') == 4\nassert solution('100') == 3\nassert solution('200') == 0\nassert solution('10') == 1\nassert solution('10') == 1\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 5 6 7 10 21 23 24 49\") == \"4\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_1, a_2, \\dots, a_n <= 10^9\n0 <= a_i \\le a_j \\le a_j + 2\na_i < a_j + 1\na_i % 2 = 0\na_i > 0\na_i < a_n\n0 <= i < n\n\ninput = \"1 2 5 6 7 10 21 23 24 49\"\noutput = \"4\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"1 2 3 6 7 10 21 23 24 49\") == \"1\"\nassert solution(\"1 2 3 4 5 6 7 10 21 23 24 49\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7 10 21 23 24 49\") == \"4\"\n\n\n--------------------------------------------------------------------------------\n\nBest Time to Buy and Sell Stock:\n\nBest Time to Buy and Sell Stock is defined as the maximum of the following three values:\n\nThe max value of the stock purchased by the first customer at the moment (which would be at the maximum price of the stock), the max value of the stock purchased by the second customer at the moment (which would be at the maximum price of the stock), and the max value of the stock purchased by the third customer at the moment (which would be at the maximum price of the stock).\nFor example, if we have the following three stock purchased by the first customer at the current price, and we have the following three stock purchased by the second customer at the current price, and the third customer at the current price, the max value is 5.\nIf we have the following three stock purchased by the second customer at the current price, and we have the following three stock purchased by the third customer at the current price, the max value is 9.\nIf we have the following three stock purchased by the third customer at the current price, and we have the following three stock purchased by the fourth customer at the current price, the max value is 9.\nIf we have the following three stock purchased by the fourth customer at the current price, the max value is 15.\nIf we have the following three stock purchased by the fourth customer at the current price, and we have the following three stock purchased by the last customer at the current price, the max value is 8.\nThe stock at the last customer is the maximum value of the stock purchased by the fourth customer.\n\nFind the best value of the stock purchased by the most customers.\n\nThe stock at the lowest index is the smallest such that the stock at the lowest index is not included in the sale.\n\nInput\n\nThe first line contains an integer $n$, the number of problems.\n\nThe next line contains $n$ integers $a_1, a_2, \\dots, a_n$ (where $1 \\le a_i \\le 10^9$) \u2014 difficulties of the problems. It is guaranteed that difficulties of the problems are distinct and are given in the increasing order.\n\nOutput\n\nPrint a single integer \u2014 the best value of the stock purchased by the most customers.\n\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input:\n    [\"10\", \"1 2 5 6 7 10 21 23 24 49\"]\n) == \"4\"\nassert solution(\n    input:\n    [\"5\", \"2 10 50 110 250\"]\n) == \"3\"\nassert solution(\n    input:\n    [\"6\", \"4 7 12 100 150 199\"]\n) == \"1\"\nassert solution(\n    input:\n    [\"6\", \"3 7 12 100 150 199\"]\n) == \"2\"\nassert solution(\n    input:\n    [\"6\", \"3 7 12 100 150 199\"]\n) == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 5\nassert solution(stdin) == 6\nassert solution(stdin) == 4\nassert solution(stdin) == 10\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"6 7 12 100 150 199\") == \"4\"\nassert solution(\"1\") == \"1\"\n\n\n-----Constraints-----\n0 \u2264 n \u2264 1000\n\n\n-----Solutions-----\n1.\n\nInput:\n10\n1 2 5 6 7 10 21 23 24 49\n\nOutput:\n4\n\nInput:\n5\n2 10 50 110 250\n\nOutput:\n1\n\nInput:\n6\n4 7 12 100 150 199\n\nOutput:\n3\n\nInput:\n6\n5 7 12 100 150 199\n\nOutput:\n3\n\nInput:\n10\n1 2 5 6 7 10 21 23 24 49\n\nOutput:\n1\n\n---Time Complexity---\nO(n)\n\nO(n) for every problem in the problemset.\nO(n) for the worst case.\nO(n) for all problems.\nO(n) for all problems in the problemset.\nO(1) for this solution.\n\nNlogn\n\nO(n) for every problem in the problemset.\nO(n) for the worst case.\nO(n) for all problems.\nO(1) for this solution.\nO(n) for all problems in the problemset.\nO(n) for all problems in the problemset.\nO(1) for this solution.\n\n\n----Examples----\nInput:\n10\n1 2 5 6 7 10 21 23 24 49\n\nOutput:\n4\n\nInput:\n6\n4 7 12 100 150 199\n\nOutput:\n3\n\nInput:\n10\n1 2 5 6 7 10 21 23 24 49\n\nOutput:\n1\n\nInput:\n1 1\n\nOutput:\n1\n\n\n------Hints----\nTo see all different valid solutions, you should write all combinations of $a_1, a_2, \\dots, a_p$ and check if $a_{i_1}, a_{i_2}, \\dots, a_{i_p}$ are the only valid solutions.\nTo find the maximum number of valid solutions for a problem in the given problemset, you can use the naive approach with the brute force approach.\nTo solve the problem with O(n) extra space, we just have to go through the problems and put the result in a list.\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '4'\n\n\n-----Constraints-----\n\n1 <= n <= 2^9\n\n\n-----Time Limit EXceeded-----\nTime Limit: 1 second\nMemory Limit: 1GB\n\n\n-----Problems-----\nThe program is solved using DP. There is a dp[i] where dp[i] is the number of valid problems\nthat satisfy the constraints.\n\n\n'''\nclass Solution:\n    def getMaxN(self, a, n, dp):\n        if n == 0:\n            return 0\n        \n        if a[n-1] == 0:\n            return 1\n        \n        if n == 0:\n            return 0\n        \n        if a[n-1] > 0:\n            return 1 + self.getMaxN(a, n-1, dp)\n        \n        if a[n-1] < 0:\n            return -1 + self.getMaxN(a, n-1, dp)\n        \n        return self.getMaxN(a, n-1, dp)\n        \n    \n    def solve(self, stdin: str) -> str:\n        \n        n = int(stdin.strip())\n        a = [0]*(n+1)\n        \n        for i in range(n):\n            a[i+1] = int(stdin.strip())\n        \n        dp = [0]*(n+1)\n        for i in range(1, n+1):\n            for j in range(1, n+1):\n                if a[i] > 0:\n                    dp[i] = max(dp[i-1], self.getMaxN(a, i, dp) + self.getMaxN(a, j, dp))\n                    \n        return str(dp[n])\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\\n\") == \"4\"\nassert solution(\"2 5\\n\") == \"3\"\nassert solution(\"1 1\\n\") == \"1\"\nassert solution(\"1 1\\n\") == \"3\"\nassert solution(\"2 3\\n\") == \"4\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('4 10 3 2'), '3'\nassert solution('4 10 2'), '1'\nassert solution('5 11 1'), '6'\nassert solution('6 7 8'), '2'\nassert solution('7 11 1'), '5'\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == (1, 2)\n\"\"\""
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"2 4 8 3 6\",\"10 2 11 3 7\",\"10 5 10 1 5\",\"10 5 5 5 5\"]) == \"1 4\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i, a_j < 10^5\n\nTime Limit: 1 sec\n\nGood luck!\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1 2'\n\nassert solution(stdin) == '1 2 3 4 5 6 7'\nassert solution(stdin) == '1 4'\nassert solution(stdin) == '2 4'\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 2 4 3 4 3 4') == '1 4'\nassert solution('2 3 4 5 6 7 8 9 10') == '1 3'\nassert solution('4 4 4') == '4'\nassert solution('6') == '6'\nassert solution('6 9 10 11') == '4'\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 4\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == [1, 2]\nassert solution(stdin) == [1, 2, 4, 8, 10]\nassert solution(stdin) == [1, 2, 5, 11, 13]\nassert solution(stdin) == [2, 6, 11, 20, 24]\nassert solution(stdin) == [2, 5, 10, 12, 15]\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"2\", \"4\", \"5\"]) == \"1\"\nassert solution([\"2\", \"5\", \"8\"]) == \"2\"\nassert solution([\"5\", \"8\", \"11\"]) == \"4\"\nassert solution([\"1\", \"4\", \"8\"]) == \"1\"\nassert solution([\"5\", \"10\", \"1\"]) == \"3\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, [2, 4, 8, 3, 6]) == 1\nassert solution(6, [2, 5, 10, 1, 10]) == 2\nassert solution(7, [2, 5, 10, 1, 10]) == 4\nassert solution(8, [2, 4, 8, 3, 6]) == 1\nassert solution(9, [2, 5, 10, 1, 10]) == 2\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 6\"\nassert solution(stdin) == \"1 7\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution == \"021\", 'expected \"021\", but got {!r}'.format(solution)\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"21\"\nassert solution(\"3\") == \"111\"\nassert solution(\"4\") == \"111\"\nassert solution(\"5\") == \"111\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"211200\") == \"010120\"\nassert solution(\"10100\") == \"000101\"\nassert solution(\"1101111\") == \"0001111000111\"\nassert solution(\"1101011101011\") == \"00010111010101010101\"\nassert solution(\"111010010101010110010100100010101100101\") == \"000101010101010110010100100010101100101\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1010'"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"211200\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('11' '011') == '110101'\nassert solution('11' '011') == '110'\nassert solution('11' '011') == '11'\nassert solution('11' '011') == '01111'\nassert solution('11' '011') == '11011'\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == \"210110\"\nassert solution(5) == \"210110\"\nassert solution(4) == \"100001\"\nassert solution(3) == \"1100110\"\nassert solution(2) == \"111011\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3) == '021'\nassert solution(6) == '001122'\nassert solution(6) == '211200'\nassert solution(5) == '211201'\nassert solution(5) == '211201'\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('11210101111') == '110110101111'\nassert solution('10110101111') == '10110101111'\nassert solution('110110101111') == '110110101111'\nassert solution('111111111') == '11111111111'\nassert solution('1111111111') == '111111111111'"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"011021\""
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == str(4)\nassert solution(input()) == str(1)\nassert solution(input()) == str(0)\nassert solution(input()) == str(0)\nassert solution(input()) == str(0)\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"7 5\"\n) == \"9\"\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '4'\n'''\n\nn = int(input())\nm = list(map(int, input().split()))\nanswer = 0\n\nn, m = sorted(m, reverse=True)"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '7'\nassert solution(stdin) == '8'\nassert solution(stdin) == '8'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 6\n-----Sample Input-----\n1 2\n1 1\n\n-----Sample Output-----\n4\n\nThere are four ways to climb up the stairs under the condition, modulo 1\\ 000\\ 000\\ 007.\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3\\n'),\n'''\n1.\n2.\n3.\n4.\n5.\n6.\n\n'''\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('',''), 'Empty string!'\nassert solution('5',''), '5 does not exist'\nassert solution('4',''), '4 does not exist'\nassert solution('3',''), '3 does not exist'\nassert solution('2',''), '2 does not exist'\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 7\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2\\ 3\\ 5\\ 7\\ 8') == 4\nassert solution('4\\ 3\\ 5\\ 7\\ 8') == 6\nassert solution('5\\ 3\\ 5\\ 7\\ 8') == 6\nassert solution('6\\ 3\\ 5\\ 7\\ 8') == 4\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"6 0 5\") == \"5\"\nassert solution(\"1 2 5\") == \"3\"\nassert solution(\"3 2 6\") == \"1\"\nassert solution(\"4 1 0\") == \"4\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"2\"\n\n\"\"\"\n\nimport math\nfrom typing import List\nfrom itertools import permutations"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(test) == \"3\"\n\n*******************************************************************************************************************************************************\n\nGiven the following array:\n[5,1,3,2,1,4]\n\nFind the minimum absolute value of 5 in this array\n\n------------------------------------------------------------------------------------------------------------------------------------------\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"4\"\n\n'''\n\nimport sys\nfrom collections import deque\ninput = sys.stdin.readline\ndx = [-1, 1, 0, 0]\ndy = [0, 0, -1, 1]\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '2'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(11) == 2\nassert solution(14) == 0\nassert solution(61441) == 2\nassert solution(571576) == 10\nassert solution(2128506) == 3"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2) == 2\nassert solution(0) == 1\nassert solution(314159) == 3\nassert solution(571576) == 1\nassert solution(3128506) == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('aabbc') == 'aabbc'\nassert solution('abacd') == 'abacd'\nassert solution('abcdef') == 'abcdef'\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"12\") == \"1\"\nassert solution(\"13\") == \"0\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"2128506\"\n) == 2\nassert solution(\"571576\") == 0\nassert solution(\"62245\") == 1\nassert solution(\"572792\") == 5\nassert solution(\"12346789\") == 17\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"hello\") == \"h\"\nassert solution(\"\") == \"l\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"z\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"Z\"\nassert solution(\"abcdabcde\") == \"a\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('0') == 0\nassert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 1\nassert solution('4') == 2\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1760\") == \"14\"\nassert solution(\"28110\") == \"2\"\nassert solution(\"79999\") == \"0\"\nassert solution(\"62000000\") == \"1\"\nassert solution(\"5644467890\") == \"2\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 10\nassert solution(stdin) == 0\nassert solution(stdin) == 2\nassert solution(stdin) == 1\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"23\") == \"17\"\n\n\n\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= a <= 10^6\n\n\n-----Tips-----\n- Python has lower case variable names.\n- You need to solve it with try/catch/finally.\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"27\"\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(12) == \"35\"\nassert solution(99) == \"84\"\nassert solution(81) == \"24\"\nassert solution(1) == \"0\"\nassert solution(2) == \"1\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"27\", \"solution should return 27\"\n\n\n-----Constraints-----\n0 \u2264 stdin.length \u2264 10^5\n\nInput Format\n\nA single integer containing at least a number between 1 and 30.\n\n\nOutput Format\n\nReturn a single integer.\n\n\nSample Input\n\nSTDIN   Function\n-----   --------\n5\n\nSample Output\n\n27\n\n\n-----Sample Input]\n\n3\n\n-----Sample Output]\n\n27"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4) == \"27\"\nassert solution(4.2) == \"27\"\nassert solution(2434) == \"3434\"\nassert solution(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqQqRrSsTtUuVvWwXxYyZz\") == \"5049\"\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"2\", \"3\", \"2\"]) == \"5\"\nassert solution([\"3\", \"3\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\"]) == \"2\"\nassert solution([\"2\", \"3\", \"4\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\"]) == \"0\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1\"]) == \"1\"\nassert solution([\"2\"]) == \"3\"\nassert solution([\"3\"]) == \"4\"\nassert solution([\"4\"]) == \"5\"\nassert solution([\"5\"]) == \"6\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"57\""
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"]) == \"27\"\nassert solution([\"a\",\"b\",\"c\"]) == \"aa\"\nassert solution([\"a\",\"b\",\"c\",\"d\"]) == \"abcd\"\nassert solution([\"a\",\"b\",\"c\",\"d\",\"e\"]) == \"aaae\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(13) == 1\nassert solution(927) == 0\nassert solution(48) == 1\nassert solution(0) == 0\n\n'''\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('123') == '0','solution should be True'\nassert solution('1') == '1','solution should be True'\nassert solution('829') == '0','solution should be True'\nassert solution('481') == '1','solution should be True'\nassert solution('101') == '1','solution should be True'\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n\nExplanation\nThe input contains a single integer a (10 \u2264 a \u2264 999).\n\n\n\n\"\"\"\nimport unittest"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"1\"\nassert solution(\"b\") == \"0\"\nassert solution(\"c\") == \"1\"\nassert solution(\"d\") == \"1\"\nassert solution(\"e\") == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(13) == \"1\"\nassert solution(927) == \"1\"\nassert solution(48) == \"0\"\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\"), 0\nassert solution(\"927\"), 1\nassert solution(\"48\"), 0\nassert solution(\"13\"), 1\nassert solution(\"123456789\"), 1\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(12) == \"1\"\nassert solution(927) == \"0\"\nassert solution(24) == \"0\"\nassert solution(3) == \"1\"\nassert solution(6) == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == \"0\"\nassert solution(927) == \"1\""
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(13) == 1\nassert solution(927) == 1\nassert solution(48) == 0\nassert solution(\"Hello, world!\") == 1\nassert solution(\"Hello, world!\") == 0\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\", \"\") == \"\", \"Empty string\"\nassert solution(\"1\", \"3 4 5\") == \"3 5 7\", \"Empty string\"\nassert solution(\"2\", \"3 4 6\") == \"6 9 7\", \"Empty string\"\nassert solution(\"3\", \"4 5 6\") == \"9 7 15\", \"Empty string\"\nassert solution(\"3 2 3 4\") == \"17\", \"Empty string\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"5\""
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input() == \"ABC\") == \"D\"\nassert solution(input() == \"BCD\") == \"BCB\"\nassert solution(input() == \"ABCDEF\") == \"BCDE\"\nassert solution(input() == \"ACDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHLIJMNOPQRSTUVWXYZ\"\nassert solution(input() == \"123456789\") == \"123456789\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 2 2\") == \"3\"\nassert solution(\"1 2 2 2 1\") == \"3\"\nassert solution(\"2 3 3 2 3\") == \"3\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 2 3 3 3') == '3'\nassert solution('3 3 3 2') == '3'\nassert solution('1 1 1 1') == '1'\nassert solution('1 3 3 1') == '1'\nassert solution('1 2 5 2') == '1'\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '5'\n\n\n\n-----Bonus-----\n\nRIGHTLY WE HAVE NO GRANTS ABOVE THIS MADE IN.\n\n\n-----Uncomment-1-----\n\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"7\"\n\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '5'\nassert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 5 3 1\") == \"4\"\nassert solution(\"4 6 3 1\") == \"5\"\nassert solution(\"1 1 5 3\") == \"4\"\nassert solution(\"2 1 3 5\") == \"2\"\nassert solution(\"5 6 4 1\") == \"5\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3 9\") == \"2\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    5\n    8 7\n    8 1\n    6 10\n    999999733 999999732\n    999999733 999999733\n    \"\"\") == 2\n\n    assert solution(\n    \"\"\"\n    5\n    8 7\n    8 1\n    6 10\n    999999733 999999733\n    999999733 999999733\n    \"\"\") == 8\n\n    assert solution(\n    \"\"\"\n    5\n    8 7\n    8 1\n    6 10\n    999999733 999999733\n    999999733 999999733\n    \"\"\") == 1\n\n    assert solution(\n    \"\"\"\n    5\n    8 7\n    8 1\n    6 10\n    999999733 999999733\n    999999733 999999733\n    \"\"\") == 1\n\n    assert solution(\n    \"\"\"\n    5\n    8 7\n    8 1\n    6 10\n    999999733 999999733\n    999999733 999999733\n    \"\"\") == 1\n\n    "
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5,1) == 2, \"solution failed\"\nassert solution(5,8) == 2, \"solution failed\"\nassert solution(5,7) == 1, \"solution failed\"\nassert solution(5,6) == 1, \"solution failed\"\nassert solution(999999, 1) == 1, \"solution failed\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"5 9 3 4 1 6 2 8\",\n    4,\n    2,\n    4,\n    5,\n    3,\n    \"5 1 2 5 3 4 6 8 9\",\n    3,\n    7,\n    3,\n    \"9 1 1 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"999999733\"\nassert solution(stdin) == \"999999733\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\n\"\"\"\n\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n\n\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 2\n\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 2\nassert solution(input()) == 8\nassert solution(input()) == 4\nassert solution(input()) == 1\nassert solution(input()) == 6\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 1 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 1 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2 1 2\"\nassert solution(input()) == \"1 1 1\"\nassert solution(input()) == \"1 1 0\"\nassert solution(input()) == \"0 1 1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input = \"2 2\"\n) == \"1\"\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 1 2') == '3'\nassert solution('1 2') == '2'\nassert solution('1 2 2') == '3'\nassert solution('1 3') == '2'\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\".//..//..\") == 1\nassert solution(\".//..//..//..\") == 2\nassert solution
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 0 1 0\") == \"1\"\nassert solution(\"2 1 2 0 1\") == \"0\"\nassert solution(\"1 2 2 0 1\") == \"1\"\nassert solution(\"1 1 2 0 1\") == \"0\"\nassert solution(\"0 0 1 2 0 1\") == \"0\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '5.00000000000000000000', 'incorrect result'\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\nassert solution('1 1 1 1 1') == '1.00000000000000000000'\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"./images/h_hands.png\"), \"Error in solution\"\nassert solution(\"./images/m_hands.png\"), \"Error in solution\"\nassert solution(\"./images/h_hands_e.png\"), \"Error in solution\"\nassert solution(\"./images/m_hands_e.png\"), \"Error in solution\"\nassert solution(\"./images/h_hands_d.png\"), \"Error in solution\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5\", \"4\", \"9\", \"3\", \"4\", \"8\", \"2\", \"5\", \"6\", \"7\", \"1\"]) == \"3.5\""
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n\"3 4 9\"\n) == \"5.00000000000000000000\"\n\nassert solution(\n\"3 4 10\"\n) == \"1.00000000000000000000\"\n\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '5.00000000000000000000'\n'''\nclass Solution:\n    def solution(self, A: str, B: str, H: int, M: int) -> str:\n        if len(A) < 1:\n            return '0'\n        if len(B) < 1:\n            return '0'\n        if len(A) < 1:\n            return '0'\n        if len(B) < 1:\n            return '0'\n        Hh = max(H, H // 2 + 1)\n        Mh = max(M, Hh // 2 + 1)\n        S = list(A)\n        S.append('H')\n        S.append('M')\n        for i in range(Hh):\n            S.append(S[i])\n            S.append('H')\n        for i in range(Mh):\n            S.append(S[i])\n            S.append('M')\n        return ''.join(S)\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '5.00000000000000000000'\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 4 9 0\"), \"5\"\nassert solution(\"5 1 7 4\"), \"4\"\nassert solution(\"5 6 12 7\"), \"9\"\nassert solution(\"5 2 5 0\"), \"15\"\nassert solution(\"5 1 1 0\"), \"5\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"3 4 9 0\\\") == 5, 'incorrect result'\nassert solution(\\\"3 4 9 1\\\") == 5, 'incorrect result'\nassert solution(\\\"3 4 9 1.7\\\") == 5, 'incorrect result'\nassert solution(\\\"3 4 9 0.4\\\") == 5, 'incorrect result'\nassert solution(\\\"3 4 9 0.6\\\") == 5, 'incorrect result'\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '5.00000000000000000000'\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '97'\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"[5, 1, 2, 3, 4, 2]\"), \"1\"\nassert solution(\"[1, 1, 1, 1, 1]\"), \"1\"\nassert solution(\"[1, 1, 1, 1, 1, 1, 1, 1]\"), \"1\"\nassert solution(\"[2, 2, 2, 2, 2, 2, 2, 2, 2]\"), \"3\"\nassert solution(\"[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\"), \"3\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1 4\", \"1 2\", \"1 3\", \"2 3\", \"3 1\", \"3 1 1\", \"4 3\", \"5 3\", \"6 2\", \"7 3\", \"8 3\", \"9 4\", \"10 5\", \"11 5\", \"12 1\", \"13 1 1\", \"14 3\", \"15 3\", \"16 5\", \"17 3\", \"18 5\", \"19 1\", \"20 5\", \"21 1\", \"22 3\", \"23 4\"]) == \"97\"\n\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '97', \"expected: 97, got: {stdin}\"\n\nExplanation\n\nThis is the solution you got. The only difference between the example above is the number of pairs is increased by two.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"97\"\nassert solution(stdin) == \"97\"\nassert solution(stdin) == \"97\"\nassert solution(stdin) == \"97\"\nassert solution(stdin) == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '97'\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 5 1 4 3 6\") == \"97\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"72\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 15\") == \"88\"\nassert solution
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"97\"\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"stdin : \", end=\"\")\nprint(stdin)\nprint(\"Exception :\")\nprint(\"Output :\")\nprint(\"Expected :\")\nprint(\"1\")\nprint(\"Actual :\")\nprint(solution(stdin))\n\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"stdin : \", end=\"\")\nprint(stdin)\nprint(\"Exception :\")\nprint(\"Output :\")\nprint(\"Expected :\")\nprint(\"6\")\nprint(\"Actual :\")\nprint(solution(stdin))\n\nprint(\"Example 3:\")\nprint(\"Input : \")\nprint(\"stdin : \", end=\"\")\nprint(stdin)\nprint(\"Exception :\")\nprint(\"Output :\")\nprint(\"Expected :\")\nprint(\"97\")\nprint(\"Actual :\")\nprint(solution(stdin))\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"1, 4\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= stdin[i] <= 10^6\n1 <= stdin[i] <= 100\n1 <= m <= 10^5\n\n\n-----Time complexity-----\nO(n^2)\n\nO(n)\n\nO(log n)\n\nFor example, the sequence a_1, a_2, \\dots, a_n is not sorted in any other way.\n\nO(n)\n\nFor example, the sequence a_1, a_2, \\dots, a_n is not sorted in any other way.\n\nFor example, the sequence a_1, a_2, \\dots, a_n is not sorted in any other way.\n\nFor example, the sequence a_1, a_2, \\dots, a_n is not sorted in any other way.\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn = n // 2\n\nO(n)\n\nO(n)\n\nn ="
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 4\") == \"6\"\nassert solution(\"5 4\") == \"7\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"1 100000\") == \"0\"\nassert solution(\"1 1000000\") == \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(sys.stdin.readline()) == 6\n\nassert solution(sys.stdin.readline()) == 7\n\nInput\n4\n5\n3 4\n2 3 5\n1 2\n\nOutput\n3\n2\n2\n\n\"\"\""
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin,\n    [int(i) for i in input().split()]\n) == str(0)\nassert solution(\n    stdin,\n    [int(i) for i in input().split()]\n) == str(0)\nassert solution(\n    stdin,\n    [int(i) for i in input().split()]\n) == str(0)\nassert solution(\n    stdin,\n    [int(i) for i in input().split()]\n) == str(0)\nassert solution(\n    stdin,\n    [int(i) for i in input().split()]\n) == str(0)\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '6'\n\n\nassert solution(stdin) == '7'\n\n'''\n\nimport sys\nfrom collections import deque\n\nclass Solution:\n    def segment(self, queue: deque) -> int:\n        ans = 0\n        while queue:\n            num, flag = queue.popleft()\n            if flag:\n                ans = max(ans, num)\n            else:\n                ans = min(ans, num)\n            for i in range(4):\n                n = num + 2**i if i % 2 else num - 2**i\n                if 0 <= n < 10**6:\n                    queue.append((n, 1))\n                else:\n                    queue.append((n, 0))\n        return ans\n\n    def segment(self, queue: deque) -> int:\n        ans = 0\n        while queue:\n            num, flag = queue.popleft()\n            if flag:\n                ans = max(ans, num)\n            else:\n                ans = min(ans, num)\n            for i in range(4):\n                n = num + 2**i if i % 2 else num - 2**i\n                if 0 <= n < 10**6:\n                    queue.append((n, 1))\n                else:\n                    queue.append((n, 0))\n        return ans"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '6'\n\n\n-----Constraints-----\n0 <= n, m <= 10^4\n-10^6 <= a_i <= 10^6\na_i - a_i <= 10^6\n-10^6 <= l_j, r_j <= 10^6\n-10^6 <= c_i <= 10^6\n\nTime Limit: 10^9\nSpace Limit: 10^5\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('{1,2,1,1}') == '3'\nassert solution('{1,2,1,1,1}') == '3'\nassert solution('{1,1,1,1,2}') == '3'\nassert solution('{1,2,2,1,2,2}') == '0'\nassert solution('{1,2,1,1,1,1}') == '0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5 4\", \"2 -2 3 1 4\", \"3 5\", \"3 4\", \"2 4\", \"2 5\"]) == \"6\"\nassert solution([\"1 0\", \"1000000\"]) == \"0\"\nassert solution([\"1 0\", \"1000000\", \"1 0\", \"0 0\", \"1 0\", \"0 0\", \"1 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\"]) == \"0\"\nassert solution([\"1 0\", \"1000000\"]) == \"0\"\nassert solution([\"1 0\", \"1000000\", \"1 0\", \"0 0\", \"1 0\", \"0 0\", \"1 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\"]) == \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 4\") == \"6\"\nassert solution(\"5 4\") == \"7\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"1000000\") == \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '6'\nassert solution(input()) == '0'\nassert solution(input()) == '7'\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"No\"\nassert solution(\"r\") == \"No\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"Failed!\""
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"No\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"zyx\") == \"Yes\"\nassert solution(\"az\") == \"Yes\"\nassert solution(\"aa\") == \"Yes\"\nassert solution(\"bad\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"Yes\""
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'No'\nassert solution('az') == 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"fced\", \"xyz\", \"r\", \"dabcef\") == \"Yes\"\nassert solution(\"fced\", \"xyz\", \"r\", \"dabcef\") == \"No\"\nassert solution(\"fced\", \"xyz\", \"r\", \"bad\") == \"No\"\nassert solution(\"fced\", \"xyz\", \"r\", \"bad\") == \"Yes\"\nassert solution(\"fced\", \"xyz\", \"r\", \"babc\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\", \"Failed!\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('1 2 3') == '1'\nassert solution('1 1 1 1') == '0'\nassert solution('1 4 4 5') == '0'\nassert solution('1 4 3 1') == '0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == \"6\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"1 -2 3 1 4\") == \"3 2\"\nassert solution(\"1 3\") == \"0\"\nassert solution(\"1 3\") == \"0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '6'\n\n\nassert solution(stdin) == '7'\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '7'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1 1\") == \"1 2\"\nassert solution(\"1 1 1 3 2\") == \"1 3\"\nassert solution(\"1 1 2 3 4\") == \"1 3\"\nassert solution(\"1 1 3\") == \"1\"\nassert solution(\"1 0 0 0 0\") == \"0\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 300\n1 <= a_1, a_2, a_3 <= 10^5\n1 <= l_j, r_j <= n\nl_j < r_j\n1 <= c_k < m\n-10^6 <= a_i <= 10^6"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '7'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 3') == '2'\nassert solution('5 4') == '0'\nassert solution('1 0') == '0'"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'LRRR'\n\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"LRL\"\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"LLL\"\nassert solution(stdin) == \"LLLRLRLLL\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"L\"\nassert solution(input) == \"R\"\nassert solution(input) == \"L\"\nassert solution(input) == \"R\"\nassert solution(input) == \"L\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '4'\n\n\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\", \"3\", \"5\", \"4\", \"2\", \"6\"]) == \"LLLLLLLL\"\nassert solution([\"1\", \"3\", \"5\", \"4\", \"2\", \"7\"]) == \"LLLLLLL\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"LLLLL\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"7\"]) == \"LLLL\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"7\"]) == \"L\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4', 'Incorrect result'\nassert solution(stdin) == '4', 'Incorrect result'\nassert solution(stdin) == '3', 'Incorrect result'\nassert solution(stdin) == '3', 'Incorrect result'\nassert solution(stdin) == '3', 'Incorrect result'\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'LLRL'\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '4'\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"[2, 1, 5, 4, 3]\") == \"4\"\nassert solution(\"[2, 1, 5, 4, 3]\") == \"5\"\nassert solution(\"[2, 1, 5, 4, 3]\") == \"4\"\nassert solution(\"[1, 2, 3, 4, 5]\") == \"5\"\nassert solution(\"[1, 2, 3, 4, 5]\") == \"4\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\", \"1 2 3\", \"1 4 5\", \"2 3 4\", \"2 4 5\"]) == \"4\"\nassert solution([\"5\", \"1 2 3\", \"1 4 5\", \"2 3 4\"]) == \"2\"\nassert solution([\"2\"]) == \"2\"\nassert solution([\"2\", \"3\"]) == \"2\"\nassert solution([\"2\", \"3\", \"4\"]) == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, 1) == 2\nassert solution(2, 2) == 3\nassert solution(3, 3) == 4\nassert solution(4, 4) == 3\nassert solution(5, 5) == 2\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\n        5, 1, 2, 5, 3, 4\n    ]) == 4\n\nassert solution(\n    [\n        6, 1, 2, 5, 3, 4\n    ]) == 2\n\nassert solution(\n    [\n        6, 1, 2, 5, 3, 4\n    ]) == 2\n\nassert solution(\n    [\n        2, 2, 2, 2\n    ]) == 1\n\nassert solution(\n    [\n        1\n    ]) == 1"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 2 5') == '2'\nassert solution('2 2') == '2'\nassert solution('3 3 4') == '3'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\n\n\n-----My Answer-----"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 1 5 3 4\") == \"4\"\nassert solution(\"2 1 4 3 5\") == \"2\"\nassert solution(\"1 2 5 3 4\") == \"3\"\nassert solution(\"1 2 6 5 3 4\") == \"4\"\nassert solution(\"1 2 6 5 4 3\") == \"4\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1 2 3 4 5\", \"3 1 2 3 3\"]) == \"0\"\nassert solution([\"1 2 3\", \"3 1 2 3 3\"]) == \"0\"\nassert solution([\"1 2 3\", \"1 2 4 3 3\", \"3 1 2 3 3\", \"3 1 3 3 3\"]) == \"1\"\nassert solution([\"1 2 3\", \"1 2 3 4\", \"3 1 2 3 3\", \"3 1 2 3 3\", \"3 1 3 3 3\"]) == \"2\"\nassert solution([\"1 2 3\", \"1 2 3 4\", \"3 1 2 3 3\", \"3 1 2 3 3\", \"3 1 3 3 3\", \"3 1 2 3 3\", \"3 1 2 3 3\", \"3 1 3 3 3\", \"3 1 2 3 3\", \"3 1 2 3 3\", \"3 1 2 3 3\", \"3 1 3 3 3\"]) == \"1\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n\n-----Quick Sort-----\n\nThis algorithm doesn't need to be O(n log n) on average, and it is easy to get a min. in such a way that it could be a case of a very simple sorting problem.\n\nThis algorithm is O(n log n) and it's one of the fastest alternatives. But in our case, it's a little faster.\n\nSince we are only comparing for equality, we can just do that by comparing the array themselves.\n\nThis approach was a little bit less efficient, but it is still fast. But we are also not that smart enough to deal with any sort problems that it is also not so fast.\n\nWe have to remove the duplicates and sort the array first, then check for equality, then remove it from the array. Then sort the array again, and then check for equality again.\n\nRuntime: 44 ms (84.11%)\nMemory Usage: 14.3 MB (65.42%)\n'''\n\nclass Solution:\n    def minimumEqualDeviation(self, arr: List[int]) -> int:\n        \n        return int(max(arr))-min(arr)\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5') == 2\nassert solution('2 1 2 3 4 5') == 1\nassert solution('1 2 3 4 3') == 0\nassert solution('1 1') == 0\nassert solution('1 2') == 0\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5\", \"1\", \"2\", \"2\", \"4\", \"5\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\"]) == \"0\"\nassert solution([\"1\", \"1\", \"3\", \"1\"]) == \"1\"\nassert solution([\"5\", \"1\", \"3\", \"1\"]) == \"0\"\nassert solution([\"5\", \"3\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"2\"\n\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1 2 3 4 5\"]) == \"2\"\nassert solution([\"1 2 3 4 5\"]) == \"2\"\nassert solution([\"1 2 3 4 5\", \"2\"]) == \"3\"\nassert solution([\"1 2 3 4 5\", \"2\", \"1\"]) == \"3\"\nassert solution([\"1 2 3 4 5\", \"2\", \"1\", \"4\"]) == \"3\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 0\n\n-----Constraints-----\n1 <= n <= 10^4\n1 <= k <= 10^5\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0\n\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i < 10^4\n\n0 <= k <= 100\n\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"4\"\nassert solution(input) == \"5\"\nassert solution(input) == \"10\"\nassert solution(input) == \"8\"\nassert solution(input) == \"0\""
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution == '4'\n\"\"\"\n\nfrom operator import attrgetter\nfrom sys import stdin\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\n\n\"\"\"\n\nfrom typing import Optional\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\n    def is_prime(self, num):\n        if num == 2:\n            return True\n        if num < 2:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(n, a, b, c, d, e, f, g, h) == b\nassert solution(5, 5, 5, 0, 0, 0, 0, 0, 0) == 4\nassert solution(5, 5, 5, 0, 0, 0, 0, 0, 0) == 0\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 10 10\") == \"4\"\nassert solution(\"10 5 5\") == \"4\"\nassert solution(\"10 0 0\") == \"4\"\nassert solution(\"10 0 0\") == \"5\"\nassert solution(\"10 0 1\") == \"6\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"4\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('8 3 4') == '4'\nassert solution('4 1 5') == '4'\nassert solution('3 4 4') == '1'\nassert solution('3 3 3') == '3'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 1 0 0') == '1'\nassert solution('1 0 1 0') == '1'\nassert solution('0 1 0 1 0') == '1'\nassert solution('0 0 1 1 0') == '2'\nassert solution('0 0 0 1 1') == '0'\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '4'\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == 1\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(4) == 4\nassert solution(8) == 12\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"48\"\nassert solution(\"3\") == -1\n\n\n'''\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2') == 8\nassert solution('5') == 5\nassert solution('1') == 1\nassert solution('8') == -1\nassert solution('8 2 12 6 4 24 16 3') == 48\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"{2,8,6,4,12,6}\") == \"48\"\nassert solution(\"{2,8,6,4,12,6}\") == -1"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 24\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"3\"\nassert solution([\"1\", \"3\", \"3\"]) == \"1\"\nassert solution([\"1\", \"4\", \"5\", \"5\"]) == \"4\"\nassert solution([\"1\", \"3\", \"2\", \"1\", \"1\", \"3\", \"3\", \"4\", \"3\"]) == \"1\"\nassert solution([\"1\", \"1\", \"3\", \"2\", \"4\", \"5\", \"2\", \"1\", \"1\"]) == \"2\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\nassert solution(\"1\\n2\") == -1\n\n-----Constraints-----\n\n1 <= t <= 10^4\n0 <= n <= 10^6\n0 <= d_i < 10^6\n\n'''\n\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\n\n-----Solution-----\nTODO\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"1\"\nassert solution(\"2 2 3 4 5 6\") == \"2\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 1\nassert solution(5) == 1\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5 6 1\"\n\n----SAMPLE CASES----\n\ninput 1\n5\n1 2 3 4 5\n\noutput 1\n2 3 4\n\ninput 2\n6\n2 4 4 4 4\n\noutput 2\n1 2\n\ninput 3\n5\n6 6 6 6 6\n\noutput 3\n1 2\n\ninput 4\n5\n6 6 6 6 6\n\noutput 4\n2 4 2 4 4\n\ninput 5\n1 2 3 4 5\n\noutput 5\n1 2 3 4\n\ninput 6\n2 4 2 4 4\n\noutput 6\n1 2 3 4\n\ninput 7\n1 2 3 4 5 6\n\noutput 7\n1 2 3 4\n\ninput 8\n2 4 2 4 4 6\n\noutput 8\n1 2 3 4\n\ninput 9\n1 2 3 4 5 6 7 8 9\n\noutput 9\n1 2 3 4\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 3 2 4\") == \"3 5 2\"\nassert solution(\"5 3 2 4\") == \"3\"\nassert solution(\"5 3 2 4\") == \"1\"\nassert solution(\"5 3 2 4\") == \"0\"\n\n-----Constraints-----\n1 <= n <= 100\n1 <= a[i] <= 105\n\n----Submissions-----\n\nSample Input\n\n2\n1 5 5 1 6 1\nSample Output\n\n3\n5 6 1 \n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 4 2 4 4') == '1 2 2 1 1 1'\nassert solution('2 4 2 4 4') == '3'\nassert solution('2 4 2 4 4') == '5'\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 5 5 1 6 1\") == \"3\"\nassert solution(\"5 6 6 6 6\") == \"2\"\nassert solution(\"5 6 6 6 6\") == \"1\"\n\n-----Constraints-----\n1 <= n <= 100\n1 <= a_i <= 1000\n\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '1 5 5 1 6 1'\n\nassert solution(stdin) == '1 2 4 2 4'\n\nassert solution(stdin) == '2'"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 1 3 2\") == \"3\"\nassert solution(\"1 2 2 2 3 4 5\") == \"2\"\nassert solution(\"1 4 3\") == \"1\"\nassert solution(\"2 5 3 4\") == \"2\"\nassert solution(\"2 4 3 5 6\") == \"4\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == correct\nassert solution(inp) == wrong\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5 3 2 3 1 6 1 4 3') == '1'\nassert solution('5 4 3 4 2 1 6 3') == '3'\nassert solution('5 6 6 6 6 6') == '6'\nassert solution('5 5 5 5 5 5') == '1'\nassert solution('5 5 5 5 5 5') == '1'\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '435'\nassert solution(stdin) == '235'\nassert solution(stdin) == '44'\nassert solution(stdin) == '97'\nassert solution(stdin) == '237'\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"435\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1221') == '435'\nassert solution('979') == '435'\nassert solution('011') == '435'\nassert solution('117') == '435'\nassert solution('716') == '435'\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 95\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"435\"\nassert solution(input()) == \"103\"\nassert solution(input()) == \"237\"\nassert solution(input()) == \"244\"\nassert solution(input()) == \"224\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(432) == 435\nassert solution(99) == 103\nassert solution(237) == 237\nassert solution(42) == 44\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5  # 5\nassert solution(stdin) == 4  # 4\nassert solution(stdin) == 42  # 42\nassert solution(stdin) == 23  # 23\nassert solution(stdin) == 23  # 23\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"42\") == 44\nassert solution(\"99\") == 99\nassert solution(\"237\") == 37\nassert solution(\"42\") == 37\nassert solution(\"99\") == 99"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"435\"\nassert solution(stdin) == \"99\"\nassert solution(stdin) == \"237\"\nassert solution(stdin) == \"44\"\nassert solution(stdin) == \"42\"\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        input = \"432\"\n        output = \"435\"\n        self."
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"435\"\nassert solution(stdin) == \"244\"\nassert solution(stdin) == \"235\"\nassert solution(stdin) == \"240\"\nassert solution(stdin) == \"240\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abac\") == \"aab\"\nassert solution(\"abac\") == \"aac\"\nassert solution(\"abac\") == \"abc\"\nassert solution(\"abac\") == \"abc\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"aac\"), \"aac\"\nassert solution(\"a\"), \"a\"\nassert solution(\"abc\"), \"abc\"\nassert solution(\"aa\"), \"a\"\nassert solution(\"aaaa\"), \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"aac\""
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"a\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"b\"\nassert solution(\"abb\") == \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, [\"ab\", \"a\", \"aa\"]) == \"abc\", \"Incorrect output\"\nassert solution(1, [\"abc\"]) == \"b\", \"Incorrect output\"\nassert solution(3, [\"abac\"]) == \"aac\", \"Incorrect output\"\nassert solution(1, [\"ab\"]) == \"a\", \"Incorrect output\"\nassert solution(3, [\"abc\", \"a\", \"aa\"]) == \"abc\", \"Incorrect output\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"aaac\"); # output \"aac\"\nassert solution(\"abac\"); # output \"aac\"\nassert solution(\"abab\"); # output \"aac\"\nassert solution(\"aabab\"); # output \"aabab\"\nassert solution(\"aabcde\"); # output \"aabcde\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"b\"\n\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"ba\", \"expected 'ba' for stdin\"\nassert solution(stdin) == \"abc\", \"expected 'abc' for stdin\"\nassert solution(stdin) == \"eco\", \"expected 'eco' for stdin\"\nassert solution(stdin) == \"d\", \"expected 'd' for stdin\"\nassert solution(stdin) == \"fo\", \"expected 'fo' for stdin\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"aab\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"aac\"\nassert solution(stdin) == \"aba\"\nassert solution(stdin) == \"a\"\nassert solution(stdin) == \"a\"\nassert solution(stdin) == \"c\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1000000000000001\") == \"dog\"\nassert solution(\"1000000000000001\") == \"dog\"\nassert solution(\"1000000000000001\") == \"dog\"\nassert solution(\"1000000000000001\") == \"dog\"\nassert solution(\"1000000000000001\") == \"dog\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2') == 'b'\nassert solution('0') == 'a'\nassert solution('1') == 'd'\nassert solution('1000') == 'f'\nassert solution('a') == 'e'\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input().strip()\n) == \"b\""
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1000000\") == \"b\"\nassert solution(\"12\") == \"bb\"\nassert solution(\"999\") == \"bba\"\nassert solution(\"1\") == \"ba\"\nassert solution(\"1000000\") == \"ba\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"b\"\nassert solution(\"2\") == \"b\"\nassert solution(\"1\") == \"b\"\nassert solution(\"3\") == \"b\"\nassert solution(\"5\") == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1000000000\") == \"b\"\nassert solution(\"101\") == \"b\"\nassert solution(\"1001001\") == \"b\"\nassert solution(\"1000\") == \"b\"\nassert solution(\"10\") == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\", \"Your solution should be correct!\"\nassert solution(\"1000000\") == \"a\", \"Your solution should be correct!\"\nassert solution(\"15000000\") == \"b\", \"Your solution should be correct!\"\nassert solution(\"10000000\") == \"c\", \"Your solution should be correct!\"\nassert solution(\"1000000000000001\") == \"d\", \"Your solution should be correct!\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"zzz\"\nassert solution(\"1000000000000001\") == \"bbb\"\nassert solution(\"10000000000000101\") == \"a\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    f\n    ) == 'b'\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2\",\n    \"10000000000000\"\n    ) == \"b\"\nassert solution(\n    \"3\",\n    \"1233\"\n    ) == \"b\"\nassert solution(\n    \"10000000000000\",\n    \"0\"\n    ) == \"b\"\nassert solution(\n    \"4\",\n    \"10000000000000\"\n    ) == \"b\"\nassert solution(\n    \"10000000000000\",\n    \"1\"\n    ) == \"b\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n\nExplanation\n\nInput:\n6\nto be or not to be\n\nOutput:\n12\n\nInput:\n10\na ab aa aa bb aa bb c\n\nOutput:\n11\n\nInput:\n6\naa bb aa aa bb bb\n\nOutput:\n11\n\nInput:\n10\na ab aa aa bb aa bb\n\nOutput:\n12\n\nInput:\n6\naa bb aa aa bb\n\nOutput:\n12\n\"\"\"\nimport math\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"to be or not to be\"), 12\nassert solution(\"a ab aa aa bb bb\"), 13\nassert solution(\"aa bb aa aa bb bb\"), 11\nassert solution(\"to be or not to be\"), 12\nassert solution(\"a ab aa aa bb bb\"), 13\n\n\n-----Constraints-----\n1 <= n <= 300\n1 <= w_i <= w_j <= 10^5\n\n\n-----Time Limit Exceeded-----\nYou have entered too much time.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\n------Quick Sort-----\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\n------Brute-force-----\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\n-----Solution-----\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceeded\nYou have reached the limit of memory.\n\nTime Limit: 1 second\n\nMemory Limit Exceed"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    [\"6\", \"to be or not to be\", \"10\", \"a\", \"ab aa\", \"a\", \"a\", \"b\", \"bb\", \"bb\", \"bb\", \"bb\", \"ab\", \"aa\", \"a\", \"b\", \"aa\", \"a\", \"b\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"ab\", \"aa\", \"a\", \"b\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"ab\", \"aa\", \"a\", \"b\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"to be or not to be\", \"a ab aa aa bb bb\", \"ab aa bb bb\", \"a aa bb bb\", \"ab aa bb bb\", \"a AA BB BB\"]) == 11\n\n\n-----Constraints-----\n\n1 <= $n$ <= 300\n\n\n-----Example 1-----\n\nInput\n\n6\nto be or not to be to be ab aa bb aa aa bb bb\nOutput\n\n3\n\nExplanation\n\nThe text \"to be or not to be\" has a minimum length of three words.\n\n\n-----Example 2-----\n\nInput\n\n6\na ab aa aa aa bb bb aa aa bb bb\nOutput\n\n5\n\nExplanation\n\nThe text \"a AB aa aa aa bb bb\" has a minimum length of five words.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 8\n\nInput\n2\nto be or not to be\n\nOutput\n2\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 12\n\nassert solution(stdin) == 13\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, \"to be or not to be\") == 12\nassert solution(10, \"aa bb aa aa bb bb\") == 11\nassert solution(6, \"aa bb aa aa bb bb\") == 12\nassert solution(10, \"a ab aa aa bb bb\") == 11\nassert solution(6, \"aa bb aa aa bb bb\") == 12\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 12\nassert solution(input()) == 12\nassert solution(input()) == 12\nassert solution(input()) == 12\nassert solution(input()) == 12\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 11\nassert solution(input()) == 12\nassert solution(input()) == 13\nassert solution(input()) == 13"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution( \"to be or not to be\"), 12\n\nassert solution( \"aa bb aa aa bb bb\"), 11\n\nassert solution( \"a ab aa aa bb bb\"), 12\n\nassert solution( \"ab aa ab aa bb bb\"), 11\n\nassert solution( \"ab aa AB bb\"), 11"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 2 3\"\nassert solution(stdin) == \"4 2 3\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4000\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 3 * 10^4\n1 <= stdin[i] <= 10^4\nstdin[i]!= stdin[i-1]\nstdin.length <= 10^4\nstdin.length <= k"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 3 2 6 5 1 9 2\") == \"20\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"4 2\") == \"3 2 3\"\nassert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4000\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 200\n1 <= stdin[i] <= 200\n1 <= stdin[i] <= 2000\nstdin is guaranteed to be a valid input.\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '4000'\nassert solution(stdin) == '5'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"400\"\n\n------\nInput:\n5\n1\n1 1 1 1 1\n\nOutput:\n1\n5\n\nInput:\n4\n1 2000 2\n\nOutput:\n2000\n3 2 3\n\nInput:\n4\n1 2000 2000 2\n\nOutput:\n4000\n2 2\n\nInput:\n5\n1 2000 2000 2\n\nOutput:\n4000\n2 2\n\n------\nInput:\n2\n1 2000 2000 2\n\nOutput:\n1\n1\n\nInput:\n1\n2000 2000 2\n\nOutput:\n2000\n2\n\n------\nInput:\n1\n1\n1 1 1 1 1\n\nOutput:\n1\n\n-----\n'''\n\nfrom itertools import permutations\n\nn = int(input())\nk = int(input())\na = list(map(int,input().split()))\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"4000\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4000\"\n\nInput\n5 1\n1 1 1 1 1\n\nOutput\n1\n5\n\nInput\n5 1\n1 2000 2000 2\n\nOutput\n3\n5\n\nInput\n4 2\n1 2000 2000 2\n\nOutput\n2\n2\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == str(4000)\nassert solution(stdin) == str(2000)\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '0'\n\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Constraints-----\n1 <= n <= 200\n-10 ^ 9 <= a_i <= 10 ^ 9\n-10 ^ 9 <= a_1, a_2, \\dots, a_n <= 10 ^ 9\n\nTime Limit: 1sec\nSpace Limit: 1MB\n\n\n-----Time complexity-----\nThe problem is a bit tricky. Each element in the array is the sum of some subsegments of its array. The array can contain both positive and negative integers, but Kolya doesn't like $0$, so the array doesn't contain any zeros.\n\nThe time complexity of the function is O(n^2) as it takes $n$ elements of the array in constant time, and each element takes O(1) time to compute.\nThe overall space complexity of the program is O(n) to store the time complexity and O(n) to store the space complexity.\n\nNOTE: Although the whole array can be inserted into Kolya's array in such a way that the resulting array doesn't contain any subsegments with the sum $0$, it won't have any subsegments that are already in the array.\n\n\n-----Space complexity-----\nThe array can be stored in a different size.\n\nSpace complexity is O(n), and there is no extra space, so we always have to keep track of the size of the array.\n\n\n-----Algorithm-----\nWe start with a new array (n + 1) where n is the size of the array, and we store the elements of the new array.\n\nWe iterate through the elements of the array, inserting them into the new array.\n\nWe start by checking if the element is already in the array. If so, we increment the index by 1, and we set the new array value to the current element.\n\nIf not, we increment the index by 2, and we set the new array value to the current element.\n\nWe then decrement the index by 1, and we set the new array value to the current element.\n\nWe then increment the index by 2, and we set the new array value to the current element.\n\nNow, we need to iterate through the new array, and we add elements to the new array as they are currently in the array.\n\nThe new array now contains all of the integers in the array.\n\nWe check if the new array has the same size as the previous array, and if so, we decrement the index by 1.\nIf not, we increment the index by 2, and we add the element to the new array.\n\nWe check if the new array has the same size as the previous array, and if so, we decrement the index by 1.\nIf not, we increment the index by 2, and we add the element to the new array.\n\nWe remove all the elements from the previous array.\nNow we have to iterate through the previous array and remove all elements from the new array, then print the current array.\n\nTime complexity of the function is O(n).\nSpace complexity of the function is O(n).\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 -1 1 1 -1 1 -1 -1\") == 0\nassert solution(\"4 -2 3 -9 2\") == 2\nassert solution(\"8 16 -5 -11 -15 10 5 4 -4\") == 3\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 -5 3 2\") == \"0\"\nassert solution(\"1 0 -1 1 1 1 -1 -1\") == \"0\"\nassert solution(\"4 2 -2 3 -9 -11 -15 10 5 4 -4\") == \"6\"\nassert solution(\"9 4\") == \"0\"\nassert solution(\"16 -5 -11 -15 10 5 4 -4\") == \"0\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"9 3 -5 -11 -15 10 5 4 -4\") == \"0\"\nassert solution(\"8 4 -2 -3 -6\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 -5 3 2\"\n    ) == \"1\"\nassert solution(\n    \"4 -2 3 -9 2\"\n    ) == \"0\"\nassert solution(\n    \"9 -1 1 -1 1 -1 1 -1\"\n    ) == \"0\"\nassert solution(\n    \"8 -1 1 -1 1 -1 1 -1\"\n    ) == \"0\"\nassert solution(\n    \"16 -5 -11 -15 10 5 4 -4\"\n    ) == \"1\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5 1 3 2') == '0'\nassert solution('8 16 -5 -11 -15 10 5 4 -4') == '0'\nassert solution('8 16 -5 -11 -15 10 5 4 -4') == '3'\nassert solution('8 16 -5 -11 -15 10 5 4 -4') == '2'\nassert solution('8 16 -5 -11 -15 10 5 4 -4') == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n\n1 <= t <= 10^4\n\n\n-----Time Complexity-----\n\nO(n+m)\n\nn = length of the array, m = sum of absolute differences\n\nn <= t\n1 <= n <= 10^4\n\n\n-----Space Complexity-----\n\nO(1)\n\nn = length of the array, m = sum of absolute differences\n\n1 <= n <= 10^5\n\n1 <= m <= 10^9\n\n\"\"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1\", \"2\"]) == \"0\"\nassert solution([\"1\", \"3\", \"2\"]) == \"2\"\nassert solution([\"2\", \"2\", \"5\", \"5\"]) == \"10\"\nassert solution([\"2\", \"5\", \"5\", \"5\"]) == \"0\"\n\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == str(max([abs(x) for x in range(1, 10**9+1) if abs(x) > 0]))\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"5\") == \"2\"\nassert solution(\"2\") == \"10\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"5 1 100\"\n) == \"0\"\nassert solution(\n    \"5 1 2 100\"\n) == \"2\"\nassert solution(\n    \"5 1 2 2 100\"\n) == \"10\"\nassert solution(\n    \"5 1 2 2 3 100\"\n) == \"3\"\nassert solution(\n    \"5 1 2 2 3 4 100\"\n) == \"4\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"2\") == \"5\"\nassert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '10'\nassert solution(stdin) == '0'\nassert solution(stdin) == '2000000000'"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"10\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"10\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '100'\nassert solution(stdin) == '100'\nassert solution(stdin) == '100'\nassert solution(stdin) == '100'\nassert solution(stdin) == '100'\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\""
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == '4'"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(7) == 4, \"solution() failed\"\nassert solution(77) == -1, \"solution() failed\"\nassert solution(777) == -1, \"solution() failed\"\nassert solution(7) == 4, \"solution() failed\"\nassert solution(77) == 4, \"solution() failed\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"7\") == -1\n\nassert solution(\"77777\") == 4\n\nassert solution(\"7777\") == 4\n\nassert solution(\"77777777777777\") == 4\n\nprint(None)\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['77', '77', '77', '77']) == '777'\nassert solution(['77', '77', '77', '77']) == '777'\nassert solution(['77', '77', '77', '77']) == '77'\nassert solution(['77', '77', '77', '77']) == '77'\nassert solution(['77', '77', '77', '77']) == '77'\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('101') == 4\nassert solution('111') == -1\nassert solution('20') == 2\nassert solution('3') == -1"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('101') == 4\nassert solution('7777') == -1\nassert solution('7777') == -1\nassert solution('00000000') == -1"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(a) == '4'"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n9 2\n3 2 1\n5 5 7 3\n5 3 7 1\n4 8 9 2\n3 4 2 3\n6 3 2 9\n4 8 8 1\n3 3 2 1\n1 2 3 2\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n9 2\n1 1 1 1 1 1 1\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n3 3 3 1 3 1 3\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"\n3 3 3 1 3 1 3\n1 2 3 2 3 1\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n3 3 3 1 3 1 3\n1 2 3 2 3 1\n1 2 3 2 3 1\n\"\"\"\n) == \"0\""
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 4\") == \"1 3\"\nassert solution(\"5 5\") == \"1 2 4 5\"\nassert solution(\"15 8\") == \"1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\"\nassert solution(\"15 8\") == \"1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0 1 2 3 4 5\") == \"4\"\nassert solution(\"0 1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 4 5 3 1\") == \"1\"\nassert solution(\"1 2 4 5 3 1\") == \"0\"\nassert solution(\"1 2 4 5 3 1\") == \"0\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0, 0) == 1\nassert solution(0, 1) == 1\nassert solution(0, 2) == 1\nassert solution(0, 3) == 1\nassert solution(0, 4) == 1\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"The number of pairs of indices $(l, r)$ ($1 \\le l \\le r \\le n$) such that the value of the median of $p_l, p_{l+1}, \\dots, p_r$ is exactly the given number $m$. \""
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 4') == '4'\nassert solution('5 5') == '1'\nassert solution('15 8') == '1'\nassert solution('15 8') == '1'\nassert solution('15 8') == '1'\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == str(480)\n'''\n\nfrom sys import stdin\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"48\"\nassert solution(stdin) == \"48\"\nassert solution(stdin) == \"48\"\nassert solution(stdin) == \"48\"\nassert solution(stdin) == \"48\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"The input is invalid\""
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 7\") == \"4\"\nassert solution(\"5 15\") == \"4\"\nassert solution(\"5 16\") == \"4\"\nassert solution(\"5 26\") == \"4\"\nassert solution(\"5 26\") == -1\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 15\") == \"4\"\nassert solution(\"5 5 5 5 5\") == \"2\"\nassert solution(\"7 5\") == \"1\"\nassert solution(\"7 4 5 5 5\") == \"3\"\nassert solution(\"7 26\") == \"1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 1 1 1 1\") == 4\nassert solution(\"5 5 5 5 5\") == 2\nassert solution(\"5 5 5 5 5\") == -1"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin\n    ) == 0, \"The solution is incorrect.\"\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 10\") == 5\nassert solution(\"5 15\") == 4\nassert solution(\"5 26\") == 1\nassert solution(\"5 26\") == -1\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == '-1'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5\", \"1\", \"5\", \"1\", \"5\", \"1\"]) == \"0\"\nassert solution([\"5\", \"1\", \"5\", \"1\", \"5\", \"1\"]) == \"2\"\nassert solution([\"5\", \"1\", \"5\", \"1\", \"5\", \"1\"]) == \"4\"\nassert solution([\"5\", \"1\", \"5\", \"1\", \"5\", \"1\"]) == \"2\"\nassert solution([\"5\", \"1\", \"5\", \"1\", \"5\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"5 15\") == \"2\"\nassert solution(\"5 26\") == \"1\"\nassert solution(\"5 26\") == \"2\"\nassert solution(\"5 26\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 3\nassert solution(stdin) == -1\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4\") == 3\nassert solution(\"2\") == 0\nassert solution(\"5\") == -1"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 3 4 5') == 3\nassert solution('5 4 9 1 2') == 3\nassert solution('2 2 2 2 2') == 3\nassert solution('2 2 1 1 2') == 2\n\n\n-----Submissions-----\n\nThe time limit for this problem is 1 second.\n\nSubmissions are expected to be accepted and displayed in the console.\n\n\n-----Alternatives-----\n\nUse an algorithm based on O(n) to solve this problem.\nUse an iterative approach.\n\nTime complexity: O(n^2)\nSpace Complexity: O(n)\n\n\"\"\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == -1"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4\") == 1\nassert solution(\"2\") == 1\nassert solution(\"1\") == -1\nassert solution(\"5\") == 3\nassert solution(\"3\") == 0\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3, 'expected 3'\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    '3 4 5 2 9 12',\n    '24 21 14 10') == '3', 'incorrect'\nassert solution(\n    '2 4 5 2 9 12',\n    '24 21 14 10') == '3', 'incorrect'\nassert solution(\n    '3 4 5 2 9 12',\n    '24 21 14 10') == '3', 'incorrect'\nassert solution(\n    '3 4 5 2 9 12',\n    '24 21 14 10') == '3', 'incorrect'\nassert solution(\n    '5 6 7 9 12',\n    '24 21 14 10') == '3', 'incorrect'\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('12345') == 0\nassert solution('1234') == 2\nassert solution('1234567') == 0\nassert solution('1234') == 1\nassert solution('123412') == 2\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 78\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == (5, 6)\nassert solution(stdin) == (2, 2)\n\n\n-----Bug-----\n\nprint(2)\nprint(2)\nprint(2)\n\nprint(3)\nprint(3)\nprint(3)\n\nprint(2)\nprint(2)\nprint(2)\n\nprint(2)\nprint(2)\nprint(2)\n\nprint(2)\nprint(2)\nprint(2)\n\nprint(2)\nprint(2)\nprint(2)\n\n\n-----Bug-----\n\nprint(4)\nprint(4)\nprint(4)\n\nprint(2)\nprint(2)\nprint(2)\n\nprint(4)\nprint(4)\nprint(4)\n\nprint(4)\nprint(4)\nprint(4)\n\nprint(4)\nprint(4)\nprint(4)\n\n\n-----Bug-----\n\nprint(4)\nprint(4)\nprint(4)\n\nprint(2)\nprint(2)\nprint(2)\n\nprint(2)\nprint(2)\nprint(2)\n\nprint(2)\nprint(2)\nprint(2)\n\nprint(2)\nprint(2)\nprint(2)\n\nprint(2)\nprint(2)\nprint(2)\n\nprint(2)\nprint(2)\nprint(2)\n\nprint(2)\nprint(2)\nprint(2)\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4 1 15 15 15\") == \"5\"\nassert solution(\"6 1\") == \"6\"\nassert solution(\"6 1 5 15 15\") == \"6\"\nassert solution(\"3 1 1 5 15 15\") == \"3\"\nassert solution(\"4 1 1 5 15 15\") == \"4\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"5 2\")\nprint(\"Output :\")\nprint(solution(stdin))\n\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"4 4\")\nprint(\"Output :\")\nprint(solution(stdin))\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == len(stdin)\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 10"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5\", \"10\", \"7\"]) == \"7\"\nassert solution([\"8\", \"3\", \"6\", \"8\"]) == \"8\"\nassert solution([\"5\", \"3\", \"3\", \"3\"]) == \"3\"\nassert solution([\"5\", \"3\", \"3\", \"3\"]) == \"1\"\nassert solution([\"8\", \"8\", \"8\", \"8\"]) == \"4\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 8 7') == 7\nassert solution('5 8 7 5 6 3') == 7\nassert solution('5 8 7 5 6 3 4') == -1\nassert solution('5 8 7 5 6 3 4 5 6 7') == -1\n\n-----Sample Input-----\n6 2 3 4\n1 2 1 2\n\n-----Sample Output-----\n2\n\n-----Sample Input-----\n5 7 4\n4 2 1\n\n-----Sample Output-----\n2\n'''"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == '7'\nassert solution(inp) == '-1'\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '7'\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"5 10 7\"\n) == \"10\"\nassert solution(\n    \"8 10 3 6\"\n) == \"3\"\nassert solution(\n    \"8 10 3 6\"\n) == \"3\"\nassert solution(\n    \"10 10\"\n) == \"0\"\nassert solution(\n    \"10 9\"\n) == \"0\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 10 7') == 7\nassert solution('6 4') == -1"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '7'\n-----Bonus-----\n\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5\", \"10\", \"7\", \"8\", \"3\", \"6\", \"8\", \"6\"]) == \"8\"\nassert solution([\"5\", \"10\", \"3\", \"4\", \"6\", \"8\"]) == \"7\""
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\", \"10\", \"7\", \"8\", \"10\", \"3\", \"6\", \"8\", \"10\"]) == \"8\"\nassert solution([\"5\", \"10\", \"3\", \"6\", \"8\"]) == \"7\"\nassert solution([\"5\", \"10\", \"3\", \"6\", \"8\", \"11\"]) == \"7\"\nassert solution([\"5\", \"10\", \"3\", \"6\", \"8\", \"11\", \"12\"]) == \"7\"\nassert solution([\"5\", \"10\", \"3\", \"6\", \"8\", \"11\", \"12\", \"13\"]) == \"7\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '7'\nassert solution(input()) == '0'\n\nassert solution(input()) == '-1'\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 4 5\") == \"No\"\nassert solution(\"3 3\") == \"No\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"3 2\") == \"Yes\"\nassert solution(\"2 2\") == \"Yes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == [\"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\"]\n\nExplanation\nExercise 1:\nRead a set of N lines in the following format:\n\nN K Q\nA_1\nA_2\n.\n.\nA_Q\n\nWrite a program that determines whether each of the N players survived this game.\nInput will be the same format as the example in Exercise 1.\nOutput will be the same format as the example in Exercise 1.\n\n---Input File---\nIn the given input file, the first line contains a set of integers K, N, and Q.\nK is the number of players.\nN is the number of players.\nQ is the number of queries.\n\nFor example, the input file could be given as follows.\n1 3 5\n3\n1\n2\n1\n2\n2\n3\n\nInput the following cases in that order.\n1. The first line contains a number K, and a number N, and a number Q.\n2. The first line contains a number K, and a number N, and a number Q.\n3. The second line contains a set of integers A_1, A_2, A_3, and A_Q.\n4. The third line contains a number K, and a number N, and a number Q.\n5. The fourth line contains a set of integers A_1, A_2, A_3, and A_Q.\n6. The fifth line contains a number K, and a number N, and a number Q.\n7. The sixth line contains a set of integers A_1, A_2, A_3, and A_Q.\n8. The seventh line contains a number K, and a number N, and a number Q.\n9. The eighth line contains a set of integers A_1, A_2, A_3, and A_Q.\n10. The ninth line contains a number K, and a number N, and a number Q.\n\nOutput for each query is printed on a single line.\n\nInput File Format\nThe first line contains a number K, and a number N, and a number Q.\nThe second line contains a set of integers A_1, A_2, A_3, and A_Q.\nThe third line contains a number K, and a number N, and a number Q.\nThe fourth line contains a set of integers A_1, A_2, A_3, and A_Q.\nThe fifth line contains a number K, and a number N, and a number Q.\nThe sixth line contains a set of integers A_1, A_2, A_3, and A_Q.\nThe seventh line contains a number K, and a number N, and a number Q.\nThe eighth line contains a set of integers A_1, A_2, A_3, and A_Q.\n\nThe ninth line contains a number K, and a number N, and a number Q.\n\nThe tenth line contains a set of integers A_1, A_2, A_3, and A_Q.\n\nThe first line contains a line containing the N and K values of the set A_1, A_2, A_3, and A_Q.\nA_1 is a 1-indexed array, as follows:\n\nA_1[0] = 1\nA_1[1] = 2\nA_1[2] = 3\nA_1[3] = 4\nA_1[4] = 5\nA_1[5] = 6\nA_1[6] = 7\nA_1[7] = 8\nA_1[8] = 9\n\nA_2 = A_1 + 1\nA_2[0] = 11\nA_2[1] = 22\nA_2[2] = 33\nA_2[3] = 44\nA_2[4] = 55\nA_2[5] = 66\nA_2[6] = 77\nA_2[7] = 88\nA_2[8] = 99\n\nA_3 = A_1 + 1\nA_3[0] = 121\nA_3[1] = 122\nA_3[2] = 123\nA_3[3] = 124\nA_3[4] = 125\nA_3[5] = 126\nA_3[6] = 127\nA_3[7] = 128\nA_3[8] = 129\n\nA_4 = A_1 + 1\nA_4[0] = 131\nA_4[1] = 132\nA_4[2] = 133\nA_4[3] = 134\nA_4[4] = 135\nA_4[5] = 136\nA_4[6] = 137\nA_4[7] = 138\nA_4[8] = 139\n\nA_5 = A_1 + 1\nA_5[0] = 141\nA_5[1] = 142\nA_5[2] = 143\nA_5[3] = 144\nA_5[4] = 145\nA_5[5] = 146\nA_5[6] = 147\nA_5[7] = 148\nA_5[8] = 149\n\nA_6 = A_1 + 1\nA_6[0] = 151\nA_6[1] = 152\nA_6[2] = 153\nA_6[3] = 154\nA_6[4] = 155\nA_6[5] = 156\nA_6[6] = 157\nA_6[7] = 158\nA_6[8] = 159\n\nA_7 = A_1 + 1\nA_7[0] = 161\nA_7[1] = 162\nA_7[2] = 163\nA_7[3] = 164\nA_7[4] = 165\nA_7[5] = 166\nA_7[6] = 167\nA_7[7] = 168\nA_7[8] = 169\n\nA_8 = A_1 + 1\nA_8[0] = 171\nA_8[1] = 172\nA_8[2] = 173\nA_8[3] = 174\nA_8[4] = 175\nA_8[5] = 176\nA_8[6] = 177\nA_8[7] = 178\nA_8[8] = 179\n\nExercise 2:\nThis code is"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\", \"2\", \"3\"]) == \"Yes\", \"Yes\"\nassert solution([\"1\", \"2\", \"3\", \"4\"]) == \"No\", \"No\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"Yes\", \"Yes\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]) == \"No\", \"No\""
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n\nN, K = map(int, input().split())\nq = int(input())\nA = [int(x) for x in input().split()]"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 5') == 'No'\nassert solution('4 7') == 'Yes'\nassert solution('4 3') == 'Yes'\nassert solution('6 4') == 'Yes'\nassert solution('4 2') == 'No'\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'No'"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 199 200 201 202 203 204 205 206 207 208 208 210 212 210 211 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212 212"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 3 4') == 'No'\nassert solution('2 1 3') == 'No'\nassert solution('1 2 3 4') == 'Yes'\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    '6 3 4\\n3\\n2\\n3\\n2\\n1\\n1\\n3\\n3\\n3\\n1\\n1\\n3\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n3\\n1\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"YES\", \"no\"\nassert solution(\"3 3\") == \"YES\", \"no\"\nassert solution(\"3 4\") == \"NO\", \"yes\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"1 0 0 1\") == \"YES\"\nassert solution(\"0 0 0 0\") == \"YES\"\nassert solution(\"0 0 1 0\") == \"YES\"\nassert solution(\"0 0 1 1\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 0 1\") == \"YES\"\nassert solution(\"2 1 1\") == \"YES\"\nassert solution(\"3 2 1\") == \"NO\"\nassert solution(\"3 3\") == \"NO\"\n\nassert solution(\"0 0 0 1\") == \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"4 2\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(list(map(str, input().split()))) == \"YES\"\nassert solution(list(map(str, input().split()))) == \"YES\"\nassert solution(list(map(str, input().split()))) == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"YES\"\nassert solution(input) == \"NO\"\nassert solution(input) == \"YES\"\nassert solution(input) == \"YES\"\nassert solution(input) == \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 0 0 0 0\") == \"YES\"\nassert solution(\"5 0 0 0 1\") == \"YES\"\nassert solution(\"5 0 0 1 0\") == \"NO\""
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"YES\"\nassert solution(inp) == \"NO\"\nassert solution(inp) == \"NO\""
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"Yes\", \"Should return 'Yes' for all three scenarios, if not return 'No'\"\nassert solution(\"1111\") == \"No\", \"Should return 'No' for all three scenarios, if not return 'Yes'\"\nassert solution(\"1212\") == \"Yes\", \"Should return 'Yes' for all three scenarios, if not return 'No'\"\nassert solution(\"123456789\") == \"Yes\", \"Should return 'Yes' for all three scenarios, if not return 'No'\"\nassert solution(\"\") == \"No\", \"Should return 'No' for all three scenarios, if not return 'Yes'\"\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"0\") == \"Yes\"\nassert solution(\"9\") == \"No\"\nassert solution(\"3\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(343) == \"Yes\", \"343 is not a valid solution.\"\nassert solution(27) == \"No\", \"27 is not a valid solution.\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\"), \"No\"\nassert solution(\"3\"), \"Yes\"\nassert solution(\"123\"), \"Yes\"\nassert solution(\"111\"), \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"Yes\"\nassert solution(\"1\") == \"No\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"8\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"1\"\n    ) == \"Yes\"\nassert solution(\n    \"3\"\n    ) == \"No\"\nassert solution(\n    \"999\"\n    ) == \"Yes\"\nassert solution(\n    \"9\"\n    ) == \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\nassert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1\", \"1\", \"1\", \"1\"]) == \"Yes\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"Yes\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"No\"\nassert solution
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\" or solution(stdin) == \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"12\") == \"No\"\nassert solution(\"902\") == \"Yes\"\n\n\n[input]\n\nA string of digits.\n\n[output]\n\n\"Yes\" or \"No\".\n\nThe only line of the input contains a string of digits. The length of the string is between 1 and 10, inclusive.\n\n\n[constraints]\n\n[input]\n\nA string of digits.\n\n[output]\n\nA string of digits.\n\n\n[example]\n\nExample 1:\n\nInput\n3\n\nOutput\nYes\nExample 2:\n\nInput\n3456\n\nOutput\nNo\nExample 3:\n\nInput\n123\n\nOutput\nNo\n\n\"\"\"\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        if len(s) % 2!= 0:\n            return False\n        \n        dic = {'(':')', '[':']', '{':'}'}\n        stack = []\n        \n        for c in s:\n            if c in dic:\n                stack.append(c)\n            else:\n                if not stack or dic[stack.pop()]!= c:\n                    return False\n        \n        return not stack\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5 2 1\", \"0 1 0 1 0\", \"1 0 0 1 0 1\", \"1 0 1 1 0 1\"]) == \"5\"\nassert solution([\"6 2 1\", \"1 0 0 1 0 1\", \"1 0 1 1 0 1\"]) == \"3\"\nassert solution([\"6 2 1\", \"0 1 0 1 0 1\", \"1 0 1 1 0 1\"]) == \"3\"\nassert solution([\"4 3\", \"0 1 0 1 0\", \"1 0 0 1 0 1\", \"0 1 1 1 0 1\", \"1 0 1 1 0 1\"]) == \"3\"\n\n\nassert solution([\"5 2 1\", \"1 0 0 1 0 1\", \"1 0 1 1 0 1\"]) == \"3\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"6\", \"2\", \"1\", \"0\"]) == \"3\"\nassert solution([\"6\", \"0\", \"1\", \"0\"]) == \"3\"\nassert solution([\"5\", \"0\", \"1\", \"0\"]) == \"3\"\nassert solution([\"1\", \"1\", \"1\", \"0\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\", \"0\"]) == \"2\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '3'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"3\"\n\nassert solution(input().replace('\\n','')) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input().replace('\\n','').replace('b','').replace('a','')) == \"5\""
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input()\n) == \"3\"\n\nassert solution(\n    input()\n) == \"3\"\n\nassert solution(\n    input()\n) == \"3\"\n\nassert solution(\n    input()\n) == \"3\"\n\nassert solution(\n    input()\n) == \"3\""
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1,1,2,2,2,2) == 1\nassert solution(0,0,0,0,0,1) == 1\nassert solution(0,1,0,0,0,0) == 1\nassert solution(0,1,1,1,0,1) == 1\nassert solution(0,1,1,0,0,0) == 1\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 3 2 1 3\") == \"3\"\nassert solution(\"1 2 3 2 1 3\") == \"3\"\nassert solution(\"1 4 2 2 1 3\") == \"2\"\nassert solution(\"1 6 2 1 1 3\") == \"3\"\nassert solution(\"1 7 3 2 1 3\") == \"2\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5,2,1,0,1,0,1,1,0,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,1,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,0,1,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"5\", \"2\", \"1\", \"0\"]) == \"3\"\nassert solution([\"5\", \"2\", \"1\", \"0\"]) == \"3\"\nassert solution([\"5\", \"2\", \"1\", \"0\"]) == \"3\"\nassert solution([\"5\", \"2\", \"1\", \"0\"]) == \"3\"\nassert solution([\"5\", \"2\", \"1\", \"0\"]) == \"3\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n'8-7+6-5+4-3+2-1-0') == '4'\nassert solution(\n'2+2') == '0'\nassert solution(\n'112-37') == '375'\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(8-7+6-5+4-3+2-1-0) == 4\nassert solution(2+2) == -46\nassert solution(112-37) == 375"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5+4-3+2-1-0\") == \"375\"\nassert solution(\"2+2\") == \"42\"\nassert solution(\"5-7+6-5+4-3+2-1-0\") == \"47\"\nassert solution(\"1\") == \"1\"\nassert solution(\"-46\") == \"4\""
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '45'\nassert solution(input()) == '767'\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1+1\") == \"3\"\nassert solution(\"-2+2\") == \"2\"\nassert solution(\"3+5\") == \"15\"\nassert solution(\"-8\") == \"68\"\nassert solution(\"-2\") == \"-2\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1-2') == '3'\nassert solution('5-0') == '3'\nassert solution('5-6') == '3'\nassert solution('2+1') == '2'\nassert solution('2+3') == '2'\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"34\"\nassert solution(\"112-37\") == \"299\"\nassert solution(\"314159\") == \"314159\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"375\""
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2) == 4\nassert solution(112) == -46\nassert solution(37) == 375\nassert solution(0) == 0\nassert solution(\"-9-2\") == 0\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '375', \"the reference solution is incorrect\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('3 4') == 'YES'\nassert solution('3 4') == 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"10 4\",\n    \"yeS\"\n) == \"YES\"\n\nassert solution(\n    \"13 4\",\n    \"no\"\n) == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']) == 'YES'\nassert solution(['0', '0', '0', '1', '1', '1', '2', '2', '2', '3']) == 'YES'\nassert solution(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']) == 'YES'\nassert solution(['3', '3', '3', '2', '2', '2', '1', '1', '1', '2']) == 'NO'\nassert solution(['2', '2', '1', '1', '1', '1', '2', '2', '2', '1']) == 'NO'"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('10 1 10 1') == '-1'\nassert solution('5 10 1 1') == '-1'\nassert solution('5 100 1 1') == '-1'\nassert solution('5 100 10 1') == '-1'\nassert solution('3 10 1 1') == '-1'\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '-1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"10 10\", \"10 10\", \"10 10\", \"10 10\", \"10 10\", \"10 10\", \"10 10\"]) == -1\n\n\n-----Constraints-----\n0 < stdin.length < 200\n\nThe constraints can be written as a sequence of words, separated by spaces.\n\nInput\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n\nInput\n5 1 5\n1 100 1 1\n\nOutput\n100\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"100\"\nassert solution(stdin) == \"1000\"\nassert solution(stdin) == \"1000\"\nassert solution(stdin) == \"1000\"\nassert solution(stdin) == \"1000\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 18\nassert solution(stdin) == -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == -1\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\""
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"15\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 1\") == \"3\"\nassert solution(\"6 1\") == \"7\"\nassert solution(\"4 1\") == \"12\"\nassert solution(\"12 6\") == \"15\"\nassert solution(\"12 3\") == \"4\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    (\n        (\n            (\n                (1, 0)\n            ),\n            (\n                (2, 0),\n                (3, 1),\n                (4, 2),\n            )\n        ),\n        (\n            (\n                (0, 0),\n                (1, 0),\n                (2, 0),\n                (3, 0),\n                (4, 0),\n            )\n        )\n    ),\n    \"4\"\n) == \"3\"\n\nExplanation\n\nThe problem is solved in a first case:\n\nRoom 1\n\nFor every room we place an empty spot at the router's index $i$.\n\nThe router is connected to the first room with room index $i-1$. So, the answer is $4$.\n\nRoom 2\n\nFor every room we place an empty spot at the router's index $i-1$.\n\nThe router is connected to the second room with room index $i-2$, so, the answer is $4$.\n\nRoom 3\n\nFor every room we place an empty spot at the router's index $i-1$.\n\nThe router is connected to the second room with room index $i-2$. So, the answer is $4$.\n\nRoom 4\n\nFor every room we place an empty spot at the router's index $i-1$.\n\nThe router is connected to the third room with room index $i-2$, so, the answer is $4$.\n\nRoom 5\n\nFor every room we place an empty spot at the router's index $i-1$.\n\nThe router is connected to the third room with room index $i-2$. So, the answer is $4$.\n\nRoom 6\n\nFor every room we place an empty spot at the router's index $i-1$.\n\nThe router is connected to the fourth room with room index $i-2$. So, the answer is $4$.\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"14\""
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"21\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"5 2\"\n) == \"4\"\nassert solution(\n    \"6 1\"\n) == \"5\"\nassert solution(\n    \"4 1\"\n) == \"2\"\nassert solution(\n    \"12 6\"\n) == \"1\"\nassert solution(\n    \"21\"\n) == \"1\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"15\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"21\"\nassert solution(stdin) == \"17\"\nassert solution(stdin) == \"22\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n00100\\n00010\\n01000\\n1110000\\n111100\") == 3\nassert solution(\"6 1\\n00001\\n00001\\n00010\\n01000\\n111100\\n11100\") == 15\nassert solution(\"4 1\\n0011\\n11100\") == 4\nassert solution(\"12 6\\n000010000100\\n000000000011\\n00001111100\\n000011100111\") == 21\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('aaa') == 'Yes'\nassert solution('abcd') == 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    [\n    \"Azael\",\n    \"Zael\",\n    \"Azzel\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael\",\n    \"Aael"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\", \"solution(stdin) is wrong\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"aaa\",\"aaaa\",\"aaaaa\",\"a\",\"b\",\"b\",\"bbb\"]) == \"Yes\"\nassert solution([\"aaa\",\"a\",\"aa\",\"a\",\"a\",\"aa\"]) == \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution( \"zzzz\" ) == \"Yes\", \"Fail\"\nassert solution( \"cctt\" ) == \"No\", \"Fail\"\nassert solution( \"abbb\" ) == \"No\", \"Fail\"\nassert solution( \"aabaa\" ) == \"Yes\", \"Fail\"\nassert solution( \"aaaabba\" ) == \"Yes\", \"Fail\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"aaa\") == \"Yes\"\nassert solution(\"AAa\") == \"Yes\"\nassert solution(\"AAaa\") == \"No\"\n\"\"\""
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 10\") == \"20\"\nassert solution(\"50 20\") == \"13\"\nassert solution(\"1000 10000\") == \"0\"\nassert solution(\"100 100\") == \"0\"\nassert solution(\"10 5\") == \"0\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"15\") == \"20\"\nassert solution(\"9\") == \"15\"\nassert solution(\"30\") == \"40\"\nassert solution(\"20\") == \"20\"\nassert solution(\"10\") == \"20\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"1\") == 1\nassert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 1\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"18\") == \"1\"\nassert solution(\"34\") == \"1\"\nassert solution(\"23\") == \"1\"\nassert solution(\"16\") == \"1\"\nassert solution(\"29\") == \"1\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"8\") == \"2\"\nassert solution(\"10\") == \"3\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n2 2\\n2 1\\n3 4\\n2 2\\n3 3\") == \"3\"\nassert solution(\"2 2\\n1 3\\n2 3\\n3 4\\n2 1\\n1 1\\n1 1\\n1 2\\n1 2\\n1 3\\n1 2\") == \"1\"\nassert solution(\"5 3\\n2 2\\n2 1\\n3 4\\n2 2\\n3 3\") == \"0\"\nassert solution(\"5 2\\n2 1\\n1 1\\n1 2\\n1 2\\n2 3\\n3 3\") == \"0\"\nassert solution(\"3 2\\n2 1\\n2 3\\n1 2\\n2 2\") == \"0\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"1\") == 1\nassert solution(\"2\") == 1\nassert solution(\"3\") == 3\nassert solution(\"4\") == 4\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0) == \"1\"\nassert solution(1) == \"1\"\nassert solution(2) == \"1\"\nassert solution(3) == \"1\"\nassert solution(4) == \"1\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"2\", \"700\"]) == \"3\"\nassert solution([\"3\", \"500\"]) == \"1\"\nassert solution([\"5\", \"800\"]) == \"3\"\nassert solution([\"3\", \"500\", \"400\"]) == \"1\"\nassert solution([\"3\", \"500\", \"400\", \"300\"]) == \"1\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"2 2\") == \"3\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"3 4\") == \"6\"\nassert solution(\"3 6\") == \"9\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == 5\n\n----Explanation----\nThe maximum possible score of a user is 6.\nSo if he solves 100 problems, he will earn a base score of 100.\nIf he solves 200 problems, he will earn the perfect bonus of 500.\nSo if he solves 300 problems, he will earn the perfect bonus of 800.\nSo if he solves 400 problems, he will earn the perfect bonus of 700.\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 700\") == \"3\"\nassert solution(\"3 500\") == \"3\"\nassert solution(\"5 800\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['5', '4', '2', '2', '2', '1', '1', '1', '1', '1']) == '3'\nassert solution(['3', '3', '3', '3', '3', '3', '3', '3', '3', '3']) == '3'\nassert solution(['2', '2', '2', '2', '2', '1', '1', '1', '1', '1']) == '3'\nassert solution(['3', '3', '3', '3', '3', '3', '3', '3', '3', '3']) == '3'\nassert solution(['1', '1', '1', '1', '1', '1', '1', '1', '1', '1']) == '2'\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(in_) == '2'\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2 3 4 2 2 3 2 2 4') == '3'\nassert solution('2 8 9 2') == '2'\nassert solution('2 9 2') == '3'\nassert solution('2 4 7 5 3') == '1'\nassert solution('2 7 1') == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\"]) == \"3\"\n\n\n\n-----Bonus-----\n\nIn this problem, we use the following function:\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 3 4 2 3 2 4 5') == '2'\nassert solution('8 6 7 8 7 7 7 7') == '1'\nassert solution('9') == '3'\nassert solution('8 9') == '2'\nassert solution('10 20') == '4'\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10 4 5 8 7 2 1 3\") == \"2\"\n\n\n'''"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"expected 2 candidates but got 3\"\n\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(stdin)\nprint(\"Exception :\")\nprint(\"1\")\nprint(\"Output :\")\nprint(str(solution(stdin)))\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(stdin)\nprint(\"Exception :\")\nprint(\"2\")\nprint(\"Output :\")\nprint(str(solution(stdin)))\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"100\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 10\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('Hello World'), 'Hello World'\nassert solution('Hello'), 'Hello'\nassert solution('Hello'), 'Hello World'\nassert solution('Hello'), 'Hello'\nassert solution('Hello'), 'Hello World'\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('', -1) == -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 18\nassert solution(stdin) == -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5\", \"2\", \"3\", \"1\", \"5\", \"1\"]) == \"18\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"6\", \"2\", \"5\", \"1\", \"1\", \"1\"]) == \"18\"\nassert solution([\"6\", \"2\", \"5\", \"1\", \"1\", \"1\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 20 30 20 1 10 20 10 1 20 10 20 10 20 10 20 10 20 10 20 10 20 10 20 1\") == \"-1\"\nassert solution(\"1 10 30 10 1 10 20 10 20 10 10 20 10 10 20 10 10 1 10 20 10 20 10 20 10 20 1\") == \"10\"\nassert solution(\"2 1 5 2 3 1 10 1 3 1 5 2 3 10\") == \"100\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5') == 'Yes'\nassert solution('11') == 'Yes'\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"4\") == \"No\"\nassert solution(\"0\") == \"No\"\nassert solution(\"0 1\") == \"No\"\nassert solution(\"0 2\") == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"No\"\n\"\"\"\nclass Solution:\n    def solution(self,n,money):\n        if money<=0:\n            return \"No\"\n        if n == 0:\n            return \"No\"\n        if money == 0:\n            return \"Yes\"\n        if n == 1:\n            return \"Yes\"\n        res = \"\"\n        if money == 0:\n            res += \"Yes\"\n        elif n == 2:\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n        elif n == 3:\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n        elif n == 4:\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n        else:\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n            res += \"Yes\"\n        return res\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(n := int(input())) == \"Yes\"\nassert solution(n := int(input())) == \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 4 7\") == \"Yes\"\nassert solution(\"1 4 0\") == \"No\"\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"No\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"1 4\") == \"No\"\nassert solution(\"2 4\") == \"No\"\nassert solution(\"3\") == \"Yes\""
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    input()\n) == \"Yes\"\nassert solution(\n    input()\n) == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"11\\\") == \\\"Yes\\\"\nassert solution(\\\"2\\\") == \\\"No\\\"\nassert solution(\\\"2\\\") == \"No\"\nassert solution(\\\"2\\\") == \"No\"\nassert solution(\\\"2\\\") == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == '2 2 6'\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 1 2 2\") == \"2 2 6\"\nassert solution(\"1 1 1\") == \"1 1 1\"\nassert solution(\"4 6 7\") == \"1 1 1\"\nassert solution(\"3 3\") == \"3 3\"\nassert solution(\"10 2 4\") == \"10 2 4\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == (\"2 2 6\", \"\")\nassert solution(inp) == (\"2 2 6\", \"4\")\nassert solution(inp) == (\"2 2 6\", \"1\")\nassert solution(inp) == (\"2 2 6\", \"2\")\nassert solution(inp) == (\"2 2 6\", \"5\")\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 'C_X, C_Y, H'\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"2 2 6\""
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"2 2 5\"\nassert solution(inp) == \"2 1 5\"\nassert solution(inp) == \"3 2 5\"\nassert solution(inp) == \"3 1 5\"\nassert solution(inp) == \"4 5\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10 20 50\") == \"2 3 5\"\nassert solution(\"10 20 50\") == \"2 1 5\"\nassert solution(\"10 20 50\") == \"3 2 5\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '2 2 6'\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"2 2 6\"\nassert solution(input().split()) == \"2 2 6\""
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input(\"input\")) == 1\n\n\"\"\"\n\n\nclass Solution:\n    def minHugs(self, S):\n        if len(S) < 2 or not S[0].isalpha() or S[-1].isalpha() or (S.count('a') == len(S) - 2 and S[1].isalpha() and S[-2].isalpha()):\n            return 0\n        else:\n            return 1 + min(self.minHugs(S[1:-1]), self.minHugs(S[-2:]))\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution( \"zcD\" ) == \"cD\"\nassert solution( \"d\" ) == \"d\"\nassert solution( \"c\" ) == \"c\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"cdpzgq\") == \"9\"\nassert solution(\"a\") == \"a\"\nassert solution(\"jkqm\") == \"jkqm\"\nassert solution(\"a\") == \"a\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('redcoder') == 1\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('redcoder') == 1\n\nTest cases can be implemented in standard input as well."
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 1\n'''\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('redcoder') == 1, \"False\"\nassert solution('leetcode') == 2, \"False\"\nassert solution('pride and prejudice') == 3, \"False\"\nassert solution('1234567') == 4, \"False\"\nassert solution('3') == 4, \"False\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(redcoder) == 1\n\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(s) == \"1\"\nassert solution(a) == \"2\"\nassert solution(b) == \"2\"\nassert solution(c) == \"3\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 5\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(N: str) == YES\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(10) == 'Yes'\nassert solution(13) == 'No'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 'No'\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(10) == \"Yes\"\nassert solution(6) == \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(6) == 'Yes'\n\n\n'''\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"10 can't be represented as a product of two integers between 1 and 9\"\n'''"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\\n5\\n10\\n\"), \"1 can be represented as 2 5\"\nassert solution(\"2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\"), \"2 can be represented as 2 3 4 5 6 7 8 9 10\"\nassert solution(\"1\\n2\\n4\\n7\\n8\\n10\\n\"), \"1 can be represented as 4 5\"\nassert solution(\"10\\n\"), \"10 can't be represented as 1 3 4 5 6 7 8 9 10\"\n\"\"\"\nimport math"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(10) == \"Yes\""
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 4 9 7 5') == 5\nassert solution('5 4 9 7 4') == 6\nassert solution('5 4 9 7') == 8\nassert solution('5 4 9 2 3') == 5\nassert solution('5 4 9') == 7\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '5'\n\n'''"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"5\"\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '5'"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 4 9 7 5\") == \"5\"\nassert solution(\"4 4 9 7 5\") == \"4\"\nassert solution(\"1 1 9 7 5\") == \"5\"\nassert solution(\"1 1 3 5\") == \"5\"\nassert solution(\"1 1 3 5\") == \"3\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(sample_input) == \"5\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10 2\") == \"1\"\nassert solution(\"50 4 9 7\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1000 4 9 7\") == \"1\"\nassert solution(\"1 9\") == \"1\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 4 9 7 5\"), \"1 3 4 5\"\nassert solution(\"4 4 9 7 5\"), \"3 4 5\"\nassert solution(\"4 9 7 5\"), \"4 5\"\nassert solution(\"4 9 7 5\"), \"2 5\"\nassert solution(\"4 4 9 7 5\"), \"1 5\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 4 4 10 3') == '2'\nassert solution('7 4 7 9 8 10 10 7') == '2'\nassert solution('1 3 3 7') == '1'\nassert solution('3 7 1 2 7') == '1'\nassert solution('4 5 5 4 5 4 5 5') == '3'\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2') == '10'\nassert solution('2 3') == '-1'\n\n-----Original-----\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, 2) == 10\nassert solution(1, 1) == -1\nassert solution(1, 3) == -1\nassert solution(1, 5) == 10\nassert solution(1, 0) == -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '10'\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == 10\nassert solution(inp2) == -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 5') == '10'\nassert solution('1 1') == -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\"2\", \"5\"]\n) == \"10\", \"Expected '2' to be printed\"\nassert solution(\n    [\"3\", \"3\"]\n) == \"10\", \"Expected '3' to be printed\"\nassert solution(\n    [\"2\", \"2\"]\n) == \"10\", \"Expected '2' to be printed\"\nassert solution(\n    [\"2\", \"2\", \"1\"]\n) == \"10\", \"Expected '2' to be printed\"\nassert solution(\n    [\"9\", \"4\", \"5\"]\n) == \"10\", \"Expected '9' to be printed\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"6 6\") == \"6\"\nassert solution(\"1 9\") == \"9\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"2 5\") == \"10\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == 10\nassert solution(\"2 4\") == -1\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 5\"\n) == \"10\"\nassert solution(\n    \"2 2\"\n) == -1\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('10 12 1 2 14') == '5'\nassert solution('10 12 1 2 14') == '5'\nassert solution('10 12 1 2 14') == '5'\nassert solution('10 12 1 2 14') == '5'\nassert solution('10 12 1 2 14') == '5'\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 5') == '5'\nassert solution('2 5 1 4 6 7 2 4 9') == '3'\nassert solution('1 2 1 2 2 3 4 3 4 3 4 2 2 2 3 2 4') == '6'\n\"\"\"\nimport sys"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(sampleInput) == \"5\"\n'''\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nx_coordinate = []\ny_coordinate = []\n\nfor _ in range(N):\n    coordinate = int(sys.stdin.readline().strip())\n    x_coordinate.append(coordinate)\n\nfor _ in range(M):\n    coordinate = int(sys.stdin.readline().strip())\n    y_coordinate.append(coordinate)\n\nx_coordinate = sorted(x_coordinate)\ny_coordinate = sorted(y_coordinate)"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 12 1 2 14\") == \"5\"\nassert solution(\"10 12 1 2 14\") == \"5\"\nassert solution(\"10 12 1 2 14\") == \"5\"\nassert solution(\"10 12 1 2 14\") == \"5\"\nassert solution(\"10 12 1 2 14\") == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"5\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"2 10 12 1 2 14\") == \"5\"\n\nassert solution(\"2 10 12 1 2 14 3\") == \"5\"\nassert solution(\"10 12 1 2 14 3\") == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('X_1 X_2 X_3 X_4 X_5') == 5\nassert solution('X_1 X_2 X_3 X_4 X_5 X_6 X_7 X_8 X_9 X_10') == 6\nassert solution('X_1 X_2 X_3 X_4 X_5 X_6 X_7 X_8 X_9 X_10 X_11 X_12') == 7\nassert solution('X_1 X_2 X_3 X_4 X_5 X_6 X_7 X_8 X_9 X_10 X_11 X_12 X_13 X_14 X_15 X_16 X_17 X_18 X_19 X_20 X_21 X_22 X_23 X_24 X_25 X_26 X_27 X_28 X_29 X_30 X_31 X_32 X_33 X_34 X_35 X_36 X_37 X_38 X_39 X_40 X_41 X_42 X_43 X_44 X_45 X_46 X_47 X_48 X_49 X_50 X_51 X_52 X_53 X_54 X_55 X_56 X_57 X_58 X_59 X_60 X_61 X_62 X_63 X_64 X_65 X_66 X_67 X_68 X_69 X_70 X_71 X_72 X_73 X_74 X_75 X_76 X_77 X_78 X_79 X_80 X_81 X_82 X_83 X_84 X_85 X_86 X_87 X_88 X_89 X_90 X_91 X_92 X_93 X_94 X_95 X_96 X_97 X_98 X_99 X_100 X_101 X_102 X_103 X_104 X_105 X_106 X_107 X_108 X_109 X_110 X_111 X_112 X_113 X_114 X_115 X_116 X_117 X_118 X_119 X_120 X_121 X_122 X_123 X_124 X_125 X_126 X_127 X_128 X_129 X_130 X_131 X_132 X_133 X_134 X_135 X_136 X_137 X_138 X_139 X_140 X_141 X_142 X_143 X_144 X_145 X_146 X_147 X_148 X_149 X_150 X_151 X_152 X_153 X_154 X_155 X_156 X_157 X_158 X_159 X_160 X_161 X_162 X_163 X_164 X_165 X_166 X_167 X_168 X_169 X_170 X_171 X_172 X_173 X_174 X_175 X_176 X_177 X_178 X_179 X_180 X_181 X_182 X_183 X_184 X_185 X_186 X_187 X_188 X_189 X_190 X_191 X_192 X_193 X_194 X_195 X_196 X_197 X_198 X_199 X_200 X_201 X_202 X_203 X_204 X_205 X_206 X_207 X_208 X_209 X_210 X_211 X_212 X_213 X_214 X_215 X_216 X_217 X_218 X_219 X_220 X_221 X_222 X_223 X_224 X_225 X_226 X_227 X_228 X_229 X_230 X_231 X_232 X_233 X_234 X_235 X_236 X_237 X_238 X_239 X_240 X_241 X_242 X_243 X_244 X_245 X_246 X_247 X_248 X_249 X_250 X_251 X_252 X_253 X_254 X_255 X_256 X_257 X_258 X_259 X_260 X_261 X_262 X_263 X_264 X_265 X_266 X_267 X_268 X_269 X_270 X_271 X_272 X_273 X_274 X_275 X_276 X_277 X_278 X_279 X_280 X_281 X_282 X_283 X_284 X_285 X_286 X_287 X_288 X_289 X_290 X_291 X_292 X_293 X_294 X_295 X_296 X_297 X_298 X_299 X_300 X_301 X_302 X_303 X_304 X_305 X_306 X_307 X_308 X_309 X_310 X_311 X_312 X_313 X_314 X_315 X_316 X_317 X_318 X_319 X_320 X_321 X_322 X_323 X_324 X_325 X_326 X_327 X_328 X_329 X_330 X_331 X_332 X_333 X_334 X_335 X_336 X_337 X_338 X_339 X_340 X_341 X_342 X_343 X_344 X_345 X_346 X_347 X_348 X_349 X_350 X_351 X_352 X_353 X_354 X_355 X_356 X_357 X_358 X_359 X_360 X_361 X_362 X_363 X_364 X_365 X_366 X_367 X_368 X_369 X_370 X_371 X_372 X_373 X_374 X_375 X_376 X_377 X_378 X_379 X_380 X_381 X_382 X_383 X_384 X_385 X_386 X_387 X_388 X_389 X_390 X_391 X_392 X_393 X_394 X_395 X_396 X_397 X_398 X_399 X_400 X_401 X_402 X_403 X_404 X_405 X_406 X_407 X_408 X_409 X_410 X_411 X_412 X_413 X_414 X_415 X_416 X_417 X_418 X_419 X_420 X_421 X_422 X_423 X_424 X_425 X_426 X_427 X_428 X_429 X_430 X_431 X_432 X_433 X_434 X_435 X_436 X_437 X_438 X_439 X_440 X_441 X_442 X_443 X_444 X_445 X_446 X_447 X_448 X_449 X_450 X_451 X_452 X_453 X_454 X_455 X_456 X_457 X_458 X_459 X_460 X_461 X_462 X_463 X_464 X_465 X_466 X_467 X_468 X_469 X_470 X_471 X_472 X_473 X_474 X_475 X_476 X_477 X_478 X_479 X_480 X_481 X_482 X_483 X_484 X_485 X_486 X_487 X_488 X_489 X_490 X_491 X_492 X_493 X_494 X_495 X_496 X_497 X_498 X_499 X_500 X_501 X_502 X_503 X_504 X_505 X_506 X_507 X_508 X_509 X_510 X_511 X_512 X"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Sample Output-----\n4\n\nThe objective can be achieved in four moves as follows, and this is the minimum number of moves required.\n - Initially, put the two pieces at coordinates 1 and 10.\n - Move the piece at coordinate 1 to 2.\n - Move the piece at coordinate 10 to 11.\n - Move the piece at coordinate 11 to 12.\n - Move the piece at coordinate 12 to 13.\n - Move the piece at coordinate 13 to 14.\n - Move the piece at coordinate 14 to 15.\n - Move the piece at coordinate 15 to 16.\n - Move the piece at coordinate 16 to 17.\n - Move the piece at coordinate 17 to 18.\n - Move the piece at coordinate 18 to 19.\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"5 2\") == \"4\"\nassert solution(\"5 12\") == \"5\"\nassert solution(\"5 1 2 4 14\") == \"8\"\nassert solution(\"5 2 10 12 1 14\") == \"7\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1 1 1 1 1 1 1\"]) == \"1 1 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 1 1 0 0 1 1 1 0 1 0 1 0 0 1 1 0 1 0 0 1 1 1 0 1 1 0 1 1 1 0 1 1 1 1 1 1 0 0 0 0 1 0 0 0 0 0 0 1 0 1 1 0 1 1 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0 1 1 1 0 1 1 1 0 0 0 1 0 0 1 0 0 0 1 1 1 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 1 0 1 1 1 0 1 0 0 1 1 1 0 1 1 0 1 1 1 0 1 1 1 1 1 0 0 1 1 0 1 1 1 0 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 0 1 1 1 0 1 1 1 0 1 1 0 1 1 0 1 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 0 0 0 1 0 1 0 1 1 0 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 0 1 1 0 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 0 1 1 0 0 1 1 0 0 0 0 1 0 0 0 1 1 1 0 0 0 0 0 1 1 0 0 1 1 1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 1 0 0 1 1 1 1 1 0 0 1 1 0 1 0 0 0 1 1 0 0 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 1 1 0 1 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 0 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 0 1 1 1 0 1 1 1 0 0 1 1 0 0 0 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 1 1 0 1 1 0 1 1 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    [\"4 4 3\", \"1 2\", \"2 3\", \"1 4\", \"4 3\", \"2 4\", \"1 3\", \"2 4\"]) == \"2\"\nassert solution(\n    [\"5 6 2\", \"1 2\", \"2 3\", \"1 4\", \"4 3\", \"2 4\", \"1 3\", \"2 4\"]) == \"111100\"\nassert solution(\n    [\"1 3\", \"1 4\", \"2 4\", \"2 3\", \"2 5\", \"2 6\", \"3 5\", \"3 6\"]) == \"1\"\nassert solution(\n    [\"4 5\", \"3 6\", \"2 4\", \"2 5\", \"2 6\", \"1 4\", \"1 5\", \"1 6\"]) == \"1\"\nassert solution(\n    [\"1 3\", \"1 4\", \"2 4\", \"2 3\", \"1 5\", \"2 5\", \"2 6\", \"1 6\"]) == \"1\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '2'\nassert solution(input().split()) == '2'\nassert solution(input().split()) == '1'\nassert solution(input().split()) == '1'\nassert solution(input().split()) == '1'\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1110\"\nassert solution(stdin) == \"1011\"\nassert solution(stdin) == \"10111\"\n\n\"\"\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1 2 1\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '110110'"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 6 2\") == \"2\"\nassert solution(\"5 6 3\") == \"1\"\nassert solution(\"5 6 4\") == \"1\"\nassert solution(\"5 6 5\") == \"0\"\nassert solution(\"5 6 6\") == \"1\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1110\"\nassert solution(stdin) == \"1011\"\nassert solution(stdin) == \"111100\""
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\n\n\nassert solution(input()) == \"NO\"\n\n---SOLUTION---\n\nInput\n5\n3 2 3\n\nOutput\nNO\n\nInput\n3\n1 2\n\nOutput\nYES\n\n\nassert solution(input()) == \"NO\"\n\n\nassert solution(input()) == \"YES\"\n\n\n\n---SOLUTION---\n\nInput\n5\n2 2 2 2 2\n\nOutput\nNO\n\nInput\n4\n2 2 2 2 2\n\nOutput\nYES\n\nInput\n2\n2\n\nOutput\nYES\n\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"3\") == \"NO\"\n\n\"\"\"\nclass Solution:\n    def wallIsComplete(self, wall: List[int]) -> bool:\n        def get_height(pos):\n            return pos//2\n        \n        def is_wall_complete(height):\n            if height == len(wall):\n                return True\n            \n            for i in range(1, int(height)):\n                if not wall[i] or not wall[i+height] or wall[i+height]!= wall[i]:\n                    return False\n            \n            return True\n        \n        height_set = set(range(len(wall)))\n        \n        return is_wall_complete(sum(wall))\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'NO'\nassert solution('3') == 'NO'\nassert solution('2') == 'NO'\nassert solution('2') == 'YES'"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == \"YES\"\nassert solution(3) == \"YES\"\nassert solution(2) == \"NO\"\nassert solution(4) == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == \"YES\"\nassert solution(3) == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('10 3 2 5') == 'YES'\nassert solution('10 3 2') == 'YES'\nassert solution('10 2') == 'YES'\nassert solution('3 2') == 'NO'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\", [\"2 1 1 2 5\", \"2 4 5\", \"5 3 3\", \"5 4 4\", \"5 5 5\"]) == \"YES\"\n\n\nassert solution(\"3\", [\"3 2 2\", \"2 1 2\", \"1 3 3\", \"3 4 4\", \"4 5 5\", \"5 6 6\", \"6 7 7\", \"7 8 8\", \"8 9 9\"]) == \"YES\"\n\n\nassert solution(\"3\", [\"2 1 1\", \"1 3 3\", \"3 4 4\", \"4 5 5\", \"5 6 6\", \"6 7 7\", \"7 8 8\", \"8 9 9\"]) == \"YES\"\n\n\nassert solution(\"3\", [\"2 1 1\", \"1 3 3\", \"3 4 4\", \"4 5 5\", \"5 6 6\", \"6 7 7\", \"7 8 8\", \"8 9 9\"]) == \"NO\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1000 6') == 9\nassert solution('1000 6 -200 -300 125 77 -4') == -1\nassert solution('1000 6 -200 -300 125 77 -4') == 4\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n        '1000 6 -100 -200 -300 125 77 -4'\n    ) == '9'\nassert solution(\n        '1000 6 -100 -200 -300 125 77 -4'\n    ) == -1\nassert solution(\n        '1000 6 -100 -200 -300 125 77 -4'\n    ) == 4999999999996\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1000000000000 5'),'should be -1'\nassert solution('1000000000000 5'),'should be -1'\nassert solution('1000000000000 5'),'should be -1'\nassert solution('1000000000000 5'),'should be -1'\nassert solution('1000000000000 5'),'should be -1'\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n\n---Constraints---\n0 \u2264 N \u2264 100\n-10^6 <= H <= 10^6\n0 \u2264 d_i \\le n \\le 2*10^5\nstdin.length == 2\n-10^6 <= H <= 10^6\nstdin.length == 2\n-10^6 <= d_i \\le n \\le 2*10^5\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"100 10000 1000 100 5000\") == \"10000 1000 100 5000\"\nassert solution(\"1000 100 1000 100 5000\") == \"1000 1000 100 5000\"\nassert solution(\"1000 100 1000 100 5000\") == \"1000 1000 100 5000\"\nassert solution(\"1000 100 1000 100 5000\") == \"1000 1000 100 5000\"\nassert solution(\"1000 100 1000 100 5000\") == \"1000 1000 100 5000\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1000 6') == -1\nassert solution('1000000000000 5') == 4\nassert solution('10 4') == -1\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '4999999999996'\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution == -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == -1"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == \"ZZZZ\"\nassert solution(5) == \"ZZZZ\"\nassert solution
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"BB\"\n\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\n0 < s.length <= 50\ns consists of only uppercase and lowercase English letters.\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"AB\"\n\n\nassert solution(stdin) == \"BA\"\n\nassert solution(stdin) == \"ZZ\"\n\n\n\n\n\n-----Constraints-----\n1 <= n <= 100\n\nTime Limit: 1 sec\n\nSpace Limit: 20,000\n\n\n\n-----Alternatives-----\n\n- One-liner,\n\n- Expanding the idea into a function\n\n- a naive solution would be to convert the string into a hashmap and then check if a pair is found in it\n\n- a better solution would be to use a set to store pairs\n\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"ZZ\"\n\n\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"AB\" or \"ZZ\"\n\nassert solution(stdin) == \"AB\" or \"ZZZ\"\n\nassert solution(stdin) == \"ZZZ\"\n\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"AZ\"\nassert solution(stdin) == \"AZZAA\"\nassert solution(stdin) == \"AZZZ\"\nassert solution(stdin) == \"AAABAA\"\nassert solution(stdin) == \"AABA\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(6, \"BA\") == \"ZZZZZZ\"\nassert solution(4, \"ZZZZAA\") == \"ZZZZZZ\"\nassert solution(5, \"AABACABAA\") == \"ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['AA']) == 'A'\nassert solution(['AB']) == 'AB'\nassert solution(['AB']) == 'AB'\nassert solution(['AAAB']) == 'AAAB'\nassert solution(['ABABA']) == 'ABABA'\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"AZAA\"\n\nassert solution(stdin) == \"AABA\"\n\nassert solution(stdin) == \"AZ\"\n\nassert solution(stdin) == \"AA\"\n\nassert solution(stdin) == \"BB\""
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"test\") == \"est\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '6'\nassert solution(stdin) == '7'\nassert solution(stdin) == '1'\nassert solution(stdin) == '9'\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"test\") == \"test\"\nassert solution(\"b\") == \"b\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"codeforces\") == \"codeforces\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"est\"\nassert solution(\"test\") == \"test\"\nassert solution(\"b\") == \"ab\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"codeforces\") == \"est\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"est\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"a\") == \"a\"\nassert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"c\") == \"c\"\nassert solution(\"test\") == \"test\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"test\") == \"test\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"est\"\nassert solution(\"b\") == \"ab\"\nassert solution(\"test\") == \"est\"\nassert solution(\"yes\") == \"es\""
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"est\""
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == str(max(D for D in range(1,10))), \"Maximum value of D is not as expected\"\n\n\"\"\"\nfrom heapq import heappop, heappush\n\nclass Node:\n    def __init__(self, coordinate=0, priority=-1):\n        self.coordinate = coordinate\n        self.priority = priority\n        self.visited = False\n        self.distance = priority if priority!= -1 else 0\n        self.next = None\n\nclass Solution:\n    def __init__(self, heap):\n        self.heap = heap\n        self.count = 0\n        self.current_node = None\n\n    def visit_node(self, node):\n        self.count += 1\n        if node is not None:\n            if node.visited is False:\n                node.visited = True\n                node.distance += 1\n                node.next = self.current_node\n                self.current_node = node\n                node.priority = node.distance\n                heappush(self.heap, node)\n\n    def move_to(self, node):\n        if node.next is not None:\n            self.visit_node(node.next)\n\n    def move_from(self, node):\n        if node.next is not None:\n            node.visited = True\n            node.next.priority = node.priority\n            heappush(self.heap, node.next)\n            node.next = node.priority\n\n    def pop_from_heap(self):\n        node = self.heap[0]\n        self.heap[0] = self.heap[self.heap.index(node)]\n        node.visited = False\n        del self.heap[self.heap.index(node)]\n        self.count -= 1\n        return node\n\n    def solution(self, input: str) -> str:\n        input = input.strip()\n        heap = []\n        for c in input:\n            if c == 'F':\n                heappop(heap)\n            else:\n                heappush(heap, Node(coordinate=int(c), priority=1))\n        self.count = len(heap)\n        self.current_node = heappop(heap)\n        self.move_to(self.current_node)\n        while self.current_node is not None:\n            self.current_node.priority = self.current_node.distance\n            self.current_node = self.current_node.next\n            self.move_to(self.current_node)\n        return str(self.current_node.priority)"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"2\"\n\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\n\n\nclass Solution:\n    def maxDistance(self, n: int, distances: List[List[int]]) -> int:\n        # dp = defaultdict(lambda: 0)\n        # for x, y in distances:\n        #     d = dp[x] + y\n        #     dp[x] = max(dp[x], d)\n        # return dp[1]\n        # dp = defaultdict(lambda: 0)\n        # for i, j in distances:\n        #     dp[i] = max(dp[i], dp[j])\n        # return dp[1]\n        \n        # dp = defaultdict(lambda: 0)\n        # ans = 0\n        # for i, j in distances:\n        #     if dp[i] < dp[j]:\n        #         ans = dp[i] + 1\n        #         dp[i] = 0\n        #     else:\n        #         ans = max(dp[i], dp[j] + 1)\n        #         dp[i] = 0\n        # return ans\n        \n        # dp = defaultdict(lambda: 0)\n        # for i in range(len(distances)):\n        #     for j in range(i):\n        #         dp[j] = max(dp[j], distances[i][j] + distances[i][j + 1])\n        # return dp[0]\n        \n        # dp = defaultdict(lambda: 0)\n        # ans = 0\n        # for i, j in distances:\n        #     if dp[i] < dp[j]:\n        #         ans = dp[i] + 1\n        #         dp[i] = 0\n        #     else:\n        #         ans = max(dp[i], dp[j] + 1)\n        #         dp[i] = 0\n        # return ans\n        \n        # dp = defaultdict(lambda: 0)\n        # ans = 0\n        # for i in range(len(distances)):\n        #     for j in range(i):\n        #         dp[j] = max(dp[j], distances[i][j] + distances[i][j + 1])\n        # return dp[0]\n        \n        \n        def dfs(x, y):\n            # D = 2 * dist\n            # dp[x][y] = max(dp[x][y], D)\n            # dp[x][y] = max(dp[x][y], dp[x][y + 1])\n            # dp[x][y] = max(dp[x][y], dp[x][y + 1] + D)\n            # dp[x][y] = max(dp[x][y], dp[x][y + 1] + dp[x + 1][y])\n            # dp[x][y] = max(dp[x][y], dp[x][y + 1] + dp[x + 1][y])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + D)\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + D)\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + dp[x + 1][y])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + dp[x + 1][y])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + dp[x + 1][y])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + dp[x + 1][y])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + D)\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + dp[x + 1][y])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + dp[x + 1][y])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + dp[x + 1][y])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + dp[x + 1][y])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + dp[x + 1][y])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + dp[x + 1][y])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + dp[x + 1][y])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + dp[x + 1][y])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + dp[x + 1][y])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1])\n            # dp[x][y] = max(dp[x][y], dp[x][y] + dp[x][y + 1] + D)\n            # dp[x]["
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 1) == 1\nassert solution(2, 2) == 3\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"2\"\n\nassert solution(inp) == \"2\"\n\nassert solution(inp) == \"3\"\n\nassert solution(inp) == \"2\"\n\nassert solution(inp) == \"2\""
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    input=\n    \"3 3\"\n    ) == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"1 7 11\") == \"2\"\nassert solution(\"1 7 11\") == \"2\"\nassert solution(\"1 7 11\") == \"2\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\n\n\"\"\""
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n---\nThe maximum value of D that enables you to visit all the cities is 2.\nThe first and last city to be reached is at coordinate 11, and only one of them can be reached.\nThese cities are at coordinate 1 and 3.\nThe last city is at coordinate 7, and one of them is at coordinate 3.\nThese cities are at coordinate 5 and 1.\nThese cities are at coordinate 7, and one of them is at coordinate 5.\nThese cities are at coordinate 9 and 1.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 1.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 1.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate 9.\nThese cities are at coordinate 11.\nThese cities are at coordinate 3.\nThese cities are at coordinate 2.\nThese cities are at coordinate 5.\nThese cities are at coordinate 7.\nThese cities are at coordinate"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"3 5\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"1 7 11\") == \"3\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"ABCABCABC\") == \"Yes\"\nassert solution(\"ABABABABABABAB\") == \"No\"\nassert solution(\"\") == \"No\"\nassert solution(\"A\") == \"No\"\nassert solution(\"abc\") == \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(A) == 'Yes'\n\n\n-----Constraints-----\n - 0 \u2264 S.length \u2264 99\n - S consists of lowercase English letters.\n - 1 <= S.length <= 10\n - S is a palindrome.\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'Yes', 'Not a strong palindrome!'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('aksaka') == 'Yes'\nassert solution('aksaka') == 'No'\nassert solution('akasaka') == 'No'\nassert solution('akasaka2') == 'Yes'\nassert solution('akasaka2') == 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'Yes'\nprint('\\n', solution(stdin), '\\n')\n\n----Sample Input----\nabcdefghijklmnopqrstuvwxyz\n\n----Sample Output----\nYes\n\n - S is abcdefghijklmnopqrstuvwxyz.\n - The string formed by the 1-st through the 3-rd characters is aka.\n - The string formed by the 5-th through the 7-th characters is aka.\nAll of these are palindromes, so S is a strong palindrome.\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'Yes', 'Your solution is not correct'\n\n--------------------------------------------------------------------------------------------------------------\nA palindromic number reads the same both ways.\nThe largest palindrome made from the product of two 2-digit numbers is 9009 = 91 \u00d7 99.\n\nFind the largest palindrome made from the product of two 3-digit numbers.\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([]), '''No solution'''\n\"\"\"\nis a palindrome\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"No\"\n'''\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"akasaka\") == \"No\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"ad\") == \"Yes\"\nassert solution(\"c\") == \"Yes\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 217\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 217\n\n-----My Solution-----\nIn the above example, number  12345 was truncated by removing the fractional part.\n12345 should be returned.\n\n-----Sample Input-----\n1.2\n2.5\n3.6\n\n-----Sample Output-----\n3.6\n\n------\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 217\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"198 1.10\",\n    \"1 2\"\n) == \"217\"\nassert solution(\"162\", \"1234\") == \"32\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    '198 1.10'\n) == '217'\nassert solution(\n    '198 1.10'\n) == '217'\nassert solution(\n    '198 1.10'\n) == '217'\nassert solution(\n    '198 1.10'\n) == '217'\nassert solution(\n    '198 1.10'\n) == '217'\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"198 1.10\") == \"217\", \"1.10 -> %Error: Expected: %Error, got: %Error\"\nassert solution(\"199 1.2\") == \"199.2\", \"1.2 -> %Error: Expected: %Error, got: %Error\"\nassert solution(\"199 1.3\") == \"199.3\", \"1.3 -> %Error: Expected: %Error, got: %Error\"\nassert solution(\"199 1.4\") == \"199.4\", \"1.4 -> %Error: Expected: %Error, got: %Error\"\nassert solution(\"199 1.5\") == \"199.5\", \"1.5 -> %Error: Expected: %Error, got: %Error\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nassert solution(\"198 1.10.1\") == \"217\"\nassert solution(\"198 1.10.2\") == \"217\"\nassert solution(\"198 1.10.3\") == \"217\"\nassert solution(\"198 1.10.4\") == \"217\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()), \"The input is incorrect\"\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '217'\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == output\nassert (solution(\"198 1.10\") == \"217\")\nassert (solution(\"199 1.10\") == \"217\")\nassert (solution(\"201 1.10\") == \"217\")\nassert (solution(\"1.10 00 00 00 00 00 00 00 00 00\") == \"219\")\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0\", \"1\"\nassert solution(\"2\") == \"0\", \"2\"\nassert solution(\"3\") == \"1\", \"3\"\nassert solution(\"4\") == \"1\", \"4\"\nassert solution(\"5\") == \"1\", \"5\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"1000000000\") == \"0\"\nassert solution(\"100000001\") == \"0\"\nassert solution(\"100000010\") == \"0\"\nassert solution(\"100000011\") == \"0\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(12, 4) == 3\nassert solution(10, 4) == 0\n\n\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n\n1 <= t <= 10^4\n0 <= n <= 10^4\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Problems-----\nHomepage: https://www.hackerrank.com/challenges/distribute-candies-between-two-sisters/problem\n\nTest cases have been provided.\n\nFirst Line of each test case contains one integer $t$ \u2014 the number of test cases. Then $t$ test cases follow.\n\nEach line of the test case contains one integer $n$ \u2014 the number of candies you have.\n\nOutput consists of a single integer $a$ \u2014 the number of ways to distribute exactly $n$ candies between two sisters in a way described above.\n\nExample\n\nFor n = 10, the output should be\n\nDistribute Candies Between Two Sisters(10 candies)\n\n------------------------------------------------\n\"\"\""
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(6) == 3\nassert solution(7) == 1\nassert solution(1) == 1\nassert solution(2000000000) == 3\nassert solution(763243547) == 0\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1' or solution(stdin) == '2' or solution(stdin) == '3' or solution(stdin) == '4' or solution(stdin) == '5' or solution(stdin) == '6' or solution(stdin) == '7'\n\nPython3:\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(s) == 0\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 3\nassert solution(stdin) == 9\nassert solution(stdin) == 1"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 10\nassert solution(stdin) == 10\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(sys.stdin.readline()) == str(0)\nassert solution(sys.stdin.readline()) == str(0)\nassert solution(sys.stdin.readline()) == str(0)\nassert solution(sys.stdin.readline()) == str(0)\nassert solution(sys.stdin.readline()) == str(0)\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, 1) == 0\nassert solution(5, 5) == 0\nassert solution(5, 8) == 1\nassert solution(5, 1) == 1\nassert solution(1, 1) == 0\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\"]) == \"3\"\nassert solution([\"4\", \"1\", \"1\", \"2\", \"3\", \"1\", \"4\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1 2\"]) == \"0\"\nassert solution([\"1 2 1 3\"]) == \"0\"\nassert solution([\"1 2 1 3 2 4\"]) == \"0\"\nassert solution([\"1 2 1 3 2 4 5\"]) == \"0\"\nassert solution([\"1 2 1 3 2 4 5 6\"]) == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['9 9 1','1 2','1 3','2 3','3 4','4 1','4 8','9 8','7 1','7 8','8 1','8 8']), '1'\nassert solution(['9 9 1','1 2']), '1'\nassert solution(['5 4 5']), '3'\n\n\n-----Bonus-----\n\nInput\n\nOne of the examples above has been written.\n\nOutput\n\nOne of the examples above has been written.\n\nInput\n\nThe first example is illustrated by the following: [Image] \n\nIn this example, you can add roads ($5, 1$), ($5, 2$), ($5, 3$), ($5, 4$) to make all the cities reachable from $s = 5$.\n\nThe second example is illustrated by the following: [Image] \n\nIn this example, you can add any one of the roads ($5, 1$), ($5, 2$), ($5, 3$), ($5, 4$) to make all the cities reachable from $s = 5$.\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3 1\") == \"0\"\nassert solution(\"1 3 2\") == \"1\"\nassert solution(\"1 4 3\") == \"2\"\nassert solution(\"2 1 2\") == \"0\"\nassert solution(\"5 4 9\") == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 3') == '1'\nassert solution('1 5') == '3'\nassert solution('1 8') == '3'\nassert solution('5 1') == '1'\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 3\n\n1 1\n0 1\n1 2\n1 3\n1 5\n1 6\n1 7\n1 8\n1 9\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n4 5\n4 6\n4 7\n4 8\n4 9\n5 6\n5 7\n5 8\n5 9\n6 6\n6 7\n6 8\n6 9\n\n'''\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, 1, 1, 1, 1) == 1\nassert solution(1, 1, 2, 4, 3) == 1\nassert solution(1, 2, 2, 2, 2) == 1\nassert solution(1, 1, 1, 2, 2) == 2\nassert solution(1, 1, 1, 2, 2) == 2\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 4\nassert solution(2) == 1\nassert solution(3) == 4\nassert solution(4) == 1\nassert solution(5) == 5\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3 4 1\") == \"4\"\nassert solution(\"5 2 1 4\") == \"3\"\nassert solution(\"1 3 2 1\") == \"1\"\nassert solution(\"2 3 1 4\") == \"1\"\nassert solution(\"5 2 3 4\") == \"2\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 1 4 1\") == \"3\"\nassert solution(\"3 1 4 4 2\") == \"2\"\nassert solution(\"4 3 3 2 1\") == \"3\"\nassert solution(\"4 1 4 4 1\") == \"4\"\nassert solution(\"4 1 4 4 4 4\") == \"4\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 2 4 1\") == \"4\"\nassert solution(\"6 1 1 4 4 4\") == \"5\"\n\n\"\"\"\nclass Solution:\n    def solution(self, stdin, stdout):\n        n = int(stdin)\n        a = list(map(int,stdin.split()))\n        a.sort()\n        count = 0\n        for i in a:\n            if i>1:\n                count += i\n        while a and a[-1]>=1:\n            for i in a:\n                if i>1:\n                    count += i\n            a.pop()\n        return str(count)\n\nsolution(6, 2)\n\"\"\"\n\n-----Output-----\n\n1\n1\n\n1\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 2 3 1\") == \"2\"\nassert solution(\"2 2 2 4 4\") == \"4\"\n\n\nassert solution(\"1 1 1 3 2\") == \"2\"\nassert solution(\"1 2 1 1 3 3 3\") == \"3\"\nassert solution(\"1 1 1 2 1 3\") == \"3\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\""
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, \"2 4 1\") == \"3\"\nassert solution(6, \"1 1 1 4 4 4\") == \"5\"\nassert solution(6, \"1 2 3 3 4 4 4\") == \"5\"\nassert solution(6, \"1 3 3 3 4 4 4\") == \"5\"\nassert solution(6, \"1 4 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"000001000002\"\n\nassert solution(inp) == \"000002000001\"\n\nassert solution(inp) == \"000001000001\"\n\nassert solution(inp) == \"000002000000\"\n\nassert solution(inp) == \"00000100000\""
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == ['000001000002', '000001000001', '000001000001', '000001000001']\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"000001000002\"\nassert solution(\"1 32\") == \"000002000001\"\nassert solution(\"1 63\") == \"000002000000\"\nassert solution(\"1 12\") == \"0000020000000\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == ['00011000011', '000001000001', '000001000001']"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"00000001000\"\n\"\"\"\nclass Solution:\n    def solve(self, input):\n        pass"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"000002000001\"\nassert solution(input()) == \"000002000001\"\nassert solution(input()) == \"000002000001\"\nassert solution(input()) == \"000002000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"000001000002\"\nassert solution(inp) == \"000002000001\"\nassert solution(inp) == \"000001000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\u20181\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \u20190\u2019 \ufffd"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == ['000001000002', '000002000001', '000001000001']\n\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2,3) == \"000001000002\"\nassert solution(1,32) == \"000002000001\"\nassert solution(1,63) == \"000001000001\"\nassert solution(12,3) == \"000001000002\"\nassert solution(12,63) == \"000001000001\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == '2'\nassert solution(inp) == '3'\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2'"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"1\"\nassert solution(input) == \"0\"\nassert solution(input) == \"0\"\nassert solution(input) == \"0\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 11 1\") == \"2\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution(\"1 1 2\") == \"3\"\nassert solution(\"1 1 3\") == \"3\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == '2'"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"5 3 10\", \"1 5 3\", \"4 10 4\", \"5 10 2\"]) == \"12\"\nassert solution([\"2 5 1\", \"4 3 3\", \"4 4 3\", \"5 3 3\"]) == \"8\"\nassert solution([\"2 2 5\", \"2 2 5\", \"3 2 4\", \"3 2 4\", \"4 2 3\", \"4 2 3\", \"4 3 2\", \"5 3 3\", \"5 3 3\"]) == \"6\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(raw_input()) == \"2\"\nassert solution(raw_input()) == \"2\"\nassert solution(raw_input()) == \"2\"\nassert solution(raw_input()) == \"2\"\nassert solution(raw_input()) == \"2\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3 10 8 4 6\") == \"3\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"1 1 0 0 0\") == \"1\"\nassert solution(\"1 1 0 1 0\") == \"1\"\nassert solution(\"1 1 0 0 1\") == \"1\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(raw_input()), \"The code is wrong.\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"2\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"?(+/-*_+_)__-)__<___*__-_____*______-___<__-,__-___<__-,__-____<___,__<_____,_____<______,______<_______\") == \"false\"\nassert solution(\"?(+/-*_+_)__-)__<___*__-___<__-,__-___<__-,__-___<__-,__-____<___,__<_____,_____<______,______<_______\") == \"false\"\nassert solution(\"?(+/-*_+_)__-)__<___*__-___<__-,__-___<__-,__-___<__-,__-____<___,__<_____,_____<______,______<_______\") == \"false\"\nassert solution(\"?(+/-*_+_)__-)__<___*__-___<__-,__-___<__-,__-___<__-,__-____<___,__<_____,_____<______,______<_______\") == \"false\"\nassert solution(\"?(+/-*_+_)__-)__<___*__-___<__-,__-___<__-,__-___<__-,__-____<___,__<_____,_____<______,______<_______\") == \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'false'\nassert solution(input('?')) == '0101'\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"?(+_0<____*___-__,___*__-___)__\") == \"false\"\nassert solution(\"?(+__+_)__\") == \"false\"\nassert solution(\"?\"(+_*_)__\") == \"false\"\nassert solution(\"?(__+__-___)(_____)\") == \"false\"\nassert solution(\"?(___+_)__\") == \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('COCO') == '0101'\nassert solution('UY') == '0101'\nassert solution('Gorps') == '0101'\nassert solution('Gaia') == '0101'\nassert solution('UY') == '0101'\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('test') == '0101'\nassert solution('a,b,c') == '0101'\nassert solution('a_d,e_m,f_l,g_i') == '0101'\nassert solution('a_d,e_m,f_l,g_i') == '0101'\nassert solution('a_d,e_m,f_l,g_i') == '0101'\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"false\""
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"?(__+___+__-___)\") == \"0101\"\nassert solution(\"?(__________+_)\") == \"false\"\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"false\"\nassert solution(input().lower()) == \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"false\"\nassert solution(stdin) == \"0101\"\nassert solution(stdin) == \"0101\"\nassert solution(stdin) == \"0101\"\nassert solution(stdin) == \"0101\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"~__+__+__-__+__+__-__+__-__+__-__\") == \"false\"\nassert solution(\"__________+_______*__-___+______-___+_______\") == \"false\"\nassert solution(\"__________+__________+__________+__________+__________\") == \"false\"\nassert solution(\"__________+__________+__________+__________+__________\") == \"false\"\nassert solution(\"__________+__________+__________+__________+__________\") == \"false\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 4 2\") == \"3\"\nassert solution(\"3 4 1000000000000000000\") == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"3 4 1000000000000000000000\") == \"3\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 4 2\") == \"3\"\nassert solution(\"3 4 1000000000000000000\") == \"4\"\nassert solution(\"3 4 100000010\") == \"9\"\nassert solution(\"3 4 1000000100\") == \"15\"\nassert solution(\"3 4 100000010000\") == \"32\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"5\"\nassert solution(\"5 4\") == \"5\"\nassert solution(\"1 2 3 4\") == \"6\"\nassert solution(\"1 3 2 4\") == \"6\"\nassert solution(\"1 3 4 5\") == \"6\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"3 3 11\", \"2 1 5\", \"7 10 0\", \"12 6 4\"]) == \"5\"\nassert solution([\"3 4 2\", \"1 3 3 3\", \"0 3 3 2\", \"3 0 1 1\"]) == \"0\"\nassert solution([\"3 4 1000000000000000000\", \"1 3 3 3\", \"0 3 3 2\", \"3 0 1 1\"]) == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\nassert solution('3 4 1000000000000000000') == '0'\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 4) == 4\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 4 10\") == \"3\"\nassert solution(\"3 4 1000000000000000000\") == \"5\"\nassert solution(\"3 4 1000000000000000000000\") == \"0\"\nassert solution(\"3 4 100000000000000000001000\") == \"0\"\nassert solution(\"3 4 10000000000000000000001\") == \"0\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"z\"\nassert solution(stdin) == \"thisisexampletwo\"\nassert solution(stdin) == \"codeforces\"\nassert solution(stdin) == \"secrofedoc\"\nassert solution(stdin) == \"plmaetwoxesisiht\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"thisisexampletwo\"\nassert solution(stdin) == \"codeforces\"\n\n\n-----Algorythm:"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"thisisexampletwo\"\n\n\n-----Solution-----\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"rocesfedoc\", \"solution failed\"\nassert solution(stdin) == \"codeforces\", \"solution failed\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"z\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"codeforces\"\n\nassert solution(stdin) == \"secroedoc\"\n\nassert solution(stdin) == \"orcesfedoc\"\n\nassert solution(stdin) == \"rocesfedoc\"\n\nassert solution(stdin) == \"rocesfedoc\""
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"thisisexampletwo\"\nassert solution(stdin) == \"codeforces\"\nassert solution(stdin) == \"plmaetwoxesisiht\"\nassert solution(stdin) == \"z\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"code\"\n\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.max = 0\n        \n    def solution(self, stdin: str) -> str:\n        pass\n        \n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"thisisexampletwo\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"s\"\nassert solution(stdin) == \"t\"\n\n\n\n-----Example-----\nExample 1:\n\nInput\n3\ncoding\n\nOutput\ncoding\n\nExplanation\n1) 1 = 10^3 = 100\n2) 1 = 10^3 = 10000\n3) 0 = 10^3 = 10000\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(514) == \"19\"\nassert solution(381) == \"873\"\nassert solution(984) == \"1866\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"1 2\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"The function fails to run.\"\n'''"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"873\"\nassert solution(stdin) == \"19\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"A + B\") == \"A + B\"\nassert solution(\"A - B\") == \"A - B\"\nassert solution(\"A / B\") == \"A / B\"\nassert solution(\"A // B\") == \"A // B\"\nassert solution(\"A % B\") == \"A % B\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"A + B\") == \"A + B\", \"Failed to find answer\"\n\n\n-----Discussion-----\nTo make this problem simpler, we use the following recursive solution to calculate the sum of the two given integers. The sum is returned as a string.\n\n\n\n-----Input-----\n\nThe input contains two integers a and b (0 \u2264 a, b \u2264 10^3), separated by a single space.\n\n\n-----Output-----\n\nOutput the sum of the given integers.\n\n\n-----Examples-----\nInput\n5 14\n\nOutput\n19\n\nInput\n381 492\n\nOutput\n873\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"5\",\"14\",\"381\",\"492\"]) == \"19\"\nassert solution([\"381\",\"492\"]) == \"873\"\nassert solution([\"5\",\"14\",\"381\",\"492\"]) == \"20\"\nassert solution([\"381\",\"492\"]) == \"15\"\nassert solution([\"5\",\"14\",\"381\",\"492\"]) == \"12\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"6 4 6 2\") == \"19\"\nassert solution(\"12 2 4 6\") == \"12\"\nassert solution(\"201 0 0 4\") == \"201\"\nassert solution(\"420 0 5 1\") == \"873\"\n\n\n-----Discussion-----\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '873'\nassert solution(stdin) == '4145'\nassert solution(stdin) == '299'\nassert solution(stdin) == '6'\nassert solution(stdin) == '54'\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\"\n    \\\"\\\"\\\""
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"19\"\nassert solution(input()) == \"873\"\nassert solution(input()) == \"81\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"30000 memory cells.\\n 30000 console input.\\n\") == \"+++++++>\\n+++++++>\\n<<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\nassert solution(\"123456789123456789123412341234567890\".strip()) == \"123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n123456789123456789123412341234567890\\n1234567891234567891234123412345678"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"++>\n+++>\n<[<+>-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\nassert solution(stdin) == \"+++++++++>\n+++++++++++>\n<[<->-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\nassert solution(stdin) == \"++++++++[->-]++>\n++++++++[->-]++>\n<[<->-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\nExplanation\n\nThe Brainfuck interpreter is a very simple calculator:\n\n\n+++++>\n++>\n+++>\n<[<+>-]<\n++++++++++>\n++++++++[->-]++>\n<[<->-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\nThe problem is solved within 25 operations. So the answer is in brackets.\n\n\n+++++>\n+++++++++>\n<[<+>-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\nassert solution(stdin) == \"++++++++[->-]++>\n++++++++[->-]++>\n<[<->-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\n\nNote:\nThe input string should be of the form \"1 + 2 + 3 +... +  5\".\n\nHere, \" + \" + \" = \"+ \"1\" + \" + \" + \" + \" +... + \" + \" + \"5\".\nThe logic must be checked. The non-command characters are not used.\n\n'''\nimport time\nfrom functools import reduce\nimport math"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2+3) == \"++>++>++<+>-<-\"\nassert solution(9-7) == \"+++++++++>+++++++>++++<-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+>-<+"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"++>\"\nassert solution(input(\"+ \")) == \"+>\"\nassert solution(input(\"- \")) == \"->\"\nassert solution(input(\"< \")) == \"<\"\nassert solution(input(\"<-\")) == \"<-\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(main()), \"The function doesn't work\"\n\n-----Constraints-----\n\n0 <= N <= 10^5\n\n1 <= op1, op2, op3, op4 <= 255\n\noperations = [\n  \"+\",\n  \"-\"\n]\n\nadapters = [\n  [\"+\", \"+\", \"+\", \"+\"],\n  [\"+\", \"+\", \"+\", \"+\"],\n  [\"+\", \"\", \"\", \"\"]\n]"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['9-7','9-6','9-5','9-4','9-3','9-2','9-1','8-1','8-0','7-0','7-1','7-2','7-3','7-4','7-5','7-6','7-7','7-8','7-9','7-10','7-11','7-12','7-13','7-14','7-15','7-16','7-17','7-18','7-19','7-20','7-21','7-22','7-23','7-24','7-25','7-26','7-27','7-28','7-29','7-30','7-31','7-32']) == '30000 50000', 'ERROR: solution failed'"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '+>' or solution(stdin) == '+++++>' or solution(stdin) == '<[<->-]<' or solution(stdin) == '+++++++++>' or solution(stdin) == '<[->-]<'\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"2\", \"3\"]) == \"+\"\nassert solution([\"9\", \"7\"]) == \"++>\"\nassert solution([\"9\", \"7\", \"-\"]) == \"+++>\"\nassert solution([\"9\", \"7\", \"+\"]) == \"<[<+>-]<\"\nassert solution([\"9\", \"7\", \"-\"]) == \"<[<->-]<\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"11212312341234512345612345671234567812345678912345678910\"\nassert solution(\"11212312341234512345612345671234567812345678912345678910\") == \"11212312341234512345612345671234567812345678912345678910\"\nassert solution(\"112123123412345123451234567812345678912345678912345678910\") == \"112123123412345123451234567812345678912345678912345678910\"\nassert solution(\"112123123412345123451234567812345678912345678912345678910\") == \"112123123412345123451234567812345678912345678912345678910\"\nassert solution(\"112123123412345123451234567812345678912345678912345678910\") == \"112123123412345123451234567812345678912345678912345678910\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5,[\"1\", \"2\", \"3\", \"20\", \"38\", \"56\"]) == \"2\"\nassert solution(5,[\"1\", \"1\", \"2\", \"3\", \"3\", \"3\", \"20\", \"38\", \"46\", \"80\", \"12345\", \"34567\", \"1234\", \"1234567\", \"12345678\", \"123456789\", \"12345678910\", \"12341234\", \"12341234123\", \"1234123412345\", \"123456789012\", \"1234567890123\", \"123456789012345\", \"1234567890123456\", \"12345678901234567\", \"123456789012345678\", \"1234567890123456789\", \"12345678901234567890123456789\", \"12345678901234567890123456789012345678\"]) == \"2\"\nassert solution(5,[\"1\", \"1\", \"1\", \"1\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\"]) == \"2\"\nassert solution
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\n\n\n-----Algorithm-----\n\nFor every line, calculate the number of elements equal to $i$-th element of the sequence.\n\nSince the sequence consists of $i$ elements, the answer is the sum of the elements at the position $k_i$ of the sequence.\n\nThe $i$-th element of the sequence is $k_i$.\n\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"5\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '5'\nassert solution(stdin) == '3'\nassert solution(stdin) == '20'\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, [\"1\", \"3\", \"20\", \"38\", \"56\"]) == \"2\"\nassert solution(4, [\"2132\", \"506\", \"999999999999999999\", \"1000000000000000000\"]) == \"0\"\nassert solution(4, [\"1\", \"2\", \"1\", \"1\"]) == \"0\"\nassert solution(2, [\"1\", \"2\", \"1\", \"1\"]) == \"1\"\nassert solution(1, [\"1\", \"2\", \"1\", \"1\"]) == \"0\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    stdin\n    ) == '12'\n\nIncorrect Input\n\n>>> def solution(stdin) -> int:\n    pass\n\nassert solution(\n    stdin\n    ) == 0\n\nInput 0\n\n>>> def solution(stdin) -> int:\n    pass\n\nassert solution(\n    stdin\n    ) == 0\n\nInput 12\n\n>>> def solution(stdin) -> int:\n    pass\n\nassert solution(\n    stdin\n    ) == 3\n\nInput 15\n\n>>> def solution(stdin) -> int:\n    pass\n\nassert solution(\n    stdin\n    ) == 0\n\nIncorrect Input\n\n>>> def solution(stdin) -> int:\n    pass"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 4\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 4\nassert solution(input('0123456789')) == '5'\nassert solution('547') == '5'\nassert solution('-345') == '5'\nassert solution('0912345') == '3'\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 4"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 0, \"Check your solution\"\nassert solution(8) == 0, \"Check your solution\"\nassert solution(9) == 3, \"Check your solution\"\nassert solution(16) == 2, \"Check your solution\"\nassert solution(17) == 3, \"Check your solution\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"4\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1\"]) == \"1\"\nassert solution([\"2\",\"4\"]) == \"3\"\nassert solution([\"5\",\"6\",\"8\",\"7\",\"9\"]) == \"8\"\nassert solution([\"2\",\"3\",\"12\"]) == \"8\"\nassert solution([\"1\",\"5\",\"9\"]) == \"5\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == str(len(set(map(int, input().split()))))"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"7\"\nassert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"9\") == \"9\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 1\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(solution(\"123\")) == \"5\"\nassert solution(solution(\"11001\")) == \"0\"\nassert solution(solution(\"110010011100010\")) == \"0\"\nassert solution(solution(\"110000001110001011110\")) == \"1\"\nassert solution(solution
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"the problem is not possible\"\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"000\") == \"1\"\nassert solution(\"001\") == \"2\"\nassert solution(\"010\") == \"2\"\nassert solution(\"011\") == \"1\"\nassert solution(\"101\") == \"2\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(S) == 5\n\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '5'\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(int(input())) == 3\n\nclass Solution:\n    def minimumTiles(self, S: str) -> int:\n        # solution(S)\n        N = len(S)\n        dp = [[1 for _ in range(N)] for _ in range(N)]\n        \n        # calculate dp[i][j] and add 1 to each i,j value\n        for i in range(N):\n            for j in range(N):\n                if i!= j:\n                    dp[i][j] = dp[i][j] + (S[i] == S[j])\n                    \n        \n        # count how many times that value is 1\n        ans = 0\n        for i in range(N):\n            for j in range(N):\n                if S[i] == S[j]:\n                    ans += 1\n        \n        return ans\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 1\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"DENIED\"\n\nTest Case 2\n2\n5 7 9 10 31\n\nTest Case 3\n3\n5 7 9 10 31\n\nTest Case 4\n3\n5 7 9 10 31\n\nTest Case 5\n4\n5 7 9 10 31\n\nTest Case 6\n2\n5 7 9 10 31\n\nTest Case 7\n3\n5 7 9 10 31\n\nTest Case 8\n3\n5 7 9 10 31\n\nTest Case 9\n2\n5 7 9 10 31\n\nTest Case 10\n1\n5 7 9 10 31\n\n-----Sample Output-----\nAPPROVED\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 6 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"APPROVED\"\nassert solution(input()) == \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(''), \"The input is not valid\""
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5 5') == 'APPROVED'\nassert solution('6 7 9 10 31') == 'DENIED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"5 6 7 9 10 31\"\n) == \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution) == 'DENIED'\n\n'''"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(RUDLUDR) == 'Yes'\nassert solution(RUDLUDR) == 'No'\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    [\"RUDLUDR\"]\n) == \"No\"\nassert solution(\n    [\"RUDLUDR\", \"DU\"]\n) == \"No\"\nassert solution(\n    [\"RUULDU\", \"DU\"]\n) == \"Yes\"\nassert solution(\n    [\"RULDU\", \"DU\"]\n) == \"No\"\nassert solution(\n    [\"RULDU\", \"DU\"]\n) == \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RUDRU\") == \"No\"\nassert solution(\"RUDLUDUDR\") == \"Yes\"\nassert solution(\"RUDRUDR\") == \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RULDUDR\") == \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(RUDLUDR) == Yes\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s) == \"Yes\" or solution(s) == \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(RUDLUDR) == \"Yes\"\nassert solution(RUDLUDR) == \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'Yes'\n\nassert solution(stdin) == 'No'\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(s) == \"Yes\"\nassert solution(s) == \"No\"\n-----Sample Output-----\nYes\n\nEvery character in an odd position (1-st, 3-rd, 5-th, 7-th) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th) is L, U, or D.\nThus, S is easily playable.\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(Takahashi) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '7'\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"7\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\", \"3\", \"2\", \"4\", \"3\", \"5\"]) == \"7\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"7\"\nassert solution([\"5\", \"3\", \"5\", \"1\", \"4\", \"3\", \"2\", \"1\", \"4\"]) == \"7\"\nassert solution([\"5\", \"1\", \"4\", \"1\"]) == \"8\"\nassert solution([\"5\", \"3\", \"5\", \"4\", \"1\"]) == \"7\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5\", \"3\", \"2\", \"4\", \"3\", \"5\"]) == \"7\"\nassert solution([\"5\", \"3\", \"2\", \"1\", \"4\", \"3\", \"5\"]) == \"7\"\nassert solution([\"5\", \"3\", \"2\", \"1\", \"1\", \"4\", \"3\", \"5\"]) == \"7\"\nassert solution([\"5\", \"3\", \"2\", \"1\", \"1\", \"2\", \"3\", \"4\", \"5\", \"3\"]) == \"7\"\nassert solution([\"5\", \"3\", \"2\", \"1\", \"1\", \"2\", \"3\", \"4\", \"5\", \"3\", \"1\"]) == \"7\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"7\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 1 4 3 5') == '7'\nassert solution('1 1 4 3') == '6'\nassert solution('1 5 1 2') == '5'\nassert solution('1 2 3 4') == '3'\nassert solution('1 2 3 4 5') == '4'\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"7\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '7'\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"5\"\nassert solution(input) == \"7\""
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '7'\nassert solution(input2) == '7'\nassert solution(input3) == '7'\nassert solution(input4) == '7'\nassert solution(input5) == '7'\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 0\nassert solution(2) == 9\nassert solution(3) == 9\nassert solution(4) == 9\nassert solution(5) == 9\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\n\nassert solution(input()) == \"3\"\n\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2\"\n\n\n------------------\nInput Format\nThe first line contains an integer, N.\nThe second line contains N space-separated integers, A_1,A_2,\\ldots,A_N.\n\nOutput Format\nPrint a single line containing one integer, N, that satisfies all of the conditions described above.\n\nSample Input\n3\n4\n3 3 3\n3 2 4\n\nSample Output\n3\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n2\n1\n5\n\n2\n3\n\n4\n1\n\n1\n1\n\n1\n\"\"\"\n) == \"4\"\n\"\"\"\n2\n1\n5\n\n2\n1\n\n3\n1\n\n3\n1\n\"\"\"\n\"\"\"\n2\n1\n3\n\n4\n1\n\n3\n1\n\n\"\"\"\n\"\"\"\n2\n0\n\n3\n0\n\n1\n\n1\n\n\"\"\"\n\"\"\"\n2\n0\n0\n1\n\n2\n1\n1\n\n2\n1\n1\n\"\"\"\n\"\"\"\n2\n0\n0\n1\n0\n\n3\n1\n0\n1\n1\n1\n\"\"\"\n\"\"\"\n2\n0\n0\n1\n0\n\n3\n0\n1\n1\n1\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n1\n0\n\n3\n0\n1\n1\n1\n\n1\n1\n0\n1\n\"\"\"\n\"\"\"\n2\n0\n0\n1\n\n3\n0\n0\n0\n\n1\n0\n1\n1\n\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n1\n0\n\n1\n1\n1\n0\n\n\"\"\"\n\"\"\"\n2\n1\n1\n1\n\n1\n1\n0\n\n\"\"\"\n\"\"\"\n2\n1\n0\n0\n0\n\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\"\n\"\"\"\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"9\") == \"2\"\nassert solution(\"100000000\") == \"3\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"2\"\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stderr.getvalue()) == \"7\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('9') == '9'\nassert solution('10') == '10'\nassert solution('11') == '11'\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"0,9\\\") == 9\nassert solution(\\\"9,0\\\") == 0\nassert solution(\\\"0,9,9\\\") == 0\nassert solution(\\\"0,9,0,9\\\") == 0\nassert solution(\\\"0,0,9,0\\\") == 9\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == '2'"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 23\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"6\") == \"23\"\nassert solution(\"7\") == \"23\"\nassert solution(\"1\") == \"2\"\nassert solution(\"13\") == \"13\"\nassert solution(\"23\") == \"23\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 1\nassert solution(2) == 3\nassert solution(3) == 5\nassert solution(4) == 7\nassert solution(5) == 11\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 5\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 23\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(x) == x\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('0') == '0'\nassert solution('2') == '1'\nassert solution('7') == '2'\nassert solution('13') == '3'\nassert solution('999') == '5'\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"4\") == 4\nassert solution(\"5\") == 5\nassert solution(\"6\") == 6\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(solution(\"6\"))) == 23\nassert solution(solution(\"6\"))) == 23\nassert solution(solution(\"3\"))) == 2\nassert solution(solution(\"3\"))) == 2\nassert solution(solution(\"20\"))) == 23\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(main) == 23\n\n-----Bonus-----\n- Time complexity: O(N^2)\n- Space Complexity: O(N)\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n'''"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 1 3 2') == 3\nassert solution('1 2 3 3 1') == 2\nassert solution('3 3 3 2 1 2') == 2\nassert solution('3 3 3 2') == 2\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 3\nassert solution(4) == 1\nassert solution(5) == 1\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"3 2\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 4 5 6\") == \"2\"\n\nassert solution(\"1 2 3 4\") == \"3\"\n\nassert solution(\"1 3 2\") == \"4\"\n\nassert solution(\"2\") == \"2\""
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"123\") == \"123\"\nassert solution(\"4\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"12\") == \"1\"\nassert solution(\"123123\") == \"123\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 3 1 3 2\") == \"1\"\nassert solution(\"2 2 2 2 2 2 2 2 2 2 2 2\") == \"1\"\nassert solution
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3 1 3 2\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n5\n8 7\n10 2 5\n\"\"\"\n) == \"10\"\nassert solution(\n\"\"\"\n4\n3\n1\n10\n\"\"\"\n) == \"10\"\nassert solution(\n\"\"\"\n3 1 3 2\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n5\n10 2 5\n\"\"\"\n) == \"3\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3 1 3 2\"]) == \"3 1 3 2\"\nassert solution([\"1 3\"]) == \"1 3\"\nassert solution([\"1 2\", \"1 3\"]) == \"1 2\"\nassert solution([\"4 1\", \"1 2\", \"1 3\", \"1 4\"]) == \"1 2\"\nassert solution([\"6 3\", \"6 4\", \"6 5\", \"6 6\"]) == \"6 3\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 100 90 80') == '23'\nassert solution('5 100 90 80') == '2'\nassert solution('5 100 90 80') == '2'\nassert solution('5 100 90 80') == '2'\nassert solution('5 100 90 80') == '2'\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5\") == \"23\"\nassert solution(\"5 99 40\") == \"23\"\nassert solution(\"5 98 40\") == \"23\"\nassert solution(\"5 99 40 1\") == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 23\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == 1\nassert solution(\"3 8\") == 6\nassert solution(\"4 0\") == 0\nassert solution(\"4 0\") == 0\nassert solution(\"5 0\") == 0\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"23\"\n'''\n\nfrom collections import Counter\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"98\") == \"23\"\nassert solution(\"40\") == \"23\"\nassert solution(\"30\") == \"23\"\nassert solution(\"21\") == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"98 98 40\") == \"21\"\nassert solution(\"98 40 20\") == \"80\"\nassert solution(\"40 30 21 80\") == \"100\"\nassert solution(\"40 30 21 80\") == \"100\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"4 56 40 30\") == \"17\"\nassert solution(\"2 3 5 1 3 3 1\") == \"15\"\nassert solution(\"2 3 2 2\") == \"2\"\nassert solution(\"1 2 10 2\") == \"2\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"23\""
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"A\") == \"A\"\nassert solution(\"XYZ\") == \"AZ\"\nassert solution(\"XYZZ\") == \"AZZ\"\nassert solution(\"ABCXZ\") == \"ABZ\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"CDEZAB\"\nassert solution(stdin) == \"BADEFRRR\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n        \n        \n        input_data = input())\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == \"CDEZAB\"\nassert solution(1) == \"ABC\"\nassert solution(7) == \"ABZ\"\nassert solution(4) == \"CZ\"\n\"\"\"\n\n\nclass Solution:\n    def arrange(self, string):\n        ans = string[::-1]\n        for i in range(len(string) - 1, -1, -1):\n            if string[i] == ans[i]:\n                ans = ans[0:i] + ans[i + 1:]\n            else:\n                break\n        return ans\n\n    def reverse_string(self, string):\n        return self.arrange(string)\n\n    def get_result(self, string):\n        answer = self.reverse_string(string)\n        answer = answer.split('Z')\n        ans = [''.join(answer[i]) for i in range(len(answer))]\n        return ans\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    'ABCXYZ'\n) == 'CDEZAB'\n\nassert solution(\n    'XYZ'\n) == 'XYZ'\n\nassert solution(\n    'ABCXYZ'\n) == 'XYZ'\n\nassert solution(\n    'ABCXYZ'\n) == 'XYZ'\n\nassert solution(\n    'ABCXYZ'\n) == 'XYZ'"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ABCXYZ\"), \"CDEZAB\"\nassert solution(\"ABCXYZ\"), \"CABA\"\nassert solution(\"ABCXYZ\"), \"BCAZ\"\nassert solution(\"ABCXYZ\"), \"CBAZ\"\nassert solution(\"ABCXYZ\"), \"ABCXZ\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"ABCXYZ\"\n) == \"CDEWAB\"\nassert solution(\n    \"ABCXYZ\"\n) == \"CDEZAB\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"CDEZAB\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 'CDEZAB'\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"CDEZAB\"\nassert solution(input) == \"BZYXA\"\nassert solution(input) == \"ABXYZZ\"\nassert solution(input) == \"CDEZAB\"\nassert solution(input) == \"BZZYXA\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5') == '2 3 2 2 3 3 3'\nassert solution('1') == '1 2 3'\nassert solution('2') == '2 3 2 3'\nassert solution('3') == '3 2 2 3 3 3 3'\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"270131\"\nassert solution(stdin) == \"1999999\""
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin = \"5 2 3 2 4\"\n) == \"3 4 2\"\nassert solution(\n    stdin = \"1 2 3 4\"\n) == \"2\"\nassert solution(\n    stdin = \"1 2 4\"\n) == \"1\"\nassert solution(\n    stdin = \"1 3 2 5 7 8 9\"\n) == \"5\"\nassert solution(\n    stdin = \"7\"\n) == \"7\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"17\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '6'\nassert solution(stdin) == '6'\nassert solution(stdin) == '6'\nassert solution(stdin) == '6'\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"10\",\"12\",\"11\"]) == \"11 12 13\"\nassert solution([\"14\", \"13\", \"12\"]) == \"14 13 12\"\nassert solution
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3 4 2 \nassert solution(stdin) == \"3 4 2 \nassert solution(stdin) == \"3 4 2 \nassert solution(stdin) == \"3 4 2 \nassert solution(stdin) == \"3 4 2 \n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 5 2 3 2 4\") == \"2 5 2\"\nassert solution(\"1 2 3 4 5\") == \"4\"\nassert solution(\"1 3 2 4 5\") == \"5\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"743919\"\nassert solution(stdin) == \"743919\"\nassert solution(stdin) == \"743919\"\nassert solution(stdin) == \"743919\"\nassert solution(stdin) == \"743919\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 3') == '3 6'\nassert solution('2 3') == '3 2'\nassert solution('3 2 3 3 2') == '3 3'\nassert solution('3 2 3 3 2') == '3 3'\nassert solution('3 2 3 3 2') == '3 3'\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"21112\"\n\"\"\""
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"11111\"\nassert solution(stdin) == \"22111\""
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n4 1\\n7 1\\n5 1\\n3 4\\n5 4\\n1 4\\n1 1\\n1 3\\n1 5\\n4 4\\n2 2\\n2 2\\n3 3\\n3 2\\n4 4\\n1 1\\n1 3\\n2 3\\n3 2\\n4 4\\n3 2\\n1 1\\n5 1\\n3 4\\n4 2\\n3 2\\n2 2\\n3 3\\n3 2\\n4 3\\n3 2\\n4 4\\n3 2\\n4 4\\n2 2\\n1 1\\n2 2\\n3 3\\n4 3\\n3 2\\n4 4\\n2 2\\n3 2\\n2 2\\n3 3\\n3 2\\n4 4\\n3 2\\n4 4\\n2 2\\n1 1\\n2 2\\n3 3\\n4 3\\n3 2\\n4 4\\n3 2\\n4 4\\n2 2\\n1 1\\n2 2\\n3 3\\n4 3\\n3 2\\n4 4\\n3 2\\n4 4\\n2 2\\n1 1\\n2 2\\n3 3\\n4 3\\n3 2\\n4 4\\n3 2\\n4 4\\n2 2\\n1 1\\n2 2\\n3 3\\n4 3\\n3 2\\n4 4\\n3 2\\n4 4\\n2 2\\n1 1\\n2 2\\n3 3\\n4 3\\n3 2\\n4 4\\n3 2\\n4 4\\n2 2\\n1 1\\n2 2\\n3 3\\n4 3\\n3 2\\n4 4\\n3 2\\n4 4\\n2 2\\n1 1\\n2 2\\n3 3\\n4 3\\n3 2\\n4 4\\n3 2\\n4 4\\n2 2\\n1 1\\n2 2\\n3 3\\n4 3\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n2 2\\n1 1\\n2 2\\n3 3\\n4 3\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n2 2\\n1 1\\n2 2\\n3 3\\n4 3\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n2 2\\n1 1\\n2 2\\n3 3\\n4 3\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n2 2\\n1 1\\n2 2\\n3 3\\n4 3\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2\\n4 4\\n3 2"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 2') == '11111'\nassert solution('7 1') == '22111'\nassert solution('5 1') == '21112'\nassert solution('7 2') == '1121122'"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"22111\"\nassert solution(\"7 1\") == \"21112\"\nassert solution(\"7 2\") == \"22212\"\nassert solution(\"7 3\") == \"22212\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"2211\"\nassert solution(\"5 1\") == \"11112\"\nassert solution(\"7 1\") == \"11112\"\nassert solution(\"7 2\") == \"22111\"\nassert solution(\"7 3\") == \"221111\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"22111\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"5 2 \"\n    \"2 4 5 3 1 \"\n    \"7 1 \"\n    \"7 2 1 3 5 4 \"\n    \"5 1 \"\n    \"3 5 \"\n    \"1 2 \"\n    \"1 2 \"\n    \"2 4 \"\n    \"2 3 \"\n    \"3 1 \"\n    \"3 2 \"\n    \"5 1 \"\n    \"5 2 \"\n    \"2 4 \"\n    \"5 1 \"\n    \"1 1 \"\n    \"5 3 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 3 \"\n    \"2 1 \"\n    \"3 3 \"\n    \"2 1 \"\n    \"3 1 \"\n    \"4 4 \"\n    \"1 3 \"\n    \"1 2 \"\n    \"1 2 \"\n    \"1 1 \"\n    \"3 2 \"\n    \"3 1 \"\n    \"3 1 \"\n    \"3 2 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"3 2 \"\n    \"3 1 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 3 \"\n    \"1 1 \"\n    \"2 1 \"\n    \"2 3 \"\n    \"2 1 \"\n    \"3 3 \"\n    \"2 2 \"\n    \"3 2 \"\n    \"3 2 \"\n    \"3 1 \"\n    \"4 4 \"\n    \"1 3 \"\n    \"1 2 \"\n    \"1 1 \"\n    \"3 2 \"\n    \"3 2 \"\n    \"3 2 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 3 \"\n    \"1 1 \"\n    \"3 2 \"\n    \"3 2 \"\n    \"3 2 \"\n    \"3 2 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \"2 4 \"\n    \""
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5 1\", \"2 4 5 3 1\", \"7 1\", \"7 2 1 3 5 4\", \"5 1\"]) == \"1121122\"\nassert solution([\"1\", \"1\", \"3\", \"4\", \"4\", \"6\", \"6\", \"1\", \"2\", \"2\", \"2\", \"1\"]) == \"111122\"\nassert solution([\"7\", \"7\", \"5\", \"3\", \"1\", \"4\", \"3\", \"2\", \"1\", \"1\", \"5\", \"4\", \"5\", \"6\", \"6\", \"7\"]) == \"1121122\"\nassert solution([\"5\", \"5\", \"5\", \"4\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"4\", \"4\", \"5\", \"5\", \"4\", \"3\", \"3\", \"4\", \"4\", \"2\", \"2\", \"1\", \"1\", \"2\", \"2\", \"2\", \"3\", \"3\", \"3\", \"3\", \"4\", \"4\", \"4\", \"5\", \"4\", \"3\", \"3\", \"2\", \"3\", \"2\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"3\", \"3\", \"3\", \"3\", \"3\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"4\", \"3\", \"3\", \"3\", \"3\", \"3\", \"4\", \"4\", \"4\", \"4\", \"5\", \"5\", \"5\", \"4\", \"3\", \"3\", \"3\", \"2\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"5\", \"5\", \"5\", \"5\", \"4\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"4\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"4\", \"4\", \"4\", \"4\", \"4\", \"5\", \"5\", \"5\", \"5\", \"4\", \"4\", \"4\", \"4\", \"4\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"4\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"4\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"4\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \""
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, 2) == 11111, \"incorrect output\"\nassert solution(5, 1) == 2, \"incorrect output\"\nassert solution(5, 5) == 22111, \"incorrect output\"\nassert solution(7, 1) == 2, \"incorrect output\"\nassert solution(7, 5) == 1121122, \"incorrect output\"\n"
    }
]