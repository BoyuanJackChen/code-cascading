[
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '8'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 3 4 5\") == \"5\"\nassert solution(\"2 4 3\") == \"1\"\nassert solution(\"2 3 4\") == \"1\"\nassert solution(\"2 4 3 2 3\") == \"3\"\nassert solution(\"2 4 3 2 4\") == \"5\""
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"5\"\nassert solution(\"8 1\") == \"5\"\nassert solution(\"8 3\") == \"5\"\nassert solution(\"8 4\") == \"5\"\nassert solution(\"8 5\") == \"5\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3,4,6\"\nassert solution(input()) == \"2,3,5,7\"\nassert solution(input()) == \"1,2,3,4,5,6\"\n\n---"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == '5'\nassert solution(6) == '5'\nassert solution(8) == '5'\nassert solution(10) == '10'\nassert solution(22) == '10'"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"5 8\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"5\"\nassert solution(\"1 4 2\") == \"5\"\nassert solution(\"1 3 2\") == \"3\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"1 8 6\"\nassert solution(stdin) == \"3 7\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('a b c') == 5\nassert solution('b c') == 5\nassert solution('a c') == 5\nassert solution('a 1 1') == 1\nassert solution('a 1 2 2 3 4 5 5 6 6') == 5\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\n        [1, 2, 4, 1, 2, 3, 6],\n        [1, 1, 2, 4, 6, 3, 2],\n        [4, 6, 1, 1, 2, 3, 2],\n    ]\n) == [20, 8, 4, 2, 1, 6]\n\nTest Case:\nCase #1:\nInput:\n10\n10 2 8 1 2 4 1 20 4 5\n\nOutput:\n20 8\n\nCase #2:\nInput:\n10\n1 2 3 4 1 2 4 5 6\n\nOutput:\n6\n\nCase #3:\nInput:\n10\n1 2 3 4 1 2 4 5 6 7\n\nOutput:\n6\n\nTest Case:\nCase #3:\nInput:\n20\n1 2 3 4 1 2 4 5 6 7 8\n\nOutput:\n20 8\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"20 8\"\nassert solution(stdin) == \"10 4 1 2 4 2 4\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"20 8\"\n\nInput\n5\n10 5 3 4 1 2 3 5 4 6 7 6 4 6\n\nOutput\n10 5 3 4 1 2 3 6 5 4 6 7 6 4 6 4\n\nExplanation\nThe given list contains 5 integers, $5$ in order of sorted.\n\nThese numbers are the divisors of $5$.\n\nThe function must return the list of all such numbers in the form of their permutations.\n\nThe function must return a single line of any length, in the form of a string.\n\n\n\n-----Copyright disclaimer-----\n\nYou are not allowed to use any other code except this one.\n\"\"\"\n\nn, x, y = map(int, input().split())\n\nd = []\nfor i in range(n+1):\n    for j in range(n+1):\n        d.append(i*j)\nprint(list(sorted(d)))\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\", \"Empty list\"\nassert solution(\"1\") == \"\", \"Integer 1\"\nassert solution(\"4\") == \"\", \"Integer 4\"\nassert solution(\"2\") == \"\", \"Integer 2\"\nassert solution(\"3\") == \"\", \"Integer 3\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"20 8\"\n\n'''"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"20 8\""
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(n, d) == \"20 8\"\nassert solution(n, d) == \"20 8 2 4 1 2 20 4 5\"\nassert solution(n, d) == \"20 8 2 4 1 2 20 4 5 4\"\nassert solution(n, d) == \"20 8 2 4 1 2 20 4 5 4\"\nassert solution(n, d) == \"20 8 2 4 1 2 20 4 5 4 5\"\n\n\n-----Challenge-----\nYou are given $d$ numbers for $x$ and $y$ (ordered, i.e., $\\d_1, d_2, \\d_3,..., \\d_n$).\n\nYour program should return a string of all the integers that are divisors of $x$ and $y$ in the given list of divisors.\n\nDon't use any built-in functions like $min()$, $max()$, $sum()$ or $sum_except()$.\n\nExample\n\nInput\n10\n10 2 8 1 2 4 1 20 4 5\n\nOutput\n20 8\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"20 8\"\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"20 8\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '20 8'\n\"\"\"\nimport math\nimport sys\n\n\nclass Solution:\n    def solution(self, nums, d):\n        n = len(nums)\n        ans = []\n        visited = {}\n        def dfs(x):\n            if x not in visited:\n                visited[x] = True\n                ans.append(x)\n                for y in d[x]:\n                    if y not in visited:\n                        dfs(y)\n        \n        dfs(0)\n        for i in range(n):\n            if i + 1 not in visited:\n                dfs(i + 1)\n        return \",\".join(map(str, ans))\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0,0,0,0,0,0,0,0) == 24\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5 4 3\", \"1 2 3 4\", \"5 2 2 2\"]) == \"24\"\nassert solution([\"5 5 4\", \"1 2 4 2 1\", \"3 5 1 2 4\"]) == \"56\"\nassert solution([\"5 5 4\", \"1 2 4 2 1\", \"3 5 1 2 4\"]) == \"27\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 24, \"incorrect result\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 24\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '24'"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    ['5',\n    '5',\n    '3',\n    '3',\n    '1',\n    '1',\n    '3',\n    '3',\n    '4',\n    '1',\n    '2',\n    '1']) == '24'\nassert solution(\n    ['1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '10',\n    '11',\n    '12',\n    '13',\n    '14',\n    '15',\n    '16',\n    '17',\n    '18',\n    '19',\n    '20',\n    '21',\n    '22',\n    '23',\n    '24',\n    '25',\n    '26',\n    '27',\n    '28',\n    '29',\n    '30',\n    '31',\n    '32',\n    '33',\n    '34',\n    '35',\n    '36',\n    '37',\n    '38',\n    '39',\n    '40',\n    '41',\n    '42',\n    '43',\n    '44',\n    '45',\n    '46',\n    '47',\n    '48',\n    '49',\n    '50',\n    '51',\n    '52',\n    '53',\n    '54',\n    '55',\n    '56',\n    '57',\n    '58',\n    '59',\n    '60',\n    '61',\n    '62',\n    '63',\n    '64',\n    '65',\n    '66',\n    '67',\n    '68',\n    '69',\n    '70',\n    '71',\n    '72',\n    '73',\n    '74',\n    '75',\n    '76',\n    '77',\n    '78',\n    '79',\n    '80',\n    '81',\n    '82',\n    '83',\n    '84',\n    '85',\n    '86',\n    '87',\n    '88',\n    '89',\n    '90',\n    '91',\n    '92',\n    '93',\n    '94',\n    '95',\n    '96',\n    '97',\n    '98',\n    '99',\n    '100',\n    '101',\n    '102',\n    '103',\n    '104',\n    '105',\n    '106',\n    '107',\n    '108',\n    '109',\n    '110',\n    '111',\n    '112',\n    '113',\n    '114',\n    '115',\n    '116',\n    '117',\n    '118',\n    '119',\n    '120',\n    '121',\n    '122',\n    '123',\n    '124',\n    '125',\n    '126',\n    '127',\n    '128',\n    '129',\n    '130',\n    '131',\n    '132',\n    '133',\n    '134',\n    '135',\n    '136',\n    '137',\n    '138',\n    '139',\n    '140',\n    '141',\n    '142',\n    '143',\n    '144',\n    '145',\n    '146',\n    '147',\n    '148',\n    '149',\n    '150',\n    '151',\n    '152',\n    '153',\n    '154',\n    '155',\n    '156',\n    '157',\n    '158',\n    '159',\n    '160',\n    '161',\n    '162',\n    '163',\n    '164',\n    '165',\n    '166',\n    '167',\n    '168',\n    '169',\n    '170',\n    '171',\n    '172',\n    '173',\n    '174',\n    '175',\n    '176',\n    '177',\n    '178',\n    '179',\n    '180',\n    '181',\n    '182',\n    '183',\n    '184',\n    '185',\n    '186',\n    '187',\n    '188',\n    '189',\n    '190',\n    '191',\n    '192',\n    '193',\n    '194',\n    '195',\n    '196',\n    '197',\n    '198',\n    '199',\n    '200',\n    '201',\n    '202',\n    '203',\n    '204',\n    '205',\n    '206',\n    '207',\n    '208',\n    '209',\n    '210',\n    '211',\n    '212',\n    '213',\n    '214',\n    '215',\n    '216',\n    '217',\n    '218',\n    '219',\n    '220',\n    '221',\n    '222',\n    '223',\n    '224',\n    '225',\n    '226',\n    '227',\n    '228',\n    '229',\n    '230',\n    '231',\n    '232',\n    '233',\n    '234',\n    '235',\n    '236',\n    '237',\n    '238',\n    '239',\n    '240',\n    '241',\n    '242',\n    '243',\n    '244',\n    '245',\n    '246',\n    '247',\n    '248',\n    '249',\n    '250',\n    '251',\n    '252',\n    '253',\n    '254',\n    '255',\n    '256',\n    '257',\n    '258',\n    '259',\n    '260',\n    '261',\n    '262',\n    '263',\n    '264',\n    '265',\n    '266',\n    '267',\n    '268',\n    '269',\n    '270',\n    '271',\n    '272',\n    '273',\n    '274',\n    '275',\n    '276',\n    '277',\n    '278',\n    '279',\n    '280',\n    '281',\n    '282',\n    '283',\n    '284',\n    '285',\n    '286',\n    '287',\n    '288',\n    '289',\n    '290',\n    '291',\n    '292',\n    '293',\n    '294',\n    '295',\n    '296',\n    '297',\n    '298',\n    '299',\n    '300',\n    '301',\n    '302',\n    '303',\n    '304',\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('4 4 3') == 4\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '24'\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"24\"\nassert solution(stdin) == \"52\"\nassert solution(stdin) == \"70\""
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), 'incorrect'\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"3 3 2\") == \"L\"\nassert solution(\n    \"2 3 2\") == \"R\"\nassert solution(\n    \"1 2 4 3 2\") == \"L\"\nassert solution(\n    \"3 3 2\") == \"L\"\nassert solution(\n    \"1 2 4 3\") == \"R\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"RRRLLLLRR\"\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"LLLR\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == '4'\nassert solution(7) == 'L'\nassert solution(3) == 'R'\nassert solution(4) == 'L'\nassert solution(6) == 'LRR'\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"./practice/test_case/solution.in\") == \"SLLRL\"\nassert solution(\"./practice/test_case/solution.in\") == \"LLLLRLL\"\nassert solution(\"./practice/test_case/solution.in\") == \"LRRRLLR\"\nassert solution(\"./practice/test_case/solution.in\") == \"LLLLRRR\"\nassert solution(\"./practice/test_case/solution.in\") == \"RLLRLLRR\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == 'L'\nassert solution(stdin) == 'R'\n\n\nExplanation\nThe numbers 1 through 9 are represented as the digits of $n$ in the input.\nThe third number is represented as the digits of $n$ in the input, and all the numbers before the third number are repeated.\n\nThe fourth number is represented as the digits of $n$ in the input, and all the numbers before the fourth number are repeated.\n\nThe fifth number is represented as the digits of $n$ in the input, and all the numbers before the fifth number are repeated.\n\nThe sixth number is represented as the digits of $n$ in the input, and all the numbers before the sixth number are repeated.\n\nThe seventh number is represented as the digits of $n$ in the input, and all the numbers before the seventh number are repeated.\n\nThe eighth number is represented as the digits of $n$ in the input, and all the numbers before the eighth number are repeated.\n\nThe ninth number is represented as the digits of $n$ in the input, and all the numbers before the ninth number are repeated.\n\nThe tenth number is represented as the digits of $n$ in the input, and all the numbers before the tenth number are repeated.\n\nThe eleventh number is represented as the digits of $n$ in the input, and all the numbers before the eleventh number are repeated.\n\nThe two last numbers are represented as the digits of $n$ in the input, and all the numbers before the two last number are repeated.\n\nThe third number is represented as the digits of $n$ in the input, and all the numbers before the third number are repeated.\n\nThe fourth number is represented as the digits of $n$ in the input, and all the numbers before the fourth number are repeated.\n\nThe fifth number is represented as the digits of $n$ in the input, and all the numbers before the fifth number are repeated.\n\nThe sixth number is represented as the digits of $n$ in the input, and all the numbers before the sixth number are repeated.\n\nThe seventh number is represented as the digits of $n$ in the input, and all the numbers before the seventh number are repeated.\n\nThe eighth number is represented as the digits of $n$ in the input, and all the numbers before the eighth number are repeated.\n\nThe ninth number is represented as the digits of $n$ in the input, and all the numbers before the ninth number are repeated.\n\nThe tenth number is represented as the digits of $n$ in the input, and all the numbers before the tenth number are repeated.\n\nThe eleven number is represented as the digits of $n$ in the input, and all the numbers before the eleven number are repeated.\n\nThe two numbers in the sequence are:\n\n$1$-$10$ \u2014 the numbers from $1$ through $10$ in the input, but excluding the number $10$.\n\n$2$-$10$ \u2014 the numbers from $2$ through $10$ in the input, but excluding the number $10$.\n\n$3$-$10$ \u2014 the numbers from $3$ through $10$ in the input, but excluding the number $10$.\n\n$4$-$10$ \u2014 the numbers from $4$ through $10$ in the input, but excluding the number $10$.\n\n$5$-$10$ \u2014 the numbers from $5$ through $10$ in the input, but excluding the number $10$.\n\n$6$-$10$ \u2014 the numbers from $6$ through $10$ in the input, but excluding the number $10$.\n\n$7$-$10$ \u2014 the numbers from $7$ through $10$ in the input, but excluding the number $10$.\n\n$8$-$10$ \u2014 the numbers from $8$ through $10$ in the input, but excluding the number $10$.\n\n$9$-$10$ \u2014 the numbers from $9$ through $10$ in the input, but excluding the number $10$.\n\n$10$ \u2014 the numbers from $10$ through $10$ in the input.\n\n\n\nprint(solution(stdin))"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"RRLLRR\""
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"LLR\"\nassert solution(stdin) == \"LRRRRR\"\n\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(['1', '2', '4', '3', '2']) == '4'\nassert solution(['1', '2', '3', '4', '5']) == '5'\nassert solution(['1', '2', '3', '4', '5', '6', '7', '8', '9']) == '9'\nassert solution(['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']) == '0'\nassert solution(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']) == '10'\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\") == -1\nassert solution(\"2\") == 3\nassert solution(\"1\") == 3\nassert solution(\"4\") == 2\nassert solution(\"5\") == 1\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2') == '3'\nassert solution('1') == '1'\nassert solution('4') == '3'\nassert solution('5') == '3'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == -1"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution() == '-1'\nassert solution(\"2 5 7\") == 3\nassert solution(\"3 4 7 1\") == 3\nassert solution(\"4 4 5 2\") == 2\nassert solution(\"4 4 5 1 2\") == -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\\n3\\n2\\n4\\n4\\n3\\n7\\n1\\n4\\n6\\n8\\n5\\n1\\n3\\n2\\n7\\n5\\n6\\n8\\n5\\n4\\n7\\n7\\n8\\n1\\n1\\n5\\n3\\n1\\n6\\n8\\n8\\n2\\n7\\n5\\n6\\n7\\n8\\n6\\n3\\n7\\n5\\n3\\n8\\n7\\n8\\n1\\n1\\n8\\n6\\n2\\n7\\n8\\n1\\n1\\n7\\n3\\n1\\n4\\n2\\n4\\n8\\n8\\n4\\n1\\n1\\n7\\n1\\n1\\n5\\n3\\n3\\n1\\n1\\n1\\n6\\n1\\n1\\n5\\n3\\n3\\n1\\n1\\n2\\n1\\n4\\n2\\n4\\n2\\n5\\n3\\n1\\n3\\n2\\n3\\n2\\n4\\n4\\n2\\n6\\n6\\n5\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n6\\n1\\n1\\n1\\n2\\n2\\n6\\n4\\n2\\n3\\n1\\n1\\n3\\n1\\n4\\n1\\n1\\n5\\n3\\n1\\n1\\n3\\n3\\n1\\n1\\n4\\n1\\n1\\n3\\n1\\n1\\n3\\n1\\n1\\n5\\n3\\n1\\n1\\n1\\n4\\n1\\n1\\n6\\n1\\n4\\n1\\n6\\n1\\n1\\n2\\n2\\n4\\n5\\n1\\n2\\n1\\n1\\n1\\n4\\n2\\n1\\n2\\n3\\n3\\n4\\n1\\n1\\n3\\n4\\n1\\n4\\n4\\n4\\n4\\n1\\n4\\n1\\n1\\n4\\n4\\n5\\n2\\n4\\n4\\n2\\n1\\n4\\n4\\n2\\n4\\n2\\n4\\n2\\n1\\n1\\n4\\n4\\n4\\n4\\n1\\n2\\n4\\n4\\n4\\n4\\n4\\n1\\n1\\n3\\n1\\n3\\n3\\n1\\n1\\n4\\n2\\n3\\n3\\n1\\n2\\n3\\n3\\n1\\n3\\n1\\n1\\n2\\n3\\n2\\n2\\n3\\n3\\n3\\n1\\n3\\n4\\n3\\n3\\n3\\n3\\n3\\n1\\n3\\n4\\n2\\n1\\n1\\n1\\n2\\n3\\n3\\n2\\n3\\n2\\n1\\n1\\n3\\n3\\n3\\n2\\n4\\n3\\n2\\n2\\n3\\n3\\n1\\n3\\n2\\n1\\n4\\n2\\n1\\n2\\n3\\n2\\n3\\n3\\n2\\n4\\n2\\n3\\n3\\n1\\n4\\n3\\n3\\n3\\n1\\n3\\n1\\n1\\n1\\n4\\n3\\n3\\n3\\n1\\n3\\n4\\n3\\n3\\n3\\n3\\n1\\n3\\n1\\n3\\n3\\n1\\n1\\n3\\n3\\n4\\n3\\n1\\n3\\n1\\n1\\n1\\n3\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n3\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n3\\n1\\n3\\n1\\n3\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n3\\n3\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n3\\n2\\n3\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n\nassert solution(stdin) == -1"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 3\nprint(\"solution test passed!\")\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(list(map(int, input().split()))) == 3\nassert solution(list(map(int, input().split()))) == -1\n\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 3 7 5\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n'''"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), 'true'\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"No\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 3 7 5') == 'YES'\nassert solution('3 3 7 6') == 'NO'\nassert solution('5 2 4') == 'NO'\nassert solution('1 1 3 5') == 'YES'\nassert solution('1 1 3 6') == 'NO'\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"20\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\nstdin has the format of \u201c1 2 3 4 5 6 7 8 9 11 12 13 14 15 16 17 18 19 1098 1099\u201d\n\n\n------Time complexity----------\nO(n)\n\nO(1)\n\nO(1)\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1098) == 19\n\n--------Sample input--------------\n\n10\n\nOutput\n1\n\nExplanation\n\nWhen we have n = 10, we will get one solution.\n\nBut for n = 9, we will get a solution of 2.\n\nSo, the number of different numbers that are reachable from 9 is 2, because that number can be achieved by two other numbers.\n\nSo, in total, we have two solutions, one is 2, one is 1.\n\nSo, two solutions are 1, 2.\n\nSo, we only need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo, we just need to find the number of different numbers that are reachable from 9.\n\nSo, we do not have any two solutions.\n\nSo,"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(123) == 11\n\nExplanation\nSolution\nOutput :\n  3\n\nExplanation\nSolution\nOutput :\n  2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1098) == 20\nassert solution(1099) == 19\nassert solution(11) == 19\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 20\n\nstdin.close()\n-----\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\") == 0\nassert solution(\"12\") == 2\nassert solution(\"15\") == 5\nassert solution(\"10098\") == 20\nassert solution(\"10099\") == 4\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"20\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1, \"The function failed to solve.\"\n\n\n-----Example-----\nExample 1:\n\nInput:\n3\n\nOutput:\n2\n\nExplanation:\nThe function can find two unique numbers from 3 to 10.\n2\n\nExplanation:\nThe function calls itself 3 times, so 2 is the solution.\n\nExample 2:\n\nInput:\n1\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 1 times.\n1\n\nExample 3:\n\nInput:\n4\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 4 times.\n4\n\nExample 4:\n\nInput:\n0\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 0 times.\n1\n\nExplanation:\n0\n\nExample 5:\n\nInput:\n13\n\nOutput:\n4\n\nExplanation:\nThe function calls itself 13 times.\n4\n\nExample 6:\n\nInput:\n37\n\nOutput:\n5\n\nExplanation:\nThe function calls itself 37 times.\n5\n\nExample 7:\n\nInput:\n9\n\nOutput:\n5\n\nExplanation:\nThe function calls itself 9 times.\n5\n\nExample 8:\n\nInput:\n0\n\nOutput:\n0\n\nExplanation:\nThe function calls itself 0 times.\n0\n\nExample 9:\n\nInput:\n20\n\nOutput:\n3\n\nExplanation:\nThe function calls itself 20 times.\n3\n\nExample 10:\n\nInput:\n29\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 29 times.\n1\n\nExample 11:\n\nInput:\n12\n\nOutput:\n2\n\nExplanation:\nThe function calls itself 12 times.\n2\n\nExample 12:\n\nInput:\n24\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 24 times.\n1\n\nExample 13:\n\nInput:\n48\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 48 times.\n1\n\nExample 14:\n\nInput:\n70\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 70 times.\n1\n\nExample 15:\n\nInput:\n88\n\nOutput:\n2\n\nExplanation:\nThe function calls itself 88 times.\n2\n\nExample 16:\n\nInput:\n50\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 50 times.\n1\n\nExample 17:\n\nInput:\n21\n\nOutput:\n2\n\nExplanation:\nThe function calls itself 21 times.\n2\n\nExample 18:\n\nInput:\n18\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 18 times.\n1\n\nExample 19:\n\nInput:\n7\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 7 times.\n1\n\nExample 20:\n\nInput:\n8\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 8 times.\n1\n\nExample 21:\n\nInput:\n1\n\nOutput:\n0\n\nExplanation:\nThe function calls itself 1 times.\n0\n\nExample 22:\n\nInput:\n2\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 2 times.\n1\n\nExample 23:\n\nInput:\n4\n\nOutput:\n2\n\nExplanation:\nThe function calls itself 4 times.\n2\n\nExample 24:\n\nInput:\n0\n\nOutput:\n0\n\nExplanation:\nThe function calls itself 0 times.\n0\n\nExample 25:\n\nInput:\n1\n\nOutput:\n0\n\nExplanation:\nThe function calls itself 1 times.\n0\n\nExample 26:\n\nInput:\n12\n\nOutput:\n2\n\nExplanation:\nThe function calls itself 12 times.\n2\n\nExample 27:\n\nInput:\n36\n\nOutput:\n4\n\nExplanation:\nThe function calls itself 36 times.\n4\n\nExample 28:\n\nInput:\n24\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 24 times.\n1\n\nExample 29:\n\nInput:\n13\n\nOutput:\n2\n\nExplanation:\nThe function calls itself 13 times.\n2\n\nExample 30:\n\nInput:\n37\n\nOutput:\n5\n\nExplanation:\nThe function calls itself 37 times.\n5\n\nExample 31:\n\nInput:\n13\n\nOutput:\n3\n\nExplanation:\nThe function calls itself 13 times.\n3\n\nExample 32:\n\nInput:\n5\n\nOutput:\n0\n\nExplanation:\nThe function calls itself 5 times.\n0\n\nExample 33:\n\nInput:\n17\n\nOutput:\n2\n\nExplanation:\nThe function calls itself 17 times.\n2\n\nExample 34:\n\nInput:\n26\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 26 times.\n1\n\nExample 35:\n\nInput:\n18\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 18 times.\n1\n\nExample 36:\n\nInput:\n23\n\nOutput:\n2\n\nExplanation:\nThe function calls itself 23 times.\n2\n\nExample 37:\n\nInput:\n17\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 17 times.\n1\n\nExample 38:\n\nInput:\n21\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 21 times.\n1\n\nExample 39:\n\nInput:\n48\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 48 times.\n1\n\nExample 40:\n\nInput:\n28\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 28 times.\n1\n\nExample 41:\n\nInput:\n7\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 7 times.\n1\n\nExample 42:\n\nInput:\n26\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 26 times.\n1\n\nExample 43:\n\nInput:\n23\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 23 times.\n1\n\nExample 44:\n\nInput:\n18\n\nOutput:\n0\n\nExplanation:\nThe function calls itself 18 times.\n0\n\nExample 45:\n\nInput:\n20\n\nOutput:\n1\n\nExplanation:\nThe function calls itself 20 times.\n1\n\nExample 46:\n\nInput:\n0\n\nOutput:\n0\n\nExplanation:\nThe function calls itself 0 times.\n0\n\nExample 47:\n\nInput:\n13\n\nOutput:\n0\n\nExplanation:\nThe function calls itself 13 times.\n0\n\nExample"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"f(stdin) should be equal to solution(stdin)\"\n\n\n-----Constraints-----\n0 < stdin.length < 10^4\n\n-----Time Limit-----\n1\n\n-----Space Limit-----\n1\n\n\nclass Solution:\n    def countReachableNumbers(self, n: int) -> str:\n        \"\"\"\n        Append all reachable numbers from 1 to n,\n        but if the number is reached by a trailing zero, we remove it.\n        \"\"\"\n        visited = [1]\n        cnt = 0\n        for num in range(2, n + 1):\n            # check if num is reachable by trailing zero\n            if num == 1:\n                cnt += 1\n                continue\n            if num in visited:\n                continue\n            visited.append(num)\n            for i in range(num):\n                if visited[i] == 0:\n                    # removing the trailing zero\n                    visited.pop()\n                    cnt += 1\n        return str(cnt)\n        \"\"\"\n        Append all reachable numbers from 1 to n,\n        but if the number is reached by a trailing zero, we remove it.\n        \"\"\"\n\n        pass\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == solution(\"\"\"2 1 0 0 0\"\"\")\nassert solution(stdin) == solution(\"\"\"2 1 0 0 1\"\"\")\nassert solution(stdin) == solution(\"\"\"2 1 2 4 5\"\"\")\nassert solution(stdin) == solution(\"\"\"2 1 4 5 3\"\"\")\nassert solution(stdin) == solution(\"\"\"2 3 4 5 1\"\"\")\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"7 3 2 1 4 5 6\"\nassert solution(stdin) == \"7 3 2 1 4 5 6\"\nassert solution(stdin) == \"7 3 2 1 4 5 6\"\nassert solution(stdin) == \"7 3 2 1 4 5 6\"\nassert solution(stdin) == \"7 3 2 1 4 5 6\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5 3 1 2 4\"\nassert solution(stdin) == \"5 3 2 1 4\"\nassert solution(stdin) == \"5 3 4 1 2\"\nassert solution(stdin) == \"5 3 5 1 4\"\nassert solution(stdin) == \"5 4 1 2\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1 0 0 0\") == \"2 1 4 5 3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3,5,0,2,1\"), \"3,5,0,2,1\"\nassert solution(\"1,0,0,0,3\"), \"1,0,0,0,3\"\nassert solution(\"1,3,0,0,0\"), \"1,3,0,0,0\"\nassert solution(\"3,2,0,0,0\"), \"3,2,0,0,0\"\nassert solution(\"2,0,0,1,0\"), \"2,0,0,1,0\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5 4 0 0\"\nassert solution(stdin) == \"7 0 0 2 4\"\nassert solution(stdin) == \"7 4 1 2 4\"\nassert solution(stdin) == \"7 4 3 2 4\"\nassert solution(stdin) == \"7 4 4 5 3\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 1 0 0 0\") == \"2 1 4 5 3\"\nassert solution(\"1 1 1 1\") == \"1 1 5 1\"\nassert solution(\"1 0 0 0 0\") == \"1 1 0 0\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"5 3 1 2 4\"\nassert solution(input()) == \"7 3 2 1 4\""
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"5 3 1 2 4\"\nassert solution(\"7\") == \"7 3 2 1 4\"\nassert solution(\"5\") == \"5 3 1 2 4\"\nassert solution(\"7\") == \"7 3 2 1 4\"\nassert solution(\"5\") == \"5 3 1 2 4\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 2 3') == 'YES'\nassert solution('1 1 1 2 1') == 'YES'\nassert solution('1 1 2 2') == 'NO'\nassert solution('1 1 1 2') == 'NO'\nassert solution('1 1 1 3') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 2 3\") == \"YES\"\nassert solution(\"2 1 1 2 1\") == \"NO\"\n\n\n-----Constraints-----\n\n1 <= n <= 5000\n1 <= k <= 5000\n\n2 <= a[i] <= 5000\n\nSample Input\n\n1 2 2 3\n\nSample Output\n\nNO\n\nExplanation\n\nThere are two distinct numbers $c_1, c_2, \\dots, c_n$, where $1 \\le c_i \\le k$ and $c_i$ is the color of the $i$-th element of the given array. \n\nThe coloring of these numbers means each $i$-th element of the array is distinct.\n\nHere $i$ can be:\n1. 0 < i < $k$\n2. 1 < i < $k$\n3. 2 < i < $k$\n4. 3 < i < $k$\n5. 4 < i < $k$\n6. 5 < i < $k$\n\nSo, we are able to solve the problem in the following manner:\n\n1. Pick a color $c_1$ in $1~5$;\n2. Choose a $i$-th color $c_i$;\n3. Colorize these $i$-th elements of the array by $c_i$;\n4. Repeat until $1$ is reached.\n5. Print any coloring.\n\n\"\"\"\n\nclass Solution:\n    def colorNums(self, nums: List[int]) -> str:\n        color_map = [1 for _ in range(len(nums))]\n        nums.sort()\n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] == nums[j] + 1:\n                    color_map[i] = nums[j]\n                    break\n        \n        result = \"NO\"\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 2:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 3:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 4:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 5:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 6:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 7:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 8:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 9:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 10:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 11:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 12:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 13:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 14:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 15:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 16:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 17:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 18:\n                    color_map[i] = nums[j]\n                    break\n        \n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] + nums[j] == 19:\n                    color_map[i] = nums[j]"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 2 3 2\") == \"YES\"\nassert solution(\"2 2 2 3 2 2\") == \"NO\"\nassert solution(\"3 3 3 3 3 3\") == \"YES\"\nassert solution(\"4 4 4 4 4 4\") == \"YES\"\nassert solution(\"5 5 5 5 5 5\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1 1 1 2 2 3\"\n) == \"YES\"\n\nassert solution(\n    \"3 2\"\n) == \"YES\"\n\nassert solution(\n    \"2 3\"\n) == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2 2 3\\n'), \"NO\"\nassert solution('5 2\\n3 2 1 2 3\\n'), \"NO\"\nassert solution('5 2\\n1 2 1 2 1\\n'), \"NO\"\nassert solution('5 2\\n2 1 1 2 1\\n'), \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"YES\"\n\"\"\""
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 1 2 2\") == \"YES\"\nassert solution(\"3 1 1 1 1\") == \"NO\""
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\n'''"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1,2) == 1\nassert solution(2,2) == 2\nassert solution(3,3) == 3\nassert solution(10,10) == 5\nassert solution(11,100) == 24\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n\nassert solution(stdin)!= 1\n\"\"\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'YES'\nassert solution('2') == 'NO'\nassert solution('5') == 'NO'\nassert solution('1') == 'YES'\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5') == 'YES'\nassert solution('5') == 'NO'\nassert solution('10') == 'NO'\nassert solution('5') == 'YES'\nassert solution('5') == 'NO'\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"YES\"\nassert solution(4) == \"YES\"\nassert solution(10) == \"NO\"\nassert solution(5) == \"NO\"\nassert solution(2) == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5' ) == 'YES'\nassert solution('3' ) == 'YES'\nassert solution('1 2 1' ) == 'YES'\nassert solution('1 1 2' ) == 'YES'\nassert solution('1 1 2 3 2' ) == 'NO'\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\nInput\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 1 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n\nOutput\nYES\nYES\nNO\nNO\nNO\n\n'''"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1557'\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == 1\nassert solution(1) == 3\nassert solution(2) == 1\nassert solution(3) == 5\nassert solution(4) == 3\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '99999'\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = len(stdin)\n        if n == 1:\n            return '0'\n        res = ''\n        for i in range(1, n+1):\n            res += str(i)\n            res += '0'\n        return res[::-1]\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(a) == '33'\nassert solution(a) == '33'\nassert solution(a) == '33'\nassert solution(a) == '33'\nassert solution(a) == '33'\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1557\""
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 99999\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"99999\"\n'''"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"33\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1557\""
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"99999\""
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"1 1 3\"\nassert solution(\"1 4 5\") == \"3 1 5\"\nassert solution(\"1 10 15\") == \"7 1 15\"\nassert solution(\"1 18 21\") == \"7 1 21\"\nassert solution(\"100 100 101\") == \"102 100 101\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1 1 3'\nassert solution(stdin) == '102'\nassert solution(stdin) == '114 228 456'\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 1\nassert solution(5) == 1\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 4\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"123\"\nassert solution(inp) == \"321\"\nassert solution(inp) == \"456\"\nassert solution(inp) == \"561\"\nassert solution(inp) == \"561\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"incorrect result\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 1 3\"\nassert solution(stdin) == \"100 100 101\"\nassert solution(stdin) == \"1 22 29\"\nassert solution(stdin) == \"3 19 38\"\nassert solution(stdin) == \"6 30 46\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"111\"\nassert solution(stdin) == \"100\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 1 3\"\nassert solution(stdin) == \"102\"\nassert solution(stdin) == \"114 228 456\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"8\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == (\"1 1 3\", \"102\", \"114 228 456\")\nassert solution(inp) == (\"1\", \"1 1 3\", \"102\")\nassert solution(inp) == (\"1\", \"1 1 3\", \"2\")\nassert solution(inp) == (\"1 2 3\", \"6\", \"9\")\nassert solution(inp) == (\"1\", \"1 2 3\", \"3\")\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"7\""
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n\nInput\n2\n1 100000\n\nOutput\n2\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('a') == '2'\nassert solution('a') == '0'\nassert solution('a') == '1'\n\nassert solution('a1') == '2'\nassert solution('a1') == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 3\\n1\\n100000\") == \"2\"\nassert solution(\"2\\n1\\n1\\n1\") == \"0\"\nassert solution(\"2\\n1\\n100000\") == \"0\""
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"2 2\"\nassert solution(\"3 3\") == \"2 2\"\nassert solution(\"3 5\") == \"2 2\"\nassert solution(\"4 7 2\") == \"2 2\"\nassert solution(\"10 3\") == \"2 2\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(\"10 3\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"10 10 10 10\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"2 7 2 3 3 1\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"2 1\") == \"1 2 1\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3 1\") == \"1 2 3\"\nassert solution(\"1 5 1\") == \"1 5 2\"\nassert solution(\"1 2 1\") == \"1 2 1\"\nassert solution(\"2 10 3\") == \"1 2 1\"\nassert solution(\"1 10 2\") == \"1 10 1\""
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['4','7','1','1','1','1','3','4']) == '2'\nassert solution(['4','7','1','1','1','1','3','4']) == '2'\nassert solution(['10','10','10','10','10','10','10','10']) == '1'\nassert solution(['10','10','10','10','10','10','10','10']) == '1'\nassert solution(['10','10','10','10','10','10','10','10']) == '0'\n\n'''\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0'"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 1\nassert solution(input()) == 2\nassert solution(input()) == -1\nassert solution(input()) == 1\nassert solution(input()) == 2\n\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, 2) == -1\nassert solution(3, 2) == -1\nassert solution(3, 3) == -1\nassert solution(3, 5) == 1\nassert solution(1, 2) == 0\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 1 1\") == 3\n\n-----Constraints-----\n\n1 <= n <= 100, 1 <= m <= n\n1 <= s_i <= d_i <= n\n1 <= s_i < d_i <= n\n1 <= c_i <= n\n\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('4 1') == 1\nassert solution('3 1 1 1') == 1\nassert solution('10 3') == 1\nassert solution('10 5 1') == 1\nassert solution('2 5 1 1') == -1\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 2 3') == '0'\nassert solution('3 2 1') == '1'\nassert solution('3 5 3') == '0'\nassert solution('3 10 1') == '1'\nassert solution('3 5 3') == '2'\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= m <= 10^5\n\nTime Limit: 1 sec\n\nDoes not return answer\nDoes not print any numbers\n\nGood Luck!\n'''\n\nfrom sys import stdin\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\n\n-----Constraints-----\n\n1 <= n <= 10^6\n1 <= m <= 10^7\n\nTime Limit: 1 second\n\nExample:\n\nInput\n120 51840\n\nOutput\n7\n\nExplanation\n\nThat is, if $n = 120$, then $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840$\n\"\"\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(-1)\nassert solution(stdin) == str(0)\n\nExample 1:\n\nInput:\nstdin = \"120 51840\"\nOutput: \"7\"\nExample 2:\n\nInput:\nstdin = \"42 42\"\nOutput: \"0\"\n\"\"\"\n\n\nclass Solution:\n    def solve(self, n, m):\n        pass\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"-\"\n\n\nprint('Example 1:')\nprint('Input : ')\nprint('n : 120')\nprint('m : 51840')\nprint('Output :')\nprint('7')\nprint('Explanation :')\nprint('7 steps to transform $120$ to $372$ is:')\nprint('7 steps: ')\nprint('$120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840 $')\nprint('Here are the moves needed.')\nprint('$7 \\rightarrow 0 \\rightarrow 0 \\rightarrow 0 $')\n\nprint('Example 2:')\nprint('Input : ')\nprint('n : 42')\nprint('m : 42')\nprint('Output :')\nprint('-1')\nprint('Explanation :')\nprint('-1 steps to transform $42$ to $42$ is:')\nprint('-1 steps: ')\nprint('$42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 $')\nprint('Here are the moves needed.')\nprint('$0 \\rightarrow -1 \\rightarrow 0 $')\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0\nassert solution(\"42 42\") == -1\nassert solution(\"48 72\") == -1\nassert solution(\"42 42\") == 0\nassert solution(\"48 72\") == 0\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"7\"\n\n\n-----Constraints-----\n\n1 <= n <= 5 * 10^4\n2 <= n <= 5 * 10^4\n1 <= m <= 5 * 10^4\n\n------Time complexity-----\nThe time complexity of the function is O(mn).\nThe time complexity of the function is O(mn) because of the additional nested loops.\n\"\"\""
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"120 51840\") == 7\nassert solution(\"42 42\") == 0\nassert solution(\"48 72\") == -1\nassert solution(\"48 72\") == -1\nassert solution(\"48 72\") == -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"ababababa\"\nassert solution(stdin) == \"ababababa\"\nassert solution(stdin) == \"abababababa\"\nassert solution(stdin) == \"abababababa\"\nassert solution(stdin) == \"abababababa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'aabb'\nassert solution(stdin) == 'ababb'\nassert solution(stdin) == 'aababababa'\nassert solution(stdin) == 'abababababa'\nassert solution(stdin) == 'ababababababa'\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin = \"\"\"\n    10\n    ababababa\n    a\n    a\n    b\n    a\n    b\n    a\n    a\n    b\n    a\n    a\n    a\n    b\n    a\n    \"\"\",\n    stdin = \"\",\n    stdout = \"\",\n) == \"ababababa\"\n    pass\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"ababababa\"\nassert solution(stdin) == \"ababababa\"\nassert solution(stdin) == \"abababababa\"\nassert solution(stdin) == \"abababababa\"\nassert solution(stdin) == \"abababababa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"ababababa\""
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"aabb\") == \"aabb\"\nassert solution(\"aabbcaab\") == \"aabbcaab\"\nassert solution(\"abbcdaab\") == \"abbcdaab\"\nassert solution(\"abbc\") == \"abbc\"\nassert solution(\"aa\") == \"aa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('abcdefghijklmnopqrstuvwxyz') == 'ababababa'\nassert solution('abc') == 'aabb'\nassert solution('jibber') == 'aabb'\nassert solution('aabb') == 'baabaa'\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"ababababa\", \"wrong output\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('abcdefg') == 'abcdefg'\nassert solution('ababababa') == 'ababababa'\nassert solution('c') == 'c'\nassert solution('a') == 'a'\nassert solution('d') == 'd'\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"ababababa\"\nassert solution(stdin) == \"abc\"\nassert solution(stdin) == \"cdc\"\nassert solution(stdin) == \"abc\"\nassert solution(stdin) == \"cdc\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"1\""
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 5 1 2 2') == '3 4'\nassert solution('4 1 5') == '0'\nassert solution('8 3 5 2') == '2'\nassert solution('4') == '0'\nassert solution('3') == '0'"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"5 1 2 2 2\"\n) == \"3\"\nassert solution(\n    \"5 1 2 2 4 3\"\n) == \"4\"\nassert solution(\n    \"5 1 2 2 4 4\"\n) == \"0\"\nassert solution(\n    \"5 1 2 2 4 5\"\n) == \"0\"\nassert solution(\n    \"5 1 2 2 4 6\"\n) == \"2\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == solution2(inp)\n\n\n----------------"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"2\", \"5\", \"2\", \"2\"]) == \"0\"\nassert solution([\"2\", \"2\", \"2\", \"2\"]) == \"0\"\nassert solution([\"2\", \"2\", \"2\", \"2\"]) == \"0\"\nassert solution([\"2\", \"3\", \"4\", \"5\"]) == \"4\"\nassert solution([\"2\", \"2\", \"3\", \"4\", \"4\"]) == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n\n\nimport math\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin: str) == '0' or solution(\n    stdin: str) == '1'\n    \"\"\"\n    pass\n\nclass Solution:\n    def niceIndices(self, a: List[int]) -> List[int]:\n        result = []\n        for index, j in enumerate(a):\n            if index!= a.index(j):\n                result.append(j)\n        return result\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 233\n\nassert solution(stdin) == -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 233\n\n1.\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abcabcabcabc\") == -1\nassert solution(\"abcbabca\") == 0\nassert solution(\"aaabb\") == 0\nassert solution(\"aababababab\") == -1\n\n--------"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('asdf') == '1'\nassert solution('aaaa') == -1\n\nassert solution('asdasdfasd') == -1\nassert solution('asdfasd') == 22\nassert solution('aaaaa') == -1"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 233"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 233\n\n-----Constraints-----\n\n1 <= n <= 10^6\n1 <= k <= 10^6\n\n-----Time complexity-----\n\nO(n + k)\n\nO(n)\n\nExample 1:\n\nInput\n\n4 5\nasdf\n\nOutput\n\n4\n\nExample 2:\n\nInput\n\n5 6\naaaaa\n\nOutput\n\n-1\n\nExample 3:\n\nInput\n\n1 4\na\n\nOutput\n\n-1\n\nExample 4:\n\nInput\n\n1 1\na\n\nOutput\n\n0\n\nExplanation\n\nThere is no other subsequence that can be obtained by deleting the first element.\n\nExample 5:\n\nInput\n\n1 1\na\n\nOutput\n\n1\n\nExplanation\n\nThe only other valid subsequences is \"a\" which can be obtained by deleting the last element.\n\nExample 6:\n\nInput\n\n1 1\na\n\nOutput\n\n1\n\nExplanation\n\nThe only subsequences are \"a\" which can be obtained by deleting the last element.\n\nExample 7:\n\nInput\n\n1 1\nasdf\n\nOutput\n\n-1\n\n\n\n-----Constraints-----\n\n0 <= n <= 10^6\n\n0 <= k <= 10^6\n\n1 <= stdin.length <= 1000\n\n1 <= k <= 10^6\n\n1 <= t <= 10^6\n\nThe input is guaranteed to be valid and will never exceed 10^9.\n\n---Code---\nimport math"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"asd\") == \"asd\"\nassert solution(\"asdf\") == -1\nassert solution(\"ajihiushda\") == 233\nassert solution(\"aaa\") == -1\nassert solution(\"aaaaa\") == 233\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 233"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 233\n\n-----Time complexity-----\n\nO(n + m) time |O(n * m) space\n\nSo the innermost loop takes $n$ steps, $m$ operations, to process $n$ items and $m$ operations, and the outer loop takes $m$ steps, just as the inner loop takes $n$ steps, but with different operations.\n\nThis means that we need a better algorithm to optimize both the inner loop and outer loop.\n\nThe outer loop takes O(n) time, so we need O(n) space to store the total cost of the first sequence of $n$ characters.\n\nThe inner loop takes O(m) time, so we need O(m) space to store the total cost of the remaining characters in the set.\n\nThis means that we need O(n) space to store the total cost of the last characters of the remaining set.\n\nNote: This is O(n), because we need to store the total cost of the remaining elements in the set.\n\nSpace complexity O(1)\n\nNote: The cost of a character will not be smaller than 1, therefore we need an extra space in the result.\n\nThe solution can also be very long, as we need to find a solution that is $k$ smaller than the cost of the characters in the sequence.\n\nTime complexity O(k * m)\n\nSo we need O(k * m) space to store the total cost of the best sequence of $k$ characters.\n\nWe need O(k) space to store the total cost of the best characters.\n\nSpace complexity O(m)\n\nSo we need O(m) space to store the total cost of the best characters.\n\nThis is O(n) space complexity, where $n$ is the length of the string, and $m$ is the size of the set.\n\nNote: This is O(m) space because $m$ is the size of the set.\n\nTime complexity O(n)\n\nSo we need O(n) space to store the total cost of the best sequence of characters.\n\nWe need O(m) space to store the total cost of the best characters.\n\nThis is O(n) space complexity, since we need to store the total cost of the best characters.\n\nSpace complexity O(n)\n\nSo we need O(n) space to store the total cost of the best characters.\n\nHere is a case of 1 character that costs $1.\n\nWe have to store the total cost of the remaining characters in the set.\n\nWe have to store the total cost of the remaining characters in the set.\n\nThis is O(n) space complexity.\n\nTime complexity O(m)\n\nSo we need O(m) space to store the total cost of the best sequence of characters.\n\nWe need O(m) space to store the total cost of the best characters.\n\nThis is O(n) space complexity.\n\nThis is still O(n) space complexity, because $n$ is the length of the string, and $m$ is the size of the set.\n\nSpace complexity O(n)\n\nSo we need O(n) space to store the total cost of the best characters.\n\nThis is O(n) space complexity, since we need to store the total cost of the best characters.\n\nWe need O(n) space to store the total cost of the best characters.\n\nThis is O(n) space complexity.\n\nWe need O(m) space to store the total cost of the best characters.\n\nThis is O(n) space complexity.\n\nHere is a case of k characters that costs $k.\n\nWe have to store the total cost of the remaining characters in the set.\n\nWe have to store the total cost of the remaining characters in the set.\n\nThis is O(k) space complexity, because $k$ is the size of the set.\n\nTime complexity O(k * m)\n\nSo we need O(k * m) space to store the total cost of the best sequence of characters.\n\nWe need O(k) space to store the total cost of the best characters.\n\nThis is O(k) space complexity.\n\nHere is a case of k characters that costs $k.\n\nWe have to store the total cost of the remaining characters in the set.\n\nWe have to store the total cost of the remaining characters in the set.\n\nThis is O(k) space complexity.\n\nThis is still O(k) space complexity, because $k$ is the size of the set.\n\nHere is a case of k characters that costs $k.\n\nWe have to store the total cost of the best characters.\n\nThis is O(k) space complexity.\n\nHere is a case of k characters that costs $k.\n\nWe have to store the total cost of the best characters.\n\nThis is O(k) space complexity.\n\nHere is a case of k characters that costs $k.\n\nWe have to store the total cost of the best characters.\n\nThis is O(k) space complexity.\n\nHere is a case of k characters that costs $k.\n\nWe have to store the total cost of the best characters.\n\nThis is O(k) space complexity.\n\nHere is a case of k characters that costs $k.\n\nWe have to store the total cost of the best characters.\n\nThis is O(k) space complexity.\n\nHere is a case of k characters that costs $k.\n\nWe have to store the total cost of the best characters.\n\nThis is O(k) space complexity.\n\nHere is a case of k characters that costs $k.\n\nWe have to store the total cost of the best characters.\n\nThis is O(k) space complexity.\n\nHere is a case of k characters that costs $k.\n\nWe have to store the total cost of the best characters.\n\nThis is O(k) space complexity.\n\nHere is a case of k characters that costs $k.\n\nWe have to store the total cost of the best characters.\n\nThis is O(k) space complexity.\n\nHere is a case of k characters that costs $k.\n\nWe have to store the total cost of the best characters.\n\nThis is O(k) space complexity.\n\nHere is a case of k characters that costs $k.\n\nWe have to store the total cost of the best characters.\n\nThis is O(k) space complexity.\n\nHere is a case of k characters that costs $k.\n\nWe have to store the total cost of the best characters.\n\nThis is O(k) space complexity.\n\nHere is a case of k characters that costs"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"asdfasdf\") == -1\nassert solution(\"asd\") == -1\nassert solution(\"aaaa\") == -1\nassert solution(\"asdasd\") == -1\nassert solution(\"asdasdasdasdasd\") == -1\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n2 <= n \\le m, \\sum(v_i \\ne u_i) = n - 1\n\nThe given graph is a tree. It is guaranteed that there are no self-loops or multiple edges in the given graph.\n\n\n-----Time Limit-----\n1 minute\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= n, m <= 10^5\n1 <= v, u <= n\n1 <= v, u < n\n1 <= D <= 10^5\n\n-----Time Complexity-----\nO(V + E) for V directed undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected undirected und"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"\"4 4\n1 2\n1 3\n1 4\n2 3\n3 4\n\n2 1\n2 3\n3 4\n\n2 3\n2 4\n3 4\n\n3 4\n2 3\n3 4\n\"\"\") == \"YES\"\nassert solution(\"\"\"4 4\n1 2\n1 3\n1 4\n2 3\n3 4\n\n2 1\n2 3\n3 4\n\n3 4\n2 3\n3 4\n\"\"\") == \"NO\"\nassert solution(\"\"\"4 4\n1 2\n1 3\n1 4\n2 3\n3 4\n\n2 1\n2 3\n3 4\n\n3 4\n2 3\n3 4\n\"\"\") == \"YES\"\nassert solution(\"\"\"4 4\n1 2\n1 3\n1 4\n2 3\n3 4\n\n2 1\n2 3\n3 4\n\n3 4\n2 3\n3 4\n\"\"\") == \"YES\"\nassert solution(\"\"\"4 4\n1 2\n1 3\n1 4\n2 3\n3 4\n\n2 1\n2 3\n3 4\n\n3 4\n2 3\n3 4\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 4 1\") == \"NO\"\nassert solution(\"4 5 3\") == \"YES\"\nassert solution(\"5 3 1\") == \"YES\"\nassert solution(\"3 4 2\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\nstdin: str\n) == \"YES\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^4\n1 <= stdin[i] <= 10^5\nstdin[i] is valid:\nstdin[i] is valid:\nstdin[i] is not a loop or edge of a graph, or\nstdin[i] is a single edge.\n\n\n-----Time complexity-----\nWe have to consider the number of edges to the number of vertices, and the number of edges to the number of vertices.\nThis number can be computed using the length of the original graph.\nWe can only consider vertices, and edges, as well as the length of the graph, as the number of edges can also be computed by a linear search.\nThis number is linear in $n$.\n\nSpace complexity\nO(n)\n\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1 2\") == \"NO\"\nassert solution(\"1 1 3\") == \"NO\"\nassert solution(\"1 1 4\") == \"NO\"\nassert solution(\"1 1 5\") == \"YES\"\nassert solution(\"1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\") == \"YES\"\nassert solution(\"4 5 3\") == \"YES\"\nassert solution(\"4 4 3\") == \"NO\"\nassert solution(\"4 4 3\") == \"NO\"\nassert solution(\"4 4 4\") == \"NO\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\nassert solution(\"01:02\") == \"02:02\""
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '02:02'\nassert solution(stdin) == '02:03'\nassert solution(stdin) == '02:04'\nassert solution(stdin) == '02:05'\nassert solution(stdin) == '02:06'\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"01:02\"\n\nassert solution(stdin) == \"01:03\"\n\nassert solution(stdin) == \"01:03:01\"\n\nassert solution(stdin) == \"01:01:01\"\n\nassert solution(stdin) == \"00:00:00\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\nassert solution(\"01:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"10:00\") == \"11:00\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"02:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"01:02\") == \"02:02\"\n\n\n-----Constraints-----\n0 <= h_1, m_1 <= 23\n0 <= h_2, m_2 <= 59\nh_1 < h_2 <= 23\nm_1 < m_2 <= 59\n\n-----Time Limit-----\n1 minute\n\nMemory Limit: 16 megabytes\n\nTime Limit: 0.5 minutes\n\"\"\"\nfrom datetime import datetime\nh, m = map(int, input().split())"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"02:02\"\nassert solution(\"01:04\") == \"04:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('01:02') == '02:02', 'Your solution is incorrect'\nassert solution('00:00') == '00:00', 'Your solution is incorrect'\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:00\"\nassert solution(\"01:02\") == \"01:02\"\nassert solution(\"03:02\") == \"03:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:00') == '11:00'\nassert solution('01:02') == '01:02'\n\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2) == 1\nassert solution(4) == 2\nassert solution(27) == 5\nassert solution(42) == 6"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == 1\nassert solution(9) == 2\nassert solution(29) == 6\nassert solution(100) == 5"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 1\nassert solution(4) == 4\nassert solution(5) == 5\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == 1\nassert solution(27) == 1\nassert solution(42) == 1\nassert solution(60) == 2\nassert solution(63) == 2\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\")()(\") == \"()()\"\nassert solution(\"(((()))\") == \"()(()\"\nassert solution(\"(()(())(()))\") == \"()(()(())\"\nassert solution(\"())\") == \"()\"\nassert solution(\"()()(())\") == \"()()\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\nassert solution(\"-2147483648\") == \"1\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"27\") == 1\nassert solution(\"42\") == 2\nassert solution(\"27\") == 2\nassert solution(\"42\") == 2\nassert solution(\"17\") == 4\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"1\"\n\n\nInput\n1\n\nOutput\n1\n\nInput\n20\n\nOutput\n3\n\nInput\n29\n\nOutput\n2\n\"\"\""
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 4\nassert solution(stdin) == 5\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3;4\") == \"0\"\nassert solution(\"2;3\") == \"2\"\nassert solution(\"2;1\") == \"2\"\nassert solution(\"3;4\") == \"7\"\nassert solution(\"3;1\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n'''3\n5\n2 1\n1 0\n3 3\n\n1 1\n2 2\n1 0\n3 10\n\n1 10\n'''\n) == '0'\nassert solution(\n'''1\n2\n0\n1 2\n3 4\n\n1 2\n2 3\n'''\n) == '1'\nassert solution(\n'''1\n3\n2\n0\n1 2\n3 4\n\n1 3\n2 4\n\n3 4\n2 3\n'''\n) == '0'\nassert solution(\n'''1\n0\n1\n2\n3\n\n1 0\n2 1\n3 4\n\n1 3\n2 4\n3 2\n\n3 4\n2 3\n'''\n) == '3'\nassert solution(\n'''2\n2\n1\n0\n1 2\n3 4\n\n1 3\n2 4\n\n3 2\n2 3\n\n4 4\n3 2\n\n5 4\n3 1\n\n6 4\n1 2\n3 4'''\n) == '0'\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 1 10\") == \"10\"\nassert solution(\"2 1 3\") == \"0\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 6\") == \"2\"\nassert solution(\"1 2 7\") == \"3\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 5) == 2\nassert solution(3, 10) == 7\nassert solution(3, 2) == 2\nassert solution(2, 3) == 1\nassert solution(2, 4) == 1\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('4 5', 3) == 2\nassert solution('4 5', 0) == 0\nassert solution('4 5', 1) == 1\nassert solution('4 5', 2) == 2\nassert solution('4 5', 3) == 2\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\nPass\n\n-----Constraints-----\n0 \u2264 n \u2264 10^5\n0 \u2264 a_i < 10^9\n\nTime Limit: 1 sec\n\nSample cases:\n\nInput\n3\n2 1 1 2 5\n\nOutput\nYES\n\nInput\n3\n3 2 2 3 5\n\nOutput\nNO\n\"\"\"\n\nclass Solution:\n    def wallOfVova(self, wall: List[int]) -> str:\n        # \n        # Time\n        # O(n*2^n)\n        # Space\n        # O(1)\n        #\n        def dfs(i, count):\n            \n            # base case\n            if i == len(wall):\n                return \"YES\"\n            \n            # iterate\n            for j in range(count):\n                if i+1 < len(wall) and wall[i+1] > wall[i]:\n                    # we can put a brick on the part of wall i to complete the wall\n                    wall[i] += wall[i+1]\n                    wall[i+1] = wall[i]\n                    # we only need to keep the bricks on the same height of the part of wall i\n                    # so we can use the rest of the bricks\n                    wall[i] -= wall[i+1]\n                    wall[i+1] = wall[i]\n                    # the time to finish the wall\n                    wall[i] += wall[i+1]\n                    wall[i+1] = wall[i]\n                    # return\n                    return \"NO\"\n                \n                # recursion\n                wall[i] = wall[i] - wall[i] - wall[i+1]\n                wall[i] += wall[i+1]\n                wall[i+1] = wall[i]\n                wall[i] -= wall[i+1]\n                wall[i+1] = wall[i]\n                # do not need to do anything\n                wall[i] += wall[i+1]\n                wall[i+1] = wall[i]\n                # return\n                return \"NO\"\n        \n        \n        return \"YES\" if sum(wall) == 0 else \"NO\"\n        \n        \n    \n        "
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"NO\"\n\n\n-----------------------\n\nInput:\n3\n\nOutput:\n\nExplanation:\nThe wall is completed, therefore the correct answer is YES.\n\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is complete, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\nThe wall is completed, therefore the correct answer is YES.\n_______________________________________________________________________________________________________________________________\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2, 5) == \"NO\"\nassert solution(3, 5) == \"YES\"\nassert solution(4, 5) == \"YES\"\nassert solution(5, 5) == \"YES\"\nassert solution(4, 5) == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 233\n\nInput\n5 6\naabbcccdeeed\n\nOutput\n-1\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1, 'There are no subsequences'\nassert solution(stdin) == -1 or solution(stdin) == 233, 'There are no subsequences'\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 233\n'''\n\nfrom collections import deque"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 233\n\n-----Constraints-----\n\n1 <= n <= 1000\n1 <= k <= 100\n\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"asdfasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasd',\n    'f': 'asdfasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdas"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == -1"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"233\"\n\nprint(\"Example 1:\")\n\nprint(\"Example 2:\")\n\nprint(\"Input:\")\n\nprint(stdin)\n\nprint(\"Output:\")\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaa\") == -1\nassert solution(\"asdf\") == 233\nassert solution(\"asd\") == 233\nassert solution(\"aasdf\") == -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"asdasdf\") == \"1\"\nassert solution(\"asdfsdfasdf\") == \"1\"\nassert solution(\"dasdasdfasd\") == \"1\"\nassert solution(\"dasdfasdfasdasdfasdfasdf\") == \"2\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '39'\nassert solution(stdin) == '39'\nassert solution(stdin) == '39'\nassert solution(stdin) == '39'\nassert solution(stdin) == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 1 1') == '4'\nassert solution('1 100 1') == '7'\nassert solution('30 20 10') == '39'\nassert solution('3 2 2') == '3'\nassert solution('30 20 10') == '3'\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 1') == '3'\nassert solution('2 1 1') == '7'\nassert solution('3 2 2') == '39'\nassert solution('1 100 1') == '4'\nassert solution('30 20 10') == '7'\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"30 20 10\") == \"39\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"3\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"30 20 10\") == \"39\""
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1 1 1\",\"1 1 0\",\"0 0 0\",\"0 0 0\",\"0 0 1\",\"0 0 0\"]) == \"3\"\nassert solution([\"0 0 1\",\"0 0 1\",\"0 0 1\",\"0 0 1\",\"0 0 1\",\"0 0 0\"]) == \"4\"\nassert solution([\"0 0 0\",\"0 0 0\",\"0 0 0\",\"0 0 0\",\"0 0 0\",\"0 0 1\"]) == \"3\""
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin=\"2 1 1\\n1 100 1\\n10 100 10\\n0 0 0\\n0 1 0\\n0 0 1\\n0 0 0\\n0 0 1\\n0 0 0\\n1 0 0\\n1 0 1\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['2', '1', '1']) == '4'\nassert solution(['2', '1', '2']) == '7'\nassert solution(['1', '1', '1']) == '4'\nassert solution(['30', '20', '10']) == '39'\nassert solution(['30', '20', '10']) == '3'\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 1 1') == '3'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '4'\nassert solution('30 20 10') == '39'\n\"\"\""
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"5 6\") == \"YES\"\nassert solution(\"5 7\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3\\n1 2\\n1 1\\n2 3'), 'YES'\nassert solution('3\\n1 4\\n1 5\\n5 6\\n6 7'), 'YES'\nassert solution('3\\n2 4\\n5 2\\n5 6\\n5 7'), 'YES'\nassert solution('2 4\\n2 5\\n4 1\\n3 9\\n7 8\\n5 5\\n6 8\\n5 6\\n8 5\\n4 3'), 'YES'\nassert solution('3\\n3 4\\n6 7'), 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3 4 1 5 2 6 7\") == \"YES\"\nassert solution(\"1 4 2 7\") == \"NO\"\n\n\n-----Constraints-----\n1 <= t <= 100\n1 <= n <= 100\n1 <= m <= 100\n\n\"\"\"\nfrom collections import defaultdict\nimport sys\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\", \"1\", \"5\", \"4\", \"4\"]) == \"YES\"\nassert solution([\"1\", \"1\", \"1\", \"1\"]) == \"NO\"\nassert solution([\"4\", \"1\", \"1\", \"1\", \"1\"]) == \"NO\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"NO\"\nassert solution([\"5\", \"1\", \"5\", \"4\", \"4\"]) == \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10 11 12 13 14 15\") == \"YES\"\nassert solution(\"15 16 17 18 19 20\") == \"NO\"\nassert solution(\"15 16 17 18 19 20\") == \"NO\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 1\") == \"0\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"6 1\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 1\n\n\n\n-----Bonus-----\nThe function solution(stdin) can be extended by adding 3 lines:"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 6\") == 0\nassert solution(\"1\") == 1\nassert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"7\") == \"1\"\nassert solution(\"7\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3 4 3 4\") == \"1\"\nassert solution(\"1 1 2\") == \"2\"\nassert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"1 1 1 1 1\") == \"2\"\nassert solution(\"1 1 2 1\") == \"2\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3 4\") == \"1\"\nassert solution(\"1 2 4\") == \"1\"\nassert solution(\"1 5 6\") == \"1\"\nassert solution(\"2 6 8\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3) == 0\nassert solution(5) == 1\nassert solution(6) == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\nassert solution(stdin) == 11\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution( \"())()\" ) == 5\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 4\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"()\", \"(())\"]) == \"0\"\nassert solution([\"(()\", \"(())\"]) == \"0\"\nassert solution([\"()\", \"((()\", \"()()\"]) == \"1\"\nassert solution([\"(((((((((((()\"))\" == \"1\"\nassert solution([\"()\", \"((()\", \"()()\"]) == \"1\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"1\"\nassert solution(input) == \"5\"\nassert solution(input) == \"3\"\nassert solution(input) == \"2\"\nassert solution(input) == \"0\""
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"5\"\nassert solution(input) == \"5\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\")()\") == 2\nassert solution(\"((()\")) == 2\nassert solution(\"(()(\") == 2\nassert solution(\"((()))(()\") == 3\nassert solution(\"()()((()\") == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"()\") == 0\nassert solution(\"(())\") == 2\nassert solution(\"((((()))())\") == 5\nassert solution(\"((((()))))\") == 8\nassert solution(\"(()((()()))\") == 10\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(10) == -1\nassert solution(123) == 4\nassert solution(701) == 1\nassert solution(24) == 3\nassert solution(33) == -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"-1\"\nassert solution(\"107\\n715\\n851\\n1051\\n1451\\n151\\n1411\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151\\n1151"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n\n>>> \n\nfrom itertools import combinations"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\n\n\n\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['00000','000','001','100','010','011','10010','1011']) == 8\nassert solution(['00000','000','001','100','010','011','10010','1011']) == 2\nassert solution(['000','001','100','010','011','10010','1011']) == -1\nassert solution(['000','001','100','010','011','10010','1011']) == -1\nassert solution(['000','001','100','010','011','10010','1011']) == -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == -1"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == -1\nassert solution(\"1241367\") == 1\nassert solution(\"123456789\") == -1\nassert solution(\"12345678901\") == -1\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 1 1 1 1 2 1 2\"\nassert solution(stdin) == \"1 1 1 1 1 2 3\"\nassert solution(stdin) == \"2 1 1 1 1\"\nassert solution(stdin) == \"2 1 1 1 2\"\nassert solution(stdin) == \"2 1 1 1 1\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution == 3\n\"\"\"\nfrom typing import List\n\nn = int(input())\ns = input()"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"aabbccedc\") == \"cacdbdce\"\nassert solution(\"aaaaaa\") == \"aabbca\"\nassert solution(\"aaaaab\") == \"aabbcda\"\nassert solution(\"aaaaab\") == \"aabbcda\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 3\nassert solution(\"abcdedc\") == 1\nassert solution(\"abcde\") == 1\nassert solution(\"abc\") == 2\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1abac\") == \"2\"\nassert solution(\"aaabbcc\") == \"2\"\nassert solution(\"aababbbcd\") == \"3\"\nassert solution(\"abcdef\") == \"2\"\nassert solution(\"aabcc\") == \"2\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(test.input()) == \"1 1 1 1 1 2 3\"\nassert solution(test.input()) == \"2 1 1 1 2 1 1 2\"\nassert solution(test.input()) == \"2 1 1 1 2 1 2 1\"\nassert solution(test.input()) == \"3 1 2 1 1 1 1 1\"\nassert solution(test.input()) == \"3 1 2 1 1 1 1 1\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\nprint(solution(stdin))"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"a\", \"b\", \"ab\", \"ba\", \"abacaba\"]) == \"YES\"\nassert solution([\"a\", \"b\", \"ab\", \"ba\"]) == \"NO\"\n\n\"\"\"\nclass Solution:\n    def reorderString(self, s: str) -> str:\n        # if len(s) == 0:\n        #     return \"\"\n        #\n        # for i in range(0, len(s) - 1, 2):\n        #     if s[i]!= s[i + 1]:\n        #         s[i], s[i + 1] = s[i + 1], s[i]\n        #         return \"\".join(s)\n        # return \"\".join(s)\n\n        # length = len(s)\n        # if len(s) == 0:\n        #     return \"\"\n        # if len(s) % 2!= 0:\n        #     return \"\"\n        #\n        # while s:\n        #     s = s[0:len(s) - 1] + s[len(s) - 1:len(s)]\n        #     if len(s) % 2 == 0:\n        #         return \"\".join(s)\n        #     else:\n        #         s = s[0:len(s) - 1] + s[len(s) - 1:len(s)]\n\n        i = 0\n        while i < len(s):\n            if s[i]!= s[i + 1]:\n                s[i], s[i + 1] = s[i + 1], s[i]\n                i += 1\n                return \"\".join(s)\n            i += 1\n        return \"\".join(s)\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"5\",\n    [\"a\", \"b\", \"ab\", \"abacaba\", \"ba\", \"aba\", \"abab\", \"ba\", \"aba\", \"abab\"]\n) == \"YES\"\n\n\nassert solution(\n    \"3\",\n    [\"a\", \"qwerty\", \"qwert\", \"qwierty\", \"qwert\", \"qwert\", \"qwert\", \"qwert\", \"qwert\"]\n) == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\nprint(\"PASSED\" if solution(stdin) == \"YES\" else \"FAILED\")\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin, \"a\", \"ba\") == \"YES\", \"NO\"\nassert solution(stdin, \"a\", \"abab\") == \"YES\", \"NO\"\nassert solution(stdin, \"qwerty\", \"qwerty\") == \"YES\", \"NO\"\nassert solution(stdin, \"qwerty\", \"qwerg\") == \"YES\", \"NO\"\nassert solution(stdin, \"qwerty\", \"qwert\") == \"YES\", \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5,[\"a\", \"ab\", \"abab\", \"ba\", \"aba\"]) == \"YES\"\nassert solution(5,[\"q\", \"w\"]) == \"NO\"\nassert solution(5,[\"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]) == \"YES\"\nassert solution(3,[\"q\", \"w\", \"w\"]) == \"NO\"\nassert solution(3,[\"q\", \"w\", \"w\", \"w\"]) == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n'''\n\nline = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input()\nstring = input"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"YES\""
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 3 3\") == \"3\"\nassert solution(\"5 8\") == \"0\"\nassert solution(\"5 1 7\") == \"3\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 3 4 5 6\") == \"2\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '5'\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == 5\n\nassert solution(2) == 0\n\nassert solution(3) == 5\n\n\n\n\n\nInput\n5 2\n5 3 2 4\n\nOutput\n0\n\nInput\n5 100\n12 34 55 43 21\n\nOutput\n5\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input().rstrip())\nk = int(input().rstrip())\n\narr = sorted(list(map(int, input().rstrip().split())))"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 100\n\n-------Time complexity-------\nO(n^2)\n\nO(n)\n\nO(n^2)\n\n------Memory complexity-------\nO(n^2)\n\n------Submissions order-------\nApproach: sort(stdin)\nRuntime: 36 ms, faster than 10.01% of Python3 online submissions for Maximum number of problems in Contest.\nMemory Usage: 13.9 MB, less than 5.60% of Python3 online submissions for Maximum number of problems in Contest.\n\"\"\"\n\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        N = len(prices)\n        if N == 1:\n            return 0\n        maxProfit = 0\n        minPrice = float('inf')\n        for i in range(N):\n            minPrice = min(minPrice, prices[i])\n            maxProfit = max(maxProfit, prices[i] - minPrice)\n        return maxProfit\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '5'"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '5'\n\n-----Bug Fixes-----\nMishka is not allowed to solve a problem with difficulty greater than $k$. The length of the list should be $k$ to avoid problems with that limit.\n\n-----Submissions-----\nSummary:\nTime complexity: O(n)\nMemory Usage: 16.4 MB\n\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['3','4','9','6']) == '12'\nassert solution(['3','6','3','4','5']) == '14'\nassert solution(['6','3','2','3','4']) == '12'\nassert solution(['1','1','4','6','9','9','3']) == '3218'\nassert solution(['2','3','8']) == '14'\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3218\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"13\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([]), \"Empty array\"\nassert solution([1, 2]), \"Red\"\nassert solution([1, 2, 5, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18]), \"Red\"\nassert solution([1, 2, 5, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]), \"Red\"\nassert solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]), \"Red\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 12\nassert solution(input()) == 14\nassert solution(input()) == 3218\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 4') == '12'\nassert solution('3 9') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '1 1 1'\nassert solution('1 2 1') == '1 2 1'\nassert solution('1 4 1') == '1 4 1'\nassert solution('1 5 1') == '1 5 1'\nassert solution('1 6 1') == '1 6 1'\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == answer\n'''\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12\nassert solution(stdin) == 14\nassert solution(stdin) == 3218\n\n\n-----Constraints-----\n\n1 <= a, b <= 10^{14}\n\na <= b\n\n-----Time Limit-----\n\nO(n)\n\n-----Solutions-----\n\nRuntime: 124 ms (2.33%)\nMemory Usage: 22.5 MB (6.85%)"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '12'\nassert solution(input()) == '14'\nassert solution(input()) == '3218'\nassert solution(input()) == '12'\nassert solution(input()) == '14'\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"12\"\n\n\n-----------------\n\nThe function solution takes two parameters: a string of four integers $a$ and $b$ (denoting the red and blue markers). If all the tiles are of the same color then $a = b = $a$ should be the color of the corresponding marker.\n\nIf $a = b = a$ then the function should return an integer $a$ \u2014 the minimal perimeter of the resulting rectangle.\n\nAn example is shown below.\n\nInput\n3 3\n\nOutput\n5\n\nInput\n2 2\n\nOutput\n2\n\nInput\n9 5\n\nOutput\n10\n\nInput\n3 5\n\nOutput\n2\n\n-----------------\n\nA sequence of four integers $a$ and $b$ must be defined as follows.\n\n\n\na = b = 2;\nb = 1;\nb = 4;\nb = 3;\nb = 2;\n\nHere the two values above have been defined for a and b respectively.\n\nInput\n\n\nOutput\n\n\nThere are five different ways to color the five tiles of a rectangle:\n\n  a = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b = b"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"aaaabbcdddd\") == \"YES\"\nassert solution(\"aaabcddddd\") == \"YES\"\nassert solution(\"ababcdabcab\") == \"NO\"\nassert solution(\"ababcdabcba\") == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'YES'\n\nassert solution(stdin) == 'NO'"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('abacbecfd') == 'YES'\nassert solution('abacbecfd') == 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"123\") == \"NO\"\nassert solution(\"0011\") == \"YES\"\nassert solution(\"1111\") == \"YES\""
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcccbdd\") == \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('a') == '00110101', \"a = 00110101\"\nassert solution('ab') == '00110101', \"ab = 00110101\"\nassert solution('aab') == '00110101', \"aab = 00110101\"\nassert solution('abcd') == '00110101', \"abcd = 00110101\"\nassert solution('abcdd') == '00110101', \"abcdd = 00110101\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 25\nassert solution(stdin) == 26\nassert solution(stdin) == -1\n\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('a:4;b:4') == '4'\nassert solution('a:5;b:6') == '5'\nassert solution('a:9;b:9') == '-1'\nassert solution('a:0;b:0') == -1\nassert solution('a:1;b:1') == '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == 2\nassert solution(\"3 5\") == -1\nassert solution(\"4 5\") == -1\nassert solution(\"5 5\") == 2\nassert solution(\"10 10\") == 25\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == 5\nassert solution(\"2 2\") == -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0) == -1\nassert solution(1) == 0\nassert solution(2) == -1\nassert solution(3) == 1\nassert solution(4) == -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5,2) == 5\nassert solution(5,1) == 5\nassert solution(2,5) == -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 25"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 2, 3, 4, 5) == 25\nassert solution(5, 2, 1, 9) == 25\nassert solution(5, 2, 1, 9) == -1\nassert solution(5, 2, 1, 9) == 0\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"2 2\\\") == 25\nassert solution(\\\"2 1\\\") == -1"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    '2 2') == 25, 'Wrong input: %r' % stdin\nassert solution(\n    '3 4') == -1, 'Wrong input: %r' % stdin\nassert solution(\n    '1 1') == 1, 'Wrong input: %r' % stdin\nassert solution(\n    '1 1 5') == 1, 'Wrong input: %r' % stdin\nassert solution(\n    '1 2 4 5 6 9 10 13 14 15 16 17 18 19 20 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 191 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 211 212 213 214 215 216 217 219 220 221 222 223 224 225 226 227 228 229 230 231 231 232 233 234 235 236 237 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 253 255 256 257 258 259 261 262 263 265 266 268 269 290 291 292 293 294 295 296 297 298 299 299 300 301 301 301 302 303 303 304 305 306 308 309 310 311 311 313 314 315 316 317 318 319 320 321 321 322 323 324 325 326 327 328 329 329 330 330 331 331 332 333 334 333 334 335 336 337 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 4 5 6 8\") == \"YES\"\nassert solution(\"1 2 4 5 6 8\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\n\n\"\"\"\n\nn, k = map(int, stdin.split())\na = []\nfor _ in range(n):\n    a.append(int(stdin.split()[1]))\na.sort()\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 4 3 1\") == \"YES\"\nassert solution(\"6 4 3 1\") == \"NO\"\nassert solution(\"2 2 2 2\") == \"NO\"\nassert solution(\"2 2 2 2\") == \"YES\""
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"5\"\nassert solution(\"5 20\") == \"3\"\nassert solution(\"45 -6\") == \"5\"\nassert solution(\"34 -15\") == \"5\"\nassert solution(\"10 34\") == \"4\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3\", \"1\", \"5\", \"4\", \"2\", \"2\", \"2\", \"2\", \"1\"]) == \"3\"\nassert solution([\"3\", \"1\", \"2\", \"1\", \"1\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"2\", \"1\", \"1\", \"1\", \"1\"]) == \"0\"\nassert solution([\"1\", \"1\", \"2\", \"3\"]) == \"1\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"5 20\") == \"3\"\nassert solution(\"45 -6\") == \"3\"\nassert solution(\"34 -15\") == \"3\"\nassert solution(\"10 34\") == \"3\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 13\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 3\nassert solution(input()) == 5\nassert solution(input()) == 5\nassert solution(input()) == 5\nassert solution(input()) == 5\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 -2 -3\", \"1 2 3\") == \"3\"\nassert solution(\"1 -2\", \"1 1\") == \"1\"\nassert solution(\"3 -6\", \"-2 3 -5\") == \"3\"\nassert solution(\"4\", \"-6\") == \"-6\"\nassert solution(\"1\", \"1 0 0 0\") == \"1\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n10 2 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n10 4 3\\n10 8 3\\n1 8 3\\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1'), 'NO'\nassert solution('4'), 'YES'\nassert solution('3'), 'NO'\nassert solution('4'), 'NO'\nassert solution('2'), 'NO'\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 1\") == \"YES\"\nassert solution(\"1 3 1\") == \"YES\"\nassert solution(\"3 4 3\") == \"YES\"\nassert solution(\"3 4 2\") == \"NO\"\nassert solution(\"1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3,5) == \"YES\"\nassert solution(4,5) == \"NO\"\nassert solution(3,5) == \"NO\"\n\nassert solution(2,2) == \"NO\"\nassert solution(1,1) == \"YES\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 3\") == \"NO\"\nassert solution(\"1 4\") == \"NO\"\nassert solution(\"3 1\") == \"YES\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"The first line contains one integer $n$ ($1 \\le n \\le 20$). The second line contains $n^2$ integers $a_1, a_2, \\dots, a_{n^2}$ ($1 \\le a_i \\le 1000$) \u2014 the numbers to put into a matrix of $n$ rows and $n$ columns. \"\n\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nimport math\nimport sys\nfrom collections import defaultdict\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n\nclass Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        n = len(gas)\n        left = 0\n        right = sum(cost)\n        \n        while left < n and right >= 0:\n            if right - left <= 0:\n                return right - left\n            \n            if left + gas[left] < right:\n                right = right - gas[left]\n                left += 1\n                \n            else:\n                left += 1\n                \n        return -1\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"YES\"\nassert solution(inp) == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Be careful-----\n\nPolycarp is very very good at this competition.\n\nIf you are to compete with Polycarp, you may be stuck with it.\n\nIf you are a professor at Polycarp, you may be a student at Polycarp.\n\nIf you are a judge at Polycarp, you may be a judge at Polycarp.\n\nIf you are a teacher at Polycarp, you may be a teacher at Polycarp.\n\nYou are not graded on Polycarp.\n\nIf you are a student at Polycarp, you may be a student at Polycarp.\n\nIf you are a judge at Polycarp, you may be a judge at Polycarp.\n\nIf you are a teacher at Polycarp, you may be a teacher at Polycarp.\n\nIf you are a professor at Polycarp, you may be a professor at Polycarp.\n\nInput\n\nThe first line contains an integer $n$ \u2014 the number of projects and the initial rating of Polycarp.\nThe next $n$ lines contains a line of $i$ integers $a_i$ and $b_i$, which represents the rating required to complete the $i$-th project and the rating change after the project completion.\n\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\n\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\n\nInput\n\nThe first line contains an integer $n$ \u2014 the number of projects and the initial rating of Polycarp.\nThe next $n$ lines contains a line of $i$ integers $a_i$ and $b_i$, which represents the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\n\nInput\n\nThe first line contains an integer $n$ \u2014 the number of projects and the initial rating of Polycarp.\nThe next $n$ lines contains a line of $i$ integers $a_i$ and $b_i$, which represents the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\n\nInput\n\nThe first line contains an integer $n$ \u2014 the number of projects and the initial rating of Polycarp.\nThe next $n$ lines contains a line of $i$ integers $a_i$ and $b_i$, which represents the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains another line of $i$ integers $a_i$ and $b_i$ \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\nThe next $n$ lines contains"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'\n\nassert solution(stdin) == 'NO'\n\nassert solution(stdin) == 'NO'\n\n\n\"\"\"\na, b = [int(i) for i in input().split()]"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('7 3 2') == 'YES'\nassert solution('10 1 11') == 'NO'\n\nassert solution('10 1 5') == 'NO'\nassert solution('10 1 3') == 'YES'\nassert solution('10 1 1') == 'YES'\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"YES\"\nassert solution(\"0 3\") == \"NO\"\n\nassert solution(\"1 5\") == \"YES\"\nassert solution(\"2 5\") == \"NO\"\n\nassert solution(\"0 5\") == \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(solution()) == \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"7 3 2\") == \"YES\"\nassert solution(\"10 1 5\") == \"YES\"\nassert solution(\"10 1 6\") == \"NO\"\nassert solution(\"10 1 7\") == \"NO\"\nassert solution(\"10 1 8\") == \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['7', '2', '1', '2', '2', '1', '3']) == ['0', '1', '0', '2', '2', '0', '3'], 'no'\nassert solution(['10', '1', '1', '1', '1', '2', '2', '1', '2', '1', '2', '2']) == ['0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '1', '0'], 'no'\nassert solution(['10', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']) == ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], 'no'\nassert solution(['10', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']) == ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], 'no'\nassert solution(['10', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']) == ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], 'no'\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 1\") == \"YES\"\nassert solution(\"1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1\") == \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 3') == 'YES'\nassert solution('0 3') == 'YES'\nassert solution('0 2') == 'NO'\nassert solution('0 1') == 'YES'\nassert solution('1 2') == 'YES'\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"input/day_11_1.txt\") == [\"NO\", \"YES\"]\nassert solution(\n    \"input/day_11_2.txt\") == [\"NO\", \"YES\"]\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"aababaababa\") == 3\nassert solution(\"aab\") == 2\nassert solution(\"a\") == 1\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('aabbaccc'), 3\nassert solution('aaabbbccc'), 5\nassert solution('aaaaa'), 2\nassert solution('ccaa'), 3\nassert solution('ccc'), 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('bbaba') == 2, 'correct'\nassert solution('babb') == 1, 'correct'\nassert solution('aabb') == 1, 'correct'\nassert solution('aaa') == 3, 'correct'\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 5\n\n\n\"\"\""
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"baaba\") == 3\nassert solution(\"abcde\") == 2\nassert solution(\"asdfasdf\") == 0\nassert solution(\"a\") == 1\nassert solution(\"asdfasd\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('aabb', 'ab') == 3\nassert solution('aabb', 'ab') == 2\nassert solution('abab', 'ab') == 0\nassert solution('aaba', 'aba') == 2\nassert solution('abcde', 'abcde') == 3"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2.572479) == 3 2\nassert solution(4.024922) == 10 3\nassert solution(10.0) == 9 9\nassert solution(\"100\") == 0\nassert solution(\"1000\") == 1\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"10 3\"\n\n>>> import sys\n>>> import os\n>>> sys.stdin.readline()\n'1.200000'\n>>> os.system('python main.py')\nOutput\n10 3\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"10 3\"\nassert solution(input()) == \"9 9\"\nassert solution(input()) == \"10 3\"\nassert solution(input()) == \"10 3\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"10 3\"\nassert solution(stdin) == \"9 9\"\nassert solution(stdin) == \"10 3\"\nassert solution(stdin) == \"3 2\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2.572479) == 3\nassert solution(1.200000) == 2\nassert solution(5.000000) == 10\nassert solution(2.3000000) == 9\nassert solution(5.6000000) == 9\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"9 9\"\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= x <= 10^5\n\n------Time complexity-------\nBest case: O(1)\nAverage case: O(N)\nWorst case: O(N)\n\n------Space complexity-------\nBest case: O(1)\nAverage case: O(N)\nWorst case: O(N)\n\n-----Bug Fixes-----\nOriginal bug: Non-modifiable type, used for test cases.\n\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"10 9\"\nassert solution(input) == \"3 4\"\nassert solution(input) == \"9 9\"\nassert solution(input) == \"3 3\"\nassert solution(input) == \"4 2\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2.572479\") == 3\nassert solution(\"2.572479\") == 10\nassert solution(\"4.024922\") == 9\nassert solution(\"6.59\") == 2\nassert solution(\"5.5\") == 5\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1.200000) == 3 2\nassert solution(2.572479) == 10 3\nassert solution(4.024922) == 9 9\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 2.5) == 3, \"should be 3\"\nassert solution(2, 1.5) == 2, \"should be 2\"\nassert solution(4, 4.0) == 10, \"should be 10\"\nassert solution(10, 2.5) == 9, \"should be 9\""
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nprint(\"Yes\")"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n\", 2, 5) == \"YES\"\nassert solution(\"3 3\\n\", 2, 3) == \"YES\"\nassert solution(\"4 4\\n\", 2, 3) == \"YES\"\nassert solution(\"4 3\\n\", 2, 6) == \"YES\"\nassert solution(\"5 5\\n\", 2, 3) == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution == \"YES\"\n'''\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('9 7 10 20 30') == 'YES'\nassert solution('1 1 1 1') == 'YES'\nassert solution('2 3 5 4 6') == 'NO'\nassert solution('10 4 3 20 6') == 'NO'\nassert solution('10 3 20 5 6') == 'NO'\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '101100'\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '01110100'\n\n\nassert solution(stdin) == '00101011'\n\nassert solution(stdin) == '10101101'\n\n\nassert solution(stdin) == '11111111'\n\nassert solution(stdin) == '11111111'"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"011110101110100110011101111011\""
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"100100\"\nassert solution(stdin) == \"001011\"\nassert solution(stdin) == \"001001\"\nassert solution(stdin) == \"011101\"\nassert solution(stdin) == \"010011\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"01010\") == \"1010101\"\nassert solution(\"111001\") == \"111011011111111011\"\nassert solution(\"11101001\") == \"000111111111111111\"\nassert solution(\"11100011\") == \"111111111111111111\"\nassert solution(\"11100111\") == \"1110111111000000000\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input:\n    ) == '101100'"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"01010100\"\nassert solution(input()) == \"11111111\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('010011') == '01010100'\nassert solution('001101') == '010011'\nassert solution('01001100') == '01010100'\nassert solution('0001101') == '0001101'\nassert solution('00100010') == '0001101'\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"010010\", 3, 3) == \"11010101010\"\nassert solution(\"01100\", 2, 3) == \"001100100011\"\nassert solution(\"100001\", 1, 3) == \"0110111101111\"\nassert solution(\"1000001\", 2, 3) == \"0110111101001\"\nassert solution(\"1000000\", 1, 3) == \"00010111101011\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"01010100\") == \"01101100\";\nassert solution(\"1110001\") == \"11010001\";\nassert solution(\"10001001\") == \"100010001\";\nassert solution(\"11101011\") == \"11111111111111111\";\nassert solution(\"111001010\") == \"1111111111\";\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'YES', \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\""
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('ab') == 'YES'\nassert solution('aa') == 'YES'\nassert solution('abc') == 'NO'\nassert solution('cc') == 'NO'\nassert solution('ab') == 'YES'\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"ba\") == \"NO\"\nassert solution(\"ac\") == \"NO\"\nassert solution(\"ab\") == \"YES\"\nassert solution(\"ac\") == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"aa\") == \"YES\"\nassert solution(\"ab\") == \"YES\"\nassert solution(\"ab\") == \"NO\"\nassert solution(\"abc\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('aabcbacb') == 'bacab'\nassert solution('aabcbacb') == 'abacb'\nassert solution('abccba') == 'bcab'\nassert solution('aabc') == 'ab'\nassert solution('aab') == 'a'\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('ab') == 'Yes'\nassert solution('ab') == 'Yes'\nassert solution('ab') == 'NO'\nassert solution('ab') == 'YES'\nassert solution('ab') == 'YES'\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 1, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['3', '1', '2', '3', '1']) == '1 2 3 4 5'\nassert solution(['5', '1', '2', '3', '1']) == '1 2 3 4 5'\nassert solution(['4', '1', '2', '3', '1']) == '1 2 3 4'\nassert solution(['4', '1', '2', '3', '1']) == '1 2 3 4'\nassert solution(['2', '3', '1', '1']) == '1 2 3 4'\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3 1 2\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 1 2\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 1 2 3 4 5\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 5 -2 1 2 4\") == \"1 1 2 3 4 5\"\nassert solution(\n    \"5 4 -1 1 2 3\") == \"1 2 3 4 5\"\nassert solution(\n    \"4 -1 1 2 3\") == \"1 2 3 4\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"1 2\"\nassert solution(\"1 1\") == \"1 2\"\nassert solution(\"3 3\") == \"1 1\"\nassert solution(\"5 1\") == \"1 1\"\nassert solution(\"4 4\") == \"-1\""
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\n        '3', '-2', '1', '1', '-1', '1', '1', '1'\n    ]\n) == '3 1 2'\n\nassert solution(\n    [\n        '3', '-2', '1', '1', '-1', '1', '1', '1'\n    ]\n) == '1 2 3 4 5'\n\nassert solution(\n    [\n        '3', '-2', '1', '1', '-1', '1', '1', '1'\n    ]\n) == '1 1 1 1'\n\nassert solution(\n    [\n        '3', '-2', '1', '1', '-1', '1', '1', '1'\n    ]\n) == '1 1 1 1'\n\nassert solution(\n    [\n        '3', '-2', '1', '1', '-1', '1', '1', '1'\n    ]\n) == '1 1 1 1'"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1, \"The problem is not solved\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('4 2 4 4 4') == '1 2 3 4'\nassert solution('1 2 2 4 4') == '1 2 3 4'\nassert solution('2 4 2 4 4') == '1 2 3 4'\nassert solution('1 2 1 1') == '1 2 1 2'\nassert solution('-1 2 2') == '-1 2 2'"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 5 2') == 3\nassert solution('5 5') == 1\nassert solution('1 1 1') == 2\nassert solution('2 2 2 2') == 1\n\n\n-----Constraints-----\n0\n\n-----Time Limit-----\n1\n\n-----You may not use any additional stack memory, only constant memory.\n\n\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"1\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"5 4\") == \"3\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"5 1\") == \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, [1, 2, 3]) == 1\nassert solution(5, [2, 2, 2, 2, 2]) == 2\nassert solution(5, [2, 2, 3, 3, 3]) == 2\nassert solution(5, [3, 2, 2, 2, 2]) == 2\nassert solution(5, [3, 3, 2, 2, 2]) == 2\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, [1, 2, 3, 4, 5]) == 1\nassert solution(5, [1, 3, 4, 5, 6, 7, 8]) == 5\nassert solution(5, [1, 2, 6, 7, 8, 9]) == 2\nassert solution(5, [1, 2, 3, 4, 6, 7, 8, 9]) == 2\nassert solution(5, [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, [1, 2, 3]) == 1\nassert solution(5, [1, 2, 2, 3, 3]) == 2\nassert solution(5, [1, 2, 1, 1, 1]) == 2\nassert solution(5, [1, 2, 1, 1, 1, 1]) == 2\nassert solution(5, [1, 2, 1, 1, 1, 1, 1]) == 2\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input: \"3\\n1 2 3\\n\"\n    ) == \"1\"\n\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"1\"\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"-1\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"0\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"0\", \"0\"]) == \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"1\"\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == str(1)\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"10\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(10) == 5\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\".##.###..###\") == \"10\"\nassert solution(\".#.#..#.#..#\") == \"2\"\nassert solution(\".#.#..#.#..#\") == \"5\"\nassert solution(\".#.###..###\") == \"4\"\nassert solution(\".#.######\") == \"1\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(12) == 5\nassert solution(13) == 2\nassert solution(19) == 5\nassert solution(10) == 4\nassert solution(11) == 3\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 5\n\n\"\"\"\nimport unittest"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('10') == 5\nassert solution('4') == 3\nassert solution('7') == 2\nassert solution('1') == 0\n\"\"\"\nimport sys"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    input:\n    \"10\"\n) == 5\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"7\") == \"6\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(10) == 5\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0 15'"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0 15'\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0 1\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"3 5\"\nassert solution(stdin) == \"3 5 5\"\nassert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"0 15\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"15\") == \"15\"\nassert solution(\"3 5 5\") == \"3 5 5\"\nassert solution(\"686\") == \"686\"\nassert solution(\"319\") == \"119 226\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"1 2\") == 0\nassert solution(\"1 3\") == 0\nassert solution(\"1 5\") == 0\nassert solution(\"1 6\") == 0\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"0 1\"\n\nassert solution(input()) == \"0 15\"\n\nassert solution(input()) == \"0 15\"\n\nassert solution(input()) == \"0 15\"\n\nassert solution(input()) == \"0 15\""
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == ''\n\npass\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"1 5\"\n\nassert solution(stdin) == \"1 3\"\n\nassert solution(stdin) == \"2 3\""
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"]\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == 2\nassert solution(5) == 4\nassert solution(11) == 8\nassert solution(4) == 3\nassert solution(3) == 1\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution == 3\nassert solution == 3\nassert solution == 3\nassert solution == 3\nassert solution == 3\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('0 0 0 0 1 2 3 4 5') == ['1 4', '1 2', '1 5', '1 3', '1 4', '1 7']\nassert solution('0 0 0 1 1 2 3 4 5') == ['1 0', '1 4', '1 2', '1 5', '1 3', '1 4', '1 7']\nassert solution('0 0 0 1 1 2 3 4 5') == ['2 2', '2 4', '2 7', '3 2', '3 4', '3 7', '4 5', '4 7']\nassert solution('0 0 0 1 1 2 3 4 5') == ['1 4', '1 2', '1 5', '1 3', '1 4', '1 7']\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution == 22, 'incorrect solution'\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"4 4 3 4\"\n\n\n-----Bezout Formulation-----"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 7, \"Expected 7, got {}\".format(7)\nassert solution(input(\"2\"*30)) == 7, \"Expected 7, got {}\".format(7)\nassert solution(input(\"2\"*30)[::-1]) == 7, \"Expected 7, got {}\".format(7)\nassert solution(input(\"2\"*30)[::-1][::-1]) == 7, \"Expected 7, got {}\".format(7)\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '6'\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2 1 3\") == \"NO\"\nassert solution(\"3 3 1\") == \"YES\"\nassert solution(\"3 3 3 3 3 3 3 3 3\") == \"YES\"\nassert solution(\"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 2 3 1\") == \"YES\"\nassert solution(\"3 1 2 2\") == \"NO\"\n\n\n\"\"\"\n\nclass Solution:\n    def solution(self,stdin,stdout):\n        if len(stdin)==0:\n            return 'NO'\n        if len(stdin)==1:\n            return 'YES'\n        \n        for i in range(1,len(stdin)):\n            for j in range(i,len(stdin)):\n                if int(stdin[i])>int(stdin[j]):\n                    j=j-1\n                    stdin=stdin[:j+1]+stdin[j+1:][::-1]\n                    break\n        return ''.join(stdout)\n    \n\nclass Test(unittest.TestCase):\n    def test_0(self):\n        stdin = \"2 3 1\"\n        stdout = [\"YES\", \"NO\"]\n        self.assertEqual(Solution().solution(stdin,stdout),'YES')\n        \n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 2 3 1 4 5 6 7 8 9 10\"\n) == \"YES\"\nassert solution(\n    \"3 2 3 1 5 6 7 8 9 10\"\n) == \"NO\"\nassert solution(\n    \"3 2 3 1 4 5 6 7 8 9 10\"\n) == \"YES\"\nassert solution(\n    \"3 2 3 1 1 5 6 7 8 9 10\"\n) == \"NO\"\nassert solution(\n    \"3 2 3 1 1 2 5 6 7 8 9 10\"\n) == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, [3, 2, 3]) == \"NO\"\nassert solution(3, [3, 1, 3]) == \"YES\"\nassert solution(3, [2, 3, 1]) == \"NO\"\nassert solution(3, [1, 1, 2, 3]) == \"YES\"\nassert solution(3, [2, 3, 1, 2, 3, 1]) == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 2') == 'NO'\nassert solution('1 2 3') == 'NO'\n\n\nassert solution('5 1 2 3 4') == 'YES'\nassert solution('5 1 2 3 4 5') == 'YES'\nassert solution('2 3 4 5 6 7 8 9 10') == 'YES'\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == \"YES\"\nassert solution(2) == \"NO\"\nassert solution(3) == \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4, [1, 2, 3]) == 'NO', \"Success\"\nassert solution(5, [1, 2, 3, 4, 5]) == 'YES', \"Success\"\nassert solution(6, [1, 2, 3, 4, 5, 6]) == 'NO', \"Success\"\nassert solution(7, [1, 2, 3, 4, 5, 6, 7]) == 'YES', \"Success\"\nassert solution(8, [1, 2, 3, 4, 5, 6, 7, 8]) == 'NO', \"Success\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abcde\") == \"abdca\"\nassert solution(\"abcdf\") == \"abcdf\"\nassert solution(\"abcd\") == \"abdcd\"\nassert solution(\"abdcd\") == \"-1\"\nassert solution(\"abcdef\") == \"abcd\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(string) == string"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"abcd\") == -1\nassert solution(\"abcd\") == 5\nassert solution(\"abcd\") == 4\nassert solution(\"abcd\") == 5\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcd\"\nassert solution(\"abcd\") == \"abdcef\"\nassert solution(\"abcd\") == \"abdcd\"\nassert solution(\"abcd\") == \"abdcd\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('abcdef', 'abdfec') == 2\nassert solution('abcdef', 'abdcef') == -1\nassert solution('abcdef', 'abdcf') == 2\nassert solution('abcdef', 'abdcef') == 0\n\n-----Constraints-----\n1 <= n <= 10^4\n0 <= stdin.length <= 300\n1 <= s.length, t.length <= 10^4\ns, t consist of lowercase Latin letters\ns \u2264 t\ns[i]!= t[i] for i = 1,..., n\nt[i]!= s[i] for i = 1,..., n\n\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"-1\""
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"f\"\nassert solution(stdin) == \"s\"\nassert solution(stdin) == \"t\"\nassert solution(stdin) == \"s\"\nassert solution(stdin) == \"t\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"t\" or solution(stdin) == \"-1\"\nassert solution(stdin) == \"1\" or solution(stdin) == \"-1\""
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"SPPSPSPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"SPPSPSPS\"\nassert solution(stdin) == \"PSPSPS\"\nassert solution(stdin) == \"SPPS\"\nassert solution(stdin) == \"SPPS\"\nassert solution(stdin) == \"PPPSPSPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('ba') == 'SPPSPSPS'\nassert solution('ba') == 'SPPPSPS'\nassert solution('a') == 'P'\nassert solution('a') == 'S'\nassert solution('a') == 'S'\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'SPPSPSPS'\nassert solution(stdin) == 'PSPSP'\nassert solution(stdin) == 'SPSP'\nassert solution(stdin) == 'SP'\nassert solution(stdin) == 'SP'\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"SPPSPSPS\"\nassert solution(stdin) == \"PS\"\nassert solution(stdin) == \"SP\"\nassert solution(stdin) == \"P\"\nassert solution(stdin) == \"S\"\n\nfor i in range(int(stdin[0])):\n    s = input()\n    if s[0] == 'P':\n        print(\"P\", end=' ')\n    if s[0] == 'S':\n        print(\"S\", end=' ')\n    if s[0] == 'P':\n        print(\"PP\", end=' ')\n    if s[0] == 'S':\n        print(\"SS\", end=' ')\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'SPPSPSPS'\nassert solution(stdin) == 'PS'\nassert solution(stdin) == 'SP'\nassert solution(stdin) == 'PS'\nassert solution(stdin) == 'SP'\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"PSPSPSPS\"\nassert solution(stdin) == \"SPSP\"\nassert solution(stdin) == \"SP\"\nassert solution(stdin) == \"S\""
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'SP'\nassert solution(stdin) == 'PS'\nassert solution(stdin) == 'PSPS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"PPPSPSPS\"\nassert solution(stdin) == \"PSPSPS\"\nassert solution(stdin) == \"SP\"\nassert solution(stdin) == \"S\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'SP'\nassert solution(stdin) == 'SPPSP'\nassert solution(stdin) == 'PS'\nassert solution(stdin) == 'PSS'\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2 4 6 8 10\"]) == \"1\""
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['2 4 6 8 10']) == '1'\nassert solution(['3 2']) == '3'\nassert solution(['3 3']) == '1'\nassert solution(['3 3']) == '3'\nassert solution(['3 4']) == '1'\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 12\") == \"1\"\nassert solution(\"2 4 6 8 1\") == \"0\"\nassert solution(\"2 4 6 8 2\") == \"0\"\nassert solution(\"2 4 6 8 3\") == \"0\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3 5 3\") == \"1\"\nassert solution(\"4 8 10\") == \"1\"\nassert solution(\"5 6 6 4\") == \"1\"\nassert solution(\"7 7 6 3\") == \"1\"\nassert solution(\"8 7 6 3\") == \"2\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"1\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\") == \"0\"\nassert solution
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"2\"\n\nassert solution(input) == \"0\"\n\nassert solution(input) == \"0\"\n\nassert solution(input) == \"0\"\n\nassert solution(input) == \"0\""
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 0 0\") == \"0\"\nassert solution(\"1 0 0 0 0\") == \"1\"\nassert solution(\"1 0 0 0 0\") == \"0\"\nassert solution(\"1 1 0 0 0\") == \"0\"\nassert solution(\"2 1 0 0 0\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('4\\n1') == 2\nassert solution('4\\n1 1') == 1\nassert solution('4\\n0 1 0 1 1') == 2\nassert solution('3\\n1 1 1 1 0') == 2\nassert solution('4\\n1 0 0 1 0') == 1\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5 4 2\") == \"2\"\nassert solution(\"1 2 3 2 1 0\") == \"3\"\nassert solution(\"1 2 3 2 0 1\") == \"2\"\nassert solution(\"1 2 2 3 2 0\") == \"3\"\nassert solution(\"1 2 3 2 0\") == \"3\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0\n\n\n-----Constraints-----\n1 <= stdin.length <= 1000\n1 <= n <= 10^5\n1 <= a_i \\le n\n\n-----Submissions-----\n\nYou are not responsible for using the eval code to determine the correctness of your solution.\n\nAccepted\n36,536\nSubmissions\n97,136\n\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2, 4, 1) == 0\nassert solution(5, 4, 1) == 2\nassert solution(4, 2, 1) == 1\nassert solution(3, 1, 1) == 0\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\n\n\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nk = 0\nfor i in range(n):\n    if a[i] == 0:\n        k += 1\n    else:\n        k = 0\nprint(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('4 5') == '0'\nassert solution('5 7') == '0'\nassert solution('4 1') == '0'\nassert solution('5 3') == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"5\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\"), \"\"\"Arrays are not divisible by each other.\"\"\"\nassert solution(\"2\"), \"\"\"Arrays are not divisible by each other.\"\"\"\nassert solution(\"2 3 4 5\"), \"\"\"Arrays are not divisible by each other.\"\"\"\nassert solution(\"\"), \"\"\"Arrays are not divisible by each other.\"\"\"\nassert solution(\"2 3 4 5\"), \"\"\"Arrays are not divisible by each other.\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"6\"\n\nfor _ in range(int(input())):\n    n, a = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            ans += 1\n            if a[i] % a[j] == 0:\n                break\n    print(ans)\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 11\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 1) == 1\nassert solution(6, 5) == 4\nassert solution(6, 10) == 0\nassert solution(1, 2) == 2\nassert solution(3, 1) == 0\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 4\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin: str = \"5 5\\n\"\n    ) == \"2\"\nassert solution(\n    stdin: str = \"6 6\\n\"\n    ) == \"4\"\nassert solution(\n    stdin: str = \"1 2 3\\n\"\n    ) == \"2\"\nassert solution(\n    stdin: str = \"0 0 0\\n\"\n    ) == \"0\"\nassert solution(\n    stdin: str = \"0 1 0\\n\"\n    ) == \"0\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5') == '2'\nassert solution('6') == '3'\nassert solution('90') == '12'\nassert solution('90') == '18'\nassert solution('12') == '90'\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n\n----------------------------------------------------------------------------------------------------------------------\n\nBinary search solution.\n\n------Input------\n\nThe first line contains an integer $n$ (1\u2264n\u2264100) \u2014 the number of coins.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ (1\u2264a_i\u2264100) \u2014 values of coins.\n\n\n------Output------\n\nPrint one integer \u2014 the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.\n\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"6\") == 2"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1\nInput\n6\n1 2 4 3 3 2\n\nOutput\n1\n\n-----See also-----\nhttps://practice.geeksforgeeks.org/problems/distribute-coins-pockets/1\n\n\"\"\"\n\nclass Solution:\n    def minDist(self, a: List[int]) -> int:\n        min_dist = float(\"inf\")\n        for i in range(len(a)):\n            for j in range(i+1, len(a)):\n                diff = abs(a[i]-a[j])\n                if diff < min_dist:\n                    min_dist = diff\n        return min_dist\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n\nInput\n1\n1 1 1 1 2\n\nOutput\n1\n\n\"\"\"\n\nclass Solution:\n    def minimumDistToClosestValue(self, arr: List[int]) -> int:\n        small = min(arr)\n        large = max(arr)\n        if large - small > 1:\n            return 1\n        elif large - small == 1:\n            return 1\n        else:\n            return 0\n        "
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n\nInput\n6\n1 2 4 3 3 2\n\nOutput\n2\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == 0, '0'\nassert solution(5) == 3, '5'\nassert solution(10) == -1, '10'\nassert solution(3) == 3, '3'\nassert solution(5) == 2, '5'\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10 3\") == 3\nassert solution(\"10 5\") == -1\nassert solution(\"10 6\") == 3\nassert solution(\"5 10\") == 2\nassert solution(\"10 3\") == -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == 3\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == 3\nassert solution(\"10 3\") == -1\n\n-------------------\n\nThe second example of the solution.\n\nThe first and the third elements are already warmed up.\n\nThe last element is not warmed up.\n\nThe second element is not warmed up.\n\nThe third element is already warmed up.\n\nThe next element is warmed up.\n\nThe last element is already warmed up.\n\nThe next element is already warmed up.\n\nSo Vova wants to switch all of his heaters on in such a way that each element of his house is warmed up by at least one heater.\n\nNow, the number of heaters at the heap is $1$ and $0$.\n\nVova has to wait for the next element of his house. He has to wait for the next element of his house. The next element of his house is always warmed up.\n\nNow Vova has to sleep for the next element of his house. He has to sleep for the next element of his house. He has to wait for the next element of his house.\n\nFinally, he has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house.\n\nNow Vova has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house.\n\nNow Vova has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house.\n\nNow Vova has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house.\n\nNow Vova has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house.\n\nNow Vova has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house.\n\nNow Vova has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of his house. He has to wait for the next element of"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"5 2\") == \"2\"\nassert solution(\"10 3\") == \"2\"\nassert solution(\"20 3\") == -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\n\n\n-----Algorithms-----\n\nThe algorithm (the unsort function) is called for all the combinations of parameters.\n\nFirst, let's find the smallest element of the array.\n\nSmallest = None\n\nThe loop is for every single element of the array.\n\n\n-----Note-----\n\nThe algorithm is very similar to the bubble sort.\n\nThe bubble sort function is called for every one of the elements of the array.\n\nIn each iteration, the smallest element is placed at the index $i$, so that the $i$-th element is the smallest.\n\nSo this iteration is so small that the best answer to the problem is $1$.\n\nThe best answer is the second smallest element.\n\nThe worst case is that the loop is exhausted.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $r$ ($1 \\le n, r \\le 1000$) \u2014 the number of elements in the array and the value of heaters.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 1$) \u2014 the Vova's house description.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum number of heaters needed to warm up the whole house or -1 if it is impossible to do it.\n\n\n-----Examples-----\nInput\n6 2\n0 1 1 0 0 1\n\nOutput\n3\n\nInput\n5 3\n0 0 0 0 0\n\nOutput\n2\n\nInput\n5 10\n0 0 0 0 0\n\nOutput\n-1\n\nInput\n10 3\n0 0 0 0 0\n\nOutput\n3\n\n\n-----Note-----\n\nIn the first example the heater at the position $2$ warms up elements $[1; 3]$, the heater at the position $3$ warms up elements $[2, 4]$ and the heater at the position $6$ warms up elements $[5; 6]$ so the answer is $3$.\n\nIn the second example the heater at the position $1$ warms up elements $[1; 3]$ and the heater at the position $5$ warms up elements $[3; 5]$ so the answer is $2$.\n\nIn the third example there are no heaters so the answer is -1.\n\nIn the fourth example the heater at the position $3$ warms up elements $[1; 5]$, the heater at the position $6$ warms up elements $[4; 8]$ and the heater at the position $10$ warms up elements $[8; 10]$ so the answer is $3$.\n\nIn the fifth example there are no heaters so the answer is -1.\n\n\n-----Algorithms-----\n\nThe algorithm (the sort function) is called for all the combinations of parameters.\n\nSmallest = None\n\nThe loop is for every single element of the array.\n\n\n-----Note-----\n\nThe algorithm is very similar to the bubble sort.\n\nThe bubble sort function is called for every one of the elements of the array.\n\nIn each iteration, the smallest element is placed at the index $i$, so that the $i$-th element is the smallest.\n\nSo this iteration is so small that the best answer to the problem is $1$.\n\nThe best answer is the second smallest element.\n\nThe worst case is that the loop is exhausted.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $r$ ($1 \\le n, r \\le 1000$) \u2014 the number of elements in the array and the value of heaters.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 1$) \u2014 the Vova's house description.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum number of heaters needed to warm up the whole house or -1 if it is impossible to do it.\n\n\n-----Examples-----\nInput\n6 2\n0 1 1 0 0 1\n\nOutput\n3\n\nInput\n5 3\n0 0 0 0 0\n\nOutput\n2\n\nInput\n5 10\n0 0 0 0 0\n\nOutput\n-1\n\nInput\n10 3\n0 0 0 0 0\n\nOutput\n3\n\n\n-----Note-----\n\nIn the first example the heater at the position $2$ warms up elements $[1; 3]$, the heater at the position $3$ warms up elements $[2, 4]$ and the heater at the position $6$ warms up elements $[5; 6]$ so the answer is $3$.\n\nIn the second example the heater at the position $1$ warms up elements $[1; 3]$ and the heater at the position $5$ warms up elements $[3; 5]$ so the answer is $2$.\n\nIn the third example there are no heaters so the answer is -1.\n\nIn the fourth example the heater at the position $3$ warms up elements $[1; 5]$, the heater at the position $6$ warms up elements $[4; 8]$ and the heater at the position $10$ warms up elements $[8; 10]$ so the answer is $3$.\n\nIn the fifth example there are no heaters so the answer is -"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1 0 0 1\") == \"3\"\nassert solution(\"0 0 0 0 0 1\") == \"3\"\nassert solution(\"0 0 0 0 0\") == \"2\"\nassert solution(\"0 0 0 0 0 0\") == \"2\"\nassert solution(\"0 0 0 0 0 1 0\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3\""
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"10\") == \"5\"\nassert solution(\"50\") == \"5\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == \"3\"\nassert solution(5) == \"5\""
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    input=input,\n    assertion=lambda: 1 <= input <= 10**6,\n    output=lambda: str(input)\n) == \"1\"\nassert solution(\n    input=input,\n    assertion=lambda: 1 <= input <= 10**6,\n    output=lambda: str(input)\n) == \"3\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n\n'''\n\nimport sys\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"3\""
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Successful Test-----\nTest cases passed.\n\n'''"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"3\"\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def __init__(self):\n        self.test = (1,1,2)\n\n    def solution(self, stdin: str) -> str:\n        sys.setrecursionlimit(10 ** 9)\n        self.dfs(stdin, 1, 0, \"\")\n        return \"0\"\n\n    def dfs(self, stdin: str, A: int, B: int, ans: str):\n        if stdin.find(A)!= -1:\n            ans = ans + str(A*B)\n            if stdin.find(\"*\")!= -1:\n                ans = ans + \"*\"\n            if stdin.find(\"+\")!= -1:\n                ans = ans + \"+\"\n        if stdin.find(B)!= -1:\n            ans = ans + str(B*A)\n        if stdin.find(\"-\")!= -1:\n            ans = ans + str(B*A)\n        if stdin.find(A)!= -1:\n            ans = ans + str(A*B)\n        if stdin.find(\"+\")!= -1:\n            ans = ans + \"-\"\n        if stdin.find(B)!= -1:\n            ans = ans + str(A*B)\n        if stdin.find(\"*\")!= -1:\n            ans = ans + \"*\"\n        if stdin.find(\"-\")!= -1:\n            ans = ans + \"-\"\n\n        self.dfs(stdin, A, B, ans)\n\n        return ans"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(')') == 0\nassert solution(')())') == 3\nassert solution('(())') == 0\nassert solution(')('())') == 0\nassert solution(')()())') == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(s) == 2\nassert solution(s.replace('(','')) == 2\nassert solution(s.replace(')','')) == 0\nassert solution(s.replace(')','')) == 2\nassert solution(s.replace(')','')) == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()), 0\nassert solution(input()), 1\nassert solution(input()), 2\nassert solution(input()), 3\nassert solution(input()), 4\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"((()))\") == 1\nassert solution(\"(((()))\") == 2\nassert solution(\"((()(()))\") == 3\nassert solution(\"((((()))\") == 4\nassert solution(\"((((()))\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"(((())))\") == 3\nassert solution(\"((()))\") == 0\nassert solution(\"((()))\") == 1\nassert solution(\"(()())\") == 0\nassert solution(\"((((((())))\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('((()'\nassert solution('(()()')\nassert solution('(()()()'\nassert solution('((()()'\nassert solution('((()()(')\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"(())\") == 0\nassert solution(\"(()(())\") == 1\nassert solution(\"(()(((((((())))()))(((()(()()))))((()(()()()))))((()(()(())()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()(()()()))))((()("
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 3"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nInput\naaacccb\ncba\n\nOutput\n2\n\n\"\"\"\n\nclass Solution:\n    def removeSubstring(self, s: str, t: str) -> int:\n        l = len(s)\n        \n        m = len(t)\n        \n        if l + m < len(s):\n            return 0\n        \n        if l < len(t) and t < m:\n            return 0\n        \n        k = len(t) - 1\n        while m > 0:\n            if s[l - m] == t[k]:\n                l -= m - 1\n                m -= 1\n                k -= 1\n            else:\n                m -= 1\n        return k\n        \n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"bbaba\"), 2\nassert solution(\"bb\"), 2\nassert solution(\"abcde\"), 0\nassert solution(\"asdfasdf\"), 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 2\nassert solution('baaba') == 0\nassert solution('abcde') == 2\nassert solution('asdfasdf') == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 3\nassert solution(input()) == 3\nassert solution(input()) == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"3\"\n\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"3\"\n\n\"\"\""
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin, 2) == 3\nassert solution(stdin, 3) == 3\nassert solution(stdin, 4) == 3\nassert solution(stdin, 5) == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\nassert solution('asdfasdf') == 3\nassert solution('fasd') == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"Failed to solve the problem\"\n'''"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '2'"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 3 3') == '3'\nassert solution('3 1 1') == '1'\nassert solution('1 2 1') == '2'\nassert solution('1 1 1') == '1'\nassert solution('2 1 1') == '1'\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"2 3 4 5\") == \"5\"\nassert solution(\"3 2 4 1\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"\") == \"1\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"2 1 1 1\") == \"2\"\nassert solution(\"2 1 2 2\") == \"3\"\nassert solution(\"1 3 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"2\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 1\nassert solution('4') == 1\nassert solution('5') == 1\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3 6 5 4\") == \"2\"\nassert solution(\"0 1 4 3 4\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 5\") == \"3\"\nassert solution(\"1 9\") == \"5\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\n'''"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"2\"\nprint(\"The answer is\", solution(input))\n-----Test Cases-----\nInput :\n2\n\nOutput :\n2\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10'), \"1 2 3 4 5 6 7 8 9 10\"\n\n\n'''\n"
    }
]