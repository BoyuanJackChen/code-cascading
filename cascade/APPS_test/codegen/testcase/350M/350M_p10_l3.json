[
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(6) == 5\nassert solution(10) == 1\nassert solution(1) == 1\nassert solution(3) == 5\nassert solution(4) == 3\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"17\"\nassert solution(stdin) == \"200\"\nassert solution(stdin) == \"99\""
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '8'\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [1, 2, 3, 4, 6, 7, 8],\n        [1, 2, 3, 4, 5, 6, 7, 8]\n    ]\n) == \"1 8 6\"\n\nassert solution(\n    [\n        [2, 4, 6, 8],\n        [3, 4, 5, 6],\n        [3, 6, 6, 7],\n        [4, 5, 6, 7]\n    ]\n) == \"1 4 8\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 2 3 4 5 6 7 8') == '5 8'\nassert solution('1 2 3 4 6 7 8') == '5 8'\nassert solution('1 2 3 4 5 7 8') == '6 7'\nassert solution('1 2 3 4 4 5 7 8') == '6 7'\nassert solution('1 2 3 4 4 5 6 7 8') == '5 8'\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"1 8 6\"\nassert solution(input()) == \"2 6\"\nassert solution(input()) == \"1 4\"\nassert solution(input()) == \"2 2\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"5\"\nassert solution(\"4 5 6 3\") == \"8\"\nassert solution(\"2 2 1 3 4\") == \"1\"\nassert solution(\"2 2 3\") == \"1\"\nassert solution(\"4 2 3\") == \"3\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"1 8 6\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '1 8 6'\nassert solution(stdin) == '1 8 6'\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5 6') == '5'\nassert solution('1 2 3 4 6 7 8') == '5'\nassert solution('1 2 3 4 7 8 3 6') == '5'\nassert solution('1 2 4 3 7 8 3 6') == '5'\nassert solution('1 2 3 4 7 8 5 6') == '5'\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"20 8\"\nassert solution(stdin) == \"8 2\"\nassert solution(stdin) == \"8 2 4 8\"\nassert solution(stdin) == \"8 2 4 8 6\"\nassert solution(stdin) == \"8 2 4 8 6 1\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin=\"10 2 8 1 2 4 1 20 4 5\"\n) == '20 8'\nassert solution(\n    stdin=\"10 3 2 2 4 3 2 2 3 3 2 2 4 2 5\"\n) == '10 3 2 2 3 2 2 3 2 3 2 2 3 2 3 2 3 2 2 3 2 2 3 2 2 3 2 3 2 2 3 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 3 2 2 3 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4 4 3 2 1\"\n\"\"\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(10, [2, 8, 1, 2, 4, 1, 2, 4, 1, 2]) == 20\nassert solution(10, [1, 1, 2, 4, 1, 2, 3, 2]) == 10\nassert solution(10, [2, 8, 1, 2, 4, 1, 2, 4, 1, 2]) == 10\nassert solution(10, [1, 2, 3, 4, 5]) == 10\nassert solution(10, [2, 4, 5, 1, 5]) == 10\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"10\", \"2 8 1 2 4 1 20 4 5\"]) == \"20 8\"\nassert solution([\"10\", \"2 8 1 2 4 1 20 4 5\", \"20 8\"]) == \"20 8\"\nassert solution([\"10\", \"2 8 1 2 4 1 20 4 5\", \"20 8\", \"20 8\"]) == \"20 8\"\nassert solution([\"10\", \"2 8 1 2 4 1 20 4 5\", \"20 8\", \"20 8\", \"20 8\"]) == \"20 8\"\nassert solution([\"10\", \"2 8 1 2 4 1 20 4 5\", \"20 8\", \"20 8\", \"20 8\", \"20 8\"]) == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == [\"20 8\", \"20 8\", \"20 8\", \"20 8\", \"20 8\", \"20 8\", \"20 8\"]\nassert solution(stdin) == [\"20 8\", \"20 8\", \"20 8\", \"20 8\", \"20 8\", \"20 8\"]\n\n\n-----------------------------------------------------------\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"20 8\"\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"24\"\n\nprint('Example 1:')\nprint('Input : ')\nprint('n = 3, m = 4, k = 2')\nprint('Exception :')\nprint('7')\nprint('Output :')\nprint(str(solution(stdin)))\n\nprint('Example 2:')\nprint('Input : ')\nprint('n = 5, m = 4, k = 1')\nprint('Exception :')\nprint('8')\nprint('Output :')\nprint(str(solution(stdin)))\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '24'\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), 'incorrect solution'"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 24\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1 2 3 4\", \"5 2 2 2\", \"7 1 1 4\", \"3 5 1 2 4\", \"8 4 7 1 2\"]) == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1 2 3 4\", \"5 2 2 2\", \"3 5 1 2 4\", \"1 5 7 1 2\", \"3 8 7 1 2\"]) == \"24\"\nassert solution([\"1 2 3 4\", \"1 5 7 1 2\", \"1 5 7 1 2\", \"1 8 7 1 2\"]) == \"12\"\nassert solution([\"1 2 3 4\", \"1 2 3 4\", \"1 5 7 1 2\", \"1 5 7 1 2\"]) == \"12\"\nassert solution([\"1 2 3 4\", \"1 2 3 4\", \"1 2 3 4\", \"1 5 7 1 2\", \"1 5 7 1 2\"]) == \"12\"\nassert solution([\"1 2 3 4\", \"1 2 3 4\", \"1 2 3 4\", \"1 2 3 4\"]) == \"12\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 4, 3, 7) == 56\n\n\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '24'\n\n\n-----Explanation-----\n\nIn the first example, the optimal answer is $2$ and $4$ in the first row, $5$ and $2$ in the second row and $7$ and $4$ in the third row. The total sum is $2 + 4 + 5 + 2 + 7 + 4 = 24$.\n\nIn the second example, the optimal answer is $24$, since there is a total of 24$ in the third row, only the total sum of all rows is reduced to 24$.\n\nIn the third example, the optimal answer is $24$ since you can observe that the sum is divisible by $k$ and it is maximum.\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '24'\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"LRRR\"\nassert solution(stdin) == \"LLRRRR\"\nassert solution(stdin) == \"RRRLLL\"\nassert solution(stdin) == \"LLLRLRL\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"LL\"\nassert solution(stdin) == \"RR\"\nassert solution(stdin) == \"RRR\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 4\nassert solution(7) == 6\nassert solution(3) == 1\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'LRRR'\nassert solution(stdin) == 'LRRR'\nassert solution(stdin) == 'LRRR'\nassert solution(stdin) == 'LLRRR'\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stderr.STDOUT, stderr.STDERR) == \"4\"\nassert solution(stdin, stderr.STDOUT, stderr.STDERR) == \"LRLRRR\"\nassert solution(stdin, stderr.STDOUT, stderr.STDERR) == \"LRLRRR\"\nassert solution(stderr.STDOUT, stderr.STDERR, stderr.STDOUT) == \"R\"\nassert solution(stdin, stderr.STDOUT, stderr.STDERR, stderr.STDOUT) == \"R\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, [1, 2, 4, 3, 2]) == \"LRRRRR\"\nassert solution(7, [1, 3, 5, 6, 5, 4, 2]) == \"LLRRR\"\n\n\n-----Code-----\n\nfrom itertools import permutations"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2 4 3 2') == '4'\nassert solution('7 5 6 5 4 2') == '6'\nassert solution('3') == 'L'\nassert solution('4') == 'R'\nassert solution('3') == 'L'\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'LRRR'\nassert solution(stdin) == 'LLRRRRRRR'\nassert solution(stdin) == 'LLRRRR'\nassert solution(stdin) == 'LLRR'\nassert solution(stdin) == 'LRR'\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"LRRR\"\nassert solution(stdin) == \"LLRR\"\nassert solution(stdin) == \"LRRR\"\nassert solution(stdin) == \"LRRR\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"[1, 2, 4, 3, 2]\") == \"4\"\nassert solution(\"[1, 2, 4, 3, 2]\") == \"4\"\nassert solution(\"[1, 2, 4, 3, 2]\") == \"4\"\nassert solution(\"[1, 2, 4, 3, 2]\") == \"4\"\nassert solution(\"[1, 2, 4, 3, 2]\") == \"4\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 1\") == 3, \"solution failed\"\nassert solution(\"5 2\") == -1, \"solution failed\"\nassert solution(\"5 3\") == 3, \"solution failed\"\nassert solution(\"5 4\") == 3, \"solution failed\"\nassert solution(\"5 5\") == 3, \"solution failed\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1\") == 3\nassert solution(\"2 2 2 2\") == 3\nassert solution(\"4 4 4 4 4 4 4\") == 3\nassert solution(\"5 5 5 5 5 5 5\") == -1\n\"\"\""
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin=input\n    ) == -1\n\n-----Quick Sort-----\n\nIn a quick sort algorithm, you can perform various operations on the array, by selecting an element that is the smallest element, \nand the next smallest element that is greater than or equal to that element, in the current partition. \nYou can perform the same operation multiple times, in the next partition, if the next smallest element in the current partition is less than the next smallest element in the next partition. \nThus, in a quick sort algorithm, you can perform a quick sort operation on the array.\n\nFor example, given the array: [1, 2, 4, 3, 5, 6, 7, 8, 9, 10], you can perform the following operations:\n\nWe perform three operations. You can perform operation:\n\n1. Add $5$ to $7$.\n2. Subtract $4$ from $7$.\n3. Add $2$ from $7$.\n4. Add $5$ to $8$.\n5. Subtract $4$ from $8$.\n6. Add $2$ from $8$.\n7. Subtract $2$ from $8$.\n8. Subtract $2$ from $8$.\n\nQuick Sort algorithm:\n\nFor the first iteration of the quick sort, you can perform two operations:\n\n1. Add $2$ to $4$.\n2. Subtract $1$ from $4$.\n3. Add $4$ to $8$.\n4. Add $2$ to $8$.\n5. Subtract $2$ from $8$.\n6. Add $2$ to $8$.\n7. Subtract $2$ from $8$.\n8. Subtract $2$ from $8$.\n\nAfter sorting the array, you can now perform the following operations:\n\n1. Add $4$ to $8$.\n2. Subtract $1$ from $8$.\n3. Add $2$ from $8$.\n4. Subtract $1$ from $8$.\n5. Subtract $1$ from $8$.\n6. Add $2$ from $8$.\n7. Subtract $2$ from $8$.\n8. Subtract $2$ from $8$.\n\nGiven the array:\n\n[1, 2, 4, 3, 5, 6, 7, 8, 9, 10],\n\nThe next smallest element is 2.\n\nThe next smallest element is 5.\nThe next smallest element is 3.\nThe next smallest element is 6.\nThe next smallest element is 7.\nThe next smallest element is 8.\nThe next smallest element is 9.\nThe next smallest element is 10.\n\nNow, given a small array, you can find a subset $i$ of the array which is a subset of the elements in the array you just made.\n\nYou will only need to know the subset that you need to add, to add $i$ to the array, so that for each element, you will also need to know the subset which is not the subset of the element you just added.\n\nHere, $i$ is the smallest element in the array, and $i$ must be a subset of the array.\n\nExamples:\n\nInput\narray = [1, 2, 4, 3, 5, 6, 7, 8, 9, 10]\n\nOutput\narray = [1, 2, 4, 3, 5, 6, 7, 8, 9, 10]\n\nExplanation:\n\nWe can perform three operations.\n\n1. Add $2$ to $4$.\n2. Subtract $1$ from $4$.\n3. Add $4$ to $8$.\n4. Add $2$ to $8$.\n5. Subtract $1$ from $8$.\n6. Add $2$ to $8$.\n7. Subtract $1$ from $8$.\n8. Subtract $1$ from $8$.\n9. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $2$ to $8$.\n10. Subtract $2$ from $8$.\n10. Add $"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, [1, 4, 7, 7]) == 3\nassert solution(1, [1, 4, 7, 7]) == -1"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 4 4 7 4 1\") == 3\nassert solution(\"5 2 7 4 1\") == 3\nassert solution(\"6 4 4 7 4 1\") == 3\nassert solution(\"6 2 2 5 2 5\") == -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == 7\n\n\n\nInput\n6\n1 4 4 7 4 1\n\nOutput\n3\n\nInput\n5\n2 2 5 2 5\n\nOutput\n3\n\nInput\n4\n1 3 3 7\n\nOutput\n-1\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2 4 4\") == \"YES\"\n\n\nassert solution(\"3 3 7 5\") == \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"The function solution must be implemented!\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 3 4 5') == 'YES'\nassert solution('3 3 7 5') == 'NO'\n\nassert solution('5 2 10 5') == 'YES'\nassert solution('3 3 7 5') == 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n1 <= x_1, y_1 <= 10^6\n1 <= x_2, y_2 <= 10^6\n1 <= x_3, y_3 <= 10^6\n1 <= x_4, y_4 <= 10^6\n1 <= x_5, y_5 <= 10^6\n1 <= x_6, y_6 <= 10^6\n\n------Time complexity-------\nO(N)\nO(N)\n\n\"\"\"\nimport math"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'NO'\n\n\n-----Code-----\nimport math\nimport sys"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0 0 4 6\") == \"YES\"\nassert solution(\"0 0 7 4\") == \"NO\"\nassert solution(\"3 1 5 5\") == \"YES\"\nassert solution(\"3 1 7 6\") == \"NO\"\nassert solution(\"5 2 10 5\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 2 4 4') == 'NO'\nassert solution('3 3 7 5') == 'YES'\nassert solution('5 2 10 5') == 'YES'\nassert solution('0 0 4 6') == 'YES'\nassert solution('0 0 7 4') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2 4 4\") == \"YES\"\nassert solution(\"3 3 7 5\") == \"NO\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 4 6\") == \"NO\"\nassert solution(\"0 0 7 4\") == \"YES\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 20"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1099\") == 2\n\n\n-----Constraints-----\n1 <= n <= 10^9\n\n[execution time limit] 4 seconds (py3)\n\n[input] string\n\nA string that is already in the standard input format, in which 1 has been replaced by $1$.\n\n\n[output] string\n\nThe number of different numbers that are reachable from $n$.\n\n[constraints]\n\n1 <= n <= 10^9\n\n\n-----Variables-----\n\nYou are given a number $n$; your task is to count how many different numbers are reachable from $n$.\n\n\n-----Constantes-----\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n\n\n-----Output-----\n\nPrint one integer: the number of different numbers that are reachable from $n$.\n\n\n-----Examples-----\nInput\n4\n\nOutput\n2\n\n\n-----Note-----\n\nThe numbers that are reachable from $4$ are:\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$.\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(123) == 1\nassert solution(9989) == 2\nassert solution(99999) == 3\n\n\n\n\n'''\n\nimport math"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1098) == 20\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n0 <= stdin[i] <= 10^9\n\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1098') == 19\nassert solution('10098') == 20\nassert solution('1099') == 19\nassert solution('1') == 1\nassert solution('100000') == 9\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1098) == 19\nassert solution(1099) == 20\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\nn = 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"Your code has failed\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution) == 10"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5 3 1 2 4'\nassert solution(stdin) == '7 3 2 1 4'\nassert solution(stdin) == '7 4 2 3 6 5 1'\nassert solution(stdin) == '7 4 2 3 6 5 1'\nassert solution(stdin) == '7 4 2 3 6 5 1'\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5 4 0 2 4\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= f_i <= n\n\nmemory limit: 32 MB\ntime limit: 60 seconds\n\n----------------------------------------------------------------------------\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 0 0 0 0\") == \"1 0 0 0 0\", \"1 0 0 0 0\"\nassert solution(\"1 0 0 0 1\") == \"1 0 0 0 1\", \"1 0 0 0 1\"\nassert solution(\"1 0 0 1 0\") == \"1 0 0 1 0\", \"1 0 0 1 0\"\nassert solution(\"1 0 1 0 0\") == \"1 0 1 0 0\", \"1 0 1 0 0\"\nassert solution(\"1 0 1 0 1\") == \"1 0 1 1 0\", \"1 0 1 1 0\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('7\\n7\\n7\\n7') == '7\\n7\\n7\\n7\\n7'\nassert solution('7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7') == '7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7'\nassert solution('7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7') == '7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7'\nassert solution('7\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '7\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0'\nassert solution('7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7') == '7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7'"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5 3 1 2 4\"\nassert solution(stdin) == \"7 3 2 1 4\"\nassert solution(stdin) == \"7 4 2 3 6 5 1\"\nassert solution(stdin) == \"7 4 2 3 6 5 1\"\nassert solution(stdin) == \"7 4 2 3 6 5 1\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3 3 1 4'\nassert solution(stdin) == '2 2 1 0'\nassert solution(stdin) == '3 3 1 1'\nassert solution(stdin) == '1 3 2 1'\nassert solution(stdin) == '1 3 2 1'\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 1 0 0 0') == '5'\nassert solution('7') == '7'\nassert solution('5') == '3'\nassert solution('7') == '1'\nassert solution('5 1 0 0 0') == '2'\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5') == '5'\nassert solution('7') == '7'\nassert solution('5') == '5'\nassert solution('7') == '7'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1 2 3 4 5 6'\nassert solution(stdin) == '3 2 1 4 5 6'\nassert solution(stdin) == '7 3 2 1 4 5 6'\nassert solution(stdin) == '7 4 2 3 6 5 1'\nassert solution(stdin) == '7 4 3 2 1 4 5 6'\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2\\n2 1\\n3 1\\n4 1\\n5 2\") == \"YES\"\nassert solution(\"5 2\\n2 1\\n1 2\\n2 1\\n1 1\\n2 2\\n3 3\") == \"YES\"\nassert solution(\"5 2\\n1 1\\n2 2\\n3 3\") == \"YES\"\nassert solution(\"5 3\\n3 1\\n2 2\\n3 1\") == \"NO\"\nassert solution(\"5 3\\n2 1\\n3 2\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"YES\"\nassert solution(\"5 3\") == \"YES\"\nassert solution(\"1 2 1 2 3\") == \"NO\"\nassert solution(\"2 3\") == \"NO\"\nassert solution(\"4 2\") == \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"2 3\") == \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 2 3') == 'YES', '1 2 3'\nassert solution('1 2 3 4 5 6 7 8 9') == 'YES', '1 2 3 4 5 6 7 8 9'\nassert solution('1 2 3 4 5 6 7 8 9 10') == 'NO', '1 2 3 4 5 6 7 8 9 10'"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 1 2 3') == 'YES'\nassert solution('2 3 4 5') == 'YES'\nassert solution('1 1 1 1') == 'NO'\nassert solution('2 2 2 2') == 'YES'\nassert solution('1 2 3 4 5') == 'YES'\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('4 2') == 'YES'\nassert solution('5 2') == 'YES'\nassert solution('5 3') == 'NO'\nassert solution('5 4') == 'NO'\nassert solution('5 5') == 'NO'"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 5\nassert solution(stdin) == 1"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n\nprint(\"Example 1:\")\nprint(\"Input : \" + str(stdin))\nprint(\"Exception : \" + str(2))\nprint(\"Output : \" + str(3))\nprint(\"Explanation : \" + str(2) + \" - \" + str(3) + \" = 3\")\n\nprint(\"Example 2:\")\nprint(\"Input : \" + str(stdin))\nprint(\"Exception : \" + str(10))\nprint(\"Output : \" + str(12))\nprint(\"Explanation : \" + str(10) + \" - \" + str(12) + \" = 12\")\n\nprint(\"Example 3:\")\nprint(\"Input : \" + str(stdin))\nprint(\"Exception : \" + str(100000))\nprint(\"Output : \" + str(12000))\nprint(\"Explanation : \" + str(100000) + \" - \" + str(12000) + \" = 12000\")"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\n\n\n-----Constraints-----\n0 < n, x, y < n\n\n0 < x < 10^5\n0 < y < 10^5\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nGuaranteed constraints:\n1 \u2264 n \u2264 10^5\n1 \u2264 x \u2264 10^5\n1 \u2264 y \u2264 10^5\n\n[output] integer\n\nThe minimum number of operations you should perform to obtain the number that has remainder $10^y$ modulo $10^x$.\n\"\"\"\nclass Solution:\n    def findModInverse(self, a: int, m: int) -> int:\n        # brute force\n        # a^(m/2) = 1, since a^(m/2) = 1\n        #\n        # 2^(m/2) = 1, since 2^(m/2) = 1\n        #\n        # a^(m/2) = a^(m/2 - 1)\n        #\n        # a^(m/2 - 1) = 1 (a^(m/2 - 1) = 1)\n        #\n        # a^(m/2 - 1) = a\n        #\n        # 2^(m/2 - 1) = 2^(m/2)\n        #\n        # 2^(m/2) = 2^(m/2 - 1)\n        #\n        # if a = 1, then a^(m/2) = 1, since a^(m/2) = 1\n        # if a = 2, then a^(m/2) = 2, since a^(m/2) = 2\n        #\n        # 2^(m/2) = 1\n        #\n        # a^(m/2) = a^(m/2 - 1) = a^(m/2 - 1)\n        #\n        # a^(m/2 - 1) = 1 (a^(m/2 - 1) = 1)\n        #\n        # a^(m/2) = a^(m/2 - 1)\n        #\n        # 2^(m/2) = 1\n        #\n        # a^(m/2) = 2^(m/2)\n        #\n        # 2^(m/2) = 1\n        #\n        # a^(m/2) = a^(m/2 - 1) = a^(m/2 - 1)\n        #\n        # a^(m/2 - 1) = 1 (a^(m/2 - 1) = 1)\n        #\n        # a^(m/2) = 2^(m/2)\n        #\n        # a^(m/2) = 2^(m/2 - 1)\n        #\n        # 2^(m/2) = 1\n        #\n        # a^(m/2) = a^(m/2 - 1) = a^(m/2 - 1)\n        #\n        # a^(m/2 - 1) = 1 (a^(m/2 - 1) = 1)\n        #\n        # a^(m/2) = a^(m/2 - 1)\n        #\n        # if a = 2, then a^(m/2) = 1, since a^(m/2) = 1\n        # if a = 1, then a^(m/2) = 2, since a^(m/2) = 2\n        #\n        #\n        # a^(m/2) = a^(m/2 - 1) = a^(m/2 - 1)\n        #\n        # a^(m/2 - 1) = 1 (a^(m/2 - 1) = 1)\n        #\n        # a^(m/2) = 1\n        #\n        # a^(m/2) = 2^(m/2)\n        #\n        # a^(m/2) = 2^(m/2 - 1)\n        #\n        # 2^(m/2) = 1\n        #\n        # a^(m/2) = a^(m/2 - 1) = a^(m/2 - 1)\n        #\n        # a^(m/2) = 1 (a^(m/2) = 1)\n        #\n        # a^(m/2) = 1\n        #\n        # a^(m/2) = 2^(m/2)\n        #\n        # a^(m/2) = 2^(m/2 - 1)\n        #\n        # 2^(m/2) = 1\n        #\n        # a^(m/2) = a^(m/2 - 1) = a^(m/2 - 1)\n        #\n        # a^(m/2) = 1 (a^(m/2) = 1)\n        #\n        # a^(m/2) = 1\n        #\n        # a^(m/2) = 2^(m/2)\n        #\n        # a^(m/2) = 2^(m/2 - 1)\n        #\n        # 2^(m/2) = 1\n        #\n        # a^(m/2) = a^(m/2 - 1) = a^(m/2 - 1)\n        #\n        # a^(m/2) = 1 (a^(m/2) = 1)\n        #\n        # a^(m/2) = 1\n        #\n        # a^(m/2) = 2^(m/2)\n        #\n        # a^(m/2) = 2^(m/2 - 1)\n        #\n        # 2^(m/2) = 1\n        #\n        # a^(m/2) = a^(m/2 - 1) = a^(m/2 - 1)\n        #\n        # a^(m/2) = 1 (a^(m/2) = 1)\n        #\n        # a^(m/2) = 1\n        #\n        # a^(m/2) = 2^(m/2)\n        #\n        # a^(m/2) = 2^(m/2 - 1)\n        #\n        # 2^(m/2) = 1\n        #\n        # a^(m/2) = a^(m/2 - 1) = a^(m/2 - 1)\n        #\n        # a^(m/2) = 1 (a^(m/2) = 1)\n        #\n        # a^(m/2) = 1\n        #\n        # a^(m"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 3\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()), \"There is a mistake in the input.\"\nassert solution(input()), \"There is a mistake in the input.\"\nassert solution(input()), \"There is a mistake in the input.\"\nassert solution(input()), \"There is a mistake in the input.\"\nassert solution(input()), \"There is a mistake in the input.\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"1 2 1\") == \"YES\"\nassert solution(\"1 1 2\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3) == \"YES\"\nassert solution(4) == \"YES\"\nassert solution(5) == \"NO\"\nassert solution(6) == \"NO\"\nassert solution(7) == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1\", \"2\", \"1\"]) == \"YES\"\nassert solution([\"1\", \"2\", \"1\", \"2\", \"1\", \"2\", \"1\"]) == \"NO\"\nassert solution([\"1\", \"1\", \"1\"]) == \"YES\"\nassert solution([\"1\", \"2\", \"1\", \"2\", \"1\", \"2\", \"1\"]) == \"NO\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == \"YES\"\nassert solution(3) == \"YES\"\nassert solution(3) == \"YES\"\nassert solution(3) == \"NO\"\nassert solution(3) == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(test_case) == \"YES\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"5\"\n) == \"YES\"\nassert solution(\n    \"4\"\n) == \"NO\"\nassert solution(\n    \"10\"\n) == \"NO\"\nassert solution(\n    \"3\"\n) == \"NO\"\nassert solution(\n    \"5\"\n) == \"YES\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 55, \"solution is wrong\"\nassert solution(input()) == 5, \"solution is wrong\"\nassert solution(input()) == 8, \"solution is wrong\"\nassert solution(input()) == 7, \"solution is wrong\"\nassert solution(input()) == 0, \"solution is wrong\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"33\""
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1557\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 99999\nassert solution(stdin) == 9999\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin: str,\n    a: int = 1337,\n    f: int = 1\n) == 1553\n\n\n=======\n\nInput\n5\n1\n1 1 1 1 1 1 1 1 1\n\nOutput\n33\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1557\"\nassert solution(\"5\") == \"99999\""
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1557'\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1557', 'incorrect result'\nassert solution(stdin) == '99999', 'incorrect result'\nassert solution(stdin) == '33', 'incorrect result'\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"33\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 99, \"Failed\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '1 1 3'\nassert solution(input()) == '102'\nassert solution(input()) == '114 228 456'\nassert solution(input()) == '4'\nassert solution(input()) == '4 8 16'\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution == 1, \"solution() failed\"\nassert solution == 1, \"solution() failed\"\nassert solution == 1, \"solution() failed\"\nassert solution == 1, \"solution() failed\"\nassert solution == 1, \"solution() failed\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"123 321 456\"\nassert solution(stdin) == \"5 10 15\"\nassert solution(stdin) == \"15 18 21\"\nassert solution(stdin) == \"100 100 101\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"1000\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"101\"\n\n>>> Solution 2\n5\n1 1 3\n4 8 16\n6 10 15\n2 19 38\n3 19 38\n7\n1 22 22\n6\n1 19 38\n8\n6 24 48\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2, 5) == 3\nassert solution(3, 9) == 1\nassert solution(4, 100) == 2\nassert solution(5, 100) == 1\nassert solution(6, 100) == 2\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"5 12 3\") == \"1 3 4 5 6 7 8 9 10 11 12\"\nassert solution(\n    \"5 15 10\") == \"5 1 3 4 5 6 7 8 9 10 11 12\"\nassert solution(\n    \"5 6 9\") == \"5 6 5 6\"\nassert solution(\n    \"1 1 2 1 4 6 5 9 10 12\") == \"9 12 8\"\nassert solution(\n    \"3 11 9 17\") == \"11 17 7\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == inp\nassert solution(inp) == inp\nassert solution(inp) == inp\nassert solution(inp) == inp\nassert solution(inp) == inp\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1 1 3\"\nassert solution(\"1 2 3\") == \"1 1 3\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 168 169 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 194 195 196 196 198 198 199 200 201 201 202 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 229 230 231 231 232 233 234 235 236 236 237 238 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input=\n    [\n        [\"1\", \"1\", \"1\", \"1\", \"1\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\"],\n        [\"1\", \"3\", \"7\", \"10\", \"100\"]\n    ]) == \"2\"\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"n = 2\")\nprint(\"a = [1, 2, 3, 4, 5]\")\nprint(\"Output : \")\nprint(str(solution(\n    input=\n    [\n        [\"1\", \"2\", \"3\", \"4\", \"5\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\"]\n    ])))\nprint()\n\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"n = 5\")\nprint(\"a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\")\nprint(\"Output : \")\nprint(str(solution(\n    input=\n    [\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n        [\"1\", \"2\","
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"1 3 7\") == \"1\"\nassert solution(\"2 100000\") == \"2\"\nassert solution(\"1 100000\") == \"1\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 1 3 7\") == \"2\"\nassert solution(\"2 3 7\") == \"0\"\nassert solution(\"2 100000\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 8 7\") == \"2\"\nassert solution(\"2 5 10\") == \"1\"\nassert solution(\"4 4 6\") == \"0\""
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2 3 1') == 0\nassert solution('1 2 1') == 2\nassert solution('1 5 1') == -1\n\nassert solution('3 7 2') == 2\nassert solution('3 8 9 1') == 3\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 4\") == 2\nassert solution(\"1 4\") == 4\nassert solution(\"1 1\") == 1\nassert solution(\"1 3 2\") == 2"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3 4\") == \"3 3\"\nassert solution(\"1 3 1\") == \"1 3 2\"\nassert solution(\"1 5 1\") == \"1 1 5 1\"\nassert solution(\"1 2 1\") == \"2 1 1\"\nassert solution(\"0 1 1\") == \"1 1\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"11\") == \"1 2 1\"\nassert solution(\"10 4 4\") == \"2 2 2\"\nassert solution(\"2 1 2\") == \"1 1 1\"\nassert solution(\"8 1 5\") == \"1 2 2\"\nassert solution(\"1 1 1\") == \"1 1 1\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('10 3') == '1 2 3 0 3 4 4 4'\nassert solution('3 7') == '2 2'\nassert solution('3 2') == '2'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 3\") == -1\nassert solution(\"3 2\") == -1\nassert solution(\"4 7 2\") == -1\nassert solution(\"5\") == -1\nassert solution(\"10 3\") == 2\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 1') == '1 1'\nassert solution('1 1 2') == '1 1'\nassert solution('1 1 2 3') == '1 1'\nassert solution('1 2 1') == '0 1'\nassert solution('1 2 1') == '1'\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == 2\nassert solution(\"2 3\") == 0\nassert solution(\"1 5 1\") == -1\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 3\") == \"0\"\nassert solution(\"1 4\") == \"0\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"3 7\") == \"1\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == str(len(stdin))\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n\nTest Two"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7\n\nassert solution(stdin) == -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(120, 51840) == 7\nassert solution(42, 42) == 0\nassert solution(48, 72) == -1"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(120, 51840) == 7\nassert solution(42, 42) == 0\nassert solution(48, 72) == -1\nassert solution(24, 720) == -1\nassert solution(12960, 25920) == -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"120 51840\") == 7\n\nassert solution(\"42 42\") == -1\n\nassert solution(\"48 72\") == 0\n\nassert solution(\"48 72\") == 0\n\nassert solution(\"120 51840\") == 7\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"120 51840\") == 7\nassert solution(\"42 42\") == 0\nassert solution(\"48 72\") == -1\nassert solution(\"48 72\") == -1\nassert solution(\"48 72\") == -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('120 51840') == 7\nassert solution('42 42') == -1\nassert solution('48 72') == 0\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"ababababa\"\nassert solution(input().replace(\"a\", \"b\")) == \"ababababa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"aaba\") == \"ababababa\", \"Should be ababababababa\"\nassert solution(\"catcat\") == \"catcat\", \"Should be catcat\"\nassert solution(\"ba\") == \"b\", \"Should be b\""
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('aaa') == 'aaacct', 'expected aaacct got {}'.format(solution('aaa'))\nassert solution('aaaa') == 'aaaa', 'expected aaaaa got {}'.format(solution('aaaa'))\nassert solution('aaaaaa') == 'aaaaaaa', 'expected aaaaaaa got {}'.format(solution('aaaaaa'))\nassert solution('aaaaaaaaa') == 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('aba') == 'ababababa'\nassert solution('cat') == 'catcat'\nassert solution('catcat') == 'catcat'\nassert solution('abc') == 'abc'\nassert solution('abcabc') == 'abc'\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"a\", \"b\", \"c\", \"a\"]) == \"c\"\nassert solution([\"a\", \"a\", \"b\", \"a\"]) == \"a\"\nassert solution([\"a\", \"b\", \"a\", \"b\"]) == \"b\""
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"No solution\""
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'abcdefghijklmnopqrstuvwxyz', \"solution\"\n\n\n-----Constraints-----\n1 <= n, k <= 50\nAll the characters in string $s$ are lowercase Latin letters.\n\nTime Limit: 1 sec\n\nCopyright 2020 PyTorchLightning\n\"\"\"\n\nfrom typing import Optional, List, Tuple\n\nfrom pytorch_lightning.utilities.apply_func import apply_to_collection"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('aba', 3, 4) == 'ababababa'\nassert solution('cat', 3, 2) == 'catcat'\nassert solution('catcat', 3, 2) == 'catcat'\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"ababababa\"\nassert solution(input()) == \"ababababa\"\n\n\n-----Constraints-----\n1 <= n <= 50\n1 <= k <= 50\n\nTime Limit: 1 second\nSpace Limit: 1 GB\n\n\n-----Alternatives-----\nOptimize the initial implementation.\n\nTime: O(k + n)\nSpace: O(n)\n\nThis solution is not guaranteed to give a unique answer.\n\"\"\"\nfrom collections import Counter\n\n\nclass Solution:\n    def minSubString(self, s: str, l: int, r: int) -> int:\n        if l == r:\n            return len(s)\n        elif r - l == 1:\n            return r - l\n\n        min_len = 0\n        sub_dict = Counter(s[l:r + 1])\n\n        for i in range(l, r):\n            sub_len = self.minSubString(s, l, i)\n            if sub_len == 0:\n                return i - l + 1\n            if sub_len < min_len:\n                min_len = sub_len\n        return min_len\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"aabba\", 1) == \"ababababa\"\nassert solution(\"aabbb\", 2) == \"abababababababab\"\nassert solution(\"aaaa\", 2) == \"aaaaaaaaaaa\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"0\"\nassert solution([\"5\", \"6\", \"7\", \"8\"]) == \"1\"\nassert solution([\"8\", \"9\", \"10\", \"11\"]) == \"0\"\n\nassert solution([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"1\"\nassert solution([\"5\", \"8\", \"9\", \"10\", \"11\"]) == \"1\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['2 5 1 2 2', '1 4 3', '2 4 2']) == '1 4 0'\nassert solution(['2 1 2 4 3', '8 3 5 2', '2 1 4']) == '0'\nassert solution(['2 1 2 4 3', '8 3 5 2', '2 1 4']) == '0 1 2 4 5'\nassert solution(['1 1 1', '2 1 2', '2 1 2']) == '2'\nassert solution(['1 1 1', '2 1 2', '2 1 2']) == '0'\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3,5,1,2) == 2\nassert solution(4,8,3,5) == 0\nassert solution(4,3,2,1) == 2\n\n[\uc2dc\uac04 \uc81c\ud55c    \uba54\ubaa8\ub9ac \uc81c\ud55c    \uc81c\ucd9c    \uc815\ub2f5    \ub9de\uc740 \uc0ac\ub78c    \uc815\ub2f5 \ube44\uc728]\n1\ucd08    128 MB    21064    28202    23996    69.05%\n\ubb38\uc81c\n\uc11c\ub85c \ub2e4\ub978 \uc815\ub82c\ub41c \uc815\uc218\ub97c \uc81c\uacf5\ud558\ub294 \uc774\uc9c4 \ud0d0\uc0c9\uc744 \uad6c\ud604\ud558\uc600\ub2e4. \uc774 \uc54c\uace0\ub9ac\uc998\uc740 \uae30\uc874 \uc815\uc218\uc758 \uacf5\ubc31\ubb38\uc790\ub97c \uba87 \uac1c \uc81c\uc678\ud55c \ubb38\uc790\ub97c \uc81c\uc678\ud55c \uac83\uc744 \uc810\uc218\ub85c \ub098\ud0c0\ub0b8\ub2e4. \uadf8\ub9ac\uace0 \uc815\uc218\ub97c \uc81c\uacf5\ud558\ub294 \uc774\uc9c4 \ud0d0\uc0c9\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n\n\uc815\uc218 $n$\uac00 \uc8fc\uc5b4\uc84c\uc744 \ub54c, $n$\ubc88\uc9f8 \uc218\ub97c \uad6c\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc2dc\uc624.\n\n\uc785\ub825\n\uccab\uc9f8 \uc904\uc5d0 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc758 \uac1c\uc218 $t$\uac00 \uc8fc\uc5b4\uc9c4\ub2e4.\n\n\ub458\uc9f8 \uc904\ubd80\ud130 \ud55c \uc904\uae4c\uc9c0 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc758 \uccab\uc9f8 \uc904\uc5d0 \uc785\ub825\uc73c\ub85c \uc8fc\uc5b4\uc9c4\ub2e4. \uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc758 \uccab \uc904\uc5d0\ub294 10,000\uc774\ud558\uc758 \uc815\uc218 $n$\uac00 \uc8fc\uc5b4\uc9c4\ub2e4.\n\n\ucd9c\ub825\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc5d0 \ub300\ud574 \uc815\uc218\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\uc608\uc81c \uc785\ub825 1 \n5\n2 1 2 4 3\n\uc608\uc81c \ucd9c\ub825 1 \n1\n3\n2\n\uc608\uc81c \uc785\ub825 2 \n5\n2 1 2 2 3 4\n\uc608\uc81c \ucd9c\ub825 2 \n4\n\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5') == '3'\nassert solution('4') == '1'\nassert solution('5') == '0'\nassert solution('4') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"2\", \"2\", \"2\", \"2\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"8\", \"8\", \"8\", \"8\", \"8\"]) == \"0\"\nassert solution([\"5\", \"5\", \"5\", \"5\", \"5\"]) == \"0\"\nassert solution([\"1\", \"1\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\"]) == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 3\nassert solution(4) == 0\nassert solution(5) == 4\nassert solution(0) == 0\nassert solution(2) == 2\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input(\"5\")) == \"0\"\nassert solution(input(\"5 1 2 2\")) == \"0\"\nassert solution(input(\"4 1 5\")) == \"0\"\nassert solution(input(\"4 3 5 2\")) == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"asdfasdfasdfasd\") == \"4\"\nassert solution(\"asdasdasdasdasd\") == \"0\"\nassert solution(\"aabaaaa\") == -1\nassert solution(\"asdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasd"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 233\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 233\n'''"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '-1'\n\n-----Constraints-----\n0 < n, k < 1000\n\n-----Time Limit Exceeded-----\nTime limit exceeded\n\n-----Example Execution-----\nExample 1:\n\nInput:\n2\n4 3\nasd\n\nOutput:\n0\n\nExample 2:\n\nInput:\n1\n1 2\nasd\n\nOutput:\n-1\n\n\n-----My Submission-----\nTime Limit Exceeded\nProblem:\n\nThe length of the string $s$ is $n$, and the size of the set $S$ is $k$.\nThere are $S$ = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" }.\nThe set $S$ contains no duplicate characters.\n\nThe number of moves you need to take to get to the last position of each character is $|t|$.\n\nThe cost of the total move to get to the last position of each character is $|t|$.\n\nThe elements of the set $S$ are all subsets of the set $S$ = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" }.\n\nHere, there are 2 moves to get to the last position of each character:\n\n1. \"asd\" -> \"a\" -> \"d\" -> \"s\" -> \"d\" -> \"a\" -> \"d\" -> \"a\" -> \"d\" -> \"d\" -> \"a\" -> \"a\" -> \"a\" -> \"d\" -> \"d\" -> \"a\" -> \"a\" -> \"d\" -> \"a\" -> \"d\" -> \"a\" -> \"d\" -> \"a\" -> \"d\" -> \"a\" -> \"d\" -> \"a\" -> \"a\" -> \"d\" -> \"a\" -> \"d\" -> \"a\" -> \"d\" -> \"a\" -> \"d\" -> \"a\" -> \"d\" -> \"a\" -> \"d\" -> \"d\" -> \"a\" -> \"d\" -> \"d\" -> \"a\" -> \"d\" -> \"a\" -> \"d\" -> \"a\" -> \"d\" -> \"a\" -> \"d\" -> \"d\" -> \"a\" -> \"d\" -> \"a\" -> \"d\" -> \"a\" -> \"d\" -> \"d\" -> \"d\" -> \"a\" -> \"d\" -> \"d\" -> \"a\" -> \"d\" -> \"d\" -> \"a\" -> \"d\" -> \"d\" -> \"d\" -> \"a\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"a\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \"d\" -> \""
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"asdf\") == -1\nassert solution(\"aaaaa\") == 233"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 233\nassert solution(stdin) == -1\nassert solution(stdin) == 233"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 233\n\n###"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 233"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 233\nassert solution(stdin) == -1\n\n\"\"\"\n\nimport collections\n\nclass Solution:\n    def mincostToMakeSet(self, costs: List[List[int]]) -> int:\n        \n        def backtrack(costs, i):\n            \n            if len(costs) == i:\n                return 0\n            \n            min_cost = float('inf')\n            for j in range(len(costs)):\n                j_cost = costs[j]\n                if j_cost < costs[i]:\n                    min_cost = min(min_cost, backtrack(costs, i) + j_cost)\n            \n            return min_cost\n\n        n, k = len(costs), len(costs[0])\n        \n        if n < k:\n            return -1\n        \n        return backtrack(costs, 0)\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 233\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\nassert solution(stdin) == \"NO\"\n\nInput\n4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 3\n4 1\n\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n\n\n\n-----Constraints-----\n1 <= stdin.length <= 1e6\n\n0 <= n <= 2^5\n\n1 <= m <= n - 1\n\n2^5 \\le n(n-1) \\le 2^5\n\n2^5 \\le m(n-1) \\le 2^5\n\n2^5 \\le n(n-1) \\le 2^5\n\n1 \\le D \\le n\n\nstdin has the following format:\n\n0, 1, 2\n\nwhere $0$ represents the index of the first vertex and $1$ represents the index of the second vertex.\n\n------IMPORTANT------\nThe following code may be used for a better understanding of the constraints:\n\nConstraints\n1 <= stdin.length <= 1e6\n\nstdin has the following format:\n\n0, 1, 2\n\nwhere $0$ represents the index of the first vertex and $1$ represents the index of the second vertex.\n\n------REMARK------\nFor more details on input/output, please refer to the Resources tab.\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 2\n1 3\n1 4\n2 3\n3 4\n\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n1 2\n1 3\n1 4\n2 3\n3 4\n\n\"\"\") == \"NO\"\n\nInput\n4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput\nNO\n\n\n\n-----Time complexity-----\nThe time complexity of the following algorithm is O(2^n).\n\nThe time complexity of the solution is O(n + 2^(n-2)).\n\nThe time complexity of the solution is O(n).\n\nIn other words, O(n) space complexity.\n\n\n-----Algorithm-----\n\nThe time complexity of the algorithm is O(n).\n\nThe algorithm itself is O(n) space complexity.\n\nIn other words, O(n).\n\nThis algorithm is not used as a basis for any algorithm. It is used for tests.\n\n\"\"\"\n\n\n\n'''"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\"\"4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n\n\"\"\") == \"YES\"\nassert solution(\"\"\"4 4 3\n1 2\n1 3\n1 4\n2 3\n3 4\n\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 3 1\") == \"YES\"\nassert solution(\"2 3 1\") == \"NO\"\nassert solution(\"1 3 1\") == \"NO\"\nassert solution(\"1 4 3\") == \"YES\"\nassert solution(\"1 4 3\") == \"YES\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10:30\"\nassert solution(stdin) == \"11:11\"\nassert solution(stdin) == \"00:00\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '00:30'\n\nassert solution(stdin) == '00:00'\n\nassert solution(stdin) == '01:00'\n\nassert solution(stdin) == '02:00'\n\nassert solution(stdin) == '11:00'"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"10:30\"\nassert solution(stdin) == \"11:11\"\nassert solution(stdin) == \"01:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"03:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:00\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"02:02\"\nassert solution(\"01:01\") == \"01:01\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"01:02\") == \"02:02\"\nassert solution(\"11:11\") == \"01:11\"\nassert solution(\"01:03\") == \"03:03\"\nassert solution(\"01:04\") == \"04:04\"\nassert solution(\"01:05\") == \"05:05\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '10:30'\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"12:00\"\nassert solution(stdin) == \"13:00\"\nassert solution(stdin) == \"14:00\"\nassert solution(stdin) == \"14:23\"\nassert solution(stdin) == \"13:00\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:00') == '11:30'\nassert solution('01:02') == '01:02'\nassert solution('03:02') == '03:02'\n\n\n-----Constraints-----\n1 <= h_1, h_2 <= 23, 0 <= m_1 <= 59, m_2 <= 59\n\nTime Limit: 1 sec\n\nSample Input 1:\n\nInput\n10:00\n11:00\n\nSample Output 1:\n\n10:30\n11:30\n\n-----Constraints-----\n1 <= h_1, h_2 <= 23, 0 <= m_1 <= 59, m_2 <= 59\n\nTime Limit: 1 sec\n\nSample Input 2:\n\nInput\n11:10\n11:12\n\nSample Output 2:\n\n11:11\n11:12\nassert solution('10:00') == '10:30'\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"10:00\", \"10:00\", \"00:00\"]) == \"00:30\"\nassert solution([\"01:02\", \"01:02\", \"00:00\"]) == \"02:02\"\nassert solution([\"01:02\", \"02:02\", \"00:00\"]) == \"02:02\"\nassert solution([\"00:01\", \"00:01\", \"00:01\", \"01:01\"]) == \"01:01\"\nassert solution([\"01:01\", \"01:01\", \"01:01\", \"01:01\"]) == \"01:01\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"10\", \"20\"]) == \"2\"\nassert solution([\"1\", \"3\"]) == \"1\"\nassert solution([\"4\", \"5\"]) == \"0\"\nassert solution([\"6\", \"7\"]) == \"1\"\nassert solution([\"10\", \"20\"]) == \"5\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2) == 1\nassert solution(4) == 2\nassert solution(27) == 5\nassert solution(42) == 6\nassert solution(27) == 1\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2) == 1\nassert solution(4) == 2\nassert solution(27) == 5\nassert solution(42) == 6\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"22\") == \"22\"\nassert solution(\"0\") == \"0\"\nassert solution(\"64\") == \"64\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(12) == 2\nassert solution(16) == 5\nassert solution(24) == 6\nassert solution(4) == 1"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(str(2)) == \"1\"\nassert solution(str(4)) == \"2\"\nassert solution(str(27)) == \"5\"\nassert solution(str(42)) == \"6\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2\"\n) == \"1\"\nassert solution(\n    \"4\"\n) == \"2\"\nassert solution(\n    \"27\"\n) == \"5\"\nassert solution(\n    \"42\"\n) == \"6\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4, [\"1 3\", \"2 6\", \"0 4\", \"1 20\", \"0 4\", \"3 3\", \"0 4\", \"1 20\"]) == \"1\"\nassert solution(5, [\"2 6\", \"1 5\", \"0 4\", \"1 20\", \"0 4\", \"1 20\"]) == \"2\"\nassert solution(3, [\"1 3\", \"0 4\", \"1 20\"]) == \"0\"\nassert solution(2, [\"1 3\", \"0 4\", \"1 20\", \"0 4\"]) == \"3\"\nassert solution(1, [\"1 3\", \"0 4\", \"1 20\", \"0 4\"]) == \"3\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 7\n\nPrints\n\n7\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 2 3 4 5 6 7 8 9 10\") == \"0\"\nassert solution(\"1 3 2 4 10 20 2 6 3 5 1\") == \"1\"\nassert solution(\"1 2 1 3 4 5\") == \"0\"\nassert solution(\"1 2 4 3 5\") == \"0\"\nassert solution(\"1 2 4 3 5 6\") == \"0\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, 5) == 1, \"The solution for the first example should be 1\"\nassert solution(5, 5) == 2, \"The solution for the first example should be 2\"\nassert solution(5, 5) == 0, \"The solution for the first example should be 0\"\nassert solution(5, 5) == 7, \"The solution for the first example should be 7\"\nassert solution(5, 5) == \"No intersection between segments\", \"The solution for the first example should be 'No intersection between segments' (the length of the intersection is 0)\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5') == 0,'solution()'\nassert solution('4') == 1,'solution()'\nassert solution('2') == 1,'solution()'\nassert solution('3') == 1,'solution()'\nassert solution('1') == 0,'solution()'\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\n\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"0\""
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nInput\n1\n5\n\nOutput\nYES\n\nInput\n1\n10 10\n\nOutput\nNO\n\nInput\n1\n3 2 1\n\nOutput\nNO\n\nInput\n1\n1 1 1\n\nOutput\nYES\n\n----------\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"stdin :\")\nprint(stdin)\nprint(\"Exception :\")\nprint(\"YES\")\nprint()\n\nassert solution(stdin) == \"NO\"\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"stdin :\")\nprint(stdin)\nprint(\"Exception :\")\nprint(\"NO\")\nprint()\n\nassert solution(stdin) == \"YES\"\nprint(\"Example 3:\")\nprint(\"Input : \")\nprint(\"stdin :\")\nprint(stdin)\nprint(\"Exception :\")\nprint(\"YES\")\nprint()\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 5 10 5\") == \"YES\"\nassert solution(\"3 3 5\") == \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == 'NO'\nassert solution(2) == 'YES'\nassert solution(5) == 'YES'\nassert solution(3) == 'NO'\nassert solution(4) == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 3 4\") == \"NO\"\nassert solution(\"2 3 2\") == \"NO\"\nassert solution(\"3 4 3\") == \"YES\"\nassert solution(\"3 5 3\") == \"YES\""
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\n\ndp = [0 for _ in range(n)]\n\nfor i in range(n):\n    for j in range(i):\n        if a[i] > a[j]:\n            dp[i] += dp[j]\n        elif a[i] == a[j]:\n            dp[i] += dp[j]\n            break"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n-4\n2 3\n3 2\n5 2\n5 3\n3 4\n\n2 3 5\n5 2 3\n5 3 3\n5 4 3\n3 4 2\n3 2 3\n\n-4\n5 1\n1 2\n2 3\n3 4\n4 5\n\n7\n6\n6 5\n6 4\n\n6 5 6\n5 5 6\n5 4 5\n4 3 6\n4 2 6\n\n-3\n2 1\n2 2\n2 3\n2 4\n\n2 5 4\n5 3 5\n3 2 4\n4 3 5\n4 3 2\n4 2 4\n\n6 4\n3 2\n3 4\n\n2 4\n2 3\n3 2\n\n3 5\n3 4\n\n2 4\n2 3\n\n2 4\n\n3 4\n\n3 2\n3 2\n3 2\n3 2\n3 2\n\nInput\n5\n3 4\n2\n\nOutput\nNO\n\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"YES\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"YES\"\nassert solution([\"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\"]) == \"YES\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"NO\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'YES'\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"asdf\") == 10, \"Test failed\"\nassert solution(\"aaaaa\") == -1, \"Test failed\"\nassert solution(\"asdasdf\") == -1, \"Test failed\"\nassert solution(\"aaasdf\") == 2, \"Test failed\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 233, 'incorrect answer'"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"asdf\", \"asd\", \"adf\", \"asf\", \"sdf\"]) == \"asdf\"\nassert solution([\"asdf\", \"asd\", \"adf\", \"asf\"]) == \"sdf\"\nassert solution([\"a\", \"b\", \"a\", \"a\", \"a\"]) == \"aa\"\nassert solution([\"a\", \"a\", \"a\", \"a\", \"a\"]) == \"a\"\nassert solution([\"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]) == \"aa\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 233\n\nassert solution(stdin) == -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 233, \"Correct answer\"\nprint(\"solution case 1:\")\nprint(solution(stdin))\n\nassert solution(stdin) == 233, \"Correct answer\"\nprint(\"solution case 2:\")\nprint(solution(stdin))\n\nassert solution(stdin) == 233, \"Correct answer\"\nprint(\"solution case 3:\")\nprint(solution(stdin))\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"asdf\", \"asd\", \"adf\", \"asf\", \"sdf\"]) == \"233\"\nassert solution([\"abca\", \"aba\", \"aaa\", \"a\"]) == \"5\"\nassert solution([\"aabca\"]) == -1"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"asdf\") == -1\nassert solution(\"aasf\") == 5\nassert solution(\"asdfasdf\") == 10\nassert solution(\"aaaaa\") == 233\nassert solution(\"aaaaa\") == 233\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 233\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '24'"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == str(39)\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '7'\nassert solution(stdin) == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n[\n    [\"2\", \"1\", \"1\"],\n    [\"3\", \"2\", \"2\"],\n    [\"3\", \"4\", \"4\"],\n    [\"3\", \"5\", \"5\"],\n    [\"6\", \"1\", \"1\"],\n    [\"4\", \"2\", \"2\"],\n    [\"4\", \"3\", \"3\"],\n    [\"4\", \"4\", \"4\"],\n    [\"6\", \"2\", \"2\"],\n    [\"6\", \"3\", \"3\"],\n    [\"7\", \"1\", \"1\"],\n    [\"7\", \"1\", \"2\"]\n]) == ['6', '7']\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"39\"\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(stdin)\nprint(\"Exception : \")\nprint(\"3\")\nprint(\"Output :\")\nprint(\"3\")\nprint(\"Exception : \")\nprint(\"4\")\nprint(\"Output :\")\nprint(\"4\")\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '31'\nassert solution(input()) == '32'\nassert solution(input()) == '34'\nassert solution(input()) == '39'\nassert solution(input()) == '31'\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\nassert solution(\"30 30 30\") == \"60\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\"), \"2 1 1 does not make sense\"\nassert solution(\"3 2 2\"), \"3 2 2 does not make sense\"\nassert solution(\"3 3 3\"), \"3 3 3 does not make sense\"\nassert solution(\"3 4 3\"), \"3 4 3 does not make sense\"\nassert solution(\"3 5 3\"), \"3 5 3 does not make sense\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\n\nfor t in range(int(input())):\n    N, M, T = map(int, stdin.split())\n    for t in range(T):\n        A = [list(map(int, input().split())) for _ in range(N)]\n        Masha = [[0 for _ in range(N)] for _ in range(N)]\n        for row in range(N):\n            for col in range(N):\n                Masha[row][col] = A[row][col]\n        for row in range(1, N-1):\n            for col in range(N-1):\n                Masha[row][col+1] = A[row][col]\n        for row in range(N-1):\n            for col in range(1, N-1):\n                Masha[row][col-1] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(1, N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(1, N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(1, N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row][col] = A[row][col]\n        for row in range(N-1):\n            for col in range(N-1):\n                Masha[row"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3 4 5 6 7\") == \"YES\"\nassert solution(\"5 6 4 2 1 3\") == \"NO\"\nassert solution(\"6 5 4 2 1 3\") == \"NO\"\nassert solution(\"5 7 4 2 1 3\") == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 4 5 1 2\") == \"YES\"\nassert solution(\"5 7 5 2 3\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"3 4\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3 1 1 1\") == \"YES\"\nassert solution(\"5 4 5 4 5\") == \"NO\""
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('6', '3 4') == 'YES'\nassert solution('6', '1 2') == 'NO'\nassert solution('6', '5 6') == 'NO'\nassert solution('6', '5 7') == 'NO'\nassert solution('6', '5 4') == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2') == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"NO\""
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == str(0)\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Test Input-----\n1\n2\n3\n\nOutput\n1\n\n-----Test Output-----\n0\n0\n\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2,3,4,1') == '1'\nassert solution('2,4,1,3') == '0'\nassert solution('2,5,1,3') == '1'\nassert solution('3,5,1,3') == '1'\nassert solution('2,2,3,1') == '0'\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(0)\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"()(((())))\") == 4\n\nassert solution(\"(((()))\") == 2\n\nassert solution(\"()(((()()))\") == 1\n\nassert solution(\"((())()()()()(()))\") == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"((()\", \"()()\"]) == [\"((()\", \"()()\"])\nassert solution([\"(()(\", \"((()\") == [\"(()(\", \"()((()\"]\nassert solution([\"(()(()\", \"((()(((()\"] == [\"(()(()\", \"((()((()\"]\nassert solution([\"(())(\", \"()(((((()\"] == [\"(()(\", \"()(()((((()\"]\nassert solution([\"((()((()()\", \"((()(((()()\"] == [\"((((((((((()\"]\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"3\"\n\"\"\""
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\\\"()))()\\\" == 5\nassert solution(\\\"(()))()\") == 5\nassert solution(\\\"((()))()\") == 4\nassert solution(\\\"(()()))()\") == 0"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"5\"\nassert solution(input) == \"5\"\nassert solution(input) == \"5\"\nassert solution(input) == \"4\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"5\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"()((()()))()()\") == 0\nassert solution(\n    \"(()((()))()((()()))()\") == 0\nassert solution(\n    \"((((((((((()))))))))((((())))))\") == 1\nassert solution(\n    \"((((((((((((((()))))))))))))((((())))))\") == 3\nassert solution(\n
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"()(((((()))()()()()(\"), (1)\nassert solution(\"((()))\") == 4\nassert solution(\"(()(()))\") == 0\nassert solution(\"()((((()))\") == 0\nassert solution(\"()(((((()))()((()))\") == 0\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5471) == 1\nassert solution(70525) == -1\nassert solution(1241367) == 4\nassert solution(750110) == -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == 1\nassert solution(\"1241367\") == -1\nassert solution(\"12031467\") == -1\nassert solution(\"12031465\") == 2\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"solution(stdin) failed\"\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(17) == 1\nassert solution(17000) == -1\nassert solution(112) == 4\nassert solution(11000) == -1\nassert solution(123) == 2\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(5) == 3\nassert solution(11) == 4\nassert solution(10) == -1\n\n\"n=1\"\n\"n=2\"\n\"n=3\"\n\"n=4\"\n\"n=5\"\n\"n=6\"\n\"n=7\"\n\"n=8\"\n\"n=9\"\n\"n=10\"\n\"n=11\"\n\"n=12\"\n\"n=13\"\n\"n=14\"\n\"n=15\"\n\"n=16\"\n\"n=17\"\n\"n=18\"\n\"n=19\"\n\"n=20\"\n\"n=21\"\n\"n=22\"\n\"n=23\"\n\"n=24\"\n\"n=25\"\n\"n=26\"\n\"n=27\"\n\"n=28\"\n\"n=29\"\n\"n=30\"\n\"n=31\"\n\"n=32\"\n\"n=33\"\n\"n=34\"\n\"n=35\"\n\"n=36\"\n\"n=37\"\n\"n=38\"\n\"n=39\"\n\"n=40\"\n\"n=41\"\n\"n=42\"\n\"n=43\"\n\"n=44\"\n\"n=45\"\n\"n=46\"\n\"n=47\"\n\"n=48\"\n\"n=49\"\n\"n=50\"\n\"n=51\"\n\"n=52\"\n\"n=53\"\n\"n=54\"\n\"n=55\"\n\"n=56\"\n\"n=57\"\n\"n=58\"\n\"n=59\"\n\"n=60\"\n\"n=61\"\n\"n=62\"\n\"n=63\"\n\"n=64\"\n\"n=65\"\n\"n=66\"\n\"n=67\"\n\"n=68\"\n\"n=69\"\n\"n=70\"\n\"n=71\"\n\"n=72\"\n\"n=73\"\n\"n=74\"\n\"n=75\"\n\"n=76\"\n\"n=77\"\n\"n=78\"\n\"n=79\"\n\"n=80\"\n\"n=81\"\n\"n=82\"\n\"n=83\"\n\"n=84\"\n\"n=85\"\n\"n=86\"\n\"n=87\"\n\"n=88\"\n\"n=89\"\n\"n=90\"\n\"n=91\"\n\"n=92\"\n\"n=93\"\n\"n=94\"\n\"n=95\"\n\"n=96\"\n\"n=97\"\n\"n=98\"\n\"n=99\"\n\"n=100\"\n\"n=101\"\n\"n=102\"\n\"n=103\"\n\"n=104\"\n\"n=105\"\n\"n=106\"\n\"n=107\"\n\"n=108\"\n\"n=109\"\n\"n=110\"\n\"n=111\"\n\"n=112\"\n\"n=113\"\n\"n=114\"\n\"n=115\"\n\"n=116\"\n\"n=117\"\n\"n=118\"\n\"n=119\"\n\"n=120\"\n\"n=121\"\n\"n=122\"\n\"n=123\"\n\"n=124\"\n\"n=125\"\n\"n=126\"\n\"n=127\"\n\"n=128\"\n\"n=129\"\n\"n=130\"\n\"n=131\"\n\"n=132\"\n\"n=133\"\n\"n=134\"\n\"n=135\"\n\"n=136\"\n\"n=137\"\n\"n=138\"\n\"n=139\"\n\"n=140\"\n\"n=141\"\n\"n=142\"\n\"n=143\"\n\"n=144\"\n\"n=145\"\n\"n=146\"\n\"n=147\"\n\"n=148\"\n\"n=149\"\n\"n=150\"\n\"n=151\"\n\"n=152\"\n\"n=153\"\n\"n=154\"\n\"n=155\"\n\"n=156\"\n\"n=157\"\n\"n=158\"\n\"n=159\"\n\"n=160\"\n\"n=161\"\n\"n=162\"\n\"n=163\"\n\"n=164\"\n\"n=165\"\n\"n=166\"\n\"n=167\"\n\"n=168\"\n\"n=169\"\n\"n=170\"\n\"n=171\"\n\"n=172\"\n\"n=173\"\n\"n=174\"\n\"n=175\"\n\"n=176\"\n\"n=177\"\n\"n=178\"\n\"n=179\"\n\"n=180\"\n\"n=181\"\n\"n=182\"\n\"n=183\"\n\"n=184\"\n\"n=185\"\n\"n=186\"\n\"n=187\"\n\"n=188\"\n\"n=189\"\n\"n=190\"\n\"n=191\"\n\"n=192\"\n\"n=193\"\n\"n=194\"\n\"n=195\"\n\"n=196\"\n\"n=197\"\n\"n=198\"\n\"n=199\"\n\"n=200\"\n\"n=201\"\n\"n=202\"\n\"n=203\"\n\"n=204\"\n\"n=205\"\n\"n=206\"\n\"n=207\"\n\"n=208\"\n\"n=209\"\n\"n=210\"\n\"n=211\"\n\"n=212\"\n\"n=213\"\n\"n=214\"\n\"n=215\"\n\"n=216\"\n\"n=217\"\n\"n=218\"\n\"n=219\"\n\"n=220\"\n\"n=221\"\n\"n=222\"\n\"n=223\"\n\"n=224\"\n\"n=225\"\n\"n=226\"\n\"n=227\"\n\"n=228\"\n\"n=229\"\n\"n=230\"\n\"n=231\"\n\"n=232\"\n\"n=233\"\n\"n=234\"\n\"n=235\"\n\"n=236\"\n\"n=237\"\n\"n=238\"\n\"n=239\"\n\"n=240\"\n\"n=241\"\n\"n=242\"\n\"n=243\"\n\"n=244\"\n\"n=245\"\n\"n=246\"\n\"n=247\"\n\"n=248\"\n\"n=249\"\n\"n=250\"\n\"n=251\"\n\"n=252\"\n\"n=253\"\n\"n=254\"\n\"n=255\"\n\"n=256\"\n\"n=257\"\n\"n=258\"\n\"n=259\"\n\"n=260\"\n\"n=261\"\n\"n=262\"\n\"n=263\"\n\"n=264\"\n\"n=265\"\n\"n=266\"\n\"n=267\"\n\"n=268\"\n\"n=269\"\n\"n=270\"\n\"n=271\"\n\"n=272\"\n\"n=273\"\n\"n=274\"\n\"n=275\"\n\"n=276\"\n\"n=277\"\n\"n="
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"0\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n0 <= n <= 10^18\n\n\n-----Time Limit-----\n\n1 minute\n\n'''\n\nfrom collections import defaultdict\n\nn = int(input())\ndp = defaultdict(int)\ndp[1] = 1\ndp[2] = 2\ndp[3] = 3\n\nfor i in range(3, n + 1):\n    dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n\nprint(dp[n])\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5071\") == 4, \"Fail\"\nassert solution(\"705\") == 1, \"Fail\"\nassert solution(\"1241367\") == -1, \"Fail\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 4\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 10\n\nassert solution(input('Input your input')) == 10\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 2 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 2 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 2 1 1 1 1 2 1 1 1 2 1 2 1 1 1 2 1 1 2 1 1 1 2 1 2 1 1 1 2 1 2 1 1 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 1 1 2 1 2 1 1 2 1 2 1 2 1 2 1 1 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 2 1 2 1 2 1 1 2 2 1 1 1 1 2 1 1 1 2 1 2 1 1 1 2 2 1 1 1 2 1 2 1 1 1 1 2 1 1 2 1 1 2 1 1 2 1 2 1 1 2 1 2 1 2 1 1 2 1 2 2 1 1 1 2 2 1 1 1 1 2 2 1 1 1 2 1 2 1 1 1 1 2 1 1 2 1 2 1 1 2 1 2 1 2 1 2 1 1 2 1 2 1 1 2 2 1 2 1 1 2 2 1 1 1 2 1 2 1 1 2 2 1 1 2 1 2 2 1 1 1 2 2 1 1 1 1 2 1 2 1 1 2 2 1 1 1 2 1 1 2 1 2 1 1 2 1 2 1 1 2 2 1 1 1 2 1 2 1 2 1 1 1 2 2 1 1 1 2 1 2 1 2 1 1 2 1 2 1 1 1 2 2 1 1 1 2 2 1 1 1 2 1 2 1 1 1 2 1 1 2 1 1 1 2 2 1 1 1 2 1 1 2 1 1 1 2 2 1 1 1 2 1 2 1 1 1 2 2 1 1 1 1 2 2 1 1 1 1 2 2 1 1 1 2 2 1 1 1 2 1 2 1 1 1 2 1 2 1 1 2 2 1 1 1 2 1 2 1 1 2 1 2 1 2 1 1 1 2 2 1 1 1 1 2 1 2 1 1 1 2 1 2 1 1 1 2 2 1 1 1 1 2 1 2 1 1 1 2 1 2 1 1 1 2 1 2 1 1 1 2 1 2 1 1 1 2 1 2 1 2 1 1 2 1 1 2 1 2 1 1 2 1 2 1 2 1 2 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('abacbecfd') == 2\nassert solution('aaabbcbb') == 1\nassert solution('abcde') == 3\nassert solution('abcdedc') == 1\nassert solution('abcdef') == 1\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"1 1 1 2 1 2 1 2 1 2\"\nassert solution(\"abcdedc\") == \"1 1 1 2 1 2 1 2 1 2\"\nassert solution(\"abcd\") == \"1 1 2 1 1 1 1 1 1 1 1\"\nassert solution(\"d\") == \"1 1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(2)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(4)\nassert solution(stdin) == str(5)\nassert solution(stdin) == str(6)\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 3\nassert solution(\"abcdedc\") == 1\nassert solution(\"abcdabcde\") == 0\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 2\nassert solution(inp) == 5\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('abcdedc') == '1'\nassert solution('aaabbcbb') == '3'\nassert solution('ababcbab') == '3'\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, [\"a\", \"b\", \"ab\", \"ba\", \"abab\"]) == \"YES\"\nassert solution(5, [\"qwertyuiop\", \"asdfghjkl\", \"zxcvbnm\", \"12345\"]) == \"YES\"\nassert solution(5, [\"a\"]) == \"NO\"\nassert solution(5, [\"qw\", \"a\", \"qw\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]) == \"YES\""
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == \"YES\"\nassert solution(5) == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == \"YES\"\nassert solution(2) == \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\"\"\"\n\nimport collections\nfrom itertools import product"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution == \"YES\""
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(str, list(map(lambda x: (x[0].lower() == x[1].lower()), list(map(lambda x: x[2:], stdin.split())))) == \"YES\")\nassert solution(str, list(map(lambda x: x[0].lower() == x[1].lower(), list(map(lambda x: x[2:], stdin.split())))) == \"NO\"\n\n-----Bonus-----"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == \"YES\"\nassert solution(2) == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == \"YES\"\nassert solution(3) == \"YES\"\nassert solution(3) == \"NO\"\nassert solution(4) == \"YES\"\nassert solution(3) == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == 'YES'\nassert solution(3) == 'NO'\nassert solution(5) == 'YES'\nassert solution(5) == 'YES'\nassert solution(3) == 'NO'\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 4\") == \"5\"\nassert solution(\"5 100\") == \"0\"\nassert solution(\"5 12\") == \"0\"\nassert solution(\"5 34 55 43 21\") == \"0\"\n\n\n------Sample 1: Simple Hacker Rank ------\n\nInput\n5 5\n1 1 2 2\n2 1 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 2) == 3\nassert solution(5, 100) == 5\nassert solution(3, 12) == 3\nassert solution(5, 25) == 5\nassert solution(3, 11) == 3\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"5\"\n\npass\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\n    \"5 2\") == \"5\"\nassert solution(\n    \"5 100\") == \"5\"\nassert solution(\n    \"12 34 55 43 21\") == \"5\"\nassert solution(\n    \"5 100 10 30 40 50 60 80\") == \"4\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"7 4\") == \"0\"\nassert solution(\"7 5\") == \"0\"\nassert solution(\"7 6\") == \"0\"\nassert solution(\"7 4 2\") == \"0\"\nassert solution(\"7 4 3\") == \"0\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '5'\n\n-----Advanced-----\n\nUse `next()` to check whether the end of the list is reached.\n\nMishka starts taking problems from the leftmost to the rightmost in the list.\n\nMishka stops when he is unable to solve any problem from any end of the list.\n\nThe code should be written in C++.\n\nIn programming, we use built-in functions `next()` and `__next__()`, which are provided by Python.\n\nFor example:\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\n\n-----------------------\nOutput Format\n\nPrint one integer \u2014 the maximum number of problems Mishka can solve.\n\n\n------Input Information-----\n\nThe first line contains an integer $n$, the number of problems in the contest. The next $n$ lines contains $a_1, a_2, \\dots, a_n$ \u2014 the difficulties of each of the $n$ problems.\n\nThe second line contains $a_1, a_2, \\dots, a_n$ \u2014 the difficulty of each of the $n$ problems.\n\nThe third line contains $b_1, b_2, \\dots, b_n$ \u2014 the difficulty of each of the $n$ problems.\n\nOutput\n\nPrint one integer \u2014 the maximum number of problems Mishka can solve.\n\n\n------Output Information-----\n\nFor example, if the input was:\n\nInput:\n\n5\n2 3 2 1 5 1 6 4\n\nOutput:\n\n5\n\nInput:\n\n4\n4 2 3 1 5 1 6 4\n\nOutput:\n\n0\n\nInput:\n\n5 100\n12 34 55 43 21\n\nOutput:\n\n5\n\n\n------Notes-----\n\nInput, Output, and Input/Output sample inputs are provided for you to understand and compare.\n\nNOTE: If you want to implement a solution that uses only one line of code, you must call it `solution()` in the first line of the input, and you must use `print` and `input` in the remaining lines.\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"5\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^4\n0 <= stdin[i] <= 10^6\nstdin.length == 9\nstdin contains at least 3 integers.\n\nConstraints\n1 <= k <= 10^6\n0 <= a_i <= 100\n\nTime Limit: 0.1 seconds\nMemory Limit: 128 MB\n\n-----Bug Fixes-----\n1. If a_i is the second to last element in the list, the length of stdin remains the same.\n2. If a_i is the first to the end of the list, stdin is reversed.\n3. If a_i is the first element in the list, stdin is reversed.\n\n-----Bug Fixes-----\n1. If a_i is the last element in the list, stdin is reversed.\n2. If a_i is the first to the end of the list, stdin is reversed.\n3. If a_i is the first element in the list, stdin is reversed.\n\n-----Time Limit-----\n0.1 seconds\n0.1 seconds\n\n\"\"\"\n\n\nimport sys\nfrom io import StringIO\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('6', '4') == 12\nassert solution('6', '3') == 14\nassert solution('6', '5') == 12\nassert solution('6', '2') == 12\nassert solution('6', '6') == 12\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3218'\n\nassert solution(stdin) == '12'\n\nassert solution(stdin) == '14'\n\nassert solution(stdin) == '12'\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 3) == 12\nassert solution(2, 3) == 14\nassert solution(3, 3) == 12\nassert solution(9, 6) == 3218\nassert solution(506, 2708) == 12\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '12'\nassert solution(stdin) == '14'\nassert solution(stdin) == '3218'\nassert solution(stdin) == '51390'\nassert solution(stdin) == '3500'\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['2', '1', '2', '1', '2', '2', '1', '2', '1']) == '12'\nassert solution(['2', '3', '3', '3', '2', '2', '2', '3', '3']) == '14'\nassert solution(['1', '1', '1', '1', '1', '1', '1', '1', '1']) == '12'\nassert solution(['2', '2', '1', '2', '3', '2', '1', '2', '1']) == '12'\nassert solution(['1', '2', '3', '2', '3', '3', '1', '2', '1']) == '12'\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('4 4', '3 6', '3 4', '506 2708', '3 3', '3 3', '3 1') == 12,'solution(solution) failed'\nassert solution('3 6', '3 6', '3 4', '506 2708', '3 3', '3 3', '3 1') == 14,'solution(solution) failed'\nassert solution('1 1', '1 1', '1 1', '506 2708', '3 1', '3 1', '3 1') == 1,'solution(solution) failed'\nassert solution('1 1', '1 1', '1 1', '506 2708', '1 1', '3 1', '3 1') == 1,'solution(solution) failed'\nassert solution('1 1', '1 1', '1 1', '1 1', '1 1', '1 1', '1 1') == 1,'solution(solution) failed'\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"12\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"9 3 6\") == \"17\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12\n\nassert solution(stdin) == 14\n\nassert solution(stdin) == 3218\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"12\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('9') == '9'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ababcd\") == \"YES\"\nassert solution(\"ababcbcd\") == \"YES\"\nassert solution(\"abcddfd\") == \"NO\"\nassert solution(\"abcdeffd\") == \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"7\") == \"YES\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"4\") == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['aaa', 'bbb', 'ccc']) == 'YES'\nassert solution(['aab', 'bbb', 'abc']) == 'NO'"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"4\") == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('abacbecfd') == 'YES'\n\n\n-----Constraints-----\n1 <= n <= 200\n1 <= s.length <= 200\ns is a lowercase Latin string."
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"abab\") == \"YES\"\nassert solution(\"abba\") == \"NO\"\nassert solution(\"abba\") == \"YES\"\nassert solution(\"abacabc\") == \"NO\"\nassert solution(\"abc\") == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"7\") == \"NO\"\nassert solution(\"2\") == \"NO\""
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == 1\nassert solution(\"1 2\") == 2\nassert solution(\"1 2\") == -1\nassert solution(\"1 2\") == -1\nassert solution(\"1 2\") == 10\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('10 2') == '25'\nassert solution('5 2') == '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1 2\", \"2 5\"]) == \"25\"\nassert solution([\"1 2\", \"2 10\"]) == \"25\"\nassert solution([\"1 1\", \"1 5\"]) == \"25\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"2 3\") == \"25\"\nassert solution(\"2 4\") == \"25\"\nassert solution(\"2 5\") == \"25\"\nassert solution(\"2 6\") == \"25\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 2') == 25\nassert solution('2 2 5') == 25\nassert solution('2 2 10') == 25\nassert solution('2 2 15') == -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == 25\nassert solution(\"2 3\") == -1\nassert solution(\"1 2\") == 25\nassert solution(\"5 6\") == -1\nassert solution(\"1 1\") == -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5,2) == 5\nassert solution(0,2) == -1"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == 1\nassert solution(\"2 1\") == 2\nassert solution(\"1 1\") == 1\nassert solution(\"2 2\") == -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == 4\nassert solution(\"5 7\") == -1\nassert solution(\"1 1\") == 1\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10 5\") == 25\nassert solution(\"10 0\") == -1\nassert solution(\"10 25\") == 25"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('1 2 4 5 6 8') == 'YES'\nassert solution('8 3') == 'NO'\nassert solution('1 1') == 'NO'\nassert solution('9 4') == 'YES'\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 4 3 1 7\") == \"YES\"\nassert solution(\"1 2 1\") == \"NO\"\nassert solution(\"2 3\") == \"NO\"\nassert solution(\"6 7 4\") == \"YES\"\nassert solution(\"8 6 5 1\") == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\nInput\n2 5\n\nOutput\nNO\n\nInput\n6 2\n\nOutput\nNO\n\nInput\n2 1\n\nOutput\nYES\n\nInput\n3 4\n\nOutput\nYES\n\nInput\n8 2\n\nOutput\nYES\n\nInput\n2 1\n\nOutput\nYES\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^5\n0 <= a_i <= 10^9\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"16 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\") == \"YES\"\nassert solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15\") == \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 4 6 8\") == \"YES\"\nassert solution(\"2 4 3 8\") == \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"13 1\") == \"YES\"\nassert solution(\"8 5\") == \"NO\"\nassert solution(\"9 4\") == \"NO\"\nassert solution(\"1 1\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"5\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]) == \"YES\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"NO\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == \"YES\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1 7\n1 6\n1 2\n1 4\n1 5\n1 7\n2 7\n3 7\n3 9\n3 2\n3 4\n3 8\n4 4\n5 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 2\n4 7\n3 9\n2 9\n2 4\n2 7\n2 4\n2 3\n2 1\n2 6\n1 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1 1\n2 2\n3 3\n4 4\n5 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 2\n4 7\n5 5\n6 6\n7 9\n8 8\n9 9\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 2\n4 2\n3 2\n1 2\n2 2\n3 3\n3 3\n4 4\n5 4\n6 6\n7 7\n8 8\n9 9\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 6\") == \"3\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"3 6\") == \"3\"\nassert solution(\"4 6\") == \"3\"\nassert solution(\"5 20\") == \"5\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 0\n\"\"\""
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 20\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"5 20\") == \"4\"\nassert solution(\"5 -2\") == \"1\"\nassert solution(\"5 0\") == \"1\"\nassert solution(\"5 0\") == \"1\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"4\", \"5\", \"6\", \"10\", \"10 -2\", \"8\", \"10 -1\", \"1\", \"-300\", \"1\", \"300\", \"1\", \"-1\", \"-2\"]) == \"1\"\nassert solution([\"4\", \"5\", \"6\", \"10\", \"10 -2\", \"8\", \"10 -1\", \"1\", \"-300\", \"1\", \"300\", \"1\", \"-1\", \"-2\"]) == \"3\"\nassert solution([\"4\", \"5\", \"6\", \"10\", \"10 -2\", \"8\", \"10 -1\", \"1\", \"-300\", \"1\", \"300\", \"1\", \"-1\", \"-2\"]) == \"5\""
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    input()\n) == \"3\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\\n1 0\") == \"3\\n4\\n5\\n\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n\n\n-----Code-----\nimport sys\n\nN = int(sys.stdin.readline())\n\nfor i in range(N):\n    a = sys.stdin.readline()\n    print(a[::-1][::-1].replace(\" \", \"\").replace(\"-\", \"\")[::-1])\n\n-----Time-----"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"YES\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == \"YES\"\nassert solution(5) == \"YES\"\nassert solution(7) == \"YES\"\nassert solution(4) == \"NO\"\nassert solution(3) == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1\\n', 1) == 'YES\\n'\nassert solution('1\\n', 2) == 'NO\\n'\nassert solution('1\\n', 3) == 'YES\\n'\nassert solution('1\\n', 4) == 'YES\\n'\nassert solution('1\\n', 5) == 'NO\\n'\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\n\n\n-----Idea-----\n\n1. Take a list of numbers and combine them with the sum of their even ones. \n2. Put these numbers in a list and compare the list to the sorted list to see if they are in the same order.\n\n3. If the odd number of the list is not the same as the even number of the list, then add that odd number to the even number of the list and if the even number is the same then put that even number in the list.\n\n4. Now that we have a list of numbers, compare the list to the sorted list to see if they are in the same order.\n\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\\n8\\n8\\n1\\n1\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n1\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n1\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\n1\\n9\\n8\\n8\\n1\\"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\", \"explanation: solution() failed\""
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3\", \"1\"]) == \"YES\", \"solution: {stdin}\"\n\nassert solution([\"3\", \"1\", \"1\"]) == \"NO\", \"solution: {stdin}\"\n\nassert solution([\"1\", \"2\", \"1\"]) == \"YES\", \"solution: {stdin}\"\n\nassert solution([\"1\", \"1\", \"1\"]) == \"NO\", \"solution: {stdin}\"\n\nassert solution([\"1\", \"1\", \"1\", \"1\"]) == \"NO\", \"solution: {stdin}\""
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= n <= 100\n1 \\le n \\le 30000\n\n1 \\le a_i \\le 30000\n-300 \\le b_i \\le 300\n\n1 \\le a_i \\le 30000\n-30000 \\le b_i \\le 300\n\n0 <= b_i <= 300\n0 <= a_i <= 30000\n\nn \\le 50\n\n1 \\le n \\le 50000\n-5000 \\le n \\le 50000\n\n-----Time complexity-----\n\nO(n)\n\nO(n)\n\n\nO(1)\n\nO(1)\n\nO(n)\n\nO(n)\n\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == 'YES'\nassert solution('1 1 2') == 'YES'\nassert solution('2 -2 -1 2') == 'YES'\nassert solution('-10 0 2') == 'YES'\nassert solution('-2 -3 -1') == 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3 1\") == \"YES\"\nassert solution(\"3 -2\") == \"YES\"\nassert solution(\"3 -3\") == \"NO\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"4 -2\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n0 < stdin.length <= 100\n0 < r < 30000\n\n-----Time Limit-----\n1 second\n\n-----Divide and Conquer-----\nO(n log n)\n\n\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'NO', \"The answer is not 'NO'\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('3 10') == 'NO'\nassert solution('4 2') == 'YES'\nassert solution('4 -3') == 'YES'\nassert solution('2 1') == 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('7 1 2'\n'3 2 0'\n'1 1 2 1'\n'3 3 4 5') == 'YES'\nassert solution('10 1 11') == 'YES'\nassert solution('10 1 5') == 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 1 5\") == \"YES\"\nassert solution(\"10 1 3\") == \"NO\"\nassert solution(\"10 1 2\") == \"NO\"\nassert solution(\"10 1 0\") == \"NO\"\nassert solution(\"10 1 4\") == \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"NO\"\n\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import permutations\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == ['YES', 'NO'][int(stdin[0]) - 1]\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'YES'\n\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\\n2\\n3\\n1\\n1\\n0\") == \"YES\"\nassert solution(\"5\\n5\\n3\\n2\\n1\\n0\") == \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"<= 7\"\n    \"<= 10\"\n    \"<= 11\"\n    \")\"\n) == \"YES\"\nassert solution(\n    \"<= 10\"\n    \"<= 11\"\n    \"<= 12\"\n    \")\"\n) == \"NO\"\n\nassert solution(\n    \"<= 10\"\n    \"<= 12\"\n    \"<= 13\"\n    \")\"\n) == \"YES\"\nassert solution(\n    \"<= 13\"\n    \"<= 14\"\n    \"<= 15\"\n    \")\"\n) == \"NO\"\n\n\n-----BEGIN CODE------\n\nExample 1:\n\nInput\n2\n1 1\n\nOutput\nYES\n0 1 0 1 0 1 1\n\nExample 2:\n\nInput\n1\n1 1\n\nOutput\nNO\n1 1 0 1 1 0 1\n\nExample 3:\n\nInput\n1\n2\n\nOutput\nNO\n0 1 0 1 1 0 1\n\nExample 4:\n\nInput\n1\n0\n\nOutput\nNO\n1 1 0 1 1 0 1\n\nExample 5:\n\nInput\n0\n2\n\nOutput\nNO\n1 1 0 1 1 0 1\n\n-----END CODE-----\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('asdasdf') == 1\nassert solution('abcde') == 3\nassert solution('asdfasdf') == 2\nassert solution('ab') == 0\nassert solution('baaba') == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"test\", \"tst\", \"tt\", \"et\"]) == \"tt\"\nassert solution([\"test\", \"tst\", \"tt\"]) == \"tst\"\nassert solution([\"a\", \"ab\"]) == \"a\"\nassert solution([\"a\", \"aa\"]) == \"a\"\nassert solution([\"a\", \"aa\", \"aa\", \"aa\"]) == \"a\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 0\nassert solution(stdin) == 3\nassert solution(stdin) == 0\nassert solution(stdin) == 3"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfas"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n-----Constraints-----\n1 <= stdin.length <= 200\nstdin consists of lowercase English letters.\n1 <= s.length <= 200\ns consists of at least one lowercase English letter and s[i] is lowercase English letter.\n1 <= t.length <= 200\nt consists of at least one lowercase English letter.\n\n------Sample-------\nInput\nasdfa\nab\n\nOutput\n0\n\nSample Input\nasdf\nab\n\nSample Output\n3\n\nExplanation\nMaximum possible length of t is 1 because t can be obtained from s without removing any characters.\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"bbab\") == 3\nassert solution(\"baaba\") == 2\nassert solution(\"abcde\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 0\nassert solution('abcde') == 2\nassert solution('asdfasdf') == 1\nassert solution('fasd') == 3"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(str := stdin) == 3\nassert solution(str := stdin) == 3\nassert solution(str := stdin) == 3\nassert solution(str := stdin) == 3\nassert solution(str := stdin) == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\nassert solution('asdfasdf') == 3"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 2\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n'''\n\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n$\\t$\\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"9 9\"\nassert solution(stdin) == \"9 9\"\nassert solution(stdin) == \"10 2\"\nassert solution(stdin) == \"10 2\"\nassert solution(stdin) == \"10 3\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1.200000') == 3,'solution(1.200000)!= 3'\nassert solution('2.572479') == 3,'solution(2.572479)!= 3'\nassert solution('4.024922') == 9,'solution(4.024922)!= 9'\nassert solution('3.0') == 10,'solution(3.0)!= 10'\nassert solution('3.5') == 10,'solution(3.5)!= 10'"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '10 3'\nassert solution(stdin) == '9 9'\nassert solution(stdin) == '10'\nassert solution(stdin) == '1 2'\nassert solution(stdin) == '0 2'\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2') == '3 2'\nassert solution('5') == '10 3'\nassert solution('0.3') == '9 9'\nassert solution('9') == '9'\nassert solution('9.9') == '9'\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1.100000') == '1 2'\nassert solution('2.100099') == '2 3'\nassert solution('4.5') == '9 9'\nassert solution('5.9') == '3 4'\nassert solution('6.0') == '1 2'\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(raw_input()) == \"9 9\"\nassert solution(raw_input()) == \"9 9\"\nassert solution(raw_input()) == \"9 9\"\nassert solution(raw_input()) == \"9 9\"\nassert solution(raw_input()) == \"9 9\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1.200000\") == 3, \"3\"\nassert solution(\"2.572479\") == 10, \"10\"\nassert solution(\"4.024922\") == 9, \"9\""
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 10\nassert solution(stdin) == 9\n\n\n-----Discussion-----\nIn the example above, we may assume that x is an integer with exactly 6 decimal places (0 < x < 5). We will write a solution for x in this example. Let's say that we have a task which can be solved using exactly 5 lines of code.\n\nFor example, consider the input:\n\nFor the input, we should write 5 lines of code.\n\nFor the output, we should write 10 lines of code.\n\nNote that we will write only 6 lines of code.\n\nThis is because, in the input, there are only 6 digits in total.\n\nAt the end, we should have exactly 10 lines of code.\n\nFor the output, we should write 3 lines of code.\n\nThis is because, in the input, there are only 3 digits in total.\n\nAt the end, we should have exactly 3 lines of code.\n\nWe shall return the length of the solution in line with the first line.\n\n-----Constraints-----\n\n0 <= stdin.length <= 100\n\n\n\n-----Submissions-----\n\n---Does it make sense to use an extra space for your solution?---\nYES\n---Does it make sense to use an extra space for your solution?---\nYES\n---Is a function better than x = x/2 with 12 digits?---\nNO\n---Is a function better than x = x/4 with 12 digits?---\nYES\n---Is a function better than x = x/4 with 10 digits?---\nNO\n---Is a function better than x = x/2 with 10 digits?---\nYES\n---Is a function better than x = x/4 with 10 digits?---\nNO\n---Is a function better than x = x/2 with 12 digits?---\nYES\n---Is a function better than x = x/4 with 12 digits?---\nNO\n\"\"\"\n\nclass Solution:\n    def solution(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x > 0:\n            divide = x // 2\n            rem = x % 2\n            return divide * (divide + 1) * rem\n        return (x // 4)\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"10 3\"\nassert solution(stdin) == \"9 9\"\n\n\n\n-----Constraints-----\n1 <= stdin.length <= 105\n-105 <= x <= 105\n\n\"\"\"\n\nclass Solution:\n    def solution(self, x):\n        for i in range(1, 10):\n            if str(i) not in '123456789':\n                continue\n            for j in range(i+2, 10):\n                if str(i*j) not in '123456789':\n                    continue\n                for k in range(i*j+2, 10):\n                    if str(i*k) not in '123456789':\n                        continue\n                    if str(j*k) not in '123456789':\n                        continue\n                    if str(i*j*k) not in '123456789':\n                        continue\n                    if str(i*j*k*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*k*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i) not in '123456789':\n                        continue\n                    if str(i*j*"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 3 3 3 3 3 3 3 3') == 'YES'\nassert solution
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\""
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\" or solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 1 4 5 6 4\") == \"YES\""
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\n\nassert solution(input()) == \"NO\"\n\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'NO'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution == \"YES\"\n\npass\n-----Successful-----\nTest case result: Passed"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"01010\") == \"1111\", \"solution(01010)\"\nassert solution(\"111001\") == \"110000\", \"solution(111001)\"\nassert solution(\"111000\") == \"110100\", \"solution(111000)\"\nassert solution(\"111010\") == \"1011010\", \"solution(111010)\"\nassert solution(\"101100\") == \"101100\", \"solution(101100)\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2 2 1) == \"01010100\"\nassert solution(3 3 3) == \"101100\"\nassert solution(5 3 6) == \"01010100\"\nassert solution(5) == \"01010100\"\nassert solution(0) == \"01010100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0101010\") == \"101100\"\nassert solution(\"111001\") == \"01101010100000110011111\"\nassert solution(\"30000\") == \"011101\"\nassert solution(\"3000001\") == \"011101\"\nassert solution(\"30000100\") == \"011101\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1110011011\") == \"10110011011\"\nassert solution(\"1110001100\") == \"11101011101\"\nassert solution(\"11011110100\") == \"1011010000\"\nassert solution(\"00110001111\") == \"10111100111\"\nassert solution(\"11000111111\") == \"11100101011\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('01010' == '000101') == '01010'\nassert solution('111001') == '111001'\nassert solution('111100') == '01010100'\nassert solution('110010') == '100110'\nassert solution('100100') == '1101100'\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('0101') == '101100', 'cannot parse 0101'\nassert solution('1111') == '110101', 'cannot parse 1111'\nassert solution('11011') == '001101', 'cannot parse 1101'\nassert solution('11001') == '001101', 'cannot parse 11001'\nassert solution('110001') == '001101', 'cannot parse 110001'\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"01010\") == \"101100\"\nassert solution(\"111001\") == \"000100\"\nassert solution(\"111010\") == \"110100\"\nassert solution(\"111010\") == \"110101\"\nassert solution(\"111010\") == \"110101\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '11010100', \"expected answer: %s, got %s\" %(11010100, solution(stdin))\nassert solution(stdin) == '101100', \"expected answer: %s, got %s\" %(101100, solution(stdin))\nassert solution(stdin) == '11111111', \"expected answer: %s, got %s\" %(11111111, solution(stdin))\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"110010\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0101\") == \"1100\"\nassert solution(\"111001\") == \"011101\"\nassert solution(\"110101\") == \"1011101\"\nassert solution
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"aa\") == \"NO\"\nassert solution(\"abac\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"YES\", \"NO\"\nassert solution(\"ab\") == \"NO\", \"NO\"\nassert solution(\"ab\") == \"YES\", \"NO\"\nassert solution(\"abc\") == \"NO\", \"YES\"\nassert solution(\"abc\") == \"YES\", \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('ab') == 'NO'\nassert solution('ab') == 'NO'\nassert solution('ac') == 'YES'\nassert solution('cb') == 'YES'\nassert solution('ac') == 'YES'\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"ab\", \"bc\", \"abc\", \"ba\", \"bab\", \"abc\"]) == \"NO\"\nassert solution([\"a\"]) == \"YES\"\nassert solution([\"a\", \"a\"]) == \"YES\"\nassert solution([\"a\", \"a\", \"a\"]) == \"YES\"\nassert solution([\"a\", \"a\", \"a\", \"a\"]) == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('abc') == 'abc'\nassert solution('ab') == 'abc'\nassert solution('aa') == 'a'\nassert solution('bc') == 'c'\nassert solution('abccd') == 'abcabc'\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\", \"No\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input()\n) == input(\"The permutation of length \" + str(len(input())))\nassert solution(\n    input()\n) == input(\"The permutation of length \" + str(len(input())))\nassert solution(\n    input()\n) == input(\"The permutation of length \" + str(len(input())))\nassert solution(\n    input()\n) == input(\"The permutation of length \" + str(len(input())))\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([]), \"\"\nassert solution([1, 1]), \"0\"\nassert solution([1, 1, 1]), \"1\"\nassert solution([3, 1, 2]), \"1\"\nassert solution([2, 1, 3, 4, 5]), \"3\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n\n\n-----Constraints-----\n0 <= n <= 100\n1 <= q_1, q_2, q_{n-1} <= 10^5\n1 <= p_i < p_{i+1}\n\n\"\"\"\n\nfrom collections import defaultdict\n\nn = int(input())\nq = [int(x) for x in input().split()]\n\np = []\nfor i in range(n-1):\n    p.append(q[i] - q[i+1])\n\nprint(p)"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"3 1 2\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1 2\"\nassert solution(stdin) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin=input,\n) == '-1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3 1 2\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 1 1 2\"\nassert solution(stdin) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3 1 2\""
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3\\n5\\n-2\\n1\\n1\\n1\\n1') == '1\\n-1'\nassert solution('3\\n5\\n-2\\n1\\n1\\n1\\n1\\n1') == '-1'\nassert solution('3\\n5\\n-2\\n1\\n1\\n1\\n1') == '1'\nassert solution('4\\n1 1 1 1\\n-1 2 2 2\\n1 2 3 3 3\\n-1 3 4 4 4') == '1\\n-1'\nassert solution('4\\n1 1 1 1\\n-1 2 2 2\\n1 2 3 3 3\\n-1 3 4 4 4') == '-1'\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\nprint(solution(input()))\n\nprint(\"The code has been contributed by Shreyansh Kumar\")\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n  ['3', '1', '2', '3', '4', '5']) == '1'\nassert solution(\n  ['3', '1', '2', '3', '4', '5']) == '2'\nassert solution(\n  ['3', '1', '2', '3', '4', '5']) == '2'\nassert solution(\n  ['3', '1', '2', '3', '4', '5']) == '2'\nassert solution(\n  ['1', '2', '3', '4', '5', '6']) == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, 5, 2, 3, 2, 1) == 1\nassert solution(5, 2, 1, 2, 1, 2) == 2\nassert solution(5, 2, 1, 2, 2, 2) == 2\nassert solution(5, 2, 1, 2, 2, 3) == 2\nassert solution(5, 2, 1, 2, 2, 4) == 2\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\""
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n\n\n\nThe solution problem is to find the minimum number of coins required to move all chips to the same coordinate. \n\n------Input------\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of chips.\n\nThe second line of the input contains $n$ integers $x_1, x_2, \\dots, x_n$ ($1 \\le x_i \\le 10^9$), where $x_i$ is the coordinate of the $i$-th chip.\n\n\n------Output------\n\nPrint one integer \u2014 the minimum number of coins required to move all $n$ chips to the same coordinate.\n\n\n------Examples-----\nInput\n3\n1 2 3\n\nOutput\n1\n\nInput\n5\n2 2 2 3 3\n\nOutput\n2\n\n\n-----Note-----\n\nIn the first example you need to move the first chip by $2$ to the right and the second chip by $1$ to the right or move the third chip by $2$ to the left and the second chip by $1$ to the left so the answer is $1$.\n\nIn the second example you need to move two chips with coordinate $3$ by $1$ to the left so the answer is $2$.\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3,5) == 2\nassert solution(5,5) == 2\n\nassert solution(3,7) == 1\nassert solution(7,3) == 1\n\nassert solution(5,7) == 2\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['1', '2', '3', '4', '5']) == '1'\nassert solution(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']) == '5'\nassert solution(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']) == '1'\nassert solution(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']) == '1'\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(a) == 5, \"returned wrong value\"\nassert solution(b) == 10, \"returned wrong value\"\nassert solution(c) == 4, \"returned wrong value\"\nassert solution(d) == 3, \"returned wrong value\"\nassert solution(e) == 2, \"returned wrong value\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10\") == 5\nassert solution(\"9\") == 0\nassert solution(\"2\") == 0\nassert solution(\"3\") == 0\nassert solution(\"4\") == 0\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10\") == 5\nassert solution(\"10\") == 4\nassert solution(\"10\") == 3\nassert solution(\"10\") == 2\nassert solution(\"10\") == 1\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"6\") == \"0\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0) == 0\n\n\n\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == 5\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10\") == 5\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(10) == 5\nassert solution(2) == 2\nassert solution(3) == 2\nassert solution(4) == 2\nassert solution(5) == 5\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 0 0\") == 0\nassert solution(\"1 0 0\") == 0\nassert solution(\"1 0 0\") == 0\nassert solution(\"1 0 0\") == 0\nassert solution(\"1 0 0\") == 0\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('a_1 a_1 a_3 a_1 a_1 a_2') == '0'\nassert solution('a_2 a_2 a_1 a_3 a_1 a_1 a_2') == '0'\nassert solution('a_1 a_2 a_3 a_1 a_1 a_2') == '0'\nassert solution('a_1 a_2 a_3 a_3 a_1 a_1 a_2') == '0'\nassert solution('a_1 a_3 a_2 a_1 a_1 a_1 a_2') == '0'\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0 1 1\") == 0\nassert solution(\"5 5 5\") == 5\nassert solution(\"5 5 5\") == 5\nassert solution(\"5 5 5\") == 5\nassert solution(\"5 5 5\") == 5\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\n        [514, 514, 514],\n        [514, 514, 514],\n        [514, 514, 514]\n    ]\n) == \"0 0\""
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0 1 1\") == \"0 1\"\nassert solution(\"1 0 1\") == \"0 1\"\nassert solution(\"0 0 0\") == \"0 0\"\nassert solution(\"1 0 0\") == \"0 0\"\nassert solution(\"1 1 1\") == \"0 1\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0 15\"\n\n\nassert solution(stdin) == \"0 15\"\n\n\nassert solution(stdin) == \"0 15\"\n\n\nassert solution(stdin) == \"0 15\"\n\n\nassert solution(stdin) == \"0 15\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"0 15\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == 1\nassert solution(4) == 7\nassert solution(6) == 4\nassert solution(8) == 3\nassert solution(20) == 4\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"5 5 1 3 2\"\nassert solution(\"5 3 4 -1 2 -3 5 4 8\") == \"5 4 5 8\"\nassert solution
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"3\"\n\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '3 4'\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3 4\"\nassert solution(\"11 -5 -4 -3 -2 0 1 2 3 4 5\") == \"2 3\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3 4\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3 4\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3 4\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin=\"11\"\n) == \"1 2 3 4 5\"\nassert solution(\n    stdin=\"11\"\n) == \"1 3 4 5\"\nassert solution(\n    stdin=\"11\"\n) == \"1 1 1 1\"\nassert solution(\n    stdin=\"11\"\n) == \"1 1 1\"\nassert solution(\n    stdin=\"11\"\n) == \"1 1\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3 4\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"5 3\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3 4\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3 4\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3 4\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"1\"\nassert solution(\"11\") == \"1 1 1 1\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 3') == 'NO'\nassert solution('1 1 2') == 'NO'\nassert solution('1 3') == 'NO'\nassert solution('1 4') == 'NO'\nassert solution('1 3 1') == 'YES'\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'NO', 'The algorithm should return \"NO\"'\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 'NO'\nassert solution(2) == 'YES'\nassert solution(4) == 'NO'\nassert solution(3) == 'NO'\nassert solution(1) == 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('3 2 1') == 'YES'\nassert solution('3 3') == 'NO'\nassert solution('3 3 2') == 'NO'\nassert solution('3 2 3') == 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, [1, 2, 3]) == \"YES\"\nassert solution(3, [3, 1, 2]) == \"NO\"\n\nassert solution(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == \"YES\"\nassert solution(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == \"NO\"\nassert solution(10, [1, 3, 2, 4, 5, 6, 7, 8, 9, 10]) == \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1 3 2 4 5 6 2 4 8 5 7 9 4 5 6 1 6 5 8 9\"]) == \"YES\"\nassert solution([\"3 1 2\"]) == \"NO\"\nassert solution([\"1\"]) == \"YES\"\nassert solution([\"2\"]) == \"NO\"\nassert solution([\"3 4 3 5 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 4 2') == 'YES'\nassert solution('3 4 5') == 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\n        \"1 4\",\n        \"2 5 3\",\n        \"3 4 1\",\n        \"3 4 2\",\n        \"3 2 3 2\",\n        \"4 2 2 3\",\n        \"5 2 2 1\",\n    ]\n) == \"YES\"\n\nassert solution(\n    [\n        \"4 2\",\n        \"3 4 1\",\n        \"2 4 1\",\n        \"5 2 3\",\n    ]\n) == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2, 3) == \"NO\"\nassert solution(3, 3) == \"YES\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12345\"\nassert solution(stdin) == \"123\"\nassert solution(stdin) == \"23\"\nassert solution(stdin) == \"23\"\nassert solution(stdin) == \"23\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(6, \"abcdef\") == \"4\"\nassert solution(4, \"abcd\") == \"3\"\nassert solution(4, \"abc\") == \"3\"\nassert solution(4, \"abd\") == \"4\"\nassert solution(4, \"abcd\") == \"0\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4abc\") == \"3\"\nassert solution(\"3abc\") == \"3\"\nassert solution(\"1abc\") == \"1\"\nassert solution(\"3abd\") == \"-1\"\nassert solution(\"3abd\") == \"-1\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5') == '-1'\nassert solution('5abcdef') == 3\nassert solution('1') == 0\nassert solution('0') == -1"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('abcdef') == '4'\nassert solution('abcd') == '0'\nassert solution('abcd') == '1'\nassert solution('abcd') == '-1'\nassert solution('abdcef') == '2'\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"\"\n\nInput\n4\nabcd\naccd\nabefef\n\nOutput\n4\n2 3 4 4 0\n\"\"\"\n\nclass Solution:\n    def numberOfMoves(self, s: str, t: str) -> int:\n        \n        pass"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"abcdef\") == \"abcd\"\nassert solution(\"abcd\") == \"abcde\"\nassert solution(\"abcd\") == \"bcde\"\nassert solution(\"abc\") == \"cde\"\nassert solution(\"\") == \"cde\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, \"ba\") == \"SPPSPSPS\"\nassert solution(5, \"a\") == \"P\"\nassert solution(3, \"aa\") == \"P\"\nassert solution(3, \"abab\") == \"P\"\nassert solution(2, \"ba\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"SPPSPSPS\", \"The string which Ivan guessed is not consistent with the given string.\"\n\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n\n-----Time Limit-----\n3.6s\n\n-----Solved in:\n36ms (53.53%)\n\n-----Submissions:\n2\n\n\"\"\",\n\n\"\"\"673. Time for Dummies:\n\nGiven an array of length $n$, the position of any Dummy is represented by an array of size $2n$ where $0 <= x <= n$ where $x$ is a variable in the Dummy. The value of x is always smaller than $n$ (i.e. at least one Dummy is contained in the array). The array may contain already repeated values of the same variable, which will cause the Dummy to become impossible to contain again. Return an array of length $n$ whose elements are all positive integers.\n\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 100$) \u2014 the length of the array.\n\nThe next $2n-2$ lines contain the array.\n\nThe next $2n-2$ lines contain the value of the variable $x$.\n\nOutput\nArray of length $n$ whose elements are all positive integers.\n\n\n\n-----Output-----\n\nPrint the array.\n\n\n-----Constraints-----\n\n0 <= x <= 10^6\n\nAssume that all the elements in the array are unique.\n\nFor example, the array is already in the form of array{0, 1, 0, 2, 3}.\n\nIf the number of Dummy is less than $2n$, then the array will be invertible by removing the Dummy from the array, i.e. the last Dummy of the array will be deleted.\n\n\n\nFor a Dummy whose value is less than $n$, the remaining elements are stored in the array. In order to preserve the array, the last Dummy is removed.\n\n\n-----Example 1-----\n\nInput\n\n1\n2\n3\n4\n\nOutput\n\n[4, 3, 2, 1]\n\n\n\n-----Constraints-----\n\n1 <= $2n$ <= $n$ <= 1000\n\n\n\n-----Sample 1-----\n\nSample Input\n\n1\n2\n3\n4\n\nSample Output\n\n[4, 3, 2, 1]\n\n\n\n-----Sample 2-----\n\nSample Input\n\n2\n0\n1\n1\n\nSample Output\n\n[0, 1]\n\n\n\n-----Constraints-----\n\n1 <= $2n$ <= $n$ <= 1000\n\n\n\n-----Sample 3-----\n\nSample Input\n\n5\n0\n1\n2\n3\n4\n5\n\nSample Output\n\n[0, 2, 3, 4, 5]\n\n\n\n-----Sample 4-----\n\nSample Input\n\n1\n0\n1\n2\n\nSample Output\n\n[0, 1]\n\n\n\n-----Sample 5-----\n\nSample Input\n\n5\n0\n1\n2\n3\n4\n5\n\nSample Output\n\n[0, 1, 2, 3, 4, 5]\n\n\n\n-----Sample 6-----\n\nSample Input\n\n4\n0\n1\n2\n3\n\nSample Output\n\n[0, 1, 3, 4]\n\n\n\n-----Sample 7-----\n\nSample Input\n\n4\n0\n1\n2\n3\n4\n\nSample Output\n\n[0, 2, 3, 4]\n\n\n\n-----Sample 8-----\n\nSample Input\n\n3\n0\n1\n2\n\nSample Output\n\n[0, 1, 2]\n\n\n\n-----Sample 9-----\n\nSample Input\n\n4\n0\n1\n2\n3\n4\n\nSample Output\n\n[0, 1, 2, 3]\n\n\n\n-----Sample 10-----\n\nSample Input\n\n1\n0\n1\n2\n3\n\nSample Output\n\n[0, 1]\n\n\n\n-----Sample 11-----\n\nSample Input\n\n1\n0\n1\n2\n3\n4\n\nSample Output\n\n[0, 1, 2, 3]\n\n\n\n-----Sample 12-----\n\nSample Input\n\n5\n0\n1\n2\n3\n4\n5\n\nSample Output\n\n[0, 1, 2, 3, 4]\n\n\n\n-----Sample 13-----\n\nSample Input\n\n6\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\nSample Output\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n\n\n\n-----Sample 14-----\n\nSample Input\n\n6\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"SPPSPSPS\"\nassert solution(inp) == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"SPPSPSPS\", \"No\"\nassert solution(stdin) == \"PPSSPSPS\", \"Yes\"\nassert solution(stdin) == \"PSPSPSPS\", \"No\"\nassert solution(stdin) == \"SPSPSPSPS\", \"Yes\""
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"SPPSPSPS\"\nassert solution(stdin) == \"PSPS\"\nassert solution(stdin) == \"SPSP\"\nassert solution(stdin) == \"SP\"\nassert solution(stdin) == \"S\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"baa\") == \"PPSPSPS\"\nassert solution(\"baa\") == \"SPSP\"\nassert solution(\"baa\") == \"PS\"\nassert solution(\"baa\") == \"P\"\nassert solution(\"baa\") == \"S\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"baab\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"a\") == \"P\"\nassert solution(\"a\") == \"P\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"PPSPSPS\"\nassert solution(stdin) == \"PS\"\nassert solution(stdin) == \"P\"\nassert solution(stdin) == \"S\"\nassert solution(stdin) == \"S\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"SPPPPSPPPSPS\"\nassert solution(stdin) == \"PSPSPSP\"\nassert solution(stdin) == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"ba\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PPSP\"\nassert solution(\"abab\") == \"PPSPSPS\"\nassert solution(\"aba\") == \"PPSP\"\nassert solution(\"a\") == \"PS\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2 4 6 8 10') == '1'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('2 2 4 5 6 7 8 9 10') == '0'\nassert solution('2 3 3 4 5 6 7 8 9 10') == '5'\nassert solution('2 2 2 3 2 3 2 3 2 3 2') == '5'\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2 4 6 8 10) == 1\nassert solution(2 4 5 3) == 0"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5 2 4\", \"3 5 5\", \"1 3 3\"]) == \"1\"\nassert solution([\"1 3 5\", \"2 3 3\", \"3 3 3\"]) == \"2\"\nassert solution([\"1 3 4\", \"3 3 3\", \"3 3 3\"]) == \"3\"\nassert solution([\"1 3 2\", \"2 3 3\", \"3 3 3\"]) == \"1\"\nassert solution([\"1 2 3\", \"3 3 3\", \"3 3 3\"]) == \"2\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 4 6 8 10') == 1\nassert solution('1 2 1 1 1') == 2\nassert solution('3 3 3 3 3') == 3\nassert solution('4 4 4 4 4') == 4\nassert solution('5 5 5 5 5') == 5\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 10\nExplanation\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n-----Time Complexity-----\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(1)\n\nO(1)\n\nO(1)\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nO(n)\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn\n\nO(n)\n\nn"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '6'\nassert solution(stdin) == '10'\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 0, \"should return 0\"\nassert solution(input) == 1, \"should return 1\"\nassert solution(input) == 2, \"should return 2\"\nassert solution(input) == 3, \"should return 3\"\nassert solution(input) == 4, \"should return 4\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 3) == 2\n\nassert solution(4, 2) == 0\n\nassert solution(4, 5) == 0\n\nassert solution(2, 2) == 0\n\nassert solution(2, 5) == 0"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"solution() failed\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1 1 0 1 1 0 1 0 1 0\", \"1 1 0 0 0\"]) == \"0\"\nassert solution([\"1 0 0 0 0\"]) == \"0\"\nassert solution([\"1 1 0 1 0\"]) == \"0\"\nassert solution([\"1 0 0 1 0\"]) == \"0\"\nassert solution([\"0 0 0 1 0\"]) == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n\n\nExample 2\n\nInput\n5\n1 1 0 1 1 0 1 0 1 0\n\nOutput\n5\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\", \"1\", \"0\", \"0\", \"1\", \"0\", \"0\", \"0\", \"1\", \"1\", \"0\", \"0\", \"0\", \"0\"]) == \"0\"\nassert solution([\"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\", \"1\", \"0\", \"0\", \"0\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"0\", \"0\", \"0\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\"]) == \"1\"\nassert solution([\"1\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\", \"0\", \"0\", \"0\", \"0\", \"1\"]) == \"0\"\nassert solution([\"1\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\", \"0\", \"1\", \"0\"]) == \"1\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 5 0 0\") == \"2\"\nassert solution(\"5 5 0 1\") == \"0\"\nassert solution(\"4 4 0 1\") == \"0\"\nassert solution(\"4 4 0 0\") == \"0\"\nassert solution(\"1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1, 1, 1, 1, 1) == 2\nassert solution(1, 1, 0, 1, 0) == 0\nassert solution(1, 1, 0, 0, 0) == 0\nassert solution(5, 2, 0, 0, 0) == 0\nassert solution(5, 2, 2, 0, 0) == 2\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\n\n\n-----Alternatives-----\n\nThe next one is a more straightforward version of the code above.\n\n\n-----Constraints-----\n\n1 <= n <= 100\n\n1 <= a_i <= 3\n\n0 <= k < n\n\n\n-----Time Complexity-----\n\nO(n) for each operation.\n\nO(n) for each operation.\nO(n) for each operation.\n\n\n-----Space Complexity-----\n\nO(1) to store the array.\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '4'\n\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 13\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, [2, 4, 6, 2, 10]) == 1\nassert solution(6, [6, 90, 12, 18, 30, 18]) == 4\nassert solution(6, [6, 90, 12, 18, 30, 18]) == 4\nassert solution(6, [6, 90, 12, 18, 30, 18]) == 4\nassert solution(5, [1, 2, 3, 4, 5]) == 4\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"stdin error\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10 20 30 40 50 60 70 80 90 100\", \"10\") == \"60\"\nassert solution(\"10 20 30 40 50 60 70 80 90 100\", \"20\") == \"90\"\nassert solution(\"10 20 30 40 50 60 70 80 90 100\", \"30\") == \"20\"\nassert solution(\"10 20 30 40 50 60 70 80 90 100\", \"40\") == \"10\"\nassert solution(\"10 20 30 40 50 60 70 80 90 100\", \"50\") == \"0\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == 1\nassert solution(\"6 90 12 18 30 18\") == 4\nassert solution(\"6 90 12 18 30 18\") == 6\nassert solution(\"1 2 3 4 5\") == 3\nassert solution(\"1 2 3 4 5\") == 2\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '4'\nassert solution(stdin) == '6'\nassert solution(stdin) == '90'\nassert solution(stdin) == '12'\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"5\"\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1000') == 2\nassert solution('10') == 1\nassert solution('2') == 1\nassert solution('10') == 2\nassert solution('5') == 2\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 4 3 3 2\") == \"2\"\nassert solution(\"1 4 3 3 3 1\") == \"3\"\nassert solution(\"1 4 3 3 3 1 2\") == \"2\"\nassert solution(\"1 1 1 1 1 2\") == \"1\"\nassert solution(\"1 1 1 1 1 2 3\") == \"1\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n\n\n-----Constraints-----\n1 <= n <= 100\n1 <= a_1, a_2,..., a_n <= 100\n\n\n-----Submissions-----\n644 ms\n2580 kB\n\nclass Solution:\n    def minimumDistribution(self, coins: List[int]) -> int:\n        n = len(coins)\n        a = [0] * n\n        for i in range(n):\n            a[i] = coins[i]\n        dp = [0] * n\n        for i in range(1, n):\n            dp[i] = (dp[i - 1] + a[i - 1]) % 1000000007\n        for i in range(n):\n            dp[i] = (dp[i] + a[i]) % 1000000007\n        return dp[n - 1]\n\nRuntime: 32 ms, faster than 92.71% of Python3 online submissions for Minimum Number of Coins to Get The Value of a Coin.\nMemory Usage: 14.2 MB, less than 94.65% of Python3 online submissions for Minimum Number of Coins to Get The Value of a Coin.\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 3 2\") == 5\n\n\n-----Constraints-----\n1 <= n <= 100\n\n0 <= a_i < 10^7\n\nExamples\nExplanation\n\nInput\n1\n2 2 4 2\n\nOutput\n1\n\nExplanation\n\nInput\n5\n1 2 4 2 4 3 2\n\nOutput\n1\n\nExplanation\n\nInput\n3\n3 4 3 2 4\n\nOutput\n2\n\n\n-----Alternatives-----\n\nhttps://www.geeksforgeeks.org/minimum-coins-to-distribute-coins-with-a-given-set-of-coins/\n\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(strToInt(input())) == int(input())\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0 1 0 0 1\") == \"3\"\nassert solution(\"0 1 0 0 0\") == \"2\"\nassert solution(\"0 1 0 0 1\") == \"3\"\nassert solution(\"0 1 0 0 0\") == \"2\"\nassert solution(\"0 1 0 0 0\") == \"0\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('10 3') == 3\nassert solution('5 10') == -1\nassert solution('0 0 0 0 0 0 0 0 0 1') == 0\nassert solution('0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1') == -1\nassert solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 1 1') == 3\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n\n\"\"\"\n\nn, r = map(int, stdin.split())"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"6 3\") == 3\nassert solution(\"5 3\") == 3\nassert solution(\"10 3\") == -1\n\nassert solution(\"5 10\") == 3\nassert solution(\"10 3\") == 2\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"7 3\") == \"3\"\nassert solution(\"5 3\") == \"3\"\nassert solution(\"10 3\") == \"3\"\nassert solution(\"15 3\") == \"3\"\nassert solution(\"1\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 3\") == \"3\"\nassert solution(\"5 10\") == \"2\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"10 3\") == -1\n\n\nclass Solution:\n    def canWarmUp(self, n: int, r: int, a: List[int]) -> int:\n        # @TODO: use a queue to remember which heater we are at\n        # @TODO: if a[i] > 0, schedule one heater at the position i, then schedule all the heater at i\n        # @TODO: if a[i] == 0, schedule one heater at the position i\n        def schedule(heaters):\n            # @TODO: schedule all the remaining heater at the same position\n            q = [heaters]\n            for i in range(n - 1, -1, -1):\n                heaters_at_i = set(q)\n                for heater in q:\n                    if a[heaters_at_i.pop()] > 0:\n                        heaters_at_i.add(heaters)\n                q = list(heaters_at_i)\n            return q\n        \n        # @TODO: create a function that checks if we can warm up the whole house\n        # @TODO: find out if we can warm up the whole house\n        def canWarmUp(heaters, a):\n            heaters = set(heaters)\n            schedule(heaters)\n            for i in range(n):\n                if a[i] > 0:\n                    if len(heaters) >= r:\n                        return False\n                    elif a[i] == 0:\n                        heaters = set(heaters)\n                        heaters.discard(i)\n                        return len(heaters) > 0\n                    else:\n                        heaters.discard(i)\n                        a[i] -= 1\n                        if len(heaters) < r:\n                            return False\n            return True\n        \n        # @TODO: create a function that checks if we can warm up the whole house\n        # @TODO: find out if we can warm up the whole house\n        def canWarmUp(heaters, a):\n            heaters = set(heaters)\n            schedule(heaters)\n            # @TODO: schedule all the remaining heater at the same position\n            for i in range(n):\n                if a[i] > 0:\n                    if len(heaters) >= r:\n                        return False\n                    elif a[i] == 0:\n                        heaters.discard(i)\n                        return len(heaters) > 0\n                    else:\n                        heaters.discard(i)\n                        a[i] -= 1\n                        if len(heaters) < r:\n                            return False\n            return True\n            \n        # @TODO: check if we can warm up the whole house\n        # @TODO: if we can, return the number of heaters required to warm up the whole house\n        # @TODO: if we can't, return -1\n        def schedule_all_heaters(a, n, r, heaters):\n            # @TODO: if we can, schedule all the remaining heater at the same position\n            # @TODO: schedule all the remaining heater at the same position\n            # @TODO: schedule all the remaining heater at the same position\n            # @TODO: schedule all the remaining heater at the same position\n            # @TODO: schedule all the remaining heater at the same position\n            for i in range(n):\n                if a[i] > 0:\n                    if len(heaters) >= r:\n                        return 0\n                    elif a[i] == 0:\n                        heaters.discard(i)\n                        a[i] -= 1\n                        return len(heaters) > 0\n                    else:\n                        heaters.discard(i)\n                        a[i] -= 1\n                        if len(heaters) < r:\n                            return -1\n            return 1\n        \n        return schedule_all_heaters(a, n, r, heaters)\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 1') == 3\nassert solution('5 3') == 2\nassert solution('10 3') == -1\nassert solution('5 10') == 3\nassert solution('0 0 0 0 0') == -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"6 2\"\n) == \"3\"\nassert solution(\n    \"5 3\"\n) == \"2\"\nassert solution(\n    \"5 10\"\n) == \"3\"\nassert solution(\n    \"10 3\"\n) == \"2\"\nassert solution(\n    \"10 10\"\n) == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(6, 2) == 3\nassert solution(5, 3) == -1\nassert solution(10, 2) == -1\nassert solution(20, 10) == 3\nassert solution(10, 4) == 2\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10 3') == 3\nassert solution('5 10') == -1"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, 5) == 2\nassert solution(3, 4) == 2\nassert solution(2, 2) == 0\nassert solution(1, 6) == 0\nassert solution(0, 10) == 0\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == \"3\"\nassert solution(4) == \"3\"\nassert solution(5) == \"3\"\nassert solution(7) == \"3\"\nassert solution(11) == \"3\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3) == 3\nassert solution(2) == 2\nassert solution(1) == 1\nassert solution(3) == 3\nassert solution(2) == 1\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()), \"\"\n\n-----Quick Sort-----\nGiven is a positive integer N.\n\nPrint the Nth sorted tuples of elements from the original array.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n\nN\n\n-----Output-----\nPrint the Nth sorted tuples of elements.\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n1 2 3\n\n-----------------\n\n3\n\n-------------------------------------------------\n\nGiven is a positive integer N.\n\nPrint the Nth sorted tuples of elements.\n\nGiven array is in sorted order and it's size is even.\n\nGiven array is in sorted order and it's size is odd.\nGiven array is not sorted.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven array is already sorted in ascending order.\nGiven"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"3\"\nassert solution(\"10\") == \"1\"\nassert solution(\"1000\") == \"3\"\nassert solution(\"1000\") == \"1\"\nassert solution(\"1000000000\") == \"1\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"3\"\nassert solution(\"5\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == str(3)\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3) == \"1\"\nassert solution(4) == \"0\"\nassert solution(5) == \"3\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution((\"(()\",)) == 0\nassert solution((\"((()\",)) == 0\nassert solution((\"()\",)) == 1\nassert solution((\"))()\",)) == 2\nassert solution((\"((())\",)) == 1\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution("
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\n\n\n-----Constraints-----\n1 <= n <= 10^6\ns_n is a valid bracket sequence.\n\nmy_input = \"2)((((((((((((((()\n\nsolution(my_input) == 1\n\n\n-----Presentation-----\n\nInput\n2\n()()()\n\nOutput\n3\n\nInput\n4\n()()()\n\nOutput\n4\n\nInput\n8\n(((((((((((((((((((((((((((((((((((((((()\n\nsolution(my_input) == 4\n\n'''\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"((()\")) == 2\nassert solution(\"()())\") == 1\nassert solution(\"((((((((((()))))))))))\") == 4\nassert solution(\"((((((((((((()))))))))))))))\") == 9\nassert solution(\"((((((((((((()))))))))))))))\") == 12\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"(()))\") == 2\n\n\n\n\"\"\"\n\n\nclass Solution:\n    def countMatchingBrackets(self, s: str) -> int:\n        return len([i for i in range(len(s)) if s[i] == \"(\"])\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"((()\") == 1, \"1\"\nassert solution(\"((()\") == 1, \"1\"\nassert solution(\"(()\") == 1, \"1\"\nassert solution(\"(()(\") == 1, \"1\"\nassert solution(\"((((()\") == 0, \"1\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \n    ) == 0\n\nassert solution(\n    \n    ) == 0\n\nassert solution(\n    \n    ) == 0\n\nassert solution(\n    \n    ) == 0\n\nassert solution(\n    \n    ) == 0"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\n\n-----Constraints-----\n1 <= n <= 10^6\n\n1 <= s.length <= 10^5\ns.length is the length of the input string.\ns contains one or more characters '(' and ')'.\ns is a valid bracket sequence.\n\n\"\"\""
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('(()()') == 3\n\n\"\"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"bbaba\") == 3, \"solution(s) fail\"\nassert solution(\"bbba\") == 2, \"solution(s) fail\"\nassert solution(\"baaba\") == 0, \"solution(s) fail\"\nassert solution(\"abcde\") == 3, \"solution(s) fail\"\nassert solution(\"asdfasdf\") == 2, \"solution(s) fail\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3, 'The result is not as expected.'\n\n\n-----IMPORTANT-----\nThe following test run time limit exceeded.\n\nSample Tests\n-----\n\n> python3 solution.py\nEnter a: bbab\nbb\na\n> python3 solution.py\nEnter a: baab\nbaa\na\n> python3 solution.py\nEnter a: abcde\nabcde\na\n> python3 solution.py\nEnter a: asdfasdf\nasdfasdf\na\n> python3 solution.py\nEnter a: fasd\nfasd\na\n> python3 solution.py\nThere are no non-empty substrings of $s$.\nInput\nbbaba\nbb\n\nOutput\n3\n\n> python3 solution.py\nEnter a: bbab\nbb\na\n> python3 solution.py\nThere are no non-empty substrings of $s$.\nInput\nbbaba\nbb\na\n> python3 solution.py\nThere are no non-empty substrings of $s$.\nInput\nbaaba\nab\na\n> python3 solution.py\nThere are no non-empty substrings of $s$.\nInput\nabcde\nabcde\na\n> python3 solution.py\nThere are no non-empty substrings of $s$.\nInput\nasdfasdf\nasdfasdf\na\n> python3 solution.py\nThere are no non-empty substrings of $s$.\n\"\"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"aababcdeeeafdgfdehgfadhgfadhhgfadhhgfahfadghfadfgfadhafhafhafdgfadhafhafdafadhafdfadahfadhafdgfafdgfadhafdahfadgfadhafdahfadhafdahfafdhafdahfadhafdahadahafdhafdahafdahafdahadahahafdahadahahafdhafdahahahafdahahahadhahafdhahadahahahahadhahahadhahadhahahadhahahadhahadhahahadhahadahahadhahahadhahadhahahadhahahadhahahahadhahahadhahadhahahadhahadhahahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadhahadh"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(st := input()) == len(st)\n\n\nprint('solution OK')\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('abcde') == 3\nassert solution('asdfasdf') == 0\nassert solution('abcbabca') == 2\nassert solution('ddbbbbca') == 2\nassert solution('abcbabca') == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('abcde') == 3\nassert solution('bbabbb') == 1\nassert solution('abababc') == 0\nassert solution('abababca') == 0\nassert solution('abababcb') == 2\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n\nInput\naaabbb\nab\n\nOutput\n0\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"ababcbdbb\"\n    \"ababcbdbb\"\n    \"ababcbdbb\"\n    \"ababcbdbb\"\n    \"ababcbdbb\"\n    \"ababcbdbb\"\n) == 3"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5, \"expected 5, got {}\".format(solution(stdin))"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('test') == 3\nassert solution('tst') == 5\nassert solution('tt') == 3\nassert solution('ttt') == 3\nassert solution('ttttttttttttttt') == 3\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution( \"1 2 1 1\") == \"2\"\nassert solution( \"2 2 1 1\") == \"2\"\nassert solution( \"1 2 3 1\") == \"1\"\nassert solution( \"2 2 3 1\") == \"1\"\nassert solution( \"2 4 3 1\") == \"1\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin=\"1 2 1 1\"\n) == \"2\"\nassert solution(\n    stdin=\"2 1 1 1\"\n) == \"2\"\nassert solution(\n    stdin=\"2 2 2 2\"\n) == \"2\"\nassert solution(\n    stdin=\"3 3 3 2\"\n) == \"2\"\nassert solution(\n    stdin=\"5 3 3 3\"\n) == \"5\""
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,1,1) == 1\nassert solution(2,1,1) == 2\nassert solution(1,1,2) == 1\nassert solution(2,2,1) == 2\nassert solution(2,2,2) == 2\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 1 1\") == \"1\"\nassert solution(\"5 1 2\") == \"5\"\nassert solution(\"5 3 5\") == \"15\"\nassert solution(\"10 1 5\") == \"30\"\nassert solution(\"2 3 1\") == \"3\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(s) == \"2\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"2 1 1 1\") == \"2\"\nassert solution(\"2 4 3 1\") == \"4\"\nassert solution(\"1 4 1 4\") == \"1\"\nassert solution(\"5 4 3 4\") == \"5\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n    )\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1,1,1) == 1\nassert solution(2,1,1) == 2\nassert solution(3,2,1) == 2\nassert solution(3,3,1) == 3\nassert solution(1,2,3) == 6\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == str(2)\n\"\"\"\nimport sys"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n2\n\"\"\"\n\nimport sys\nfrom math import gcd\nfrom math import inf\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4) == \"1\"\nassert solution(1) == \"0\"\nassert solution(9) == \"1\"\nassert solution(6) == \"0\"\nassert solution(10) == \"2\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '2'\n\n-----Medium Scenario-----\nSome problems are divided into 2 parts, the hard part is for ARCs and the hard part is for ABCs.\n\nNote:\n - N is an even number.\n - 0 < d_i < 10^5\n - 1 \\leq d_i \\leq 10^5\n - N is an even number.\n - 0 < d_i < 10^5\n\n\"\"\"\n\n\"\"\"\n12 5 7\n9 1 3 4 5 6\n\n1.  0,1,2,3,4,5,6\n2.  1,2,3,4,5,6\n3.  1,2,3,4,6\n4.  2,3,4,6\n5.  2,3,4,6\n6.  2,3,6\n\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 4 5 6 7\"), \"2\"\nassert solution(\"2 6 7 9\"), \"3\"\nassert solution(\"10 5\"), \"4\"\nassert solution(\"15 4 5\"), \"3\"\nassert solution(\"6 3\"), \"1\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 2 7\") == \"3\"\nassert solution(\"3 1 2 1\") == \"4\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('7 24 21 23') == '3'\nassert solution('7 24 21 23 1') == '3'\nassert solution('7 24 21 23 2') == '4'\nassert solution('7 24 21 23 3') == '4'\nassert solution('7 24 21 23 4') == '5'\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 12\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 6 5 10 3\") == \"8\"\nassert solution(\"1 5 7 1 4\") == \"8\"\nassert solution(\"0 1 0 0 0\") == \"0\"\nassert solution(\"0 1 0 0 0 1\") == \"1\"\nassert solution(\"0 1 0 0 0 1 1\") == \"2\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"7 24 21 23\"\n) == \"3\"\nassert solution(\n    \"16 17 14 20 20 11 22\"\n) == \"3\"\nassert solution(\n    \"15\"\n) == \"15\"\nassert solution(\n    \"15 + 16 = 7\"\n) == \"15 + 16 = 21\"\nassert solution(\n    \"15 + 19 = 23\"\n) == \"23 + 21 = 24\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"7 24 21 23\") == 3\nassert solution(\"16 17 14 20 20 11 22\") == 3\nassert solution(\"16 17 14 20 20 11 22\") == 3\nassert solution(\"16 17 14 20 20 11 22\") == 3\nassert solution(\"16 17 14 20 20 11 22\") == 3\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('7 24 21 23') == '3'\nassert solution('7 24 21 23 4') == '3'\nassert solution('7 24 21 23 4') == '6'\nassert solution('7 24 21 23 4') == '6'\nassert solution('7 24 21 23 4') == '6'\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution( \"7 24 21 23\" ) == \"3\"\nassert solution( \"16 17 14 20 20 11 22\" ) == \"3\"\nassert solution( \"7 14 20 11 22 15 22\" ) == \"15\"\nassert solution( \"17 20 11 22 15 16\" ) == \"23\"\nassert solution( \"21 19 20 22 23 21\" ) == \"23\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1 1\", \"1 1\", \"1 1\", \"1 1\"]) == \"3\"\nassert solution([\"1 4\", \"4 4\", \"1 4\", \"1 4\"]) == \"1\"\nassert solution([\"1 2\", \"2 2\", \"1 2\", \"1 2\", \"1 2\"]) == \"3\"\nassert solution([\"1 2\", \"2 1\", \"1 2\", \"1 2\", \"1 2\"]) == \"3\"\nassert solution([\"1 2\", \"1 2\", \"1 1\", \"1 2\", \"1 1\"]) == \"1\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('6\\n5\\n10\\n20\\n50\\n110\\n150\\n199') == 4\n\n\n\n-----Constraints-----\n\n0 < n \u2264 10^5\n\n\n-----Time Limit Exceeded-----\n\nTime limit exceeded.\n\n\n------Solutions-----\n\nInput 1:\n5\n3 2\n3\n\nInput 2:\n10\n4 7\n5 10\n6\n7\n7\n5 50\n6\n7\n12 20\n14 21\n15 23\n\nOutput 1:\n7\n\nInput 3:\n2\n1\n4\n2\n\nOutput 3:\n1\n\n\n\n-----Medium-----\n\nInput 1:\n2\n4\n5\n2\n4\n3\n\nInput 2:\n3\n3\n\nInput 3:\n5\n2\n4\n2\n4\n\nOutput 1:\n5\n\nInput 4:\n2\n5\n3\n3\n\nInput 5:\n2\n3\n4\n3\n4\n5\n\nOutput 2:\n2\n\nInput 6:\n4\n3\n2\n4\n3\n\nOutput 3:\n1\n\n-----Medium-----\n\nInput 1:\n1\n2\n3\n4\n\nInput 2:\n4\n2\n\nInput 3:\n1\n1\n\nOutput 1:\n2\n\nInput 4:\n1\n1\n2\n3\n\nOutput 2:\n1\n\n-----Medium-----\n\nInput 1:\n1\n1\n2\n\nInput 2:\n2\n3\n\nInput 3:\n2\n\nInput 4:\n3\n1\n\nOutput 1:\n1\n\n-----Medium-----\n\nInput 1:\n1\n3\n1\n\nInput 2:\n2\n\nInput 3:\n2\n\nInput 4:\n2\n\nOutput 1:\n1\n\n-----Medium-----\n\nInput 1:\n1\n2\n3\n\nInput 2:\n1\n1\n\nInput 3:\n1\n3\n\nOutput 1:\n1\n\n-----Medium-----\n\nInput 1:\n1\n2\n3\n\nInput 2:\n2\n3\n\nInput 3:\n1\n1\n\nOutput 1:\n2\n\n-----Medium-----\n\nInput 1:\n2\n3\n4\n\nInput 2:\n1\n2\n\nInput 3:\n3\n1\n\nOutput 1:\n3\n\n-----Medium-----\n\nInput 1:\n3\n1\n1\n\nInput 2:\n1\n1\n\nInput 3:\n2\n\nOutput 1:\n1\n\n-----Medium-----\n\nInput 1:\n1\n2\n3\n\nInput 2:\n1\n1\n\nInput 3:\n3\n\nOutput 1:\n1\n\n------Medium-----\n\n\nSample Input 1:\n\n5\n\n5 3 2 4\n\nSample Output 1:\n\n5\n\nSample Input 2:\n\n4\n\n5\n\nSample Output 2:\n\n3\n\n\n\n-----Medium-----\n\nInput 1:\n1\n2\n1\n\nInput 2:\n1\n3\n\nInput 3:\n2\n\nOutput 1:\n1\n\n-----Medium-----\n\nInput 1:\n2\n\nInput 2:\n2\n\nInput 3:\n1\n\nOutput 1:\n1\n\n\n\n-----Medium-----\n\nInput 1:\n4\n\nInput 2:\n4\n\nInput 3:\n3\n\nOutput 1:\n3\n\n\n\n-----Medium-----\n\nInput 1:\n1\n\nInput 2:\n1\n\nInput 3:\n1\n\nOutput 1:\n1\n\n-----Medium-----\n\nInput 1:\n1\n\nInput 2:\n2\n\nInput 3:\n1\n\nOutput 1:\n1\n\n-----Medium-----\n\nInput 1:\n1\n1\n\nInput 2:\n2\n\nInput 3:\n2\n\nOutput 1:\n2\n\n-----Medium-----\n\nInput 1:\n1\n\nInput 2:\n1\n\nInput 3:\n3\n\nOutput 1:\n3\n\n-----Medium-----\n\nInput 1:\n2\n1\n\nInput 2:\n1\n\nInput 3:\n2\n\nOutput 1:\n2\n\n-----Medium-----\n\nInput 1:\n1\n1\n\nInput 2:\n3\n\nOutput 1:\n1\n\n-----Medium-----\n\nInput 1:\n1\n3\n\nInput 2:\n3\n\nOutput 1:\n1\n\n-----Medium-----\n\nInput 1:\n2\n\nInput 2:\n3\n\nInput 3:\n1\n\nOutput 1:\n2\n\n-----Medium-----\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4, \"error\"\nassert solution(stdin) == 4, \"error\"\nassert solution(stdin) == 4, \"error\"\nassert solution(stdin) == 4, \"error\"\nassert solution(stdin) == 4, \"error\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 4\n\n-----My solution-----"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('6 4 7 12 100 150 199') == '3'\nassert solution('10 5 7 5 10') == '2'\nassert solution('10 7 100 150 199') == '1'\nassert solution('10 7 100 150 199 2') == '2'\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 3\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 3\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"1 2 7\") == \"3\"\nassert solution(\"1 5 10\") == \"3\"\nassert solution(\"2 10 50 110 250\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(a) == 1\nassert solution(a) == 2\nassert solution(a) == 3\nassert solution(a) == 4\nassert solution(a) == 5\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 7"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1 4'\nassert solution(stdin) == '1 5'\nassert solution(stdin) == '1 6'\nassert solution(stdin) == '1 7'\nassert solution(stdin) == '1 8'\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(str(i)) == j for i, j in enumerate(map(int, str(i).split()))\n\nassert solution(str(i) for i in range(100, 1000)) == j\n\nassert solution(str(i) for i in range(10001, 1000000)) == j\nassert solution(str(i) for i in range(100000, 1000000001)) == j\n\nassert solution(str(i) for i in range(10000000)) == j\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == [1,2]\nassert solution(input()) == [1,3]\nassert solution(input()) == [1,2]\nassert solution(input()) == [1,2]\nassert solution(input()) == [1,2]\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"1 3 7\"\nassert solution(\"3\") == \"3 1\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1\") == \"3\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(solution(stdin)) == \"1 2\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(list(map(int, stdin.split(' ')))) == str(1)\nassert solution(list(map(int, stdin.split(' ')))) == str(2)\nassert solution(list(map(int, stdin.split(' ')))) == str(2)\nassert solution(list(map(int, stdin.split(' ')))) == str(3)\nassert solution(list(map(int, stdin.split(' ')))) == str(5)\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1 2'\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1100110\") == \"1100110\"\nassert solution(\"101\") == \"1100110\"\nassert solution(\"111\") == \"1100110\"\nassert solution(\"111011\") == \"1100110\"\nassert solution(\"000111101\") == \"11111111111111111111111111111111111111111\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"021\""
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('100') == '1'\nassert solution('101') == '0'\nassert solution('110100') == '0'\nassert solution('110101') == '1'\nassert solution('110110') == '0'\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('121') == '021'\nassert solution('6') == '001122'\nassert solution('6') == '120120'"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input() == \"021\"), \"expected 1\"\nassert solution(input() == \"001122\"), \"expected 2\"\nassert solution(input() == \"211200\"), \"expected 3\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"001122\"\nassert solution(stdin) == \"211200\"\nassert solution(stdin) == \"211200\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"021\"\n\nassert solution(stdin) == \"001122\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '021'\nassert solution(input()) == '001122'"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('0a0' == '0001'), \"Given string does not contain a '0' in it\"\nassert solution('2' == '00'), \"Given string does not contain a '1' in it\"\nassert solution('2' == '0') == \"Given string does not contain a '1' in it\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '010110'\n\n\n----------Examples-----------------\nInput\n3\n121\n\nOutput\n021\n\nInput\n6\n211200\n\nOutput\n001122\n\nInput\n6\n120110\n\nOutput\n120120\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(INPUT) == \"4\"\nassert solution(INPUT) == \"8\"\nassert solution(INPUT) == \"8\"\nassert solution(INPUT) == \"4\"\nassert solution(INPUT) == \"3\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == 4\nassert solution(\"2 3\") == 3\nassert solution(\"2 3 1\") == 2\nassert solution(\"5 6\") == 0\nassert solution(\"0\") == 1"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"3\""
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1\\ 1\\ 1') == '1'\nassert solution('1\\ 2\\ 1') == '3'\nassert solution('1\\ 2\\ 1\\ 2') == '3'\nassert solution('1\\ 2\\ 1\\ 2\\ 2') == '5'\nassert solution('1\\ 2\\ 1\\ 2\\ 3') == '7'\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == 4\nassert solution(\"5 5\") == 6\nassert solution(\"4 4\") == 6\nassert solution(\"5 6\") == 7\nassert solution(\"3 3\") == 1\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(6,5) == 4\nassert solution(6,5,2,4,5) == 4\nassert solution(6,5,2,4,5,7) == 5"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '4'\nassert solution(input) == '4'\nassert solution(input) == '4'\nassert solution(input) == '4'\nassert solution(input) == '4'\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 10\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 4\n\nInput:\n2 2\n0 0\n0 1\n0 3\n\nOutput:\n2\n\nExplanation:\nSolution 1:\n0   0   0   0\n1   0   1   1\n2   0   2   4\n\nSolution 2:\n0   0   0   0\n1   0   1   0\n2   0   1   2\n3   0   2   0\n4   0   3   0\n5   0   4   1\n6   0   5   2\n\n----------------\n0   0   0   0\n1   0   1   0\n2   0   2   0\n3   0   3   0\n4   0   4   0\n5   0   5   0\n6   0   6   0\n----------------\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(str(input().strip())) == '2'\nassert solution(str(input().strip())) == '-2'"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"6 2 4\") == 2, \"solution()\"\nassert solution(\"0 2 1\") == 2, \"solution()\"\nassert solution(\"3 5 3\") == 0, \"solution()\"\nassert solution(\"6 4 1\") == 4, \"solution()\"\nassert solution(\"6 5 2\") == 0, \"solution()\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2\"\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(test_input) == \"2\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '2'\n\nassert solution(inp) == '2'\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\n\nExplanation\nInput is given from Standard Input in the following format:\n6 2 4\n\nOutput is the minimum possible absolute value of the coordinate of the destination.\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 4\") == \"2\"\nassert solution(\"5 3\") == \"5\"\nassert solution(\"2 4 5\") == \"2\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5 1\", \"1 6\", \"3 2\", \"4 3\", \"3 4\"]) == \"1\"\nassert solution([\"5 1\", \"5 - 1\", \"4 3\", \"3 4\", \"3 2\"]) == \"1\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"2\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"2\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"solution() failed to return a valid string\""
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 2, \"ERROR\"\nassert solution(0) == 0, \"ERROR\"\nassert solution(314159) == 2, \"ERROR\"\nassert solution(14) == 1, \"ERROR\"\nassert solution(61441) == 10, \"ERROR\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '10'\n\nInput\n11\n\nOutput\n0\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"51441\", \"2128506\", \"571576\"]) == \"10\"\nassert solution([\"10\", \"2128506\", \"571576\"]) == \"0\"\nassert solution([\"0\", \"2128506\", \"571576\"]) == \"2\"\nassert solution([\"4\", \"2128506\", \"571576\"]) == \"2\"\nassert solution([\"1\", \"2128506\", \"571576\"]) == \"2\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 1\nassert solution(input()) == 2\nassert solution(input()) == 3\nassert solution(input()) == 4\nassert solution(input()) == 5\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(51441) == \"2\"\nassert solution(571576) == \"0\"\nassert solution(2128506) == \"10\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"14\") == \"2\"\nassert solution(\"61441\") == \"0\"\nassert solution(\"2128506\") == \"10\"\nassert solution(\"571576\") == \"2\"\nassert solution(\"421285061\") == \"0\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5') == '5'\nassert solution('5') == '0'\nassert solution('3') == '0'\nassert solution('10') == '0'\nassert solution('14') == '2'\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 27, \"Should be 27\"\nassert solution(stdin) == 27, \"Should be 27\"\nassert solution(stdin) == 27, \"Should be 27\"\nassert solution(stdin) == 27, \"Should be 27\"\nassert solution(stdin) == 27, \"Should be 27\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5\") == 27\nassert solution(\"3\") == 27\nassert solution(\"2\") == 1\nassert solution(\"4\") == 27\nassert solution(\"12\") == 12\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 27, 'Solution does not work'\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3\") == 27\nassert solution(\"3.2\") == 27\nassert solution(\"3.3.2\") == 27\nassert solution(\"3.3.3\") == 27\nassert solution(\"3.4\") == 27\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"5\"\n) == \"27\"\nassert solution(\n    \"3\"\n) == \"33\"\nassert solution(\n    \"1\"\n) == \"2\"\nassert solution(\n    \"5\"\n) == \"22\"\nassert solution(\n    \"1\"\n) == \"2\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3) == \"27\", \"solution failed\"\nassert solution(2) == \"35\", \"solution failed\"\nassert solution(1) == \"5\", \"solution failed\"\nassert solution(0) == \"5\", \"solution failed\""
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('4') == '5'\nassert solution('0') == '0'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(str(1)) == str(1)\nassert solution(str(9)) == str(9)\nassert solution(str(9)) == str(9)\nassert solution(str(9)) == str(9)\nassert solution(str(9)) == str(9)\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(13) == \"1\"\nassert solution(927) == \"1\"\nassert solution(48) == \"0\"\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\n\n\n'''\nclass Solution:\n    def isSafe(self, row, col, grid):\n        return 0 <= row < len(grid) and 0 <= col < len(grid[0])\n\n    def isValid(self, row, col):\n        return self.isSafe(row, col, grid)\n\n    def availableMoves(self, grid, direction):\n        row, col = direction\n        moves = [(row, col), (row + 1, col), (row - 1, col), (row, col + 1), (row, col - 1)]\n        return [move for move in moves if self.isValid(move[0], move[1])]\n\n\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        def dfs(row):\n            if row == n:\n                return True\n            res = [l for l in self.availableMoves(grid, (row,))]\n            for col in res:\n                if self.isValid(row, col):\n                    grid[row] = 'Q'\n                    grid[col] = '.'\n                    if dfs(row + 1):\n                        return True\n                    grid[row] = '.'\n                    grid[col] = 'Q'\n            return False\n\n        n = n - 1\n        grid = [[\".\"] * n for _ in range(n)]\n        result = []\n        if dfs(0):\n            result.append([\"Q\"] * n)\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == '.':\n                    for dx, dy in self.availableMoves((i, j), (i, j)):\n                        grid[i][j] = '.'\n                        grid[dx][dy] = 'Q'\n                        if dfs(dx + 1):\n                            grid[i][j] = '.'\n                            grid[dx][dy] = 'Q'\n                            if dfs(dy + 1):\n                                grid[i][j] = '.'\n                                grid[dx][dy] = 'Q'\n                            else:\n                                grid[i][j] = '.'\n                                grid[dx][dy] = 'Q'\n                                break\n                        grid[dx][dy] = '.'\n                        if dfs(dx - 1):\n                            grid[i][j] = '.'\n                            grid[dx][dy] = 'Q'\n                            if dfs(dy - 1):\n                                grid[i][j] = '.'\n                                grid[dx][dy] = 'Q'\n                            else:\n                                grid[i][j] = '.'\n                                grid[dx][dy] = 'Q'\n                                break\n                        if dfs(dx + 1):\n                            grid[i][j] = '.'\n                            grid[dx][dy] = 'Q'\n                            if dfs(dy + 1):\n                                grid[i][j] = '.'\n                                grid[dx][dy] = 'Q'\n                            else:\n                                grid[i][j] = '.'\n                                grid[dx][dy] = 'Q'\n                                break\n                        grid[dx][dy] = '.'\n        return result"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(13) == \"1\"\nassert solution(927) == \"1\"\nassert solution(48) == \"0\"\nassert solution(0) == \"0\"\nassert solution(\"a\") == \"1\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(13) == \"1\"\nassert solution(927) == \"1\"\nassert solution(48) == \"1\""
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\n\n-----Constraints-----\n0 < stdin.length <= 10^5\n\n\"\"\"\n\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        # first check if the last char is also an integer\n        # if the last char is not an integer, return False\n        # if the last char is integer, return True\n        \n        if len(s) == 0:\n            return True\n        \n        # find the last char is an integer\n        # and check if the last char is an integer\n        if s[-1].isdigit():\n            return False\n        elif s[-1] == \" \":\n            return False\n        \n        # if the last char is not an integer\n        # and the last char is integer, return False\n        else:\n            return self.isValid(s[:-1])\n        \n        \n        \n        \n    \n        "
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"1\"\nassert solution(\"95\") == \"0\"\nassert solution(\"80\") == \"1\"\nassert solution(\"99\") == \"1\"\nassert solution(\"999\") == \"1\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"{2,5,3}\") == \"4\"\nassert solution(\"{2,3,1}\") == \"1\"\nassert solution(\"{2,1,3}\") == \"2\"\nassert solution(\"{1,2,3}\") == \"3\"\nassert solution(\"{1,3,2}\") == \"1\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['5', '3', '1', '2']) == '5'\nassert solution(['5', '4', '1', '2']) == '4'\nassert solution(['5', '4', '1', '2']) == '0'\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        s = list(stdin)\n        for i in range(len(s)):\n            if s[i] == '-':\n                s[i] = '0'\n            if s[i] == '0':\n                s[i] = '1'\n        return ''.join(s)\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"4\"\n\"\"\"\n\nimport unittest\n\n\nclass Solution(object):\n\n    def solution(self, n, a):\n        \"\"\"\n        :type n: int\n        :type a: List[int]\n        :rtype: str\n        \"\"\"\n\n        a_prime = [0 for _ in range(n)]\n\n        def solve(a):\n            res = ''\n            for i in range(n):\n                if a[i] == 1:\n                    if a[i] == 2:\n                        res += '2'\n                    elif a[i] == 3:\n                        res += '3'\n                    elif a[i] == 4:\n                        res += '4'\n                    elif a[i] == 5:\n                        res += '5'\n                    else:\n                        res += str(a[i])\n                elif a[i] == 0:\n                    res += '0'\n                else:\n                    res += 'x'\n            return res\n\n        def binary_search(a):\n            idx = 0\n            low = 0\n            high = n\n            while low <= high:\n                mid = (low + high) // 2\n                if a[mid] < a[idx]:\n                    low = mid + 1\n                elif a[mid] > a[idx]:\n                    high = mid - 1\n                else:\n                    idx = mid\n            return idx\n\n        for i in range(len(a)):\n            if a[i] == 1:\n                a_prime[i] = 1\n            elif a[i] == 2:\n                a_prime[i] = 2\n            elif a[i] == 3:\n                a_prime[i] = 3\n            elif a[i] == 4:\n                a_prime[i] = 4\n            elif a[i] == 5:\n                a_prime[i] = 5\n            else:\n                a_prime[i] = a[i]\n        for i in range(n):\n            if a_prime[i] == 0:\n                a_prime[i] = 1\n            elif a_prime[i] == 1:\n                a_prime[i] = 2\n            else:\n                a_prime[i] = 3\n\n        for i in range(n):\n            a_prime[i] = binary_search(a_prime)\n        return ''.join(map(str, a_prime))\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_0(self):\n        a = [1, 2, 3, 4, 5, 6, 7]\n        expected = \"4\"\n        actual = Solution().solution(4, a)\n        self.assertEqual(expected, actual)\n\n    def test_1(self):\n        a = [2, 2, 1, 0, 1, 2, 3]\n        expected = \"5\"\n        actual = Solution().solution(5, a)\n        self.assertEqual(expected, actual)\n\n    def test_2(self):\n        a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        expected = \"24\"\n        actual = Solution().solution(24, a)\n        self.assertEqual(expected, actual)\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3'\n\n'''\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"5\"\n\nNOTE: You can assume that only integers are required in the input data.\n\n-----Constraints-----\n1 <= n <= 100\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"5\"\n\n\nInput\n3\n1 5 1 3\n\nOutput\n7\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 4\n\n\n-----Constraints-----\n1 <= n <= 10^4\n1 <= a_i <= 11\n\n0 <= stdin.length <= 10^5\n\nstdin.length < 10^5\nstdin.length \u2264 10^8\n\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt', 'r')\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '5'\nassert solution(input) == '5'\nassert solution(input) == '5'\nassert solution(input) == '5'\nassert solution(input) == '5'\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"2 3\") == \"2\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 8\n\nassert solution(stdin) == 5\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, 8) == 2\nassert solution(5, 8, 1) == 2\nassert solution(5, 8, 1, 7) == 2\nassert solution(5, 8, 1, 7, 10) == 2\nassert solution(5, 8, 1, 7, 10, 2) == 2\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 8\nassert solution(stdin) == 8\nassert solution(stdin) == 7\nassert solution(stdin) == 7\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 2) == 2\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 2\n\nassert solution(input) == 2\n\nassert solution(input) == 2"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 8\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 0\n\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == 1\nassert solution(\"2 1 2\") == 2\nassert solution(\"2 1 1\") == 2\nassert solution(\"2 1 0\") == 2\nassert solution(\"1 2 1\") == 0\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"1\"\n\n\n'''\n\nn, k = map(int, input().split())\ns = list(map(int, input().split()))"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 1 2\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"1 0 1\") == \"2\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n7 2\n2 1 2\n1 2\n0 1\n0 1\n\n0 1\n0 1\n1 0\n1 1\n\n1 0\n0 1\n\n1 1\n1 1\n\n1 0\n1 0\n\n0 1\n0 1\n\n1 1\n1 0\n\n1 1\n1 1\n\n0 1\n1 0\n\n0 1\n1 1\n\n1 1\n1 1\n\n1 1\n1 1\n\n1 1\n1 1\n\n0 1\n0 1\n\n0 1\n1 0\n\n1 0\n1 0\n\n0 0\n0 1\n\n0 0\n1 0\n\n1 0\n0 1\n\n1 1\n1 0\n\n1 0\n1 1\n\n0 0\n1 1\n\n1 1\n0 1\n\n1 1\n1 0\n\n1 1\n0 0\n\n0 1\n1 1\n\n1 0\n0 0\n\n0 1\n1 1\n\n1 0\n1 0\n\n0 1\n1 0\n\n1 0\n0 0\n\n1 1\n0 0\n\n0 0\n0 1\n\n1 0\n1 0\n\n0 0\n1 0\n\n0 1\n1 0\n\n1 1\n1 0\n\n0 0\n1 0\n\n1 0\n1 1\n\n0 0\n0 1\n\n1 0\n1 0\n\n1 0\n1 0\n\n1 0\n1 0\n\n1 0\n0 1\n\n0 1\n0 0\n\n0 0\n1 0\n\n0 0\n0 0\n\n1 0\n1 0\n\n0 1\n0 0\n\n1 0\n1 0\n\n1 0\n1 0\n\n1 0\n1 0\n\n1 0\n1 0\n\n0 0\n0 0\n\n1 0\n1 0\n\n0 0\n1 0\n\n0 1\n1 0\n\n0 0\n1 0\n\n1 0\n1 0\n\n0 0\n0 0\n\n1 0\n1 0\n\n0 0\n0 0\n\n0 1\n1 0\n\n1 0\n1 0\n\n1 0\n0 1\n\n0 0\n1 0\n\n0 0\n1 0\n\n1 0\n1 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n1 0\n0 0\n\n1 0\n0 0\n\n0 1\n1 0\n\n1 0\n1 0\n\n0 1\n0 0\n\n1 0\n0 0\n\n0 0\n1 0\n\n1 0\n0 0\n\n0 1\n1 0\n\n1 0\n1 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n1 0\n\n0 1\n1 0\n\n1 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n1 0\n1 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n1 0\n\n0 0\n1 0\n\n0 0\n1 0\n\n1 0\n1 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n0 0\n0 0\n\n1 0\n0 0"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nswitch = list(map(int, input().split()))"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2 1 2\", \"2 1 2\", \"1 2\", \"0 1\"]) == 1\nassert solution([\"2 1 2\", \"1 2\", \"0 1\", \"1 1\"]) == 1\nassert solution([\"2 1 2\", \"1 2\", \"0 1\", \"0 1\"]) == 1\nassert solution([\"2 1 2\", \"1 2\", \"0 1\", \"0 1\"]) == 2\nassert solution([\"1 2\", \"0 1\", \"0 1\", \"1 1\"]) == 1\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"1\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    ['A', 'B', 'H', 'M', '12', '1']) == '5.00000000000000000000'\nassert solution(\n    ['A', 'B', 'H', 'M', '12', '1']) == '5.00000000000000000000'\nassert solution(\n    ['A', 'B', 'H', 'M', '12', '1']) == '5.00000000000000000000'\nassert solution(\n    ['A', 'B', 'H', 'M', '12', '1']) == '5.00000000000000000000'\nassert solution(\n    ['A', 'B', 'H', 'M', '12', '1']) == '5.00000000000000000000'\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5'), '5'\nassert solution('10'), '10'\nassert solution('2'), '2'\nassert solution('1'), '1'\nassert solution('5.5'), '5.5'\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"10\",\"4\",\"9\",\"3\",\"0\",\"1\",\"5\"]) == \"1.00000000000000000000\"\nassert solution([\"4\",\"3\",\"5\",\"1\",\"0\"]) == \"1.00000000000000000000\"\nassert solution([\"4\",\"2\",\"0\"]) == \"0.00000000000000000000\"\nassert solution([\"0\",\"9\",\"1\",\"2\"]) == \"0.00000000000000000000\"\nassert solution([\"0\",\"3\",\"4\",\"5\"]) == \"0.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '5.00000000000000000000', \"Expected 5. Got '\" + str(solution(stdin)) + \"' instead\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"A B H M\") == \"5.00000000000000000000\"\nassert solution(\"A B H 59\") == \"5.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1 1 0 0 0 0 1 0 0 0 1 1 0 0 1 0 0 1 1 0 1 1 1\"]) == \"15\"\nassert solution([\"0 0 0 0 0 0 1 0 0 0 1 0 0 1 1 1 0 0 1 1 0 0 1 0 1\"]) == \"10\"\nassert solution([\"0 0 0 0 0 0 1 0 0 0 1 0 0 1 1 0 0 1 1 0 0 1 0 0 1\"]) == \"20\"\nassert solution([\"1 1 0 0 0 0 1 1 0 0 1 0 1 1 0 0 0 0 1 1 0 0 1 0 1\"]) == \"15\"\nassert solution([\"0 0 0 0 0 0 1 0 0 0 1 0 0 1 1 1 0 0 0 0 0 1 1 0 0 1\"]) == \"10\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 2 3 0') == '5.00000000000000000000'\nassert solution('3 1 2 1') == '5.00000000000000000000'\nassert solution('3 2 1 0') == '6.00000000000000000000'\nassert solution('1 4 0 0') == '6.00000000000000000000'\nassert solution('2 1 2 2') == '6.00000000000000000000'\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['0','1','3','2','2','1','2','3','4','5','6']) == '5.00000000000000000000'\nassert solution(['9','9','9','9','9','9','9','9','9','9','9']) == '5.00000000000000000000'\nassert solution(['8','8','8','8','8','8','8','8','8','8','8']) == '5.00000000000000000000'\nassert solution(['9','9','9','9','9','9','9','9','9','9','9']) == '5.00000000000000000000'\nassert solution(['1','0','0','0','0','0','0','0','0','0','0']) == '5.00000000000000000000'\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"10\", \"5\", \"0\", \"0\", \"0\"]) == \"5\"\nassert solution([\"10\", \"9\", \"5\", \"0\", \"0\"]) == \"5\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"0\"]) == \"1\"\nassert solution([\"0\", \"0\", \"0\", \"0\", \"0\"]) == \"0\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"0\"]) == \"2\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 9 9\") == \"5.00000000000000000000\"\nassert solution(\"4 9 0\") == \"5\"\nassert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\nassert solution(\"2 3 4 0\") == \"5.00000000000000000000\"\nassert solution(\"1 3 4 0\") == \"5.00000000000000000000\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '97'\n\n\"\"\"\n\nclass Solution:\n    def numMatchingSubseq(self, s: str, words: List[str]) -> int:\n        l, r = 0, 0\n        n = len(words)\n        for i in range(n):\n            l += 1\n            while l <= len(s) and r <= len(words[i]):\n                if s[l:r + 1] in words[i]:\n                    r += 1\n                l += 1\n        return r"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Solution-----\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"97\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n1 <= stdin[i] <= 10^5\n\nExample 1:\n\nInput:\n3 4\n3\n1 2\n1 1 1 1 1\nOutput:\n8\n\nExample 2:\n\nInput:\n2\n1 1 1 1 1\nOutput:\n6\n\nExample 3:\n\nInput:\n1\n1 1 1 1 1\nOutput:\n4\n\nConstraints:\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n'''\nimport math"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"8\""
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 37\nprint(37)\n\n\n-----Constraints-----\n0 <= stdin.length <= 10^6\n0 <= a_1, a_2, \\dots, a_n <= 10^5\n\n[input]\n\nThe first line contains an integer $n$ and $m$ ($1 \\le n,m \\le 2\\cdot10^5$) \u2014 the length of the given sequence and the required value of the median.\n\nThe second line contains an integer sequence $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2\\cdot10^5$).\n\n\n[output]\n\nPrint the required number.\n\n\n[constraints]\n\n0 <= stdin.length <= 10^6\n0 <= a_1, a_2, \\dots, a_n <= 10^5\n\n1 <= m <= 10^5\n\n\n[example]\n\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>>"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    inp=int(input()),\n    stdin=stdin,\n    stderr=None,\n    stdout=None,\n) == str(\n    1\n)\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 8\n\nAssumptions:\n\nsequence is strictly increasing\n\nsequence is guaranteed to be sorted\n\nsequence has the form $a_1, a_2, \\dots, a_n$\n\nThe median of a sequence is the value of an element which is in the middle of the sequence after sorting it in non-decreasing order. If the length of the sequence is even, the left of two middle elements is used.\n\nFor example, if $a=[4, 2, 7, 5]$ then its median is $4$ since after sorting the sequence, it will look like $[2, 4, 5, 7]$ and the left of two middle elements is equal to $4$. The median of $[7, 1, 2, 9, 6]$ equals $6$ since after sorting, the value $6$ will be in the middle of the sequence.\n\nWrite a program to find the number of pairs of indices $(l, r)$ ($1 \\le l \\le r \\le n$) such that the value of median of $a_l, a_{l+1}, \\dots, a_r$ is exactly the given number $m$.\n\n-----Input-----\n\nThe first line contains integers $n$ and $m$ ($1 \\le n,m \\le 2\\cdot10^5$) \u2014 the length of the given sequence and the required value of the median.\n\nThe second line contains an integer sequence $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2\\cdot10^5$).\n\n\n-----Output-----\n\nPrint the required number.\n\n\n-----Examples-----\nInput\n5 4\n1 4 5 60 4\n\nOutput\n8\n\nInput\n3 1\n1 1 1\n\nOutput\n6\n\nInput\n15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n\nOutput\n97\n\n\n\n-----Note-----\n\nIn the first example, the suitable pairs of indices are: $(1, 3)$, $(1, 4)$, $(1, 5)$, $(2, 2)$, $(2, 3)$, $(2, 5)$, $(4, 5)$ and $(5, 5)$.\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 4 5 60 4\") == \"8\"\nassert solution
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 97"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"5 4\"\n    ), \"5 2\"\nassert solution(\n    \"5 4 2\"\n    ), \"5 3\"\nassert solution(\n    \"2 3\"\n    ), \"3 5\"\nassert solution(\n    \"0 0\"\n    ), \"0 0\"\nassert solution(\n    \"1 0\"\n    ), \"0 1\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1\") == \"6\"\nassert solution(\"2 2 3 2\") == \"7\"\nassert solution(\"3 4\") == \"0\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"1 3\") == \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '7'\nassert solution(stdin) == '0'\n\"\"\"\nimport math"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 'Yes'\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(readlines()) == 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"fced\") == \"Yes\", \"fced\"\nassert solution(\"xyz\") == \"Yes\", \"xyz\"\nassert solution(\"r\") == \"Yes\", \"r\"\nassert solution(\"dabcef\") == \"Yes\", \"dabcef\"\nassert solution(\"az\") == \"Yes\", \"az\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"No\"\nassert solution(\"r\") == \"No\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"fcedxyzazdabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\nassert solution(\"aa\") == \"No\"\nassert solution(\"bad\") == \"No\""
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"fced\") == \"Yes\", \"fced\"\nassert solution(\"xyz\") == \"No\", \"xyz\"\nassert solution(\"r\") == \"No\", \"r\"\nassert solution(\"dabcef\") == \"No\", \"dabcef\"\nassert solution(\"az\") == \"Yes\", \"az\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n\"\"\""
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"aeiou\") == \"Yes\"\nassert solution(\"eaeiou\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"fcedxyz\naacb\nabcd\nabcef\nbabcd\nbacd\nbcdef\nabcdef\n\"\"\") == \"Yes\"\nassert solution(\"\"\"fcedxyz\naacb\nabcd\nabcef\nbacd\nbacd\nbcdef\n\"\"\") == \"No\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1 2\") == 2\nassert solution(\"1 3\") == 3\nassert solution(\"1 4\") == 4\nassert solution(\"1 5\") == 5\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '6'\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n-10^6 <= a_i <= 10^6\n\n0 <= l_j < r_j < n\n0 <= a_i <= m\n\n2 <= j < n\n\n\n-----Tags-----\n\nacademic id: stac03\nlanguage: python3\n\n\n-----Basic idea-----\n\nThe algorithm works by initializing a set of segments in the given array $a$ with the given number of segments, in particular $j$-th segment.\n\nFor each set of segments $j$-th segment we will assign $j$-th element in the resulting set $c_j$ to the current element of the array $a$.\n\nFor each $j \\le m$ $m$ different elements in the resulting set, we apply the subset $j$-th segment to the array $a$.\n\nFor each $j \\le m$ $m$ different elements in the resulting set, we assign $j$-th element in the resulting set $c_j$ to the current element of the array $a$.\n\nFor each $j \\le m$ $m$ different elements in the resulting set, we assign $j$-th element in the resulting set $c_j$ to the current element of the array $a$.\n\nFor each $j \\le m$ $m$ different elements in the resulting set, we assign $j$-th element in the resulting set $c_j$ to the current element of the array $a$.\n\nThe resulting set $c_j$ will be in $[l_j, r_j]$, where $l_j \\le r_j \\le n$\n\n\n-----Basic idea 2-----\n\nThe algorithm is a bit tricky, because we need to initialize a set of segments in the array $a$ with the given number of segments.\n\nThe implementation is a bit more complicated, because we need to calculate the value of the j-th element in the resulting set, and add that value to every element of the array $a$.\n\nThe implementation is more complicated, because we need to calculate the value of the j-th element in the resulting set, and add that value to every element of the array $a$.\n\nThe algorithm has some basic idea, so we do not need to call the method to calculate the value of the j-th element in the resulting set.\n\nThe implementation is more complicated, because we need to calculate the value of the j-th element in the resulting set, and add that value to every element of the array $a$.\n\nThe implementation is more complicated, because we need to calculate the value of the j-th element in the resulting set, and add that value to every element of the array $a$.\n\nThe implementation is more complicated, because we need to calculate the value of the j-th element in the resulting set, and add that value to every element of the array $a$.\n\nThe implementation is more complicated, because we need to calculate the value of the j-th element in the resulting set, and add that value to every element of the array $a$.\n\nThe implementation is more complicated, because we need to calculate the value of the j-th element in the resulting set, and add that value to every element of the array $a$.\n\nThe implementation is more complicated, because we need to calculate the value of the j-th element in the resulting set, and add that value to every element of the array $a$.\n\nThe implementation is more complicated, because we need to calculate the value of the j-th element in the resulting set, and add that value to every element of the array $a$.\n\nThe implementation is more complicated, because we need to calculate the value of the j-th element in the resulting set, and add that value to every element of the array $a$.\n\nThe implementation is more complicated, because we need to calculate the value of the j-th element in the resulting set, and add that value to every element of the array $a$.\n\nThe implementation is more complicated, because we need to calculate the value of the j-th element in the resulting set, and add that value to every element of the array $a$.\n\nThe implementation is more complicated, because we need to calculate the value of the j-th element in the resulting set, and add that value to every element of the array $a$.\n\nThe implementation is more complicated, because we need to calculate the value of the j-th element in the resulting set, and add that value to every element of the array $a$.\n\nThe implementation is more complicated, because we need to calculate the value of the j-th element in the resulting set, and add that value to every element of the array $a$.\n\nThe implementation is more complicated, because we need to calculate the value of the"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 -2 3 1 4 -2 3 -1\") == \"4\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 3 2 -1 -2 -3 -1\") == \"2\"\nassert solution(\"1 2 3 -1 -2 -3 -1 4\") == \"0\"\nassert solution(\"1 2 3 -1 -2 -3 -1 -1 -1 -1\") == \"0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '0'\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0' or solution(stdin) == '0', 'incorrect result'\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 0'), '0'\nassert solution('1000000'), '0'\nassert solution('1 0'), '1'\nassert solution('1000000'), '1'\nassert solution('1 -1 0'), '1'\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"5\", \"4\"]) == \"6\"\nassert solution([\"1\", \"3\"]) == \"0\"\nassert solution([\"1\", \"3\", \"4\", \"4\"]) == \"0\"\nassert solution([\"1\", \"3\", \"4\", \"4\", \"5\", \"5\"]) == \"0\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"5\", \"6\", \"7\"]) == \"0\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2\", \"1\", \"5\", \"4\", \"3\"]) == \"4\"\nassert solution([\"1\", \"3\", \"5\", \"7\", \"2\", \"6\", \"8\", \"4\", \"9\", \"7\"]) == \"LRRR\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"4\", \"6\", \"1\"]) == \"LLRL\"\nassert solution([\"2\", \"1\", \"5\", \"4\", \"3\"]) == \"4\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"4\", \"6\", \"1\"]) == \"LLRL\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, [2, 1, 5, 4, 3]) == 4, \"solution(5, [2, 1, 5, 4, 3]) = 4\"\nassert solution(7, [1, 3, 5, 6, 4, 2]) == 4, \"solution(7, [1, 3, 5, 6, 4, 2]) = 4\"\nassert solution(7, [1, 2, 3]) == 4, \"solution(7, [1, 2, 3]) = 4\"\nassert solution(2, [1, 1, 1]) == 2, \"solution(2, [1, 1, 1]) = 2\"\nassert solution(2, [2, 3, 1]) == 3, \"solution(2, [2, 3, 1]) = 3\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['5', '2', '1', '5', '4', '3']) == '4'\nassert solution(['1', '1', '3', '4']) == '3'\nassert solution(['2', '1', '5', '4', '3']) == '1'\nassert solution(['1', '1', '3', '4']) == '1'\nassert solution(['1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1']) == '1'\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"R\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"LLL\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1 5 4 3\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"5 4 3\") == \"5\"\nassert solution(\"5 4 3 4 4\") == \"4\"\nassert solution(\"4 2 5 3 4\") == \"3\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(sys.stdin) == '5'\nassert solution(sys.stdin) == '4'\nassert solution(sys.stdin) == '3'\nassert solution(sys.stdin) == '4'\nassert solution(sys.stdin) == '5'\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 4\nassert solution(stdin) == 7\nassert solution(stdin) == 3\nassert solution(stdin) == \"LRRR\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"LLL\"\nassert solution(stdin) == \"LL\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2, [\"2 1 5 4 3\"]) == \"4\"\nassert solution(5, [\"2 1 5 4 3\"]) == \"3\"\nassert solution(7, [\"1 3 5 6 7 4 2\"]) == \"6\"\nassert solution(3, [\"1 2 3\"]) == \"1\"\nassert solution(4, [\"1 2 4 3\"]) == \"3\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '4'\nassert solution(input()) == '4'\nassert solution(input()) == '4'\nassert solution(input()) == '4'\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()), \"One\"\nassert solution(input()), \"Two\"\nassert solution(input()), \"Three\"\nassert solution(input()), \"Four\"\nassert solution(input()), \"Five\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3 5 7\") == \"3\"\nassert solution(\"2 4 6 8\") == \"6\"\nassert solution(\"1 3 4 6\") == \"5\"\nassert solution(\"6 6 6 5\") == \"6\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4, 'incorrect solution'\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n0 <= stdin[i] <= 10^9\n\n\"\"\""
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n\nInput\n\n5\n1 2 5 3 4\n\nOutput\n4\n\nInput\n\n2\n1 2\n\nOutput\n2\n\nInput\n\n7\n6 5 4 3 2 4 3\n\nOutput\n2\n\nInput\n\n6\n1 2\n\nOutput\n2\n\nInput\n\n1\n1\n\nOutput\n2\n\nInput\n\n1\n1\n\nOutput\n1"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(4)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(0)\nassert solution(stdin) == str(1)\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2 5 3 4') == '4'\nassert solution('2 1 2 3 4') == '2'\nassert solution('7 6 5 4 3 2 4 3') == '2'\nassert solution('5 6 5 3 4') == '3'\nassert solution('5 6 5 4 3 2 4 3') == '4'\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"4\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\n----CONSTRAINTS----\na_i is not equal to a_l or a_r.\na_i <= n.\n\n----Solutions----\nAccepted\n12\n\nSubmissions\n2\n2\n\nSubmissions\n6\n6\n\nAccepted\n22\n\nSubmissions\n1\n1\n\nAccepted\n22\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '4'\n\n\n-----Done-----\nSubmission Detail\nSample Input\n1\n5\n2 5 5 4 3 2 4 3\n\nSample Output\n2\n\nExplanation\nThere are $n$ strictly increasing subarrays of $a$ consisting of $n$ integers, and the length of the final array is $n - 1$ or $n$.\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == str(3)\n\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5') == 1\nassert solution('2 2 3 3 3') == 2\nassert solution('1 4') == 1\nassert solution('4 5 6 7 8 9 10') == 6\nassert solution('3 4 1') == 4\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == 0\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,3) == 1, \"fails\"\nassert solution(5,3) == 2, \"fails\"\nassert solution(5,2) == 0, \"fails\"\nassert solution(5,1) == 0, \"fails\"\nassert solution(1,1) == 0, \"fails\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin),'solution() failed'"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 0\n\n\n-----Constraints-----\n1 <= k <= 100,000\n1 <= stdin.length <= 10^5\n\n\n-----Side Effects-----\nYou are free to use any additional stack data structure.\n\n\n-----See also-----\n2.7\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 4\") == \"3\"\nassert solution(\"5 2\") == \"2\"\nassert solution(\"6 4\") == \"2\"\nassert solution(\"1 2 1 3 3\") == \"3\"\nassert solution(\"1 3 1 3 3\") == \"3\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\n        [1, 5, 10, 20, 50],\n        [1, 2, 3, 4, 10, 20, 50],\n    ]\n) == 3\nassert solution(\n    [\n        [1, 1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 10],\n        [1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 7, 7, 7, 8, 9, 10, 10],\n        [1, 1, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10],\n    ]\n) == 3\nassert solution(\n    [\n        [1, 1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 10],\n        [1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 7, 7, 7, 8, 9, 10, 10],\n        [1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 7, 7, 7, 8, 9, 10, 10],\n    ]\n) == 3\nassert solution(\n    [\n        [1, 1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 10],\n        [1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 7, 7, 7, 8, 9, 10, 10],\n        [1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 7, 7, 7, 8, 9, 10, 10],\n    ]\n) == 2\nassert solution(\n    [\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n    ]\n) == 0\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == '4'\nassert solution(inp) == '3'\nassert solution(inp) == '1'\nassert solution(inp) == '2'\nassert solution(inp) == '5'\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('A4 3') == '4'\nassert solution('A4 5') == '0'\nassert solution('A5 4') == '0'\nassert solution('A6 4') == '4'\nassert solution('A7 3') == '0'\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '4'\n\n\"\"\"\n\n\nimport sys\nfrom math import log, ceil\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution() == '4'\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '4'"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 3 4\") == 4\nassert solution(\"5 3 5\") == 3\nassert solution(\"6 3\") == 0\nassert solution(\"5\") == 5\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"{1,2,3}\") == \"3\"\nassert solution(\"{1,2,3,4,5,6,7,8,9,10}\") == \"5\"\nassert solution(\"{1,2,3,4}\") == \"0\""
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"6\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 4 1\") == \"4\"\nassert solution(\"2 4 1\") == \"4\"\nassert solution(\"1 4 1\") == \"2\"\nassert solution(\"1 3 2\") == \"1\"\nassert solution(\"2 3 2\") == \"1\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 48"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 48, \"passed\"\n\nInput\n2\n8\n2 4\n\nOutput\n-1\n4\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"2\", \"4\", \"8\"]) == \"4\"\nassert solution([\"1\"]) == -1\n\n-----Sample Input-----\n\n2\n3\n2 2 2\n4\n1 2\n\nOutput\n-1\n-----Sample Output-----\n\n3\n1\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == -1\nassert solution(3) == -1\nassert solution(2) == -1\nassert solution(4) == -1\nassert solution(5) == -1\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"4 2 3 5 4\\n9 10 12 11 13\\n6\\n2\"\n    ), \"2\\n\"\nassert solution(\"1 2\\n3 4\\n5 6\\n7 8\\n9 10 12\\n15 16 3\\n4 6 5\\n8\") == \"15\\n\"\nassert solution(\"2 3 1 4 3\") == \"3\\n\"\nassert solution(\"2 6 1 3 4 5\") == \"2\\n\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 48\n'''\n\nimport math"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == 0, \"solution\"\n-----Note-----\nFor the given input, we can assume that there are only $x$ divisors and $x$ is the first divisor, and that for all other queries, all divisors must be distinct.\n\n\n-----Algorithm-----\n\nThis is a very simple algorithm, which can be found in \"IMPLEMENTATION\" in the lecture slides.\n\nThis implementation is a very simple, elegant and easy solution. We use the same approach as mentioned in the lecture slides.\n\nThis algorithm is not optimized for the input data and its performance is very high, but it is faster than the simple implementation.\n\nIt has some bugs in it, you can write this code in order to find one.\n\n\n-----Design-----\nWe use the same algorithm as described in the lecture slides to solve the problem, except we keep the correct divisors in the list.\n\nNow, we use the recursive algorithm to find the minimal possible integer $x$.\n\nSo, the unique divisors of a number $x$ is the list of all integers $d_i$ such that $d_i$ is the divisor of $x$.\n\nWe have found the smallest possible integer $x$ that is possible to obtain such numbers using the same algorithm.\n\nFor example, the input is 12 and the list of divisors is [2, 3, 4, 5, 6, 7, 8, 9, 10, 12]. We can get $x=4 in such a way that the number is $4*(3*4+2*4)$ (4,2,3,4)\n\nFor example, the input is 3 and the list of divisors is [3, 2, 4]. We can get $x=2 in such a way that the number is $2*(3*2+2*2)$ (2,2,3)\n\nFor example, the input is 6 and the list of divisors is [6, 5, 4, 3, 2]. We can get $x=6 in such a way that the number is $6*(5*6+6*5)$ (6,5,6)\n\nFinally, we can get $x=3 in such a way that the number is $3*(2*3+3*2)$ (3,2)\n\nFor example, the input is 15 and the list of divisors is [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]. We can get $x=15 in such a way that the number is $15*(12*15+13*12+13*12)$ (15,12,14,12)\n\nWhen we are done, we print the smallest possible integer $x$ in a human readable format.\n\nYou can make any code as simple as possible in the necessary format, so it is very easy to find minimum possible $x$.\n\n\n-----Algorithm-----\n\nFor every input, we will find the minimum possible $x$ that is possible to obtain such numbers using the same algorithm.\n\nNext, we will check if the input data is contradictory and it is impossible to find such number. If so, we will print -1.\n\nIf not, we will get the least possible value $x$.\n\nNow, we will check if the input data is contradictory and it is impossible to find such number.\n\nIf so, we will return the minimum possible $x$.\n\n\n-----Output-----\n\nPrint the answer to it.\n\nIf the input data is contradictory and it is impossible to find such number $x$, print -1. Otherwise, print the minimum possible $x$.\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 48\n\n-----Constraints-----\n\n1 \u2264 t \u2264 10^6\n1 \u2264 n \u2264 10^6\n1 \u2264 d_i \u2264 10^6\nd_i is divisible by any integer\n\nTime Limit: 1 sec\n\n1 \u2264 d_1,d_2,d_3,d_4,d_5,d_6,d_7,d_8,d_9,d_10,d_11,d_12,d_13,d_14,d_15,d_16,d_17,d_18,d_19,d_20,d_21,d_22,d_23,d_24,d_25,d_26,d_27,d_28,d_29,d_30,d_31,d_32,d_33,d_34,d_35,d_36,d_37,d_38,d_39,d_40,d_41,d_42,d_43,d_44,d_45,d_46,d_47,d_48 = stdin\n\n2 \u2264 t \u2264 100\n1 \u2264 n \u2264 5\n1 \u2264 d_i \u2264 9\n\n2 \u2264 d_1 \u2264 d_10\n2 \u2264 d_2 \u2264 d_11\n2 \u2264 d_3 \u2264 d_12\n2 \u2264 d_4 \u2264 d_13\n2 \u2264 d_5 \u2264 d_14\n2 \u2264 d_6 \u2264 d_15\n2 \u2264 d_7 \u2264 d_16\n2 \u2264 d_8 \u2264 d_17\n2 \u2264 d_9 \u2264 d_18\n2 \u2264 d_10 \u2264 d_19\n2 \u2264 d_11 \u2264 d_20\n2 \u2264 d_12 \u2264 d_21\n2 \u2264 d_13 \u2264 d_22\n2 \u2264 d_14 \u2264 d_23\n2 \u2264 d_15 \u2264 d_24\n2 \u2264 d_16 \u2264 d_25\n2 \u2264 d_17 \u2264 d_26\n2 \u2264 d_18 \u2264 d_27\n2 \u2264 d_19 \u2264 d_28\n2 \u2264 d_20 \u2264 d_29\n2 \u2264 d_21 \u2264 d_30\n2 \u2264 d_22 \u2264 d_31\n2 \u2264 d_23 \u2264 d_32\n2 \u2264 d_24 \u2264 d_33\n2 \u2264 d_25 \u2264 d_34\n2 \u2264 d_35 \u2264 d_36\n2 \u2264 d_37 \u2264 d_38\n2 \u2264 d_39 \u2264 d_40\n2 \u2264 d_41 \u2264 d_42\n2 \u2264 d_43 \u2264 d_44\n2 \u2264 d_45 \u2264 d_46\n2 \u2264 d_47 \u2264 d_48 = stdin\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '48'\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 48\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nprint(\"The first line of input contains a single integer $n$ ($1 \\le n \\le 50$) \u2014 the number of elements in the array.\")\nprint(\"The following line contains a sequence of $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 1\\,000$) \u2014 the array.\")\nprint(\"Output must be written on a single line.\")\nprint(\"Example:\")\nprint(\"5 5 5 1 6 1\")\nprint(\"Output:\")\nprint(\"3\")\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == 0\nassert solution(1) == 0\nassert solution(2) == 0\nassert solution(3) == 0\nassert solution(4) == 0\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '6'\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\"5\", \"5\", \"2\", \"1\", \"1\", \"1\", \"6\", \"4\"]) == \"2\"\nassert solution(\n    [\"5\", \"5\", \"2\", \"1\", \"1\", \"1\", \"6\", \"4\"]) == \"1\"\nassert solution(\n    [\"5\", \"5\", \"2\", \"1\", \"1\", \"1\", \"6\", \"4\"]) == \"2\"\nassert solution(\n    [\"1\", \"1\", \"1\", \"1\"]) == \"3\"\nassert solution(\n    [\"5\", \"5\", \"2\", \"1\", \"1\", \"1\", \"6\", \"4\"]) == \"1\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"1 4\"\nassert solution(\"5 6 7 6\") == \"1 2 6\"\nassert solution(\"2 4 2 4 4\") == \"1\"\nassert solution(\"1 2 3 4 2 4\") == \"1\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1 5 5 1 6 1\", \"2 4 2 4 4\", \"6 6 6 6 6\"]) == \"2 3 1\"\nassert solution([\"1 5 5 1 6 1\", \"2 4 4 4 4\", \"6 6 6 6 6\"]) == \"1 3 1\"\nassert solution([\"1 5 5 1 6 1\", \"2 4 4 4 4\", \"6 6 6 6 6\"]) == \"1 3 1\"\nassert solution([\"1 5 5 1 6 1\", \"2 4 4 4 4\", \"6 6 6 6 6\"]) == \"1 3 1\"\nassert solution([\"1 5 5 1 6 1\", \"2 4 4 4 4\", \"6 6 6 6 6\"]) == \"1 3 1\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 4 5 1 5 2\") == \"2 4\"\nassert solution(\"1 4 2 4 2 1 4 1 4 4 2\") == \"2 4\"\nassert solution(\"2 2 4 4 4 2 1 4 5 4 5 5\") == \"2 4\"\nassert solution(\"2 3 3 3 3 3 3 3 3 3 3 3 3 3 3\") == \"3\"\nassert solution(\"2 3 3 3 3 3 3 3 3 3 3 3 3 3 3\") == \"3\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\n-----Explanation-----\n\nExample #1\n\nInput\n\n6\n1 5 5 1 6 1\n\nOutput\n\n3\n5 6 1 \n\nExample #2\n\nInput\n\n5\n2 4 2 4 4\n\nOutput\n\n1\n2 \n\nExample #3\n\nInput\n\n5\n6 6 6 6 6\n\nOutput\n\n1\n6 \n\"\"\"\nimport sys"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 5 5 1 6 1\") == \"3 6 1!\"\nassert solution(\"2 4 2 4 4\") == \"2 4\"\nassert solution(\"5 6 6 6 6\") == \"1\""
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '44'\n\n\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"435\") == \"435\"\nassert solution(\"99\") == \"99\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 4320"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"9\") == \"9\"\nassert solution(\"43\") == \"43\"\nassert solution(\"99\") == \"99\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 45\nassert solution(stdin) == 44\nassert solution(stdin) == 44\nassert solution(stdin) == 44\nassert solution(stdin) == 44\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 44\n\n\n-----Experiment-----\nPython has built-in number types for mathematical operations. You will now implement the math functions: sqrt(x), cbrt(x), exp(x), log(x), and pow(x, y).\n\nThe tests will verify that your math functions are equivalent to the ones in the previous homework, including (for example) multiplying $x$ by $4$, using the square root function, and computing $x^4$ (mod $10^{9}$).\n\n\n-----Constraints-----\n1 \u2264 stdin.length \u2264 30.\n1 \u2264 stdin[i] \u2264 10^9.\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '435'\nassert solution(stdin) == '237'\nassert solution(stdin) == '44'\nassert solution(stdin) == '42'\nassert solution(stdin) == '342'\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 44\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, [3, 2, 1]) == \"cba\"\nassert solution(3, [3, 2, 1, 0, 1]) == \"ab\"\nassert solution(3, [3, 2, 0, 1, 0]) == \"aba\"\nassert solution(2, [\"a\", \"c\", \"d\"]) == \"cd\"\nassert solution(2, [\"a\", \"b\", \"c\"]) == \"cba\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"aac\", 'expected \"aac\", got \"{}\"'\nassert solution(stdin) == \"b\", 'expected \"b\", got \"{}\"'\n\n\n\n---\n\nO(n^3)\nO(n)\nO(2^n)\nO(n^2)\nO(2^n)\nO(n)\n\nTime complexity: O(n^2)\nSpace complexity: O(1)\n\n\"\"\"\nclass Solution:\n    def polycarp(self, s: str, b: List[int]) -> str:\n        def get_next(i):\n            if i == len(s): return -1\n            if s[i] == '0': return get_next(i+1)\n            return b[ord(s[i])-ord('a')] + 1\n        \n        def get_prev(i):\n            if i == len(s): return -1\n            if s[i] == '0': return get_prev(i-1)\n            return b[ord(s[i])-ord('a')] + 1\n        \n        def backtrack(i, j):\n            if i == j: return [i]\n            res = []\n            for k in range(i, j):\n                if s[i:k+1].isupper(): return res + backtrack(k+1, j)\n                if s[i:k+1].islower(): return res + backtrack(i, k)\n            return res + backtrack(i, j+1)\n        \n        return ''.join(backtrack(0, len(s)))"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abba\") == \"aab\"\nassert solution(\"ecoosdcefr\") == \"ecoosdcefr\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"\") == \"\"\n\n\"\"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"abac\", \"2\", \"1\", \"0\", \"eca\", \"4\", \"3\", \"3 1 0\", \"6\"]) == \"aac\"\nassert solution([\"a\", \"b\", \"\", \"abc\", \"1\", \"\", \"0\", \"\", \"a\", \"2\", \"\", \"c\"]) == \"b\"\nassert solution([\"a\", \"a\", \"b\", \"a\", \"a\", \"b\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\","
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"aac\", \"A\"\nassert solution(stdin) == \"a\", \"a\"\nassert solution(stdin) == \"aab\", \"ab\"\nassert solution(stdin) == \"c\", \"c\"\nassert solution(stdin) == \"ed\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abac\") == \"aab\"\nassert solution(\"aba\") == \"a\"\nassert solution(\"c\") == \"b\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4, [\"abac\",\"3\",\"2 1 0\",\"abc\",\"1\",\"0\",\"abba\",\"3\",\"1 0 1\",\"ecoosdcefr\",\"10\",\"38 13 24 14 11 5 3 24 17 0\"]) == \"aac\"\nassert solution(4, [\"aac\", \"aab\", \"ecoosdcefr\", \"10\", \"38 13 24 14 11 5 3 24 17 0\"]) == \"aba\"\nassert solution(4, [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]) == \"abba\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"abac\", \"aab\", \"1\", \"2\", \"1\", \"0\", \"0\", \"3\", \"1\", \"3\"]) == \"aac\"\nassert solution([\"abac\", \"aab\", \"1\", \"2\", \"1\", \"0\", \"0\", \"3\", \"1\", \"3\"]) == \"aba\"\nassert solution([\"abac\", \"aab\", \"1\", \"2\", \"1\", \"0\", \"0\", \"3\", \"1\", \"3\"]) == \"aab\"\nassert solution([\"aab\", \"aab\", \"1\", \"2\", \"1\", \"0\", \"0\", \"3\", \"1\", \"3\"]) == \"aab\"\nassert solution([\"aab\", \"aab\", \"1\", \"2\", \"1\", \"0\", \"0\", \"3\", \"1\", \"3\"]) == \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"ba\""
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"aab\"\nassert solution(\"abc\") == \"ab\"\nassert solution(\"ecoosdcefr\") == \"eosdcefr\"\nassert solution(\"abc\") == \"a\"\nassert solution(\"abc\") == \"a\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"bb\"\n'''\n\nimport unittest\n\nfrom itertools import combinations\nfrom collections import Counter\n\nfrom utils import timed\n\n\n@timed\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"b\"\nassert solution(\"5\") == \"b\"\nassert solution(\"6\") == \"b\"\nassert solution(\"3\") == \"b\"\nassert solution(\"3\") == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"b\") == \"b\"\nassert solution(\"c\") == \"c\"\nassert solution(\"aab\") == \"ab\"\nassert solution(\"abc\") == \"abc\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"b\""
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"b\"\nassert solution(\"100\") == \"b\"\nassert solution(\"1000\") == \"b\"\nassert solution(\"10000\") == \"b\"\nassert solution(\"3000000\") == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('0') == 'a'\nassert solution('1') == 'aa'\nassert solution('2') == 'ac'\nassert solution('3') == 'aab'\nassert solution('4') == 'aaaa'\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"abcde\") == \"a\"\nassert solution(\"abbcc\") == \"c\"\nassert solution(\"abcdef\") == \"e\"\nassert solution(\"abcc\") == \"a\"\nassert solution(\"abcdefgh\") == \"g\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"7\"\n) == \"b\"\nassert solution(\n    \"6\"\n) == \"aa\"\nassert solution(\n    \"1\"\n) == \"a\"\nassert solution(\n    \"1\"\n) == \"a\"\nassert solution(\n    \"4\"\n) == \"aaaa\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"b\"\n\"\"\""
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(in_file := \"6\\n10\\n\") == \"12\"\nassert solution(in_file := \"10\\n\") == \"12\"\nassert solution(in_file := \"6\\n5\\n\") == \"13\"\nassert solution(in_file := \"10\\n2\\n\") == \"14\"\nassert solution(in_file := \"10\\n2\\n3\\n\") == \"15\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == '13'\nassert solution(2) == '11'\nassert solution(3) == '12'\nassert solution(4) == '12'\nassert solution(5) == '13'\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 13\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 13\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 12\nassert solution(stdin) == 13\nassert solution(stdin) == 11\nassert solution(stdin) == 12\nassert solution(stdin) == 6\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"to be or not to be\"\n    ) == 12\nassert solution(\n    \"a ab aa aa bb bb\"\n    ) == 13\nassert solution(\n    \"aaaaaaaaaaaabbabababbabbabbaabbaabbbbbbbabbabbbabbbabbaabbbbbaabbbbaabbbbbbbbbbaabbbbbbbabbbabbaabbbbbbbbbabbaabbbbbbbbbbbabbbbbbbbbbbbbbbbaabbbbbbbbbbbbaababbbbbbbbbbaabbbbbbbbbbaabbbbaabbbbbbbbbbbbbbbbbbbbbbbaabbbbbbbbbbbbbbbbaabbbbbbbbbbbbbaababbbbbbbbbbbbbaabbbbbbbbbbbbaababbbbbbbbbbbbbbaabbbbbbbbbbbbbbbaabbbbbbbbbbbbbbbbaabbbbbbbbbbbbbbaabbbbbbbbbbbbbbbbaabbbbbbbbbbbbbbbbaabbbbbbbbbbbbbbbaabbbbbbbbbbbbaababbbbbbbbbbbbbbbaabbbbbbbbbbbbbbaabbbbbbbbbbbbaabbbbbbbbbbbbbbbbaabbbbbbbbbbbbaababbbbbbbbbbbbaabbbbbbbbbbbbbbbbaababbbbbbbbbbbbbbbbaabbbbbbbbbbbbaababbbbbbbbbbbbaababbbbbbbbbbbbaababbbbbbbbbbbbbbbbaababbbbbbbbbbbbbbbbaababbbbbbbbbbbbaababbbbbbbbbbbbbbaababbbbbbbbbbbbaababbbbbbbbbbbbaababbbbbbbbbbbbbbaababbbbbbbbbbbbbbaababbbbbbbbbbbbbbaababbbbbbbbbbbbbbbbaababbbbbbbbbbbbbbbbaababbbbbbbbbbbbbbbbaababbbbbbbbbbbbaababbbbbbbbbbbbaababbbbbbbbbbbbaababbbbbbbbbbbbaababbbbbbbbbbbbbbaababbbbbbbbbbbbbbbbaababbbbbbbbbbbbaabababbbbbbbbbbbbbbbbaababbbbbbbbbbbbbbbbaababbbbbbbbbbbbbbaababbbbbbbbbbbbbbaabababbbbbbbbbbbbaabababbbbbbbbbbbbbbaabababbbbbbbbbbbbaabababbbbbbbbbbbbbbaabababbbbbbbbbbbbbbaababababbbbbbbbbbbbaababababbbbbbbbbbbbbbaababababbbbbbbbbbbbbbaababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"to be or not to be\", \"ab aa AB bb\", \"a AAAB AAAB c\"]) == 11\nassert solution([\"to be or not to be\", \"a ab aa aa bb\", \"a ab aa bb c\"]) == 13\n\nInput\n6\nto be or not to be\n\nOutput\n12\n\nInput\n10\naa bb aa aa bb bb\n\nOutput\n13\n\nInput\n6\nAA AB AB BB\n\nOutput\n16\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 11\n'''\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 12\nassert solution(stdin) == 13\nassert solution(stdin) == 11\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^3\n\n-----SAMPLE 1-----\n\n>>> import math\n>>> import os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"to be or not to be\", \"a ab aa aa bb bb\", \"a ab aa aa bb bb\", \"a ab aa aa bb bb\"]) == \"12\"\nassert solution([\"to be or not to be\", \"a ab aa aa bb bb\", \"a ab aa aa bb bb\", \"a ab aa aa bb bb\"]) == \"11\"\nassert solution([\"a ab aa aa bb bb\", \"a ab aa aa bb bb\", \"a ab aa aa bb bb\", \"a ab aa aa bb bb\"]) == \"12\"\nassert solution([\"a ab aa aa bb bb\", \"a ab aa aa bb bb\", \"a ab aa aa bb bb\", \"a ab aa aa bb bb\"]) == \"11\"\nassert solution([\"a ab aa aa bb bb\", \"a ab aa aa bb bb\", \"a ab aa aa bb bb\", \"a ab aa aa bb bb\"]) == \"11\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"20\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2000\"\n\nassert solution(stdin) == \"4000\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"20\"\nassert solution(stdin) == \"3 2 3\"\nassert solution(stdin) == \"5 4 2 6 5 1 9 2\"\nassert solution(stdin) == \"1 1 1 1 1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('8 3') == '20'\nassert solution('5 4 2 6 5 1 9 2') == '3 2 3'\nassert solution('4 2') == '3'\nassert solution('1 1 1 1 1') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4000\""
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"40\"\n\nassert solution(stdin) == \"15\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4000'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '1'"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"4000\"\nassert solution(input()) == \"4000\"\nassert solution(input()) == \"4000\"\nassert solution(input()) == \"4000\""
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '4000'\n\n\n-----IMPORTS-----\n\nStandard input\n> \n\nStandard output\n> \n\nProgram input\n> \n\nProgram output\n> \n\n=====Solution=====\n\nn = int(input())\na = list(map(int, input().split()))\nm = int(input())\na = list(map(int, input().split()))\n\nprint(max(a))\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4000\"\n\n>>> def solution(stdin: str) -> str:\n    pass\n\n>>> solution(stdin)\n3\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\""
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 6\n\n\n-----Constraints-----\n1 <= n <= 10^4\n1 <= a_1, a_2, a_3 <= 10^9\na_1, a_2, a_3 <= 10^9\n\nTime Limit: 1 sec\n\nGood Luck!\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0'\n\n-----Notes-----\n\nInput\n\nInput is guaranteed to be valid and non-negative.\n\nOutput\n\nFor example, in the input $n$, there are two subsegments. The first subsegment has two positive integers $a_1, a_2$ and the second subsegment has two negative integers $a_3, a_4$ and the sum of the subsegments is $a_3 + a_4$.\n\nThere are no subsegments having sum $0$ in the second example so you don't need to do anything.\n\nInput\n\n4\n-5 3 2\n\nOutput\n\n0\n\nInput\n\n5\n4 -2 3 -9 2\n\nOutput\n\n1\n\nInput\n\n9\n16 -5 -11 -15 10 5 4 -4\n\nOutput\n\n6\n\nInput\n\n8\n16 -5 -11 -15 10 5 4 -4\n\nOutput\n\n3\n\n\n\"\"\"\n\nclass Solution:\n    def minimumInsertions(self, s: str) -> int:\n        \n        if s == \"\":\n            return 0\n        \n        res = 0\n        count = 0\n        stack = []\n        \n        for c in s:\n            if c == \"-\" or c == \"+\":\n                stack.append(c)\n            elif c == \" \":\n                if stack and stack[-1] == \" \":\n                    count += 1\n                else:\n                    res += count + 1\n                    count = 0\n                stack.pop()\n            else:\n                if stack and stack[-1] == \" \" and c == \"0\":\n                    count += 1\n                else:\n                    res += count + 1\n                    count = 0\n                stack.append(c)\n        return res + count\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0'\n\n\n\n-----Reminder-----\n\nThere are two cases for the implementation of the subsegments:\n\n1. An integer $a_{i}$ is called as $a_{i}$ (subsegment $i$) with the sum $a_{i}$ is equal to $a_{i}$ (subsegment $i$ is a subsegment of $a_{i + 1}$, $a_{i + 1}$ is zero).\n2. An integer $a_{i}$ is called as $a_{i}$ (subsegment $i$) with the sum $a_{i}$ is equal to $a_{i}$ (subsegment $i$ is a subsegment of $a_{i + 1}$ with $a_{i + 1}$ not equal to $a_{i + 2}$, $a_{i + 1}$ is zero).\n\nThe numbers $a_1, a_2, \\dots, a_n$ (subsegments of the array) are called as $a_{i}$, where $i$ is a valid element of the array.\n\nAn integer $a_{i}$ is called as $a_{i}$ (subsegment $i$) with the sum $a_{i}$ is equal to $a_{i}$ (subsegment $i$ is a subsegment of $a_{i + 1}$, $a_{i + 1}$ is zero).\n\nThe subsegments of the array are called $a_{i + 1}$, $a_{i}$, $a_{i + 2}$, $a_{i + 3}$ and $a_{i + 4}$, $a_{i + 5}$, $a_{i + 6}$ and $a_{i + 7}$, $a_{i + 8}$, $a_{i + 9}$ and $a_{i + 10}$.\n\nSubsegments of the array are called $a_{i + 1}$, $a_{i}$, $a_{i + 2}$, $a_{i + 3}$, $a_{i + 4}$, $a_{i + 5}$, $a_{i + 6}$, $a_{i + 7}$, $a_{i + 8}$, $a_{i + 9}$, $a_{i + 10}$.\n\n$a_{1}$ and $a_{2}$ are called as $a_{i}$, where $i$ is a valid integer $i$ (subsegment $i$ is a subsegment of $a_{i + 1}$).\n\nThe subsegments of the array are called $a_{1}, $a_{2}, \\dots, $a_{n}$.\n\nThe subsegments of the array are called $a_{1}, $a_{2}, \\dots, $a_{n}$ (subsegments of the array).\n\nThe subsegments are called $a_{i}$, $a_{i + 1}, $a_{i + 2}, $a_{i + 3}, $a_{i + 4}, $a_{i + 5}, $a_{i + 6}, $a_{i + 7}, $a_{i + 8}, $a_{i + 9}, $a_{i + 10}$\n(subsegments of the array).\n\nThe subsegments are called $a_{i + 1}, $a_{i}, $a_{i + 2}, $a_{i + 3}, $a_{i + 4}, $a_{i + 5}, $a_{i + 6}, $a_{i + 7}, $a_{i + 8}, $a_{i + 9}, $a_{i + 10}$\n(subsegments of the array).\n\nThe subsegments are called $a_{i + 1}, $a_{i}, $a_{i + 2}, $a_{i + 3}, $a_{i + 4}, $a_{i + 5}, $a_{i + 6}, $a_{i + 7}, $a_{i + 8}, $a_{i + 9}, $a_{i + 10}$\n(subsegments of the array).\n\nThe subsegments are called $a_{i + 1}, $a_{i}, $a_{i + 2}, $a_{i + 3}, $a_{i + 4}, $a_{i + 5}, $a_{i + 6}, $a_{i + 7}, $a_{i + 8}, $a_{i + 9}, $a_{i + 10}$\n(subsegments of the array).\n\nThe subsegments are called $a_{i + 1}, $a_{i}, $a_{i + 2}, $a_{i + 3}, $a_{i + 4}, $a_{i + 5}, $a_{i + 6}, $a_{i + 7}, $a_{i + 8}, $a_{i + 9}, $a_{i + 10}$\n(subsegments of the array).\n\nThe subsegments are called $a_{i + 1}, $a_{i}, $a_{i + 2}, $a_{i + 3}, $a_{i + 4}, $a_{i + 5}, $a_{i + 6}, $a_{i + 7}, $a_{i + 8}, $a_{i + 9}, $a_{i + 10}$\n(subsegments of the array).\n\nThe subsegments are called $a_{i + 1}, $a_{i}, $a_{i + 2}, $a_{i + 3}, $a_{i + 4}, $a_{i + 5}, $a_{i + 6}, $a_{i + 7}, $a_{i + 8}, $a_{i + 9}, $a_{i + 10}$\n(subsegments of the array).\n\nThe subsegments are called $a_{i + 1}, $a_{i}, $a_{i + 2}, $a_{i + 3}, $a_{i + 4}, $a_{i + 5}, $a_{i + 6}, $a_{i + 7}, $a_{i + 8}, $a_{i + 9}, $a_{i + 10}$\n(subsegments of the array).\n\nThe subsegments are called $a_{i + 1}, $a_{i}, $a_{i + 2}, $a_{i + 3}, $a_{i + 4"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"1 -1 -1 1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 -5 3 2\") == \"1\"\nassert solution(\"5 4 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 1 -1 -1\") == \"0\"\nassert solution(\"8 -1 1 -1 1 -1 -1 -1\") == \"0\"\nassert solution(\"16 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    [\"5\", \"1\", \"100\", \"2\", \"5\", \"2\", \"5\", \"2\", \"100\", \"0\", \"2\", \"0\", \"0\", \"3\", \"0\", \"0\", \"0\", \"0\", \"0\"]\n) == \"2\"\nassert solution(\n    [\"5\", \"1\", \"100\", \"2\", \"5\", \"2\", \"5\", \"2\", \"100\", \"0\", \"2\", \"0\", \"0\", \"3\", \"0\", \"0\", \"0\", \"0\", \"0\"]\n) == \"0\"\nassert solution(\n    [\"5\", \"1\", \"100\", \"2\", \"5\", \"2\", \"5\", \"2\", \"100\", \"0\", \"2\", \"0\", \"0\", \"3\", \"0\", \"0\", \"0\", \"0\", \"0\"]\n) == \"10\"\nassert solution(\n    [\"5\", \"1\", \"100\", \"2\", \"5\", \"2\", \"5\", \"2\", \"100\", \"0\", \"2\", \"0\", \"0\", \"3\", \"0\", \"0\", \"0\", \"0\", \"0\"]\n) == \"0\"\nassert solution(\n    [\"5\", \"1\", \"100\", \"2\", \"5\", \"2\", \"5\", \"2\", \"100\", \"0\", \"2\", \"0\", \"0\", \"3\", \"0\", \"0\", \"0\", \"0\", \"0\"]\n) == \"0\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"5\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2') == '5'\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(max(stdin))"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"5\",\n    [1, 100, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '10'\nassert solution(stdin) == '0'"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 0, \"The answer is not correct\"\n\n\n-----Constraints-----\n0 <= t <= 10^4\n-10^9 <= n <= 10^9\n-10^9 <= m <= 10^9\n\n\n-----Time complexity-----\nBest Case = O(n)\nAverage Case = O(n)\n\nWorst Case = O(n)\n\"\"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"77\") == 4\nassert solution(\"7\") == -1\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == -1\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('101') == 4\nassert solution('1111') == -1\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4\n-----Code-----\nn = int(input())\nK = int(input())\nx = 7\nfor i in range(n):\n    for j in range(i, n):\n        if x%K==0:\n            print(i)\n            break\n        x+=7\n        if x%K==0:\n            print(j)\n            break\n    if x%K==0:\n        break"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(7) or -1\n\n--------------Sample Input:---------------\n7\n\nassert solution(stdin) == str(4)\n\n--------------Sample Output:---------------\n7\n\n8"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"7\") == 4, \"solution(7) is wrong\"\nassert solution(\"7 7\") == 4, \"solution(7 7) is wrong\"\nassert solution(\"77777\") == -1, \"solution(77777) is wrong\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '1' or solution(input) == '-1'\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"3\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"]) == \"8\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"]) == \"7\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"2\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 4 7 3 1 2 4 8 6 10 12 9 13 14 3 4 5\"\n) == \"4\"\nassert solution(\n    \"5 5 4 2 5 3 3 6 4 8 5 6 7\"\n) == \"1\"\nassert solution(\n
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"The number of pairs of indices $(l, r)$ ($1 \\le l \\le r \\le n$) must be exactly the given number $m$.\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"48\"\n\nprint(\"Example 1:\")\nprint(\"Input : \" + str(stdin) + \"; Output: \" + str(48))\n\nprint(\"Example 2:\")\nprint(\"Input : \" + str(stdin) + \"; Output: \" + str(48))\n\nprint(\"Example 3:\")\nprint(\"Input : \" + str(stdin) + \"; Output: \" + str(48))\n\nprint(\"Example 4:\")\nprint(\"Input : \" + str(stdin) + \"; Output: \" + str(48))\n\nprint(\"Example 5:\")\nprint(\"Input : \" + str(stdin) + \"; Output: \" + str(48))"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"2 4 5 3 1\") == \"4\"\nassert solution(\n    \"1 2 3 4 5\") == \"1\"\nassert solution(\n    \"1 5 2 3 4 5 6 7 8 9 10 11 12 13 14 15\") == \"1\"\nassert solution(\n    \"1 8 9 8 8 9 9 10 10 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 48, \"Failed\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"48\"\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"1 4 5 3 7\") == \"1 3 7\"\nassert solution(\"1 2 3 4 5 7\") == \"1 2 3 4 5 7\"\nassert solution(\"1 3 7 4 5 2\") == \"1 2 3 4 5 7\"\nassert solution(\"1 4 5 3 7 2\") == \"1 3 7 2\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"11\"\n\nassert solution(stdin) == \"121\"\n\nassert solution(stdin) == \"123\""
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 8\") == -1\nassert solution(\"5 15\") == 4\nassert solution(\"5 26\") == 2\nassert solution(\"5 26\") == 2\nassert solution(\"5 26\") == 2\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == str(1)\nassert solution(input()) == str(4)\nassert solution(input()) == str(2)\nassert solution(input()) == str(2)\nassert solution(input()) == str(0)\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 4\") == 2\nassert solution(\"1 1 2 1 1\") == 2\nassert solution(\"1 1 2 1 2\") == -1\nassert solution(\"1 1 1 2 1 2\") == -1\nassert solution(\"1 4 5 7 8 9\") == 4\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 6 2 1 4 1') == '4'\nassert solution('5 6 7 4 1 1') == '2'\nassert solution('5 7 3 2 1 1') == '1'\nassert solution('5 7 6 4 1 1') == '1'\nassert solution('5 6 7 5 1 1') == '0'\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1, \"should return -1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n\n\n\"\"\"\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        m, n = map(int, stdin.split())\n        a_1, a_2 = map(int, stdin.split())\n        a_3 = [i + 1 for i in range(a_1, a_2 + 1)]\n        a_4 = [i + 1 for i in range(a_2 + 1, a_3[0] + 1)]\n        a_5 = [i + 1 for i in range(a_3[0], a_3[-1] + 1)]\n        a_6 = [i + 1 for i in range(a_4[0], a_4[-1] + 1)]\n        a_7 = [i + 1 for i in range(a_4[0], a_5[0] + 1)]\n        a_8 = [i + 1 for i in range(a_5[0], a_5[-1] + 1)]\n        a_9 = [i + 1 for i in range(a_6[0], a_6[-1] + 1)]\n        a_10 = [i + 1 for i in range(a_6[0], a_7[0] + 1)]\n        a_11 = [i + 1 for i in range(a_7[0], a_7[-1] + 1)]\n        a_12 = [i + 1 for i in range(a_7[0], a_8[0] + 1)]\n        a_13 = [i + 1 for i in range(a_8[0], a_8[-1] + 1)]\n        a_14 = [i + 1 for i in range(a_8[0], a_9[0] + 1)]\n        a_15 = [i + 1 for i in range(a_9[0], a_9[-1] + 1)]\n        a_16 = [i + 1 for i in range(a_9[0], a_10[0] + 1)]\n        a_17 = [i + 1 for i in range(a_10[0], a_10[-1] + 1)]\n        a_18 = [i + 1 for i in range(a_10[0], a_11[0] + 1)]\n        a_19 = [i + 1 for i in range(a_11[0], a_11[-1] + 1)]\n        a_20 = [i + 1 for i in range(a_11[0], a_12[0] + 1)]\n        a_21 = [i + 1 for i in range(a_12[0], a_12[-1] + 1)]\n        a_22 = [i + 1 for i in range(a_12[0], a_13[0] + 1)]\n        a_23 = [i + 1 for i in range(a_13[0], a_13[-1] + 1)]\n        a_24 = [i + 1 for i in range(a_13[0], a_14[0] + 1)]\n        a_25 = [i + 1 for i in range(a_14[0], a_14[-1] + 1)]\n        a_26 = [i + 1 for i in range(a_14[0], a_15[0] + 1)]\n        a_27 = [i + 1 for i in range(a_15[0], a_15[-1] + 1)]\n        a_28 = [i + 1 for i in range(a_15[0], a_16[0] + 1)]\n        a_29 = [i + 1 for i in range(a_16[0], a_16[-1] + 1)]\n        a_30 = [i + 1 for i in range(a_16[0], a_17[0] + 1)]\n        a_31 = [i + 1 for i in range(a_17[0], a_17[-1] + 1)]\n        a_32 = [i + 1 for i in range(a_17[0], a_18[0] + 1)]\n        a_33 = [i + 1 for i in range(a_18[0], a_18[-1"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"5 7 9 2 1 2\") == \"1\"\nassert solution(\n    \"5 4 5 5 5 5\") == \"0\"\nassert solution(\n    \"5 5 5 5 5 5\") == \"1\"\nassert solution(\n    \"5 6 7 8 9 10\") == \"2\"\nassert solution(\n    \"5 6 7 8 9 10\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 8') == '4'\nassert solution('5 15') == '2'\nassert solution('5 26') == '1'\nassert solution('5 26') == '0'\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1 2 2\") == \"1\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"1 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0\") == \"-1\"\nassert solution(\"2 3 2 0\") == \"3\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0'\n\n\nExplanation\n\nIn the first example Polycarp should increase the first number on $1$, decrease the second number on $1$, increase the third number on $1$, and the fourth number should left unchanged. So, after Polycarp changed three elements by one, his sequence becomes equal to $[25, 20, 15, 10]$, which is an arithmetic progression.\n\nIn the second example Polycarp should not change anything, because his sequence is an arithmetic progression.\n\nIn the third example it is impossible to make an arithmetic progression.\n\nIn the fourth example Polycarp should change only the first element, he should decrease it on one. After that his sequence will looks like $[0, 3, 6, 9, 12]$, which is an arithmetic progression.\n\nIn the fifth example it is impossible to make an arithmetic progression.\n\nIn the sixth example Polycarp should change only the first element, he should decrease it on one. After that his sequence will looks like $[0, 3, 6, 9, 12]$, which is not an arithmetic progression.\n\nIn the seventh example it is impossible to make an arithmetic progression.\n\nIn the eighth example it is impossible to make an arithmetic progression.\n\n\n-----Constraints-----\n\n1 <= n <= 100,000\n1 <= b_1, b_2, \\dots, b_n <= 10^9\n\n\"\"\"\nimport math"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == -1\nassert solution(stdin) == \"10\"\n\n-----Solution-----"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-2'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-2'\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 3\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 10\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 4') == '3'\nassert solution('5 4') == '5'\nassert solution('6 1') == '6'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 14\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 10\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\n\n\n-----Test-----\n>>> import sys\n>>> input = sys.stdin.readline\n>>> a, b = map(int, input().split())\n>>> print(solution(str(a)+str(b)))\n1\n'''"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '6'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 4 3\") == 7\nassert solution(\"3 4 5\") == 5\nassert solution(\"3 4 6\") == 6\nassert solution(\"3 4 7\") == -1\nassert solution(\"5 4 10\") == -1\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 5 3 6 7 8 9 10\") == \"6\"\nassert solution(\"5 5 10 3 6 5 5 4 10\") == \"1\"\nassert solution(\"5 5 6 5 7\") == \"0\"\nassert solution(\"0 1 5 1 2 3 5 2 5 3\") == \"0\"\nassert solution(\"1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 7\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 10 7\") == 7\nassert solution(\"5 8 3 6\") == 3\nassert solution(\"8 10 3 6\") == -1"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(f.read()) == '7'\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2 1\") == \"5\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"1 3\") == \"5\"\nassert solution(\"2 5\") == \"3\"\nassert solution(\"2 4\") == \"3\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 7\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"5 10 7\"\n    ), \"You have not provided a valid input\""
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"7\"\n\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 7\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"6 3 4\"\n) == \"No\"\n\nassert solution(\"3 4\") == \"No\"\nassert solution(\"4 3\") == \"No\"\nassert solution(\"5 4\") == \"No\"\nassert solution(\"6 3 4\") == \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    '6 3 4'\n    ) == 'Yes'\n\nassert solution(\n    '3 4'\n    ) == 'No'\n\nassert solution(\n    '5 3'\n    ) == 'Yes'\n\nassert solution(\n    '6 5'\n    ) == 'No'\n\nassert solution(\n    '3 7'\n    ) == 'No'"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(sys.stdin.readline().strip()) == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1,2,3,4,5,6) == \"Yes\"\nassert solution(1,2,3,4,5,7) == \"Yes\"\nassert solution(1,2,3,4,5,8) == \"No\"\nassert solution(2,2,1,1,1,2) == \"Yes\"\nassert solution(2,2,1,1,2,2) == \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 4 3\") == \"No\"\nassert solution(\"1 4 2\") == \"No\"\nassert solution(\"1 4 2\") == \"Yes\"\nassert solution(\"1 4 2\") == \"Yes\"\nassert solution(\"1 4 2\") == \"Yes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"Yes\"\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"3\", \"4\", \"1\"]) == \"No\"\nassert solution([\"3\", \"3\", \"3\"]) == \"No\"\nassert solution([\"3\", \"3\", \"2\"]) == \"No\"\nassert solution([\"1\", \"1\", \"1\"]) == \"No\"\nassert solution([\"1\", \"2\", \"2\"]) == \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 'Yes'\n\nassert solution(input()) == 'No'\n\nassert solution(input()) == 'Yes'\n\nassert solution(input()) == 'No'\n\nassert solution(input()) == 'Yes'"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"No\"\nassert solution(\"1 3\") == \"No\"\nassert solution(\"3 3 3 3\") == \"No\"\nassert solution(\"2 4 3 3\") == \"No\"\nassert solution(\"1 2 3 4 5 6\") == \"Yes\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 0 0\") == \"YES\"\nassert solution(\"0 1 1 0 1\") == \"YES\"\nassert solution(\"0 0 0 0 0\") == \"NO\"\nassert solution(\"0 0 0 0 0 0\") == \"YES\"\nassert solution(\"0 0 0 0 0 0\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"4 4\") == \"YES\"\nassert solution(\"4 4\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 5\") == \"YES\"\nassert solution(\"3 5\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"5 3\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin=\n    \"3 3\\n1 1\\n0 1\\n1 0\\n0 0\\n\"\n) == \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 2\",\n    \"1 1\",\n    \"0 1\",\n    \"0 0\",\n    \"0 0\",\n    \"0 0\",\n    \"1 1\",\n    \"1 1\",\n    \"0 1\",\n    \"1 1\",\n    \"1 1\"\n) == \"YES\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\n\n\nInput\n42\n\nOutput\nNo\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        t = int(stdin)\n        if t % 2 == 0:\n            return 'Yes'\n        else:\n            return 'No'"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"3\") == \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1234\") == \"Yes\"\nassert solution(\"123456\") == \"Yes\"\nassert solution(\"abc123\") == \"No\"\nassert solution(\"abcde\") == \"No\"\nassert solution(\"abcd1234\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1000\") == \"No\"\nassert solution(\"1110\") == \"Yes\"\nassert solution(\"1009\") == \"Yes\"\nassert solution(\"10001\") == \"Yes\"\nassert solution(\"1010\") == \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'Yes'\n'''\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(343) == \"Yes\", \"solution() failed!\"\nassert solution(1) == \"No\", \"solution() failed!\"\nassert solution(466) == \"Yes\", \"solution() failed!\"\nassert solution(432) == \"No\", \"solution() failed!\"\nassert solution(5122) == \"Yes\", \"solution() failed!\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"037\") == \"Yes\"\nassert solution(\"037\") == \"No\"\nassert solution(\"037\") == \"Yes\"\nassert solution(\"037\") == \"No\"\nassert solution(\"037\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(string) == \"Yes\"\nassert solution(string) == \"No\"\n\n###\n'''\nclass Solution:\n    def solution(self,stdin: str) -> str:\n        pass"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10011\") == \"Yes\"\nassert solution(\"112\") == \"No\"\nassert solution(\"10\") == \"Yes\"\nassert solution(\"123456\") == \"Yes\"\nassert solution(\"100100\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\") == \"Yes\"\nassert solution(\"2222\") == \"No\"\nassert solution(\"11100\") == \"Yes\"\nassert solution(\"123456789\") == \"Yes\"\nassert solution(\"111111111111111\") == \"No\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 2 1\") == \"5\"\nassert solution(\"6 2 1\") == \"3\"\nassert solution(\"6 1 0\") == \"1\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"1 4\") == \"1\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '3'\n\nassert solution(input()) == '1'\n\nassert solution(input()) == '2'\n\nassert solution(input()) == '5'\n\nassert solution(input()) == '0'\n\nprint('Example 1:')\nprint('Input : ')\nprint('5 2 1')\nprint('Output : ')\nprint('3')\n\nprint('Example 2:')\nprint('Input : ')\nprint('6 2 1')\nprint('Output : ')\nprint('3')\n\nprint('Example 3:')\nprint('Input : ')\nprint('6 2 0')\nprint('Output : ')\nprint('2')\n\nprint('Example 4:')\nprint('Input : ')\nprint('6 0 0')\nprint('Output : ')\nprint('2')\n\nprint('Example 5:')\nprint('Input : ')\nprint('6 0 0')\nprint('Output : ')\nprint('0')\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\""
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"5 6 1 0 0 1 0 1 0 0\"\n) == \"5\"\nassert solution(\n    \"6 2 1 0 0 1 0 1 0 0\"\n) == \"3\"\nassert solution(\n    \"6 2 1 0 0 1 0 1 0 0\"\n) == \"4\"\nassert solution(\n    \"6 2 1 0 0 1 0 1 0 1\"\n) == \"3\"\nassert solution(\n    \"6 2 1 0 0 1 0 1 0 0\"\n) == \"3\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == '5'\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"6 2 1 1 1 1 0 0 0 0 0 0 0 1 1 0 1 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"5\"\n\n\n-----Advanced-----\n\nFor more information, please check the problem: https://math.stackexchange.com/questions/485421/how-to-find-the-maximum-number-of-segments-of-distance-the-robot-can-go-through-the-next-point-to-the-destination\n\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution) == \"3\"\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '375'\nassert solution(stdin) == '-46'\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1+1') == '1'\nassert solution('1+2') == '3'\nassert solution('5-4') == '-1'\nassert solution('0-1') == '0'\nassert solution('5+2-1') == '0'\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"375\"\n\n\n------SAMPLE INPUT------\n5\n\n2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n2+2\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == str(375)\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"8+2-1\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"8-7+6-5+4-3+2-1-0\"\n) == \"4\"\nassert solution(\n    \"2+2\"\n) == \"9\"\nassert solution(\n    \"112-37\"\n) == \"375\"\nassert solution(\n    \"3+5\"\n) == \"-46\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == -46\nassert solution(stdin) == 375"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1+2\") == \"4\"\nassert solution(\"1*4-1*3\") == \"3\"\nassert solution(\"1*6-5*4-3*2-1-0\") == \"5\""
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    ['8-7+6-5+4-3+2-1-0']\n) == '4'\nassert solution(\n    ['2+2']\n) == '-46'\nassert solution(\n    ['112-37']\n) == '375'\n\nSolution\n\n1-1+2-2-2-2-2-2-2-2-2\n2-2+2\n\n2-1+2-2-2-2-2-2-2-2-2\n2-2\n\n2-1-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2-2-2-2-2-2-2-2-2\n2-2\n\n2-1+2-2"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"1+2*(3+4-5+6)\"\n) == \"12\"\nassert solution(\n    \"0+4\"\n) == \"0\"\nassert solution(\n    \"12/8\"\n) == \"3\"\nassert solution(\n    \"12/8\"\n) == \"4\"\nassert solution(\n    \"12/8\"\n) == \"5\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution == \"YES\"\n\nInput\n3 3\n\nOutput\nYES\n2 2\n2 3\n3 4\n4 1\n3 2\n1 4\n4 3\n1 3\n3 2\n2 4\n4 1\n\n\"\"\"\n\nimport sys\n\nn, k = list(map(int, input().split()))\n\npairs = []\n\nfor _ in range(n):\n    pairs.append(list(map(int, sys.stdin.readline().split())))\n\nsolution_dict = {\n    \"NO\": \"NO\",\n    \"YES\": \"YES\"\n}\n\nfor i in range(k):\n    best_color = min(pairs[i])\n    color_to_check = pairs[i][best_color]\n    for j in range(i+1, n):\n        if pairs[j][best_color] == color_to_check:\n            if solution_dict[solution_dict[\"YES\"]] == \"YES\":\n                print(\"YES\")\n                sys.exit()\n            else:\n                print(\"NO\")\n                sys.exit()\n\nprint(\"NO\")"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n0 <= n <= 10^5\n0 <= k <= n\n\n'''\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 3 2 3 3 2 3 3 2 3 2 3 3 2 3 2 3 2 2 3 2 3 3 2 3 3 2 3 3 2 3 3 2 3 2 3 3 2 3 3 2 3 3 2 3 3 2 3 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 182 183 184 185 186 187 188 189 190 191 190 192 191 193 194 195 196 197 198 199 201 201 202 203 204 205 206 207 208 208 209 210 211 211 212 213 214 215 216 217 219 220 220 221 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 237 238 239 240 241 242 244 245 246 246 247 248 249 250 252 253 254 255 256 257 258 259 259 261 262 263 263 264 265 266 267 268 268 269 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 287 288 289 290 291 291 292 293 294 295 296 297 298 299 299 300 301 301 302 304 305 306 308 309 311 310 312 313 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 330 331 331 332 332 332 333 333 333 334 334 335 336 337 337 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"YES\"\n\"\"\"\n\nclass Solution:\n    def color_choose(self,n,k):\n        if n == 1:\n            return (1,k)\n        if n == 2:\n            return (1,k)\n        if n == 3:\n            return (1,k)\n        if n == 4:\n            return (1,k)\n        \n        if k==0:\n            return (2,1)\n        if k==1:\n            return (2,1)\n        if k==2:\n            return (2,1)\n        if k==3:\n            return (2,1)\n        \n        if k==4:\n            return (2,1)\n        if k==5:\n            return (2,1)\n        if k==6:\n            return (2,1)\n        \n        return (2,1)\n        \n        \n    def color_choose_better(self,n,k):\n        if n==1:\n            return (1,k)\n        if n==2:\n            return (1,k)\n        if n==3:\n            return (1,k)\n        if n==4:\n            return (1,k)\n        \n        if k==0:\n            return (2,1)\n        if k==1:\n            return (2,1)\n        if k==2:\n            return (2,1)\n        if k==3:\n            return (2,1)\n        \n        if k==4:\n            return (2,1)\n        if k==5:\n            return (2,1)\n        if k==6:\n            return (2,1)\n        \n        return (2,1)\n    \n    \n    def color_choose_better2(self,n,k):\n        if n==1:\n            return (1,k)\n        if n==2:\n            return (1,k)\n        if n==3:\n            return (1,k)\n        if n==4:\n            return (1,k)\n        \n        if k==0:\n            return (2,1)\n        if k==1:\n            return (2,1)\n        if k==2:\n            return (2,1)\n        if k==3:\n            return (2,1)\n        \n        if k==4:\n            return (2,1)\n        if k==5:\n            return (2,1)\n        if k==6:\n            return (2,1)\n        \n        return (2,1)\n\n\n        \n    def solution(stdin: str) -> str:\n        n,k = map(int,stdin.split())\n        return self.color_choose(n,k)\n        \n\nclass Solution:\n    def color_choose(self,n,k):\n        if n == 1:\n            return (1,k)\n        if n == 2:\n            return (1,k)\n        if n == 3:\n            return (1,k)\n        if n == 4:\n            return (1,k)\n        \n        if k==0:\n            return (2,1)\n        if k==1:\n            return (2,1)\n        if k==2:\n            return (2,1)\n        if k==3:\n            return (2,1)\n        \n        if k==4:\n            return (2,1)\n        if k==5:\n            return (2,1)\n        if k==6:\n            return (2,1)\n        \n        return (2,1)\n\n    def color_choose_better(self,n,k):\n        if n==1:\n            return (1,k)\n        if n==2:\n            return (1,k)\n        if n==3:\n            return (1,k)\n        if n==4:\n            return (1,k)\n        \n        if k==0:\n            return (2,1)\n        if k==1:\n            return (2,1)\n        if k==2:\n            return (2,1)\n        if k==3:\n            return (2,1)\n        \n        if k==4:\n            return (2,1)\n        if k==5:\n            return (2,1)\n        if k==6:\n            return (2,1)\n        \n        return (2,1)\n\n    def color_choose_better2(self,n,k):\n        if n==1:\n            return (1,k)\n        if n==2:\n            return (1,k)\n        if n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10 3\") == \"YES\"\nassert solution(\"13 4\") == \"YES\"\nassert solution(\"10 4\") == \"NO\"\nassert solution(\"13 4\") == \"NO\"\nassert solution(\"10 20\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1234567890\") == \"YES\"\nassert solution(\"1234\") == \"NO\"\nassert solution(\"1234567890\") == \"YES\"\nassert solution(\"123456789\") == \"YES\"\nassert solution(\"12345678\") == \"YES\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1, \"the solution is not correct\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\n'''"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1, 'The result is not correct'\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input().split()) == -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\n\nassert solution(stdin) == 100\n\nassert solution(stdin) == 100\n\nassert solution(stdin) == 100\n\nassert solution(stdin) == 100\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n\n\n\n---------------------------------------------------------------------------------------------\n\nAccepted\n15.0\n\nSubmissions\n2\n\n-----------------\n\n60\n\nSubmissions\n2\n\n-----------------\n\n60\n\nAccepted\n16.0\n\nSubmissions\n1\n\n-----------------\n\n100\n\nAccepted\n12.0\n\nSubmissions\n1\n\n-----------------\n\n100\n\nAccepted\n2.0\n\nSubmissions\n3\n\n-----------------\n\n100\n\nAccepted\n12.0\n\n-----------------\n\n100\n\nAccepted\n15.0\n\n-----------------\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------\n\n100\n\nAccepted\n16.0\n\n-----------------"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\") == \"9\"\nassert solution(\"1 5 2 10 10\") == \"13\"\nassert solution(\"1 2 3 4 5 1\") == \"1\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 1\") == \"3\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"12 6\") == \"5\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\nassert solution(stdin) == '21'"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 2') == 3\nassert solution('2 1') == 0\nassert solution('3 1') == 1\nassert solution('4 1') == 0\nassert solution('5 2') == 1 + 2\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"21\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"00100\"\nassert solution(stdin) == \"0011\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 1\") == \"4\"\nassert solution(\"6 1\") == \"15\"\nassert solution(\"12 6\") == \"4\"\nassert solution(\"12\") == \"3\"\nassert solution(\"11 6\") == \"1\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0\n\nassert solution(stdin) == 21"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5 3') == '3'\nassert solution('6 1') == '3'\nassert solution('4 1') == '4'\nassert solution('12 6') == '15'\nassert solution('12 6') == '14'\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"21\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"12\""
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('zzz') == 'Yes'\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(ST) == 'Yes' or solution(T) == 'Yes'\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"aazbzca\") == \"Yes\"\nassert solution(\"bbb\") == \"No\"\nassert solution(\"\") == \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"azzel\"\n) == \"Yes\"\nassert solution(\"apple\") == \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('azel') == 'apple'\nassert solution('apple') == 'apple'\nassert solution('azzel') == 'apple'\nassert solution('zzel') == 'Yes'\nassert solution('a') == 'Yes'\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp := \"azzelapple\"), \"zzz\"\nassert solution(inp := \"aa\"), \"ZZ\"\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(['a','z','u','c','b','a','l','z']) == 'Yes'\nassert solution(['x','t','a','r','u','y','a','z']) == 'No'\n\"\"\"\n\nclass Solution:\n    def makesquare(self, s: str) -> bool:\n        \"\"\"\n        # To complete this problem, you will need to complete the following method:\n        \"\"\"\n        pass"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"2\"\nassert solution(\"20\") == \"2\"\nassert solution(\"1000000000\") == \"2\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == '0'\nassert solution(\"1 1\") == '0'\nassert solution(\"1 3\") == '0'\nassert solution(\"1 10\") == '0'\nassert solution(\"1 5 10\") == '0'\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"10\"\nassert solution(\"4\") == \"10\"\nassert solution(\"5\") == \"20\"\nassert solution(\"6\") == \"20\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"The minimum amount needed to achieve it is \u00a3\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"210\"\nassert solution(\"100\") == \"199\"\nassert solution(\"1000\") == \"19\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"Kaiji\", 5) == \"5\"\nassert solution(\"Kaiji\", 6) == \"0\"\nassert solution(\"Takahashi\", 5) == \"8\"\nassert solution(\"Takahashi\", 10) == \"0\"\nassert solution(\"Takahashi\", 4) == \"8\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 5 1\") == \"3\"\nassert solution(\"5 3\") == \"3\"\nassert solution(\"3 1 4\") == \"1\"\nassert solution(\"2 5\") == \"1\"\nassert solution(\"2 1\") == \"2\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\"\"4\n1 2\n1 3\n3 4\n3 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1\n1\n1\n2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n1\n1\n2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n1\n1\n2\n3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n3\n2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"12\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 700\") == \"3\"\nassert solution(\"3 500\") == \"3\"\nassert solution(\"5 800\") == \"3\"\nassert solution(\"5 800\") == \"3\"\nassert solution(\"5 500\") == \"3\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\nTo test your solution, open up a terminal window and type:\npython3 solution.py\n\nTo see the output of your program, open up a terminal window and type:\npython3 solution.py\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0 0\") == \"0\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"4 3\") == \"4\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Time complexity-----\nTime complexity is O(n^2 + n) for n = number of problems and 2n+1 for each of the p_i.\nSpace Complexity is O(n)\n\n-----Algorithm-----\nLet n = number of problems.\nEach problem has n+1 points.\nEach problem has n+1 questions.\nEach question has a score of 100i.\nFor each question, there is a score of c_i.\nThus, we want to solve all the 100-point problems using a base score of c_i.\nIn order to solve the questions, we have n+1 questions in total.\nIn order to solve each question, we have n+1 solutions for each question.\nNow we can solve the question.\nEach question is solved for 1 question.\nSo, n = number of questions.\nSo, n = n+1.\n\nThe first question is solved for n=1.\nSo, we can solve n+1 questions.\nHere, we have to solve n+1 solutions for each question.\nSo, n=1.\n\nThe second question is solved for n=1.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 solutions for each question.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we have to solve n+1 questions.\nSo, we"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin: str) == '3'\n    \n\"\"\"\nfrom sys import stdin\nfrom collections import defaultdict\n\nD, G = map(int, stdin.readline().split())\nc_dict = defaultdict(int)\n\nfor i in range(D):\n    c_dict[i] = i\n\nfor i in range(G):\n    c_dict[i+1] += 1\n\nfor i in c_dict:\n    if c_dict[i] > 1:\n        c_dict[i] -= 1\n\nprint(len(c_dict)-1)\nprint(sum(c_dict.values()))"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 700\") == \"3\"\nassert solution(\"3 500\") == \"3\"\nassert solution(\"5 800\") == \"5\"\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"6\"\nassert solution(\"3 4\") == \"5\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"2 1 1\") == \"0\"\nassert solution(\"1 10 1\") == \"0\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 700') == '2'\nassert solution('3 500') == '3'\nassert solution('5 800') == '5'\nassert solution('7 800') == '7'\nassert solution('7 800') == '0'\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\""
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\n\n-----Brute force-----\n\nExample 1\n\nInput\n1\n3 7 3 5 3 5 4 3\n\nOutput\n3\n\nInput\n2\n5 7 3 5 3 5 4 3\n\nOutput\n3\n\nInput\n8\n5 8 4 8 8 7 8 7 4\n\nOutput\n7\n\nInput\n7\n1 4 5 4 4 5 4 5 5\n\nOutput\n7\n\nInput\n2\n1 2 3 4 4 3 4 3 4 4\n\nOutput\n3\n\nInput\n2\n1 2 3 3 3 3 4 4 3\n\nOutput\n1\n\nInput\n5\n3 4 6 4 4 3 4 4 3 3 4\n\nOutput\n3\n\nInput\n1\n1 1 1 1 1 1 1 1 1 1\n\nOutput\n1\n\nInput\n2\n1 2 3 3 4 4 3 4 3 4 4\n\nOutput\n1\n\nInput\n2\n2 2 2 2 2 2 2 2 2 2 2\n\nOutput\n1\n\nInput\n4\n1 4 1 4 4 4 4 4 4 4 4 4\n\nOutput\n3\n\nInput\n3\n1 4 1 4 4 4 4 4 4 4 4 4 4\n\nOutput\n3\n\nInput\n1\n1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n0 <= stdin.length <= 300\n0 <= stdin[i] <= 10^5\n\n\"\"\"\nimport math"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 5 6 3 4 5\") == \"2\"\nassert solution(\"8 7 8 7 8 7\") == \"0\"\nassert solution(\"9\") == \"0\"\nassert solution(\"4 8 8 7 8 4 4 5\") == \"3\"\nassert solution(\"5 5 5 5 5 5 6\") == \"1\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('10 2 2 3') == '3'\nassert solution('10 3 5 3') == '5'\nassert solution('5 7 7 5 6') == '3'\nassert solution('10 7 9 4 4 7') == '2'\nassert solution('10 9 9 7 5 6 7') == '2'\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\nInput\n7\n5 5 4 5 5 5 6\n\nOutput\n2\n\nInput\n8\n4 8 8 7 8 4 4 5\n\nOutput\n3\n\nInput\n9\n2 3 4 2 2 3 2 2 4\n\nOutput\n3\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp := \"7 4 5 5 5 5 6\\n\"\nInp: 7\nOut: 2\nassert solution(inp := \"8 4 8 7 8 4 4 5\\n\"\nInp: 8\nOut: 3\nassert solution(inp := \"9\\n\"\nInp: 8\nOut: 1\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    input=\n    \"7 8 4 5 5 5 6\"\n) == \"2\"\nassert solution(\n    input=\n    \"8 7 4 5 5 5 6\"\n) == \"3\"\nassert solution(\n    input=\n    \"9\"\n) == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 3 1\") == \"100\"\nassert solution(\"4 3 1\") == \"100\"\nassert solution(\"2 5\") == \"1\"\nassert solution(\"2 5 1\") == \"0\"\nassert solution(\"2 3 4 2\") == \"1\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == -1\nassert solution(input()) == 100\nassert solution(input()) == 100\nassert solution(input()) == 100\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 18\n\"\"\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin=\"5 2 3\\n5 1 3\\n10 1 1\\n10\\n1\\n1\\n1\\n1\\n10\\n10\\n1\\n10\\n1\\n1\\n10\\n1\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n1\\n10\\n1\\n1\\n10\\n1\\n10\\n1\\n10\\n10\\n1\\n10\\n1\\n10\\n10\\n1\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n1\\n10\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n10\\n1\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\n10\\n10\\n1\\"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"100\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == 18\nassert solution
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"10\"\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"Yes\"\nassert solution(\"11\") == \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 4 7\"), \"No\"\nassert solution(\"2\"), \"No\"\nassert solution(\"1\"), \"No\"\nassert solution(\"0\"), \"No\"\nassert solution(\"5\"), \"Yes\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"11235844\") == \"No\"\nassert solution(\"5\") == \"No\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"12345\") == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5,7) == 'Yes'\nassert solution(2,4) == 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 'Yes'"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(10) == 'Yes'\nassert solution(123) == 'No'\nassert solution(99) == 'No'\nassert solution(1000) == 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 'Yes', '1'\nassert solution(1) == 'No', '1'\nassert solution(0) == 'No', '1'\nassert solution(2) == 'No', '1'\nassert solution(3) == 'No', '1'\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, 5, 5, 5, 5) == \"Yes\"\nassert solution(5, 0, 5, 5, 5) == \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"No\"\nassert solution(\"4 7\") == \"Yes\"\nassert solution(\"0 0\") == \"Yes\"\nassert solution(\"0 0 2\") == \"No\"\nassert solution(\"2 2\") == \"No\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 4) == '2 2 6'\nassert solution(4, 3) == '2 3 5'\nassert solution(3, 2) == '1 2 5'\nassert solution(2, 5) == '3 2 5'\nassert solution(1, 5) == '1 1 5'\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n3 1 5\\n\") == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2 2 6\"\nassert solution(input) == \"2 2\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2 2 6\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2 2 5\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2 2 6'\nassert solution(stdin) == '2 2 6'\nassert solution(stdin) == '2 2 6'\nassert solution(stdin) == '2 2 6'\nassert solution(stdin) == '2 2 6'\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3 5\") == \"2 2 6\"\nassert solution(\"2 3 5\") == \"2 2 6\"\nassert solution(\"3 2 5\") == \"3 2 6\"\nassert solution(\"4 3 5\") == \"5 4 5\"\nassert solution(\"5 5 6\") == \"6 5 6\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2 2 6\"\nassert solution(stdin) == \"2 1 5\"\nassert solution(stdin) == \"1 2 5\"\nassert solution(stdin) == \"3 2 5\"\nassert solution(stdin) == \"3 1 5\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2 2 6\"\nassert solution(input()) == \"2 2 6\"\nassert solution(input()) == \"2 2 6\"\nassert solution(input()) == \"2 2 6\"\nassert solution(input()) == \"2 2 6\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2 2 6\""
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('redcoder') =='redcoder'\nassert solution('redcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoderredcoder"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"redcoder\") == \"\"\nassert solution(\"redcodero\") == \"\"\nassert solution(\"redcoderou\") == \"\"\nassert solution(\"redcoderu\") == \"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"redcoder\") == \"redcoder\"\nassert solution(\"bcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"abcd\") == \"a\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"redcoder\"]) == \"1\"\nassert solution([\"redcoder\", \"redcoder\"]) == \"2\"\nassert solution([\"huga\", \"huga\", \"huga\"]) == \"3\"\nassert solution([\"coder\", \"coder\", \"coder\", \"coder\", \"coder\"]) == \"4\"\nassert solution([\"huggo\", \"huggo\", \"huggo\", \"huggo\", \"huggo\"]) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0) == 0\nassert solution(1) == 0\nassert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 1\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input:\n    \"redcoder\") == 1\n\n    assert solution(\n    input:\n    \"redcoder\"), 1\n\n    assert solution(\n    input:\n    \"takahashi\") == 2"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(4) == 1\nassert solution(\"aab\") == 1\nassert solution(\"aba\") == 2\nassert solution(\"aabacd\") == 2\nassert solution(\"qwertyuiop\") == 1\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 1"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"./tests/input_10.txt\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"Yes\""
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(10) == \"Yes\"\nassert solution(8) == \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"No\"\nassert solution(\"11\") == \"No\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"No\"\nassert solution(\"4\") == \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5\",\"4\",\"5\",\"6\",\"7\"]) == \"Yes\"\nassert solution([\"2\",\"7\",\"6\",\"5\",\"9\",\"8\",\"2\",\"3\",\"1\",\"7\",\"1\",\"7\",\"3\",\"9\"]) == \"No\"\n\n\"\"\"\n\nclass Solution:\n    def canMultiply(self, N: int) -> bool:\n        if N == 0:\n            return False\n        \n        n = [int(x) for x in str(N)]\n        m = 0\n        for i in n:\n            m = max(m, i*(i+1))\n        \n        return m == N\n\n\n\nclass Solution:\n    def canMultiply(self, N: int) -> bool:\n        if N < 0:\n            return False\n        \n        if N == 0:\n            return False\n        \n        for i in range(2, int(math.sqrt(N))+1):\n            if N % i == 0:\n                return False\n        \n        return True\n\n\"\"\"\nclass Solution:\n    def canMultiply(self, N: int) -> bool:\n        if N == 0:\n            return False\n        \n        n = [int(x) for x in str(N)]\n        m = 0\n        for i in n:\n            m = max(m, i*(i+1))\n        \n        if m == N:\n            return True\n        else:\n            return False\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'Yes'\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 'Yes'\nassert solution(0) == 'No'\nassert solution(5) == 'No'\nassert solution(6) == 'No'\nassert solution(10) == 'Yes'\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('12') == 'Yes'\nassert solution('13') == 'No'\nassert solution('16') == 'No'\nassert solution('17') == 'Yes'\nassert solution('18') == 'Yes'\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(10) == \"Yes\"\nassert solution(5) == \"No\"\nassert solution(4) == \"No\"\nassert solution(15) == \"Yes\"\nassert solution(100) == \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5) == \"Yes\"\nassert solution(9) == \"No\"\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5') == '5'\nassert solution('5 7 5') == '3'\nassert solution('5 3 7') == '2'\nassert solution('2 4 3') == '1'\nassert solution('1 3 4') == '0'\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n    5\n    4 4 9 7 5\n    \"\"\"\n) == 5\n\nassert solution(\n\"\"\"\n    7\n    5 7 9 4\n    \"\"\"\n) == 6\n\nassert solution(\n\"\"\"\n    10\n    5 6 8 9 4\n    \"\"\"\n) == 12\n\nassert solution(\n\"\"\"\n    5\n    2 3 4 6 7\n    \"\"\"\n) == 5\n\nassert solution(\n\"\"\"\n    5\n    2 3 4\n    \"\"\"\n) == 6"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == \"5\"\nassert solution(6) == \"6\"\nassert solution(9) == \"11\"\nassert solution(5) == \"2\""
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('', '', '') == '0'\nassert solution('', '', '', '') == '0'\nassert solution('', '', '', '', '') == '0'\nassert solution('', '', '', '', '', '') == '0'\nassert solution('', '', '', '', '', '', '') == '0'\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3 4 5\") == \"3 3 3 3 3\"\nassert solution(\"4 4 9 7 5\") == \"5 5 5 5 5\"\nassert solution(\"1 2 5\") == \"2 2 2 2 2\"\nassert solution(\"2 3 7 5\") == \"2 2 2 2 2\"\nassert solution(\"1 3 2 4\") == \"3 3 3 3\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"5\"\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin = \"5 4 4 8 7\"\n) == \"5\"\nassert solution(\n    stdin = \"5 1 5 4 5\"\n) == \"3\"\nassert solution(\n    stdin = \"5 1 5 4 7\"\n) == \"3\"\nassert solution(\n    stdin = \"5 1 6 4 5\"\n) == \"3\"\nassert solution(\n    stdin = \"5 2 5 4 5\"\n) == \"3\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 2 1 9 4'), '5'\nassert solution('5 3 9 7 5'), '5'\nassert solution('5 4 1 9 7'), '5'\nassert solution('5 5 1 9 7'), '5'\nassert solution('5 6 1 9 7'), '5'\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5') == '5'\nassert solution('4 4 9 7 5') == '2'\nassert solution('4 4 9 7 6') == '1'\nassert solution('4 4 9 8') == '0'\nassert solution('4 4 9 10') == '0'\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == 10\nassert solution(\"1 1\") == -1\nassert solution(\"4 7\") == -1\nassert solution(\"3 5\") == 10\nassert solution(\"9 7\") == -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 1') == '10'\nassert solution('1 5') == '-1'\nassert solution('1 3') == '-1'\nassert solution('1 9') == '-1'\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"10\", \"should be 10\"\nassert solution(\"1 4\") == -1, \"should be -1\"\nassert solution(\"2 1\") == -1, \"should be -1\"\nassert solution(\"1 2\") == -1, \"should be -1\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 10\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    '2 5') == 10\nassert solution(\n    '2 3') == -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 5') == 10\nassert solution('3 5') == -1\nassert solution('2 4') == -1\nassert solution('2 2') == 2\nassert solution('3 2') == -1\n\"\"\"\n\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"-1\""
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 2) == 10, \"solution\"\nassert solution(2, 4) == -1, \"solution\"\nassert solution(9, 4) == 10, \"solution\"\nassert solution(2, 1) == -1, \"solution\"\nassert solution(1, 2) == -1, \"solution\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n  \"2 5\") == \"10\"\nassert solution(\n  \"2 5 7 8 9\") == \"5\"\nassert solution(\n  \"2 5 7 8 9 0\") == \"0\"\nassert solution(\n  \"2 5 7 8 9 9 0\") == \"0\"\nassert solution(\n  \"2 4\") == \"4\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 10\n\n-----Original code----\nnumA = list(map(int, input().split()))\nnumB = list(map(int, input().split()))\nfor i in range(len(numA)):\n    if numA[i] == numB[i]:\n        print(numA[i], end=' ')\n    else:\n        print(-1, end=' ')\n\n------------------\nnumA = list(map(int, input().split()))\nnumB = list(map(int, input().split()))\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \n    input: \"10 12 1 2 14\"\n    \n    output: \"5\"\n    \n    assert solution(\n    \n    input: \"10 12 1 2 14\"\n    \n    output: \"5\"\n    \n    assert solution(\n    \n    input: \"2 5\"\n    \n    output: \"5\"\n    \n    assert solution(\n    \n    input: \"6 9 5 1 6 5 9 5 6 7 5 7\"\n    \n    output: \"3\"\n    \n    assert solution(\n    \n    input: \"2 3 2 1 3 1 2 4 3 2\"\n    \n    output: \"2\"\n    \n    "
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"10\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '5'\n\"\"\"\n\nN, M = map(int, input().split())"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"5\"\n\"\"\"\n\nN, M = list(map(int, input().split()))\n\npiece = list(map(int, input().split()))\n\nfor i in range(M):\n    x = int(input())\n    piece[x-1] += 1"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2 5\"\nassert solution(input()) == \"0 0 1 2 4 6 12 14 16 16\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\"5\",\"1\",\"4\",\"2\",\"4\",\"3\",\"1\",\"2\",\"4\",\"2\"]\n) == 5\nassert solution(\n    [\"5\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]\n) == 0\nassert solution(\n    [\"5\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]\n) == 0\nassert solution(\n    [\"5\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]\n) == 0\nassert solution(\n    [\"5\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]\n) == 0\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 5') == '5'\nassert solution('10 12 1 2 14') == '7'\nassert solution('10 12 1 2 14') == '3'\nassert solution('10 12 1 2 14') == '1'\nassert solution('10 12 1 2 14') == '0'\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5, 10) == 5\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 12\") == \"2\"\nassert solution(\"5 3 10 12\") == \"2\"\nassert solution(\"10 12 1 2 14\") == \"5\""
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 5') == '5'\nassert solution('10 12 1 2 14') == '5'\nassert solution('10 12 1 2 14') == '5'\nassert solution('10 12 1 2 14') == '5'\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"4 6\") == \"2\"\nassert solution(\"5 6\") == \"2\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"111100\"\nassert solution(input()) == \"110110\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '2'\nassert solution(input) == '1'\nassert solution(input) == '1'\nassert solution(input) == '0'\nassert solution(input) == '1'\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '111011'\nassert solution(input()) == '111101'\nassert solution(input()) == '110001'\nassert solution(input()) == '111011'\nassert solution(input()) == '111101'\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('4 6 3 1 2') == '2'\nassert solution('4 6 2 1 3') == '3'\nassert solution('4 6 1 2 3') == '2'\nassert solution('4 6 3 2 1') == '1'\nassert solution('5 6 2 1 3') == '1'\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 4 3') == '1 2'\nassert solution('4 6 3') == '1 2'\nassert solution('5 6 2') == '1 3'\nassert solution('5 6 2') == '1 3'\nassert solution('4 6 3') == '1 4'\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"110110\"\nassert solution(stdin) == \"111100\"\nassert solution(stdin) == \"111001\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"4 5 3\"\nassert solution(input()) == \"1 2\"\nassert solution(input()) == \"1 4\"\nassert solution(input()) == \"2 3\"\nassert solution(input()) == \"1 4\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3\\n2') == 'YES', 'incorrect'\nassert solution('2\\n3') == 'NO', 'incorrect'\nassert solution('2\\n2') == 'YES', 'incorrect'\nassert solution('2\\n10\\n10') == 'YES', 'incorrect'\nassert solution('2\\n3\\n3') == 'NO', 'incorrect'\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == \"YES\"\nassert solution(\"5 1\") == \"YES\"\nassert solution(\"4 3\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"1\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 3 5\") == \"YES\"\nassert solution(\"4 5 2\") == \"YES\"\nassert solution(\"4 4 5\") == \"NO\"\nassert solution(\"6 6 4\") == \"NO\"\nassert solution(\"3 3 3\") == \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"2 4\") == \"NO\"\nassert solution(\"2 3 5\") == \"NO\"\nassert solution(\"3\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('100 6') == '9'\nassert solution('1000000000000 5') == '4'\nassert solution('-100 -200 -300 125 77 -4') == '-1'\nassert solution('100 6') == '4'"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 9\nassert solution(stdin) == 4999999999996\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1000 6\") == \"9\"\nassert solution(\"1000 7\") == \"4\"\nassert solution(\"1000 8\") == \"4\"\nassert solution(\"1000 9\") == \"4\"\nassert solution(\"1000 10\") == \"5\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4999999999996\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 4\nassert solution(input()) == 4\nassert solution(input()) == -1\nassert solution(input()) == -1\nassert solution(input()) == -1\n\nprint('Example 1:')\nprint('Input :')\nprint('stdin : 100 100')\nprint('Exception :')\nprint('0')\nprint('Output :')\nprint('4')\n\nprint('Example 2:')\nprint('Input :')\nprint('stdin : 1 6')\nprint('Exception :')\nprint('-1')\nprint('Output :')\nprint('-1')\nprint('0')\nprint('Output :')\nprint('-1')"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('100' + '-200-300-125-77-4') == '9'\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0, -1, 100000, 6) == -1, \"1 is not a valid solution for H = 0\"\nassert solution(0, 1000000, 1000000000, 0) == 4, \"100000 is not a valid solution for H = 0\"\nassert solution(10000, -1, 1000000, 0) == -1, \"1 is not a valid solution for H = 10\"\nassert solution(10000, -1, 100000000, 0) == -1, \"1 is not a valid solution for H = 10\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1000000000000 5') == '9'\nassert solution('100 -200 -300 125 77 -4') == '4'\nassert solution('100000000074 -100 -200 -300 125 77 -4') == '-1'\nassert solution('-1 0 0 0 0') == '-1'"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ABABA\") == \"AZ\"\nassert solution(\"ABABABAAB\") == \"AZ\"\nassert solution(\"ABABABA\") == \"AZ\"\nassert solution(\"ABABABABA\") == \"AZ\"\nassert solution(\"ABABABABA\") == \"AZ\"\n\n\n-----Constraints-----\n1 <= n <= 100\ns consists of only capital Latin letters.\nInput is always valid.\n\nTime Limit: 1 second\n\nExample Input:\n8\nABAAAAA\nABAAABABAABAA\nABABABABAAABABA\nAABABABABABABAABAA\nBABBAABBABABABA\nAABABABABABABABA\nABABABABABABABA\nBBAABABABABABABA\nAABABABABABABABA\nABABABABABABABA\nABABABABABABABABA\nBBAABABABABABABA\nAABABABABABABABA\nABABABABABABABA\nBBAABABABABABABA\nAABABABABABABABA\nABABABABABABABA\nBBAABABABABABABA\nAABABABABABABABA\nABABABABABABABA\nBBAABABABABABABA\nAABABABABABABABA\nABABABABABABABA\nBBAABABABABABABA\nAABABABABABABABA\nABABABABABABABABA\nBBAABABABABABABA\nAABABABABABABABA\nABABABABABABABABA\nBBAABABABABABABA\nAABABABABABABABABA\nABABABABABABABABA\nBBAABABABABABABABA\nAABABABABABABABABA\nABABABABABABABABA\nBBAABABABABABABABABA\nAABABABABABABABABABA\nABABABABABABABABABABA\nBBAABABABABABABABABA\nAABABABABABABABABABABA\nABABABABABABABABABABABA\nBBAABABABABABABABABABABA\nAABABABABABABABABABABABABABABABA\n
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('AB') == 'AB'\nassert solution('AABBBBA') == 'AABBBBA'\nassert solution('ZZZAA') == 'ZZZAA'\nassert solution('ZZZZ') == 'ZZZZ'\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"AAAABAB\"), \"AAAAB\"\nassert solution(\"AAAAABB\"), \"AAA\"\nassert solution(\"BABABA\"), \"BA\"\nassert solution(\"AA\"), \"A\"\nassert solution(\"B\"), \"B\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"AZ\", \"Please print a substring using two-grams\"\nassert solution(stdin) == \"AA\", \"Please print a substring using two-grams\"\nassert solution(stdin) == \"AZ\", \"Please print a substring using two-grams\"\nassert solution(stdin) == \"AA\", \"Please print a substring using two-grams\"\nassert solution(stdin) == \"AZ\", \"Please print a substring using two-grams\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'ZZ' or solution(stdin) == 'ZZZ'\n'''\nclass Solution:\n    def solve(self, n, s):\n        \"\"\"\n        :type n: int\n        :type s: str\n        :rtype: str\n        \"\"\"\n        matrix = [[0] * n for _ in range(n)]\n        for i in range(n):\n            matrix[i][i] = 1\n        result = 0\n        for i in range(n):\n            for j in range(i):\n                if s[i] == s[j]:\n                    matrix[i][j] = matrix[j][i] + 1\n                    result = max(result, matrix[i][j])\n        if result == 0:\n            return 'ZZ'\n        for i in range(n):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    matrix[i][j] = matrix[j][i] + 1\n                    result = max(result, matrix[i][j])\n        return 'ZZ' if result == 0 else 'ZZZ'\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"The input string is not valid.\"\nassert solution(stdin) == \"AB\", \"The output string is not correct.\"\n\n\n      \n\"\"\"\n    def __init__(self):\n        self.ans = []\n        self.count = 0\n        self.count_lst = []\n        self.count_lst2 = []\n        self.k = 2\n        self.lst = []\n\n    def solution(self, stdin):\n        pass\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"ABA\",\"AABA\"]) == \"AB\"\nassert solution([\"ABA\",\"BB\"]) == \"AB\"\nassert solution([\"ZZZAA\"]) == \"ZZ\"\nassert solution([\"AA\",\"ZZ\"]) == \"AA\"\nassert solution([\"AZ\",\"ZZA\"]) == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(A) == \"A\"\nassert solution(AA) == \"AA\"\nassert solution(ZZZA) == \"ZZ\"\nassert solution(ZZZAA) == \"ZZ\"\nassert solution(ZZZZZZZZZZZZ) == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"ZZ\"\n\nassert solution(stdin) == \"AA\"\n\nassert solution(stdin) == \"AZ\"\n\nassert solution(stdin) == \"BA\"\n\nassert solution(stdin) == \"BB\""
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == [\"BB\",\"AA\",\"ZZZ\"]\n\nassert solution(stdin) == [\"AA\",\"ZZZ\"]\n\nassert solution(stdin) == [\"AA\",\"ZZ\"]\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n\n\n-----Advanced-----\n\nYour solution should have all of the solutions in mind.\n\n-----Algorithm-----\n\nIn order to reduce the number of moves, we have to keep track of a string as a variable. We'll be keeping track of the moves required to determine that the string is equal to the empty string, and so, as a result, we have a way to compute the minimum number of moves required to make the string equal to the empty string. \n\nTime complexity: O(1).\n\nSpace complexity: O(1).\n\nYou have to keep track of all the string variables. The string variable stores the characters in the string and the variable that stores the number of moves required to make the string equal to the empty string.\n\n\n\n-----Constraints-----\n\n1 \u2264 s.length \u2264 2 * 10^5\n\n\n\n-----Example 1-----\n\nInput\ntest\ncodeforces\n\nOutput\n8\n\nInput\ntest\ncodeforces\n\nOutput\n3\n\nInput\ntest\ncodeforces\n\nOutput\n1\n\nInput\ntest\ncodeforces\n\nOutput\n6\n\nInput\ntest\ncodeforces\n\nOutput\n7\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\nInput\ntest\ncodeforces\n\nOutput\n3\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 2-----\n\nInput\ntest\ncodeforces\n\nOutput\n9\n\nInput\ntest\ncodeforces\n\nOutput\n3\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 3-----\n\nInput\ntest\ncodeforces\n\nOutput\n1\n\n\n\n-----Example 4-----\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\nInput\ntest\ncodeforces\n\nOutput\n4\n\nInput\ntest\ncodeforces\n\nOutput\n1\n\nInput\ntest\ncodeforces\n\nOutput\n3\n\n\n\n-----Example 5-----\n\nInput\ntest\ncodeforces\n\nOutput\n1\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Constraints-----\n\nTime complexity: O(1).\n\nSpace complexity: O(1).\n\n\n\n-----Example 6-----\n\nInput\ntest\ncodeforces\n\nOutput\n8\n\nInput\ntest\ncodeforces\n\nOutput\n3\n\n\n\n-----Example 7-----\n\nInput\ntest\ncodeforces\n\nOutput\n4\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 8-----\n\nInput\ntest\ncodeforces\n\nOutput\n3\n\n\n\n-----Example 9-----\n\nInput\ntest\ncodeforces\n\nOutput\n1\n\nInput\ntest\ncodeforces\n\nOutput\n1\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 10-----\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 11-----\n\nInput\ntest\ncodeforces\n\nOutput\n4\n\n\n\n-----Example 12-----\n\nInput\ntest\ncodeforces\n\nOutput\n3\n\n\n\n-----Example 13-----\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 14-----\n\nInput\ntest\ncodeforces\n\nOutput\n1\n\n\n\n-----Example 15-----\n\nInput\ntest\ncodeforces\n\nOutput\n1\n\n\n\n-----Example 16-----\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 17-----\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 18-----\n\nInput\ntest\ncodeforces\n\nOutput\n4\n\n\n\n-----Example 19-----\n\nInput\ntest\ncodeforces\n\nOutput\n1\n\n\n\n-----Example 20-----\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 21-----\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 22-----\n\nInput\ntest\ncodeforces\n\nOutput\n1\n\n\n\n-----Example 23-----\n\nInput\ntest\ncodeforces\n\nOutput\n1\n\n\n\n-----Example 24-----\n\nInput\ntest\ncodeforces\n\nOutput\n3\n\n\n\n-----Example 25-----\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 26-----\n\nInput\ntest\ncodeforces\n\nOutput\n3\n\n\n\n-----Example 27-----\n\nInput\ntest\ncodeforces\n\nOutput\n4\n\n\n\n-----Example 28-----\n\nInput\ntest\ncodeforces\n\nOutput\n1\n\n\n\n-----Example 29-----\n\nInput\ntest\ncodeforces\n\nOutput\n3\n\n\n\n-----Example 30-----\n\nInput\ntest\ncodeforces\n\nOutput\n1\n\n\n\n-----Example 31-----\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 32-----\n\nInput\ntest\ncodeforces\n\nOutput\n3\n\n\n\n-----Example 33-----\n\nInput\ntest\ncodeforces\n\nOutput\n1\n\n\n\n-----Example 34-----\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 35-----\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 36-----\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 37-----\n\nInput\ntest\ncodeforces\n\nOutput\n4\n\n\n\n-----Example 38-----\n\nInput\ntest\ncodeforces\n\nOutput\n1\n\n\n\n-----Example 39-----\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 40-----\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 41-----\n\nInput\ntest\ncodeforces\n\nOutput\n3\n\n\n\n-----Example 42-----\n\nInput\ntest\ncodeforces\n\nOutput\n3\n\n\n\n-----Example 43-----\n\nInput\ntest\ncodeforces\n\nOutput\n2\n\n\n\n-----Example 44-----\n\nInput\ntest\ncodeforces\n\nOutput\n3\n\n\n\n-----Example 45-----\n\nInput\ntest\ncod"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 8"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(test) == \"est\"\nassert solution(codeforces) == \"est\"\nassert solution(yes) == \"es\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('codeforces') == 'codeforces'\nassert solution('b') == 'b'\nassert solution('ab') == 'ab'\nassert solution('t') == 't'\nassert solution('test') == 'est'"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"where\",\"a\",\"t\",\"a\"]) == \"test\"\nassert solution([\"codeforces\",\"yes\",\"a\",\"t\",\"a\"]) == \"test\"\nassert solution([\"codeforces\",\"yes\",\"codeforces\",\"yes\",\"codeforces\"]) == \"test\"\nassert solution([\"codeforces\",\"yes\",\"codeforces\",\"yes\",\"codeforces\",\"yes\"]) == \"test\"\nassert solution([\"test\",\"test\",\"test\",\"test\",\"test\"]) == \"test\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"test\") == \"test\"\nassert solution(\"yes\") == \"yes\"\nassert solution(\"\") == \"est\"\nassert solution(\"ab\") == \"ab\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"Codeforces\") == \"Est\"\nassert solution(\"Codeforces\") == \"yes\"\nassert solution(\"Codeforces\") == \"Est\"\nassert solution(\"Codeforces\") == \"yes\"\nassert solution(\"Codeforces\") == \"yes\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('test') == 'est'\nassert solution('codeforces') == 'est'\nassert solution('yes') == 'est'\nassert solution('test') == 'est'\nassert solution('b') == 'ab'\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"west\") == \"test\"\nassert solution(\"codeforces\") == \"test\"\nassert solution(\"yes\") == \"est\"\nassert solution(\"b\") == \"est\"\nassert solution(\"a\") == \"ab\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3 3\", \"1 7 11\"]) == 2\nassert solution([\"1 7 11\", \"2 2\"]) == 1\nassert solution([\"1 7 11\", \"3 3\"]) == 2\nassert solution([\"1 2\", \"3 3\"]) == 1\nassert solution([\"1 2\", \"3 3\", \"3 2\"]) == 2\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 3\"\n) == \"2\"\n\n-----Sample Output-----\n2\n\nSetting D = 2 enables you to visit all the cities as follows, and this is the maximum value of such D.\n - Perform Move 2 to travel to coordinate 1.\n - Perform Move 1 to travel to coordinate 3.\n - Perform Move 1 to travel to coordinate 5.\n - Perform Move 1 to travel to coordinate 7.\n - Perform Move 1 to travel to coordinate 9.\n def solution(\n    stdin: str\n) -> str:\n    pass\n\nassert solution(\n    \"3 3\"\n) == \"1\"\n\"\"\"\n\nimport sys\n\nfrom collections import deque\n\nn, k = map(int, sys.stdin.readline().split())\n\ndistance = [-1] * n\n\nq = deque()\nq.append((1, 0))\ndistance[1] = 0\n\nwhile q:\n    val, x = q.popleft()\n    for i in range(x, n):\n        if i + distance[i] < n:\n            distance[i + distance[i]] = max(distance[i] + 1, val)\n            q.append((val, i + distance[i]))\n\nprint(max(distance))"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3,2) == 2\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['1 7', '2', '3', '11', '7', '5', '3']) == '2'\nassert solution(['1', '2', '3']) == '3'\nassert solution(['3', '3', '2']) == '3'\nassert solution(['1', '2', '3', '4', '5', '6', '7']) == '2'\nassert solution(['1', '3', '5']) == '2'\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 4, 'incorrect output'\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"3\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 7 11') == 2\nassert solution('1 3 7 11') == 2\nassert solution('2 2') == 2\nassert solution('5 6 9 10 11') == 2\nassert solution('2 3') == 2\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 3\",\n    \"1 7 11\"\n) == 2, \"Failed\"\nassert solution(\n    \"3 3\",\n    \"2 4\"\n) == 2, \"Failed\"\nassert solution(\n    \"3 3\",\n    \"2 5\"\n) == 2, \"Failed\"\nassert solution(\n    \"3 3\",\n    \"3 4\"\n) == 2, \"Failed\"\nassert solution(\n    \"3 3\",\n    \"5 6\"\n) == 2, \"Failed\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(my_input) == 'Yes'\nassert solution(my_input) == 'No'\n\"\"\"\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        \"\"\"\n        Uses slicing to fix the problem\n        \"\"\"\n        s = s.lower()\n        \n        left, right = 0, len(s)-1\n        while left < right:\n            if s[left]!= s[right]:\n                return False\n            left += 1\n            right -= 1\n            \n        return True\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"AAAA\") == \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'Yes','solution() should return Yes'\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\"\"\"\n\nclass Solution:\n    def isStrong(self, S: str) -> bool:\n        if len(S) <= 3:\n            return True\n        else:\n            start = 0\n            end = len(S)-3\n            for i in range(end, -1, -1):\n                if S[i] == S[i+1] and S[i+1] == S[i+2]:\n                    if S[i] == S[i+1]:\n                        pass\n                    else:\n                        return False\n                    continue\n                else:\n                    return False\n            return True"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s) == 'Yes'"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == 'Yes', 'OK'\nassert solution(2) == 'No', 'OK'"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\" or \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stderr(\"akasaka\")) == \"Yes\"\nassert solution(stderr(\"akasake\")) == \"No\"\n\n------Sample Input-----\nInput is given from Standard Input in the following format:\nS\n\n------Output-----\nIf S is not a palindrome, print NO;\notherwise, print YES.\n\n------Sample Input-----\ninput.txt\n\n------Output-----\ninput.txt\n\n------Sample Input-----\ninput.txt\n\n------Sample Output-----\ninput.txt\n\n------Sample Input-----\ninput.txt\n\n------Sample Output-----\ninput.txt\n\n------Sample Input-----\ninput.txt\n\n------Sample Output-----\ninput.txt\n\n-----Constraints-----\n - S consists of lowercase English letters.\n - The length of S is an odd number between 3 and 99 (inclusive).\n - The number of test cases is between 1 and 100.\n - The input file contains at most 1000 lines of text.\n - The first line of each test case contains the string S.\n'''"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 217\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"198 1.10\"\n) == \"217\"\nassert solution(\"198.1.10\") == \"217\"\nassert solution(\"198.1.10,1.10\") == \"217\"\nassert solution(\"199\") == \"217\"\nassert solution(\"200\") == \"217\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input() == \"217\") == \"217\"\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 217\nprint(f\"solution({input()}) == 217\")\n\n\nA, B = list(map(int, stdin.split(' ')))\nassert A < 10 ** 15 and B > 0\nassert A % 10 == 1\nassert B % 10 == 2\nassert A * 10 ** B == B\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sys.stdin) == 217\n\n\n'''\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        A, B = [int(s) for s in stdin.split()]\n        while B > 0:\n            B %= 10\n            A = B\n            B //= 10\n        return str(A)"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(10,5) == 217\nassert solution(1000,4) == 1010\nassert solution(1,2) == 3\nassert solution(0,2) == 0\nassert solution(1,1) == 1\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"198 1.10\") == 217\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(sys.stdin.readline()) == '217'\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == answer\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(A, B) == B, \"A is not a fractional part of B\"\nassert solution(A, B) == B, \"B is not a fractional part of A\"\nassert solution(A, B) == B, \"B is not a fractional part of A\"\n\n-----Examples-----\nInput 1:\n\nA = 201.6\nB = 0.8\nOutput 1:\n\n107.2\nExplanation 1:\n\nCompute A \\times B, truncate its fractional part, and print the result as an integer.\n\"\"\"\n\nfrom math import trunc\n\nA, B = map(float, input().split())\nA = trunc(A, 3)\nB = trunc(B, 3)\nprint(A * B)\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n\n1 <= t <= 10^4\n\n1 <= n <= 10^9\n\n1 <= a, b <= 10^9\n\n\n-----Example-----\nInput\n3\n1\n1\n\nOutput\n1\n1\n1\n7\n999999999\n381621773\n\n\n\n------Go on!------\n\nExplanation\n\nFor the input string, the expression is the following: $n = a + b$\n\n\nn = a + b\n\na = 1, b = 1\na = 1, b = 2\na = 2, b = 3\na = 1, b = 4\na = 2, b = 3\na = 1, b = 4\na = 2, b = 3\na = 1, b = 5\na = 2, b = 4\na = 1, b = 5\na = 2, b = 5\na = 1, b = 6\na = 2, b = 6\na = 1, b = 7\na = 2, b = 7\na = 1, b = 8\na = 2, b = 8\na = 1, b = 9\na = 2, b = 9\na = 1, b = 10\na = 2, b = 10\na = 1, b = 11\na = 2, b = 11\na = 1, b = 12\na = 2, b = 12\na = 1, b = 13\na = 2, b = 13\na = 1, b = 14\na = 2, b = 14\na = 1, b = 15\na = 2, b = 15\na = 1, b = 16\na = 2, b = 16\na = 1, b = 17\na = 2, b = 17\na = 1, b = 18\na = 2, b = 18\na = 1, b = 19\na = 2, b = 19\na = 1, b = 20\na = 2, b = 20\na = 1, b = 21\na = 2, b = 21\na = 1, b = 22\na = 2, b = 22\na = 1, b = 23\na = 2, b = 23\na = 1, b = 24\na = 2, b = 24\na = 1, b = 25\na = 2, b = 25\na = 1, b = 26\na = 2, b = 26\na = 1, b = 27\na = 2, b = 27\na = 1, b = 28\na = 2, b = 28\na = 1, b = 29\na = 2, b = 29\na = 1, b = 30\na = 2, b = 30\na = 1, b = 31\na = 2, b = 31\na = 1, b = 32\na = 2, b = 32\na = 1, b = 33\na = 2, b = 33\na = 1, b = 34\na = 2, b = 34\na = 1, b = 35\na = 2, b = 35\na = 1, b = 36\na = 2, b = 36\na = 1, b = 37\na = 2, b = 37\na = 1, b = 38\na = 2, b = 38\na = 1, b = 39\na = 2, b = 39\na = 1, b = 40\na = 2, b = 40\na = 1, b = 41\na = 2, b = 41\na = 1, b = 42\na = 2, b = 42\na = 1, b = 43\na = 2, b = 43\na = 1, b = 44\na = 2, b = 44\na = 1, b = 45\na = 2, b = 45\na = 1, b = 46\na = 2, b = 46\na = 1, b = 47\na = 2, b = 47\na = 1, b = 48\na = 2, b = 48\na = 1, b = 49\na = 2, b = 49\na = 1, b = 50\na = 2, b = 50\na = 1, b = 51\na = 2, b = 51\na = 1, b = 52\na = 2, b = 52\na = 1, b = 53\na = 2, b = 53\na = 1, b = 54\na = 2, b = 54\na = 1, b = 55\na = 2, b = 55\na = 1, b = 56\na = 2, b = 56\na = 1, b = 57\na = 2, b = 57\na = 1, b = 58\na = 2, b = 58\na = 1, b = 59\na = 2, b = 59\na = 1, b = 60\na = 2, b = 60\na = 1, b = 61\na = 2, b = 61\na = 1, b = 62\na = 2, b = 62\na = 1, b = 63\na = 2, b = 63\na = 1, b = 64\na = 2, b = 64\na = 1, b = 65\na = 2, b = 65\na = 1, b = 66\na = 2, b = 66\na = 1, b = 67\na = 2, b = 67\na = 1, b = 68\na = 2, b = 68\na = 1, b = 69\na = 2, b = 69\na = 1, b = 70\na = 2, b = 70\na = 1, b = 71\na = 2, b = 71\na = 1, b = 72\na = 2, b = 72\na = 1, b = 73\na = 2, b = 73\na = 1, b = 74\na = 2, b = 74\na = 1, b = 75\na = 2, b = 75\na = 1, b = 76\na = 2, b = 76\na = 1, b = 77\na = 2, b = 77\na = 1, b = 78\na = 2, b = 78\na = 1, b = 79\na = 2, b = 79\na = 1, b = 80\na = 2, b = 80\na = 1, b = 81\na = 2, b = 81\na = 1, b = 82\na = 2, b = 82\na = 1, b = 83\na = 2, b = 83\na = 1, b = 84\na = 2, b = 84\na = 1, b = 85\na = 2, b = 85\na = 1, b = 86\na = 2, b = 86\na = 1, b = 87\na = 2, b = 87\na = 1, b = 88\na = 2, b = 88\na = 1, b = 89\na = 2, b ="
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"3\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^4\n0 <= n <= 2 * 10^9\n-2^31 <= a,b <= 2^31 - 1\n\n\"\"\"\n\n\nclass Solution:\n    def numWays(self, n: int) -> str:\n        \"\"\"\n        Time complexity: O(n)\n        Space Complexity: O(n)\n        \"\"\"\n        if n <= 1:\n            return '0'\n\n        a, b = 0, 1\n        if n % 2!= 0:\n            a, b = 1, 0\n\n        for i in range(1, n + 1):\n            a, b = b, a + b\n            if a >= 2 ** 31:\n                a, b = 1, 0\n            if b >= 2 ** 31:\n                a, b = 0, 1\n        return str(a) + '(' + str(a + b) + ')'\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n\n\n\nTests\n-----\n>>> import sys\n>>> stdin = sys.stdin\n>>> solution = solution\n>>> solution_using_stdin = solution_using_stdin\n>>> solution_using_input = solution_using_input\n>>> input = input\n>>> input_is_string = input_is_string\n>>> input_is_int = input_is_int\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, '{}') == 1\nassert solution(2, '{}') == 0\nassert solution(5, '{}') == 1\nassert solution(7, '{}') == 0\nassert solution(2000000000, '{}') == 0\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(6) == 3\nassert solution(7) == 0\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 1\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3) == 3\nassert solution(4) == 3\nassert solution(5) == 2\nassert solution(6) == 2\nassert solution(7) == 0\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '15'\n\n\n\"\"\""
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 5) == 1\nassert solution(1, 3, 5, 7) == 3\nassert solution(2, 3, 5, 7, 1) == 5\n\n\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"3\"\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('6 4 5') == '3'\nassert solution('6 7 1') == '3'\nassert solution('6 5 5') == '0'\nassert solution('6 5 6') == '0'\nassert solution('6 5 7') == '0'\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"8 7 1\") == \"3\"\nassert solution(\"5 4 5\") == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n\n1 <= n, m <= 1000\n1 <= s, v <= n\n\n\n-----Time Limit Exceeded-----\nTime limit exceeded\n\n\"\"\"\n\nfrom imports import *"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\n\n\n'''\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\n\nConstraints:\n    * 1 <= n <= 5000\n    * 1 <= m <= 5000\n    * 1 <= s <= n\n    * 1 <= u, v <= n\n    * u, v, s are distinct.\n    * 1 <= i <= 9\n    * 1 <= j <= i\n    * Each i, j are distinct.\n    * s is not used in the graph.\n\"\"\"\n\nfrom collections import defaultdict\nfrom collections import deque\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"4 5 2 1\"\n) == 3\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"9\", \"9\", \"1\", \"1\", \"2\", \"1\", \"2\", \"1\", \"1\", \"1\"]) == \"3\"\nassert solution([\"5\", \"4\", \"5\", \"4\", \"2\", \"1\", \"1\", \"1\", \"1\"]) == \"0\"\nassert solution([\"5\", \"5\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\"]) == \"0\"\nassert solution([\"1\", \"2\", \"2\", \"1\", \"3\", \"1\", \"3\", \"1\", \"3\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 0\n\nassert solution(2) == 2\n\nassert solution(3) == 3\n\nassert solution(5) == 0\nassert solution(6) == 2\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 3 1\") == \"4\"\nassert solution(\"2 1 2\") == \"4\"\nassert solution(\"3 2 3 1\") == \"3\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 1 3 1\") == \"4\"\nassert solution(\"6 1 1 1 4 4\") == \"5\"\n\n----------------------\n\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"4\", \"1\", \"1\", \"4\", \"4\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"4\"\n\n\n---\n\n\n\n\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"fails\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 2 4 1\") == \"4\"\nassert solution(\"6 1 1 4 4 4\") == \"4\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 5 3 1\") == \"5\"\nassert solution(\"1 3 1 1\") == \"5\"\nassert solution(\"0 1 1 1\") == \"5\"\nassert solution(\"2 1 2 1\") == \"3\"\nassert solution(\"2 1 2 1 4 4 4\") == \"3\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, 3) == 2\n\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5) == \"5\"\nassert solution(7) == \"5\"\nassert solution(5) == \"5\"\nassert solution(1) == \"0\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2 3') == '000002000001'\nassert solution('1 32') == '000002000000'\nassert solution('2 63') == '000002000000'\nassert solution('1 12') == '000001000002'"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"2 3\"\n) == \"000002000001\"\nassert solution(\"1 32\") == \"000002000001\"\nassert solution(\"1 63\") == \"000002000001\"\nassert solution(\"1 12\") == \"000002000001\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4 9 2') == '1 2'\nassert solution('2 2') == '2'\nassert solution('4 1') == '1'\nassert solution('2 2') == '1'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\": \") == \"000001000002\", '\"solution(\": \") should be \"000001000002\"'\nassert solution(\"\") == \"\", '\"solution(\"\") should be \"\"'"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\n        \"2 3\",\n        \"1 32\",\n        \"2 63\",\n        \"1 12\",\n    ]) == [\n        \"000101000002\",\n        \"000102000001\",\n        \"000101000001\",\n    ]\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2') == '000002000001'\nassert solution('1 3') == '0000020000001'\nassert solution('2 3') == '000002000001'\nassert solution('2 4') == '0000020000002'\nassert solution('2 5') == '0000020000003'\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 5 5 8 1 2\") == \"000002000001\"\nassert solution(\"3 3\") == \"000002000001\"\nassert solution(\"3 3\") == \"000002000001\"\nassert solution(\"1 3\") == \"000002000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"000101000002\" == \"000001000001\"\nassert solution(\"2 63\") == \"000100100011\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 12\") == \"000002000001\"\nassert solution(\"2 3\") == \"000002000001\"\nassert solution(\"1 32\") == \"000002000001\"\nassert solution(\"1 12\") == \"000002000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12\\n') == '000001000002\\n000002000001\\n000001000001'\nassert solution('2 3\\n1 32\\n2 63\\n1 12\\n') == '000001000002\\n000002000001'\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 10 2 3 10 10 5 1 3\"), \"1\"\nassert solution(\"1 1 2 10\"), \"2\"\nassert solution(\"5 1 1 1 4 3 1 1 4\"), \"3\"\nassert solution(\"10 1 1 1 10 1 1 1 1 10\"), \"7\"\nassert solution(\"2 2 2 3 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('2 10 8 40') == '5'\nassert solution('1 7 4 3') == '4'\nassert solution('1 3 4') == '4'\nassert solution('1 2 10 8') == '5'"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"2\"\nprint('Example 1:')\nprint('Input :'+ repr(input))\nprint('Expected :'+ repr('2'))\nprint('Output :'+ str(solution(input)))\n\nprint('Example 2:')\nprint('Input :'+ repr(input))\nprint('Expected :'+ repr('2'))\nprint('Output :'+ str(solution(input)))\n\nprint('Example 3:')\nprint('Input :'+ repr(input))\nprint('Expected :'+ repr('3'))\nprint('Output :'+ str(solution(input)))\n\nprint('Example 4:')\nprint('Input :'+ repr(input))\nprint('Expected :'+ repr('0'))\nprint('Output :'+ str(solution(input)))"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\nassert solution(5) == 5\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"2\"\n'''\n\nimport sys\n\nN = int(sys.stdin.readline())\nA_1 = list(map(int,sys.stdin.readline().split()))\nA_2 = list(map(int,sys.stdin.readline().split()))\nA_3 = list(map(int,sys.stdin.readline().split()))\nA_4 = list(map(int,sys.stdin.readline().split()))\nA_5 = list(map(int,sys.stdin.readline().split()))\nA_6 = list(map(int,sys.stdin.readline().split()))\nA_7 = list(map(int,sys.stdin.readline().split()))\nA_8 = list(map(int,sys.stdin.readline().split()))\nA_9 = list(map(int,sys.stdin.readline().split()))\nA_10 = list(map(int,sys.stdin.readline().split()))\nA_11 = list(map(int,sys.stdin.readline().split()))\nA_12 = list(map(int,sys.stdin.readline().split()))\nA_13 = list(map(int,sys.stdin.readline().split()))\nA_14 = list(map(int,sys.stdin.readline().split()))\n\nA_1_lst = []\nfor i in range(0,len(A_1),2):\n    A_1_lst.append(A_1[i])\n    A_1_lst.append(A_1[i+1])\nA_1 = A_1_lst\n\nA_2_lst = []\nfor i in range(0,len(A_2),2):\n    A_2_lst.append(A_2[i])\n    A_2_lst.append(A_2[i+1])\nA_2 = A_2_lst\n\nA_3_lst = []\nfor i in range(0,len(A_3),2):\n    A_3_lst.append(A_3[i])\n    A_3_lst.append(A_3[i+1])\nA_3 = A_3_lst\n\nA_4_lst = []\nfor i in range(0,len(A_4),2):\n    A_4_lst.append(A_4[i])\n    A_4_lst.append(A_4[i+1])\nA_4 = A_4_lst\n\nA_5_lst = []\nfor i in range(0,len(A_5),2):\n    A_5_lst.append(A_5[i])\n    A_5_lst.append(A_5[i+1])\nA_5 = A_5_lst\n\nA_6_lst = []\nfor i in range(0,len(A_6),2):\n    A_6_lst.append(A_6[i])\n    A_6_lst.append(A_6[i+1])\nA_6 = A_6_lst\n\nA_7_lst = []\nfor i in range(0,len(A_7),2):\n    A_7_lst.append(A_7[i])\n    A_7_lst.append(A_7[i+1])\nA_7 = A_7_lst\n\nA_8_lst = []\nfor i in range(0,len(A_8),2):\n    A_8_lst.append(A_8[i])\n    A_8_lst.append(A_8[i+1])\nA_8 = A_8_lst\n\nA_9_lst = []\nfor i in range(0,len(A_9),2):\n    A_9_lst.append(A_9[i])\n    A_9_lst.append(A_9[i+1])\nA_9 = A_9_lst\n\nA_10_lst = []\nfor i in range(0,len(A_10),2):\n    A_10_lst.append(A_10[i])\n    A_10_lst.append(A_10[i+1])\nA_10 = A_10_lst\n\nA_11_lst = []\nfor i in range(0,len(A_11),2):\n    A_11_lst.append(A_11[i])\n    A_11_lst.append(A_11[i+1])\nA_11 = A_11_lst\n\nA_12_lst = []\nfor i in range(0,len(A_12),2):\n    A_12_lst.append(A_12[i])\n    A_12_lst.append(A_12[i+1])\nA_12 = A_12_lst\n\nA_13_lst = []\nfor i in range(0,len(A_13),2):\n    A_13_lst.append(A_13[i])\n    A_13_lst.append(A_13[i+1])\nA_13 = A_13_lst\n\nA_14_lst = []\nfor i in range(0,len(A_14),2):\n    A_14_lst.append(A_14[i])\n    A_14_lst.append(A_14[i+1])\nA_14 = A_14_lst\n\nA_1_pct = 0\nA_2_pct = 0\nA_3_pct = 0\nA_4_pct = 0\nA_5_pct = 0\nA_6_pct = 0\nA_7_pct = 0\nA_8_pct = 0\nA_9_pct = 0\nA_10_pct = 0\nA_11_pct = 0\nA_12_pct = 0\nA_13_pct = 0\nA_14_pct = 0\n\nA_1_pct = 0\nA_2_pct = 0\nA_3_pct = 0\nA_4_pct = 0\nA_5_pct = 0\nA_6_pct = 0\nA_7_pct = 0\nA_8_pct = 0\nA_9_pct = 0\nA_10_pct = 0\nA_11_pct = 0\nA_12_pct = 0\nA_13_pct = 0\nA_14_pct = 0\n\nprint(min(A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_12,A_13,A_14))"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"0101\"\nassert solution(\"a\") == \"0101\"\nassert solution(\"a\") == \"0101\"\nassert solution(\"a\") == \"0101\"\nassert solution(\"a\") == \"0101\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '0101'\nassert solution(input) == '0101'\nassert solution(input) == '0250341'\nassert solution(input) == '0101'\nassert solution(input) == '0250341'\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1-3+4*5-7/3+6\") == \"false\"\n\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['0', '0', '0', '0', '0']) == '0101'\nassert solution(['1', '0', '0', '0', '0']) == '0010'\nassert solution(['1', '0', '0', '0', '0']) == 'false'"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"?(_-_/___*__):-___>__\") == \"false\"\nassert solution(\"?(__+___+__-___):-__<___,___<___,____<_____,_____<______,______<_______,____<___<__,___,___<_____\") == \"true\"\nassert solution(\"?(__+___+__-___):-___>__\") == \"false\"\nassert solution(\"?(__+___+__-___):-___<___,___<___,____<_____,_____<______,______<_______,____<___<__,___,___<_____\") == \"false\"\nassert solution(\"?(_________/____+__________*__-__________*__):-__<___,___<_________,_________<________,_________<_________,_________<________,_________<________\") == \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"false\""
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('?(_-_/___*__):-___>__.') == 'false'\nassert solution('?(__+___+__-___):-__<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<___,___<"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"?\") == \"false\"\nassert solution(\"?(?___,/___)/____<*__-_____*__________+_,-_/\") == \"0101\"\nassert solution(\"?(__+__)-___)/____<*__-_____*__________+_,-_/\") == \"0101\"\nassert solution(\"?(__+__)-___)/____<*__-_____*__________+_,-_/\") == \"0250341\"\n\nTODO: Improve this"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"0101\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n'''\n.___.-._,------._______________\n|  ( .  |  ___  ||_  _  _  |\n|  (__.)  ||  | || || || ||\n|    |   ||   || || || ||\n|___|   ||_|| || || || ||\n| ____||___|| || || || ||\n|  | |___ || | || || ||\n|  | |  || || || || ||\n|  | |  || | || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || || || ||\n|  | |  || ||"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"5\"\nassert solution(\"3 4\") == \"0\"\nassert solution(\"3 4 1000000000000000000\") == \"3\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\") == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 4 1000000000000000000\"), \"Should be [0,0]\"\nassert solution(\"3 4 1000000000000000000\"), \"Should be [0,0]\"\nassert solution(\"3 4 1000000000000000000\"), \"Should be [0,0]\"\nassert solution(\"3 4 1000000000000000000\"), \"Should be [0,0]\"\nassert solution(\"3 4 1000000000000000000\"), \"Should be [0,0]\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4 2\") == \"3\"\nassert solution(\"3 4 1000000000000000000\") == \"5\""
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 4 2\") == \"3\"\nassert solution(\"3 4 1000000000000000000\") == \"5\""
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(5)\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n        \"3 4 2\"\n) == \"5\"\nassert solution(\n        \"3 4 1000000000000000000\"\n) == \"0\"\nassert solution(\n        \"3 4 1000000000000000000\"\n) == \"0\"\nassert solution(\n        \"3 4 1000000000000000000\"\n) == \"0\"\nassert solution(\n        \"3 4 1000000000000000000\"\n) == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'plmaetwoxesisiht'\nassert solution(stdin) == 'z'\nassert solution(stdin) == 'thisisexampletwo'\nassert solution(stdin) == 'rocesfedoc'\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"codeforces\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"codeforces\"\nassert solution(input()) == \"secrofedoc\"\nassert solution(input()) == \"orcesfedoc\"\nassert solution(input()) == \"rocesfedoc\"\nassert solution(input()) == \"rocesfedoc\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"z\""
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"thisisexampletwo\"\n\n-----Reminder-----\n\nThis problem was written to prove that $n$ is not smaller than 1,000,000,000,000,000,000,000.\n\nWe don't have any practical solutions for $n$ beyond
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"rocesfedoc\"\nassert solution(stdin) == \"codeforces\"\nassert solution(stdin) == \"plmaetwoxesisiht\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"plmaetwoxesisiht\"\nassert solution(stdin) == \"z\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"z\"\n\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"The function should return the string $s$.\"\n\n\n\n\"\"\"\n\nimport math\nfrom collections import Counter\n\n\nclass Solution:\n    def decrypt(self, s: str, k: int) -> str:\n        n = len(s)\n        res = []\n        if k > 0:\n            if k > n:\n                return \"\"\n            for i in range(n - k + 1, n):\n                c = s[i]\n                res.append(c)\n                if c in Counter(res):\n                    if i - k >= 0:\n                        res.pop(i - k)\n        else:\n            return \"\"\n        return \"\".join(res[::-1])\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'thisisexampletwo'\n\n\n-----Time complexity-----\n\nTo get the time complexity of this algorithm is O(n). We define a time complexity of O(n) as the number of characters in the string $t$ which is the length of $n$.\n\n-----Space Complexity-----\n\nTo get the space complexity of this algorithm is O(1) for the string $t$.\n\n-----Algorithm Execution-----\n\nIf the string $s$ is encrypted by the algorithm, $t$ is decrypted using the following algorithm:\n\nIterate over all divisors of $n$ in decreasing order (i.e. from $n$ to $1$), for each divisor $d$, reverse the substring $s[1 \\dots d]$ (i.e. the substring which starts at position $1$ and ends at position $d$).\n\nFor example, the above algorithm applied to the string $s$=\"codeforces\" leads to the following changes: \"codeforces\" $\\to$ \"secrofedoc\" $\\to$ \"orcesfedoc\" $\\to$ \"rocesfedoc\" $\\to$ \"rocesfedoc\" (obviously, the last reverse operation doesn't change the string because $d=1$).\n\nThe time complexity of this algorithm is O(n) because $t$ is encrypted by the algorithm and we iterate over all divisors of $n$ in decreasing order.\n\nThe space complexity of this algorithm is O(n) because $t$ is encrypted by the algorithm and we iterate over all divisors of $n$ in decreasing order.\n\nYou are given the encrypted string $t$. Your task is to decrypt this string, i.e. to find a string $s$ such that the above algorithm results in string $t$. It can be proven that this string $s$ always exists and is unique.\n\n\n-----Input-----\n\nThe first line of input consists of a single integer $n$ ($1 \\le n \\le 100$) \u2014 the length of the string $t$. The second line of input consists of the string $t$. The length of $t$ is $n$.\n\n-----Output-----\n\nPrint a string $s$ such that the above algorithm results in $t$.\n\n-----Examples-----\nInput\n10\nrocesfedoc\n\nOutput\nthisisexampletwo\n\nInput\n16\nplmaetwoxesisiht\n\nOutput\nthisisexampletwo\n\nInput\n1\nz\n\nOutput\nz\n\n\n-----Note-----\n\nThe first example is described in the problem statement.\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"873\"\nassert solution(stdin) == \"19\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"381\"\nassert solution(stdin) == \"4902\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 14\\n4 2\\n1') == '2'\nassert solution('381 492') == '873'\nassert solution('381 492 3\\n1\\n0\\n') == '0'\nassert solution('0') == ''\n\n-----Constraints-----\n0 < stdin.length <= 10^5\n0 < a < 10^3\n0 < b < 10^3\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"873\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"A + B = 0\") == \"A + B = 0\"\nassert solution(\"A - B = -A\") == \"A - B = -A\"\nassert solution(\"A * B = A\") == \"A * B = A\"\nassert solution(\"(A+B)*C = (A+B)*C\") == \"(A+B)*C = (A+B)*C\"\n\n\n\nOutput:\nExplanation\n\nThe input represents the given input.\n\nThe first line contains two integers a and b, separated by a single space.\n\nThe second line contains a string, which represents the result of the function solution.\n\nThe third line contains a single integer, which represents the result of the function solution.\n\nThe fourth line contains a single string, which represents the answer.\n\nInput\n381 492\n\nOutput\n873\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"419\"\n\n\n-----Constraints-----\n0 <= stdin.length <= 10^3\n0 <= stdin[i] <= 10^3\n\n\n-----Discussion-----\nWe will be taking advantage of the fact that the sum of the pairs of integers a and b is not always equal to b + a. For example, if a = 3, b = 5, we are looking for the sum of three different integers. In other words, we must take a = 3, b = 4, which implies that a + b = 4.\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 3 4 9 2 5 3 6 7\") == \"64\"\nassert solution(\"9 1 4 3 2\") == \"7\"\nassert solution(\"0 8 7 0 0 0 9 0 8 9 0 0\") == \"5\"\nassert solution(\"8 3\") == \"3\"\nassert solution(\"1 2\") == \"3\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '873'\nassert solution(stdin) == '873'\nassert solution(stdin) == '873'\nassert solution(stdin) == '873'\nassert solution(stdin) == '873'\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\"]\n) == \"13121915\"\n\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5 14\"\n\nInput\n3 4\n\nOutput\n4\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == solution(inp)\n\n[input]\n\nThe first line contains a single integer,, the number of test cases. Then the test cases follow.\n\nThe first row contains an integer,, the size of the board.\nThe second row contains an integer,, the number of the rows.\nThe third row contains a string,, the pattern to be used as the board.\n\n\n[output]\n\nFor each test case, print the answer to the console.\n\n\n[input]\n\nThe first line contains a single integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[constraints]\n\n0 < a < 10^3\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nOutput the sum of the given integers.\n\n\n[explanation]\n\nA pattern of a binary number with 6 bits will be printed as:\n\n2\n\n2\n\n2\n2\n2\n2\n2\n2\n2\n\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[constraints]\n\n0 < a < 10^3\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[explanation]\n\nA pattern of a binary number with 6 bits will be printed as:\n\n2\n\n2\n\n2\n2\n2\n2\n2\n2\n2\n2\n\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[constraints]\n\n0 < a < 10^3\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[explanation]\n\nThe pattern of a binary number with 6 bits will be printed as:\n\n2\n\n2\n\n2\n2\n2\n2\n2\n2\n2\n2\n\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[constraints]\n\n0 < a < 10^3\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[explanation]\n\nThe pattern of a binary number with 6 bits will be printed as:\n\n2\n\n2\n\n2\n2\n2\n2\n2\n2\n2\n2\n2\n\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[constraints]\n\n0 < a < 10^3\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[explanation]\n\nThe pattern of a binary number with 6 bits will be printed as:\n\n2\n\n2\n\n2\n2\n2\n2\n2\n2\n2\n2\n\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[constraints]\n\n0 < a < 10^3\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[explanation]\n\nThe pattern of a binary number with 6 bits will be printed as:\n\n2\n\n2\n\n2\n2\n2\n2\n2\n2\n2\n2\n\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[constraints]\n\n0 < a < 10^3\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[explanation]\n\nThe pattern of a binary number with 6 bits will be printed as:\n\n2\n\n2\n\n2\n2\n2\n2\n2\n2\n2\n2\n\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[constraints]\n\n0 < a < 10^3\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[explanation]\n\nThe pattern of a binary number with 6 bits will be printed as:\n\n2\n\n2\n\n2\n2\n2\n2\n2\n2\n2\n2\n\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[constraints]\n\n0 < a < 10^3\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[explanation]\n\nThe pattern of a binary number with 6 bits will be printed as:\n\n2\n\n2\n2\n2\n2\n2\n2\n2\n2\n2\n\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[constraints]\n\n0 < a < 10^3\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[explanation]\n\nThe pattern of a binary number with 6 bits will be printed as:\n\n2\n\n2\n2\n2\n2\n2\n2\n2\n2\n2\n\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[explanation]\n\nThe pattern of a binary number with 6 bits will be printed as:\n\n2\n\n2\n2\n2\n2\n2\n2\n2\n2\n2\n\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[explanation]\n\nThe pattern of a binary number with 6 bits will be printed as:\n\n2\n\n2\n2\n2\n2\n2\n2\n2\n2\n\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[constraints]\n\n0 < a < 10^3\n\n[input]\n\nThe first line contains an integer,, the number of test cases. Then the test cases follow.\n\n\n[output]\n\nPrint the sum of the given integers.\n\n\n[explanation]\n\nThe pattern of a binary number with 6 bits will be printed as:\n\n2\n\n2\n2\n2\n2\n2\n2\n2\n2\n\n\n[input]\n\nThe first line contains an integer,, the number of test"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"OK\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"9-7\") == \"+++++++>\\n+++++++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++\\n\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(solution()) == '\\n\\n+++++++>\\n++<>+<\\n+[<->-]<\\n+[<->-]<\\n+[<->-]<\\n+[<->-]<\\n+[<->-]<\\n+[<->-]<\\n+[<->-]<\\n+[<->-]<\\n+[<->-]<\\n+[<->-]<\\n+[<->-]<\\n+[<->-]<\\n+[<->-]<\\n+[<->-]<\\n+++++++++>'\n\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"+ 9\") == \"++>10>\"\nassert solution(\"9 7\") == \"+++++++++>11>\"\nassert solution(\"9-7\") == \"+++++++>10>\"\nassert solution(\"9-7\") == \"+++++++>10>\"\nassert solution(\"9-7\") == \"+++++++>10>\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(solution(solution(solution(stdin)))) == stdin\nassert solution(solution(solution(stdin), stdin)) == stdin\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2+3\") == \"+++++++>\"\nassert solution(\"9-7\") == \"+++++++++>\"\nassert solution(\"9-7\") == \"+++++++++>\"\nassert solution(\"9-7\") == \"+++++++++>\"\nassert solution(\"9-7\") == \"+++++++++>\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"O\"\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3-5+2\") == '++++++++++>'\nassert solution(\"9-7\") == '+++++++>'\nassert solution(\"9-7+2\") == '<[<+>-]<'\nassert solution(\"9-7+2\") == '+++++++>'\nassert solution(\"9-7+2+\") == '<[<->-]<'\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"30000 memory cells.\\nconsole input, command\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\\n\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 0 2\") == \"2 0 1\"\nassert solution(\"1 2 3\") == \"3 1 0\"\nassert solution(\"0 0 0\") == \"0 0 0\"\nassert solution(\"1 10\") == \"1 9\"\nassert solution(\"2 0 0\") == \"0 0 0\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == 8,'solution() failed'\n\nassert solution(1) == 1,'solution() failed'\n\nassert solution(2) == 2,'solution() failed'\n\nassert solution(3) == 5,'solution() failed'\n\nassert solution(4) == 2,'solution() failed'"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"3\", \"20\", \"38\", \"56\"]) == \"0\"\nassert solution([\"4\", \"2132\", \"506\", \"999999999999999999\", \"1000000000000000000\"]) == \"1\"\nassert solution([\"1\", \"3\", \"20\", \"38\", \"56\"]) == \"2\"\nassert solution([\"1\", \"3\", \"20\", \"38\", \"56\"]) == \"5\"\nassert solution([\"1\", \"3\", \"20\", \"38\", \"56\"]) == \"2\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"8\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, ['1','3','20','38','56']) == '2'\nassert solution(4, ['1','2','2','4','5','6','7','8','9','0','1']) == '0'\nassert solution(4, ['1','3','20','38','56']) == '1'\nassert solution(5, ['1','3','20','38','56']) == '2'\nassert solution(5, ['1','2','2','3','4','5','6','7','8','9','0','1']) == '0'\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"The function does not return anything\"\nassert solution(stdin), \"The function does not return anything\"\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"3544678947121821214\"\n) == \"4\"\n\"\"\"\nfrom typing import *\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 4\n\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"4\""
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 4"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    (\n    x\n    )\n    ) == 4\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"565\") == \"3\"\nassert solution(\"636\") == \"2\"\nassert solution(\"2\") == \"0\"\nassert solution(\"967\") == \"0\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 4\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 6\n'''\nclass Solution:\n    def count_shichi_go_san(self, number: int) -> int:\n        count = 0\n        while number:\n            # print(number)\n            if number & 1:\n                count += 1\n            number >>= 1\n            # print(number)\n        return count\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"000\"\n) == 1\nassert solution(\n    \"001\"\n) == 2\nassert solution(\n    \"010\"\n) == 1\nassert solution(\n    \"011\"\n) == 1\nassert solution(\n    \"100\"\n) == 2\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(solution(input())) == 1\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == 1\nassert solution(5) == 3\nassert solution(4) == 2\nassert solution(2) == 2\nassert solution(1) == 1\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 1\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 1\n\ninput()\n\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 4, \"expected 4, got {}\".format(solution(stdin))\nassert solution(stdin) == 4, \"expected 4, got {}\".format(solution(stdin))\nassert solution(stdin) == 4, \"expected 4, got {}\".format(solution(stdin))\nassert solution(stdin) == 4, \"expected 4, got {}\".format(solution(stdin))\nassert solution(stdin) == 4, \"expected 4, got {}\".format(solution(stdin))\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('0111100') == 1\nassert solution('0111011') == 1\nassert solution('11110111') == 0\nassert solution('11110111') == 1\nassert solution('00111111') == 0\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '5'\nassert solution(input) == '3'\nassert solution(input) == '2'\nassert solution(input) == '2'\nassert solution(input) == '3'\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"000\"\n) == 5\nassert solution(\n    \"001\"\n) == 2\nassert solution(\n    \"011\"\n) == 2\nassert solution(\n    \"100\"\n) == 4\nassert solution(\n    \"101\"\n) == 1\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"APPROVED\"\n\n-----Example 1-----\nInput:\n5\n6 7 9 10 31\n\nOutput:\nDenied\n\nExplanation:\nThe document has only one even number written on it, so the immigration officer should be denied.\n\nExample 2:\nInput:\n4\n10\n17\n\nOutput:\nApproved\n\nExplanation:\nThe document has all numbers on it, so the immigration officer should be allowed.\n\nExample 3:\nInput:\n5\n10 5 10 7\n\nOutput:\nDenied\n\nExplanation:\nThe document has all numbers on it, so the immigration officer should be denied.\n\nExample 4:\nInput:\n2\n9\n\nOutput:\nDENIED\n\nExplanation:\nThe document has all numbers on it, so the immigration officer should be denied.\n\nExample 5:\nInput:\n1\n2\n\nOutput:\nAPPROVED\n\nExplanation:\nThe document has only one even number written on it, so the immigration officer should be allowed.\n\nExample 6:\nInput:\n6\n5\n\nOutput:\nDenied\n\nExplanation:\nThe document has all numbers on it, so the immigration officer should be denied.\n\nExample 7:\nInput:\n1\n3\n\nOutput:\nDenied\n\nExplanation:\nThe document has only one even number written on it, so the immigration officer should be denied.\n\nExample 8:\nInput:\n6\n10\n\nOutput:\nApproved\n\nExplanation:\nThe document has all numbers on it, so the immigration officer should be allowed.\n\nExample 9:\nInput:\n1\n1\n\nOutput:\nDenied\n\nExplanation:\nThe document has only one even number written on it, so the immigration officer should be denied.\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 1 \\leq A_i \\leq 1000\n\n-----Input Format-----\nThe first line contains an integer, N, denoting the number of documents.\nThe next N lines contains an integer each separated by a space.\nThe last line contains an integer, A_1, denoting the first document number.\nThe next A_i lines contains an integer each separated by a space.\n\n-----Output-----\nFor each line of input, print a single string denoting whether the document should be allowed or denied according to the given constraints.\nThe output of the program should be the concatenation of the strings in the output lines.\n\n-----Sample Input-----\n5\n6 7 9 10 31\n\n-----Sample Output-----\nDenied\n\nThe even numbers written on the document are 6 and 10.\nAll of them are divisible by 3 or 5, so the immigration officer should be denied.\n\nThe odd numbers written on the document are 1, 3, 5 and 7.\nThe documnet numbers are 0 to N - 1.\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 1 \\leq A_i \\leq 1000\n\n-----Input Format-----\nThe first line contains an integer, N, denoting the number of documents.\nThe next N lines contains an integer each separated by a space.\nThe last line contains an integer, A_1, denoting the first document number.\nThe next A_i lines contains an integer each separated by a space.\n\n-----Output-----\nFor each line of input, print a single string denoting whether the document should be allowed or denied according to the given constraints.\nThe output of the program should be the concatenation of the strings in the output lines.\n\n-----Sample Input-----\n4\n10\n17\n\n-----Sample Output-----\nAPPROVED\n\nThe even numbers written on the document are 6 and 10.\nThe odd numbers written on the document are 1, 3, 5 and 7.\nThe documnet numbers are 0 to N - 1.\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 1 \\leq A_i \\leq 1000\n\n-----Input Format-----\nThe first line contains an integer, N, denoting the number of documents.\nThe next N lines contains an integer each separated by a space.\nThe last line contains an integer, A_1, denoting the first document number.\nThe next A_i lines contains an integer each separated by a space.\n\n-----Output-----\nFor each line of input, print a single string denoting whether the document should be allowed or denied according to the given constraints.\nThe output of the program should be the concatenation of the strings in the output lines.\n\n-----Sample Input-----\n5\n10 5 10 7\n\n-----Sample Output-----\nDenied\n\nThe even numbers written on the document are 6 and 10.\nThe odd numbers written on the document are 5, 10 and 7.\nThe documnet numbers are 0 to N - 1.\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 1 \\leq A_i \\leq 1000\n\n-----Input Format-----\nThe first line contains an integer, N, denoting the number of documents.\nThe next N lines contains an integer each separated by a space.\nThe last line contains an integer, A_1, denoting the first document number.\nThe next A_i lines contains an integer each separated by a space.\n\n-----Output-----\nFor each line of input, print a single string denoting whether the document should be allowed or denied according to the given constraints.\nThe output of the program should be the concatenation of the strings in the output lines.\n\n-----Sample Input-----\n1\n2\n\n-----Sample Output-----\nDenied\n\nThe odd numbers written on the document are 1, 3, 5 and 7.\nThe even numbers written on the document are 2, 4, 6 and 8.\nThe documnet numbers are 0 to N - 1.\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 1 \\leq A_i \\leq 1000\n\n-----Input Format-----\nThe first line contains an integer, N, denoting the number of documents.\nThe next N lines contains an integer each separated by a space.\nThe last line contains an integer, A_1, denoting the first document number.\nThe next A_i lines contains an integer each separated by a space.\n\n-----Output-----\nFor each line of input, print a single string denoting whether the document should be allowed or denied according to the given constraints.\nThe output of the program should be the concatenation of the strings in the output lines.\n\n-----Sample Input-----\n3\n1\n2\n\n-----Sample Output-----\nDenied\n\nThe odd numbers written on the document are 1, 3, 5 and 7.\nThe even numbers written on the document are 2, 4, 6 and 8.\nThe documnet numbers are 0 to N - 1.\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 1 \\leq A_i \\leq 1000\n\n-----Input Format-----\nThe first line contains an integer, N, denoting the number of documents.\nThe next N lines contains an integer each separated by a space.\nThe last line contains an integer, A_1, denoting the first document number.\nThe next A_i lines contains an integer each separated by a space.\n\n-----Output-----\nFor each line of input, print a single string denoting whether the document should be allowed or denied according to the given constraints.\nThe output of the program should be the concatenation of the strings in the output lines.\n\n-----"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"DENIED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"DENIED\"\n\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"123\") == \"DENIED\"\nassert solution(\"125\") == \"APPROVED\"\nassert solution(\"234\") == \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 5 7 9 10\") == \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"5 6 7 9 10 31\"\n) == \"DENIED\"\nassert solution(\n    \"5 7 9 10 31\"\n) == \"APPROVED\"\nassert solution(\n    \"6 7 9 10 31\"\n) == \"APPROVED\"\nassert solution(\n    \"6 7 9 10 31\"\n) == \"DENIED\"\n\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 4') == 'DENIED'\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"APPROVED\"\n'''\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\") == \"APPROVED\"\nassert solution(\"1 5 6 9 8 10 11 20 3 7 12\") == \"DENIED\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUDR') == 'No'"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('RUDLUDR') == \"Yes\"\nassert solution('RUDAULUDR') == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(rudludrudludrudludrudludrudludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludludl"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(RUDLUDR) == \"Yes\"\nassert solution(RUDLUDR) == \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"UDRD\") == \"No\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RUDLUDR\") == \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\n'''"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"7\"\n'''"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"7\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5') == 7\nassert solution('5') == 7\nassert solution('3') == 7\nassert solution('1') == 5\nassert solution('1') == 5\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 3 2') == 7\nassert solution('5 1 2') == 7\nassert solution('5 1 3') == 7\nassert solution('1 0 1 0 1 1 2 2 1 0 1 2') == 4\nassert solution('1 3 0 1 2 1 3 2 1 2 3 0 1 2') == 5\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"7\"\nassert solution(\"3 2\") == \"4\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"5 6\") == \"0\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"5\", \"3\", \"2\", \"4\", \"3\", \"5\", \"6\"]) == \"7\"\nassert solution([\"5\", \"3\", \"4\", \"5\", \"6\"]) == \"6\"\nassert solution([\"3\", \"2\", \"3\", \"3\", \"3\", \"5\", \"6\"]) == \"6\"\nassert solution([\"3\", \"4\", \"3\", \"4\", \"5\", \"6\"]) == \"6\"\nassert solution([\"5\", \"5\", \"5\", \"6\"]) == \"6\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('10 20 60 60 60 60 60 60 60 60') == '60'\nassert solution
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 4 4 4 3\") == \"7\"\nassert solution(\"4 2 3 4\") == \"2\"\nassert solution(\"3 2 3 1\") == \"3\"\nassert solution(\"4 2 3 1\") == \"5\"\nassert solution(\"4\") == \"5\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"7\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0,9,9\") == \"3\"\nassert solution(\"0,0,0,0\") == \"0\"\nassert solution(\"0,0,0,0,0,0,0,0,0\") == \"0\"\nassert solution(\"0,0,0,0,0,0,0,0,0,0\") == \"0\"\nassert solution(\"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\") == \"0\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == str(2)\n\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\u20192\u2019) == \u20182\u2019\nassert solution(\u20181\u2019) == \u20181\u2019\nassert solution(\u20182\u2019) == \u20181\u2019\nassert solution(\u20180\u2019) == \u20181\u2019\nassert solution(\u20189\u2019) == \u20180\u2019\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"5 7\") == \"1\"\nassert solution(\"5 4 3\") == \"4\"\nassert solution(\"4 4 5 4 5 4\") == \"2\"\nassert solution(\"4 9\") == \"2\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"13\") == \"0\"\nassert solution(\"1234\") == \"9\"\nassert solution(\"12345\") == \"0\"\nassert solution(\"123321\") == \"9\"\nassert solution(\"123221\") == \"0\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s) == '1'\n\nassert solution(s) == '9'\nassert solution(s) == '1'\nassert solution(s) == '1'\nassert solution(s) == '2'\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\") == 0\nassert solution(\"2\") == 2\nassert solution(\"4\") == 1\nassert solution(\"0\") == 0\nassert solution(\"1\") == 0\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()), \"0\\n0\\n1\\n1\"\nassert solution(\"1\\n0\") == \"3\\n9\"\nassert solution(\"0\\n0\") == \"0\\n1\"\nassert solution(\"0\\n9\") == \"9\"\nassert solution(\"9\\n0\") == \"9\"\n\"\"\"\n\nfrom sys import stdin\nfrom math import gcd\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"2\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 23\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"solution() failed\"\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"\"   1\n   2 3 5 7\"\"\") == \"23\"\nassert solution(\"\"\"2\n2\n8\n\"\"\") == \"23\"\nassert solution(\"\"\"1\n1\n3\n5\n7\n9\n\"\"\") == \"9\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2') == '23'\nassert solution('5') == '23'\nassert solution('10') == '23'\nassert solution('15') == '23'\nassert solution('20') == '23'\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"9\") == \"9\"\nassert solution(\"4\") == \"5\"\nassert solution(\"6\") == \"5\"\nassert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"2\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(6) == 23\nassert solution(9) == 23\nassert solution(25) == 23\nassert solution(35) == 23\nassert solution(100) == 23\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == '1'\nassert solution(6) == '6'\nassert solution(8) == '8'\nassert solution(10) == '10'\nassert solution(1000) == '1000'\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '23'\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 23\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('2') == '3'\nassert solution('0') == '0'"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 3 2') == 1\nassert solution('3 1 3 2') == 1\nassert solution('4') == 1\nassert solution('4 2') == 2\nassert solution
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 8\n\nassert solution(inp) == 8\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 1\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '3'"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\""
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 1 3 2') == '1'\nassert solution('4 1 3 2 4') == '2'\nassert solution('4 1 3 2 5') == '3'\nassert solution('5 4 3 2') == '4'\nassert solution('5 4 3 2 4') == '4'\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 1 3 2\") == \"2\"\nassert solution(\"5 3 2 4\") == \"3\"\nassert solution(\"7 1 2 3\") == \"1\"\nassert solution(\"7 3 1 2\") == \"1\"\nassert solution(\"7 3 1 2 3\") == \"2\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 3 1 3 2\") == \"2\"\nassert solution(\"5 4 1 3 2\") == \"3\"\nassert solution(\"5 4 1 3 2 4\") == \"2\"\nassert solution(\"5 4 1 3 2 4 5\") == \"5\"\nassert solution(\"5 4 1 3 2 4 5 6\") == \"2\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, 5, 5, 5) == 2, \"The sequence 5,5,5,5 is not /\\/\\/\\/, but we can make it /\\/\\/\\/ by replacing one of its elements.\"\nassert solution(3, 1, 3, 2) == 2, \"The sequence 3,1,3,2 is not /\\/\\/\\/, but we can make it /\\/\\/\\/ by replacing one of its elements.\"\n\"\"\"\n\nclass Solution:\n    def countPrimes(self, n: int) -> int:\n        if n < 3:\n            return 0\n        primes = [True for i in range(n)]\n        p = 2\n        while p * p <= n:\n            if primes[p * p]:\n                for i in range(p * p, n, p):\n                    primes[i] = False\n            p += 1\n        return sum(primes)"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 100 90 80\n98\n40\n30\n21\n80\n\"\"\") == \"23\"\nassert solution(\"\"\"\n5 100 90 80\n98\n40\n30\n21\n80\n\"\"\") == \"23\"\nassert solution(\"\"\"\n5 100 90 80\n98\n40\n30\n21\n80\n\"\"\") == \"23\"\nassert solution(\"\"\"\n5 100 90 80\n98\n40\n30\n21\n80\n\"\"\") == \"23\"\nassert solution(\"\"\"\n5 100 90 80\n98\n40\n30\n21\n80\n\"\"\") == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"23\"\n\"\"\"\n\nimport sys\n\nN, C, l_1, l_2 = map(int, sys.stdin.readline().split())\nbamboos = []\n\nfor i in range(N):\n    bamboos.append(int(sys.stdin.readline().split()[0]))\n\nbamboos[0] += 1\nbamboos[-1] -= 1"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"23\"\n'''"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"15\"\n\"\"\"\n\nimport sys\n\nN, L = map(int, sys.stdin.readline().rstrip().split())\nC = int(sys.stdin.readline())\nbamboos = [int(x) for x in sys.stdin.readline().rstrip().split()]"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '23'\nassert solution(input) == '23'\nassert solution(input) == '23'\nassert solution(input) == '23'\nassert solution(input) == '23'\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5 100 90 80\") == \"28\"\nassert solution(\"5 100 90 80\") == \"22\"\nassert solution(\"5 100 90 80\") == \"41\"\nassert solution(\"5 100 90 80\") == \"27\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"23\"\n'''\n\nN, A, B, C = map(int, input().split())\nl_1 = int(input())\nl_2 = int(input())\nl_N = int(input())\nl_M = l_1 + l_2\nl_M = l_1 + l_2 + l_N\nl_M = l_N + l_M\nl_M = l_M + 2\nl_M = int(l_M)\n\nl_1 = l_1 + l_2\nl_2 = l_1 + l_N\nl_3 = l_1 + l_2 + l_N\nl_3 = l_N + l_3\nl_3 = int(l_3)\n\nl_N = l_N + l_M\n\nl_C = l_C + 2\nl_C = l_C + l_N\nl_C = l_N + l_C\nl_C = int(l_C)\n\nl_l = l_l + l_l\nl_l = l_l + l_l + l_l\nl_l = l_l + l_l + l_l + l_l + l_l\nl_l = l_l + l_l\nl_l = int(l_l)\n\nl_l = l_l + l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l + l_l\nl_l = l_l + l_l + l_l + l_l + l_l + l_l + l_l\nl_l = l_l + l_l\nl_l = int(l_l)\n\nl_l = l_l + l_l\nl_l = l_l + l_l + l_l\nl_l = l_l + l_l + l_l + l_l + l_l + l_l + l_l + l_l\nl_l = l_l + l_l\nl_l = int(l_l)\n\nl_l = l_l + l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l + l_l\nl_l = l_l + l_l + l_l\nl_l = l_l + l_l + l_l\nl_l = l_l + l_l + l_l\nl_l = l_l + l_l\nl_l = int(l_l)\n\nl_l = l_l + l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l + l_l\nl_l = l_l"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"5 100 90 80\"\n) == \"23\"\nassert solution(\n    \"98\"\n) == \"23\"\nassert solution(\n    \"40\"\n) == \"23\"\nassert solution(\n    \"30\"\n) == \"23\"\nassert solution(\n    \"21\"\n) == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"98\") == \"23\"\nassert solution(\"40\") == \"23\"\nassert solution(\"30\") == \"23\"\nassert solution(\"21\") == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, \"100 90 80\") == 23\nassert solution(5, \"98\") == 23\nassert solution(5, \"40\") == 23\nassert solution(5, \"30\") == 23\nassert solution(5, \"21\") == 23\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'CDEZAB'\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"CDEZAB\"\nassert solution(\"A\") == \"A\"\nassert solution(\"A\") == \"A\"\nassert solution(\"A\") == \"A\"\nassert solution(\"A\") == \"A\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(s) == \"CDEDAZ\"\n\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(get_string('ex4.in', 1, 5, 'ABC')) == 'CDEZAB'\nassert solution(get_string('ex4.in', 2, 5, 'ABC')) == 'CDEWB'\nassert solution(get_string('ex4.in', 3, 5, 'ABC')) == 'CDEZAB'\nassert solution(get_string('ex4.in', 4, 5, 'ABC')) == 'CDEWB'\nassert solution(get_string('ex4.in', 5, 5, 'ABC')) == 'CDEZAB'\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, \"ABCXYZ\") == \"CDEZAB\"\nassert solution(3, \"ABCXYZ\") == \"BZCXYZ\"\nassert solution(3, \"XYZABC\") == \"ABCXZY\"\nassert solution(2, \"XYZABC\") == \"AZBCX\"\nassert solution(2, \"ABCXYZ\") == \"AXTZY\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(solution) == \"CDEZAB\"\nassert solution(\"CDEZAB\") == \"CDEZAB\"\nassert solution(\"ABCXYZ\") == \"ABCXYZ\"\nassert solution(\"XYZ\") == \"XYZ\"\nassert solution(\"ABCABC\") == \"ABCABC\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"CDEZAB\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"ABCXYZ\") == \"ABABCXYZ\"\nassert solution(\"ABCXYZ\") == \"ABBABBCXZ\"\nassert solution(\"ABCXYZ\") == \"ABABCZXYZ\"\nassert solution(\"ABCXYZ\") == \"ABABCZXYZ\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"XYZ\") == \"BZ\"\nassert solution(\"A\") == \"A\"\nassert solution(\"ZZ\") == \"ZZ\"\nassert solution(\"AC\") == \"A\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"ABCXYZ\"\n) == \"CDEZAB\"\nassert solution(\n    \"ABCXYZ\"\n) == \"CD\"\nassert solution(\n    \"ABCXYZ\"\n) == \"ZZ\"\nassert solution(\n    \"ABCXYZ\"\n) == \"XYZ\"\nassert solution(\n    \"ABCXYZ\"\n) == \"XYZ\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2750131\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3 4 2'\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3, 5, 2, 3, 2, 4') == '3 4 2'\nassert solution('1') == '1'\nassert solution('3 4 2 3 4') == '6'\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2 3 2\"\nassert solution(stdin) == \"4 4 3\"\nassert solution(stdin) == \"6\""
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '4'\nassert solution('4') == '5'\nassert solution('5') == '6'\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1 2 3 4 5 6'\nassert solution(stdin) == '2750131 198999'\nassert solution(stdin) == '199999 198999'"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 5 2 3 2 4\"\n) == \"1 2 3 4\"\nassert solution(\n    \"3 5 2 3 2 4\"\n) == \"6\"\nassert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"1\"\n) == \"1\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"3 4 2\"\nassert solution(stdin) == \"3 2 2\"\nassert solution(stdin) == \"3 2 3\"\nassert solution(stdin) == \"3 2 4\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"270131\"\nassert solution(stdin) == \"199999\"\nassert solution(stdin) == \"270131\"\nassert solution(stdin) == \"199999\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '22111'\nassert solution('7 1') == '21112'\nassert solution('7 2') == '1121122'\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"21112\"\nassert solution(stdin) == \"22111\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '21112'\nassert solution(stdin) == '1121122'\nassert solution(stdin) == '221111'\nassert solution(stdin) == '221111'\nassert solution(stdin) == '1111111'\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, 2) == 11111\nassert solution(7, 1) == 22111\nassert solution(5, 3) == 21112\nassert solution(7, 5) == 1121122"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"21112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 1\") == \"11111\"\nassert solution(\"5 2\") == \"22111\"\nassert solution(\"7 1\") == \"21112\"\nassert solution(\"7 2 1 3 5 4 6\") == \"22212\"\nassert solution(\"7 2 1 3 5 4 6\") == \"21112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 1') == '11111'\nassert solution('7 1') == '22111'"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"1111\"\nassert solution(\"7 1\") == \"22111\"\nassert solution(\"5 1\") == \"22111\"\nassert solution(\"7 2\") == \"22111\"\nassert solution(\"5 3\") == \"11111\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '11111'\n\nassert solution(stdin) == '22111'\n\nassert solution(stdin) == '111122'\n\nassert solution(stdin) == '221122'\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 1\") == \"11111\"\nassert solution(\"5 2\") == \"22111\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"7 2\") == \"21112\""
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n        \"5\",\n        [\"1\", \"2\", \"1\", \"2\", \"3\"]\n    ) == 2\n    pass\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == (len(a) % 10007)\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\"2\", \"4\", \"2\", \"3\", \"1\"]) == \"2\"\nassert solution(\n    [\"2\", \"3\", \"3\", \"3\", \"2\"]) == \"3\"\nassert solution(\n    [\"3\", \"1\", \"2\", \"1\", \"3\"]) == \"2\"\nassert solution(\n    [\"1\", \"1\", \"1\", \"2\", \"2\"]) == \"2\"\nassert solution(\n    [\"1\", \"1\", \"1\", \"2\", \"2\"]) == \"1\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2) == 1\nassert solution(4) == 2\nassert solution(3) == 3\nassert solution(1) == 1\nassert solution(0) == 0"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2 3\") == 2\nassert solution(\"1 1 3 3 7\") == 2\nassert solution(\"1 2 3 1 3\") == 1\nassert solution(\"2\") == 2\nassert solution(\"1 2\") == 2\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 4\") == \"2\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\n-----Time Limit-----\n1 sec\n\n-----Space Limit-----\n1 sec\n\nSample Execution\n>>> 2\n>>> 1\n>>> 1\n>>> 0\n\n>>> 1\n>>> 2\n>>> 0\n>>> 1\n>>> 2\n>>> 2\n>>> 0\n>>> 2\n>>> 1\n>>> 1\n>>> 0\n>>> 2\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 1\n>>> 0\n>>> 2\n>>> 2\n>>> 0\n>>> 2\n>>> 1\n>>> 0\n>>> 2\n>>> 0\n>>> 2\n>>> 1\n>>> 2\n>>> 0\n>>> 0\n>>> 1\n>>> 2\n>>> 1\n>>> 1\n>>> 1\n>>> 2\n>>> 1\n>>> 2\n>>> 1\n>>> 1\n>>> 1\n>>> 2\n>>> 1\n>>> 0\n>>> 1\n>>> 2\n>>> 0\n>>> 0\n>>> 2\n>>> 1\n>>> 1\n>>> 0\n>>> 2\n>>> 0\n>>> 2\n>>> 0\n>>> 2\n>>> 0\n>>> 1\n>>> 0\n>>> 0\n>>> 2\n>>> 1\n>>> 0\n>>> 2\n>>> 0\n>>> 2\n>>> 0\n>>> 0\n>>> 1\n>>> 0\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 1\n>>> 2\n>>> 1\n>>> 0\n>>> 2\n>>> 0\n>>> 2\n>>> 2\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 1\n>>> 2\n>>> 0\n>>> 2\n>>> 0\n>>> 2\n>>> 2\n>>> 1\n>>> 1\n>>> 2\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 1\n>>> 1\n>>> 0\n>>> 2\n>>> 2\n>>> 0\n>>> 0\n>>> 2\n>>> 1\n>>> 1\n>>> 2\n>>> 1\n>>> 2\n>>> 0\n>>> 2\n>>> 2\n>>> 1\n>>> 0\n>>> 2\n>>> 0\n>>> 1\n>>> 2\n>>> 1\n>>> 2\n>>> 1\n>>> 1\n>>> 2\n>>> 1\n>>> 2\n>>> 1\n>>> 1\n>>> 2\n>>> 0\n>>> 2\n>>> 2\n>>> 1\n>>> 2\n>>> 2\n>>> 0\n>>> 0\n>>> 2\n>>> 1\n>>> 0\n>>> 2\n>>> 2\n>>> 1\n>>> 1\n>>> 2\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 0\n>>> 2\n>>> 2\n>>> 1\n>>> 2\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 0\n>>> 2\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 0\n>>> 2\n>>> 2\n>>> 1\n>>> 0\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 0\n>>> 2\n>>> 2\n>>> 2\n>>> 0\n>>> 2\n>>> 0\n>>> 0\n>>> 0\n>>> 1\n>>> 1\n>>> 0\n>>> 2\n>>> 0\n>>> 2\n>>> 2\n>>> 0\n>>> 2\n>>> 1\n>>> 1\n>>> 2\n>>> 0\n>>> 2\n>>> 2\n>>> 0\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 1\n>>> 2\n>>> 2\n>>> 0\n>>> 0\n>>> 0\n>>> 2\n>>> 1\n>>> 2\n>>> 0\n>>> 0\n>>> 2\n>>> 1\n>>> 1\n>>> 2\n>>> 0\n>>> 2\n>>> 2\n>>> 2\n>>> 2\n>>> 2\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 1\n>>> 2\n>>> 2\n>>> 0\n>>> 1\n>>> 2\n>>> 2\n>>> 2\n>>> 0\n>>> 2\n>>> 2\n>>> 1\n>>> 0\n>>> 2\n>>> 1\n>>> 2\n>>> 1\n>>> 2\n>>> 1\n>>> 1\n>>> 2\n>>> 0\n>>> 2\n>>> 2\n>>> 0\n>>> 2\n>>> 0\n>>> 2\n>>> 1\n>>> 2\n>>> 0\n>>> 2\n>>> 0\n>>> 0\n>>> 2\n>>> 0\n>>> 2\n>>> 2\n>>> 0\n>>> 2\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 2\n>>> 1\n>>> 2\n>>> 1\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 2\n>>> 0\n>>> 2\n>>> 1\n>>> 2\n>>> 2\n>>> 1\n>>> 2\n>>> 2\n>>> 0\n>>> 0\n>>> 0\n>>> 2\n>>> 0\n>>> 2\n>>> 0\n>>> 1\n>>> 0\n>>> 2\n>>> 0\n>>> 1\n>>> 2\n>>> 2\n>>> 2\n>>> 0\n>>> 2\n>>> 2\n>>> 0\n>>> 1\n>>> 2\n>>> 1\n>>> 1\n>>> 2\n>>> 2\n>>> 2\n>>> 1\n>>> 2\n>>> 0\n>>> 2\n>>> 2\n>>> 2\n>>> 0\n>>> 1\n>>> 2\n>>> 0\n>>> 0\n>>> 2\n>>> 0\n>>> 0\n>>> 1\n>>> 1\n>>> 1\n>>> 0\n>>> 1\n>>> 2\n>>> 2\n>>> 0\n>>> 2\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 1\n>>> 2\n>>> 1\n>>> 2\n>>> 0\n>>> 2\n>>> 1\n>>> 0\n>>> 2\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 1\n>>> 1\n>>> 0\n>>> 2\n>>> 0\n>>> 2\n>>> 2\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 1\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 2\n>>> 2\n>>> 0\n>>> 2\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 2\n>>> 2\n>>> 0\n>>> 0\n>>> 2\n>>> 2\n>>> 0\n>>> 0\n>>> 0\n>>> 2\n>>> 0\n>>> 2\n>>> 2\n>>> 0\n>>> 1\n>>> 1\n>>> 0\n>>> 1\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 2\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 1\n>>> 1\n>>> 0\n>>> 0\n>>> 2\n>>> 0\n>>> 1\n>>> 1\n>>> 0\n>>> 0\n>>> 0\n>>> 2\n>>> 0\n>>> 0\n>>> 0\n>>> 1\n>>> 2\n>>> 2\n>>> 0\n>>> 0\n>>> 2\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 2\n>>> 2\n>>> 0\n>>> 2\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 2\n>>> 0\n>>> 0\n>>> 2\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n>>> 0\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 2\n\n\n-----Learning Questions-----"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 193 194 195 196 197 198 199 200 201 202 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(6, [4, 7, 1, 4, 9]) == 1\nassert solution(5, [1, 1, 1, 1023]) == 0\nassert solution(5, [1, 2, 3, 4]) == 2\nassert solution(5, [1, 3, 2, 8, 8, 8]) == 2\nassert solution(5, [1, 3, 2, 8, 8, 8, 8]) == 2\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"problem\"\nassert solution(stdin), \"problem\"\n\n-----Basic Search-----\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(6, [4, 7, 1, 4, 9]) == 1\nassert solution(5, [1, 1, 1, 1023]) == 2\nassert solution(1, []) == 0\nassert solution(4, [1, 1]) == 1\nassert solution(4, [1, 5]) == 4\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\n\n-----Constraints-----\n1 <= n <= 10^5\n\n-----Time Limit-----\nO(n*2^n)\n\n\n\nclass Solution:\n    def erase(self, a, start, end):\n        while start < end:\n            start += 1\n            if a[start] < a[end]:\n                a[start] += a[start]\n                a[start] %= 2\n                a[start + 1:] += a[start + 1:]\n                start += 2\n            else:\n                a[start] -= a[start]\n                a[start] %= 2\n                a[start + 1:] += a[start + 1:]\n                start += 2\n        return a[start:]\n\n    def divide(self, a, start, end):\n        return self.erase(a, start, end)\n\n\n\n-----Test-----\na = [1,1,1,0,0]\nstart = 0\nend = 4\nprint(Solution().divide(a, start, end))\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(get_input()) == 5\n'''\n\nfrom __future__ import annotations\nfrom collections import Counter\nfrom collections.abc import Iterable\nfrom functools import total_ordering\n\n\n@total_ordering\nclass Solution:\n    @staticmethod\n    def solution(s: str) -> int:\n        char_count = Counter(s)\n        return char_count[0] * char_count[1] * char_count[2]\n\n    @staticmethod\n    def compare(x: Solution, y: Solution) -> bool:\n        if len(x)!= len(y):\n            return False\n        for i in range(len(x)):\n            if x[i]!= y[i]:\n                return False\n        return True\n\n    def __init__(self) -> None:\n        pass\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['0011','0011','1101']), 2\nassert solution(['0']), 0\nassert solution(['0','0']), 1\nassert solution(['0','1']), 1\nassert solution(['0','0','1']), 1\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"0011\"]) == \"4\"\nassert solution([\"000110011100\"]) == \"3\"\nassert solution([\"1\"]) == \"1\"\nassert solution([\"001100101101\"]) == \"1\"\nassert solution([\"0000001011101\"]) == \"1\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0111011101\") == 2\nassert solution(\"111111111111\") == 4\nassert solution(\"01011101111\") == 2\nassert solution(\"11111111111111\") == 4\nassert solution(\"0001010101010001010101010101010101\") == 2\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"001\"), 2\nassert solution(\"011\"), 1\nassert solution(\"010\"), 2\nassert solution(\"011\"), 1\nassert solution(\"101\"), 2\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == 10\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(string) == string\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 4\n\"\"\"\n\nclass Solution:\n    def removeCubes(self, s: str) -> int:\n        n = len(s)\n        self.max_number = 0\n        \n        # iterate through each index\n        # (to figure out the starting index and the end index)\n        for i in range(n):\n            # if current index is 0, increment the total number of removed cubes\n            # if current index is 1, decrement the total number of removed cubes\n            if s[i] == 0:\n                self.max_number += 1\n            elif s[i] == 1:\n                self.max_number -= 1\n                \n        return self.max_number"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('0011'), '''\nSample Input:\n0011\n\nSample Output:\n4\nExplanation:\nOn the second cube, the object can be removed.\nOn the third cube, the object can be removed.\nOn the fourth cube, the object can be removed.\n'''\n'''\n4\n'''\nclass Solution:\n    def solve(self,s):\n        # write your code in Python 3.6\n        n = len(s)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(i,n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i+1][j+1]\n                else:\n                    dp[i][j] = dp[i+1][j]\n        return dp[0][n-1]\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"2\"\n\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"1 3 2\") == \"2\"\nassert solution(\"1 3 3\") == \"2\"\nassert solution(\"1 3 4\") == \"3\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == 2\nassert solution(\"4 3\") == 3\nassert solution(\"2 4\") == 1\nassert solution(\"2 4\") == 2\nassert solution(\"2 4\") == 2\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['2 3', '1 3', '1 4', '2 4', '2 5', '2 6', '2 7', '2 8']) == '2'\nassert solution(['2 4', '1 3', '1 5', '1 6', '2 7', '2 8']) == '4'\nassert solution(['1 3', '1 5', '1 6', '2 7', '2 8']) == '1'\nassert solution(['2 1', '2 3', '2 4', '2 5', '2 6', '2 7', '2 8']) == '5'\nassert solution(['2 4', '1 3', '1 5', '1 6', '2 7', '2 8']) == '3'\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Sample Output-----\nInput:\n4 2\n1 3\n2 4\n\nOutput:\n2\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"3\""
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('{1,2,3,1}') == '2'\nassert solution('{1,2,3,2}') == '3'\nassert solution('{1,2,3,3}') == '1'\nassert solution('{1,2,3,1,2}') == '2'\nassert solution('{1,2,2,2}') == '1'\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 2"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\nInput\n2\n1 2 2 1\n\nOutput\n2\n\n-----Sample Output-----\n2\n\n-----Sample Input-----\n2\n2 2 2 2\n\n-----Sample Output-----\n2\n\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2 1\") == 2\nassert solution(\"3 2 1\") == 3\nassert solution(\"3 2 1\") == 2\nassert solution(\"3 2 1\") == 2\nassert solution(\"1 2 1\") == 0\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"2\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 1') == '1'\nassert solution('2 4') == '0'\nassert solution('4 1') == '0'\nassert solution('4 10') == '0'\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"4\", \"1\", \"0\"]) == \"1\"\nassert solution([\"2\", \"1\", \"0\", \"0\"]) == \"0\"\nassert solution([\"0\", \"1\", \"2\", \"3\"]) == \"3\"\nassert solution([\"1\", \"2\", \"3\", \"4\"]) == \"4\"\nassert solution([\"0\", \"1\", \"2\", \"1\"]) == \"0\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('10 2 1 -3') == 3\nassert solution('1 1 0 1') == 1\nassert solution('1 1 1 0 1') == 2\nassert solution('2 1 1 1 0 0 0 0 0 0 0') == 2\nassert solution('4 0 0 0 0') == 0\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 3\nassert solution(\"5\") == 4\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"2 4 -3\") == \"0\"\nassert solution(\"4 10\") == \"0\"\nassert solution(\"4 10\") == \"0\"\nassert solution(\"3 1\") == \"0\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 1 -3\\n-1 1\\n'\n        '2 4 1 2\\n'\n        '-1 1'\n        '-1 1\\n'\n        '0'\n        '1'\n        '1'\n        '1') == '0'\n\nassert solution('2 4 1 2\\n-1 1\\n'\n        '2 4 1 2\\n'\n        '-1 1\\n'\n        '1'\n        '1'\n        '1') == '4'\n\nassert solution('4 10\\n'\n        '2 4 1 2\\n'\n        '-1 1\\n'\n        '1'\n        '1'\n        '1') == '0'\n\nassert solution('4 3\\n'\n        '3 2\\n'\n        '-1 1\\n'\n        '1'\n        '1') == '3'"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"2 4\") == \"0\"\nassert solution(\"4 10\") == \"0\"\n\n-----Constraints-----\n0 <= n <= 10^6\n-10^6 <= a_i < 10^6\n\n-----Sample Input 1-----\n\nSample Input 1:\n\n3 5\n2 1 -3\n\nSample Output 1:\n\n3\n\n-----Sample Input 2-----\n\nSample Input 2:\n\n4 10\n1 1 2 3 4 5 6 7 8 9\n\nSample Output 2:\n\n5\n\n-----Sample Input 3-----\n\nSample Input 3:\n\n3 4\n-1 1\n\nSample Output 3:\n\n0\n\n\n-----Sample Input 4-----\n\nSample Input 4:\n\n3 4\n-1 1\n\nSample Output 4:\n\n1\n\n\n-----Sample Input 5-----\n\nSample Input 5:\n\n4 4\n-1 1\n\nSample Output 5:\n\n2\n\n\n-----Sample Input 6-----\n\nSample Input 6:\n\n3 4\n-1 1\n\nSample Output 6:\n\n3\n\n\n-----Sample Input 7-----\n\nSample Input 7:\n\n3 5\n-1 1 2 3 4 5 6 7 8 9\n\nSample Output 7:\n\n5\n\n\n-----Sample Input 8-----\n\nSample Input 8:\n\n4 10\n1 1 2 3 4 5 6 7 8 9\n\nSample Output 8:\n\n2\n\n\n-----Sample Input 9-----\n\nSample Input 9:\n\n4 10\n-1 1 2 3 4 5 6 7 8 9\n\nSample Output 9:\n\n1\n\n\n-----Sample Input 10-----\n\nSample Input 10:\n\n5 10\n-1 1 2 3 4 5 6 7 8 9\n\nSample Output 10:\n\n0\n\n\n-----Sample Input 11-----\n\nSample Input 11:\n\n5 4\n-1 1\n\nSample Output 11:\n\n0\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12 84 28 3 6 12\"\n\n-----Examples-----\nInput\n\n2\n1000000000000000000 3000000000000000000\n\nOutput\n\n1000000000000000000 3000000000000000000\n\nInput\n\n1000000000000000000 3000000000000000000\n\nOutput\n\n1000000000000000000 3000000000000000000\n\n------Solution-----\nInput:\n3\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n2\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n3\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n4\n1000000000000000000 3000000000000000000\n\nOutput:\n6\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n2\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n3\n1000000000000000000 3000000000000000000\n\nOutput:\n3\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n3\n1000000000000000000 3000000000000000000\n\nOutput:\n6\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n1000000000000000000 3000000000000000000\n\nOutput:\n3\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n2\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n3\n1000000000000000000 3000000000000000000\n\nOutput:\n3\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n3\n1000000000000000000 3000000000000000000\n\nOutput:\n6\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n3\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n2\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n4\n1000000000000000000 3000000000000000000\n\nOutput:\n3\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n3\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n4\n1000000000000000000 3000000000000000000\n\nOutput:\n6\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n3\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n3\n1000000000000000000 3000000000000000000\n\nOutput:\n6\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n3\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n4\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n3\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n3\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n3\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n4\n1000000000000000000 3000000000000000000\n\nOutput:\n6\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n3\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n4\n1000000000000000000 3000000000000000000\n\nOutput:\n6\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n3\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n3\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n4\n1000000000000000000 3000000000000000000\n\nOutput:\n3\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n3\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n3\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n4\n1000000000000000000 3000000000000000000\n\nOutput:\n6\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n2\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n1000000000000000000 3000000000000000000\n\nOutput:\n1000000000000000000 3000000000000000000\n\n------------------\nInput:\n1000000000000000000 3000000000000000000\n\nOutput"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"9 3 6 12 4 8\"\nassert solution(stdin) == \"43\"\nassert solution(stdin) == \"41\"\nassert solution(stdin) == \"101\"\nassert solution(stdin) == \"1000000000000000000 3000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1000000000000000000 3000000000000000000\") == \"1000000000000000000\"\nassert solution(\"2\") == \"3000000000000000000\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"1000000000000000000\"\nassert solution(\"4\") == \"0000000000000000000000000000000000000000000000000\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"90000000000000000000000000000000000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '72'\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 9, \"answer is not correct\"\nassert solution(2) == 6, \"answer is not correct\"\nassert solution(3) == 42, \"answer is not correct\"\nassert solution(4) == 84, \"answer is not correct\"\nassert solution(5) == 126, \"answer is not correct\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"9 3 6 12 4 8\"\nassert solution(stdin) == \"126 42 84 28\"\nassert solution(stdin) == \"1000000000000000000 3000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 9 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28!\"\nassert solution(\"2\") == \"1000000000000000000 3000000000000000000\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '9 3 6 12 4 8'\nassert solution(stdin) == '12 4 8 30'\nassert solution(stdin
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"100\"\n\n-----Constraints-----\n\n0 < stdin.length < 200\n0 < stdin[i].length < 200\n\nExample 1:\n\nInput\n2\n4 7\n2 4\n\nOutput\n7 4 4 2\n\nExample 2:\n\nInput\n2\n1 5\n1 2\n\nOutput\n1 2\n\nNote:\n\n0 < stdin.length < 1000\n0 < stdin[i].length < 1000\n\n\"\"\"\n\nimport math\n\n\nclass Solution:\n    def solve(self, stdin):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        pass\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"9312126\"\nassert solution(stdin) == \"1228704\"\nassert solution(stdin) == \"325616\"\nassert solution(stdin) == \"117872\"\nassert solution(stdin) == \"100000000\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, [3, 5]) == 3\nassert solution(5, [7, 3, 5]) == 7\nassert solution(1, [3, 5]) == 1\nassert solution(4, [3, 5]) == 8"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 1 5 7 10 12\") == \"3\"\nassert solution(\"5 -1 2 5 8 11\") == \"8\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= stdin.length <= 10^5\n\n\n-----Time Complexity-----\n\nTo construct a subset which has maximum possible size $d_i$ the number of pairs $i_1, i_2, \\dots, i_m$ are calculated using the following algorithm:\n\n$log(2^m, d_i)$\n\n$$log(2^m, 2^m)$$\n\n\nfor $i_1 \\ldots $i_m$\n\n$$log(2^m, 2^m)$$\n\n\n$$d_i = log(2^m, 2^m)$$\n\n\n$$d_i$$\n\nfor $x_i$ in $x_1, x_2, \\dots, x_n$\n\n$$d_i$$\n\n\n$$d_i$$\n\n\n$$d_i$$\n\nwhere $x_i$ is a positive integer and $d_i$$ is the largest possible integer.\n\n\n-----Searching for two points satisfying the above condition -----\n\nTo find $d_i$, we use the following formula:\n\n$$log(2^m, d_i)$$\n\n\n$$log(2^m, 2^m)$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n\n$$d_i$$\n\nwhere $d_i$$ = 2^m$$\n\n$$d_i$$"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"8\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3 5 4 7 10 12\"]) == [\"3\",\"5\"]\nassert solution([\"5 -1 2 5 8 11\"]) == [\"5\",\"-1\"]\nassert solution([\"7\",\"3 5 -1\"]) == [\"3\",\"-1\"]\nassert solution([\"7\",\"5\",\"8\",\"11\"]) == [\"-1\",\"8\"]\nassert solution([\"4\",\"-1\",\"-1\",\"-1\",\"-1\"]) == [\"-1\",\"-1\"]\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, [1, -1, 2, 3, -3, 4, -4, 5, 6, 7, -7, 8, -8, 9, 10, 11, 12, 13, 14, 15]) == [1, 3, 5]\nassert solution(1, [-1, 2, -3, 3, -5]) == [1, 5]\nassert solution(1, [5, 4, 8, -3, -2, -1, 10]) == [2, 4, 5]\nassert solution(1, [7, -2, 3, -6, -6, 5, -9, -11, -12, 12, -1, -10]) == [1, 6, 7, 8, 9, 10]\nassert solution(1, [-1, 2, -3, 3, -5, -5, 5, -7, 7, 3, -7, -7, 8, -8, 9, 10, 11, 12, 13, 14, 15]) == [1, 2, 3, 5, 7]\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"5\n1 2 3 4 5\n\"\"\") == \"3\nassert solution(\"\"\"5\n4 1 5 3\n\"\"\") == \"3\nassert solution(\"\"\"5\n3 1 4 5\n\"\"\") == \"5\nassert solution(\"\"\"1\n1 2 3 4\n\"\"\") == \"1\nassert solution(\"\"\"5\n3 1 4 5\n\"\"\") == \"5\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == [3, 7, 3, 5]\nassert solution(stdin) == [1]\nassert solution(stdin) == [8]\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == [1, 7, 3, 5]\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '0 2'\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input() + \"\\n\") == \"2\"\nassert solution(input() + \"\\n\") == \"4\"\nassert solution(input() + \"\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"A K\nE K\nA K\nK K\"\"\") == \"2\"\n\n\n'''\nfor i in range(1, 10):\n    for j in range(1, i + 1):\n        print(j, end=\" \")\n    print()\n    \n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3 3\") == 2\nassert solution(\"2 3 4\") == 2\nassert solution(\"3 3 4\") == 1\nassert solution(\"2 2 1\") == 2\nassert solution(\"3 4 2\") == 3\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 3 3') == '0 2'\nassert solution('2 4') == '2 1'\nassert solution('2 2') == '2 1'\nassert solution('2 2 3') == '1 2'\nassert solution('2 4 3') == '2 1'\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 0, \"Your code failed to pass the test.\"\nassert solution(input()) == 2, \"Your code failed to pass the test.\"\n\nSee Also:\n- https://leetcode.com/problems/kids-with-the-greatest-number-of-clues/discuss/82133/Python-solution-with-explanation\n\"\"\"\n\nclass Solution:\n    def kidsWithCandies(self, candies: List[int], extraCandies: List[int]) -> List[bool]:\n        candies = [True] + candies + [False]\n        extraCandies = [True] + extraCandies + [False]\n        return extraCandies + [True if sum(candies[:i+1]) >= sum(extraCandies[:i+1]) else False for i in range(len(candies))]"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\ninput()) == \"0 2\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 3 3') == '1 2'\nassert solution('2 4 3') == '1 2'\nassert solution('2 6 5') == '0 1'\nassert solution('2 7 6') == '0 1'\nassert solution('2 8 7') == '0 1'\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '2 2'\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\""
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"103\") == \"3\"\nassert solution(\"100\") == \"2\"\nassert solution(\"1000\") == \"1\"\nassert solution(\"12000\") == \"0\"\nassert solution(\"10000\") == \"0\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Algorithm-----\nThis is a simple problem as it always used for both an integer and a fraction of an integer.\nWe can simplify the problem into a finite field, which is called X. \nThe problem uses two integers: A and B where A and B are the principal and the local variables of interest. \nFor each integer A:\n    Pow(X, B, X) = (X - A) x B \n    Pow(A, X, A) = B \n    Pow(X, A, X) = X \n\nThen, there is a sub-field X. \nThe sub-field X, whose principal and local variables are defined in the following table.\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10000\") == 3\nassert solution(\"0\") == 3\nassert solution(\"1000\") == 1\nassert solution(\"100\") == 1\nassert solution(\"50\") == 2\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\n\n'''\nclass Solution:\n    def solve(self, X):\n        if X >= 100000000:\n            return 1\n        else:\n            x = X - 100000000\n            return int(x/1000000000000)"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"3\"\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"3\"\n\n\n---Quick Sort-----\nGiven a collection of distinct integers, return an array of all integers that are less than or equal to every other integer.\nAn integer is less than or equal to every other integer if and only if it satisfies the following:\n\n0 < a[i] < b[i] <... < c[i] < d[i]\na[i], b[i],..., c[i], d[i] must be less than or equal to every other integer in the collection.\n\nExample 1:\nInput: [3,2,1]\nOutput: [0,1,2]\nExplanation: [0,1,2] is also accepted.\n\nExample 2:\nInput: [1,2,3,4]\nOutput: [1,3,4,2]\nExplanation: [1,3,4,2] is also accepted.\n\nExample 3:\nInput: [1,2,3,4,5]\nOutput: [1,2,3,4,5]\nExplanation: [1,2,3,4,5] is also accepted.\n\nExample 4:\nInput: [1,1,2,3,4]\nOutput: [1,2,4,3,3]\nExplanation: [1,2,4,3,3] is also accepted.\n\nExample 5:\nInput: [1,1,2,3,4,5]\nOutput: [1,2,3,4,5,5]\nExplanation: [1,2,3,4,5,5] is also accepted.\n\nComplexity Analysis:\nTime O(nlogn)\nSpace O(n)\n\"\"\"\nclass Solution:\n    def solution(self, A: List[int]) -> List[int]:\n        if len(A) == 1:\n            return A\n        \n        A.sort()\n        mid = (len(A) + 1) // 2\n        b_lst = [0]\n        b_lst.extend([0]+[a for a in A[0:mid]]+[a for a in A[mid:mid*2]]+[a for a in A[mid*2:mid*2+mid]))\n        \n        res = [a for a in b_lst if a]\n        \n        return res"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2') == '9'\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '9'\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '9'\n-----Bonus-----\nSum of odd digits in the given string is even. For example, the string \"5210\" is even but the string is \"101\".\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"9\"\n\"\"\"\nfrom utils import read_int"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2) == \"9\"\nassert solution(5) == \"9\"\nassert solution(10) == \"9\"\nassert solution(20) == \"9\"\nassert solution(100) == \"9\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"9\"\nassert solution(\"7\") == \"11\"\nassert solution(\"2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\\n6\\n7\\n8\\n9\\n\\n\\\"\\\"\\\"\\n\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n1\\n\\\"\\\"\\\"\\n\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n2\\n1\\n2\\n3\\n4\\n5\\n8\\n7\\n6\\n4\\n3\\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2) == '9'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == 3\nassert solution(6) == 5\nassert solution(7) == 7\nassert solution(8) == 8\nassert solution(10) == 9\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '9'\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '10'"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"10\"\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2') == '10'"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, [3, 4, 6]) == 10\nassert solution(2, [3, 4, 6]) == 10\nassert solution(3, [3, 4, 6]) == 10\nassert solution(4, [3, 4, 6]) == 10\nassert solution(5, [3, 4, 6]) == 10\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 4 6\") == 10\nassert solution(\n    \"3 4 6\") == 10\nassert solution(\n    \"3 4 7\") == 10\nassert solution(\n    \"3 4 8\") == 10\nassert solution(\n    \"3 4 9\") == 10\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"11\") == \"10\"\nassert solution(\"22\") == \"11\"\nassert solution(\"1000\") == \"1\"\nassert solution(\"10000\") == \"9\"\nassert solution(\"20000\") == \"2\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"5\", \"1\"]) == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"3 4 6\"\n    ), \"f(3 4 6) should equal 10\"\n    \"f(11) = (11\\ mod\\ 3) + (11\\ mod\\ 4) + (11\\ mod\\ 6) = 10 is the maximum value of f.\"\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 4 6\"\n) == \"10\"\nassert solution(\n    \"3 4 5\"\n) == \"10\"\nassert solution(\n    \"3 7\"\n) == \"10\"\nassert solution(\n    \"3 6\"\n) == \"10\"\nassert solution(\n    \"3 7\"\n) == \"10\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"Yes\"\n'''\n\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import factorial\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == 'Yes'\nassert solution('1 2 4') == 'Yes'\nassert solution('1 2 4 5 6') == 'Yes'\nassert solution('5 1') == 'Yes'\nassert solution('5 2 4 1') == 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"Yes\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\ninput = sys.stdin.readline\n\nN = int(input().strip())\ndices = defaultdict(int)\n\nfor _ in range(N):\n    dices[int(input().strip())] += 1\n\nfor d1, d2 in dices.items():\n    if d1 + d2 <= 3:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 7 10\") == \"Yes\"\nassert solution(\"5 1 2\") == \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 'Yes'\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3,5) == 'Yes', \"The result of the solution is wrong.\"\n\n--Description--\nThe function solution takes as input a string consisting of N space-separated numbers,\nrepresenting D_{i,1} and D_{i,2}. For each doublet in the string,\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"5 7 2\") == \"Yes\"\nassert solution(\n    \"5 5 1\") == \"Yes\"\nassert solution(\n    \"1 2 3 4 5 6\") == \"No\"\nassert solution(\n    \"5 6 2\") == \"No\"\nassert solution(\n    \"1 5 1\") == \"Yes\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"10 1\"\n) == \"10\"\nassert solution(\n
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2) == 4\nassert solution(3) == 6\nassert solution(4) == 12\nassert solution(5) == 24\nassert solution(6) == 36\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(test_input) == \"8\"\nassert solution(input_1) == \"8\"\nassert solution(input_2) == \"4\"\nassert solution(input_3) == \"1\"\nassert solution(input_4) == \"2\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == answer\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2) == 4\nassert solution(2.0) == 4\nassert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"1\") == \"3\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 3\nassert solution('4') == 4\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"4\""
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"2\"]) == \"4\"\nassert solution([\"2\", \"2\", \"2\"]) == \"4\"\nassert solution([\"2\", \"2\", \"2\", \"2\", \"2\"]) == \"10\"\nassert solution([\"2\", \"2\", \"2\", \"3\"]) == \"4\"\nassert solution([\"4\", \"1\"]) == \"4\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\nr =\n    \n    ) == 4\n'''"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"1 3\") == \"No\"\nassert solution(\"1 4\") == \"No\"\nassert solution(\"1 5\") == \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 'Yes'"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"Yes\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"Yes\" or solution(inp) == \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"No\"\n'''\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"Yes\""
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"Yes\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"702\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 3) == '702'\n\n\n'''\nimport string"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 7') == '702'\nassert solution('3 2') == '-1'\nassert solution('3 7') == '-1'\nassert solution('4 6') == '-1'\nassert solution('3 2') == '-1'\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '702'\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"702\"\nassert solution(\"1 7\") == \"702\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"1 7\") == -1"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp: str) == \"702\"\nassert solution(inp: str) == \"702\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"702\""
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"702\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 702\n\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 2') == '0'\nassert solution('1 7') == '-1'\nassert solution('1 3') == '-1'\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"9\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"3 2\"\n) == \"9\"\nassert solution(\n    \"3 3\"\n) == \"9\"\nassert solution(\n    \"3 4\"\n) == \"9\"\nassert solution(\n    \"5 6\"\n) == \"9\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == 9\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == str(9)\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(s) == \"9\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 184 185 186 187 188 188 189 190 191 192 192 193 194 195 196 197 198 199 200 201 202 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 220 221 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 237 238 238 239 240 241 240 242 245 246 247 248 249 250 251 252 253 253 254 255 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 273 274 275 275 277 278 279 280 281 282 283 284 285 287 286 287 288 289 290 291 291 292 293 294 295 296 297 298 299 300 301 301 302 304 305 306 308 309 310 311 310 312 313 314 315 316 317 318 419 419 420 421 421 431 431 441 442 443 444 445 445 446 447 449 4950 \n        \n       \n            \n        \n        \n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"9\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == str(9)\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(9)"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1 0 0 1\") == \"1 1 0 0 2\"\nassert solution(\"1 0 0 0 1\") == \"1 1 0 0 3\"\nassert solution(\"1 0 0 0 3\") == \"1 1 0 0 5\"\nassert solution(\"2 3\") == \"2 3\"\nassert solution(\"2 5\") == \"2 4 5\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1011\"\nassert solution(input()) == \"1011\"\nassert solution(input()) == \"1011\"\nassert solution(input()) == \"1011\"\nassert solution(input()) == \"1011\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1011\"\n\"\"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == N\nassert -10**9 <= N <= 10**9\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['1', '2', '3', '0']) == '0'\nassert solution(['0', '1', '3', '0']) == '0'\nassert solution(['0', '1', '2', '0']) == '0'\nassert solution(['0', '1', '2', '0']) == '1'\nassert solution(['0', '1', '2', '0']) == '1'\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"1011\""
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1011\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"9\") == \"11\"\nassert solution(\"10\") == \"1111\"\nassert solution(\"12\") == \"11111\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == -2\nassert solution(2) == -3\nassert solution(3) == -6\nassert solution(5) == -9\nassert solution(10) == 1\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 1\nassert solution(5) == -4\nassert solution(4) == -2\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '1011'\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"55\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 4 9 2 4 3 2\"\n) == \"12\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"9\"\nassert solution(inp) == \"12\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 10, \"Function is incorrect\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 5') == 12\nassert solution('4 9') == 12\nassert solution('2 4') == 12\nassert solution('1 4') == 12\nassert solution('1 3') == 12\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == 12\nassert solution(\"4 9\") == 0"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"12\"\n\"\"\"\nclass Solution:\n    def minMoney(self, n: int, m: int, A: List[List[int]], B: List[int], A_1: List[int], B_1: int) -> int:\n        \n        A.sort(key = lambda x: (x[1], -x[0]))\n        B.sort(key = lambda x: (x[1], -x[0]))\n        \n        dp = [[-1] * (n + 1) for _ in range(len(A) + 1)]\n        \n        for i in range(len(A) + 1):\n            if i == 0:\n                dp[i][0] = 0\n            else:\n                dp[i][0] = A[i-1][0] + B[i-1]\n        \n        for i in range(len(A) - 1, -1, -1):\n            for j in range(1, n + 1):\n                if B[i] + A_1[i] <= j:\n                    dp[i][j] = min(dp[i][j - A[i][0] + B[i]] + dp[i + 1][j - A[i][0] + B[i]] + dp[i + 1][j])\n                else:\n                    dp[i][j] = dp[i][j - A[i][0]] + A[i][1]\n        \n        return dp[-1][-1]"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2 5) == 12\nassert solution(4 9) == 0\nassert solution(2 4) == 0\nassert solution(1) == 0\nassert solution(\"2 4\") == 0\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"2 5\\\") == 12\nassert solution(\\\"2 4\\\") == 8\nassert solution(\\\"4 9\\\") == 5\nassert solution(\\\"4 2\\\") == 6\nassert solution(\\\"4 4\\\") == 11\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '12'\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \n    N: str(input())\n    H: str(input())\n    N, H = map(int, stdin.split())\n    max_count = 0\n    for i in range(N):\n        if H[i] >= H[i+1]:\n            max_count += 1\n        else:\n            max_count -= 1\n        \n    return str(max_count)\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 4 8 7 3\"), \"5\"\nassert solution(\"9 4 8 7 3\"), \"7\"\nassert solution(\"2 4 4 5\"), \"2\"\nassert solution(\"4 5 4 5\"), \"2\"\nassert solution(\"9 3 3\"), \"0\""
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 5\") == \"10 5\"\nassert solution(\"5 4 5\") == \"10 5\"\nassert solution(\"5 3 2\") == \"4 3 2\"\nassert solution(\"5\") == \"5\"\nassert solution(\"4 3\") == \"4 3\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    input()\n) == \"2\"\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3 4 8 7\") == \"4\"\nassert solution(\"5 3 4 8 7 1\") == \"1\"\nassert solution(\"3 3 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"5 1 4 9 2\") == \"2\"\nassert solution(\"2 3 4\") == \"2\"\nassert solution(\"2 2 2\") == \"2\"\nassert solution(\"3 4 1\") == \"2\"\nassert solution(\"4 3 1\") == \"1\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(str) == \"2\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"5 8 7 3\"\n), \"5 8 7 3 should be 2\"\nassert solution(\n    \"10 4 8 7 3\"\n), \"10 4 8 7 3 should be 2\"\nassert solution(\n    \"10 4 8 7 3\"\n), \"10 4 8 7 3 should be 3\"\nassert solution(\n    \"10 4 8 7 3\"\n), \"10 4 8 7 3 should be 4\"\nassert solution(\n    \"10 4 8 7 3\"\n), \"10 4 8 7 3 should be 4\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\n\n\"\"\"\n\nN = int(input())\nH = list(map(int, input().split()))\nN = sorted(H)\nM = []\nfor i in range(N):\n    M.append([])\n    M[i] = input().split()\n    for j in range(N):\n        if int(M[i][j]) > int(M[j][N-1]):\n            M[i].append(int(M[j][N-1]))\n        else:\n            M[i].append(int(M[j][N-1]))\n\nM.sort()\nprint(M)\n\nfor i in range(N):\n    count = 0\n    for j in range(i):\n        if int(M[j][N-1]) < int(M[i][N-1]):\n            count += 1\n    M[i] = count\n\nprint(M[N-1])\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\n\n\"\"\"\nclass Solution:\n    def minOperations(self, n: int, k: int) -> int:\n        # TODO: \u8fd8\u662f\u5f88\u7b80\u5355\uff0c\u8bbe\u5b9ak\u4e3a2\u7684\u4e8c\u5206\u67e5\u627e\n        # \u6211\u7684\u65b9\u6cd5\u662f\uff0c\u521d\u59cb\u5316\u4e00\u4e2a\u77e9\u9635\uff0c\u5f97\u5230n\u4e2a\u6570\uff0c\u4ece1\u5f00\u59cb\uff0c\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        nums = [1 for i in range(n+1)]\n\n        def rec(n, i, j):\n            if j == n:\n                return 0\n\n            if nums[i] == 0:\n                return 0\n\n            if nums[j] == 0:\n                return 0\n\n            # \u8868\u660e\u5de6\u8fb9\u7684i\u80af\u5b9a\u4e3a0\uff0c\u90a3\u4e48\u5de6\u8fb9\u7684i\u80af\u5b9a\u4e0d\u80fd\u4e3a0\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5224\u65ad\uff0c\u6bd4\u5982\u4e0b\u56fe\u53ef\u4ee5\u8868\u793a\uff1a\n            #   1 2 3\n            #   3 4 5\n            # \u90a3\u4e481\uff0c2\uff0c3\uff0c4\u5df2\u7ecf\u6ca1\u6709\u95ee\u9898\u4e86\u3002\n            # \u540e\u9762\u7684\u6bd4\u8f83\u597d\uff0c\u8fd8\u662f\u5f88\u7b80\u5355\uff0c\u5219\u76f4\u63a5\u6309\u7167\u7ed9\u5b9a\u7684\u7ed3\u679c\uff0c\u5c31\u662f\u77e9\u9635\u7684\u7b2ci\u884ci\u5217\u7684\u6bd4\u8f83\u5c31\u662f\u4e00\u4e2a\u89e3\u7684\u7ed3\u679c\n            # \u5bf9\u5e94\u7684\u662f\uff0c1 2 4 5\n            #\n            # \u56e0\u4e3a\u5de6\u8fb9\u7684i\u80af\u5b9a\u4e0d\u80fd\u4e3a0\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5224\u65ad\uff0c\u6bd4\u5982\u4e0b\u56fe\u53ef\u4ee5\u8868\u793a\uff1a\n            #   1 2 3\n            #   3 4 5\n            # \u90a3\u4e481\uff0c2\uff0c3\u5df2\u7ecf\u6ca1\u6709\u95ee\u9898\u4e86\u3002\n            # \u540e\u9762\u7684\u6bd4\u8f83\u597d\uff0c\u8fd8\u662f\u5f88\u7b80\u5355\uff0c\u5219\u76f4\u63a5\u6309\u7167\u7ed9\u5b9a\u7684\u7ed3\u679c\uff0c\u5c31\u662f\u77e9\u9635\u7684\u7b2ci\u884ci\u5217\u7684\u6bd4\u8f83\u5c31\u662f\u4e00\u4e2a\u89e3\u7684\u7ed3\u679c\n            if nums[i] < nums[i] < nums[j] or nums[i] == nums[j] == nums[n]:\n                return nums[j]\n            elif nums[j] < nums[j] < nums[i] or nums[j] == nums[i] == nums[n]:\n                return nums[i]\n            else:\n                return nums[i] + rec(n, i, j-1) + rec(n, i+1, j)\n\n        return rec(n, 1, k)\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2, \"incorrect output\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 3') == '2'\nassert solution('5 3') == '2'\nassert solution('5 3') == '1'\nassert solution('5 3') == '1'\nassert solution('5 3') == '0'"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1 2 3 4 5\",\"2\",\"2 3\",\"3 4 5\",\"3 3 4\",\"3 3 4\",\"4 3 4 3 4\"]) == \"0\"\nassert solution([\"1 2 3 4 5\",\"2\",\"2 3\",\"3 4 5\",\"3 3 4\",\"3 3 4\",\"4 3 4 3 4\"]) == \"1\"\nassert solution([\"1 2 3 4 5\",\"2\",\"2 3\",\"3 4 5\",\"3 3 4\",\"3 3 4\",\"4 3 4 3 4\"]) == \"1\"\nassert solution([\"1 1 1 1\",\"1\"]) == \"1\"\nassert solution([\"1 1 1 1\",\"1\"]) == \"1\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(a) == 1, 'incorrect'\nassert solution(b) == 2, 'incorrect'\nassert solution(c) == 2, 'incorrect'\nassert solution(d) == 0, 'incorrect'\nassert solution(e) == 0, 'incorrect'\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\"5\", \"3\", \"4\", \"2\", \"2\"]\n    ) == \"1\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == 3\nassert solution(3, 3, 4, 3) == 2\nassert solution(6, 6) == 2\nassert solution(6, 7, 8, 9, 10) == 0"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,1) == 2\nassert solution(1,2) == 2\nassert solution(2,1) == 1\nassert solution(2,2) == 1\nassert solution(2,3) == 2\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('11')) == 2\nassert solution('16') == 3\n\n\n      \n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin: str = \"6 5\\n\"\n    ) == \"3\"\n\n    # assert solution(\n    #     stdin: str = \"7 5\\n\"\n    #     ) == \"3\"\n\n    # assert solution(\n    #     stdin: str = \"7 3\\n\"\n    #     ) == \"2\"\n\n----------------------------------------------------------------------------------------\nNOTE:\n- Given an array, you are not allowed to use any built-in Math library, so you do not need to.\n- We will not use any particular Math function, and you will have to use a Math function.\n\n- Modifying the array so that each value is unique, you do not need to add unique values.\n- It is guaranteed that all the elements are unique.\n- Modifying the array so that each value is unique, you need to add unique values.\n\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\nprint(solution(stdin))\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(['1', '1', '1', '1']) == '3'\nassert solution(['3', '3', '3', '3']) == '4'\nassert solution(['1', '1', '3', '3']) == '3'\nassert solution(['1', '1', '1', '3']) == '3'\nassert solution(['2', '2', '2', '2']) == '3'\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == '100'\nassert solution(inp) == '200'\nassert solution(inp) == '300'\nassert solution(inp) == '400'\nassert solution(inp) == '500'\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 10 1 3\") == \"1 1000 1\"\nassert solution(\"3 10 1 4\") == \"1 1000 1\"\nassert solution(\"3 10 1 5\") == \"1 1000 1\"\nassert solution(\"3 10 1 6\") == \"1 1000 1\"\nassert solution(\"3 10 1 7\") == \"1 1000 1\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"10\"\n\n----Good candidate-----\nhttps://www.hackerrank.com/challenges/nested-list/problem\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"7\"\nassert solution(input()) == \"14\"\nassert solution(input()) == \"65\"\nassert solution(input()) == \"237\"\nassert solution(input()) == \"42000000000000\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 3\") == \"0\"\nassert solution(\"1 4 2\") == \"1\"\nassert solution(\"4 10 1\") == \"2\"\nassert solution(\"1 1 2 1\") == \"3\"\nassert solution(\"3 2 1 3\") == \"2\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 72000000000000\n-----Constraints-----\n0 < q < 10^4\n-10^12 <= n_i, a_i, b_i <= 10^12\n0 < i < 10^12\n-10^12 <= n_i, a_i, b_i <= 10^12\n\n----My code----"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"10\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"500\"\nassert solution(input()) == \"1000\""
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 4\n'''\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"1 6 1000 \"\"\") == \"1\"\nassert solution(\"\"\"1 5 1000 \"\"\") == \"1\"\nassert solution(\"\"\"1 1 0 \"\"\") == \"1\"\nassert solution(\"\"\"1 6 0 \"\"\") == \"1\"\nassert solution(\"\"\"1 6 0 5 \"\"\") == \"1\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 10 5 5 7 6') == '3'\nassert solution('1 1000 5 5 7 8 9') == '2'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '3'\nassert solution('1 3 5 7 9 10 10 11 12') == '2'\nassert solution('1 4 6') == '3'\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n\ninput = sys.stdin.readline"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 2 4\") == \"1 1 1\"\nassert solution(\"5 10\") == \"2 2 4\"\nassert solution(\"4 4 7\") == \"0 0 0\"\nassert solution(\"3 3 4 3 3\") == \"0 0 0\"\nassert solution(\"4 4 4 4\") == \"0 0 0\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"0 0 0 0\") == \"1\"\nassert solution(\"3 4 5\") == \"2\"\nassert solution(\"10 9 10 9\") == \"2\"\nassert solution(\"8 7 8 7\") == \"1\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin: str) == \"1\"\nassert solution(\n    stdin: str) == \"6\"\n\n-----Sample Input-----\n4\n3 4 5\n\n-----Sample Output-----\n2\n\nThe ball will make a bounce at the coordinates 0, 3, 7 and 12, among which two are less than or equal to 6.\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"2\"\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"2\""
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"1 2 3 4 5 7 6 8 9 0\") == 2\n\nassert solution(\"0 3 2\") == 1\n\nassert solution(\"0 0 0\") == 0\n\n\"\"\"\nimport math\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"2\"\n\n\"\"\"\n\nN, L_1, L_2, L_3, L_4 = map(int, input().split())\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('hoge hoge hoge') == 'No'\nassert solution('english english english') == 'No'\nassert solution('enigma enigma enigma enigma enigma') == 'Yes'\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"hoge\") == \"Yes\"\nassert solution(\"english\") == \"No\"\nassert solution(\"hoge\") == \"Yes\"\nassert solution(\"english\") == \"No\"\nassert solution(\"hoge\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"hi\") == \"hi\"\nassert solution(\"Ala ma kota\") == \"Ala ma kota\"\nassert solution(\"Oha kumure\") == \"Oha kumure\"\nassert solution(\"Taka\") == \"Taka\"\nassert solution(\"chix\") == \"chix\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"hoge\") == \"No\"\nassert solution(\"english\") == \"Yes\"\nassert solution(\"hoge\") == \"No\"\nassert solution(\"english\") == \"Yes\"\nassert solution(\"enigma\") == \"Yes\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"Yes\"\n\n\"\"\"\n\nimport time\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 'No'\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"hoge\") == \"No\"\nassert solution(\"english\") == \"Yes\"\nassert solution(\"hogeen\") == \"No\"\nassert solution(\"enginha\") == \"Yes\"\nassert solution(\"enginhae\") == \"No\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"3\"\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    '2 3') == '6'\nassert solution(\n    '4 5') == '3'\nassert solution(\n    '1 1 1') == '1'\nassert solution(\n    '1 1 1 1') == '1'\nassert solution(\n    '1 1 1 1 1') == '1'\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"1 0 1\") == \"1\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n        [\"2 3\", \"1 1\", \"2 2\", \"1 1\"]\n    ) == \"6\"\nassert solution(\n        [\"3 3\", \"3 3\", \"3 3\", \"2 2\", \"2 3\", \"2 2\", \"1 1\"]\n    ) == \"6\"\nassert solution(\n        [\"3 3\", \"3 3\", \"3 3\", \"2 2\", \"2 3\", \"2 2\", \"2 2\", \"1 1\", \"1 1\"]\n    ) == \"6\"\nassert solution(\n        [\"1 1\", \"3 1\", \"1 1\", \"3 2\", \"1 1\", \"1 1\", \"1 1\", \"3 2\", \"3 3\", \"1 1\", \"1 1\"]\n    ) == \"6\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(str) == 6\nassert solution(str) == 5\nassert solution(str) == 4\nassert solution(str) == 1\nassert solution(str) == 1\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"1 4\") == \"4\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"6\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"6\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"6\"\n\n\"\"\"\n\nn = int(input())\na, b = map(int, input().split())\n\nA = n//a\nB = n//b\n\nprint(A + B)\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(str) == \"6\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 1 1') == '1 3'\nassert solution('2 2 3') == '1 3'\nassert solution('3 3 4 1') == '1 3'\nassert solution('4 4 4 1') == '1 2'\nassert solution('5 5 5 1') == '1 2'\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"aab\") == \"aabb\"\nassert solution(\"aab\") == \"aaab\"\nassert solution(\"aabab\") == \"ababab\"\nassert solution(\"ba\") == \"babab\"\nassert solution(\"ababcd\") == \"ababcd\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('sardine') =='sxzzy'\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"sardine\") == \"sardine\"\nassert solution(\"abcdcba\") == \"abcdcba\"\nassert solution(\"a\") == \"a\"\nassert solution(\"pqrsqrtuvz\") == \"qrtsuvz\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('aacbcaaa') == 'aacbcaa'\nassert solution('cdc') == 'a'\nassert solution('abcdef') == 'ab'\nassert solution('abcabcabc') == 'ababcabc'\nassert solution('abcabcabcd') == 'ababcabcd'\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"sardine\"), \"sardine\"\nassert solution(\"erge\"), \"erge\"\nassert solution(\"leetcode\"), \"leetcode\"\nassert solution(\"\"), \"no answer\""
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s), 'The solution is not valid'\nassert solution(\"x\") == \"xxxx\", 'The solution is not valid'\nassert solution(\"x\") == \"xxx\", 'The solution is not valid'\nassert solution(\"y\") == \"yyyy\", 'The solution is not valid'\nassert solution(\"\") == \"\", 'The solution is not valid'\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\nassert solution(\"Asdfgfdhsfdsfdsdf\") == \"AsdFdsFdsFdsFdsfdFdsFdsfdFdsf\"\nassert solution(\"\") == \"\"\nassert solution(\"xyz\") == \"xyz\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"abcde\") == \"abcd\"\nassert solution(\"abcdef\") == \"abcdef\"\nassert solution(\"abcdefg\") == \"abcdefg\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"roses\") == \"rosesxx\"\nassert solution(\"rose\") == \"rosexx\"\nassert solution(\"rose roes\") == \"rosexx\"\nassert solution(\"rose ro\") == \"rosexx\"\nassert solution(\"rose ros\") == \"rosexx\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 'Yes'\n\nExplanation\nThe first and last squares are not decreasing, hence, the only option is to decrease their height by 1.\n\nExample\n\nExample 1:\n\nInput\n\n5\n1 2 1 3\n\nOutput\n\nNo\nExample 2:\n\nInput\n\n5\n1 2 3 4\n\nOutput\n\nYes\nExample 3:\n\nInput\n\n5\n1 2 4 5\n\nOutput\n\nYes\n\"\"\"\nimport sys\nsys.setrecursionlimit(10 ** 6)\n\nclass Solution:\n    def isDecreasing(self, array):\n        pass"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1 2 1\", \"3\"]) == \"Yes\", \"soluton failed\"\nassert solution([\"1 3\", \"1 5\", \"2 1\", \"4 3\", \"2 2\", \"4 4\", \"5 4\"]) == \"No\", \"solution failed\"\nassert solution([\"2 1\", \"4 3\", \"3 4\", \"2 2\", \"3 2\", \"4 1\", \"5 2\"]) == \"Yes\", \"solution failed\""
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"5\") == \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"No\"\nassert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(a) == \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5') == 'Yes'\nassert solution('4') == 'No'"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 4 1\") == \"Yes\"\nassert solution(\"1 2 1\") == \"No\"\nassert solution(\"1 3 1\") == \"No\"\nassert solution(\"1 4 3\") == \"No\"\nassert solution(\"1 1 1\") == \"No\"\n\n------Sample Output------\nSample Input:\n5\n1 2 1 1 3\n\nSample Output:\nYes\n\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"No\""
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nprint(\"Success\")\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 3 -10\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 2\") == \"1\"\nassert solution(\"1 2 2\") == \"1\"\nassert solution(\"1 2 2\") == \"1\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\nprint(\"It is a correct solution\")\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(\"3 2 1 1 2 3 4 5 6 7 8 9 10\") == \"1 2 3 4 5 6 7 8 9 10\"\n\nassert solution(\"3 1 1 1 3\") == \"1 1 1 1 3\"\nassert solution(\"3 1 1 1 2 3\") == \"1 1 1 1 2 3\"\nassert solution(\"3 1 1 1 1 2 3\") == \"1 1 1 1 2 3\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('2 2 1') == '1'\nassert solution('2 2 2') == '1'\nassert solution('3 2 1') == '1'\nassert solution('3 2 2') == '0'\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3 -10\") == \"1\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 2\") == \"2\"\nassert solution(\"1 2 2\") == \"1\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 1\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input().strip().split()\n) == (\"1 1 0 0\\n\"\n\"1 1 2 3\\n\"\n\"0 2 1 0\\n\"\n\"0 1 2 3\\n\"\n\"0 1 2 2\\n\"\n\"0 1 2 3\\n\")"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 100\n\n'''\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 100"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 100\n\n'''\n\nimport math"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 100\nassert solution(stdin)!= 100\nassert solution(stdin) == 100\nassert solution(stdin)!= 100\nassert solution(stdin) == 100\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 100\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 100\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 100, 'incorrect result'\n\nTest Input\nTest cases\nInput 1:\nN = 1999\nOutput 1:\n5\nInput 2:\nN = 4500\nOutput 2:\n9\nInput 3:\nN = 30000\nOutput 3:\n1\nInput 4:\nN = 9999\nOutput 4:\n9\nInput 5:\nN = 2\nOutput 5:\n9\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 100\n\n\n=====Time Complexity=====\n - O(N)\n - N is an integer\n - N is the number of bills\n - N is an integer\n\n=====Space Complexity=====\n - O(N)\n - N is an integer\n - N is the number of bills\n - N is an integer\n\n\"\"\",\n\n'''\n1. Clarifications\n\n2. Edge Cases\n\n3. Edge Cases\n\n4. Edge Cases\n\n5. Public/Protected\n\n'''\n\n'''\n1. Clarifications"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 100\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 100, \"The correct solution is not found\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 3 10\") == \"9\"\nassert solution(\"4 5\") == \"8\"\nassert solution(\"2\") == \"1\"\nassert solution(\"2 5\") == \"2\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"2 5 2 4 3 4 5 2\"\n) == \"9\"\nassert solution(\n    \"2 5 2 4 3 4 5 2 4 5 5\"\n) == \"3\"\nassert solution(\n    \"2 5 2 4 3 4 5 2 4 5 5 2 2\"\n) == \"3\"\nassert solution(\n    \"2 5 2 4 3 4 5 2 4 5 5 2 2 3\"\n) == \"4\"\nassert solution(\n    \"2 5 2 4 3 4 5 2 4 5 5 2 2 3 4\"\n) == \"6\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 9\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\\\"\\\"\\\"\n2\n1 2\n3 5\n4 2\n3 2\n4 7\n3 3\n\\\"\\\"\\\"\n) == 9\nassert solution(\\\"\\\"\\\"\n2\n1 2\n3 5\n4 2\n3 2\n4 7\n3 3\n\\\"\\\"\\\"\n) == 3\nassert solution(\\\"\\\"\\\"\n2\n1 2\n3 5\n4 2\n3 2\n4 7\n3 3\n\\\"\\\"\\\"\n) == 5\nassert solution(\\\"\\\"\\\"\n2\n1 2\n3 5\n4 2\n3 2\n4 7\n3 3\n\\\"\\\"\\\"\n) == 10\nassert solution(\\\"\\\"\\\"\n2\n1 2\n3 5\n4 2\n3 2\n4 7\n3 3\n\\\"\\\"\\\"\n) == 11\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '9'\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"9\"\nassert solution(\"2 3\") == \"6\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"6 5 2\") == \"4\"\nassert solution(\"5 6\") == \"3\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin: str = input()\n)\nassert solution(\n    stdin: str = input()\n)\nassert solution(\n    stdin: str = input()\n)\nassert solution(\n    stdin: str = input()\n)\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 6 5\") == \"6\"\nassert solution(\"4 4\") == \"3\"\nassert solution(\"4 5\") == \"5\"\nassert solution(\"5 3\") == \"5\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"9\"\n\n-----My Submission-----\nA = 5\nB = 10\nC = 2\n\nprint(solution(\"5 5 2\"))\n\n------------------------------------------------------\n \n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"The function must solve the problem!\""
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 2 10 20\") == \"War\"\nassert solution(\"8 15 13\") == \"No War\"\nassert solution(\"16 22\") == \"War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), 'No War'\n\"\"\"\nimport math"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['10', '8', '15', '13', '16', '22']) == 'No War'\nassert solution(['10', '8', '15', '13', '16', '22']) == 'War'"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(INPUT) == \"No War\"\n\nprint(\"Congrats, you passed the test!\")"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 4 1\") == \"No War\"\nassert solution(\"2 4 1\") == \"No War\"\nassert solution(\"3 2 10 20\") == \"War\"\nassert solution(\"8 15 13\") == \"No War\"\nassert solution(\"16 22\") == \"War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 2 10 20\") == \"War\"\nassert solution(\"2 2 8 15\") == \"No War\"\nassert solution(\"4 4 9 15\") == \"No War\"\nassert solution(\"10 10 15 16\") == \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 2 10 20') == 'War'\nassert solution('8 15 13') == 'No War'\nassert solution('16 22') == 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"No War\"\nassert solution(stdin) == \"War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2 10 20\") == \"No War\"\nassert solution(\"8 15 13\") == \"No War\"\nassert solution(\"16 22\") == \"No War\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"6\"\n\"\"\"\n\nN = int(input())\nT = input()\nT = T.split(',')"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"1\") == 0\nassert solution(\"2\") == 1\nassert solution(\"3\") == 1\nassert solution(\"4\") == 3\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '6'\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 6\n\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == str(6)\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 4') == '6'\nassert solution('2') == '6'\nassert solution('3') == '6'\nassert solution('2 5') == '0'\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"6\"\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"6\"\n\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n\nN, T_1, T_N, T_i = map(int, input().strip().split())\n\nT_i_list = [0 for i in range(T_i+1)]\nT_i_list[T_1] = 1\nT_i_list[T_N] = 1\n\nfor i in range(2, T_i+1):\n    T_i_list[i] = T_i_list[i-2]\n    T_i_list[i] += T_i_list[i-1]\n\nprint(sum(T_i_list[T_i:]) % (10**18))\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"6\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"0\"\n-----Sample Input-----\n3\n1 2 3\n\n-----Sample Output-----\n1\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 0"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1 3 4 5 3 3 2 1 4 1 2 1 4 4 3 4 5 5 3 4 2 5 3 2 4 5 4 1 3 5 3 2 2 4 3 3 4 4 1 2 1 1 2 3 4 3 2 4 4 3 5 3 3 4 5 4 5 2 3 3 2 4 3 4 3 1 3 3 4 4 5 3 3 3 3 2 4 4 4 5 3 3 2 4 4 3 3 2 4 4 4 2 2 3 3 3 2 4 2 2 2 1 1 1 1 2 3 3 2 2 3 3 3 2 4 2 4 3 2 2 2 3 2 3 2 2 4 3 2 4 4 1 3 3 3 2 2 2 2 1 1 2 1 1 2 2 3 3 3 2 2 2 2 3 3 2 2 3 2 2 2 3 2 2 2 2 1 2 3 3 3 2 3 2 2 2 2 2 1 2 1 1 2 2 3 2 2 2 2 2 1 2 2 1 2 1 2 3 2 2 2 2 2 2 2 1 2 2 3 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"0\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"3 3 3\") == \"0\"\nassert solution(\"2 2 1\") == \"0\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"0\"\nassert solution(\"2 2 3 4 5 6\") == \"0\"\nassert solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 129 130 131 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 169 170 171 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 220 221 221 222 223 224 225 226 227 228 229 230 231 231 232 233 234 235 236 237 237 238 239 240 241 240 242 243 244 245 245 246 246 247 248 249 250 252 253 254 255 255 256 257 257 258 259 260 261 262 263 264 265 266 267 268 269 271 272 274 275 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 291 292 293 294 295 295 296 297 298 299 300 301 301 302 303 303 304 305 306 308 309 311 313 314 315 316 317 318 319 320 321 321 322 323 323 324 325 326 327 328 329 329 330 331 331 332 332 333 333 334 334 335 336 337 337 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\n\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '0'\n-----Sample Input-----\n2\n3\n5 4\n\n-----Sample Output-----\n1\n\nassert solution(input) == '1'\n\n------------------\nYou have a string S. You can split the string into two or more substrings. \nFind the maximum length of the two substrings. \nThe two substrings are separated by a single space. \n\"\"\"\nimport sys"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 1 10 1\") == \"0\"\nassert solution(\"6 4 10 1\") == \"3\"\nassert solution(\"4 1 2 5 6 1\") == \"0\"\nassert solution(\"2 2 4 6 1\") == \"0\"\nassert solution(\"1 10 1 1\") == \"3\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\n-----Bonus-----\nWrite a function to compute a 3-group mass with the following constraints:\nIf the group sums to the absolute difference of S_1 and S_2, then S_1 = S_2 + M_1 and S_2 = M_1 + M_2.\nIf the group sums to the absolute difference of S_1 and S_2, then the difference of S_1 and S_2 is M_2 - M_1, and the sum of M_1 and M_2 is S_2 - S_1.\nFor example, given the following N = 10, and a three-group group with weights W_1 W_2 W_3 and corresponding S_1 S_2 S_3, the result is given by:\n\nW_1 = 3\nW_2 = 7\nW_3 = 15\nS_1 = 5\nS_2 = 13\nS_3 = 15\nM_1 = 25\nM_2 = 12\nM_3 = 17\nassert M_1 + M_2 == S_2 - S_1\nassert M_2 + M_3 == S_1 - S_2\nassert M_1 + M_3 == S_2 - S_3\n\nThe tests are provided for you.\nInput: A group of three natural numbers separated by spaces.\nOutput: A string representing the solution to the problem.\nExample 1:\nInput: 3\n3 4\n0 1\n0 3\nOutput: \"0 0 0 0\"\nExplanation: There are three groups with weights 0, 1 and 3. The sum of these three groups is 3.\nExample 2:\nInput: 2\n3 3\n0 0 0 0\n0 0 1 0\nOutput: \"0 0 0 0\"\nExplanation: There are two groups with weights 0 and 0. The sum of these two groups is 3.\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4, 3) == 6\nassert solution(3, 3) == 2\nassert solution(3, 3) == 1\nassert solution(4, 3) == 2\nassert solution(6, 3) == 0\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\""
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 3 1 4\") == \"0\"\nassert solution(\"3 4 1 4\") == \"2\"\nassert solution(\"3 4 5 6\") == \"6\"\nassert solution(\"3 4 5 7\") == \"6\"\nassert solution(\"3 4 5 8\") == \"8\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 3') == '6'\nassert solution('4 3') == '2'\nassert solution('4 4') == '0'\nassert solution('5 5 6') == '0'"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\n\n-----Constraints-----\n1 <= n <= 100\n1 <= a_i <= 100\n\n------Time Limit: 0.1 seconds--------\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '99'\nassert solution(stdin) == '5'\nassert solution(stdin) == '99'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\n\nInput\n6\n5 10 2 3 14 5\n\nOutput\n5\n\nInput\n2\n1 100\n\nOutput\n99\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 10 2 3 14 5\") == \"5\"\nassert solution(\"2 1 100\") == \"99\""
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"0 1 4 7\") == \"2\"\nassert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"1 1 1 2\") == \"3\"\nassert solution(\"1 1 1 3\") == \"4\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 99\n\nThe first solution is incorrect as the index of the second student is > the index of the first student.\n\nThe second solution is incorrect as the index of the second student is > the index of the third student.\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5 10 2 3 14 5') == '5'\nassert solution('3 100') == '5'\nassert solution('1 100') == '3'\n\n\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 5 100 2 4\"\n) == \"15\"\n\nassert solution(\n    \"3 5 100 1 5\"\n) == \"6\"\n\nassert solution(\n    \"3 5 10 2 3\"\n) == \"1\"\n\nassert solution(\n    \"3 6 3 2 2\"\n) == \"11\"\n\nassert solution(\n    \"1 5 10 3 2\"\n) == \"1\""
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 0\") == \"3\"\nassert solution(\"1 0 1\") == \"2\"\nassert solution(\"1 0 0\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"0 0 1\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin,\n    [\n        \"1 0 1 0 1\",\n        \"0 0 0 0 0 0 1\",\n        \"1 0 1 0 1 0 0 0 0 1\",\n        \"0 1 0 0 0 0 0 0 0 1\",\n        \"0 0 0 0 0 0 0 0 0 0 1\",\n        \"0 0 0 0 0 0 0 0 0 0 1\",\n        \"0 0 0 0 0 0 0 0 0 0 0 1\",\n        \"0 0 0 0 0 0 0 0 0 0 0 0 1\",\n        \"0 0 0 0 0 0 0 0 0 0 0 0 0 1\",\n        \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\",\n    ]\n) == \"2\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"6 0 1 0 1\") == \"2\"\nassert solution(\"7 0 1 1 1 0 1\") == \"0\"\nassert solution(\"3 0 0 0\") == \"0\"\nassert solution(\"\") == \"0\""
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n\n------Explanation-----\n\nPolycarp is working after the last hour.\n\nAfter the $4$-th hour, Polycarp has no rest at all.\n\nAfter the $5$-th hour, Polycarp has no rest at all.\n\nAfter the $4$-th hour, Polycarp is resting.\n\nAfter the $5$-th hour, Polycarp has no rest at all.\n\"\"\"\n\nclass Solution:\n    def findRestaurants(self, time: List[int], K: int) -> List[int]:\n        \n        res = []\n        time.sort(reverse=True)\n\n        while time:\n            \n            pre_time = time.pop(0)\n            \n            if pre_time > 0:\n                for i in range(len(time)):\n                    if time[i] <= pre_time:\n                        time[i] = 0\n                        break\n                    else:\n                        res.append(i)\n            \n            if not time:\n                res.append(0)\n        \n        return res"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 0"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(int(stdin)) == 1, 'The function does not return anything'\nassert solution(int(stdin)) == 0, 'The function does not return anything'\nassert solution(int(stdin)) == 0, 'The function does not return anything'\nassert solution(int(stdin)) == 1, 'The function does not return anything'\nassert solution(int(stdin)) == 0, 'The function does not return anything'\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(test_input) == 8\nassert solution(input) == 2\nassert solution(input2) == 7\nassert solution(input3) == 0\nassert solution(input4) == 4\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == '1'\nassert solution(2) == '2'\nassert solution(3) == '3'\nassert solution(4) == '4'\nassert solution(5) == '5'\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 6"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\"), \"Empty\"\nassert solution(\"2\"), \"Empty\"\nassert solution(\"3\"), \"Empty\"\nassert solution(\"4\"), \"Empty\"\nassert solution(\"5\"), \"Empty\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(7) == 1\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^4\n0 <= stdin[i] <= 10^5\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"0\""
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '0'"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0\n\n\n------Variables------\n\nint\n    Longest mountain above sea level.\n\nint\n    Peak rises to 8848 m.\n\nint\n    Longest waterfall.\n\nint\n    Greatest single drop.\n\nint\n    Name of the largest mountain above sea level.\n\nint\n    Name of the name of the greatest single drop."
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n------Code-------\n\n[Exercise]\n\nThe code below shows the solution to question 2.\n\n\n[Input]\n\nThere are  lines of input in standard input, each line contains an integer N (1 \u2264 N \u2264 10).\n\nThe  next  N lines describe the cheeses you have. Each line contains two space-separated strings: the name of the cheese and its type. The name is a string of lowercase English letters between 1 and 10 characters long. The type is either \"soft\" or \"hard. All cheese names are distinct.\n\n[Output]\n\nOutput a single number.\n\n\n[Example]\n\nExample 1:\n\nInput\n\n3\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard\n\nOutput\n\n3\n\nInput\n\n4\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\nOutput\n\n3\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"The string is not formatted correctly.\"\nassert solution(\"parmesan hard\"), \"The string is not formatted correctly.\"\nassert solution(\"emmental hard\"), \"The string is not formatted correctly.\"\nassert solution(\"parmesan hard\"), \"The string is not formatted correctly.\"\nassert solution(\"brie soft\"), \"The string is not formatted correctly.\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 2 2 3 4 4 2 3\") == \"7\"\nassert solution(\"\") == \"ERROR: No solution.\"\nassert solution(\"bad\") == \"ERROR: No solution.\"\nassert solution(\"bad\") == \"WARNING: Bad input.\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"hard\"\nassert solution(\"5\") == \"hard\"\nassert solution(\"6\") == \"hard\"\nassert solution(\"1\") == \"hard\"\nassert solution(\"2\") == \"soft\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 3 5 2\") == \"7\"\nassert solution(\"3 7 4\") == \"9\"\nassert solution(\"1 3 9\") == \"3\"\nassert solution(\"3 3 1\") == \"1\"\nassert solution(\"7 3 1\") == \"3\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"soft\"\nassert solution(\"2 2 3 3 3 3 3 4\") == \"hard\"\nassert solution(\"2 2 3 3 3 3 2 4 2 3 3\") == \"hard\"\nassert solution(\"2 2 3 2 3 2 3 3 3 3\") == \"hard\"\nassert solution(\"2 2 3 3 3 3 3 2 2\") == \"hard\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"defeat\"\nassert solution(input()) == \"sad\"\nassert solution(input()) == \"hard\"\nassert solution(input()) == \"soft\"\nassert solution(input()) == \"hard\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\\n0 0 0 2\") == \"1 0 0 2\"\nassert solution(\"7\\n0 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\nassert solution(\"7\\n2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2 0 0 2\"\nassert solution(stdin) == \"1 0 0 2\"\nassert solution(stdin) == \"1 0 0 2\"\nassert solution(stdin) == \"1 0 0 2\"\nassert solution(stdin) == \"1 0 0 2\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == '1'\nassert solution(inp) == '2'\nassert solution(inp) == '1'\nassert solution(inp) == '0'\nassert solution(inp) == '2'\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 5 1 5 3 4 3\") == \"1 0 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2\"\nassert solution(\"1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"0 3 1 4 5 2 1 4 3 2 1 2 3 1\") == \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\") == \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\") == \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1 0 0 2\"\nassert solution(stdin) == \"0 0 0 2\"\nassert solution(stdin) == \"0 0 0 1\"\nassert solution(stdin) == \"0 0 0 0\"\nassert solution(stdin) == \"0 0 0 1\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0, 0) == 1\nassert solution(1, 0) == 2\nassert solution(2, 0) == 3\nassert solution(3, 0) == 4\nassert solution(4, 0) == 5\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 0 0 2 0 0 0\"\n\n>>> python solution.py\n[1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 0 0 2\"\n\nInput\n1\n2\n3\n\nOutput\n2\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\"2\", \"1\", \"2\", \"3\", \"3\", \"3\", \"3\", \"4\", \"5\", \"6\", \"6\", \"6\", \"6\", \"7\", \"8\", \"8\", \"8\", \"8\", \"8\", \"9\", \"9\", \"9\", \"9\", \"9\", \"10\", \"10\", \"10\", \"10\", \"11\", \"11\", \"11\", \"11\", \"12\", \"12\", \"12\", \"12\", \"12\", \"13\", \"13\", \"13\", \"13\", \"14\", \"14\", \"14\", \"14\", \"15\", \"15\", \"15\", \"15\", \"16\", \"16\", \"16\", \"16\", \"17\", \"17\", \"17\", \"17\", \"18\", \"18\", \"18\", \"18\", \"19\", \"19\", \"19\", \"19\", \"20\", \"20\", \"20\", \"20\", \"21\", \"21\", \"21\", \"22\", \"22\", \"22\", \"23\", \"23\", \"23\", \"24\", \"24\", \"24\", \"24\", \"25\", \"25\", \"25\", \"25\", \"26\", \"26\", \"26\", \"27\", \"27\", \"27\", \"27\", \"28\", \"28\", \"28\", \"29\", \"29\", \"29\", \"29\", \"30\", \"30\", \"30\", \"31\", \"31\", \"32\", \"32\", \"32\", \"33\", \"33\", \"33\", \"34\", \"34\", \"34\", \"35\", \"35\", \"36\", \"36\", \"37\", \"37\", \"38\", \"38\", \"39\", \"39\", \"40\", \"40\", \"41\", \"41\", \"42\", \"42\", \"43\", \"43\", \"44\", \"44\", \"45\", \"45\", \"46\", \"46\", \"47\", \"47\", \"47\", \"48\", \"48\", \"49\", \"49\", \"50\", \"50\", \"51\", \"51\", \"52\", \"52\", \"53\", \"53\", \"54\", \"54\", \"55\", \"55\", \"56\", \"56\", \"57\", \"57\", \"58\", \"58\", \"59\", \"59\", \"60\", \"60\", \"61\", \"61\", \"62\", \"62\", \"63\", \"63\", \"64\", \"64\", \"65\", \"65\", \"66\", \"66\", \"67\", \"67\", \"68\", \"68\", \"69\", \"69\", \"70\", \"70\", \"71\", \"71\", \"72\", \"72\", \"73\", \"73\", \"74\", \"74\", \"75\", \"75\", \"76\", \"76\", \"77\", \"77\", \"78\", \"78\", \"79\", \"79\", \"80\", \"80\", \"81\", \"81\", \"82\", \"82\", \"83\", \"83\", \"84\", \"84\", \"85\", \"85\", \"86\", \"86\", \"87\", \"87\", \"88\", \"88\", \"89\", \"89\", \"90\", \"90\", \"91\", \"91\", \"92\", \"92\", \"93\", \"93\", \"94\", \"94\", \"95\", \"95\", \"96\", \"96\", \"97\", \"97\", \"98\", \"98\", \"99\", \"99\", \"100\", \"100\", \"101\", \"101\", \"102\", \"102\", \"103\", \"103\", \"104\", \"104\", \"105\", \"105\", \"106\", \"106\", \"107\", \"107\", \"108\", \"108\", \"109\", \"109\", \"110\", \"110\", \"111\", \"111\", \"112\", \"112\", \"113\", \"113\", \"114\", \"114\", \"115\", \"115\", \"116\", \"116\", \"117\", \"117\", \"118\", \"118\", \"119\", \"119\", \"120\", \"120\", \"121\", \"121\", \"122\", \"122\", \"123\", \"123\", \"124\", \"124\", \"125\", \"125\", \"126\", \"126\", \"127\", \"127\", \"128\", \"128\", \"129\", \"129\", \"130\", \"130\", \"131\", \"131\", \"132\", \"132\", \"133\", \"133\", \"134\", \"134\", \"135\", \"135\", \"136\", \"136\", \"137\", \"137\", \"138\", \"138\", \"139\", \"139\", \"140\", \"140\", \"141\", \"141\", \"142\", \"142\", \"143\", \"143\", \"144\", \"144\", \"145\", \"145\", \"146\", \"146\", \"147\", \"147\", \"148\", \"148\", \"149\", \"149\", \"150\", \"150\", \"151\", \"151\", \"152\", \"152\", \"153\", \"153\", \"154\", \"154\", \"155\", \"155\", \"156\", \"156\", \"157\", \"157\", \"158\", \"158\", \"159\", \"159\", \"160\", \"160\", \"161\", \"161\", \"162\", \"162\", \"163\", \"163\", \"164\", \"164\", \"165\", \"165\", \"166\", \"166\", \"167\", \"167\", \"168\", \"168\", \"169\", \"169\", \"170\", \"170\", \"171\", \"171\", \"172\", \"172\", \"173\", \"173\", \"174\", \"174\", \"175\", \"175\", \"176\", \"176\", \"177\", \"177\", \"178\", \"178\", \"179\", \"179\", \"180\", \"180\", \"181\", \"181\", \"182\", \"182\", \"183\", \"183\", \"184\", \"184\", \"185\", \"185\", \"186\", \"186\", \"187\", \"187\", \"188\", \"188\", \"189\", \"189\", \"190\", \"190\", \"191\", \"191\", \"192\", \"192\", \"193\", \"193\", \"194\", \"194\", \"195\", \"195\", \"196\", \"196\", \"197\", \"197\", \"198\", \"198\", \"199\", \"199\", \"200\", \"200\", \"201\", \"201\", \"202\", \"202\", \"203\", \"203\", \"204\", \"204\", \"205\", \"205\", \"206\", \"206\", \"207\", \"207\", \"208\", \"208\", \"209\", \"209\", \"210\", \"210\", \"211\", \"211\", \"212\", \"212\", \"213\", \"213\", \"214\", \"214\", \"215\", \"215\", \"216\", \"217\", \"217\", \"218\", \"218\", \"219\", \"219\", \"220\", \"220\", \"221\", \"221\", \"222\", \"222\", \"223\", \"223\", \"224\", \""
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1 0 0 2'\nassert solution(stdin) == '1 0 0 2 0 1 0'\nassert solution(stdin) == '0 0 0 2 0 1 0'\nassert solution(stdin) == '0 0 0 2 0 1 0 2'\nassert solution(stdin) == '1 0 0 2 0 1 0 2'\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0'\n\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(str(0)) == '0', \"0 not passed\"\nassert solution(str(1)) == '1', \"1 not passed\"\nassert solution(str(1)) == '0', \"1 not passed\""
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"111\") == '1'\nassert solution(\"011\") == '0'\nassert solution(\"100\") == '1'\nassert solution(\"101\") == '1'\nassert solution(\"1111\") == '1'\n\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^4\n0 <= stdin[i] <= 9\n\nTime Limit: 1 seconds\n\nExample Limits:\n    1 <= stdin.length <= 10^4\n    1 <= stdin[i] <= 9\n    1 <= digits in stdin[i] <= 9\n    1 <= digits in stdin[i] <= 9\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\n\n\n-----Constraints-----\n1 <= stdin.length <= 200\n1 <= stdin[i] <= 10\n\n\n-----Time complexity-----\nO(n)\n\n\n-----Space Complexity-----\nO(1)\n\n\n-----Bug Fixes-----\nOriginal input is not in the required format. The first line contains an integer.\nSecond line contains a single character.\nThird line contains one character.\nFourth line contains one character.\n\nO(n)"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"001\") == \"0\", \"solution() should return 0 when the input is correct.\"\nassert solution(\"0010001\") == \"1\", \"solution() should return 1 when the input is correct.\"\nassert solution(\"0101\") == \"1\", \"solution() should return 1 when the input is correct.\"\nassert solution(\"0001101\") == \"0\", \"solution() should return 0 when the input is correct.\"\nassert solution(\"1110111\") == \"0\", \"solution() should return 0 when the input is correct.\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0) == \"0\"\nassert solution(1) == \"1\"\nassert solution(2) == \"0\"\nassert solution(3) == \"1\"\nassert solution(4) == \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0) == 1\nassert solution(1) == 0\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"0\"\n) == \"0\"\nassert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"0\"\n) == \"1\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 0\") == \"No\"\nassert solution(\"1 1\") == \"Yes\""
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('1000 5 100') == 'No'\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1000 5 400\") == \"No\"\nassert solution(\"1000 300000\") == \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"100 1000\") == \"Yes\"\nassert solution(\"1 100\") == \"Yes\"\nassert solution(\"100 1\") == \"No\"\nassert solution(\"1 1\") == \"No\"\nassert solution(\"1000 10000\") == \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"20000 20000 20000 20000 20000 20000 20000\") == \"Yes\"\nassert solution
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"Yes\"\nassert solution(\"4 3 4\") == \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('1000 0 80') == 'No'"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 10 5\") == \"Yes\"\nassert solution(\"5 8 10\") == \"No\"\nassert solution(\"7 100 5\") == \"No\"\nassert solution(\"7 10 100\") == \"Yes\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('25') == 'Yes'\nassert solution('1800') == 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 'Yes' or solution(inp) == 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(    \"84 97 66\") == \"No\"\nassert solution(    \"79 89 11\") == \"Yes\"\nassert solution(    \"61 59 7\") == \"Yes\"\nassert solution(    \"7\") == \"Yes\"\nassert solution(    \"7\") == \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'Yes'\n\n\"\"\"\n\nimport sys\nsys.stdin = open(\"input.txt\",\"r\")"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"A_{1, 1} A_{1, 2} A_{1, 3}\") == \"Yes\"\nassert solution(\"A_{2, 1} A_{2, 2} A_{2, 3}\") == \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"84 97 66\"\n) == \"Yes\"\nassert solution(\n    \"79 89 11\"\n) == \"Yes\"\nassert solution(\n    \"61 59 7\"\n) == \"No\"\nassert solution(\n    \"7\"\n) == \"No\"\nassert solution(\n    \"89\"\n) == \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"A_{1, 1} A_{1, 2} A_{1, 3}\") == \"Yes\"\nassert solution(\"A_{2, 1} A_{2, 2} A_{2, 3}\") == \"No\"\nassert solution(\"A_{3, 1} A_{3, 2} A_{3, 3}\") == \"No\"\nassert solution(\"A_{1, 1} A_{1, 2} A_{1, 3}\") == \"No\"\nassert solution(\"A_{2, 1} A_{2, 2} A_{2, 3}\") == \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5,5) == 'Yes','solution(5,5) is not \"Yes\"!'\nassert solution(5,3) == 'Yes','solution(5,3) is not \"Yes\"!'\nassert solution(5,4) == 'No','solution(5,4) is not \"No\"!'\nassert solution(10,7) == 'Yes','solution(10,7) is not \"Yes\"!'\nassert solution(10,8) == 'No','solution(10,8) is not \"No\"!'"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"83 97 66\") == \"No\"\nassert solution(\"79 89 11\") == \"Yes\"\nassert solution(\"61 59 7\") == \"No\"\nassert solution(\"7\") == \"No\"\nassert solution(\"89\") == \"No\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 30\n\n-----Constraints-----\n 1\n 1 \\leq N \\leq 10^6\n 1 \\leq M \\leq 10^4\n 1 \\leq A_i \\leq 10^4\n\n-----Input-----\nInput is given from STDIN.\n\n-----Output-----\nPrint the maximum number of days Takahashi can hang out during the vacation, or -1.\n\n-----Sample Input-----\n10\n5\n\n-----Sample Output-----\n1\n\nFor example, he can do the first assignment on the first 5 days, hang out on the next 30 days, and do the second assignment on the last 6 days of the vacation. In this way, he can safely spend 30 days hanging out.\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 7\",\n    \"6 4 5 3 4 3 2 4 1\"\n) == \"30\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 30\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 30\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n        [\n        ['5', '6'],\n        ['4', '5', '6'],\n        ['3', '5', '6'],\n        ['2', '6'],\n        ['1', '2', '3', '4', '5', '6']\n      ]\n) == '30'"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 30\n\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    A=\n    [\"5\", \"6\"]\n    )\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"2 1 1 1\") == \"2\"\nassert solution(\"4 3 5 7\") == \"2\"\nassert solution(\"5 3 7\") == \"2\"\nassert solution(\"2 2 4\") == \"2\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\n    5,\n) == \"30\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\")\"\n)\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\\\"\\\"\\\"\n  D 1\n  N 5\n  \\\"\\\"\\\") == 5\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \n    D\n    N\n) == \"5\"\n'''\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 5\nprint(\"Sample Input:\")\nprint(\"0 5\")\nprint(\"Sample Output:\")\nprint(\"5\")\nprint(\"Explanation:\")\nprint(\"5 = 1 + 2 + 3 + 4 + 5\")"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 5\n\n'''\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 5\") == 5\nassert solution(\"10 3\") == 11\nassert solution(\"1\") == 1\nassert solution(\"4\") == 4\nassert solution(\"2\") == 2\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4) == 5\nassert solution(4) == 5\nassert solution(4) == 5\nassert solution(4) == 5\nassert solution(4) == 5\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"5\", \"2\", \"5\"]) == \"5\"\nassert solution([\"5\", \"4\", \"5\"]) == \"5\"\nassert solution([\"5\", \"5\"]) == \"5\"\nassert solution([\"5\", \"5\", \"5\"]) == \"5\"\nassert solution([\"5\", \"6\", \"5\"]) == \"5\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '5'\nassert solution(input()) == '5'\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0,0) == 1\nassert solution(1,1) == 5\nassert solution(2,1) == 2\nassert solution(3,2) == 1\nassert solution(4,2) == 3\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '2'"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 6\n\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"./day-1/in1.txt\") == \"2\"\nassert solution(\"./day-1/in2.txt\") == \"2\"\nassert solution(\"./day-1/in3.txt\") == \"2\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"0 3\") == \"3\"\nassert solution(\"1 4\") == \"4\"\nassert solution(\"1 5\") == \"5\"\nassert solution(\"0 6\") == \"6\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '4'\nassert solution(input()) == '5'\nassert solution(input()) == '8'\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 6\nassert solution(input()) == 2\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 9 5\") == \"2\"\nassert solution(\"10\") == \"1\"\nassert solution(\"20\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"4 5\") == \"1\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('4') == 2\nassert solution('7') == 7"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"./input.txt\") == \"3 3 1 2\"\nassert solution(\"123\") == \"3 3 1 2\"\nassert solution(\"3423\") == \"3 3 1 2\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"3 2 1\"\n'''"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == [\"3\", \"1\", \"2\"]\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3 1 2'\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 1\") == \"3 1 2\"\nassert solution(\"1 4 2\") == \"1 2 4\"\nassert solution(\"3 3 3\") == \"3 3 3\"\nassert solution(\"3 3 3 3\") == \"3 3 3 3\"\nassert solution(\"1 1\") == \"1 1\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"2 3 1\"\n\n\n'''"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"1 3 2 1 2\"\nassert solution(\"3 3\") == \"3 1 2\"\nassert solution(\"3 3 3 3\") == \"1 3 3 3\"\n\n'''"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0) == \"1 2 3\"\nassert solution(1) == \"1 3 2\"\nassert solution(2) == \"2 3 1\"\nassert solution(3) == \"2 1 3\"\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 3, [2, 1, 3]) == [3, 1, 2]\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == [\"3\", \"1\", \"2\"]\n\nfor test case, the student number A_i is recorded in the output.\nThe first student number entered the classroom, thus there are 4 students.\nThe second student number entered the classroom, thus there are 1 students.\nThe third student number entered the classroom, thus there are 2 students.\nThe fourth student number entered the classroom, thus there are 1 students.\n\nSample Output\n\"1 1 2\"\n\"2 2 1\"\n\"3 3 1\"\n\"3 3 1\"\n\n-----Sample Input-----\n3\n2 3 1\n\n-----Sample Output-----\n3 1 2\n\nFirst, student number 3 entered the classroom.\nThen, student number 1 entered the classroom.\nFinally, student number 2 entered the classroom.\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"9\""
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '12345'\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 7 100 12\") == \"11\"\nassert solution(\"10 7 100 123\") == \"1234\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1 5\") == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"9\""
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 2\") == \"4\"\nassert solution(\"1 5 3\") == \"9\"\nassert solution(\"1 6 4\") == \"15\"\nassert solution(\"5 1 5\") == \"2\"\nassert solution(\"10 2 3 4 5 6 7 8 9\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"incorrect input\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 10\") == \"1\"\nassert solution(\"4 5 4\") == \"4\"\nassert solution(\"6 6 6\") == \"6\"\nassert solution(\"7 8 7\") == \"7\"\nassert solution(\"8 9 8\") == \"8\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"12345\") == \"12345\"\nassert solution(\"10 3 7\") == \"10\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    ['10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10 7 100',\n    '10"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('12345') == 123485\nassert solution('97') == 97\nassert solution('100') == 100\nassert solution('10') == 10\nassert solution('123') == 1234\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    ['4', '150', '140', '100', '200']) == 2\nassert solution(\n    ['2', '150', '140', '100', '200']) == 2\nassert solution(\n    ['1', '150', '140', '100', '200']) == 1\nassert solution(\n    ['3', '150', '140', '100', '200']) == 3\nassert solution(\n    ['1', '150', '140', '100', '200']) == 3\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1, 1, 2, 2, 2, 3, 3, 4, 4, 4\") == \"2\"\nassert solution(\"10, 10, 10, 10, 10, 10, 10, 10, 10, 10\") == \"1\"\nassert solution(\"1, 1, 1, 1, 1, 1, 1, 1, 1, 1\") == \"0\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 6 2\") == \"5\"\n\nassert solution(\"1 2\") == \"1\"\n\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('0 1 3 6 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '3'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 3 6 7 8 9') == '3'\nassert solution('2 4 3 6 7 8 9') == '2'\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"Your solution does not work\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, 6) == 2, \"incorrect solution\"\nassert solution(3, 3) == 2, \"incorrect solution\"\nassert solution(0, 1) == 1, \"incorrect solution\"\nassert solution(2, 3) == 3, \"incorrect solution\"\nassert solution(1, 4) == 1, \"incorrect solution\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '15'\nassert solution
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(test_input) == \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 1') == 'Yes', 'failed'\nassert solution('1 2') == 'No', 'failed'\nassert solution('4 6') == 'No', 'failed'\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 'Yes'\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 4 2 1\") == \"Yes\"\nassert solution(\"2 3 6\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\nassert solution(\"1 1 2\") == \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"5 1\") == \"No\"\nassert solution(\"5 4 1\") == \"No\"\nassert solution(\"1 1\") == \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 1 1 1 1 1 1\") == \"No\"\nassert solution(\"1 2 1 2 2 1 1 1 1\") == \"No\"\nassert solution(\"2 2 2 2 2 2 2 2 2\") == \"No\"\nassert solution(\"3 3 3 3 3 3 3 3 3\") == \"No\"\nassert solution(\"4 4 4 4 4 4 4 4 4\") == \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n        input()) == 'Yes'\nassert solution(\n        input()) == 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5\",\"2\",\"3\",\"1\"]) == \"Yes\"\nassert solution([\"4\",\"2\",\"1\",\"3\"]) == \"No\"\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 4 2 1\") == \"Yes\"\nassert solution(\"4 1\") == \"No\"\nassert solution(\"2 3 6 5\") == \"Yes\"\nassert solution(\"1 7 4 9\") == \"Yes\"\nassert solution(\"4 3 6 5 7\") == \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 'Yes'\n\"\"\"\n\n\"\"\"\nVersion 2\n\nPrint Yes if the first line contains a number greater than the second.\nPrint No otherwise.\n\n-----Constraints-----\n - 1 \\leq M \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n - A_i are distinct.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1... A_N\n\n-----Output-----\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Sample Input-----\n5 3\n1 2\n2 1 3 1 1 2 1 2\n\n-----Sample Output-----\nNo\n\nThere were 4 votes in total. The first and second popular items received 3 votes, and we can select it."
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"5\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3 2\") == \"5\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"Not a solution\"\nassert solution(stdin) == \"5\", \"Not a solution\""
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == '5'\n\n-----Explanation-----\nThe value of K is always greater than or equal to 2.\n\nLogic\n- 1. A, B, C, D (where A, B, C and D are white)\n- 2. A^2 + B^2 + C^2 + D^2 = H\n- 3. A^2 + 2B^2 + C^2 + 2D^2 = HW\n- 4. A^2 + B^2 + D^2 + 2C^2 = H^2\n- 5. A^2 + B^2 + C^2 + D^2 + 2C^2 = H^2 + HW\n- 6. A^2 + B^2 + D^2 + 2C^2 + 2D^2 = H^2 + HW + 2D^2 + 2C^2\n- 7. A^2 + B^2 + C^2 + 2C^2 + 2D^2 + 2D^2 = H^2 + HW + 2D^2\n- 8. A^2 + B^2 + D^2 + 2C^2 + 2C^2 + 2D^2 + 2D^2 + 2D^2\n- 9. A^2 + B^2 + D^2 + 2D^2 + 2D^2 + 2D^2 + 2D^2 + 2D^2\n\nH^2 + 2D^2 + 2D^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2\nH^2 + 2D^2 + 2D^2 + 2D^2"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 1 1 1') == 5\nassert solution('1 1 1 1#') == 6\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3 2\") == 5\nassert solution(\"1 1 1\") == 1\nassert solution(\"1 1 1\") == 2\nassert solution(\"1 1 1\") == 1\nassert solution(\"1 1 1\") == 2\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"2 3 2 4 4 5 5 6 6 6 7 7 8 8 9 9 10 10 10 11 11 11 12 12 12 13 13 14 15 16 15 17 16 18 19 20 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 114 115 116 117 118 119 120 121 121 122 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 136 137 138 139 140 141 142 143 143 144 143 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\nassert solution(\"..#\") == \"..#\"\nassert solution(\"#####\") == \"####\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 5"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2020 2040\") == \"2\"\nassert solution(\"2020 2021\") == \"2\"\nassert solution(\"2020 2022\") == \"2\"\nassert solution(\"2020 2024\") == \"2\"\nassert solution(\"2020 2025\") == \"1\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2020 2040\", \"2020 2040\"]) == \"2\"\nassert solution([\"2020 2040\", \"2020 2040\", \"2020 2040\"]) == \"2\"\nassert solution([\"2020 2040\", \"2020 2040\", \"2020 2040\", \"2020 2040\"]) == \"2\"\nassert solution([\"2020 2040\", \"2020 2040\", \"2020 2040\", \"2020 2040\"]) == \"2\"\nassert solution([\"2020 2040\", \"2020 2040\", \"2020 2040\", \"2020 2040\", \"2020 2040\"]) == \"2\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"a\" + \"c\") == \"c\"\nassert solution(\"abc\") == \"a\"\nassert solution(\"abcdef\") == \"b\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"z\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz0123456789\") == \"h\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\"2020 2040\", \"2041 2000\", \"2042 2007\", \"2043 1234\"]) == \"2\"\nassert solution(\n    [\"2020 2000\", \"2041\", \"2042\", \"2043\"]) == \"2\"\nassert solution(\n    [\"2020\", \"2041\", \"2042\"]) == \"2\"\nassert solution(\n    [\"2020\", \"2041\", \"2042\", \"2043\", \"2044\"]) == \"2\"\nassert solution(\n    [\"2020\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\"]) == \"2\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"12 4\") == \"9\"\nassert solution(\"13\") == \"6\"\nassert solution(\"4 5\") == \"1\"\nassert solution(\"2 3 4\") == \"0\"\nassert solution(\"2 3 4 5\") == \"6\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2020 2040\") == 2\nassert solution(\"2020 2040 0001 0001\") == 4\nassert solution(\"2020 2040 2021\") == 3\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"(2020 2040)\") == \"2\"\nassert solution(\"(2020 2040) 2\") == \"2\"\nassert solution(\"(2020 2040) (2020 2040)\") == \"2\"\nassert solution(\"(2020 2040) (2020 2040) 2\") == \"2\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 'AC'\nassert solution(input) == 'WA'\nassert solution(input) == 'WA'\nassert solution(input) == 'WA'\nassert solution(input) == 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AA\") == \"WA\"\nassert solution(\"AtCoder\") == \"WA\"\nassert solution(\"Cz\") == \"AC\"\nassert solution(\"ATC\") == \"AC\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"ATCoder\") == \"AC\"\nassert solution(\"ATCA\") == \"WA\"\nassert solution(\"ATC\") == \"WA\"\nassert solution(\"ATC\") == \"WA\"\nassert solution(\"ATC\") == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\\\"AaBbCc\\\") == \"AC\"\nassert solution(\\\"aCbBbCc\\\") == \"WA\"\nassert solution(\\\"aCbBbCcAa\\\") == \"WA\"\nassert solution(\\\"aCbBbCcAaCb\\\") == \"WA\"\nassert solution(\\\"aCbBbCcAaCbCc\\\") == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('aC') == 'WA'\nassert solution('A') == 'AC'\nassert solution('cA') == 'AC'\nassert solution('AC') == 'WA'\nassert solution('aC') == 'AC'\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"AtCoder\") == \"WA\"\nassert solution(\"ATCG\") == \"AC\"\nassert solution(\"ATCoder\") == \"WA\"\nassert solution(\"ATCoderATC\") == \"AC\"\nassert solution(\"ATCoderATCACC\") == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(string) == \"WA\"\nassert solution(string) == \"WA\"\nassert solution(string) == \"WA\"\nassert solution(string) == \"WA\"\nassert solution(string) == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"AC\")) == \"WA\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('abcde') == 'WA'\nassert solution('aaaabcde') == 'WA'\nassert solution('abacd') == 'WA'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"CAB\") == \"WA\"\nassert solution(\"AaBcCdEfF\") == \"WA\"\nassert solution(\"aba\") == \"WA\"\nassert solution(\"aac\") == \"WA\"\nassert solution(\"abcdeef\") == \"WA\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2', \"The string after 5 \\times 10^{15} days is not a valid string\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"The input is not correct\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1214) == 2\nassert solution(12321) == 2\nassert solution(121412321) == 2\nassert solution(1231234) == 2\nassert solution(1212321) == 2\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5125) == 2\nassert solution(1304) == 2\nassert solution(1189) == 3\nassert solution(1611) == 5\nassert solution(2475) == 10\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1324\", \"1234\", \"12345\", \"124\", \"1234\", \"1223\", \"1122\", \"2234\", \"22\", \"22\", \"22\", \"23\", \"23\", \"23\", \"23\", \"23\"]) == \"23\"\nassert solution([\"1324\", \"1234\", \"12345\", \"124\", \"1234\", \"1223\", \"1122\", \"2234\", \"22\", \"22\", \"22\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\"]) == \"2\""
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1214) == 2, \"1214 is wrong\"\nassert solution(4) == 2, \"4 is wrong\"\nassert solution(0) == '', \"0 is wrong\"\nassert solution(1324) == '4', \"1324 is wrong\"\nassert solution(1324) == '1', \"1324 is wrong\""
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"11231231211\") == 22\nassert solution(\"1231211\") == 5\nassert solution(\"1231211\") == 8\nassert solution(\"1223\") == 3\nassert solution(\"23123\") == 6\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input=\n    \"5 2 3 4 1\"\n) == \"YES\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"YES\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"5 4 1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    input=\n    \"5 2 3 4 1\"\n) == \"YES\"\nassert solution(\n    input=\n    \"5 2 3 4 1\"\n) == \"NO\"\n\nAssume p is a permutation of {1,\\ 2,\\...,\\ N}.\nassert solution(\n    input=\n    \"5 2 3 4 1\"\n) == \"NO\"\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 5 2 3 4 1\") == \"YES\"\nassert solution
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('aabbbcc') == 'abcd'\nassert solution('abcd') == 'cba'\nassert solution('abcde') == 'cba'\nassert solution('abcde') == 'bcd'\nassert solution('cba') == 'abc'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('{1,\\ 2,\\ 3,\\ 4,\\ 5,\\ 6,\\ 7,\\ 8,\\ 9}') == 'YES'\nassert solution('{1,\\ 3,\\ 5,\\ 7,\\ 9}') == 'NO'\nassert solution('{1,\\ 5,\\ 7,\\ 9}') == 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"5 2 3 4 2\") == \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\nassert solution('5 4 3 1') == 'NO'\nassert solution('5 1 4 3') == 'YES'"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '33'\nassert solution(stdin) == '4'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"33\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"33\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3121) == 2\nassert solution(6) == 1\nassert solution(1000000000000000000000000000000000) == 33\nassert solution(201920181) == 4\n\n'''"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"24\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"0\") == \"2\"\nassert solution(\"1000000000000000000000000000000000\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('521') == 5\nassert solution('21') == 4\nassert solution('1') == 3\nassert solution('6') == 2\nassert solution('01') == 2\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"33\"\n\n\n------Examples------\n\ninput:\n3121\n\noutput:\n2\n\nInput:\n6\n\noutput:\n1\n\nInput:\n1000000000000000000000000000000000\n\noutput:\n33\n\nInput:\n201920181\n\noutput:\n4\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '33'\n\"\"\""
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 2\n\n\n'''"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\n\nassert solution(stdin) == \"2\""
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\n\nInput\n5\n1 2 3 4 5\n2 4 7 11 3\n\nOutput\n2\n\nInput\n3\n13 37 39\n1 2 3\n\nOutput\n2\n\nInput\n4\n0 0 0 0\n1 2 3 4\n\nOutput\n0\n\nInput\n3\n-6 -12 6\n\nOutput\n3\n\n\n-----Note-----\n\nIn the first example, we may choose $d = -2$, so we can choose any $d = -\\frac{1}{13}$.\n\nIn the second example, we may choose $d = -\\frac{1}{11}, so we cannot obtain any zero in array $c$.\n\nIn the third example, we may choose $d = 6$, so we can obtain any zero in array $c$.\n\nIn the fourth example, we may choose $d = 6$, so we cannot obtain any zero in array $c$.\n\nWe can obtain one zero from array $c$, so we can calculate the number of zeroes in $c$.\n\n\"\"\""
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 2\\n1 2 3 4\\n5\\n3 2\\n3 2 3 4\\n5\\n3 2\\n4 2 3\\n3\\n2 3\\n5\\n7\\n\") == \"2\"\nassert solution(\"5\\n1 2 -1\\n2 2 3\\n5\\n1 2 3\\n4 2\\n3 2\\n2 3\\n1 2 3\\n4 2\\n5\\n\") == \"2\"\nassert solution(\"2\\n6\\n5\\n4\\n6\\n4\\n5\\n6\\n\") == \"3\"\nassert solution(\"4\\n1 0 0 0\\n4\\n2 3\\n1 2\\n1 2\\n4\\n2 3\\n2\\n3 2\\n4\\n2\\n\") == \"3\"\nassert solution(\"3\\n0 0 0 0\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"3\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == str(2)\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= b_i <= 10^9\n\n-----Time Limit-----\nYou can assume that both inputs are well formed.\n\nSample 1:\nInput:\n5\n1 2 3 4 5\n2 4 7 11 3\n\nOutput:\n2\n\nSample 2:\nInput:\n3\n13 37 39\n1 2 3\n\nOutput:\n0\n\nSample 3:\nInput:\n4\n0 0 0 0\n1 2 3 4\n\nOutput:\n0\n\n-----Solution-----\nRuntime: 28 ms, faster than 84.88% of Python3 online submissions for Maximum Number of Zeros.\nMemory Usage: 14.2 MB, less than 33.11% of Python3 online submissions for Maximum Number of Zeros.\n\"\"\"\n\nclass Solution:\n    def countZeroes(self, n: int) -> int:\n        count_zeros = 0\n        for i in range(n):\n            if n % i == 0:\n                count_zeros += 1\n        return count_zeros\n        pass\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"4\"\nassert solution(\"2 1\") == \"3\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"0 0 0\") == \"1\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"2 4 7 11 3\") == \"0\"\nassert solution(\"2 -1 -6\") == \"-2\"\nassert solution(\"3 0 0 0 0\") == \"0\"\nassert solution(\"3 0 0 0 0\") == \"-3\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1f3f\") == 5\nassert solution(\"1ff\") == 6\nassert solution(\"aabbccddee\") == 5\nassert solution(\"aabbbccda\") == 4\nassert solution(\"abcdefghij\") == 7\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 10, \"failed\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10\") == 5\nassert solution(\"7\") == 5\nassert solution(\"9\") == 5\nassert solution(\"10\") == 5\nassert solution(\"9\") == 5\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 5\nassert solution(stdin) == 7\nassert solution(stdin) == 10\nassert solution(stdin) == 11\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 22\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"10\",\n    \"codeforces\"\n) == \"5\"\nassert solution(\n    \"7\",\n    \"dodivthree\"\n) == \"5\"\nassert solution(\n    \"9\",\n    \"bambarbia\"\n) == \"10\"\nassert solution(\n    \"10\",\n    \"hellocode\"\n) == \"10\"\nassert solution(\n    \"9\",\n    \"bambarbia\"\n) == \"9\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10\") == 5\nassert solution(\"7\") == 7\nassert solution(\"9\") == 2\nassert solution(\"10\") == 6\nassert solution(\"3\") == 3\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == [\"4\", \"5\", \"4\"]\nassert solution(stdin) == [\"2\", \"3\", \"4\", \"3\"]\nassert solution(stdin) == [\"1\", \"2\", \"1\"]\nassert solution(stdin) == [\"2\", \"1\", \"3\"]\nassert solution(stdin) == [\"4\", \"1\", \"3\", \"1\", \"1\", \"2\"]\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution == 3\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 2 3 2 3\") == \"2 3\"\nassert solution(\"4 2 3 4 4\") == \"2 3 4\"\nassert solution(\"2 3 1 2 3\") == \"3\"\nassert solution(\"3 2 3 2 2\") == \"3\"\nassert solution(\"4 3 2 3\") == \"3\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 5 2 1 3 4 1 3\") == \"3 3 4\"\nassert solution(\"10 5 -3 2 1 3 4 1 3\") == \"3 1 2\"\nassert solution(\"3 2 -1 -2 -3 -4 -5 -6\") == \"6 5 6\"\nassert solution(\"4 5 -4 -4 -4 -4 -4\") == \"4 2 4\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4 4\"\n\nassert solution(stdin) == \"5 5\"\n\nassert solution(stdin) == \"6 6\"\n\nassert solution(stdin) == \"7 7\"\n\nassert solution(stdin) == \"8 8\""
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3 1 2 2 1 5 3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2 3 4 5'\nassert solution('4 1 2 2 1 5 3') == '3 1 2 2 1 5 3'\nassert solution('4 1 2 2 1 5 3') == '2 1 2 2 1 5 3'\nassert solution('4 1 2 2 1 5 3') == '3 1 2 2 1 5 3'\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 4\"\n\n-----Constraints-----\n0 <= n <= 150\n\n-----Time Limit: 1 seconds (py3)-----\n\n-----Space Limit: 1 GB (py3)-----\n\nExample:\n\nInput:\n7\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n\nOutput:\n2 3\n\nExplanation:\n\n4 1 2 2 1 5 3\n\n2 3 4\n1 1 1\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n1 <= k <= 10^5\n\n1 <= stdin.length <= 10^5\n\n\n------Time complexity-----\nTime complexity of the below solution is O(n^2), where \u2018n\u2019 is the total number of pairs of numbers\nthat are not equal to 2. Since in this problem, we have two values $n$, $k$, each one has the space to store at least three values, so this space will be at most 2^k.\nSpace complexity of this function is O(n^2).\nTime complexity of this function is O(n).\n\n\"\"\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'\n\nassert solution(stdin) == '5'\n\nassert solution(stdin) == '0'\n\n----\nRuntime: 36 ms, faster than 97.26% of Python3 online submissions for Count Concatenation of Two Pairs.\nMemory Usage: 14.2 MB, less than 74.94% of Python3 online submissions for Count Concatenation of Two Pairs.\n\n\"\"\"\n\n\nclass Solution:\n    def countPairs(self, arr: List[int]) -> int:\n        l = len(arr)\n        count = 0\n        for i in range(l - 1):\n            for j in range(i + 1, l):\n                if arr[i] + arr[j] == arr[j] + arr[i]:\n                    count += 1\n        return count\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '0'\n\nassert solution(input()) == '7'\n\nassert solution(input()) == '12'\n\nassert solution(input()) == '0'\n\n\n-----Constraints-----\n1 <= k <= 10^5\n1 <= n <= 10^5\n0 <= a_i, a_j <= 10^9\n\nA = [a_1, a_2, \\dots, a_n]\n\n\"\"\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\u20181\u2019) == 0\nassert solution(\u20182\u2019) == 0\nassert solution(\u20183\u2019) == 0\nassert solution(\u20184\u2019) == 0\nassert solution(\u20185\u2019) == 0\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"7\"\nassert solution(input()) == \"12\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\n      [1, 2, 3],\n      [1, 3, 2],\n      [2, 3, 1],\n      [1, 2, 3],\n      [3, 1, 2],\n      [1, 2, 3]\n    ]\n) == 7\n\nassert solution(\n    [\n      [4, 2, 3],\n      [2, 3, 4],\n      [3, 4, 2],\n      [4, 2, 3]\n    ]\n) == 12\n\nassert solution(\n    [\n      [2, 3, 4],\n      [1, 2, 3],\n      [4, 3, 2],\n      [2, 3, 1],\n      [4, 2, 3]\n    ]\n) == 0\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"7\"\n\n\n-----Examples-----\nInput\n6 11\n45 1 10 12 11 7\n\nOutput\n7\n\nInput\n4 2\n2 78 4 10\n\nOutput\n12\n\nInput\n5 2\n3 7 19 3 3\n\nOutput\n0\n\nInput\n4 2\n3 7 19 3 3\n\nOutput\n0\n\n\"\"\"\n\n\nclass Solution:\n    def nConcatenationPairs(self, arr: list) -> int:\n        count = 0\n        for i in range(1, len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] + arr[j] in arr[i:j]:\n                    count += 1\n        return count\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '9'\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '9'\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 5 3\") == \"9\"\nassert solution(\"-1 -2 -3\") == \"-9\"\nassert solution(\"1 2 2 3 4 5\") == \"25\"\nassert solution(\"1 2 2 3 -4 -5\") == \"15\"\nassert solution(\"1 -1 -1\") == \"1\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"9\""
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"9\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 9\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == '9'\nassert solution(inp) == '7'"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution( \"3 5\" ) == \"9\"\nassert solution( \"3 -1 5\" ) == \"1\"\nassert solution( \"3 5 -1 5\" ) == \"1\"\nassert solution( \"3 5 -1 3 5\" ) == \"1\"\nassert solution( \"3 -1 -1 1\" ) == \"0\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 12, \"The maximum possible sum is not 12.\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 110\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('asdfasf') == 'asdfasdf'\nassert solution('asd') == 'asd'\nassert solution('asdf') == 'asdf'\nassert solution('asdf') == 'asdf'\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '110'\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '110'"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 110\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('{1, 3, 4, 7}'), '0'\nassert solution('{1, 3, 4}'), '1'\nassert solution('{1, 2, 3, 4}'), '3'\nassert solution('{1, 2}'), '3'\nassert solution('{1, 2, 1}'), '3'\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 110\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '110'\nassert solution(stdin) == ''\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '110'\nassert solution(input()) == '110'\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.word = \"\"\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n        \n    def insert(self, word: str) -> None:\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.word = word\n        \n    def search(self, word: str) -> bool:\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                return False\n            node = node.children[c]\n        return node.word == word\n        \n    def startsWith(self, prefix: str) -> bool:\n        node = self.root\n        for c in prefix:\n            if c not in node.children:\n                return False\n            node = node.children[c]\n        return True\n        \n\nclass Solution:\n    def maxScore(self, n: int, a: List[int], b: List[int], c: List[int], d: List[int]) -> str:\n        def dfs(node, curr):\n            curr += [n]\n            if curr == a:\n                return max(curr)\n            if curr == b:\n                return min(curr)\n            \n            if node.word:\n                if curr == a:\n                    return node.word\n                if curr == b:\n                    return node.word\n            \n            for c in c:\n                child = node.children.get(c, None)\n                if child:\n                    if dfs(child, curr):\n                        return curr\n                else:\n                    curr.append(c)\n            \n            curr.pop()\n        \n        answer = 0\n        for i in range(len(a)):\n            if dfs(a[i], a):\n                answer = max(answer, len(a[i]))\n        for i in range(len(b)):\n            if dfs(b[i], b):\n                answer = min(answer, len(b[i]))\n        for i in range(len(c)):\n            if dfs(c[i], c):\n                answer = max(answer, len(c[i]))\n        for i in range(len(d)):\n            if dfs(d[i], d):\n                answer = min(answer, len(d[i]))\n        return str(answer)"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    inp: \"3 4 3\"\n) == \"110\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n\n> Let S = the input sequence\n> Print the maximum absolute difference of two elements (with different indices) in S\n>\n> Print the maximum absolute difference of two elements (with different indices) in S\n>\n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n>"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    [\"5\", \"6\", \"3\", \"4\", \"7\", \"8\", \"9\", \"1\"]\n) == \"5\"\n\nassert solution(\n    [\"2\", \"3\", \"1\", \"5\", \"10\", \"12\", \"11\", \"14\", \"13\", \"15\", \"1\", \"2\"]\n) == \"10\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 4 3 1\") == 5\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 5"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 3\") == \"5\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 5"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('12345') == 5\nassert solution('567') == 7\nassert solution('6') == 8\nassert solution('0') == 0\nassert solution('1') == 0\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '5'\n\n\"\"\"\nclass Solution:\n    def maxAbsDifference(self, A: str) -> str:\n        A = A.split(\" \")\n        l = len(A)\n        a = 0\n        ans = 0\n        for i in range(l):\n            for j in range(i+1, l):\n                x = abs(int(A[i])-int(A[j]))\n                a = max(a,x)\n        return str(a)\n        pass\n\nassert Solution().maxAbsDifference(\"4 6 7\") == \"6\"\nassert Solution().maxAbsDifference(\"4 6 1\") == \"5\"\nassert Solution().maxAbsDifference(\"2 1 4\") == \"3\"\n\n\"\"\"\nTest 1\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 12\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '5'\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2.2761423749\"\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('', '') == '', \"solution() didn't return anything.\"\nassert solution('2', '1') == '2', \"solution() didn't return correct answer.\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2.2761423749\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"1 0 0\") == \"0.5\"\nassert solution(\"0 1 0\") == \"0.5\"\nassert solution(\"0 1 1\") == \"0.5\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2.2761423749\"\nassert solution(\"0 0\") == \"2.2761423749\"\nassert solution(\"1 0\") == \"2.2761423749\"\nassert solution(\"0 1\") == \"2.2761423749\"\nassert solution(\"1 1\") == \"1.4142135623730951\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2.2761423749\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(test_cases[0]) == '2.2761423749'\nassert solution(test_cases[1]) == '2.276142'\nassert solution(test_cases[2]) == '3'\nassert solution(test_cases[3]) == '3'\nassert solution(test_cases[4]) == '2'\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2.276142\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2.2761423749\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"1\") == \"2\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"2.2761423749\"\n\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2.2761423749\"\nassert solution(\"3 0 0\") == \"2.2761423749\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"15\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"12 4\") == \"4\"\nassert solution(\"12 4\") == \"4\"\nassert solution(\"12 5\") == \"2\"\nassert solution(\"12 6\") == \"4\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"12 4\") == \"4\"\nassert solution(\"13 7\") == \"3\"\nassert solution(\"5 6\") == \"5\"\nassert solution(\"1 3\") == \"4\"\nassert solution(\"12 5\") == \"3\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 4, \"The input was incorrect\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input:\n    str\n    ) == \"4\"\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 8\") == \"10\"\nassert solution(\"0 2\") == \"3\"\nassert solution(\"2 2\") == \"4\"\nassert solution(\"1 1\") == \"2\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(a=4, b=10) == 16\nassert solution(a=2, b=10) == 10"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\""
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == '3'\nassert solution(10) == '0'\nassert solution(10, 3) == '0'\nassert solution(10, 10) == '0'"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\n       3,\n       100\n    ]) == 3\nassert solution(\n    [\n       1\n    ]) == 0\nassert solution(\n    [\n       3,\n       11\n    ]) == 2\nassert solution(\n    [\n       1,\n       1\n    ]) == 2\nassert solution(\n    [\n       3,\n       11\n    ]) == 2\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"10000\"\n) == \"3\"\nassert solution(\n    \"1000000\"\n) == \"2\"\nassert solution(\n    \"16\"\n) == \"2\"\nassert solution(\n    \"10\"\n) == \"1\"\nassert solution(\n    \"19\"\n) == \"2\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1234) == \"F\"\nassert solution(1234) == \"F\"\nassert solution(1234) == \"F\"\nassert solution(1234) == \"F\"\nassert solution(1234) == \"F\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0\") == 3, \"0\"\nassert solution(\"3\") == 3, \"3\"\nassert solution(\"5\") == 3, \"5\"\nassert solution(\"53\") == 3, \"53\"\nassert solution(\"15\") == 3, \"15\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(n) == '3'\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 4\") == \"1\"\nassert solution(\n    \"2 1 3\") == \"2\"\nassert solution(\n    \"3 1 2 3\") == \"3\"\nassert solution(\n    \"2 3 2\") == \"3\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"2 1 3\", \"2 1 2 3\", \"2 3 2\"]) == \"1\"\nassert solution([\"3 1 2 3\", \"3 1 2\", \"3 2 2\"]) == \"3\"\nassert solution([\"3 1 2 3\", \"3 1 2\", \"3 2 2\"]) == \"1\"\nassert solution([\"2 3 2\"]) == \"2\"\nassert solution([\"3 2 2\"]) == \"3\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n2 1 3\\n2 3 2\\n2 3 2\\n3 1 2\\n3 1 2\\n3 2 2\\n\") == \"1\"\nassert solution(\"3 4\\n2 3 2\\n3 2\\n\") == \"3\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\n        [\"1 3\", \"3 1\", \"3 1 2\", \"3 1 3\", \"3 1 4\", \"3 1 5\", \"3 1 6\", \"3 1 7\", \"3 1 8\", \"3 1 9\", \"3 1 10\", \"3 1 11\", \"3 1 12\", \"3 1 13\", \"3 1 14\", \"3 1 15\", \"3 1 16\", \"3 1 17\", \"3 1 18\", \"3 1 19\", \"3 1 20\", \"3 1 21\", \"3 1 22\", \"3 1 23\", \"3 1 24\", \"3 1 25\", \"3 1 26\", \"3 1 27\", \"3 1 28\", \"3 1 29\", \"3 1 30\", \"3 1 31\", \"3 1 32\", \"3 1 33\", \"3 1 34\", \"3 1 35\", \"3 1 36\", \"3 1 37\", \"3 1 38\", \"3 1 39\", \"3 1 40\", \"3 1 41\", \"3 1 42\", \"3 1 43\", \"3 1 44\", \"3 1 45\", \"3 1 46\", \"3 1 47\", \"3 1 48\", \"3 1 49\", \"3 1 50\", \"3 1 51\", \"3 1 52\", \"3 1 53\", \"3 1 54\", \"3 1 55\", \"3 1 56\", \"3 1 57\", \"3 1 58\", \"3 1 59\", \"3 1 60\", \"3 1 61\", \"3 1 62\", \"3 1 63\", \"3 1 64\", \"3 1 65\", \"3 1 66\", \"3 1 67\", \"3 1 68\", \"3 1 69\", \"3 1 70\", \"3 1 71\", \"3 1 72\", \"3 1 73\", \"3 1 74\", \"3 1 75\", \"3 1 76\", \"3 1 77\", \"3 1 78\", \"3 1 79\", \"3 1 80\", \"3 1 81\", \"3 1 82\", \"3 1 83\", \"3 1 84\", \"3 1 85\", \"3 1 86\", \"3 1 87\", \"3 1 88\", \"3 1 89\", \"3 1 90\", \"3 1 91\", \"3 1 92\", \"3 1 93\", \"3 1 94\", \"3 1 95\", \"3 1 96\", \"3 1 97\", \"3 1 98\", \"3 1 99\", \"3 1 100\", \"3 1 101\", \"3 1 102\", \"3 1 103\", \"3 1 104\", \"3 1 105\", \"3 1 106\", \"3 1 107\", \"3 1 108\", \"3 1 109\", \"3 1 110\", \"3 1 111\", \"3 1 112\", \"3 1 113\", \"3 1 114\", \"3 1 115\", \"3 1 116\", \"3 1 117\", \"3 1 118\", \"3 1 119\", \"3 1 120\", \"3 1 121\", \"3 1 122\", \"3 1 123\", \"3 1 124\", \"3 1 125\", \"3 1 126\", \"3 1 127\", \"3 1 128\", \"3 1 129\", \"3 1 130\", \"3 1 131\", \"3 1 132\", \"3 1 133\", \"3 1 134\", \"3 1 135\", \"3 1 136\", \"3 1 137\", \"3 1 138\", \"3 1 139\", \"3 1 140\", \"3 1 141\", \"3 1 142\", \"3 1 143\", \"3 1 144\", \"3 1 145\", \"3 1 146\", \"3 1 147\", \"3 1 148\", \"3 1 149\", \"3 1 150\", \"3 1 151\", \"3 1 152\", \"3 1 153\", \"3 1 154\", \"3 1 155\", \"3 1 156\", \"3 1 157\", \"3 1 158\", \"3 1 159\", \"3 1 160\", \"3 1 161\", \"3 1 162\", \"3 1 163\", \"3 1 164\", \"3 1 165\", \"3 1 166\", \"3 1 167\", \"3 1 168\", \"3 1 169\", \"3 1 170\", \"3 1 171\", \"3 1 172\", \"3 1 173\", \"3 1 174\", \"3 1 175\", \"3 1 176\", \"3 1 177\", \"3 1 178\", \"3 1 179\", \"3 1 180\", \"3 1 181\", \"3 1 182\", \"3 1 183\", \"3 1 184\", \"3 1 185\", \"3 1 186\", \"3 1 187\", \"3 1 188\", \"3 1 189\", \"3 1 190\", \"3 1 191\", \"3 1 192\", \"3 1 193\", \"3 1 194\", \"3 1 195\", \"3 1 196\", \"3 1 197\", \"3 1 198\", \"3 1 199\", \"3 1 200\", \"3 1 201\", \"3 1 202\", \"3 1 203\", \"3 1 204\", \"3 1 205\", \"3 1 206\", \"3 1 207\", \"3 1 208\", \"3 1 209\", \"3 1 210\", \"3 1 211\", \"3 1 212\", \"3 1 213\", \"3 1 214\", \"3 1 215\", \"3 1 216\", \"3 1 217\", \"3 1 218\", \"3 1 219\", \"3 1 220\", \"3 1 221\", \"3 1 222\", \"3 1 223\", \"3 1 224\", \"3 1 225\", \"3 1 226\", \"3 1 227\", \"3 1 228\", \"3 1 229\", \"3 1 230\", \"3 1 231\", \"3 1 232\", \"3 1 233\", \"3 1 234\", \"3 1 235\", \"3 1 236\", \"3 1 237\", \"3 1 238\", \"3 1 239\", \"3 1 240\", \"3 1 241\", \"3 1 242\", \"3 1 243\", \"3 1 244\", \"3 1 245\", \"3 1 246\", \"3 1 247\", \"3 1 248\", \"3 1 249\", \"3 1 250\", \"3 1 251\", \"3 1 252\", \"3 1 253\", \"3 1 254\", \"3 1 255\", \"3 1 256\", \"3 1 257\", \"3 1 258\", \"3 1 259\", \"3 1 260\", \"3 1 261\", \"3 1 262\", \"3 1 263\", \"3 1 264\", \"3 1 265\", \"3 1 266\", \"3 1 267\", \"3 1 268\", \"3 1 269\", \"3 1 270\", \"3 1 271\", \"3 1 272\", \"3 1 273\", \"3 1 274\", \"3 1 275\", \"3 1 276\", \"3 1 277\", \"3 1 278\", \"3 1 279\", \"3 1 280\", \"3 1 281\", \"3 1 282\", \"3 1 283\", \"3 1 284\", \"3 1 285\", \"3 1 286\", \"3 1 287\", \"3 1 288\", \"3 1 289\", \"3 1 290\", \"3 1 291\", \"3 1 292\", \"3 1 293\", \"3 1 294\", \"3 1 295\", \"3 1 296\", \"3 1 297\", \"3 1 298\", \"3 1 299\", \"3 1 300\", \"3 1 301\", \"3 1 302\", \"3 1 303\", \"3 1 304\", \"3 1 305\", \"3 1 306\", \"3 1 307\", \"3 1 308\", \"3 1 309\", \"3 1 310\", \"3 1 311\", \"3 1 312\", \"3 1 313\", \"3 1 314\", \"3 1 315\", \"3 1 316\", \"3 1 317\", \"3 1 318\", \"3 1 319\", \"3 1 320\", \"3 1 321\", \"3 1 322\", \"3 1 323\", \"3 1 324\", \"3 1 325\", \"3 1 326\", \"3 1"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"3 4\", \"2 1 3\", \"2 3 2\", \"2 1 2 3\", \"2 3 2\"]) == \"1\"\nassert solution([\"3 4\", \"2 1 3\", \"2 3 2\", \"2 1 2 3\", \"2 3 2\"]) == \"1\"\nassert solution([\"3 4\", \"2 1 3\", \"2 3 2\", \"2 1 2 3\", \"2 3 2\"]) == \"1\"\nassert solution([\"3 4\", \"2 1 3\", \"2 3 2\", \"2 1 2 3\", \"2 3 2\"]) == \"1\"\nassert solution([\"3 4\", \"2 1 3\", \"2 3 2\", \"2 1 2 3\", \"2 3 2\"]) == \"1\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n\nprint(\"Example 1:\")\nprint(\"Input :\")\nprint(\"N : 3, M : 4, K : 2\")\nprint(\"Output :\")\nprint(\"1\")\n\nprint(\"Example 2:\")\nprint(\"Input :\")\nprint(\"N : 3, M : 4, K : 3\")\nprint(\"Output :\")\nprint(\"3\")\n\nprint(\"Example 3:\")\nprint(\"Input :\")\nprint(\"N : 1, M : 1, K : 1\")\nprint(\"Output :\")\nprint(\"1\")\n\nprint(\"Example 4:\")\nprint(\"Input :\")\nprint(\"N : 10, M : 5, K : 1\")\nprint(\"Output :\")\nprint(\"2\")\n\nprint(\"Example 5:\")\nprint(\"Input :\")\nprint(\"N : 10, M : 2, K : 5\")\nprint(\"Output :\")\nprint(\"1\")\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"1\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 0.5, \"The correct answer is 0.5\"\nassert solution
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 0.5\nassert solution(2) == 0.3333333333333333\nassert solution(3) == 0.6666666666666666\nassert solution(4) == 0.75\nassert solution
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(4) == '0.5'\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp := \"4\\n\") == \"0.5\"\nassert solution(inp := \"6\\n\") == \"0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3) == 0.5, 'It is not possible to find the probability that a is odd'\nassert solution(6) == 0.7, 'It is not possible to find the probability that a is odd'"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n'''\n1 1\n1 3\n1 3 4\n3 2\n3 3 4\n3 3 4\n3 3 4\n4 2\n4 3\n4 3\n4 3\n4 4\n4 4\n3 2\n3 3\n3 3\n3 3\n3 3\n3 4\n4 3\n4 3\n''') == '0.5'\nassert solution(\n'''\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"0.5\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0.5\"\nassert solution(\"4\") == \"0.75\"\nassert solution(\"5\") == \"0.25\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0.5\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"0.5\"\nassert solution(\"15\") == \"0.125\"\nassert solution(\"1\") == \"0.25\"\nassert solution(\"5\") == \"0.125\"\nassert solution(\"10\") == \"0.75\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"0.5000000000\"\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 1 0 0 0 1 1 0 1 1 1 1 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 1 1 0 1 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1 1 1\", \"1 0 1\", \"1 1 0\", \"1 0 1\", \"1 1 1\"]) == 2\nassert solution([\"1 1 1\", \"1 0 1\", \"1 1 0\", \"1 0 1\", \"1 1 1\"]) == 2\nassert solution([\"1 1 1\", \"1 0 1\", \"1 1 0\", \"1 0 1\", \"1 1 1\"]) == 2\nassert solution([\"1 1 1\", \"1 0 1\", \"1 1 0\", \"1 0 1\", \"1 1 1\"]) == 2\nassert solution([\"1 1 1\", \"1 0 1\", \"1 1 0\", \"1 0 1\", \"1 1 1\"]) == 3\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3\\n1\\n2\\n1\\n1 1\\n1 1\\n1 1\\n2 0\\n\"\n) == 2\nassert solution(\n    \"3\\n2\\n1\\n2 0\\n2 1\\n\"\n) == 1\nassert solution(\n    \"3\\n1\\n2\\n1\\n1 1\\n1 1\\n1 1\\n2 0\\n\"\n) == 2\nassert solution(\n    \"3\\n1\\n2\\n1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n2 0\\n\"\n) == 2\nassert solution(\n    \"3\\n1\\n2\\n1\\n1 1\\n1 1\\n1 1\\n1 1\\n2 0\\n\"\n) == 2\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 2\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2 1 1 1 1 1 1 0 0 0 0') == '2'\nassert solution('1 2 1 2 1 1 1 1 0 0 0 0') == '1'\nassert solution('1 1 1 1 1 1 1 1 0 0 0 0') == '1'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 0 1') == '1'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '1'\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '2'\n\nassert solution(input()) == '1'\nassert solution(input()) == '1 1 1 1 1 1 0 0 0 0 0 0 0'\nassert solution(input()) == '3'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"3\",\n    [\n        (\n            (\"1\", \"1\", \"1\"),\n            (\"1\", \"0\", \"0\"),\n        ),\n        (\n            (\"2\", \"1\", \"1\"),\n            (\"1\", \"1\", \"0\"),\n        ),\n        (\n            (\"1\", \"1\", \"1\"),\n            (\"1\", \"0\", \"0\"),\n        ),\n        (\n            (\"2\", \"0\", \"1\"),\n            (\"1\", \"0\", \"0\"),\n        ),\n        (\n            (\"2\", \"0\", \"1\"),\n            (\"1\", \"1\", \"1\"),\n        ),\n    ],\n) == 2\n\n\"\"\"\n\nN = int(input())\nA = [list(map(int, input().split())) for _ in range(N)]\n\ncount = 0\n\nfor i in range(N):\n    for j in range(N):\n        if A[i][j] == 1 and A[i][j + 1] == 0 and A[i + 1][j] == 0:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"2\",\"3\",\"1\"]) == 2, \"second solution fail\"\nassert solution([\"3\",\"1\",\"1\"]) == 1, \"second solution fail\"\nassert solution([\"1\",\"1\"]) == 2, \"second solution fail\"\nassert solution([\"1\",\"2\"]) == 2, \"second solution fail\"\nassert solution([\"1\",\"2\",\"1\"]) == 2, \"second solution fail\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"nikoand...\", \"Error in solution\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, \"nikoandsolstice\") == \"nikoand...s\", \"test_solution.txt\"\nassert solution(100, \"nikoandsolstice\") == \"nikoand...s\", \"test_solution.txt\"\nassert solution(0, \"nikoandsolstice\") == \"nikoand...s\", \"test_solution.txt\"\nassert solution(123, \"nikoandsolstice\") == \"nikoand...s\", \"test_solution.txt\"\nassert solution(1000, \"nikoandsolstice\") == \"nikoand...s\", \"test_solution.txt\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == nikoand...\n\n\n-----Sample Input-----\n9\nbanana\n4\n4\n2\n2\n3\n\n-----Sample Output-----\n3\nb...a...n...\n\nassert solution(stdin) == 3\n'''\n\nclass Solution:\n    def removeKdigits(self, s: str, k: int) -> str:\n        if len(s) <= k:\n            return s\n        \n        stack = []\n        \n        for i in range(len(s)):\n            if stack:\n                while stack and stack[-1] <= s[i]:\n                    stack.pop()\n            \n            if i + 1 >= len(s) or s[i + 1]!= s[i]:\n                stack.append(s[i])\n            else:\n                stack.append(s[i])\n                \n        result = \"\".join(stack[:-k])\n        \n        return result"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"nikoandsol\" - \"sti\") == \"sti\"\nassert solution(\"nikoandsol\" - \"sti\" + \"sti\") == \"sti\"\nassert solution(\"nikoandsol\" + \"sti\") == \"sti\"\nassert solution(\"nikoandsolsti\") == \"sti\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n'''\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"nikoand...\"\nassert solution(stdin) == \"nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...nikoand...n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 'niko'\nassert solution(2) == 'i'\nassert solution(4) == 'ix'\nassert solution(7) == 'niko'\nassert solution(0) == ''\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"nikoand...\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3) == \"niko...niko...\"\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('banana') == 'appan'\nassert solution('apple') == 'apples'"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"apples\") == \"apples\"\nassert solution(\"apples\") == \"apples\"\nassert solution(\"apples\") == \"apples\"\nassert solution(\"apples\") == \"apples\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"apple\") == \"apples\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"leet\") == \"lles\"\nassert solution(\"lee\") == \"le\"\nassert solution(\"kitty\") == \"kitty\"\nassert solution(\"cake\") == \"cak\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"apples\"\nassert solution(input()) == \"apple\"\nassert solution(input()) == \"apples\"\nassert solution(input()) == \"apple\"\nassert solution(input()) == \"apples\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"apples\") == \"apples\"\nassert solution(\"apples\") == \"apples\"\nassert solution(\"apple\") == \"apples\"\nassert solution(\"apples\") == \"apples\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('apple') == 'apples', \"Test failed\""
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('apple') == 'apples', \"failed\"\nassert solution('appl') == 'appl', \"failed\"\nassert solution('appl') == 'appl', \"failed\"\nassert solution('apple') == 'apples', \"failed\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"apples\") == \"apples\", \"Test failed!\"\nassert solution(\"apples\") == \"apples\", \"Test failed!\"\nassert solution(\"apples\") == \"apples\", \"Test failed!\"\nassert solution(\"apples\") == \"apples\", \"Test failed!\"\nassert solution(\"apples\") == \"apples\", \"Test failed!\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"apple\") == \"apples\", \"solution failed\""
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"1\"\n\n-----Sample Output-----\nSample Input:\n3 2\n2\n1 3\n1\n3\n\nSample Output:\n1\n\n - Snuke 1 has Snack 1.\n - Snuke 2 has no snacks.\n - Snuke 3 has Snack 1 and 2.\nThus, there will be one victim: Snuke 2.\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 4\") == \"1 3\"\nassert solution(\"2 3 3 3\") == \"3 3\"\nassert solution(\"3 3 3 3 3\") == \"3 3\"\nassert solution(\"3 3 3 3 3\") == \"3 3\"\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"1\"\n'''\n\nimport sys\nimport math"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, 1, 1, 3, 1, 3, 2, 1) == \"1\"\nassert solution(1, 1, 1, 3, 2, 1, 3, 1) == \"1\"\nassert solution(1, 1, 1, 3, 2, 2, 2, 1) == \"1\"\nassert solution(1, 1, 1, 3, 2, 2, 3, 1) == \"1\"\nassert solution(1, 1, 1, 3, 2, 3, 3, 1) == \"1\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3\\n') == '1'\nassert solution('3 2\\n2\\n1 3\\n1\\n3\\n') == '3'\nassert solution('3 2\\n2\\n1 3\\n1\\n3\\n') == '3'\nassert solution('3 2\\n2\\n1 3\\n1\\n3\\n') == '3'\nassert solution('3 2\\n2\\n1 3\\n1\\n3\\n') == '3'\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 5 4 1\") == \"1\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"5 2 3 1\") == \"2\"\nassert solution(\"1 3 2\") == \"3\"\nassert solution(\"1 3 2 1\") == \"2\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 3\") == \"2\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"1 4\") == \"2\"\nassert solution(\"3 4\") == \"1\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 100\n - 1 \\leq K \\leq 100\n - 1 \\leq d_i \\leq N\n - 1 \\leq A_{i, 1} < \\cdots < A_{i, d_i} \\leq N\n\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n.\n\n\n\"\"\"\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n."
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(solution(stdin)) == \"5\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"aabbbbaaca\"\n) == \"5\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 5\n\n------Code Execution------\n> python solution.py\n5\n\nOutput:\n5\n\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(string) == 5\n    \n\"\"\"\n    \n    \n    \n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 5\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == '5'\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 15, \"Incorrect result\"\nassert solution(input()) == 3, \"Incorrect result\"\nassert solution(input()) == 6, \"Incorrect result\"\nassert solution(input()) == 2, \"Incorrect result\"\nassert solution(input()) == 4, \"Incorrect result\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"3 5 2 4\"\n    ) == 6\nassert solution(\n    \"5 5 2 4\"\n    ) == 5\nassert solution(\n    \"5 5 2 4\"\n    ) == 4\nassert solution(\n    \"3 5 3 2\"\n    ) == 3\nassert solution(\n    \"5 5 3 2\"\n    ) == 2\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"20\"\nassert solution(input()) == \"33\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 2 4\") == \"3\"\nassert solution(\"3 2 4\") == \"3\"\nassert solution(\"5 4\") == \"4\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"5 2\") == \"1\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"2 3\") == \"6\"\nassert solution(\"3 4\") == \"9\"\nassert solution(\"4 5\") == \"15\"\nassert solution(\"4 6\") == \"45\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"5\"\nassert solution(input) == \"7\"\nassert solution(input) == \"4\"\nassert solution(input) == \"10\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 4\") == \"3\"\nassert solution(\"5 2 4\") == \"15\"\nassert solution(\"5 3 4\") == \"15\"\nassert solution(\"5 3\") == \"45\"\nassert solution(\"5 3\") == \"135\""
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"2 2 2 2\") == \"2\"\nassert solution(\"2 1 1 2\") == \"2\"\nassert solution(\"2 2 3 4\") == \"2\"\nassert solution(\"1 1 0 1\") == \"1\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('a b c k'), 'No solution'\nassert solution('a 2 1 3'), 'No solution'\nassert solution('a 0 0'), 'No solution'\nassert solution('a 5 1'), 'No solution'\nassert solution('a 0 0'), 'No solution'\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2, 1, 3) == 2\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"2\"\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A, B, C\n - 1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C K\n\n-----Output-----\nPrint the maximum possible sum of the numbers written on the cards chosen.\n\n-----Sample Input-----\n3 1 1 2\n\n-----Sample Output-----\n3\n\nGiven K = 2, we will pick up cards with 2 and 1s respectively and solve the problem recursively.\nWe will pick up 3 cards, with 1s and 2s, and we will pick up 1s and 1s.\nIn each card we will pick up K-1 cards, all of which have an integer 1, and all of these cards have -1s.\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A, B, C\n - 1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C K\n\n-----Output-----\nPrint the maximum possible sum of the numbers written on the cards chosen.\n\n-----Sample Input-----\n4 1 1 2 3\n\n-----Sample Output-----\n4\n\nWe will pick up 1s and 1s, and we will pick up 2s, and we will pick up 3s, and we will pick up 4s.\nIn each card, we will pick up K-1 cards, all of which have an integer 1, and all of these cards have -1s.\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A, B, C\n - 1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C K\n\n-----Output-----\nPrint the maximum possible sum of the numbers written on the cards chosen.\n\n-----Sample Input-----\n3 1 1 2\n\n-----Sample Output-----\n3\n\nGiven K = 2, we will pick up 2s, and we will pick up 3s.\n\nIn each card, we will pick up K-1 cards, all of which have an integer 1, and all of these cards have -1s.\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A, B, C\n - 1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C K\n\n-----Output-----\nPrint the maximum possible sum of the numbers written on the cards chosen.\n\n-----Sample Input-----\n4 1 1 2 3\n\n-----Sample Output-----\n4\n\nGiven K = 2, we will pick up 2s, and we will pick up 3s.\n\nIn each card, we will pick up K-1 cards, all of which have an integer 1, and all of these cards have -1s.\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A, B, C\n - 1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C K\n\n-----Output-----\nPrint the maximum possible sum of the numbers written on the cards chosen.\n\n-----Sample Input-----\n3 1 1 2\n\n-----Sample Output-----\n3\n\nGiven K = 2, we will pick up 2s, and we will pick up 3s.\n\nIn each card, we will pick up K-1 cards, all of which have an integer 1, and all of these cards have -1s.\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A, B, C\n - 1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C K\n\n-----Output-----\nPrint the maximum possible sum of the numbers written on the cards chosen.\n\n-----Sample Input-----\n4 1 1 2 3\n\n-----Sample Output-----\n4\n\nGiven K = 2, we will pick up 2s, and we will pick up 3s.\n\nIn each card, we will pick up K-1 cards, all of which have an integer 1, and all of these cards have -1s.\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A, B, C\n - 1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C K\n\n-----Output-----\nPrint the maximum possible sum of the numbers written on the cards chosen.\n\n-----Sample Input-----\n3 1 1 2 3\n\n-----Sample Output-----\n3\n\nGiven K = 2, we will pick up 2s, and we will pick up 3s.\n\nIn each card, we will pick up K-1 cards, all of which have an integer 1, and all of these cards have -1s.\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A, B, C\n - 1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C K\n\n-----Output-----\nPrint the maximum possible sum of the numbers written on the cards chosen.\n\n-----Sample Input-----\n4 1 1 2 3\n\n-----Sample Output-----\n4\n\nGiven K = 2, we will pick up 2s, and we will pick up 3s.\n\nIn each card, we will pick up K-1 cards, all of which have an integer 1, and all of these cards have -1s.\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A, B, C\n - 1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C K\n\n-----Output-----\nPrint the maximum possible sum of the numbers written on the cards chosen.\n\n-----Sample Input-----\n3 1 1 2\n\n-----Sample Output-----\n3\n\nGiven K = 2, we will pick up 2s, and we will pick up 3s.\n\nIn each card, we will pick up K-1 cards, all of which have an integer 1, and all of these cards have -1s.\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A, B, C\n - 1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C K\n\n-----Output-----\nPrint the maximum possible sum of the numbers written on the cards chosen.\n\n-----Sample Input-----\n4 1 1 2 3\n\n-----Sample Output-----\n4\n\nGiven K = 2, we will pick up 2s, and we will pick up 3s.\n\nIn each card, we will pick up K-1 cards, all of which have an integer 1, and all of these cards have -1s.\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A, B, C\n - 1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C K\n\n-----Output-----\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3 1 3\") == \"2\"\nassert solution(\"2 3 4 5\") == \"3\"\nassert solution(\"2 4 5 1\") == \"5\"\nassert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"2 1 2 3\") == \"1\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 1 1 3') == '2'\nassert solution('2 1 1 4') == '1'\nassert solution('2 1 1 5') == '3'\nassert solution('2 1 1 6') == '2'\nassert solution('2 1 1 7') == '5'\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 1 1 3') == '2'\nassert solution('1 1 1 0') == '1'\nassert solution('-1 -1 -1') == '1'\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"2\"\n-----Advanced-----\nWe need to solve the problem for the integer values of A and B. We start at A, then we pick up an integer value of B, and finally we take an integer value of C. So, we pick up two cards and solve the problem for the maximum possible sum of cards. The maximum possible sum of the numbers is 2^9 - 1, which is the maximum possible value.\n\n>>> def solution(A, B, C) -> str:\n    pass"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\", \"6\"]) == \"Yes\"\nassert solution([\"1\", \"1\", \"1\", \"1\"]) == \"No\"\nassert solution([\"1\", \"1\", \"1\", \"2\", \"1\"]) == \"Yes\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"2\", \"2\", \"1\"]) == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(test_input) == \"Yes\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 8) == \"Yes\"\nassert solution(2, 3) == \"No\"\nassert solution(1, 3) == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 0 0\") == \"Yes\"\nassert solution(\"0 0 0 2\") == \"Yes\"\nassert solution(\"0 0 0 3 2\") == \"Yes\"\nassert solution(\"0 0 0 4 1 2\") == \"No\"\nassert solution(\"0 0 0 4 1 2 3\") == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 8\"\n) == \"Yes\"\nassert solution(\n    \"5 5\"\n) == \"No\"\nassert solution(\n    \"2 4\"\n) == \"Yes\"\nassert solution(\n    \"1 7\"\n) == \"No\"\nassert solution(\n    \"2 2\"\n) == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"1 1\") == \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin=\"3 8\") == \"Yes\"\nassert solution(\n    stdin=\"3 8 5\") == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"No such paths exist\"\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"2 3\") == \"2\"\n\"\"\"\n\nclass Graph:\n    def __init__(self):\n        self.graph = {}\n    def add_edge(self, a, b):\n        self.graph[a].append(b)\n        self.graph[b].append(a)\n    def check(self, a):\n        return True if a in self.graph.keys() else False\n    def print_graph(self):\n        for key in self.graph.keys():\n            print(key, \": \", self.graph[key])\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3,3) == 2\nassert solution(1,2) == 1\nassert solution(1,3) == 1\nassert solution(2,2) == 1\nassert solution(2,3) == 1\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 4 6\") == \"2\"\nassert solution(\"1 2 3 4 7\") == \"3\"\nassert solution(\"1 2 3 4 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, 2, 3, 4) == \"2\"\nassert solution(1, 2, 1, 3) == \"2\"\nassert solution(1, 2, 2, 3) == \"3\"\nassert solution(1, 2, 1, 1) == \"3\"\nassert solution(1, 1, 2, 3) == \"2\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n\"\"\"\n\n\"\"\"\nAlgorithm 2\n\nStep 1: Initialize an empty list\nStep 2: Initialize an empty set\nStep 3: Initialize an empty dictionary\n\n\"\"\"\n\nclass Solution:\n    def numberOfPathsStartingAtNode(self, root: Optional[TreeNode]) -> int:\n        if root is None:\n            return 0\n        \n        return self.dfs(root, {}, {})\n    \n    def dfs(self, node, paths, prev):\n        if node in paths:\n            return paths[node]\n        \n        if node is None:\n            return 0\n        \n        paths[node] = self.dfs(node.left, paths, node) + self.dfs(node.right, paths, node)\n        \n        return paths[node]\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"2\"\n-----Sample Input-----\n3 3\n1 2\n1 3\n2 3\n\n-----Sample Output-----\n3\n\nThe given graph is shown in the following figure:\nThe following two paths satisfy the condition:\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"2\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\n\nConstraints\n1 <= N, M <= 100 \n-100 <= a_i, b_i <= 100\n0 <= a_i < b_i <= N \n\nTime Limit:  1 second\nSpace Limit:  1,000,000\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 1 3 3 4 2') == '0'\nassert solution('1 2 3') == '0'\nassert solution('1 3 2') == '1'\nassert solution('2 3 3') == '1'\nassert solution('2 2 3') == '0'\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2 2) == 4\nassert solution(4 4) == 5\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"3+5+7\"\nassert solution(\"1 3\") == \"5\"\nassert solution(\"1 4\") == \"2\"\nassert solution(\"1 5\") == \"5+6\"\nassert solution(\"1 6\") == \"6\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 18\n\nSample Output\n8\n\nThe flavors of Apple 1, 2, 3, 4, and 5 are 1, 2, 3, 4, and 5, respectively. The optimal choice is to eat Apple 1, so the answer is 1+2+3+4+5=8.\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"18\"\nassert solution(stdin) == \"3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 18\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 6 2') == '18'\nassert solution('5 6') == '8'\nassert solution('1 4 1') == '0'\nassert solution('1 2 2 2 2 2 1 1 1 1') == '0'\nassert solution('1 1 0') == '0'\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == 18\nassert solution(\"3 1\") == 1\nassert solution(\"2 1\") == 1\nassert solution(\"3 2\") == 1\nassert solution(\"3 3\") == 3\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    '''\n    4 3\n    1 2 4\n    1 5 6\n    ''') == 18\n    assert solution(\n    '''\n    5 3\n    4 2 5\n    1 2 4\n    1 3 6\n    ''') == 18\n    assert solution(\n    '''\n    5 3\n    4 2 5\n    1 2 4\n    1 3 6\n    ''') == 5\n    assert solution(\n    '''\n    4 3\n    1 2 4\n    1 3 6\n    ''') == 5\n    assert solution(\n    '''\n    2 2\n    ''') == 1\n    "
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"18\"\nassert solution(\"5 3\") == \"18\"\nassert solution(\"5 4\") == \"18\"\nassert solution(\"5 5\") == \"18\"\nassert solution(\"5 6\") == \"18\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"18\"\nassert solution(\"4 3\") == \"18\"\nassert solution(\"4 4\") == \"18\"\nassert solution(\"3 4\") == \"14\"\nassert solution(\"3 3\") == \"14\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\") == \"60\"\n\"\"\"\n    def solution(stdin: str) -> str:\n        pass\n\"\"\"\n    assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\") == \"60\"\n\"\"\"\n    assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\") == \"60\"\n\"\"\"\n    assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\") == \"60\"\n\"\"\"\n    assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\") == \"60\"\n\"\"\"\n    "
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"60\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin,\n    3\n) == 60\nassert solution(\n    stdin,\n    5\n) == 60\nassert solution(\n    stdin,\n    6\n) == 60\nassert solution(\n    stdin,\n    7\n) == 60\nassert solution(\n    stdin,\n    8\n) == 60\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 60, 'failed'\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 60\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"60\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"60\"\n\nclass Solution:\n    def fizzBuzz(self, n: int) -> str:\n        result = []\n        for i in range(1,n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(i)\n        return \" \".join(result)\n        \n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\n    \"1\",\n    \"2\",\n    \"Fizz\",\n    \"4\",\n    \"Buzz\",\n    \"Fizz\",\n    \"7\",\n    \"8\",\n    \"Fizz\",\n    \"FizzBuzz\",\n    \"11\",\n    \"13\",\n    \"14\",\n    \"FizzBuzz\",\n    \"15\",\n    \"16\",\n    \"Fizz\",\n    \"Fizz\",\n    \"Fizz\",\n    \"Buzz\"\n    ]\n) == \"60\"\n'''\n\nimport sys"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 \\n1 \\n2 3') == '60'\nassert solution('1 4 \\n1 3 \\n2 1 \\n2 3') == '11'\nassert solution('1 5 \\n1 2 3 4 5 \\n1 3 4 5') == '14'\nassert solution('1 6 \\n2 3 4 5 \\n1 3 4 5 \\n2 3 4 5 \\n1 2 3 4') == '15'\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()),'solution() does not work'\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"8\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin: str = \"4 7 10 6 5\") == \"8\"\nassert solution(\n    stdin: str = \"1 2 1 2 2 1 2 1 1 2 1 2 1 1 1 2 1 2 1 1 2 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 3 5 4') == '8'\nassert solution('4 7 10 6 5') == '8'\nassert solution('3 7 10 8 6 5 4') == '3'\nassert solution('4 7 8 10 4 6 5') == '8'\nassert solution('4 7 8 10 6 5 7') == '7'\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"8\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '8'\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"8\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 10\") == \"8\"\nassert solution(\"4 7 10 6 5\") == \"8\"\nassert solution(\"2 4 7 10 6\") == \"3\"\nassert solution(\"4 4 6 4 10 6\") == \"3\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('4 7 10 6 5') == '8'\nassert solution('4 7 10 6 5') == '8'\nassert solution('6 7 10 8') == '6'\nassert solution('7 8 10') == '7'\nassert solution('8 10 7') == '8'\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"8\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2 4) == 1\nassert solution(2 4) == 2\nassert solution(3 1) == 2\nassert solution(3 4) == 1\nassert solution(4 1) == 1\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"3 2\", \"2 1\"]) == \"1\"\nassert solution([\"2 1\", \"3 2\", \"4 1\", \"4 3\"]) == \"3\"\nassert solution([\"3 1\", \"3 2\", \"4 1\", \"4 2\"]) == \"2\"\nassert solution([\"3 3\", \"3 2\", \"2 1\"]) == \"1\"\nassert solution([\"2 1\", \"2 2\", \"3 1\", \"3 2\", \"3 3\"]) == \"2\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\\\"2 3\\\") == 2\nassert solution(\\\"1 2 2 1\\\") == 1\nassert solution(\\\"3 1 1\\\") == 1\nassert solution(\\\"2 2 2 2 2\\\") == 2\nassert solution(\\\"3 3 3 3\\\") == 3\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(test_cases[0]) == \"1\"\nassert solution(test_cases[1]) == \"4\"\nassert solution(test_cases[2]) == \"2\""
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"1\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"4 1\") == \"1\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"1\"\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5\", \"2\", \"1\"]) == \"6\", \"string not matched\"\nassert solution([\"1\", \"5\", \"4\", \"10\"]) == \"6\", \"string not matched\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"6\"]) == \"1\", \"string not matched\"\nassert solution([\"3\", \"1\", \"3\", \"1\", \"3\"]) == \"-1\", \"string not matched\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"3\", \"string not matched\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"-1\"\n\n\n-----Constraints-----\n1 <= n, k <= 10^5\n1 <= a_i <= 10^9\n\n-----Elements of given sequence are integers, and in given sequence, a_i is between 1 and 10^9.\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"-1\"\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= k <= 10^9\n1 <= a_i <= 10^9\n1 <= n <= 10^5\n\nModified to use the solution function.\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-1'\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"-1\"\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"-1\"\n\n\n-----Constraints-----\n1 \u2264 n \u2264 100, 1 \u2264 k \u2264 10^9\n\n------Memory Restriction-----\nApproach:\nDo not use any extra stack or any other data structures.\nO(n) to store numbers.\n\nFor recursive algorithm:\nDo not use any additional stack.\nO(n) to store numbers.\n\nTime Limit:\n0(n)\n\nSample Input-1:\n\n4 2\n2 3 7\n2 2 2\n2 2\n2 2\n1 1\nSample Output-1:\n\n2\nSample Input-2:\n\n1 4\n1 2\n1 2\n1 2\nSample Output-2:\n\n-1\n\n\n-----Constraints-----\n1 \u2264 k \u2264 10^9\n1 \u2264 n \u2264 100\n\n------Memory Restriction-----\nApproach:\nDo not use any extra stack or any other data structures.\nO(n) to store numbers.\n\nFor recursive algorithm:\nDo not use any additional stack.\nO(n) to store numbers.\n\nTime Limit:\n0(n)\n\nSample Input-1:\n\n4 3\n2 3 7\n2 2 2\n2 2\n2 2\n1 1\nSample Output-1:\n\n-1\n\n\n-----Constraints-----\n1 \u2264 k \u2264 10^9\n1 \u2264 n \u2264 100\n\n------Memory Restriction-----\nApproach:\nDo not use any extra stack or any other data structures.\nO(n) to store numbers.\n\nFor recursive algorithm:\nDo not use any additional stack.\nO(n) to store numbers.\n\nTime Limit:\n0(n)\n\nSample Input-2:\n\n1 4\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\nSample Output-2:\n\n-1\n\n\n-----Constraints-----\n1 \u2264 k \u2264 10^9\n1 \u2264 n \u2264 100\n\n------Memory Restriction-----\nApproach:\nDo not use any extra stack or any other data structures.\nO(n) to store numbers.\n\nFor recursive algorithm:\nDo not use any additional stack.\nO(n) to store numbers.\n\nTime Limit:\n0(n)\n\nSample Input-1:\n\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\nSample Output-1:\n\n-1\n\n\n\n-----Constraints-----\n1 \u2264 k \u2264 10^9\n1 \u2264 n \u2264 100\n\n------Memory Restriction-----\nApproach:\nDo not use any extra stack or any other data structures.\nO(n) to store numbers.\n\nFor recursive algorithm:\nDo not use any additional stack.\nO(n) to store numbers.\n\nTime Limit:\n0(n)\n\nSample Input-2:\n\n1 3\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\nSample Output-2:\n\n-1\n\n\n\n-----Constraints-----\n1 \u2264 k \u2264 10^9\n1 \u2264 n \u2264 100\n\n------Memory Restriction-----\nApproach:\nDo not use any extra stack or any other data structures.\nO(n) to store numbers.\n\nFor recursive algorithm:\nDo not use any additional stack.\nO(n) to store numbers.\n\nTime Limit:\n0(n)\n\nSample Input-1:\n\n3 2\n1 2\n2 2\n2 2\n3 2\nSample Output-1:\n\n3\nSample Input-2:\n\n2 4\n1 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\nSample Output-2:\n\n2\n\"\"\"\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        sum = 0\n        for i in range(len(nums)):\n            if sum == 0:\n                sum = nums[i]\n            else:\n                sum += nums[i]\n        return sum"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp, k) == '-1'\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"7 4\"\n) == \"6\"\nassert solution(\n    \"7 2\"\n) == \"-1\"\nassert solution(\n    \"5\"\n) == \"5\"\nassert solution(\n    \"1\"\n) == \"-1\"\nassert solution(\n    \"3 1 5 1 10 3 20\"\n) == \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 5 7\") == \"-1\"\nassert solution(\"3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"3 7 5 1 10 3 20\") == \"-1\"\nassert solution(\"3 7 5 1 10 3 20\") == \"6\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2, \"Error: expected '*' but got '{}'\".format(stdin)\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"3 4 1\"\n\npass\n\"\"\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3 4 1 3 5 2\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3 4 1\"\nassert solution(input()) == \"3 5 2\"\nassert solution(input()) == \"3 5 1\"\nassert solution(input()) == \"-1\"\n\n\n\n------CODE-----"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n\n\n-----Solution-----\n\nIn the second example the output is correct but the program does not accept the number of stars < 0 or > 9999.\n\nIn the third example the output is correct but the program does not accept the number of stars < 0 or > 99.\n\nIn the fourth and fifth example, the output is correct but the program does not accept the number of stars > 9999.\n\nThe number of stars must be between 1 and 9999."
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 5 3 4') == '3'\nassert solution('3 3 1') == '2'\nassert solution('3 5 1') == '1'\nassert solution('3 5 2') == '2'\nassert solution('3 5 2 3 4') == '3'\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\n\n\"\"\"\nfrom itertools import permutations\nfrom math import gcd\n\nn, m = map(int, input().split())\ngrid = [input() for i in range(n)]"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"Your program did not return the correct output.\"\n\"\"\"\n\nclass Star:\n\n    def __init__(self, row, col, size):\n        self.row = row\n        self.col = col\n        self.size = size\n        self.color = '.'\n\n    def __str__(self):\n        return f'[{self.color}] {self.size} {self.row} {self.col}'\n\n    def __repr__(self):\n        return f'{self.color}[{self.size}] {self.row} {self.col}'\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1'\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"n = 5, m = 3\")\nprint(\"Exception :\")\nprint(\"3\")\nprint(\"Output :\")\nprint(\"3\")\nprint(\"Expected:\")\nprint(\"3\")\n\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"n = 5, m = 3\")\nprint(\"Exception :\")\nprint(\"-1\")\nprint(\"Output :\")\nprint(\"-1\")\nprint(\"Expected:\")\nprint(\"-1\")\n\nprint(\"Example 3:\")\nprint(\"Input : \")\nprint(\"n = 2, m = 3\")\nprint(\"Exception :\")\nprint(\"1\")\nprint(\"Output :\")\nprint(\"1\")\nprint(\"Expected:\")\nprint(\"1\")\n\nprint(\"Example 4:\")\nprint(\"Input : \")\nprint(\"n = 1, m = 1\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"0\")\nprint(\"Expected:\")\nprint(\"0\")\n\nprint(\"Example 5:\")\nprint(\"Input : \")\nprint(\"n = 7, m = 1\")\nprint(\"Exception :\")\nprint(\"1\")\nprint(\"Output :\")\nprint(\"1\")\nprint(\"Expected:\")\nprint(\"1\")\n\nprint(\"Example 6:\")\nprint(\"Input : \")\nprint(\"n = 5, m = 4\")\nprint(\"Exception :\")\nprint(\"-1\")\nprint(\"Output :\")\nprint(\"-1\")\nprint(\"Expected:\")\nprint(\"-1\")\n\nprint(\"Example 7:\")\nprint(\"Input : \")\nprint(\"n = 5, m = 3\")\nprint(\"Exception :\")\nprint(\"-1\")\nprint(\"Output :\")\nprint(\"-1\")\nprint(\"Expected:\")\nprint(\"-1\")\n\nprint(\"Example 8:\")\nprint(\"Input : \")\nprint(\"n = 5, m = 3\")\nprint(\"Exception :\")\nprint(\"-1\")\nprint(\"Output :\")\nprint(\"-1\")\nprint(\"Expected:\")\nprint(\"-1\")\n\nprint(\"Example 9:\")\nprint(\"Input : \")\nprint(\"n = 5, m = 3\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"0\")\nprint(\"Expected:\")\nprint(\"0\")\n\nprint(\"Example 10:\")\nprint(\"Input : \")\nprint(\"n = 5, m = 3\")\nprint(\"Exception :\")\nprint(\"-1\")\nprint(\"Output :\")\nprint(\"-1\")\nprint(\"Expected:\")\nprint(\"-1\")\n\nprint(\"---CODE---\")\nn, m = map(int, stdin.split())\nx = []\ny = []\ns = []\n\nfor _ in range(n):\n    x.append(stdin.pop(0))\n\nfor _ in range(m):\n    y.append(stdin.pop(0))\n\nfor i in range(n):\n    for j in range(m):\n        if j+1 < m and x[i] == y[j+1] and j+1 < m and x[i]!= y[j+1] and x[i]!= y[j+1] and (x[i] == '*' or x[i] == '.'):\n            s.append(x[i])\n        elif x[i]!= '*' and x[i]!= y[j+1] and x[i]!= y[j+1] and (x[i] == '*' or x[i] == '.'):\n            s.append(x[i])\n\nfor x in range(n):\n    if s[x]!= x:\n        print(s[x], end='')\nprint()"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, 'good') == 5\nassert solution(5, 'bad') == 1\nassert solution(2, 'bad') == 2\nassert solution(1, 'good') == 3\nassert solution(0, 'bad') == 4\n\nprint('Example 1:')\nprint('Input : ')\nprint('stdin : ')\nprint('5')\nprint('Output : ')\nprint('2')\nprint('Explanation :')\nprint('solution(5, \"good\") => 2')\nprint('solution(5, \"bad\") => 1')\nprint('solution(2, \"bad\") => 2')\nprint('solution(2, \"good\") => 3')\nprint('solution(1, \"bad\") => 4')\nprint('solution(0, \"good\") => 5')\n\nprint('Example 2:')\nprint('Input : ')\nprint('stdin : ')\nprint('aabc')\nprint('Output : ')\nprint('3')\nprint('Explanation :')\nprint('solution(3, \"good\") => 3')\nprint('solution(3, \"bad\") => 1')\nprint('solution(1, \"bad\") => 2')\nprint('solution(0, \"good\") => 5')\n\nprint('Example 3:')\nprint('Input : ')\nprint('stdin : ')\nprint('aaaa')\nprint('Output :')\nprint('0')\nprint('Explanation :')\nprint('solution(0, \"bad\") => 0')\nprint('solution(0, \"good\") => 0')\nprint('solution(1, \"bad\") => 1')\nprint('solution(1, \"good\") => 2')\nprint('solution(2, \"bad\") => 3')\nprint('solution(2, \"good\") => 4')\nprint('solution(3, \"bad\") => 5')\n\nprint('Example 4:')\nprint('Input : ')\nprint('s')\nprint('Output : ')\nprint('4')\nprint('Explanation :')\nprint('solution(4, \"bad\") => 1')\nprint('solution(4, \"good\") => 2')\nprint('solution(2, \"good\") => 2')\nprint('solution(2, \"bad\") => 3')\nprint('solution(1, \"good\") => 4')\nprint('solution(0, \"bad\") => 5')\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"good\") == \"good\"\nassert solution(\"aabc\") == \"ab\"\nassert solution(\"aacbc\") == \"def\"\nassert solution(\"ab\") == \"a\"\nassert solution(\"ab\") == \"ab\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0) == 0\nassert solution(2) == 1\nassert solution(3) == 2\n\n\n\n'''\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 12\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(good) == 0\nassert solution(aaa) == 3\nassert solution(def good) == 3\nassert solution(def bad) == 0\nassert solution(good) == 0"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, \"a\") == 1\nassert solution(2, \"aab\") == 3\nassert solution(2, \"aabc\") == 1\nassert solution(3, \"aaa\") == 0\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(sys.stdin.readline().strip()) == \"good\"\nassert solution(sys.stdin.readline().strip()) == \"def\"\nassert solution(sys.stdin.readline().strip()) == \"zzz\"\nassert solution(sys.stdin.readline().strip()) == \"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, \"good\") == \"def\"\nassert solution(3, \"bad\") == \"def\"\nassert solution(0, \"good\") == \"def\"\nassert solution(0, \"bad\") == \"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= u_i, v_i <= n\n0 <= s_i <= 10^9\n\ninput = \"2\"\noutput = \"YES\"\n\"\"\"\nimport sys\nimport math\n\nclass Graph:\n    def __init__(self, n, m):\n        self.n = n\n        self.m = m\n        self.graph = [[0 for _ in range(n)] for _ in range(n)]\n    \n    def add_edge(self, u, v):\n        self.graph[u][v] = 1\n        self.graph[v][u] = 1\n        \n    def display(self):\n        print(self.graph)\n        \n    def get_adjacent_vertices(self, u):\n        return self.graph[u]\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n\n\"\"\"\nimport queue\nfrom collections import defaultdict"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 5\") == \"YES\"\nassert solution(\"1 4\") == \"NO\"\nassert solution(\"3 1\") == \"YES\"\nassert solution(\"6 1\") == \"YES\""
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"YES\"\nassert solution(input) == \"YES\"\nassert solution(input) == \"YES\"\nassert solution(input) == \"YES\"\nassert solution(input) == \"NO\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\n\n-----Constraints-----\n1 <= n <= 10^4\n1 <= m <= 10^4\n1 <= u_i, v_i < n\n0 <= u_i, v_i <= n - 1\n\n-----Time Limit: 10 minutes----------\"\"\"\n\nclass Solution:\n    \"\"\"\n    @param stdin: input from stdin (integer array)\n    @param stdout: a terminal print string (string)\n    @return: the minimum cost to traverse the given graph\n    \"\"\"\n    def minimumCost(self, n, m, edges):\n        \n        graph = [[] for i in range(n)]\n        for edge in edges:\n            u = edge[0]\n            v = edge[1]\n            graph[u].append(v)\n            graph[v].append(u)\n\n        visited = [False] * n\n        \n        def dfs(node):\n            nonlocal minCost\n\n            if node in visited:\n                return 0\n\n            if node == n - 1:\n                return m\n            \n            cost = minCost = 10 ** 9\n\n            for neighbor in graph[node]:\n                cost = min(cost, dfs(neighbor) + 1)\n            \n            visited[node] = True\n            return cost\n        \n        minCost = 10 ** 9\n        for node in range(n):\n            minCost = min(minCost, dfs(node))\n        \n        return minCost\n        "
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"YES\"\nassert solution(\"6 5\") == \"NO\"\n\n\n-----Submission-----\n\nTestcase\n  3 5\n  1 5\n  1 4\n  3 1\n\nExpected\n  YES\n  \"\"\"\n  pass"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 1 2\") == \"YES\"\nassert solution(\"5 5\") == \"YES\"\nassert solution(\"10 10\") == \"NO\"\nassert solution(\"1 1 1\") == \"NO\"\nassert solution(\"1 4\") == \"YES\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\", \"No\"\n\nassert solution(stdin) == \"NO\", \"Yes\""
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"5 3 2 1 1 2 3 4 4 2\"\n) == \"YES\"\nassert solution(\n    \"5 3 4 2 3 1 2 1 4 4\"\n) == \"NO\"\nassert solution(\n    \"5 3 4 2 3 2 4 2 4 2\"\n) == \"YES\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 5) == \"2\"\nassert solution(1, 7) == \"0\"\nassert solution(2, 2) == \"2\"\nassert solution(1, 2) == \"1\"\nassert solution(5, 5) == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"0\"\nassert solution([\"1\",\"2\",\"3\",\"5\"]) == \"0\"\nassert solution([\"1\",\"2\",\"3\",\"3\"]) == \"0\"\nassert solution([\"2\",\"2\"]) == \"0\"\nassert solution([\"2\",\"2\",\"2\"]) == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"0\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"7 5\") == \"2\"\nassert solution(\"1 7\") == \"2\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '2'\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= m <= 100\n\n\"\"\"\n\nimport sys\n\nn, m = map(int, input().split())\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\" or solution(stdin) == \"1\"\n\nassert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"0\"\nassert solution(\"5 1\") == \"0\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"1 5\") == \"0\"\nassert solution(\"5 1\") == \"1\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Other Solutions-----\n\nFor example, here the point $1$ belongs to the second segment, the point $2$ belongs to the first and the second segments and the point $5$ belongs to the third segment. If the point $1$ does not belong to any segment, it does not belong to any segment.\n\nThe point $2$ belongs to the first segment, but it does not belong to any segment.\n\nFor example, here the point $1$ belongs to the second segment, the point $2$ belongs to the first and the second segments and the point $5$ belongs to the third segment. If the point $1$ does not belong to any segment, it does not belong to any segment.\n\nThe point $2$ belongs to the first segment, but it does not belong to any segment.\n\nFor example, here the point $1$ belongs to the second segment, the point $2$ belongs to the first and the second segments and the point $5$ belongs to the third segment. If the point $1$ does not belong to any segment, it does not belong to any segment.\n\nIn general, there are four cases:\n\n(1) if the point $2$ does not belong to any segment, it does not belong to any segment.\n\n(2) if the point $1$ belongs to the first segment, the point $2$ belongs to the second segment and the point $5$ belongs to the third segment.\n\n(3) if the point $1$ belongs to the first segment, the point $2$ belongs to the second segment and the point $5$ belongs to the third segment.\n\n(4) if the point $1$ belongs to the first segment, the point $2$ belongs to the second segment and the point $1$ belongs to the third segment.\n\nThen the point $2$ belongs to the first segment, the point $2$ belongs to the second segment and the point $5$ belongs to the third segment.\n\nThe point $2$ belongs to the first segment, but it does not belong to any segment.\n\nThe point $1$ belongs to the first segment, but it does not belong to any segment.\n\nThe point $1$ belongs to the first segment, but it does not belong to any segment.\n\nFor example, here the point $1$ belongs to the first segment, the point $2$ belongs to the first and the second segments and the point $5$ belongs to the third segment. If the point $1$ does not belong to any segment, it does not belong to any segment.\n\nThe point $2$ belongs to the first segment, but it does not belong to any segment.\n\nThe point $1$ belongs to the first segment, but it does not belong to any segment.\n\nThe point $1$ belongs to the first segment, but it does not belong to any segment.\n\nThe point $1$ belongs to the first segment, but it does not belong to any segment.\n\nThe point $1$ belongs to the first segment, but it does not belong to any segment.\n\nThe point $1$ belongs to the first segment, but it does not belong to any segment.\n\nThe point $1$ belongs to the first segment, but it does not belong to any segment.\n\nThe point $1$ belongs to the first segment, but it does not belong to any segment.\n\nSince point $1$ belongs to the first segment, it does not belong to any segment.\n\nIf point $1$ belongs to the first segment, it does not belong to any segment.\n\n\n[1] How to check if a point belongs to any segment?"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '7'\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2\""
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '4'\nassert solution(input) == '2'\nassert solution(input) == '5'\nassert solution(input) == '7'"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"4\", \"9\", \"2\", \"3\"]) == \"2\"\nassert solution([\"6\", \"5\", \"3\", \"4\", \"7\"]) == \"1\"\nassert solution([\"4\", \"3\", \"7\"]) == \"1\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4, 9, 2, 3) == 2\nassert solution(1, 2, 3, 4) == 0\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '7'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 4 5\") == 5\nassert solution(\"5 5 2\") == 5\nassert solution(\"10 6 9\") == 2\nassert solution(\"20 4 10\") == 2\nassert solution(\"4 10 2\") == 4\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2, 2, 2, 2) == 2\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '2'\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"34\") == \"Yes\"\nassert solution(\"817\") == \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"123456789\") == \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(123456789) == \"Yes\", \"Did not find Yes\"\nassert solution(12345) == \"No\", \"Did not find No\"\nassert solution(123) == \"Yes\", \"Did not find Yes\"\n\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(11) == \"Yes\", \"11 is not a multiple of 9\"\nassert solution(1) == \"No\", \"1 is not a multiple of 9\"\nassert solution(123) == \"Yes\", \"123 is not a multiple of 9\"\nassert solution(4) == \"No\", \"4 is not a multiple of 9\"\nassert solution(1) == \"Yes\", \"1 is not a multiple of 9\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"13\") == \"No\"\nassert solution(\"234\") == \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(123456789) == 'Yes'\nassert solution(1234) == 'No'\nassert solution(123456789) == 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"Yes\", \"The sum of these digits is not a multiple of 9\""
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('123456789') == 'Yes'\n\"\"\"\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == 'Yes', '5'\nassert solution(\"98\") == 'No', '98'\nassert solution(\"1001\") == 'No', '1001'\nassert solution(\"1001001\") == 'No', '1001001'\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 11\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '3'\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"11\"\nassert solution([\"11\", \"22\", \"33\", \"44\", \"55\", \"66\", \"77\", \"88\", \"99\", \"101\", \"110\"]) == \"11\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"11\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"100\") == \"0\"\nassert solution(\"10000\") == \"2\"\nassert solution(\"100000\") == \"0\"\nassert solution(\"1000000\") == \"0\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(127) == 4\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 4\n'''\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 11\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '13'\nassert solution(input()) == '9'\nassert solution(input()) == '36'\nassert solution(input()) == '81'\nassert solution(input()) == '729'\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"4\"\nassert solution(\"17\") == \"3\"\nassert solution(\"123\") == \"0\"\nassert solution(\"1234\") == \"0\"\nassert solution(\"1234e\") == \"0\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(kyo) == 'Yes'\nassert solution(tokyo) == 'No'\nassert solution(toyo) == 'No'\nassert solution(kyoto) == 'Yes'\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\nassert solution(\"candy\") == \"Yes\"\nassert solution(\"dabc\") == \"No\"\nassert solution(\"aabababababababab\") == \"Yes\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\n\n-----Time complexity-----\nO(n)\nO(n)\n\nO(1)\n\nO(n)\nO(n)\n\nO(n)\nO(n)\nO(n)\n\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\n\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\nO(n)\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"Yes\"\nassert solution(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"kyoto\"\n) == \"Yes\"\nassert solution(\n    \"tokyo\"\n) == \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('kyoto') == 'Yes'\nassert solution('tokyo') == 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\n\n\n\"\"\"\n***problem 1***"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(s) == 3"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2:5:3) == 2\nassert solution(1:1:4) == 1\nassert solution(0:1:2) == 0\nassert solution(2:5:3) == 2\nassert solution(2:5:3) == 0\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(cabacc) == \"1\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('abc') == 1\nassert solution('abcdef') == 1\nassert solution('abcabcd') == 2\nassert solution('abcabc') == 1\nassert solution('abcabab') == 2\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(a) == 1\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"abcdefg\"), 2\nassert solution(\"abcdefg\"), 2\nassert solution(\"abcdefg\"), 1\nassert solution(\"abcdefg\"), 1\nassert solution(\"abcdefg\"), 0\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\"cabacc\", \"abc\", \"cba\"]\n) == 5\nassert solution(\n    [\"cabacc\", \"abc\", \"cba\", \"ccb\", \"cac\", \"cba\", \"cac\", \"caa\", \"cac\"]\n) == 3\nassert solution(\n    [\"cabacc\", \"abc\", \"cba\", \"cba\"]\n) == 1\nassert solution(\n    [\"cabacc\", \"abc\", \"cba\"]\n) == 0\nassert solution(\n    [\"cabacc\", \"abc\", \"cba\"]\n) == 0\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('aabbcaabaa') == 2\nassert solution('abcabcabcabc') == 3"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1\n\n\"\"\"\nclass Solution:\n    def longestCommonSubsequence(self, s: str, t: str) -> int:\n        if not s: return 0\n        if not t: return 0\n        m, n = len(s), len(t)\n        dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if s[i-1] == t[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[m][n]\n\nprint(Solution().longestCommonSubsequence(s=\"cabacc\", t=\"abc\"))\nprint(Solution().longestCommonSubsequence(s=\"cabcc\", t=\"abc\"))\nprint(Solution().longestCommonSubsequence(s=\"ccac\", t=\"cabcc\"))\nprint(Solution().longestCommonSubsequence(s=\"cccac\", t=\"abc\"))\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 3 4 3\") == \"3\"\nassert solution(\"0 0 0\") == 0\nassert solution(\"1 1 1\") == 1\nassert solution(\"3 3 4 3\") == \"3\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"2\"\n\n------Constraints------\n - 1 \\leq A, B \\leq 100\n - The K-th largest positive integer that divides both A and B exists.\n - K \\leq 1\n\n-----Sample Input-----\nInput is given from STDIN.\nA B K\n\n-----Output-----\nPrint the K-th largest positive integer that divides both A and B.\n\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['1', '2', '3', '4', '5', '6']) == '5'\nassert solution(['1', '2', '3']) == '3'\nassert solution(['1', '2', '3', '4']) == '2'\nassert solution(['1', '2', '3', '4']) == '1'\nassert solution(['1', '2', '3', '4', '5']) == '4'\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 12 2') == 2, 'Error'\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"8 12 2\") == \"2\"\nassert solution(\"8 10 12\") == \"2\"\nassert solution(\"8 20\") == \"2\"\nassert solution(\"5 4\") == \"2\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 4 5 7\") == \"7\"\nassert solution(\"9 2\") == \"2\"\nassert solution(\"8 4\") == \"4\"\nassert solution(\"0\") == \"\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"2\"\nassert solution(inp) == \"6\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"500-yen\") == \"2020\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2020'\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"10240\"\n'''"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2020'\n'''"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5,10,5,1\") == \"11\"\nassert solution(\"5,10,10,2\") == \"12\"\nassert solution(\"1,2,5,4\") == \"12\"\nassert solution(\"5,10,5,10\") == \"100\"\nassert solution(\"5,10,100,10\") == \"500\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5,1,1,1,1,1\") == \"1\"\nassert solution(\"1,1,1,1,1,1\") == \"1\"\nassert solution(\"1,1,1,1,1,1,2\") == \"3\"\nassert solution(\"1,1,1,1,1,1,5,5\") == \"5\"\nassert solution(\"1,1,1,1,1,1,1,5,6,5\") == \"5\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2020\"\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2020\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(INPUT) == '2020'\nassert solution(INPUT2) == '10'"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\"1 5\", \"1 4\", \"2 5\", \"2 4\", \"3 5\", \"3 4\", \"3 2\", \"4 3\", \"4 2\", \"5 2\"]) == \"4\"\nassert solution(\n    [\"1 1\", \"2 1\", \"1 2\", \"2 2\", \"3 1\", \"3 2\", \"3 3\", \"4 1\", \"4 2\", \"4 3\", \"5 1\"]) == \"2\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == '5'\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"5\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"6\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '5'"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 4') == '5'\nassert solution('2 4') == '5'\nassert solution('3 4') == '7'\nassert solution('4 5') == '6'\nassert solution('4 4') == '6'\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"5\"\nassert solution(\"2 2\") == \"6\"\nassert solution(\"2 3\") == \"6\"\nassert solution(\"2 4\") == \"5\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"2\\\") == 5\nassert solution(\\\"4\\\") == 4"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"15\"\nassert solution(\"2 4\") == \"20\"\nassert solution(\"3 4\") == \"20\"\nassert solution(\"3 4\") == \"4\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1\", \"2\", \"1\", \"2\", \"1\"]) == \"1\"\nassert solution([\"1\", \"3\", \"2\", \"2\", \"1\", \"1\"]) == \"1\"\nassert solution([\"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\"]) == \"2\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3 1\") == \"1\"\nassert solution(\"1 1 2\") == \"1\"\nassert solution(\"2 2 3\") == \"1\"\nassert solution(\"1 1 3\") == \"1\"\nassert solution(\"1 1 4\") == \"2\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 3 10\") == \"3\"\nassert solution(\"2 4 5 6 7 8 9\") == \"4\"\nassert solution(\"2 1 0 1 1 2 3 4\") == \"0\"\nassert solution(\"2 3 3 3 4 2 4 1 4\") == \"1\"\nassert solution(\"2 3 3 3 4 2 4 1 4\") == \"2\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\", \"The function should return '3' in this case.\"\n\nprint('The solution is correct.')\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"A B\") == 3\nassert solution(\"A B\") == 3\nassert solution(\"A B 2\") == 2\nassert solution(\"A B 3\") == 1\nassert solution(\"A B 4\") == 2\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\n\n1. Create an empty list.\n2. Create a list that contains all the list size.\n3. Create the list of power strips.\n4. The power strip list of size 3 has to be a list of length 3, with its elements a list of all the power strips of length 3.\n\n------PROGRAM STARTS HERE------\n\n-------------------------\n(Your input)\nA B\n\n-------------------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-------------------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n\n-----------------\n(Your output)\n\n-----------------\n\n-----------------\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 10\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"4 10\") == \"4\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 10\") == \"3\"\nassert solution(\"4 4\") == \"3\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"4 9\") == \"1\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 3\n\"\"\"\n\nclass Solution:\n    def solution(self, A, B):\n        if (A+B)%2!= 0:\n            return 0\n        \n        dp = [[0 for _ in range(0, A+B+1)] for _ in range(0, A+B+1)]\n        dp[0][A] = 1\n        \n        for i in range(1, A+B+1):\n            dp[i][0] = dp[i-1][A] + dp[i-1][A]\n            \n            dp[i][B] = dp[i-1][A] - dp[i-1][B]\n            \n            for j in range(1, B+1):\n                dp[i][j] = dp[i-1][A] + dp[i-1][B] - dp[i-1][B-j]\n        \n        print(dp[A][B])\n        \n        return max(dp[A][B], dp[A][B-1])\n    \nsolution(int(input()))"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"2\") == \"3\"\nassert solution(\"1 1\") == \"3\"\nassert solution(\"1 0 0\") == \"3\"\nassert solution(\"0 1 0 0\") == \"3\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"SSSBRBRSS\"\n) == 2, \"incorrect result\"\nassert solution(\n    \"SSSBRBRSSS\"\n) == 0, \"incorrect result\"\nassert solution(\n    \"SSSBBRRRRR\"\n) == 1, \"incorrect result\"\nassert solution(\n    \"SSSBRRBRR\"\n) == 2, \"incorrect result\"\nassert solution(\n    \"SSSBRRRBRR\"\n) == 0, \"incorrect result\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"CSR\") == 2\nassert solution(\"CSS\") == 2\nassert solution(\"SSCS\") == 2\nassert solution(\"SSCCS\") == 2\nassert solution(\"SSCCR\") == 2\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('CSS'), \"one of the day is not an actual weather\"\nassert solution('CSR'), \"one of the day is not an actual weather\"\nassert solution('C'), \"one of the day is not an actual weather\"\nassert solution('R'), \"one of the day is not an actual weather\""
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(S) == '1'\nassert solution(T) == '2'\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"CSR\") == 2\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('CSS') == 2\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"1\"\nassert solution(input) == \"3\"\nassert solution(input) == \"5\"\nassert solution(input) == \"4\""
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4 1 5 3 6\"), \"1 2\"\nassert solution(\"6 6 5 4 3 1\"), \"2\"\nassert solution(\"4 1 3 5 2\"), \"3\"\nassert solution(\"2 1 5 3 4\"), \"5\"\nassert solution(\"3 1 2 5 4\"), \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n'''"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"5\"\nassert solution(input) == \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 3 5 4 2\") == \"2\"\nassert solution(\"5 3 5 4 2\") == \"2\"\nassert solution(\"5 4 2\") == \"2\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"1\"\nassert solution(inp) == \"1 2\"\nassert solution(inp) == \"1 2 3 4\"\nassert solution(inp) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5.410\"\nassert solution(input()) == \"5.620\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin = \"\"\"8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\n-2.14 -1.42\n-2.14 -1.28\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1.62\n-2.14 -1"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2.14 2.06\") == \"5.410\"\nassert solution(\"2.14 2.06\") == \"5.620\"\nassert solution(\"2.14 2.06\") == \"5.480\"\nassert solution(\"2.14 2.06\") == \"6.040\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"5.620\"\nassert solution(input()) == \"5.479\""
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '5.410'\nassert solution(input()) == '5.620'\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2.14 2.06') == '5.410'\nassert solution('1.54 3.06') == '5.620'\nassert solution('1.48 0.64') == '5.480'\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '5.410'\nassert solution(input('2')) == '5.410'\nassert solution(input('3')) == '5.410'\nassert solution(input('8')) == '5.620'\nassert solution(input('5')) == '5.620'\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '5.620'\nassert solution(stdin) == '5.430'\nassert solution(stdin) == '5.320'\nassert solution(stdin) == '5.300'\nassert solution(stdin) == '5.270'\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"5.410\"\nassert solution(input()) == \"5.620\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(sys.stdin.readline()) == '6.720'\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 4\nassert solution(5) == 0\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"5 15\") == \"4\"\nassert solution(\"5 16\") == \"4\"\nassert solution(\"5 26\") == \"2\""
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '-1'\n\n-----Constraints-----\n\n1 <= n <= 2^10\n1 <= m <= n^2\n\n1 <= a_i <= 10^9\n\nExample:\n\nInput:\n5\n2\n2 3 1 1 2\n\nOutput:\n4\n\nInput:\n7\n5\n5 5 5 5 5\n\nOutput:\n2\n\nInput:\n7\n5\n5 5 5 5 5\n\nOutput:\n2\n\nInput:\n5 16\n5 5 5 5 5\n\nOutput:\n1\n\nInput:\n5 26\n5 5 5 5 5\n\nOutput:\n-1\n\"\"\"\n\nimport math\n\nclass Solution:\n    def minDays(self, n: int, m: int, a: List[int]) -> int:\n        if n < m:\n            return 0\n        if n == m:\n            return min(a)\n        \n        k = math.floor(math.log(n,10))\n        if k == 0:\n            return 0\n        if k == 1:\n            return 0 if m == 2 else 1\n        \n        return math.floor(math.log(m,10) - math.log(k,10) - (m - k)) + 1"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^9\n1 <= a_1 <= 10^9\n\n-----Time Limit-----\n\nYou can pass the maximum amount of time in the input.\n\nInput\n5 16\n5 5 5 5 5\n\nOutput\n2\n\nInput\n5 26\n5 5 5 5 5\n\nOutput\n1\n\n\"\"\""
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == 5\nassert solution(\"5\") == 5\nassert solution(\"5 5\") == 14\nassert solution(\"10 20 10 20\") == 10\nassert solution(\"10 20 10 20 10 20 10\") == -1\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"1 2 3 4 1 3 5\"\nassert solution(\"4 3\") == \"1 1 1 1 2\"\nassert solution(\"1 3\") == \"1 1 1 1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 1 1\") == \"2 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 1\"\n\nassert solution(stdin) == \"1 2\"\n\nassert solution(stdin) == \"1 3\"\n\nassert solution(stdin) == \"1 4\"\n\nassert solution(stdin) == \"1 5\""
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"2\", \"4\", \"3\", \"1\"]) == \"1 2 3 4 3\"\nassert solution([\"1\", \"2\", \"3\", \"1\", \"2\", \"2\", \"3\", \"1\"]) == \"1 3 1 2\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1 1 1 1 1\"\nassert solution([\"1\", \"2\", \"2\", \"2\", \"1\", \"2\", \"2\", \"3\", \"2\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"2\", \"1\", \"1\", \"1\", \"1\", \"2\", \"2\", \"3\", \"2\", \"2\", \"3\", \"1\", \"2\", \"3\", \"2\", \"2\", \"1\", \"1\", \"2\", \"1\", \"3\", \"1\", \"1\", \"2\", \"3\", \"3\", \"1\", \"1\", \"2\", \"3\", \"3\", \"3\", \"2\", \"3\", \"1\", \"3\", \"1\", \"2\", \"3\", \"1\", \"3\", \"2\", \"3\", \"3\", \"3\", \"1\", \"2\", \"3\", \"2\", \"1\", \"3\", \"2\", \"1\", \"3\", \"2\", \"2\", \"3\", \"2\", \"3\", \"1\", \"3\", \"1\", \"2\", \"3\", \"1\", \"3\", \"3\", \"2\", \"1\", \"3\", \"2\", \"3\", \"3\", \"2\", \"3\", \"2\", \"2\", \"2\", \"3\", \"1\", \"1\", \"3\", \"2\", \"3\", \"1\", \"2\", \"3\", \"1\", \"3\", \"2\", \"3\", \"1\", \"1\", \"3\", \"1\", \"2\", \"2\", \"3\", \"1\", \"2\", \"1\", \"3\", \"3\", \"1\", \"3\", \"1\", \"1\", \"1\", \"1\", \"2\", \"2\", \"1\", \"3\", \"1\", \"2\", \"2\", \"3\", \"2\", \"2\", \"2\", \"2\", \"2\", \"1\", \"1\", \"2\", \"1\", \"1\", \"3\", \"1\", \"1\", \"2\", \"2\", \"1\", \"1\", \"3\", \"1\", \"1\", \"2\", \"3\", \"3\", \"1\", \"3\", \"3\", \"1\", \"2\", \"3\", \"1\", \"1\", \"3\", \"1\", \"3\", \"1\", \"3\", \"1\", \"1\", \"3\", \"1\", \"2\", \"3\", \"2\", \"1\", \"3\", \"1\", \"2\", \"3\", \"2\", \"2\", \"2\", \"3\", \"2\", \"1\", \"2\", \"2\", \"2\", \"3\", \"3\", \"2\", \"1\", \"3\", \"1\", \"2\", \"3\", \"2\", \"3\", \"2\", \"3\", \"1\", \"1\", \"2\", \"1\", \"2\", \"3\", \"2\", \"2\", \"3\", \"2\", \"3\", \"1\", \"3\", \"2\", \"3\", \"1\", \"3\", \"1\", \"1\", \"1\", \"2\", \"2\", \"3\", \"1\", \"3\", \"1\", \"2\", \"1\", \"1\", \"1\", \"3\", \"2\", \"2\", \"3\", \"1\", \"3\", \"3\", \"1\", \"1\", \"2\", \"1\", \"2\", \"3\", \"3\", \"1\", \"1\", \"2\", \"1\", \"1\", \"1\", \"1\", \"2\", \"2\", \"3\", \"1\", \"3\", \"1\", \"2\", \"1\", \"3\", \"2\", \"3\", \"2\", \"3\", \"2\", \"2\", \"2\", \"3\", \"2\", \"3\", \"2\", \"2\", \"2\", \"1\", \"3\", \"1\", \"1\", \"2\", \"2\", \"1\", \"3\", \"2\", \"1\", \"2\", \"3\", \"1\", \"1\", \"3\", \"2\", \"1\", \"2\", \"1\", \"3\", \"1\", \"1\", \"3\", \"2\", \"2\", \"1\", \"3\", \"1\", \"2\", \"1\", \"2\", \"2\", \"2\", \"1\", \"3\", \"1\", \"2\", \"1\", \"2\", \"3\", \"2\", \"3\", \"3\", \"1\", \"3\", \"1\", \"3\", \"1\", \"2\", \"2\", \"2\", \"1\", \"2\", \"2\", \"3\", \"3\", \"2\", \"1\", \"2\", \"1\", \"1\", \"1\", \"2\", \"3\", \"2\", \"1\", \"2\", \"1\", \"2\", \"3\", \"2\", \"1\", \"2\", \"2\", \"2\", \"1\", \"2\", \"2\", \"1\", \"2\", \"1\", \"1\", \"3\", \"1\", \"1\", \"1\", \"3\", \"1\", \"3\", \"2\", \"2\", \"1"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1 2 3 4\", \"1 3 4 5\", \"2 3 4 5\", \"3 4 5 6\", \"4 5 6 7\"]) == \"3 2 1\"\nassert solution([\"1 2 3 4\", \"1 3 4 5\", \"2 3 4 5\", \"3 4 5 6\", \"4 5 6 7\"]) == \"3 4 1\"\nassert solution([\"1 2 3 4\", \"1 3 4 5\", \"2 3 4 5\", \"3 4 5 6\", \"4 5 6 7\"]) == \"3 4 2\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1 2 3\"\nassert solution(input()) == \"1 1 1\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\\n2\") == \"1\\n2\"\nassert solution(\"6\\n3\") == \"1\\n2\\n3\"\nassert solution(\"7\\n1\\n3\") == \"1\\n2\\n3\"\nassert solution(\"10\\n1\\n2\\n3\") == \"1\\n2\\n3\\n3\"\nassert solution(\"15\\n1\\n1 1\\n2 1 1\\n3 1 1 1\\n4 1 1 1\\n5 1 1 1\\n6 1 1 1\\n7 1 1 1\\n8 1 1 1\\n9 1 1 1\\n10 1 1 1\\n11 1 1 1\\n12 1 1 1\\n13 1 1 1\\n14 1 1 1\\n15 1 1 1\\n16 1 1 1\\n17 1 1 1\\n18 1 1 1\\n19 1 1 1\\n20 1 1 1\\n21 1 1 1\\n22 1 1 1\\n23 1 1 1\\n24 1 1 1\\n25 1 1 1\\n26 1 1 1\\n27 1 1 1\\n28 1 1 1\\n29 1 1 1\\n30 1 1 1\\n31 1 1 1\\n32 1 1 1\\n33 1 1 1\\n34 1 1 1\\n35 1 1 1\\n36 1 1 1\\n37 1 1 1\\n38 1 1 1\\n39 1 1 1\\n40 1 1 1\\n41 1 1 1\\n42 1 1 1\\n43 1 1 1\\n44 1 1 1\\n45 1 1 1\\n46 1 1 1\\n47 1 1 1\\n48 1 1 1\\n49 1 1 1\\n50 1 1 1\\n51 1 1 1\\n52 1 1 1\\n53 1 1 1\\n54 1 1 1\\n55 1 1 1\\n56 1 1 1\\n57 1 1 1\\n58 1 1 1\\n59 1 1 1\\n60 1 1 1\\n61 1 1 1\\n62 1 1 1\\n63 1 1 1\\n64 1 1 1\\n65 1 1 1\\n66 1 1 1\\n67 1 1 1\\n68 1 1 1\\n69 1 1 1\\n70 1 1 1\\n71 1 1 1\\n72 1 1 1\\n73 1 1 1\\n74 1 1 1\\n75 1 1 1\\n76 1 1 1\\n77 1 1 1\\n78 1 1 1\\n79 1 1 1\\n80 1 1 1\\n81 1 1 1\\n82 1 1 1\\n83 1 1 1\\n84 1 1 1\\n85 1 1 1\\n86 1 1 1\\n87 1 1 1\\n88 1 1 1\\n89 1 1 1\\n90 1 1 1\\n91 1 1 1\\n92 1 1 1\\n93 1 1 1\\n94 1 1 1\\n95 1 1 1\\n96 1 1 1\\n97 1 1 1\\n98 1 1 1\\n99 1 1 1\\n100 1 1 1\\n101 1 1 1\\n102 1 1 1\\n103 1 1 1\\n104 1 1 1\\n105 1 1 1\\n106 1 1 1\\n107 1 1 1\\n108 1 1 1\\n109 1 1 1\\n110 1 1 1\\n111 1 1 1\\n112 1 1 1\\n113 1 1 1\\n114 1 1 1\\n115 1 1 1\\n116 1 1 1\\n117 1 1 1\\n118 1 1 1\\n119 1 1 1\\n120 1 1 1\\n121 1 1 1\\n122 1 1 1\\n123 1 1 1\\n124 1 1 1\\n125 1 1 1\\n126 1 1 1\\n127 1 1 1\\n128 1 1 1\\n129 1 1 1\\n130 1 1 1\\n131 1 1 1\\n132 1 1 1\\n133 1 1 1\\n134 1 1 1\\n135 1 1 1\\n136 1 1 1\\n137 1 1 1\\n138 1 1 1\\n139 1 1 1\\n140 1 1 1\\n141 1 1 1\\n142 1 1 1\\n143 1 1 1\\n144 1 1 1\\n145 1 1 1\\n146 1 1 1\\n147 1 1 1\\n148 1 1 1\\n149 1 1 1\\n150 1 1 1\\n151 1 1 1\\n152 1 1 1\\n153 1 1 1\\n154 1 1 1\\n155 1 1 1\\n156 1 1 1\\n157 1 1 1\\n158 1 1 1\\n159 1 1 1\\n160 1 1 1\\n161 1 1 1\\n162 1 1 1\\n163 1 1 1\\n164 1 1 1\\n165 1 1 1\\n166 1 1 1\\n167 1 1 1\\n168 1 1 1\\n169 1 1 1\\n170 1 1 1\\n171 1 1 1\\n172 1 1 1\\n173 1 1 1\\n174 1 1 1\\n175 1 1 1\\n176 1 1 1\\n177 1 1 1\\n178 1 1 1\\n179 1 1 1\\n180 1 1 1\\n181 1 1 1\\n182 1 1 1\\n183 1 1 1\\n184 1 1 1\\n185 1 1 1\\n186 1 1 1\\n187 1 1 1\\n188 1 1"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10 4\") == \"1 3 1 3 10 3 7 7 12 3\"\nassert solution(\"1 4\") == \"1 3 1 3 10 3 7 7 12 3\"\nassert solution(\"2 3 1 1 1\") == \"1 1\"\nassert solution(\"1 2 1\") == \"2 1\"\nassert solution(\"1 2 3\") == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 3 2 4 3 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1 1 1 1 1\"\nassert solution(stdin) == \"2 3 2 1\"\nassert solution(stdin) == \"2 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('7 3') == '1 3 1 3 4 2 3 1'\nassert solution('10 4') == '1 1 1 1 1 2 1 1 2 1 1 2 1 1 1'\nassert solution('15 2') == '7 1 1 1 1 1 1 1 1'\n\"\"\""
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"0\"\n\n\n\n\"\"\""
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '3'\n\n\n-----Constraints-----\n\n1 <= n <= 10^4\n1 <= m <= 10^4\n1 <= a_{i, j} \\le 10^9\n\n-----Submissions-----\n\nApproach:\n\nBrute force, O(MN^2)\n\ntime = O(N * N)\nspace = O(1)\n\n\"\"\"\nclass Solution:\n    def findMaximumWealth(self, weights: List[int]) -> int:\n        m = max(weights)\n        n = len(weights)\n        \n        def solve(idx, limit):\n            if idx >= limit:\n                return 0\n            if idx == n:\n                return m\n            \n            if weights[idx] + weights[idx + 1] > m:\n                return solve(idx + 1, limit)\n            \n            return solve(idx + 1, limit) + weights[idx + 1]\n        \n        return solve(0, n)\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"5\""
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('4 2'), 5\nassert solution('2 4'), 5\nassert solution('6 1'), 3\nassert solution('3'), 0"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\n\n-----Constraints-----\n0 < n,m < 10^3\n\nConstraints\n\n\n\nSample Input-1:\n\n4 2\n9 9\n10 8\n5 3\n4 3\n\nSample Output-1:\n\n5\n\nSample Input-2:\n\n6 1\n3\n6\n2\n5\n1\n4\n\nSample Output-2:\n\n3\n\n\n-----Constraints-----\n0 < n,m < 10^3\n\nConstraints\n\n\n\nSample Input-1:\n\n4 2\n9 9\n10 8\n5 3\n4 3\n\nSample Output-1:\n\n0\n\nSample Input-2:\n\n6 1\n3\n6\n2\n5\n1\n4\n\nSample Output-2:\n\n3\n\n\n-----Constraints-----\n0 < n,m < 10^3\n\nConstraints\n\n\n\nSample Input-1:\n\n4 2\n9 9\n10 8\n5 3\n4 3\n\nSample Output-1:\n\n0\n\nSample Input-2:\n\n6 1\n3\n6\n2\n5\n1\n4\n\nSample Output-2:\n\n3\n\n\n-----Constraints-----\n0 < n,m < 10^3\n\nConstraints\n\n\n\nSample Input-1:\n\n3 2\n6 1 3 6 9\n6 2 9 3 5 6\n6 4 5 7 3\n6 3 6 5 7 8\n6 4 5 6 9 7\n6 4 6 7 9 8\n6 4 7 5 8 9\n6 4 6 9 7 8\n6 4 6 6 8 9\n6 4 6 6 9 8\n6 4 6 6 8 9\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9 8\n6 4 6 6 9"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '3'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(n) == 0, \"N\u00dcM TR\u0130\u011eLER\u0130N\"\nassert solution(n) == 1, \"N\u00dcM TR\u0130\u011eLER\u0130N\"\nassert solution(n) == 0, \"N\u00dcM TR\u0130\u011eLER\u0130N\"\nassert solution(n) == 0, \"N\u00dcM TR\u0130\u011eLER\u0130N\"\nassert solution(n) == 1, \"N\u00dcM TR\u0130\u011eLER\u0130N\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, \"xxxiii\") == 1\nassert solution(5, \"xxoxx\") == 0\nassert solution(5, \"xxoxxxx\") == 0\nassert solution(5, \"xxxxxxxxxx\") == 0\nassert solution(5, \"xxxiiii\") == 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(6) == 1\nassert solution(5) == 0\nassert solution(10) == 8\nassert solution(5) == 3\nassert solution(33) == 5\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"No solution\"\n\nSolution:"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(13) == 1\nassert solution(19) == 2\nassert solution(48) == 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(6, \"xxxiii\") == 1, \"The first line does not contain a number\"\nassert solution(5, \"xxoxx\") == 0, \"The second line does not contain a number\"\nassert solution(10, \"xxxxxxxxxx\") == 8, \"The third line does not contain a number\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"z\") == \"\"\nassert solution(\"12\") == \"3\"\nassert solution(\"aab\") == \"a\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), 'Expected \\'\\xA0\\xA1\\xA2\\xA3\\xA4\\xA5\\xA6\\xA7\\xA8\\xA9\\xAA\\xAB\\xAC\\xAD\\xAE\\xAF\\xB0\\xB1\\xB2\\xB3\\xB4\\xB5\\xB6\\xB7\\xB8\\xB9\\xBA\\xBB\\xBC\\xBD\\xBE\\xBF\\xC0\\xC1\\xC2\\xC3\\xC4\\xC5\\xC6\\xC7\\xC8\\xC9\\xCA\\xCB\\xCC\\xCD\\xCE\\xCF\\xD0\\xD1\\xD2\\xD3\\xD4\\xD5\\xD6\\xD7\\xD8\\xD9\\xDA\\xDB\\xDC\\xDD\\xDE\\xDF\\xE0\\xE1\\xE2\\xE3\\xE4\\xE5\\xE6\\xE7\\xE8\\xE9\\xEA\\xEB\\xEC\\xED\\xEE\\xEF\\xF0\\xF1\\xF2\\xF3\\xF4\\xF5\\xF6\\xF7\\xF8\\xF9\\xFA\\xFB\\xFC\\xFD\\xFE\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"48\"\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0') == 0\nassert solution('1') == 1\nassert solution('2') == 4\nassert solution('3') == 27\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == \"1\"\nassert solution(3) == \"2\"\nassert solution(4) == \"8\"\nassert solution(5) == \"243\"\nassert solution(6) == \"81\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"48\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"48\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 48\n\n-----Quick-hack solution-----\ninput: 4\noutput: 48\n\nassert solution(input) == 48\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n24\n\nThe area of the regular dodecagon is 3 \\times 3^2 = 24.\n\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"4\\\") == \\\"48\\\"\nassert solution(\\\"2\\\") == \\\"2\"\nassert solution(\\\"3\\\") == \"\\\"\nassert solution(\\\"1\\\") == \"1\"\nassert solution(\\\"0\\\") == \"0\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5\") == 48, \"The function'solution' returns wrong value\""
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"48\"\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"48\""
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(solution) == \"unsafe\"\nassert solution(solution) == \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"safe\" or \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 7\") == \"unsafe\"\nassert solution(\"1 1\") == \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('10 20'), 'unsafe'\nassert solution('1000 5'),'safe'\nassert solution('100000000'),'safe'\nassert solution('10000000000'),'safe'\nassert solution('100100000'),'safe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"unsafe\",\"unsafe\",\"unsafe\",\"safe\"]) == \"safe\"\nassert solution([\"unsafe\",\"unsafe\",\"unsafe\",\"safe\",\"safe\",\"safe\"]) == \"safe\"\nassert solution([\"unsafe\",\"unsafe\",\"unsafe\",\"safe\",\"safe\",\"safe\",\"safe\",\"safe\"]) == \"safe\"\nassert solution([\"unsafe\",\"unsafe\",\"unsafe\",\"safe\",\"safe\",\"safe\",\"safe\",\"safe\",\"safe\",\"safe\",\"safe\",\"safe\"]) == \"safe\"\nassert solution([\"unsafe\",\"unsafe\",\"unsafe\",\"safe\",\"safe\",\"unsafe\",\"safe\",\"safe\",\"unsafe\",\"unsafe\",\"unsafe\",\"unsafe\",\"unsafe\"]) == \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('unsafe') =='safe'\nassert solution('unsafe') == 'unsafe'\nassert solution('safe') == 'unsafe'\nassert solution('unsafe') == 'unsafe'"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"2 4\") == \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"Your function should return 'unsafe' if the number of sheep <= 0, or'safe' if that number of sheep > 0.\""
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"unsafe\"\nassert solution(input) == \"safe\"\nassert solution(input) == \"safe\"\nassert solution(input) == \"safe\"\nassert solution(input) == \"safe\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nassert solution(\"2 4 6\") == \"4\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"1 4 2\") == \"12\"\nassert solution(\"1 4 5\") == \"120\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '6'\nassert solution(input()) == '6'\nassert solution(input()) == '6'\nassert solution(input()) == '6'\nassert solution(input()) == '6'\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"6\"\n\nprint(\"Congrats, you solved the correct triangle\")\nprint(\"A = 90\", \"B = 60\", \"C = 45\")\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 4 5') == 6\nassert solution('3 4 2') == 11\nassert solution('2 2 2') == 2\nassert solution('3 2 1') == 3\nassert solution('1 1 1') == 1\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(problem) == '6'\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 4 5') == '6'\nassert solution('4 5 6') == '6'\nassert solution('3') == '3'\nassert solution('123 456') == '123'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 4 5') == '6'\nassert solution('5') == '0'\nassert solution('2') == '0'\nassert solution('4') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"6\"\n\ninput:\n6\n1 4\n2 5\n3 6\n4 5\n5 2\n\noutput:\n6\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"6\""
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 4 5') == 6\nassert solution('5') == 5\nassert solution('3') == 1\nassert solution('5') == 2\nassert solution('3 2') == 5\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2\", \"10\", \"7\"]) == \"1\"\nassert solution([\"3\", \"4\", \"1\"]) == \"1\"\nassert solution([\"3\", \"4\", \"1\", \"3\", \"4\"]) == \"3\"\nassert solution([\"3\", \"4\", \"1\", \"3\", \"4\", \"1\"]) == \"4\"\nassert solution([\"5\", \"5\"]) == \"1\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 4\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"16\"\nassert solution(input()) == \"32\"\nassert solution(input()) == \"6\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 164 165 166 167 168 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 190 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 210 211 212 213 214 215 216 217 218 219 219 220 221 222 223 224 225 226 227 228 229 229 230 231 232 233 234 235 236 237 238 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4, 'incorrect'\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['5', '6', '10', '2', '3', '2']) == '5'\nassert solution(['2', '3', '3', '3', '3', '2']) == '6'\nassert solution(['6', '5', '5', '5', '5', '6']) == '10'\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 190 191 190 192 191 194 195 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 1, 1, 1) == 1\nassert solution(4, 1, 1, 1) == 4\nassert solution(2, 2, 2, 2) == 3\nassert solution(3, 2, 2, 2) == 3\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"2 11 4\"\n) == \"4\""
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(['2','10','4','8']) == '4'\nassert solution(['3','5','9','10']) == '4'\nassert solution(['4','7','9','10']) == '3'\nassert solution(['4','10','10','10']) == '3'\nassert solution(['5','10','10','10']) == '2'\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"10\"\nassert solution(\"9 7 8 2 3 4\") == \"22\"\nassert solution(\"8 9 2 4 3\") == \"9\"\nassert solution(\"2 1 3\") == \"1\"\nassert solution(\"8 9\") == \"8\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 4\") == \"4\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"3 4\") == \"4\"\nassert solution(\"2 4\") == \"4\"\nassert solution(\"4 4\") == \"4\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 10\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '10'\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"5\", \"2\"]) == \"10\"\nassert solution([\"1\", \"9\"]) == \"13\"\nassert solution([\"10\", \"7\", \"9\"]) == \"14\"\nassert solution([\"2\", \"8\"]) == \"16\"\nassert solution([\"9\", \"4\", \"4\", \"4\", \"4\"]) == \"18\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(6, 5) == 10\nassert solution(4, 3) == 10\nassert solution(8, 8) == 10\nassert solution(2, 1) == 1\nassert solution(1, 2) == 2\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 10, \"The result is wrong\"\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == 10"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == 10\nassert solution(\"2 3\") == 15\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '10'"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 5 7\") == \"10\"\nassert solution(\"5 2 7\") == \"5\"\nassert solution(\"5 3 7\") == \"5\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('4 5 7') == 11\nassert solution('4 4 2') == 2\nassert solution('2 1 4') == 2\nassert solution('2 2 2') == 2\nassert solution('1 3 3') == 1\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"A 3 5 7\") == 10\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"2 1\", \"2 5\", \"1 4\", \"4 3\", \"3 1\"]) == 5\nassert solution([\"2 1\", \"1 4\", \"3 1\", \"1 4\", \"1 5\"]) == 5\nassert solution([\"2 1\", \"1 3\", \"1 4\", \"1 3\", \"1 5\", \"4 1\"]) == 13\nassert solution([\"2 1\", \"1 2\", \"1 1\", \"1 1\", \"1 2\"]) == 0\nassert solution([\"2 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\"]) == 0\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 4 8 10\") == \"10\"\nassert solution(\"3 5 7\") == \"10\"\nassert solution(\"3 6 8 10\") == \"12\"\nassert solution(\"3 7 5 8 10\") == \"12\"\nassert solution(\"3 9 7 10\") == \"12\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"10\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('', 0, '', 0.5) == 1\nassert solution('', 10, '', 0.5) == 10\nassert solution('', 3, '', 0.5) == 7\nassert solution('', 5, '', 0.5) == 20\nassert solution('', 7, '', 0.5) == 28\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"10\"\n\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"OK\"\n\n-----Sample Input-----\n15\n600 250\n\n-----Sample Output-----\nNG\n\nAn integer is a multiple of K, and at least one is a multiple of A.\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"OK\"\nassert solution(stdin) == \"NG\"\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(7) == \"OK\"\nassert solution(500) == \"NG\"\nassert solution(600) == \"NG\"\nassert solution(1) == \"OK\"\nassert solution(\"\") == \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"OK\"\n\nRuntime: 567 ms, faster than 96.09% of Python3 online submissions for Carry Distance.\nMemory Usage: 17.8 MB, less than 80.52% of Python3 online submissions for Carry Distance.\n'''\n\nclass Solution:\n    def checkCarryDistance(self, A, K):\n        carry = 0\n        for i in range(A):\n            if carry == K:\n                carry = 0\n            elif carry < K:\n                carry += A\n            else:\n                carry -= A\n        \n        if carry == K:\n            return \"OK\"\n        else:\n            return \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"567\") == \"NG\"\nassert solution(\"1234\") == \"OK\""
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"OK\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('567') == 'OK', 'Failed to get \"OK\"'\nassert solution('900') == 'NG', 'Failed to get \"NG\"'\n\"\"\"\nimport sys"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 6\") == \"OK\"\nassert solution(\"6 7\") == \"NG\"\nassert solution(\"7 7\") == \"NG\"\nassert solution(\"1 1\") == \"OK\"\nassert solution(\"0 0\") == \"OK\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"Hello, World\") == \"OK\", \"Hello, World\"\nassert solution(\"Hello, world\") == \"NG\", \"Hello, world\""
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4\\n100\\n1\\n15\\n1\\n5\") == \"NG\"\nassert solution(\"1\\n5\\n200\\n200\\n200\\n200\\n201\") == \"OK\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2.6666666667\"\nassert solution(input) == \"3.3333333333\"\nassert solution(input) == \"5.0\"\nassert solution(input) == \"5\"\nassert solution(input) == \"3\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '2.6666666667'"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '2.6666666667'\nassert '0' not in str(solution(input))\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2.6666666667\"\n'''"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2.6666666667'\n\n\n------Learned on: Kestar & Wright)\nTo see the code in the editor, I simply type your code.\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"2.6666666667\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == '2.333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2.6666666667\"\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\""
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, \"2 1\") == \"2\"\nassert solution(1, \"2 1\") == \"2\"\nassert solution(4, \"3 3\") == \"1\"\nassert solution(2, \"3 3\") == \"2\"\nassert solution(5, \"3 3\") == \"1\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '1'"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 3 5') == '15'\n\nassert solution('3 6 4') == '13'\n\nassert solution('3 2 6') == '14'"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(fib), 'fib'\nassert solution(bb), 'bb'\nassert solution(cc), 'cc'\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"1\"\n\nassert solution(inp) == \"1.0\"\n\nassert solution(inp) == \"1.1\"\n\nassert solution(inp) == \"1.0.0\"\n\nassert solution(inp) == \"1.5\""
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"1\"\n'''\n\nfrom sys import stdin"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['6', '4', '3']) == '1'\nassert solution(['5', '4', '3']) == '2'\nassert solution(['3', '4', '5']) == '3'\nassert solution(['2', '2', '2']) == '1'\nassert solution(['1', '1', '1']) == '0'"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 6 3\") == \"1\"\nassert solution(\"3 4 3\") == \"2\"\nassert solution(\"2 2 1\") == \"0\"\nassert solution(\"2 4 1\") == \"1\"\nassert solution(\"1 3 2\") == \"1\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1 2 3 3\") == \"3\"\nassert solution(\"1 1 2 3\") == \"2\"\nassert solution(\"3 3 2 1\") == \"3\"\nassert solution(\"4 4 4\") == \"1\"\nassert solution(\"4 4 4\") == \"2\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"3\""
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3 2\") == \"3\"\nassert solution(\"3 1 2\") == \"3\"\nassert solution(\"3 1 3\") == \"3\"\nassert solution(\"3 2 1\") == \"1\"\nassert solution(\"3 3 2\") == \"3\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"3\""
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"6 5 7 4\"\n) == 4\nassert solution(\n    \"2 3 1 4\"\n) == 3\nassert solution(\n    \"5 2 4 3\"\n) == 5\nassert solution(\n    \"1 2 3 4 5 6 7 8 9\"\n) == 15\nassert solution(\n    \"1 4 1 2 3 5 6\"\n) == 15\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"3 1 2 3 4\") == \"6\"\nassert solution(\"3 3 3 3 2\") == \"6\"\nassert solution(\"5 1 2 3 4 5\") == \"6\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3') == '3'"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"9\"\nassert solution(input()) == \"6\""
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3 1\") == \"3\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 3 2\") == \"3\"\nassert solution(\"1 3 4\") == \"2\"\nassert solution(\"2 3 1\") == \"1\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"ATCODER\"\n    ) == 6\nassert solution(\"ATCODER\") == 6\nassert solution(\"ATCODERAAACGGTCCAACGTATGGCCTCTGTT\") == 7\nassert solution(\"A\") == 5\nassert solution(\"AATCG\") == 3\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(S) == \"TCODER\"\nassert solution(S) == \"ATCODER\"\nassert solution(S) == \"ATCODER\"\nassert solution(S) == \"CODER\"\nassert solution(S) == \"CODER\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('ATCODER') == 'AC'\nassert solution('ATCA') == 'AC'\nassert solution('CT') == 'CT'\nassert solution('ATCTT') == 'CT'\nassert solution('ACCTCTTCA') == 'ACCTCTTC'\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(a) == 'AC'\nassert solution(a) == 'A'\nassert solution(a) == 'T'\nassert solution(a) == 'A'\nassert solution(a) == 'AC'\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3, \"The length of the longest ACGT string is 3\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ATCODER\") == \"AC\", \"Fail\"\nassert solution(\"AT\") == \"TC\", \"Fail\"\nassert solution(\"A\") == \"A\", \"Fail\"\nassert solution(\"TC\") == \"TC\", \"Fail\"\nassert solution(\"AAC\") == \"AC\", \"Fail\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"ATCODER\") == 3\n\n\nExample 1:\nInput:\n\n[\"ACG\", \"A\"]\nOutput:\n\"A\"\nExplanation:\nThe substrings of ATCODER are ATC, BCA and GCA.\n\nExample 2:\nInput:\n\n[\"TATCGCAT\", \"CGATCTT\", \"TACGCTC\"]\nOutput:\n\"T\"\nExplanation:\nThe substrings of TATCGCTCGCAATCGCAT are TATCGCTCGCAATCGCAT, TATCGCTCGCAATCGATCGCAT, TATCGCTCGCAATCGATCGATCGCAT.\n\nExample 3:\nInput:\n\n[\"AAACTA\", \"CAAATCA\", \"TTTCTGG\", \"AGGCCCC\"]\nOutput:\n\"G\"\nExplanation:\nThe substrings of AAACTAAAACTAAAACTAAAACTAAAACTA are AACTAAAACTAAAACTAAAACTAAAACTA.\n\nExample 4:\nInput:\n\n[\"ACG\", \"A\", \"ATC\", \"CTC\", \"C\"]\nOutput:\n\"A\"\nExplanation:\nThe substrings of ACG, ACG, A, C, C are ACG, A, C, C, C.\n\nConstraints:\n\n- 2 <= len(S) <= 100\n- S consists of only uppercase English letters.\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"TCODER\", \"There is no ACGT string in the input string\"\nassert solution(stdin) == \"AAC\", \"There are several ACGT strings in the input string\"\nassert solution(stdin) == \"AC\" and \"T\" not in stdin, \"There are several ACGT strings in the input string\""
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ATCODER\") == \"CTA\"\nassert solution(\"ATCGGAATCGAAGACTCGACAC\") == \"CTAACGCAAGAC\"\nassert solution(\"ACTA\") == \"CTA\"\nassert solution(\"ATCGGA\") == \"CTA\"\nassert solution
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('ATCODER') == 'TCODER'\nassert solution('ATCODERATCODER') == 'TCODERATCODER'\nassert solution('ATCODERAT') == 'TCODERAT'\nassert solution('ATCODERACTCODER') == 'TCODERACTCODER'\nassert solution('ATCODERACTC') == 'TCODERACTC'\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(get_input()) == 9\nassert solution(get_input()) == 9\nassert solution(get_input()) == 9\nassert solution(get_input()) == 9\nassert solution(get_input()) == 9\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == 5\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 9\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"9\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 9\n\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(problem) == \"9\"\n\n'''"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    '10:2',\n    '10',\n    '12',\n    3\n) == 9, \"Bad input\"\nassert solution(\n    '13:2',\n    '13',\n    '12',\n    3\n) == 6, \"Bad input\"\nassert solution(\n    '43:2',\n    '43',\n    '50',\n    2\n) == 10, \"Bad input\"\nassert solution(\n    '43:2',\n    '43',\n    '50',\n    1\n) == 10, \"Bad input\"\nassert solution(\n    '33:3',\n    '33',\n    '35',\n    2\n) == 7, \"Bad input\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"11\"]) == \"9\"\nassert solution([\"3\", \"2\"]) == \"9\"\nassert solution([\"5\", \"6\"]) == \"6\"\nassert solution([\"9\", \"8\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(A) == str(A)\n\"\"\"\nclass Solution:\n    def oddNumber(self, N: int) -> str:\n        solution = ''\n        for i in range(1,N+1):\n            if(i%2!=0):\n                solution+=str(i)\n            else:\n                solution+='0'\n        return solution\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1') == '9'\nassert solution('3') == '3'\nassert solution('1') == '1'\nassert solution('0') == '1'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"hooloo\") == \"thix\"\nassert solution(\"cafes\") == \"foht\"\nassert solution(\"hoo\") == \"hool\"\nassert solution(\"bo\") == \"boh\"\nassert solution(\"c\") == \"c\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"cupofcoffee\") == \"4\"\nassert solution(\"cupofhottea\") == \"3\"\nassert solution(\"abtucpofa\") == \"0\"\nassert solution(\"a\") == \"0\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"T\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"52\"\nassert solution(inp) == \"13\"\nassert solution(inp) == \"73\"\n\"\"\"\nclass Solution:\n    def minOperations(self, str1: str, str2: str) -> int:\n        if str1 == str2: return 0\n        \n        #print(\"str1: \", str1)\n        #print(\"str2: \", str2)\n        l1 = len(str1)\n        l2 = len(str2)\n        \n        s1 = set(str1)\n        s2 = set(str2)\n        \n        cnt = 0\n        for c in s1:\n            if c not in s2:\n                cnt += 1\n        \n        #print(\"cnt: \", cnt)\n        for c in s1:\n            if c not in s2:\n                if c in str1 or c in str2:\n                    cnt += 1\n                else:\n                    cnt += 2\n        #print(\"cnt+2: \", cnt)\n        #print(\"cnt: \", cnt)\n        \n        if cnt <= l1:\n            return cnt\n        if cnt <= l2:\n            return cnt + 2\n        \n        #print(\"--------\")\n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '5'\n\n'''\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ccupofcoffee\") == \"3\"\nassert solution(\"ccupofhottea\") == \"6\"\nassert solution(\"cupofcoffee\") == \"3\"\nassert solution(\"cupofhottea\") == \"6\"\nassert solution(\"cupofcoffee\") == \"0\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(str) == \"5\", \"Incorrect solution\""
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['w','e','c','f','o','a','t','c']), 'Invalid input'\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 11\n\"\"\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5 6 7 8 9\"\nassert solution(input()) == \"5 6 7 8 9\"\nassert solution(input()) == \"5 6 7 8 9\"\nassert solution(input()) == \"5 6 7 8 9\"\nassert solution(input()) == \"5 6 7 8 9\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == [\"3 2 4 1\"]\nassert solution(\"2 4\") == [\"2 4 5\"]\nassert solution(\"5 3\") == [\"5 3 6\"]\nassert solution(\"1 2\") == [\"1 2 5\"]\nassert solution(\"6 7\") == [\"6 7 8 9\"]\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"5 7 8 9\"\nassert solution(\"5 2\") == \"5 6 7 8 9\"\nassert solution(\"4 5\") == \"4 6 7 8 9\"\nassert solution(\"4 3\") == \"4 5\"\nassert solution(\"3 7\") == \"7 8 9\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['3 7', '7 2', '1 3', '1 6', '1 4']) == '6 7 8 9'\nassert solution(['3 7', '7 2', '1 6', '1 4', '1 5']) == '5 6 7 8 9'\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"5 6 7 8 9\"\nassert solution(\"0 1\") == \"5 6 7 8 9\"\nassert solution(\"0 1 3\") == \"5 6 7 8 9\"\nassert solution(\"0 3 5\") == \"5 6 7 8 9\"\nassert solution(\"3 7\") == \"5 6 7 8 9\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 7'), '3 7'\nassert solution('3 6'), '6 7 8 9'\nassert solution('3 7 9 8 9'), '7 6 8 9 3 9'\nassert solution('6 6 7 8 9'), '6 7 8 9 6 7 9'\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 4') == '5 6 7 8 9'\nassert solution('3 3 3 3 3') == '5 6 7 8 9'\nassert solution('1 1 1') == '0 1'\nassert solution('1 3 0') == '0 0 0'\nassert solution('1 2 0') == '0 0'\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == solution(input())\n\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    \"\"\"\n    Accepted\n    Complexity\n    Best Case: O(n)\n    Worst Case: O(n^2)\n    Space: O(n^2)\n    \"\"\"\n    def two_stones(self, stones: List[int]) -> List[int]:\n        pass\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nassert solution(\"3 2\") == \"5 6 7 8 9\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 3\") == \"1 3\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2 5 7 3\") == \"5 6 7 8 9\"\nassert solution(\"5 4 9 5 5\") == \"5 4 9 5 5\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(int(stdin)) == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"15\") == \"Yes\"\nassert solution(\"25\") == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\" or solution(stdin) == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\""
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(raw_input()) == 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\".;.A.x.A.x.A.x;.A.x.A.x;.A.x.A.x;.A.x.A.x;.A.x.A.x;.A.x.A.x;.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x.A.x;.A.x.A.x"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"-39\") == \"Yes\"\nassert solution(\"-34\") == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 'No'\nassert solution(input()) == 'Yes'\nassert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 2') == '1'\nassert solution('1 2') == '1'\nassert solution('5 5') == '1'\nassert solution('-2 8') == '0'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"-2 8\") == \"1\"\nassert solution(\"1 2 -2\") == \"2\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\""
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"-5 -5\") == \"2\"\nassert solution(\"1 2 -2\") == \"2\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"2\"\nassert solution(\"5 5 -8 2\") == \"3\"\nassert solution(\"-2 8\") == \"1\"\nassert solution(\"1 2 -5 -2\") == \"1\"\nassert solution(\"2 3 -5 8\") == \"1\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"-2 8\") == \"0\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n  3 2\n  1 2\n  5 5\n-2 8\n\"\"\") == \"1\"\nassert solution(\"\"\"\n  3 2\n  1 2\n  5 5\n-2 8\n\"\"\") == \"1\"\nassert solution(\"\"\"\n  3 2\n  1 2\n  5 5\n-2 8\n\"\"\") == \"1\"\nassert solution(\"\"\"\n  3 2\n  1 2\n  5 5\n-2 8\n\"\"\") == \"1\"\nassert solution(\"\"\"\n  3 2\n  1 2\n  5 5\n-2 8\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3776) == 'Bad'\nassert solution(5679) == 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3776) == 'Bad'\nassert solution(3757) == 'Good'\nassert solution(3759) == 'Bad'\nassert solution(3764) == 'Bad'\nassert solution(3757) == 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3776) == 'Bad'\nassert solution(3776) == 'Good'\nassert solution(3181) == 'Good'\nassert solution(3121) == 'Good'\nassert solution(3110) == 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Bad\" or solution(stdin) == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == 'Bad'\nassert solution(3) == 'Good'"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3776) == 'Bad'\nassert solution(3775) == 'Good'\nassert solution(3773) == 'Good'\nassert solution(3788) == 'Good'\nassert solution(3799) == 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3776) == \"Bad\"\nassert solution(5) == \"Good\"\nassert solution(\"5\") == \"Good\"\nassert solution(\"0\") == \"Good\"\nassert solution(\"3\") == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Good\"\nassert solution(stdin) == \"Bad\"\nassert solution(stdin) == \"Good\"\nassert solution(stdin) == \"Bad\"\nassert solution(stdin) == \"Good\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == '3.5'\nassert solution(inp) == '3.3'\nassert solution(inp) == '3.2'\nassert solution(inp) == '3'\nassert solution(inp) == '0'\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '3.5'\nassert solution(input) == '3.5'\nassert solution(input) == '3.50001'\nassert solution(input) == '3.49999'\nassert solution(input) == '3.3'\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"3.5\"\nassert solution(\"3 1\") == \"3.5\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"2 1\") == \"2\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2') == 2\nassert solution('3 4') == 4.5\nassert solution('3 4 3 4 5') == 3.5\nassert solution('1 2 3 4 5') == 5\nassert solution('1 1 1 1 1') == 1\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3.5\"\nassert solution(stdin) == \"3.49999\"\nassert solution(stdin) == \"3.4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"2 4\"\n) == \"3.50001\"\nassert solution(\n    \"2 3\"\n) == \"3.49999\"\nassert solution(\n    \"2 3 2\"\n) == \"3.50001\"\nassert solution(\n    \"2 3 2 1\"\n) == \"3.49999\"\nassert solution(\n    \"2 2 2 2\"\n) == \"3.49999\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stderr(input(), 2)) == '3.5'\nassert solution(stderr(input(), 3)) == '3.25'\nassert solution(stderr(input(), 4)) == '3.2'\nassert solution(stderr(input(), 5)) == '3.1'\nassert solution(stderr(input(), 6)) == '3'\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"4 4 3\") == \"3.5\"\nassert solution(\n    \"1 2 3 4\") == \"3.5\"\nassert solution(\n    \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 63 64 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 165 166 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 246 247 248 249 250 251 252 253 253 255 256 257 258 259 260 261 262 266 268 268 269 290 291 292 293 296 294 295 295 296 296 297 298 299 299 300 301 301 302 304 305 306 308 309 310 311 311 312 313 315 316 317 318 329 330 330 331 332 333 333 334 334 335 336 337 336 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 3 4 5 6 7 8 9 10\") == \"3.333333333333333\"\nassert solution(\"2 2 2 2\") == \"2\"\nassert solution(\"2 4 4 4 4 4\") == \"5\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"6.5\"\nassert solution(\"1 6 6 6 6\") == \"6\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3.5\"\n\n### Below is another example of the solution.\n###You have a pot and N ingredients. Each ingredient has a real number parameter called value, and the value of the i-th ingredient (1 \\leq i \\leq N) is v_i.\n###When you put two ingredients in the pot, they will vanish and result in the formation of a new ingredient. The value of the new ingredient will be (x + y) / 2 where x and y are the values of the ingredients consumed, and you can put this ingredient again in the pot.\n###After you compose ingredients in this way N-1 times, you will end up with one ingredient. Find the maximum possible value of this ingredient.\n###"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 17\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '14'"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"3 1 2\"\n) == 7, \"wrong solution\"\nassert solution(\n    \"2 5 4\"\n) == 14, \"wrong solution\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"14\"\nassert solution(\"2 5 4\") == \"15\"\nassert solution(\"3 6\") == \"22\"\nassert solution(\"4 5\") == \"20\"\nassert solution(\"3 7\") == \"25\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 2 4 3 7\") == \"10\"\nassert solution(\"5 3 1 2\") == \"10\"\nassert solution(\"5 4 6 7\") == \"11\"\nassert solution(\"5 4 3\") == \"11\"\nassert solution(\"5 4 1\") == \"11\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 3 2\") == \"14\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 5 4\") == \"5\"\nassert solution(\"3 4 4\") == \"8\"\nassert solution(\"4 5 4\") == \"8\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '40'\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 14\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '14', \"The solution to this problem is invalid\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 3 6\") == \"14\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(list(map(str, input().split()))) == 2\nassert solution(list(map(str, input().split()))) == 2\nassert solution(list(map(str, input().split()))) == 1\nassert solution(list(map(str, input().split()))) == 1\nassert solution(list(map(str, input().split()))) == 1\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution( \"ZABCDBABCQ\" ) == 2\nassert solution( \"ABC\" ) == 1\nassert solution( \"ABC\" ) == 1\nassert solution( \"ABC\" ) == 1\nassert solution( \"ABC\" ) == 1\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('ZABCDBABCQ') == 2\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2\nassert solution(\"AACD\") == 4\nassert solution(\"AACBAABACAAC\") == 4\nassert solution(\"ABCB\") == 4\nassert solution(\"ABCB\") == 5\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('ZABCDBABCQ') == 2\nassert solution('ABCABCAAC') == 5\nassert solution('C') == 1\nassert solution('B') == 1\nassert solution('A') == 0\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n'''\n\nfrom itertools import permutations\n\nclass Solution:\n    def findSubstring(self, S: str, words: List[str]) -> int:\n        if len(S) == 0:\n            return 0\n        count = 0\n        for i in range(len(S)):\n            for j in range(i, len(S)):\n                if S[i:j+1] in words:\n                    count += 1\n        return count"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ZABCDBABCQ\"), 4\nassert solution(\"abcde\"), 1\nassert solution(\"abcdef\"), 2\nassert solution(\"abcdefg\"), 2\nassert solution(\"defq\"), 1\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('ABBACD') == 1\nassert solution('ABAB') == 2\nassert solution('ZABCD') == 6\nassert solution('ABCD') == 0\nassert solution('ABC') == 0\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n)\nassert solution(\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n)\nassert solution(\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n)\nassert solution(\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n        string\n)\n\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('MASHIKE') == '2'\nassert solution('RUMOI') == '2'\nassert solution('OBIRA') == '2'\nassert solution('HABORO') == '2'\nassert solution('HOROKANAI') == '3'\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == 2\nassert solution(1) == 0\nassert solution(2) == 2\n\"\"\"\n\nimport math"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2\"\n\"\"\"\nimport sys\nfrom io import StringIO\n\ninput = sys.stdin.readline"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"M\") == \"2\"\nassert solution(\"R\") == \"3\"\nassert solution(\"H\") == \"4\"\nassert solution(\"O\") == \"2\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n\n-----Sample Execution-----\nInput:\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n\nOutput:\n3\n\nExplanation:\nMethod 1:\nWe can choose three people, so that the given conditions are met.\nSo, we have 2 ways.\n- MASHIKE, RUMOI, HABORO\n- MASHIKE, RUMOI, HOROKANAI\n\nMethod 2:\nWe can choose three people, so that the given conditions are not met.\nSo, we have no ways.\n\"\"\"\n\nN = int(input())\nS_1 = input()\nS_N = list(input())"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '2'\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n\n-----Sample Input-----\n3\nMASHIKE\nOBIRA\nHABORO\n\n-----Sample Output-----\n3\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"2\"\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"MASHIKE\") == \"2\"\nassert solution(\"MASHIKE\", \"RUMOI\") == \"3\"\nassert solution(\"MASHIKE\", \"HABORO\", \"OBIRA\") == \"1\"\n\"\"\"\n\nN = int(input())\npeople = {}\nfor i in range(N):\n    name, gender = input().split()\n    if gender.isupper():\n        name = name.lower()\n        if name not in people:\n            people[name] = []\n        people[name].append(i+1)\n    elif name not in people:\n        people[name] = []\n    people[name].append(i+1)\n\nfor i in sorted(people):\n    print(i, people[i])\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == 'Yes'\nassert solution('2') == 'No'\nassert solution('3') == 'No'\nassert solution('4') == 'Yes'\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('cba') == 'No'\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\")\"\nassert solution(\"(\"\nassert solution(\"\")\nassert solution(\"()\")\nassert solution(\"()(())\")\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 'Yes'\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\n\n'''\n\nimport math\nfrom typing import Any, Tuple, Dict"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(str(N//2)) == \"Yes\"\nassert solution(str(M//2)) == \"No\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(sippuu) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"tist\") == \"No\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"sippuu\") == 'Yes'\nassert solution(\"sippuui\") == 'No'\n\nassert solution(\"d\") == 'No'\nassert solution(\"\") == 'No'\nassert solution(\"puu\") == 'Yes'\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(sippuu) == \"Yes\"\nassert solution(sippuu) == \"No\"\nassert solution(sippuu) == \"No\"\nassert solution(sippuu) == \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input), 'Error'\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuu\") == \"No\"\n\n--------Sample Output for Submitted Answer--------\nYes\nNo\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(sippuu) == \"Yes\"\nassert solution(sippuu) == \"No\"\n\n### Exercise\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuu\") == \"No\"\nassert solution(\"abcde\") == \"No\"\nassert solution(\"aabbb\") == \"Yes\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(sippuu) == \"Yes\"\n\n\"\"\"\nclass Solution:\n    def isCoffee(self, s: str) -> bool:\n        # if len(s) == 3:\n        #     return s == '0' + s[0:2] + s[2]\n        # elif len(s) == 4:\n        #     return s == '0' + s[0:2] + s[2:4] + s[4]\n        # elif len(s) == 5:\n        #     return s == '0' + s[0:2] + s[2:4] + s[4:6]\n        # elif len(s) == 6:\n        #     return s == '0' + s[0:2] + s[2:4] + s[4:6]\n        # else:\n        #     return False\n\n        if len(s) == 3:\n            return s == '0' + s[0] + s[2]\n        elif len(s) == 4:\n            return s == '0' + s[0:2] + s[2:4] + s[4]\n        elif len(s) == 5:\n            return s == '0' + s[0:2] + s[2:4] + s[4:6]\n        elif len(s) == 6:\n            return s == '0' + s[0:2] + s[2:4] + s[4:6]\n        else:\n            return False\n        pass"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == \"Yes\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 7) == 4\nassert solution(7, 7) == 0\nassert solution(5, 5) == 2\nassert solution(5, 10) == 6\nassert solution(3, 30) == 1\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '70'\n\n\n\n---SAMPLE INPUT---\n3 7\n10\n7\n1\n4\n\n---SAMPLE OUTPUT---\n70\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '4'\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == 'TLE'\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 4 70\") == \"4\"\nassert solution(\"7 6 5 50\") == \"6\"\nassert solution(\"1 3 6 100\") == \"2\"\nassert solution(\"2 4 10\") == \"3\"\nassert solution(\"1 1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == 7\nassert solution(\"1 1 1 2\") == 6\nassert solution(\"3 7\") == 14\nassert solution(\"3 8 4\") == 8\nassert solution(\"2 5 1 4\") == 2\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"70\"\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 2 2\") == \"2\"\nassert solution(\"2 1 10\") == \"2\"\nassert solution(\"2 1 7\") == \"2\"\nassert solution(\"4 0 2\") == \"2\"\nassert solution(\"4 1 6\") == \"2\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 70\"\n) == \"7\"\n\nassert solution(\n    \"7 60\"\n) == \"7\"\n\nassert solution(\n    \"1 80\"\n) == \"4\"\n\nassert solution(\n    \"4 50\"\n) == \"1\"\n\npass\n---- Nguyen Van Duc ----"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 8\nassert solution(input('5')) == 8\nassert solution(input('0')) == 0\nassert solution(input('2')) == 5\nassert solution(input('4')) == 9\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 2 9\"), \"4 2 9\"\nassert solution(\"4 1 10\"), \"4 1 10\"\nassert solution(\"1 2 9\"), \"1 2 9\"\nassert solution(\"1 1 10\"), \"1 1 10\"\nassert solution(\"2 4 10\"), \"2 4 10\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 8\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['4','2','9']) == '8'\nassert solution(['4','2','9']) == '8'\nassert solution(['5','3','4','4','5','6','7','8']) == '8'\nassert solution(['6','7','8','9']) == '8'\nassert solution(['1']) == '1'\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"4\", \"2\", \"9\"]) == \"8\"\nassert solution([\"2\", \"9\"]) == \"8\"\nassert solution([\"3\", \"5\", \"7\"]) == \"8\"\nassert solution([\"4\", \"9\", \"9\", \"9\"]) == \"8\""
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"7\"\nassert solution(\"3 2\") == \"10\"\nassert solution(\"4 2\") == \"11\"\nassert solution(\"9 3\") == \"15\"\nassert solution(\"9 4\") == \"28\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(f\"{N} {A} {B}\") == \"8\""
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"N A B\") == 8\nassert solution(\"2 2 9\") == 8\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    'N A B',\n    '5 4 9',\n    '1 1'\n) == '8'\nassert solution(\n    'N A B',\n    '5 4 9',\n    '3 3'\n) == '3'\nassert solution(\n    'N A B',\n    '5 4 9',\n    '2 3'\n) == '3'\nassert solution(\n    'N A B',\n    '5 4 9',\n    '3'\n) == '0'\nassert solution(\n    'N A B',\n    '5 4 9',\n    '2'\n) == '0'\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"2\", \"4\", \"6\"]) == \"8\"\nassert solution([\"2\", \"4\", \"7\"]) == \"9\"\nassert solution([\"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"8\"\nassert solution([\"2\", \"5\", \"6\", \"7\"]) == \"9\"\nassert solution([\"1\", \"3\", \"5\", \"4\", \"6\", \"7\"]) == \"8\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('aabb'), 1\nassert solution('aabb') == 2\nassert solution('abc') == 1\nassert solution('abcde') == 3\nassert solution('abcd') == 2\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"acornistnt peanutbomb constraint\"\n) == 2\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"s_1\") == \"1\"\nassert solution(\"s_2\") == \"1\"\nassert solution(\"s_3\") == \"1\"\nassert solution(\"s_4\") == \"1\"\nassert solution(\"s_5\") == \"1\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('acornistnt') == '1'\nassert solution('peanutbomb') == '2'\nassert solution('constraint') == '1'\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2, \"acornistnt\") == 1\nassert solution(3, \"peanutbomb\") == 1\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"aabbccda\") == \"1\"\nassert solution(\"ababcdcd\") == \"2\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"2\"\nassert solution(\"aabbccddeeffghijklmnopqrstuvwxyz\") == \"1\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"s1\") == \"2\"\nassert solution(\"s2\") == \"1\"\nassert solution(\"s3\") == \"2\"\nassert solution(\"s4\") == \"1\"\nassert solution(\"s5\") == \"2\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 5\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution) == 1\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['1', '3', '20', '38', '56', '0', '1', '8', '2']) == '5'\nassert solution(['1', '3', '20', '38', '56', '0', '1', '8', '2']) == '2'\nassert solution(['1', '3', '20', '38', '56', '0', '1', '8', '2']) == '0'\nassert solution(['1', '3', '20', '38', '56', '0', '1', '8', '2']) == '1'\nassert solution(['1', '3', '20', '38', '56', '0', '1', '8', '2']) == '8'\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"8\"\n\n\nprint(solution(\"1\"))\nprint(solution(\"3\"))\nprint(solution(\"10\"))\n\nassert solution(\"1\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"1000000000\") == \"1\"\nassert solution(\"2132\") == \"1\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\n\nstdin:\n    1\n    5\n    1\n    10\n\nassert solution(stdin) == \"4\"\n\nstdin:\n    1\n    1\n    6\n    10\n\nassert solution(stdin) == \"0\"\n\nstdin:\n    1\n    2\n    9\n    11\n\nassert solution(stdin) == \"8\"\n\nstdin:\n    5\n    20\n    38\n    4\n    12\n    \nassert solution(stdin) == \"4\"\n\nstdin:\n    1\n    1\n    5\n    \n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 8\nassert solution(stdin) == 0\nassert solution(stdin) == 2\nassert solution(stdin) == 9\nassert solution(stdin) == 8\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1 4\", \"4 3\", \"3 5\", \"3 6\", \"5 2\", \"5 2\", \"5 2\"]) == \"1 2 1 1 2\"\nassert solution([\"1 4\", \"4 3\", \"3 5\", \"3 6\", \"5 2\", \"5 2\", \"5 2\"]) == \"1 1 1 1 1 1 1 1\"\nassert solution([\"1 4\", \"4 3\", \"3 5\", \"3 6\", \"5 2\", \"5 2\", \"5 2\"]) == \"1 1 1 1 1 1 1 1 1\"\nassert solution([\"1 4\", \"4 3\", \"3 5\", \"3 6\", \"5 2\", \"5 2\", \"5 2\"]) == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['10', '3', '1', '2', '3', '4', '5', '6', '7', '8', '9']) == '2'\nassert solution(['10', '3', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']) == '2'\nassert solution(['10', '4', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']) == '1'\nassert solution(['10', '3', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']) == '10'"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 10\nassert solution(input) == 10\nassert solution(input) == 10\nassert solution(input) == 10\nassert solution(input) == 10\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == 2, \"Incorrect answer\"\nassert solution(\"10 3\") == 1, \"Incorrect answer\"\nassert solution(\"1 2\") == 2, \"Incorrect answer\"\nassert solution(\"1 3\") == 1, \"Incorrect answer\"\nassert solution(\"1 4\") == 2, \"Incorrect answer\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"3 4\"\nassert solution(inp) == \"3 3 4\"\nassert solution(inp) == \"3 4\"\nassert solution(inp) == \"1 1 1\"\nassert solution(inp) == \"2\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '1'\n\"\"\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '1 2 1 1 2'"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 7\") == \"3 8\"\nassert solution(\"9 4\") == \"6 9\"\nassert solution(\"7 3 1\") == \"5 3\"\nassert solution(\"7 2 3 1\") == \"1 2\"\nassert solution(\"2 2 2\") == \"2\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"7 9\") == \"2 3 6\"\nassert solution(\"5 6\") == \"2\"\nassert solution(\"7 1\") == \"3\"\nassert solution(\"7 1 1\") == \"3 4\"\nassert solution(\"9 1 7\") == \"3\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(0) == \"1 1 3 3\"\nassert solution(1) == \"0 1 2 4\"\nassert solution(2) == \"0 1 2\"\nassert solution(3) == \"1 3 4\"\nassert solution(4) == \"2 2\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    '4'\n) == '3'\nassert solution(\n    '9'\n) == '3'\nassert solution(\n    '7'\n) == '3'\nassert solution(\n    '1 1 8 8 8 4 4 4 4'\n) == '3'\nassert solution(\n    '1 2 4 4'\n) == '3'\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 6\"\nassert solution(\"7\\n1 1 8 8 8 4 4 4 4\") == \"3 6\""
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"4\"\nassert solution(input) == \"5\"\nassert solution(input) == \"7\"\nassert solution(input) == \"10\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('9') == '3 6'\nassert solution('1 2') == '3 8'\nassert solution('2 3 1 4') == '3 6'\nassert solution('7 4 5 6') == '3 6'\nassert solution('7 3 1') == '3 6'\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"9\") == 3\nassert solution(\"7\") == 3\nassert solution(\"1\") == 1\nassert solution(\"4\") == 5"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2 4'\n\nassert solution(stdin) == '3 7'\n\nassert solution(stdin) == '3 6'"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\\n5\\n5\") == \"3\"\nassert solution(\"3\\n3\\n3\") == \"3\"\nassert solution(\"1\\n1\\n1\") == \"1\"\nassert solution(\"2\\n2\\n2\") == \"2\"\nassert solution(\"5\\n2\\n5\\n5\") == \"3\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3 2 4 1 5'\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"3 4\"\nassert solution(\"3 5\") == \"3 5\"\nassert solution(\"3 3\") == \"3 3\"\nassert solution(\"3 4\") == \"3 4\"\nassert solution(\"3 2\") == \"3 2\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3 2 4 1 5'\n\nInput\n3\n2 3\n3 1\n1 2\n\nOutput\n2 3 1 1\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == [\"3\",\"3\",\"1\",\"1\",\"2\",\"2\",\"1\",\"2\",\"1\",\"3\"]\n\n\n\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3 3 2 1 4\"\nassert solution(stdin) == \"3 3 2 1 5\"\nassert solution(stdin) == \"3 2 1 4 5\"\nassert solution(stdin) == \"3 1 2 3 4\"\nassert solution(stdin) == \"3 1 2 3 4\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == [3, 2, 4, 1, 5]\nassert solution(inp, 2) == [3, 2, 4, 1, 5]\nassert solution(inp, 3) == [1, 2, 3, 4, 5]\nassert solution(inp, 4) == [1, 2, 3, 4]\nassert solution(inp, 5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['3','2','3','1','4','2','5']) == [3,2,1,4,5,2,3]\nassert solution(['3','4','4','3']) == [1,3,4,2]\nassert solution(['1','2','1','3','3']) == [1,2,3,3,1]\nassert solution(['2','4','3','3']) == [1,2,3,3]\nassert solution(['2','4','3','4']) == [1,2,3,4]\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3 2 4 1 5\"\nassert solution(input()) == \"3 1 2\"\nassert solution(input()) == \"3 1 3\"\nassert solution(input()) == \"3 1 4\"\nassert solution(input()) == \"3 1 5\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == [2, 1, 3, 4, 5]\n\n\n-----Constraints-----\n1 <= n <= 50\n1 <= a_i <= 10^5\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 5 3 1 4\") == \"3 1 2 4 1 5\"\nassert solution(\n    \"3 5 3 1 4 2\") == \"3 1 2 4 1 5\"\nassert solution(\n    \"3 5 3 1 4 3\") == \"3 1 2 4 1 5\"\nassert solution(\n    \"3 5 3 1 4 4\") == \"3 1 2 4 1 5\"\nassert solution(\n    \"3 5 3 1 4 4 5\") == \"3 1 2 4 1 5\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"3\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= a_i <= 10^9\n\n0 <= std_i <= 10^9\n\nSample Input\n\n6\n1 1000 10000 10 100 1000000000\n\nSample Output\n\n3\n\"\"\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3, 'incorrect'\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('6') == '10'\nassert solution('10') == '10'\nassert solution('6') == '3'\nassert solution('2') == '2'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3\") == 3\nassert solution(\"7\") == 7\nassert solution(\"11\") == 11\nassert solution(\"1\") == 1\nassert solution(\"0\") == 0\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n\n1 <= n <= 2^5\n\n1 <= stdin.length <= 10000\nstdin.length <= 10^5\n\n1 <= a_1, a_2,..., a_n <= 100000\n\na_i >= 1\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '10'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 10\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 10 17 12 15 2\") == \"3\"\nassert solution(\"1 1000 10000 10 100 1000000000\") == \"3\"\nassert solution(\"1 1000 1000 10000 10 100 1000000000\") == \"3\"\nassert solution(\"1 1000 1000 10000 10 100 1000000000\") == \"3\"\nassert solution(\"1 1000 1000 10000 10 100 1000000000\") == \"3\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '-1'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3) == 0\nassert solution(6) == 3\nassert solution(9) == 6\nassert solution(10) == 0"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3\", \"0\"]) == \"0\"\nassert solution([\"3\", \"4\", \"0\"]) == \"0\"\nassert solution([\"3\", \"1\", \"1\"]) == \"0\"\nassert solution([\"4\", \"3\", \"2\"]) == \"0\"\nassert solution([\"3\", \"2\", \"2\"]) == \"0\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == str(0)\nassert solution(input()) == str(1)\nassert solution(input()) == str(2)\nassert solution(input()) == str(3)\nassert solution(input()) == str(4)\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 0\nassert solution(input()) == 1\nassert solution(input()) == 2\nassert solution(input()) == 3\nassert solution(input()) == 4\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\""
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(f) == '-1'\n\n\n-----Bonus-----\n\nIn the third example query Vova can just play $3$ turns and spend $3$ units of charge and then one turn play and charge and spend $1$ more units. So the remaining charge of the battery will be $1$.\n\nIn the fourth example query Vova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '-1'\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"False\""
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"24\"\nassert solution(input()) == \"2835\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"46\"\n'''"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(6) == 24\nassert solution(7) == 2835\nassert solution(9) == 0\nassert solution(5) == 46\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abcabcaa\") == \"24\"\nassert solution(\"aabca\") == \"0\"\nassert solution(\"aabcc\") == \"46\"\nassert solution(\"aaaaa\") == \"0\"\nassert solution(\"aaaaab\") == \"0\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 10\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"abc\"\nassert solution(\"a\") == \"abc\"\nassert solution(\"a\") == \"abc\"\nassert solution(\"a\") == \"abc\"\nassert solution(\"a\") == \"abc\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1,3) == \"12\"\nassert solution(4,3) == \"76\"\nassert solution(6,3) == \"83\"\nassert solution(3,3) == \"27\"\nassert solution(0,3) == \"0\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 24\n\"\"\"\nimport time\n\nn = int(input())\ns = input()"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 24, \"incorrect\""
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"a??b??c\"]) == \"24\"\nassert solution([\"a?b?c\"]) == \"0\"\nassert solution([\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a??b??c\",\"a"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 5\nassert solution(input) == 17\nassert solution(input) == 18\n\n\n---------------------\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 18\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\nassert solution(stdin) == 16"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"5\"\nassert solution(\"4 0\") == \"16\"\nassert solution(\"5 4\") == \"18\"\nassert solution(\"5 4\") == \"16\"\nassert solution(\"5 4\") == \"17\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"7 3 0 0 3\") == \"5\"\nassert solution(\"4 4 2 2\") == \"16\"\nassert solution(\"5 4 7\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"16\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"5\"\nassert solution(\"4 0\") == \"7\"\nassert solution(\"4 1\") == \"14\"\nassert solution(\"5 4\") == \"17\"\nassert solution(\"5 3\") == \"9\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"5\"\nassert solution(\"4 0\") == \"16\"\nassert solution(\"5 4\") == \"18\"\nassert solution(\"5 4\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 2 0 1 0 2 3 5 2') == '5'\nassert solution('1 2 3') == '2'\nassert solution('1 3 3 7') == '2'\nassert solution('1 5 15') == '1'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 4'),'incorrect'\nassert solution('4 0'),'incorrect'\nassert solution('5 4'),'incorrect'\nassert solution('5 7'),'incorrect'\nassert solution('3 2'),'incorrect'\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"14\"\n\n\n-----Time complexity-----\n\nThe time complexity of Polycarp is $O(n^2)$ for $n$ input segments, $n \\le a$ and $m \\le n \\le \\lceil\\frac{a}{2}\\rceil$.\n\nThe total time complexity of the algorithm is $O(n^2)$, where $n$ denotes the number of segments and $n \\le a$ denotes the number of segments at each starting point.\n\nThe total time complexity of the algorithm is $O(n^2)$, where $n$ denotes the number of segments and $m \\le a$ denotes the number of umbrellas.\n\n\n-----Space complexity-----\n\nSpace complexity of Polycarp is $O(n)$ for $n$ input segments, $n \\le a$ and $m \\le n \\le \\lceil\\frac{a}{2}\\rceil$.\n\nSpace complexity of the algorithm is $O(n)$, where $n$ denotes the number of segments and $m \\le a$ denotes the number of umbrellas.\n\nSpace complexity of the algorithm is $O(n)$, where $n$ denotes the number of segments and $m \\le a$ denotes the number of umbrellas.\n\nIn the second example, the time complexity of Polycarp is $O(n^2)$, where $n$ denotes the number of segments and $m \\le a$ denotes the number of segments at each starting point.\n\nIn the third example, the time complexity of Polycarp is $O(n^2)$, where $n$ denotes the number of segments and $m \\le a$ denotes the number of segments at each starting point.\n\nIn the fourth example, the time complexity of Polycarp is $O(n^2)$, where $n$ denotes the number of segments and $m \\le a$ denotes the number of segments at each starting point.\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= a <= 10^5\n0 <= l_i < r_i < a\n1 <= p_i \\le 10^5\n\nExample 1:\nInput:\n5 2\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\nOutput:\n14\n\nExample 2:\nInput:\n2 1\n0 10\n1 5\nOutput:\n11\n\nExample 3:\nInput:\n1 1\n1 2\n0 10\n0 1\nOutput:\n1\n\nExample 4:\nInput:\n1 1\n2 2\n0 10\n0 1\nOutput:\n2\n\n\n-----Constraints-----\n\n1 <= a <= 10^5\n0 <= l_i < r_i < a\n1 <= p_i \\le 10^5\n\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 2 4\") == \"14\"\nassert solution(\"3 4 2\") == \"45\"\nassert solution(\"3 4 1\") == \"-1\"\n\n\n-----Constraints-----\n0 < a < 1000\n1 <= n <= 20\n1 <= m <= 1000\n1 <= x_i <= n\n1 <= p_i <= 10^5\n\n\n-----Time Limit Before-----\nTime Limit: 2 seconds\n\nTime Limit: 15 seconds\n\n-----Time Limit After-----\nTime Limit: 1 seconds\n\n-----Sample Execution-----\n$ python3 solution.py\n10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n1 5\n$ python3 solution.py\n10 1 1\n0 9\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"14\"\n\n\"\"\""
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 1 1\") == \"14\"\nassert solution(\"10 1 2\") == \"45\"\nassert solution(\"10 1 4\") == \"45\"\nassert solution(\"10 1 8\") == \"45\"\nassert solution(\"10 1 3\") == \"-1\"\n\nExplanation\n\n0 = 0\n1 = 0\n2 = 1\n3 = 1\n4 = 2\n5 = 2\n6 = 1\n7 = 3\n8 = 3\n9 = 2\n10 = 3\n11 = 4\n12 = 5\n13 = 4\n14 = 5\n\n5 = 8\n\n6 = 10\n\n7 = 9\n\n8 = 10\n\n9 = 10\n\n10 = 10\n\n11 = 10\n\n12 = 10\n\n13 = 10\n\n14 = 10\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"45\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"14\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"0 3\") == \"12\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"1\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"5\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1'\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= a <= 10^5\n1 <= l_i, r_i < a\n1 <= x_i, p_i <= 10^5\n\ntime limit\n1 minute\n\nmemory limit 2,024\n\n-----Algorithm-----\n\nWe assume that the umbrella is started at $x = a$.\n\nWe assume the Umbrellas are thrown by a umbrella.\n\nWe use the following conditions:\n\n$1 \\le l_i \\le a$\n$0 \\le l_i \\le r_i \\le a$\n$r_i \\le a$\n\n$2 \\le x_i \\le 10^5$\n\n$1 \\le x_i \\le a$\n$0 \\le x_i \\le p_i \\le 10^5$\n\n$x_i \\le a$\n$0 \\le x_i \\le p_i \\le 10^5$\n\n$2 \\le x_i \\le 10^5$\n\n$2 \\le p_i \\le 10^5$\n\n$2 \\le l_i \\le r_i \\le a$\n$0 \\le l_i \\le r_i \\le a$\n$1 \\le x_i \\le a$\n$0 \\le x_i \\le p_i \\le 10^5$\n\n$1 \\le x_i \\le a$\n$0 \\le x_i \\le p_i \\le 10^5$\n\n$1 \\le p_i \\le 10^5$\n\n$1 \\le l_i \\le a$\n$0 \\le l_i \\le r_i \\le a$\n$1 \\le r_i \\le a$\n$1 \\le x_i \\le a$\n$0 \\le x_i \\le p_i \\le 10^5$\n\n$2 \\le x_i \\le a$\n$0 \\le x_i \\le p_i \\le 10^5$\n\n$2 \\le l_i \\le a$\n$0 \\le l_i \\le r_i \\le a$\n$1 \\le r_i \\le a$\n$1 \\le x_i \\le a$\n$0 \\le x_i \\le p_i \\le 10^5$\n\n$2 \\le p_i \\le 10^5$\n\n$2 \\le l_i \\le a$\n$0 \\le l_i \\le r_i \\le a$\n$1 \\le r_i \\le a$\n$1 \\le x_i \\le a$\n$0 \\le x_i \\le p_i \\le 10^5$\n\n\n\nExplanation\n\nPolycarp starts his journey at $x = 1$ and moves with him through the rain until it reaches $a$ after the rain starts.\n\nPolycarp picks up the umbrella at $x = 1$, throws it away and moves along with it until it reaches $a$, if it's not possible to reach $a$ before it starts.\n\nThe conditions in the figure were:\n\n$0 \\le x_i \\le a$\n$0 \\le x_i \\le p_i \\le 10^5$\n\n$0 \\le p_i \\le 10^5$\n\n$0 \\le l_i \\le a$\n$0 \\le r_i \\le a$\n$0 \\le x_i \\le a$\n$0 \\le x_i \\le p_i \\le 10^5$\n\n$1 \\le x_i \\le a$\n$0 \\le x_i \\le p_i \\le 10^5$\n\n$1 \\le p_i \\le 10^5$\n\n$1 \\le l_i \\le a$\n$0 \\le l_i \\le r_i \\le a$\n$1 \\le r_i \\le a$\n$1 \\le x_i \\le a$\n$0 \\le x_i \\le p_i \\le 10^5$\n\n$1 \\le p_i \\le 10^5$\n\n$1 \\le l_i \\le a$\n$0 \\le l_i \\le r"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    A = 5,\n    B = 7,\n    C = 5\n) == \"No\"\n\nA = 5\nB = 7\nC = 5\nassert solution(\n    A = 5,\n    B = 7,\n    C = 5\n) == \"Yes\"\n\nA = 5\nB = 5\nC = 5\nassert solution(\n    A = 5,\n    B = 5,\n    C = 5\n) == \"No\"\n\nA = 3\nB = 2\nC = 3\nassert solution(\n    A = 3,\n    B = 2,\n    C = 3\n) == \"Yes\""
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5 7 5) == \"Yes\", \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"Yes\", \"Not a valid trie\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"a b c\") == \"Yes\"\nassert solution(\"1 2 3 4 5\") == \"No\"\n\nassert solution(\"5 8 4 2 4 2\") == \"No\"\nassert solution(\"3 9 3 7 8 7\") == \"Yes\"\nassert solution(\"4 4 4 4 4 4\") == \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\" or solution(stdin) == \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 7 5\") == \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n\"5 5 5\"\n) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"Yes\"\nassert solution(\"5 7\") == \"No\"\nassert solution(\"5 4\") == \"No\"\nassert solution(\"3 2\") == \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution) == \"No\", \"The answer is wrong\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"1\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"3\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"3\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(f) == 1\nassert solution(f) == 2\nassert solution(f) == 3\nassert solution(f) == 4\nassert solution(f) == 5\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '1'\nassert solution(inp) == '2'\nassert solution(inp) == '3'\nassert solution(inp) == '4'\nassert solution(inp) == '5'\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('123' == '123') == '1'\nassert solution('1' == '123') == '1'\nassert solution('1123') == '1'\nassert solution('123123') == '1'\nassert solution('123123123') == '1'\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"4 10\") == \"1\"\nassert solution(\"2 5\") == \"3\"\nassert solution(\"1 10\") == \"1\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2\", \"1\", \"2\", \"1\"]) == \"1\"\nassert solution([\"2\", \"1\"]) == \"2\"\nassert solution([\"2\", \"4\"]) == \"1\"\nassert solution([\"1\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\n\nA follow up problem is to solve this problem using a divide-and-conquer approach.\nThe problem is based on the following idea:\n- Create two pointer i,j (i<j) and write the numbers on the i+1 balls.\n- If i+1 balls = N, j+1 balls = M, j is even and odd, then we have a solution.\n- Else if i+1 balls = N, j+1 balls = M, we have a solution, but the number does not contain even or odd numbers.\n- Else, we have two solutions, one with even numbers and one with odd numbers.\n- So, we have:\n    - Two balls, i,j both have odd numbers, so we have:\n        - The odd numbers (j) will always be written on the odd balls, and\n        - The even numbers (i) will always be written on the even balls.\n- We return the maximum length of the solution.\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"2 4\") == \"0\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"4 4\") == \"0\"\nassert solution(\"4 1\") == \"0\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\""
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"1\"\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"6 4\") == \"2\"\nassert solution(\"5 7\") == \"3\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"6 9\") == \"2\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2 4\", \"1 2\", \"1 8\", \"3 2\", \"5 1\", \"2 3\", \"5 6\", \"6 2\"]) == \"1\"\nassert solution([\"1 4\", \"1 3\", \"4 2\", \"3 2\", \"4 1\", \"3 4\", \"5 2\", \"5 1\"]) == \"3\"\nassert solution([\"2 4\", \"1 2\", \"1 8\", \"3 2\", \"5 1\", \"2 3\", \"5 6\", \"6 2\"]) == \"3\"\nassert solution([\"2 4\", \"1 2\", \"1 8\", \"3 2\", \"5 1\", \"2 3\", \"5 6\", \"6 2\"]) == \"2\"\nassert solution([\"2 4\", \"1 2\", \"1 8\", \"3 2\", \"5 1\", \"2 3\", \"5 6\", \"6 2\"]) == \"0\"\n\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(sys.stdin.readline()) == '3'\nassert solution(sys.stdin.readline()) == '2'\nassert solution(sys.stdin.readline()) == '1'\nassert solution(sys.stdin.readline()) == '0'\n\nprint(solution(sys.stdin))"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\\\"ACACTACG\\\") == 0\nassert solution(\\\"ACTACGGT\\\") == 3\nassert solution(\\\"CCATTTGCATAC\\\") == 8\nassert solution(\\\"AAAATATCCATTCGTCTCTCCA\\\") == 4"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"ACACTACG\") == 3\nassert solution(\"ACACTACG\") == 3\nassert solution(\"ACACTACG\") == 2\nassert solution(\"ACACTACG\") == 2\nassert solution(\"ACACTACG\") == 0\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"ACACTACG\", \"3 7\", \"2 3\", \"1 8\"]) == \"2\"\nassert solution([\"ACACTACG\", \"3 7\", \"2 3\", \"1 8\"]) == \"2\"\nassert solution([\"ACACTACG\", \"3 7\", \"2 3\", \"1 8\"]) == \"3\"\nassert solution([\"ACACTACG\", \"3 7\", \"2 3\", \"1 8\"]) == \"3\"\nassert solution([\"ACACTACG\", \"3 7\", \"2 3\", \"1 8\"]) == \"3\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"ACACTACG\", \"3\", \"7\", \"2\", \"3\"]) == \"3\"\nassert solution([\"ACACTACG\", \"3\", \"7\", \"2\", \"1\"]) == \"2\"\nassert solution([\"ACACTACG\", \"3\", \"7\", \"2\", \"8\"]) == \"3\"\nassert solution([\"ACACTACG\", \"4\", \"7\", \"2\", \"3\"]) == \"2\"\nassert solution([\"ACACTACG\", \"3\", \"7\", \"2\", \"8\"]) == \"1\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\ninp := inp,\nr = inp.count('C'),\nq = inp.count('G'),\nt = inp.count('T'),\ns = inp.split('T'),\nl = inp.count('A')\n) == 8\n'''\nclass Solution:\n    def solve(self,s):\n        if not s:\n            return 0\n        count = 0\n        for i in range(len(s)):\n            if s[i:i+3] == \"CACC\":\n                count += 1\n        return count\n\n'''\nTest case for example:\nTest case 1:\nInput:\nS = 'AACCGGTCACATCGATC'\nOutput:\n3\n4\n'''\nclass Solution:\n    def solve(self,s):\n        return self.count(s,0,0)\n    def count(self,s,l,r):\n        if l==r:\n            return 1\n        if l < r:\n            if s[l:r] == 'C':\n                return self.count(s,l+1,r-1)\n            elif s[l:r] == 'G':\n                return self.count(s,l+1,r)\n            else:\n                return self.count(s,l+1,r-1) + self.count(s,l,r-1)\n\n'''\nTest case 2:\nInput:\nS = 'AAACGTC'\nOutput:\n1\n'''\nclass Solution:\n    def solve(self,s):\n        if not s:\n            return 0\n        if s[0] == 'A':\n            return 1\n        if s[0] == 'C':\n            return self.count('A',0,0) + self.count('C',0,0)\n        if s[0] == 'G':\n            return self.count('A',0,0) + self.count('C',0,0) + self.count('G',0,0)\n\n'''\nTest case 3:\nInput:\nS = 'AGCT'\nOutput:\n0\n'''\nclass Solution:\n    def solve(self,s):\n        if not s:\n            return 0\n        if s[0] == 'A':\n            return 1\n        if s[0] == 'C':\n            return self.count('A',0,0)\n        if s[0] == 'G':\n            return self.count('A',0,0) + self.count('C',0,0)\n        else:\n            return self.count('A',0,0) + self.count('C',0,0) + self.count('G',0,0)\n\n'''\nTest case 4:\nInput:\nS = 'AACGTT'\nOutput:\n3\n'''\nclass Solution:\n    def solve(self,s):\n        if not s:\n            return 0\n        if s[0] == 'A':\n            return self.count('A',0,0)\n        if s[0] == 'C':\n            return self.count('A',0,0) + self.count('C',0,0)\n        if s[0] == 'G':\n            return self.count('A',0,0) + self.count('C',0,0) + self.count('G',0,0)\n\n'''\nTest case 5:\nInput:\nS = 'TT'\nOutput:\n4\n'''\nclass Solution:\n    def solve(self,s):\n        if not s:\n            return 0\n        if s[0] == 'T':\n            return self.count('T',0,0)\n        if s[0] == 'A':\n            return self.count('A',0,0)\n        else:\n            return self.count('T',0,0) + self.count('A',0,0)\n\n'''\nTest case 6:\nInput:\nS = 'AACGTC'\nOutput:\n0\n'''\nclass Solution:\n    def solve(self,s):\n        if not s:\n            return 0\n        if s[0] == 'C':\n            return self.count('C',0,0)\n        if s[0] == 'G':\n            return self.count('C',0,0) + self.count('G',0,0)\n        else:\n            return self.count('C',0,0) + self.count('G',0,0) + self.count('A',0,0)\n\n'''\nTest case 7:\nInput:\nS = 'AACGCT'\nOutput:\n0\n'''\nclass Solution:\n    def solve(self,s):\n        if not s:\n            return 0\n        if s[0] == 'A':\n            return self.count('A',0,0)\n        if s[0] == 'C':\n            return self.count('C',0,0) + self.count('A',0,0)\n        if s[0] == 'G':\n            return self.count('C',0,0) + self.count('A',0,0) + self.count('G',0,0)\n\n'''\nTest case 8:\nInput:\nS = 'TTTCCAGT'\nOutput:\n0\n'''\nclass Solution:\n    def solve(self,s):\n        if not s:\n            return 0\n        if s[0] == 'T':\n            return self.count('T',0,0)\n        if s[0] == 'C':\n            return self.count('C',0,0) + self.count('T',0,0)\n        if s[0] == 'G':\n            return self.count('C',0,0) + self.count('T',0,0) + self.count('G',0,0)\n\n'''\nTest case 9:\nInput:\nS = 'AACGTT'\nOutput:\n0\n'''\nclass Solution:\n    def solve(self,s):\n        if not s:\n            return 0\n        if s[0] == 'A':\n            return self.count('A',0,0)\n        if s[0] == 'C':\n            return self.count('C',0,0) + self.count('A',0,0)\n        if s[0] == 'G':\n            return self.count('C',0,0) + self.count('A',0,0) + self.count('G',0,0)\n\n\nclass Solution:\n    def solve(self,s):\n        if not s:\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"ACACTACG\") == \"3\"\nassert solution(\"ACACTACG\") == \"3\"\nassert solution(\"ACACTACG\") == \"2\"\nassert solution(\"ACACTACG\") == \"2\"\nassert solution(\"ACACTACG\") == \"1\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"a a b b a a\") == \"a\"\nassert solution(\"b a b a a\") == \"a\"\nassert solution(\"a a b b a a\") == \"a\"\nassert solution(\"a a b b a a\") == \"a\"\nassert solution(\"a a b b a a\") == \"a\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 4\"), \"3 4\"\nassert solution(\"2 4\"), \"2 4\"\nassert solution(\"2 4\"), \"2 4\"\nassert solution(\"5\"), \"5\"\nassert solution(\"7 6 5\"), \"7 6 5\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == 210\nassert solution(\"5 3\\n100 80 120 80\\n\") == 210\nassert solution(\"5 3\\n100 80 120 80\\n\") == 210\nassert solution(\"5 3\\n10 50 100 80\\n\") == 210\nassert solution(\"5 3\\n50 100 80 120 80\\n\") == 210\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == 210\nassert solution(\"50 100 80 120 80\") == 210\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == 210\nassert solution(\"10 6\") == 210\nassert solution(\"1 4\") == 210\nassert solution(\"1 2\") == 210\nassert solution(\"2 3\") == 210\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3 4 5\") == 210\n\n-----Known Issues-----\nThe input is not valid for all cases.\n\n-----Submissions-----\nYour submission has been marked as not correct.\n  The input is guaranteed to be valid.\n  You may not use division or modulo operator.\n\n-----Usage-----\n--- Don't forget to import modules ---\n--- Don't forget to name your main function ---\n--- Don't forget to import 'time' ---\n--- Don't forget to import'math' ---\n--- Don't forget to import 'random' ---\n--- Don't forget to import'math' ---\n\n--- Don't forget to import'math' ---\n--- Don't forget to import 'random' ---\n\n--- Don't forget to import'math' ---\n--- Don't forget to import 'random' ---\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 210\n\n-----Sample Output-----\nSample Input:\n3 5\n5 100 80 120 80\n5 100 200 400 200\nSample Output:\n210\n\nThis shop sells Fruit 1, 2, 3, and 4 for 5 yen, 100 yen, 200 yen, 400 yen, and 800 yen, respectively.\nThe minimum total price for three kinds of fruits is 5 + 100 + 200 + 400 + 800 = 210 yen when choosing Fruit 1, 3, and 4.\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['5 3', '50 100 80 120 80']), 'Error'\nassert solution(['5 4', '50 100 80 120 80']), 'Error'\nassert solution(['5 3', '50 100 80 120 80', '5 2', '50 100 80 120 80']), 'Error'\nassert solution(['5 3', '50 100 80 120 80', '5 2', '50 100 80 120 80', '5 4', '50 100 80 120 80']), 'Error'\nassert solution(['5 4', '50 100 80 120 80', '5 2', '50 100 80 120 80', '5 3', '50 100 80 120 80']), 'Error'\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == 210\nassert solution(\"50 100 80 120 80\") == 210\nassert solution(\"50 100 80 120 80\") == 210\nassert solution(\"50 100 80 120 80\") == 210\nassert solution(\"50 100 80 120 80\") == 210\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == 210\nassert solution(\"50 100 80 120 80\") == 210\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '4'\nassert solution('3 4') == '7'\nassert solution('4 3') == '5'\nassert solution('4 3 2') == '7'\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 4 3\") == \"4\"\nassert solution(\"1 3 4\") == \"4\"\nassert solution(\"3 1 4\") == \"4\"\nassert solution(\"2 3 4 5\") == \"5\"\nassert solution(\"2 4 4\") == \"4\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"7\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1 3 4\", \"4\", \"1 3 4\", \"1 4 5\"]) == \"4\"\nassert solution([\"1 2 3\", \"3\", \"2 3\", \"2 4 5\"]) == \"5\"\nassert solution([\"1 2 3\", \"2\", \"1 2\", \"1 3 4\"]) == \"4\"\nassert solution([\"1\", \"2\", \"3\", \"4\"]) == \"4\"\nassert solution([\"4\", \"1\", \"2\", \"3\"]) == \"5\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 7\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '7'\nassert solution(stdin) == '5'\nassert solution(stdin) == '10'\nassert solution(stdin) == '10'\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 4 1') == '4'\nassert solution('2 3 4') == '3'\nassert solution('1 2 3 4') == '4'\nassert solution('1 1 1 1') == '1'\nassert solution('2 2 1 1') == '2'\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 2 5\") == \"10\"\nassert solution(\"1 3 1\") == \"1\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"7\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"10\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1 4\",\"2 3\",\"2 4\",\"2 5\",\"3 2\",\"3 3\"]) == \"4\"\nassert solution([\"1 4\",\"2 3\",\"1 4\",\"2 5\",\"1 2\",\"3 4\",\"2 5\",\"1 3\",\"3 4\",\"2 6\",\"1 2\",\"2 4\",\"2 6\",\"1 2\",\"1 3\",\"2 6\"]) == \"7\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 10\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3,5) == 0\nassert solution(3,9) == 10\nassert solution(9,0) == 0\nassert solution(9,9) == 10\nassert solution(9,9) == 9\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 0\nassert solution(input()) == 10\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3,5) == 0\nassert solution(2,2) == 10\nassert solution(2,2) == 10"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2) == 0\nassert solution(4) == 10\nassert solution(5) == 0"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '10'\nassert solution(input()) == '0'\nassert solution(input()) == '10'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3,5) == 0\nassert solution(3,6) == 10\nassert solution(3,7) == 10\nassert solution(3,8) == 10\nassert solution(3,9) == 10\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 10\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(X, A) == 0 or 10\n\nInput:\nX: int\nA: int\nOutput:\nint\n'''"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"0\"\nassert solution(inp) == \"10\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 2) == 1\nassert solution(4, 1) == 3\nassert solution(5, 1) == 3\nassert solution(6, 1) == 1\nassert solution(7, 1) == 1\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '1'\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 1) == 1\nassert solution(7, 3) == 7\nassert solution(5, 5) == 3\nassert solution(6, 6) == 6\nassert solution(5, 4) == 6\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"1\""
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"5\") == 2\nassert solution(\"2\") == 1\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Bonus-----\nSample Input:\n10 4\n\nSample Output:\n1\n\nassert solution(stdin) == \"1\"\n\nSample Input:\n3 5\n\nSample Output:\n4\n\nassert solution(stdin) == \"4\"\n\nSample Input:\n3 2\n\nSample Output:\n1\n\nassert solution(stdin) == \"1\"\n\nSample Input:\n3 3\n\nSample Output:\n3\n\nassert solution(stdin) == \"3\"\n\nSample Input:\n1 2\n\nSample Output:\n2"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"1\""
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n'''\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(''), \"Empty Input\"\nassert solution('1 3 7'), 'win'\nassert solution('12 4'), 'win'\nassert solution('1 1 1 1 1'), 'win'\nassert solution('2 3'), 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"win\"\nassert solution(stdin) == \"bust\""
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5,7,9) == \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == 'win'\nassert solution(7) == 'bust'\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 1 3\") == \"win\"\nassert solution(\"2 1 6\") == \"win\"\nassert solution(\"2 1 4\") == \"bust\"\nassert solution(\"1 1 1\") == \"bust\"\nassert solution(\"1 2 1\") == \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 7 9') == 'win'"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('0') == 'win'\nassert solution('5') == 'bust'\nassert solution('9') == 'win'\nassert solution('15') == 'win'\nassert solution('22') == 'bust'\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5 7 9') == 'win', 'Your function should return \"win\"!'\nassert solution('7 7 3') == 'bust', 'Your function should return \"bust\"!'\nassert solution('100 99 10') == 'win', 'Your function should return \"win\"!'\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(12) == 6\nassert solution(88) == 7\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(solution(input())) == 6\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"6\"\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^9\n - All values in input are integers.\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '6'"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(6) == \"6\"\nassert solution(24) == \"24\"\nassert solution(36) == \"36\"\nassert solution(67) == \"36\"\nassert solution(20) == \"20\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(12) == 6\n\n\n'''\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4) == 6\nassert solution(5) == 6\nassert solution(6) == 6\nassert solution(7) == 6\nassert solution(3) == 3\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(test) == 6\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"6\"\n\n-------------------------------------------------------\nSolution:\n---------------\nN: int = int(input())\nresult = []\nfor i in range(2, N + 1):\n    if (N % i == 0):\n        result.append(i)\n        if N // i == 2 and N % i == 1:\n            result.append(i)\n            break\n\nprint(min(result))\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3) == 6\nassert solution(5) == 5\nassert solution(8) == 7\nassert solution(7) == 1\nassert solution(9) == 1\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    '''1 1 1 2 2\n    3'''\n    ) == '2'\n\nassert solution(\n    '''2 2 3 2\n    4'''\n    ) == '1'\n\nassert solution(\n    '''3 1 2\n    3 3 3 3\n    4'''\n    ) == '1'\n\nassert solution(\n    '''1 2 3 2\n    3 3 4 3\n    4 4 4 4'''\n    ) == '1'\n\nassert solution(\n    '''1 3 2\n    2 3 3\n    3 4 3\n    4 4 4'''\n    ) == '1'"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == 4\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 3, [1, 2]) == 2\nassert solution(5, 4, [1, 2, 3, 4]) == 4\nassert solution(4, 3, [1, 2, 3]) == 2\nassert solution(4, 4, [3, 4]) == 1\nassert solution(5, 5, [1, 2, 3, 4, 5]) == 5\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n3\n\nWe can achieve the objective by, for example, placing an inspector under Tree 1 and Tree 2.\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(sample_input) == 2"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(6,2) == 2\nassert solution(6,4) == 2\nassert solution(1,1) == 1\nassert solution(1,2) == 1\nassert solution(1,3) == 1\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '2'\n\n-----Original Code-----"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"3\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n\n------Explanation-----\nThis is a valid input.\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"pon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 'pon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(string) == 'pon', 'The solution must be \"pon\"'\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"test\") == \"pon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"pon\"\nassert solution(\"1000\") == \"bon\"\nassert solution(\"999\") == \"hon\"\nassert solution(\"100\") == \"pon\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"pon\"\nassert solution(\"1\") == \"bon\"\nassert solution(\"9\") == \"hon\"\nassert solution(\"0\") == \"pon\"\nassert solution(\"3\") == \"pon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'pon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"24\") == \"pon\"\nassert solution(\"14\") == \"pon\"\nassert solution(\"6\") == \"bon\"\nassert solution(\"2\") == \"hon\"\nassert solution(\"0\") == \"pon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"pon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(str) == \"pon\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '1'\nassert solution(input) == '1'\nassert solution(input) == '2'\nassert solution(input) == '2'\nassert solution(input) == '3'\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '6'\nassert solution(input().split(' ')) == '7'\nassert solution(input().split(' ')) == '7'\nassert solution(input().split(' ')) == '8'\nassert solution(input().split(' ')) == '8'\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"11\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"11\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2,2), \"No\"\nassert solution(3,2), \"No\"\nassert solution(4,2), \"No\"\nassert solution(5,2), \"No\"\nassert solution(5,1), \"Yes\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"1 1\") == \"6\"\nassert solution(\"1 2\") == \"4\"\nassert solution(\"0 0\") == \"2\"\nassert solution(\"0 0\") == \"1\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 3 2') == '11'"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"11\"\nassert solution(stdin) == \"22\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"22\"\nassert solution(stdin) == \"23\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"15\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '11'\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    input=\n    \"3\"\n) == \"4\"\nassert solution(\n    input=\n    \"3 4 3\"\n) == \"3\"\nassert solution(\n    input=\n    \"3 5 3 4\"\n) == \"5\"\nassert solution(\n    input=\n    \"1 1 1 1\"\n) == \"1\"\nassert solution(\n    input=\n    \"3 4 3 5\"\n) == \"3\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\",\"4\",\"3\",\"2\",\"1\"]) == \"4\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"5\"\nassert solution([\"7\",\"6\",\"5\",\"4\",\"3\"]) == \"7\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1') == 1\nassert solution('4') == 4\nassert solution('3') == 3"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"4\") == 4\nassert solution(\"3\") == 3\nassert solution(\"4\") == 4\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(in_str) == '4'\nassert solution(in_str, 2) == '3'\nassert solution(in_str, 3) == '5'\nassert solution(in_str, 4) == '4'"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == 4\nassert solution(2) == 2\nassert solution(3) == 2\nassert solution(4) == 4\nassert solution(5) == 4\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 3 4 2') == '2'\nassert solution('2 1 1 3 4') == '3'\nassert solution('1 1 1 1 2 3 4 5 6 7 8 9 10') == '5'\nassert solution('1 4 1 3') == '3'\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, [1, 4, 3]) == 4\nassert solution(3, [1, 4, 3, 4]) == 4\nassert solution(2, [1, 3, 4]) == 3\nassert solution(2, [1, 3, 4, 4]) == 4\nassert solution(5, [1, 4, 3, 4, 6]) == 4\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"4\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '9'"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 9\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"9\"\n\n\"\"\")\n    def test(self):\n        assert solution(\n            \"5 3\\n\",\n            {\"A\": 5, \"B\": 3}\n        ) == \"9\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"9\"\n\n-----Bonus-----\nUse the stack option to handle the case when the user presses a button twice.\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"6\") == \"9\"\nassert solution(\"1 8\") == \"9\"\nassert solution(\"2 4\") == \"9\"\nassert solution(\"2 4 10\") == \"9\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['5', '4']) == '9', \"solution() should return '9' for all input cases.\"\nassert solution(['5', '1', '2']) == '1', \"solution() should return '1' for all input cases.\"\nassert solution(['2', '2', '1', '2']) == '1', \"solution() should return '1' for all input cases.\"\nassert solution(['1', '2', '3', '4']) == '1', \"solution() should return '1' for all input cases.\"\nassert solution(['2', '1', '1', '2']) == '1', \"solution() should return '1' for all input cases.\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"9\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '9'\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"A\", \"B\"]) == \"9\"\nassert solution([\"A\", \"B\", \"C\"]) == \"9\"\nassert solution([\"A\", \"B\", \"C\", \"D\"]) == \"9\"\nassert solution([\"A\", \"B\", \"C\", \"D\", \"E\"]) == \"9\"\nassert solution([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]) == \"9\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"A B\") == 9\nassert solution(\"AB\") == 7\nassert solution(\"\") == 0\nassert solution(\"Aa\") == 0\nassert solution(\"AaBB\") == 0\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 40\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 3 2 4 3 8\") == \"-5\"\nassert solution(\n    \"5 3 2 4 3 8 0\") == \"-5\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 40\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 3') == 40\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"40\"\nassert solution(\"5 3 9\") == \"0\""
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"40\"\nassert solution(\"-30 -10 10 20 50\") == \"40\"\nassert solution(\"5 3 10 20 50\") == \"40\"\n\"\"\"\n\nclass Solution:\n    def solve(self, N, K):\n        \n        if N == K:\n            return \"1\"\n        \n        self.N = N\n        self.K = K\n        \n        c_list = []\n        for i in range(1, N+1):\n            c_list.append(i)\n        \n        self.cnt = 0\n        self.p = 0\n        \n        for i in range(N, -1, -1):\n            if c_list[i] == self.N:\n                self.cnt += 1\n                self.p = i\n                \n            if c_list[i] == self.N and self.cnt == self.K:\n                return str(self.p)\n        \n        return str(self.p)\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == 40\nassert solution(\"5 3 -10 10 20 50\") == 40\nassert solution(\"-30 -10 10 20 50\") == -5\nassert solution(\"10 -10 10 20 50\") == -5\nassert solution(\"10 10 20 50\") == -5\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"40\"\nassert solution(\"5 4\") == \"40\"\nassert solution(\"5 1\") == \"10\"\nassert solution(\"5 2\") == \"30\"\nassert solution(\"1 3\") == \"10\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 3\\n4 5\\n4 6\\n7 10\\n8 12\\n10 10\\n7 9\\n7 13\\n4 9\\n7 14\\n8 12\\n8 15\\n9 13\\n11 6\\n9 14\\n9 15\\n10 13\\n10 14\\n10 15\\n6 12\\n5 13\\n4 14\\n4 15\\n3 12\\n2 13\\n1 14\\n3 13\\n5 13\\n4 14\\n5 15\\n3 13\\n4 15\\n3 14\\n4 15\\n5 14\\n4 15\\n4 15\\n5 15\\n4 14\\n4 15\\n5 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n4 14\\n4 15\\n4 15\\n4 15\\n4 15\\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"5 3\",\n    \"-30 -10 10 20 50\"\n) == 40\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"8 13\") == \"2\"\nassert solution(\"1213\") == \"12\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"Failed to solve the problem\"\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"2\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"8 0\") == \"2\"\n\nassert solution(\"3 3\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '2'\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\n\"\"\"\n\nimport math\n\na,b = map(int,input().split())\n\nsnowing_sum = 0\n\nsnowing_sum += b\n\nwhile True:\n    snowing_sum += (a//2)\n    a = a//2\n    if a==0:\n        break\n    snowing_sum += (b//2)\n    b = b//2\n\nprint(snowing_sum)"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '2'\n\"\"\"\n\nimport math\nimport sys\n\ninput = sys.stdin.readline\n\nn, a, b = map(int, input().split())\n\nn_towers = math.ceil((b - a) / (n - 1)) + 1\n\nres = []\n\nfor i in range(n_towers):\n    a_s = a + i * (n - 1)\n    b_s = b - i * (n - 1)\n    res.append(n - a_s)\n    res.append(n - b_s)\n\nres.sort()\nprint(res[-1])\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('4 4') == '3'\nassert solution('1 2') == '3'\nassert solution('10 1') == '2'\nassert solution('3 3') == '1'\nassert solution('4 1') == '2'\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 4 1\") == \"3\"\nassert solution(\"5 4 2\") == \"3\"\nassert solution(\"4 3 1\") == \"3\"\nassert solution(\"5 3 1\") == \"2\"\nassert solution(\"6 1 1\") == \"1\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"H A\", \"H A\"]) == \"3\"\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"10\", \"4\", \"5\", \"5\", \"4\", \"5\"]) == \"3\"\nassert solution([\"10\", \"5\", \"4\", \"5\", \"4\", \"5\", \"3\", \"5\"]) == \"3\"\nassert solution([\"10\", \"5\", \"4\", \"5\", \"5\", \"5\"]) == \"3\"\nassert solution([\"10\", \"5\", \"5\", \"4\", \"5\", \"4\", \"3\", \"5\"]) == \"3\"\nassert solution([\"10\", \"5\", \"5\", \"5\", \"5\", \"5\"]) == \"3\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 4\") == \"3\"\nassert solution(\"10 7\") == \"2\"\nassert solution(\"10 12\") == \"3\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '0'\nassert solution('4') == '0'\nassert solution('8') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10 4\") == 3\nassert solution(\"10\") == 3\nassert solution(\"2\") == 3\nassert solution(\"\") == 0\n\n-----Test-----\nTest case 1:\nInput:\n2 2 2\n\nOutput:\n3\n\nTest case 2:\nInput:\n3 2 2\n\nOutput:\n4\n\nTest case 3:\nInput:\n2 1 1\n\nOutput:\n0\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '3'\n\"\"\"\n\n\nclass Solution:\n    def monster(self, H, A):\n        lst = []\n        for i in range(H):\n            if i <= A:\n                lst.append(i)\n\n        if len(lst) <= 1:\n            return 1\n\n        lst.sort()\n        for i in range(len(lst)):\n            for j in range(i, len(lst)):\n                if lst[i] + lst[j] == A:\n                    return max(1, i + j - 1)\n                if lst[i] + lst[j] > A:\n                    continue\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 4\") == 3\nassert solution(\"4 4 2 0\") == 2\nassert solution(\"0 0 0 0 0\") == 0\nassert solution(\"4 1 0\") == 0\nassert solution(\"0 3 5\") == 0\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10 4\") == 3\nassert solution(\"10 4 -2\") == 3\nassert solution(\"10 3 -4\") == 4\nassert solution(\"1 1\") == 0\nassert solution(\"2 1\") == 1\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\\\"1,3,2\\\"), 1\nassert solution(\\\"1,3,2,2,2,2,2,3,3,3,3,3,4,4,4,5,5,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,17,17,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,21,22,22,22,22,22,23,23,23,23,23,24,24,24,24,24,25,25,25,25,26,26,26,26,26,27,27,27,27,28,28,28,29,29,29,29,29,30,30,30,30,31,31,31,31,32,32,32,32,33,33,33,34,34,34,34,35,35,35,35,36,36,36,36,37,37,37,38,38,38,39,39,39,40,40,40,41,41,41,41,42,42,42,43,43,43,44,44,44,45,45,45,45,46,46,46,47,47,47,48,48,48,49,49,49,50,50,50,51,51,51,52,52,52,53,53,53,54,54,54,55,55,55,56,56,57,57,57,58,58,58,59,59,60,61,61,61,62,62,62,63,63,64,64,65,65,65,66,66,67,67,68,69,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 1') == '50'\nassert solution('1 2') == '50'\nassert solution('2 1') == '50'\nassert solution('2 2') == '50'\nassert solution('2 3') == '50'\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin=\"\"\"\n    0 75 25 100\n    0 75 25 100\"\"\") == \"50\"\n\"\"\"\n    \"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"1 75 25 100\") == \"50\"\nassert solution(\"1 3 75 25 100\") == \"60\"\nassert solution(\"3 1 75 25 100\") == \"60\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('0 75 25 100') == 50\nassert solution('1 25 100') == 25\nassert solution('2 75 100') == 75\nassert solution('3 75 100') == 100\nassert solution('4 75 100') == 100\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"0\", \"75\", \"25\", \"100\"]) == \"50\"\nassert solution([\"1\", \"50\", \"0\", \"0\"]) == \"50\"\nassert solution([\"1\", \"50\", \"0\", \"1\"]) == \"50\"\nassert solution([\"1\", \"50\", \"0\", \"0\"]) == \"50\"\nassert solution([\"1\", \"50\", \"1\", \"1\"]) == \"50\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '50'\nassert solution(stdin) == '75'\nassert solution(stdin) == '25'\nassert solution(stdin) == '100'\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"A 0 75 25 0\") == \"50\"\nassert solution(\"A 75 25 0\") == \"50\"\nassert solution(\"A 25 0 75\") == \"25\"\nassert solution(\"A 75 0 75\") == \"25\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0 75 25 100\") == 50\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 50\n\nInput\n: Hello world\n\nOutput\n: Hello world\n\nExplanation\nThere are two buttons: 0 and 50, and Alice's button 0 and 50, and Bob's button 0 and 50.\n\nSince both buttons are held down at 50 seconds after the start-up, both Alice and Bob take a half second.\n\nSince Alice starts holding down her button 0 second after the start-up, Bob starts holding down her button 0 second after the start-up.\n\nTherefore, the duration of both buttons is the half of 50 seconds.\n\nSince Alice and Bob start holding down her button 0 second after the start-up, both buttons start holding down at half of their duration.\n\nTherefore, the half of 50 seconds is the duration of both buttons.\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(45) == 1\nassert solution(245) == 1\nassert solution(245000) == 1\nassert solution(5) == 1\nassert solution(4) == 1\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(105) == \"1\""
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n-----Bonus-----\nIn the problem statement, we have defined a number n as the sum of the divisors of n. For example, the sum of n is 101 and n has one divisor: 1. We should consider n as: 101 + 1 = 103, because the sum of all divisors is 100 + 1 = 103.\nThe only way we can make that is as follows: we divide n by each of the divisors, then keep a running total (sum) of the remaining numbers, then we use the number of divisors (which is odd) to check whether the remaining numbers is even.\nFor example, when n = 3, we can divide it by 3 and the remaining numbers are 3, 2, 1, and the number of odd numbers is 1.\n'''"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(10) == 1\nassert solution(200) == 1\nassert solution(300) == 3\nassert solution(400) == 3\nassert solution(500) == 2\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(4) == 1\nassert solution(5) == 2\nassert solution(15) == 3\nassert solution(21) == 3\nassert solution(52) == 3\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0) == 0\nassert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"105\") == \"1\"\nassert solution(\"946\") == \"2\"\nassert solution(\"1239\") == \"3\"\nassert solution(\"2\") == \"0\"\nassert solution(\"0\") == \"1\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(105) == 1\n\n-----Level Order Traversal-----\n # Definition\n # n : Number of Numbers\n # f : Function\n # d : Depth of the Node\n # t : Type of the Node\n # D : Do not traverse it\n # T : Traverse it\n # T : Traverse it and update the depth of the Node\n # A : Left Node\n # B : Right Node\n # C : Set of Divisors"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(105) == 1\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"105\") == \"1\"\nassert solution(\"1000\") == \"2\"\nassert solution(\"9999\") == \"1\"\nassert solution
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(f) == \"1\"\nassert solution(f) == \"1\"\nassert solution(f) == \"1\"\nassert solution(f) == \"2\"\nassert solution(f) == \"3\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 4 3\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 3 3\") == \"1\"\nassert solution(\"2 3 4\") == \"1\"\nassert solution(\"3 3 3\") == \"3\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n6 3\n3 4 5\n3 2 4\n5 1 4\n\"\"\"\n    ) == \"1\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"6\"\nassert solution(\"4 1 7 2 9\") == \"2\"\nassert solution(\"7 8 5 9 1\") == \"2\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"2 4\") == \"0\"\nassert solution(\"2 5\") == \"0\"\nassert solution(\"2 6\") == \"0\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"5\"\n'''"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 4 3\") == \"1\"\nassert solution(\"2 4 5\") == \"2\"\nassert solution(\"2 4 3 2\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(string) == '1'\nassert solution(string) == '1'\nassert solution(string) == '1'\nassert solution(string) == '1'\nassert solution(string) == '1'\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4,2,3) == \"1\"\nassert solution(4,2,3,4) == \"2\"\nassert solution(2,4,4) == \"1\"\nassert solution(4,3,2) == \"2\"\nassert solution(4,3,2,3) == \"2\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '111'\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"001001\") == \"1\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('011') == '111'\nassert solution('0011') == '011'\nassert solution('00111') == '011'\nassert solution('0011111') == '011'\nassert solution('0101011') == '011'\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '111'\nassert solution(input) == '111'\nassert solution(input) == '111'\nassert solution(input) == '111'\nassert solution(input) == '111'\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\"+stdin+\"\")==\"123\"\nassert solution(\"110\")==\"123\"\nassert solution(\"123\")==\"123\"\nassert solution(\"11\")==\"123\"\nassert solution(\"102\")==\"123\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"12\") == \"12\"\nassert solution(\"1234\") == \"1234\"\nassert solution(\"1234a\") == \"1234a\"\nassert solution(\"1234ab\") == \"1234ab\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"111\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1010101\") == \"1010101\"\nassert solution(\"1000\") == \"1000\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"111\"\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n\n'''\nimport unittest\n\n\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        for i in range(len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i][j + 1]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i][j - 1], triangle[i][j + 1])\n        return min(triangle[-1])\n\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        triangle = [[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]\n        print(solution(triangle))\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 6 3') == '5'\n\n\n\n\nTest cases for solution() are provided.\nInput\nX\nX\n\nOutput\nX\n\nExplanation\nThis problem is solved using DFS. The optimal cost is 5, since it is not possible to complete all the tasks in the\ntask set.\n\"\"\"\n\n\"\"\"\nProblem:\n        dp[i][j] = min_cost(i, j) + dp[i-1][j-1]\nTime Complexity: O(n + m), n is the number of tasks, m is the number of entries in the table\nSpace Complexity: O(n + m)\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\", \"1\", \"1\", \"1\"]) == \"5\"\n\nassert solution([\"2\", \"3\", \"2\", \"2\"]) == \"1\"\nassert solution([\"3\", \"1\", \"3\", \"4\"]) == \"1\"\nassert solution([\"1\", \"2\", \"2\", \"1\"]) == \"1\"\nassert solution([\"1\", \"1\", \"3\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(solution(input())) == 5, \"solution() returned wrong answer\"\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 1 2 3') == '5'\nassert solution('2 2 2 2') == '5'\nassert solution('1 3 3 3') == '5'\nassert solution('1 4 1 3') == '5'\nassert solution('1 1 1 1') == '2'\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"10 1\", \"9 3\", \"3 2\"]) == \"5\"\nassert solution([\"15\", \"9\", \"4\", \"5\", \"7\"]) == \"15\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"5\"\nassert solution([\"10\", \"10\", \"10\", \"10\", \"10\"]) == \"10\"\nassert solution([\"10\", \"10\", \"10\", \"10\", \"10\"]) == \"0\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5') == '5'\nassert solution('3 6 5 7') == '5'\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"1 6 3\"\n) == 5\n\n-----Sample Input-----\n1 6 3\n\n-----Sample Output-----\n5\n\nWhen the tasks are completed in the following order, the total cost will be 5, which is the minimum:\n - Complete the first task at cost 0.\n - Complete the third task at cost 2.\n - Complete the second task at cost 3.\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(8) == 5\nassert solution(4) == 5\nassert solution(2) == 6\nassert solution(1) == 7\nassert solution(4) == 5\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 5\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['5','4','4','2','2','1','2','1','1','1','1']) == '5'\nassert solution(['3','7','3','2','2','1','3','1','1','1','1']) == '7'\nassert solution(['2','1','1','1','1','1','1','1','1','1','1']) == '3'\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '5'\n'''\n\nimport sys\nimport math\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '5'\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '5'\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('8') == '5'\nassert solution('10') == '6'\nassert solution('12') == '6'\nassert solution('100') == '100'\nassert solution('1000') == '1000'\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n\n-----Sample Input-----\n\ninput\n5\n\na=5\n\n-----Sample Output-----\n\n5\n\nassert solution(\n\nA sequence A=\\{A_1,A_2,A_3,......\\} is determined as follows:\n- The first term is given as input.\n- Let f(n) be the following function: f(n) = n/2 if n is even, and f(n) = 3n+1 if n is odd.\n- a_i = A_{i-1} when i = 1, and a_i = f(a_{i-1}) when i > 1.\nFind the minimum integer m that satisfies the following condition:\n- There exists an integer n such that a_m = a_n (m > n).\n\n-----Constraints-----\n - 1 \\leq s \\leq 100\n - All values in input are integers.\n - It is guaranteed that all elements in a and the minimum m that satisfies the condition are at most 1000000.\n\n-----Input-----\ninput\ns\n\n-----Output-----\nPrint the minimum integer m that satisfies the condition.\n\n-----Sample Input-----\ninput\n5\n\nA=5\n\n-----Sample Output-----\n5\n\nassert solution(\n\nA sequence A=\\{A_1,A_2,A_3,......\\} is determined as follows:\n- The first term is given as input.\n- Let f(n) be the following function: f(n) = n/2 if n is even, and f(n) = 3n+1 if n is odd.\n- a_i = A_{i-1} when i = 1, and a_i = f(a_{i-1}) when i > 1.\nFind the minimum integer m that satisfies the following condition:\n- There exists an integer n such that a_m = a_n (m > n).\n\n-----Constraints-----\n - 1 \\leq s \\leq 100\n - All values in input are integers.\n - It is guaranteed that all elements in a and the minimum m that satisfies the condition are at most 1000000.\n\n-----Input-----\ninput\n5\n\nA=5\n\n-----Sample Output-----\n5\n\nassert solution(\n\nA sequence A=\\{A_1,A_2,A_3,......\\} is determined as follows:\n- The first term is given as input.\n- Let f(n) be the following function: f(n) = n/2 if n is even, and f(n) = 3n+1 if n is odd.\n- a_i = A_{i-1} when i = 1, and a_i = f(a_{i-1}) when i > 1.\nFind the minimum integer m that satisfies the following condition:\n- There exists an integer n such that a_m = a_n (m > n).\n\n-----Constraints-----\n - 1 \\leq s \\leq 100\n - All values in input are integers.\n - It is guaranteed that all elements in a and the minimum m that satisfies the condition are at most 1000000.\n\n-----Input-----\ninput\n6\n\nA=6\n\n-----Sample Output-----\n6\n\nassert solution(\n\nA sequence A=\\{A_1,A_2,A_3,......\\} is determined as follows:\n- The first term is given as input.\n- Let f(n) be the following function: f(n) = n/2 if n is even, and f(n) = 3n+1 if n is odd.\n- a_i = A_{i-1} when i = 1, and a_i = f(a_{i-1}) when i > 1.\nFind the minimum integer m that satisfies the following condition:\n- There exists an integer n such that a_m = a_n (m > n).\n\n-----Constraints-----\n - 1 \\leq s \\leq 100\n - All values in input are integers.\n - It is guaranteed that all elements in a and the minimum m that satisfies the condition are at most 1000000.\n\n-----Input-----\ninput\n5\n\nA=5\n\n-----Sample Output-----\n6"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1,2,3,4) == \"4\"\nassert solution(5,2,3,4) == \"5\"\nassert solution(8,2,4,3) == \"8\"\nassert solution(5,2,3,1) == \"5\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 'Yes'\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom heapq import heappush, heappop\nfrom math import gcd\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"Yes\"\n'''"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"No\"\n\n-----Explanation-----\nExplanation of Test Cases\nInput :\n10 9 10 10\n\nOutput :\nNo\n\nExplanation of Accepted Substitutions\nExplanation of Test Cases\nInput :\n1 2 2 3\n\nOutput :\nNo\n\nExplanation of Accepted Substitutions\nExplanation of Test Cases\nInput :\n2 3 2 3\n\nOutput :\nNo\n\nExplanation of Accepted Substitutions\nExplanation of Test Cases\nInput :\n2 3 3 2\n\nOutput :\nNo\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin):\n        pass\n\n    def __init__(self):\n        pass\n\nclass Solution:\n    def solution(self, stdin):\n        pass\n\nclass Solution:\n    def solution(self, stdin):\n        pass\n\nclass Solution:\n    def solution(self, stdin):\n        pass\n\nclass Solution:\n    def solution(self, stdin):\n        pass\n"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 'Yes'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"No\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"./input.txt\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 'No'\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 6 5') == 5\nassert solution('2 4 3') == 3\nassert solution('1 1') == 1\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2 5\") == \"15\"\nassert solution(\"6 3 4\") == \"10\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1 2 3\", \"2 3 4\", \"2 2\", \"1 3 4\", \"3 3 4\", \"3 1 4\"]) == \"5\"\nassert solution([\"1 4\", \"1 2\", \"2 1\", \"2 3\", \"3 1\", \"3 4\"]) == \"4\"\nassert solution([\"1 1\", \"1 2\", \"2 1\", \"2 3\", \"3 2\", \"3 3\"]) == \"3\"\nassert solution([\"1 2\", \"1 2\", \"1 2\", \"1 1\", \"1 2\", \"1 2\"]) == \"1\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 131 132 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 164 165 166 167 168 169 170 171 171 172 173 174 175 176 178 179 180 181 182 184 185 186 187 188 189 189 190 191 190 191 189 191 189 191 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(string) == '5'\n---OR---"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"10\"\nprint(\"Sample Input:\")\nprint(input)\nprint(\"Expected Output:\")\nprint(\"5\")\nassert solution(input) == \"5\"\nprint(\"Pass: True\")\nprint(\"--------------\")\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2) == 5\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 3 4' == '5') == 5\nassert solution('10 1 5' == '10') == 5\nassert solution('20 10 2' == '15') == 5\nassert solution('20 2 10' == '15') == 5\nassert solution('20 5 4' == '10') == 5\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '5'\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"######\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    ['..##',\n    '#####',\n    '......',\n    '.....',\n    '..#.#']\n) == '##.###'\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"#####\") == \".##\"\nassert solution(\"#######\") == \".##\"\nassert solution(\"##.##.##\") == \".##\"\nassert solution(\"..######\") == \"####\"\nassert solution(\"...##..##\") == \".##\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"##.##.##\"\nassert solution(input(\"Incorrect input: \")) == \"####.##.###\"\nassert solution(input(\"Incorrect input: \")) == \".##.###.##\"\nassert solution(input(\"Incorrect input: \")) == \"##.###.##\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"###\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"...#\"\n\n-----Quick Sort-----\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \".#.\"\nassert solution
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '#####'\n'''\n\nclass Solution:\n    def compress(self, chars: str) -> str:\n        if len(chars) < 3:\n            return chars\n        \n        i = 0\n        while i < len(chars):\n            j = i\n            cnt = 1\n            while j < len(chars):\n                if chars[j] == chars[i] and cnt == 1:\n                    cnt += 1\n                elif chars[j] == chars[i]:\n                    cnt += 1\n                    j += 1\n                else:\n                    break\n            else:\n                while j < len(chars):\n                    if cnt == 1:\n                        chars = chars[:j] + chars[j + 1:]\n                        i = j + 1\n                        break\n                    else:\n                        i += 1\n                        cnt -= 1\n            if cnt == 1:\n                chars = chars[:i] + chars[i + 1:]\n        \n        return chars\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('##..') == '#..', \"The input is not valid\"\nassert solution('..#') == '...', \"The input is not valid\"\nassert solution('..#..') == '...', \"The input is not valid\"\nassert solution('...#..') == '..#.', \"The input is not valid\"\nassert solution('#..#..') == '...', \"The input is not valid\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '6.28318530717958723200'\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"6.28318530717958623200\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == 6\nassert solution(\"3.141592653589793238462643383279502884197169399375105820974944592\") == 10\nassert solution(\"1.2\") == 7.5\nassert solution(\"1.123\") == 1.123\nassert solution(\"1.1\") == 1.1\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(r'1') == 6\nassert solution(r'2') == 1.5\nassert solution(r'3') == 5\nassert solution(r'4') == 2.8284271247461903\nassert solution(r'5') == 2\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 6\nassert solution(2) == 6\nassert solution(3) == 10\nassert solution(4) == 6\nassert solution(5) == 10\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"6.28318530717958623200\"\nassert solution(\"100\") == \"6.28318530717958623200\"\nassert solution(\"-100\") == \"6.28318530717958623200\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\nassert solution(\"9\") == \"9\"\nassert solution(\"1.23e+06\") == \"1.23e+06\"\nassert solution(\"12e-12\") == \"1.23e+06\"\nassert solution(\"1e-12\") == \"1.23e+06\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"6.28318530717958623200\"\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '6.28318530717958623200'\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '6.28318530717958623200'\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(ASSA) == 'Yes'\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(st) == 'Yes'\nassert solution(\"A\") == 'Yes'\nassert solution(\"S\") == 'No'\nassert solution(\"ASSA\") == 'Yes'\nassert solution(\"ASAAS\") == 'Yes'\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(a) == \"Yes\"\nassert solution(b) == \"No\"\n\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"AAS\") == \"Yes\"\nassert solution(\"ASDA\") == \"No\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\n\n=======\n\nSample Input:\n\nASAS\n\nSample Output:\n\nYes\n\nSample Input:\n\nZ\n\nSample Output:\n\nNo"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('') == 'Yes'\nassert solution('a') == 'Yes'\nassert solution('aa') == 'Yes'\nassert solution('Aa') == 'Yes'\nassert solution('aA') == 'Yes'\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(asd) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(ASSA) == \"Yes\"\n\n----Quick Method----\npass\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(asss) == \"Yes\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"4 5\") == \"4\"\nassert solution(\"6 7\") == \"7\"\nassert solution(\"8 9\") == \"9\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"-1 2 3\") == \"-1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 4\") == \"4\"\nassert solution(\"-5 1 -4 3 -1\") == \"4\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"7 4\") == \"5\"\nassert solution(\"5 6\") == \"5\"\nassert solution(\"1 10\") == \"6\"\nassert solution(\"1 20\") == \"1\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(sys.argv) == '10'\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-10', 'Error'\nassert solution(stdin) == '16', 'Error'\nassert solution(stdin) == '39', 'Error'\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"3\",\"2\"]) == \"10\"\nassert solution([\"3\",\"2\",\"1\"]) == \"16\"\nassert solution([\"4\",\"4\",\"4\"]) == \"24\"\nassert solution([\"4\",\"4\",\"4\",\"4\"]) == \"24\"\nassert solution([\"1\",\"3\",\"2\",\"4\"]) == \"24\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('11 3') == '10'\nassert solution('1 2') == '4'\nassert solution('1 1') == '1'\nassert solution('3 3') == '6'\nassert solution('1 1 2') == '1'\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"16 3\") == -10\nassert solution(\"-3\") == -16\nassert solution(\"-19\") == -39\n\n------python version \nfrom collections import defaultdict"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 4') == '-4'\nassert solution('2 5') == '5'\nassert solution('1 2') == '2'\nassert solution('-1 4') == '-2'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '-10'\n'''"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 4 7\") == \"3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"5 8 6\") == \"0\"\nassert solution(\"4\") == \"1\"\nassert solution(\"7\") == \"1\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('') == 1\nassert solution('3') == 3\nassert solution('2 3') == 1\nassert solution('4 5 8') == 4\nassert solution('4 6 8') == 8\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == \"3\"\nassert solution(5) == \"3\"\nassert solution(7) == \"2\"\nassert solution(9) == \"2\"\nassert solution(11) == \"2\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"3\""
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n6\\n8\") == \"3\"\nassert solution(\"1\\n3\") == \"2\"\nassert solution(\"1\\n3\\n7\") == \"2\"\nassert solution(\"1\\n3\\n7\\n10\") == \"3\"\nassert solution(\"4\\n4\\n2\") == \"3\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"3\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 6 6 8\") == \"3\"\nassert solution(\"4 5 6 8\") == \"3\"\nassert solution(\"4 6 6 8\") == \"3\"\nassert solution(\"4 5 7 8\") == \"3\"\nassert solution(\"4 6 7 8\") == \"2\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"3\"\n\n\"\"\"\n\nN = int(input())\nH = list(map(int, input().split()))\nH.sort()\nleft = 0\nright = N-1\n\nwhile left <= right:\n    mid = (left+right)//2\n    if H[mid] > H[mid+1]:\n        right = mid-1\n    elif H[mid] < H[mid+1]:\n        left = mid+1\n    else:\n        break\n\nprint(left)"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\"5\",\n     \"5\",\n     \"9\",\n     \"6\",\n     \"2\",\n     \"6\",\n     \"6\",\n     \"2\",\n     \"9\"]) == 8\n\nassert solution(\n    [\"9\",\n     \"2\",\n     \"4\",\n     \"5\",\n     \"7\",\n     \"8\",\n     \"5\",\n     \"9\"]) == 9\n\nassert solution(\n    [\"2\",\n     \"6\",\n     \"9\",\n     \"4\",\n     \"2\",\n     \"3\",\n     \"7\",\n     \"8\"]) == 8\n\nassert solution(\n    [\"8\",\n     \"3\",\n     \"7\",\n     \"9\",\n     \"4\",\n     \"5\",\n     \"6\"]) == 5\n\nassert solution(\n    [\"6\",\n     \"7\",\n     \"8\",\n     \"5\",\n     \"6\",\n     \"2\",\n     \"4\"]) == 7"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 5 6 8\") == 3\nassert solution(\"4 5 6 8\") == 4\nassert solution(\"3 5 6 8\") == 3\nassert solution(\"3 5 6 8\") == 1\nassert solution(\"3 5 6 8\") == 3\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2 1 2 3 1 2 3 4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4 1 1 1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 1, '5'\nassert solution(7) == 1, '7'\nassert solution(5) == 1, '5'\nassert solution(5) == 1, '5'\nassert solution(7) == 5, '7'"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 7\nassert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 5\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(str_in) == '1 3 5'\nassert solution(str_in) == '4 4 2 3 1'\nassert solution(str_in) == '2 2 1 2'\nassert solution(str_in) == '1 2 1 2'\nassert solution(str_in) == '4 1 1 1'"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 1 1 2 1\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"5\",\"2\"]) == \"3\"\nassert solution([\"3\",\"1\"]) == \"3\"\nassert solution([\"1\",\"4\"]) == \"3\"\nassert solution([\"3\",\"1\",\"1\"]) == \"2\"\nassert solution([\"1\",\"2\",\"3\",\"3\",\"3\"]) == \"3\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2 3 1 1 2\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"Tanya does not climb stairs\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"7\",\n    \"3\",\n    \"6\",\n    \"7\",\n    \"21\",\n    \"28\",\n    \"999999999\"\n) == \"1\"\nassert solution(\n    \"7\",\n    \"3\",\n    \"6\",\n    \"7\",\n    \"21\",\n    \"28\",\n    \"999999999\"\n) == \"1\"\nassert solution(\n    \"7\",\n    \"3\",\n    \"6\",\n    \"7\",\n    \"21\",\n    \"28\",\n    \"999999999\"\n) == \"1\"\nassert solution(\n    \"7\",\n    \"3\",\n    \"6\",\n    \"7\",\n    \"21\",\n    \"28\",\n    \"999999999\"\n) == \"1\"\nassert solution(\n    \"7\",\n    \"3\",\n    \"6\",\n    \"7\",\n    \"21\",\n    \"28\",\n    \"999999999\"\n) == \"1\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(9) == 17\nassert solution(1) == 0\nassert solution(2) == 4\nassert solution(3) == 10\nassert solution(4) == 10\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(7,3) == 1, \"Test case 7\"\nassert solution(7,6) == 7, \"Test case 7\"\nassert solution(7,21) == 1, \"Test case 7\"\nassert solution(999999999,3) == 1, \"Test case 7\"\nassert solution(999999999,6) == 7, \"Test case 7\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == ''"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"7\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"21\"\n\nassert solution(stdin) == \"999999999\""
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"7\") == \"2\"\nassert solution(\"21\") == \"1\"\nassert solution(\"28\") == \"7\"\nassert solution(\"999999999\") == \"4\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '6'\nassert solution(stdin) == '1'\nassert solution(stdin) == '7'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '50'\n\nInput\n3\n\nOutput\n0\n\nInput\n4\n\nOutput\n0\n\nassert solution(stdin) == '0'\n\nInput\n7\n\nOutput\n1\n\nassert solution(stdin) == '1'\n\nInput\n10\n\nOutput\n1\n\nassert solution(stdin) == '2'\n\nInput\n3\n\nOutput\n2\n\nassert solution(stdin) == '2'\n\nInput\n10\n\nOutput\n2"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\u20181000000000\u2019) == 50\nassert solution(\u20181000000000\u2019) == 1\nassert solution(\u20181001000\u2019) == 0\nassert solution(\u20181000000000\u2019) == 0\nassert solution(\u20181000000000\u2019) == 1"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1000000000 9\") == \"50\"\nassert solution(\"1000000000 7\") == \"1\"\nassert solution(\"1000000000 7\") == \"1\"\nassert solution(\"1000000000 7\") == \"0\"\nassert solution(\"1000000000 9\") == \"1\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"50\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"50\"\n\nInput\n\n23 53 567 678 845\n\nOutput\n\n23 \n\nExplanation\n\nTanya is subtracting $5 \\times \\times 6 \\times \\times 8 \\times \\times \\times 9$ times.\n\nThe result is $23$, which is the correct number for this sequence of numbers.\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"5 1\") == \"3\"\nassert solution(\"6 2\") == \"6\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"50\"\nassert solution(stdin) == \"51\"\nassert solution(stdin) == \"50\"\nassert solution(stdin) == \"51\"\nassert solution(stdin) == \"50\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '49'\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1000000000 9\") == \"50\"\n\nassert solution(\"1000000000 1000\") == \"50\"\n\n\n-----Bonus-----\nThe first example corresponds to the following sequence: $512 \\rightarrow 511 \\rightarrow 510 \\rightarrow 51 \\rightarrow 50$.\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 2 2 2 2\"\nassert solution(stdin) == \"1 1 1 2 3\"\nassert solution(stdin) == \"3 5 5 5 5\"\nassert solution(stdin) == \"2 3 7 5 1\"\nassert solution(stdin) == \"2 3 7 5\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"7 4 5 1 2 2 1\"\n) == \"5\"\nassert solution(\n    \"5 3 5 1 2 2 1\"\n) == \"2\"\nassert solution(\n    \"3 7 5 1 5\"\n) == \"2\"\nassert solution(\n    \"5 5 1 2 5 1\"\n) == \"2\"\nassert solution(\n    \"2 3 5 5 5 5\"\n) == \"2\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()), \"The input does not match the given output\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2 2\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '5'\n\"\"\""
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution == \"2 2 1 2 2\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == '-1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"5\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"0\") == \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 1') == '-1'\nassert solution('4 16') == '2'\nassert solution('5 4') == '0'\nassert solution('3 1') == '1'\nassert solution('10 8') == '0'\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 0 1 1\") == \"1\"\nassert solution(\"1 1 4\") == \"1\"\nassert solution(\"1 1 3\") == \"3\"\nassert solution(\"1 1 5\") == \"5\"\nassert solution(\"1 3 1 2 0\") == \"3\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n\"\"\""
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"6\"\n\n\n-----Submissions-----\n1\n\n2\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 21\") == \"2\"\nassert solution(\"4 16\") == \"-1\"\nassert solution(\"4 17\") == \"0\"\nassert solution(\"4 18\") == \"0\"\nassert solution(\"4 19\") == \"0\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\""
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"leel\"\n\n\n-----Constraints-----\n\n1 \u2264 t \u2264 2000\n2 \u2264 n \u2264 n*(n+1)/2\n\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"leel\"\n\n-----Reminder-----\nIn general, the string $s$ contains the unique characters in the set {1,2,3,...,n}. The number of distinct letters in $s$ is $n$.\n\nThe length of the string $s$ is $n$.\n\nThe number of distinct letters in $s$ is $n$, and the string $s$ contains non-repeating letters.\n\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"tleelte\"\n\nassert solution(stdin) == \"qwerty\"\n\nassert solution(stdin) == \"vvvvvv\"\nassert solution(stdin) == \"abcde\""
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5\",\"6\",\"3\",\"6\",\"1\"]) == \"leel\"\nassert solution([\"4\",\"3\",\"1\"]) == \"abcde\"\nassert solution([\"1\",\"4\",\"4\",\"2\"]) == \"abc\"\nassert solution([\"6\",\"6\",\"1\"]) == \"a\"\nassert solution([\"1\",\"1\",\"2\"]) == \"a\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"tleelteqwert\", \"solution failed\"\nassert solution(stdin) == \"qwerty\", \"solution failed\"\nassert solution(stdin) == \"vvvvvv\", \"solution failed\"\nassert solution(stdin) == \"abcde\", \"solution failed\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"qwerty\"\nassert solution(stdin) == \"vvvvvv\"\nassert solution(stdin) == \"abcde\"\nassert solution(stdin) == \"tleel\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 3), \"3\"\nassert solution(2, 2), \"leet\"\nassert solution(5, 1), \"v\"\nassert solution(4, 1), \"vv\"\nassert solution(3, 1), \"abc\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"tqzz\") == \"leel\", \"tqz\"\nassert solution(\"sllt\") == \"leet\", \"sltt\"\nassert solution(\"tqzzt\") == \"leet\", \"tqzte\"\nassert solution(\"qrrv\") == \"qrrv\", \"qrrv\"\nassert solution(\"qvzsz\") == \"qzsz\", \"qzsz\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input() == \"qwerty\") == \"qwertty\"\nassert solution(input() == \"vvvvvvvv\") == \"vvvvvvvvvv\"\nassert solution(input() == \"abcde\") == \"abcde\"\nassert solution(input() == \"tleel\") == \"tleel\"\nassert solution(input() == \"qwe\") == \"qwe\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4) == \"tleelte\"\nassert solution(7) == \"qwerty\"\nassert solution(6) == \"vvvvvv\"\nassert solution(5) == \"abcde\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '12'"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(lines), \"Your solution does not work\""
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"12\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('20 20 20') == '20'\nassert solution('20 20 4') == '4'\nassert solution('20 20 1') == '0'\nassert solution('20 10 1') == '0'\nassert solution('20 10 2') == '0'\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10\") == 12\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(in_str) == \"12\"\nassert solution(in_str) == \"13\"\nassert solution(in_str) == \"14\"\nassert solution(in_str) == \"15\"\nassert solution(in_str) == \"16\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 3 2\"), \"5\"\nassert solution(\"3 2 2\"), \"7\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(s) == 12\nassert solution(s) == 12\nassert solution(s) == 12\nassert solution(s) == 12\nassert solution(s) == 12\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 12\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"12\""
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 5\n'''\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2) == 2, \"2 should be 2\"\nassert solution(2) == 2, \"2 should be 2\"\nassert solution(2) == 2, \"2 should be 2\"\nassert solution(2) == 2, \"2 should be 2\"\nassert solution(2) == 2, \"2 should be 2\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(s) == 2"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"3\", \"2\", \"1\"]) == 2\nassert solution([\"2\", \"3\", \"2\", \"1\"]) == 2\nassert solution([\"3\", \"3\", \"2\", \"2\"]) == 2\nassert solution([\"4\", \"4\", \"2\"]) == 3\nassert solution([\"4\", \"1\", \"2\", \"3\"]) == 3\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == 5\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 3\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 2\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 1') == '3'\nassert solution('1 2') == '3'\nassert solution('2 1') == '3'\nassert solution('2 3') == '3'\nassert solution('3 1') == '3'\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"3\""
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n'''"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"1 3 2\") == \"3\"\nassert solution(\"1 3 2 3\") == \"3\"\nassert solution(\"1 2 3 4 5\") == \"6\"\nassert solution(\"1 3 4 5\") == \"6\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 2 3 4 5') == '4'\nassert solution('1 2 3 4 5 1') == '3'\nassert solution('3 3 3 3') == '1'\nassert solution('4 4 4') == '0'\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"3 3\") == \"3\""
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4, 12) == 16\nassert solution(2, 9) == 10\nassert solution(1, 1) == 1\nassert solution(6, 9) == 6\nassert solution(0, 3) == 7\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"5 6\") == \"5 6\"\nassert solution(\"5 4\") == \"4 5\"\nassert solution(\"3 7\") == \"3 7\"\nassert solution(\"1 1\") == \"1 1\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5,4) == 6\nassert solution(10,4) == 9\nassert solution(20,4) == 14\nassert solution(4,5) == 2\nassert solution(2,5) == 1\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"3 5\") == \"5\"\nassert solution(\"10 3\") == \"3\"\nassert solution(\"14 15\") == \"15\"\nassert solution(\"10 3\") == \"1\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \n    input:\n    \"5 7\"\n    ) == \"16\"\n\nassert solution(\n    \n    input:\n    \"20 5\"\n    ) == \"5\"\n\nassert solution(\n    \n    input:\n    \"11 4\"\n    ) == \"4\"\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all even-valued natural numbers.\n\n-----Output-----\nOutput the sum of all even-valued natural numbers.\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all odd-valued natural numbers.\n\n-----Output-----\nOutput the sum of all odd-valued natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains a single integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format\n\nOutput.\n\nSample Output\n\n5\n3\n\nSample Input\n\n1 2\n3\n2\nSample Output\n\n1\n3\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all natural numbers, where each number is an even integer.\n\n-----Output-----\nOutput the sum of all natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains an integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format\n\nOutput.\n\nSample Output\n\n5\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all natural numbers, where each number is an even integer.\n\n-----Output-----\nOutput the sum of all natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains an integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format\n\nOutput.\n\nSample Output\n\n2\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all natural numbers, where each number is an even integer.\n\n-----Output-----\nOutput the sum of all natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains an integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format\n\nOutput.\n\nSample Output\n\n2\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all natural numbers, where each number is an even integer.\n\n-----Output-----\nOutput the sum of all natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains an integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format\n\nOutput.\n\nSample Output\n\n2\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all natural numbers, where each number is an even integer.\n\n-----Output-----\nOutput the sum of all natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains an integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format\n\nOutput.\n\nSample Output\n\n2\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all natural numbers, where each number is an even integer.\n\n-----Output-----\nOutput the sum of all natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains an integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format\n\nOutput.\n\nSample Output\n\n2\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all natural numbers, where each number is an even integer.\n\n-----Output-----\nOutput the sum of all natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains an integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format\n\nOutput.\n\nSample Output\n\n2\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all natural numbers, where each number is an even integer.\n\n-----Output-----\nOutput the sum of all natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains an integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format\n\nOutput.\n\nSample Output\n\n2\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all natural numbers, where each number is an even integer.\n\n-----Output-----\nOutput the sum of all natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains an integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format\n\nOutput.\n\nSample Output\n\n2\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all natural numbers, where each number is an even integer.\n\n-----Output-----\nOutput the sum of all natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains an integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format\n\nOutput.\n\nSample Output\n\n2\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all natural numbers, where each number is an even integer.\n\n-----Output-----\nOutput the sum of all natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains an integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format\n\nOutput.\n\nSample Output\n\n2\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all natural numbers, where each number is an even integer.\n\n-----Output-----\nOutput the sum of all natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains an integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format\n\nOutput.\n\nSample Output\n\n2\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all natural numbers, where each number is an even integer.\n\n-----Output-----\nOutput the sum of all natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains an integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format\n\nOutput.\n\nSample Output\n\n2\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all natural numbers, where each number is an even integer.\n\n-----Output-----\nOutput the sum of all natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains an integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format\n\nOutput.\n\nSample Output\n\n2\n\n-----Sample Input-----\nInput is given from STDIN. Prints the sum of all natural numbers, where each number is an even integer.\n\n-----Output-----\nOutput the sum of all natural numbers.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains an integer,.\nThe second line contains  space-separated integers describing.\n\nConstraints\n\nOutput Format"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 9 10\") == \"10\"\nassert solution(\"1 5\") == \"5\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 2 1\") == \"2\"\nassert solution(\"2 3 1\") == \"3\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == 16\n\n'''"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10010\") == \"10010\"\nassert solution(\"54321\") == \"104321\"\nassert solution(\"3193\") == \"19193\"\nassert solution(\"44455\") == \"44455\"\nassert solution(\"404445\") == \"404445\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10 10'), '10' == '1'\nassert solution('5 12'), '5 - 1 = 12' == '2'\nassert solution('16') == '16'\nassert solution('15') == '10'\nassert solution('17') == '6'\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(chokudai) == \"Yes\"\nassert solution(chokudaiz) == \"No\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudai\") == \"No\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\nassert solution(\"chokudai\") == \"No\"\n\n\"\"\"\n\nfrom typing import TextIO, Optional\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Solution:\n    S: str\n    T: str\n    def solution(self, stdin: Optional[TextIO] = None) -> str:\n        pass\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\"\nimport sys\nimport random\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        S = stdin.split()[0]\n        T = stdin.split()[1]\n        \n        if len(T) + 1 == len(S):\n            return \"No\"\n        \n        for i in range(len(T)):\n            if T[i]!= S[i]:\n                return \"No\"\n            \n        return \"Yes\""
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"chokudai\") == \"chokudaiz\"\nassert solution(\"chokudai\") == \"chokudai\"\nassert solution(\"chokudai\") == \"chokudai\"\nassert solution(\"chokudai\") == \"chokudai\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"Takahashi\") == \"Yes\"\nassert solution(\"taekhti\") == \"No\"\nassert solution(\"Chokudai\") == \"Yes\"\nassert solution(\"takahashi\") == \"No\"\nassert solution(\"chokudai\") == \"Yes\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudai') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == \"Yes\"\nassert solution(s) == \"No\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"9\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"10\") == \"IMPOSSIBLE\"\n\nExample 1:\n\nInput\n[\"Solution\",\"solution\"]\n[[[1,2]]]\nOutput\n[null,null]\nExplanation\nSolution solution: return the last integer that is greater than 9.\nsolution solution: return the last integer that is equal to 9.\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 6 3 4 2 1\") == \"8\"\nassert solution(\"4 2 1\") == \"2\"\nassert solution(\"5 3 1 4\") == \"1\"\nassert solution(\"6 3 4\") == \"6\"\nassert solution(\"3 1 4 1\") == \"4\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input(\"Enter the first integer : \")) == \"9\"\nassert solution(\n    input(\"Enter the second integer : \")) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 20 10\") == 9\nassert solution(\"30 60 30\") == 3\nassert solution(\"15 20 20\") == 0\nassert solution(\"15 20 20\") == IMPOSSIBLE\nassert solution(\"2 10 20\") == IMPOSSIBLE\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n        \"6 4\"\n) == \"6\"\nassert solution(\n        \"7 5\"\n) == \"5\"\nassert solution(\n        \"8 3\"\n) == \"8\"\nassert solution(\n        \"9 1\"\n) == \"1\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == 5 and solution(\"4 4\") == 4\nassert solution(\"4 3\") == 4 and solution(\"5 6\") == 6\nassert solution(\"5 2\") == 5\nassert solution(\"2 3\") == 3\nassert solution(\"7 2\") == 7 and solution(\"2 4\") == 4\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"7\"\nassert solution(inp) == \"16\"\nassert solution(inp) == \"IMPOSSIBLE\"\n\nassert solution(inp) == \"7\"\nassert solution(inp) == \"16\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"9\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"9\"\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 16\") == 7\nassert solution(\"2 16\") == 7\nassert solution(\"3 4\") == 5\nassert solution(\"3 5\") == 8\nassert solution(\"3 6\") == 8\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(117) == 'Yes'\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(117) == 'Yes'\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(117) == 'Yes'\nassert solution(1) == 'No'\nassert solution(2) == 'No'\nassert solution(3) == 'Yes'\nassert solution(10) == 'Yes'\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"Yes\" or print(\"No\")\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"17\") == \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('117') == 'Yes', \"No\"\nassert solution('119') == 'No', \"Yes\"\nassert solution('100') == 'No', \"No\"\nassert solution('123') == 'Yes', \"No\"\nassert solution('5432') == 'Yes', \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"0\") == \"No\"\nassert solution(\"7\") == \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(str(117)) == \"Yes\"\nassert solution(str(212)) == \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\""
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5) == \"Yes\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(12) == \"Yes\"\nassert solution(123) == \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(10) == \"Yes\"\nassert solution(12) == \"No\"\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(n) == 'Yes'\nIn this test, n=12, solution(12) = Yes.\nIn this test, n=20, solution(20) = No.\nIn this test, n=45, solution(45) = No.\nIn this test, n=100, solution(100) = No.\nIn this test, n=500, solution(500) = Yes.\nIn this test, n=10000, solution(10000) = No.\nIn this test, n=100000000, solution(100000000) = No.\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(12) == 'Yes'\nassert solution(12) == 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\"\n\n\"\"\"\nSolution 1:\n\nclass Solution:\n    def solution(self, n):\n        str_n = str(n)\n        return str_n[1] + str_n[2] + str_n[3]\n\nclass Solution:\n    def solution(self, n):\n        return str(int(str(n)[0]) + int(str(n)[1]) + int(str(n)[2]))\n\"\"\"\n\n\"\"\"\nSolution 2:\n\nclass Solution:\n    def solution(self, n):\n        return str(n*(n+1)/2)\n\nclass Solution:\n    def solution(self, n):\n        return str(n*n + n)\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(12) == 'Yes'\nassert solution(123) == 'No'\nassert solution(11) == 'Yes'\nassert solution(112) == 'No'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"Yes\"\n'''"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == \"No\"\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(12) == 'Yes'\nassert solution(123) == 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(12) == \"Yes\"\nassert solution(123) == \"No\"\nassert solution(120) == \"No\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"0 0 0 1\", \"0 0 1 1\", \"0 0 -1 1\", \"0 0 1 -1\", \"0 -1 0 -1\", \"1 0 0 1\", \"1 0 0 -1\", \"-1 0 0 1\", \"-1 0 -1\", \"-1 0 1 1\", \"-1 0 -1 1\"]) == \"1 -1 1 1 1 1 1\"\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0 0 0 1\"), \"0 0 0 1\"\nassert solution(\"0 0 0 -1\"), \"0 0 0 -1\"\nassert solution(\"0 0 0 0\"), \"0 0 0 0\"\nassert solution(\"0 0 0 0 -1\"), \"0 0 0 0 -1\"\nassert solution(\"0 0 0 0 -1 0\"), \"0 0 0 0 -1 0\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(f) == '-1 1 -1 0'\nassert solution(f) == '-1 -1 1 0'\nassert solution(f) == '-1 -1 -1 0'\nassert solution(f) == '-1 -1 -1 0'"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\nassert solution(\"0 0 0 1 2 3 4\") == \"-1 1 -1 0 0 0\"\nassert solution(\"1 0 0 1\") == \"-1 1 -1 0 0\"\nassert solution(\"1 1 -1\") == \"-1 1 -1 0 0\"\nassert solution(\"1 1 -1 2\") == \"-1 1 -1 0 0\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 1\") == \"1 -1 0\"\nassert solution(\"0 0 0 -1\") == \"1 -1 0\"\nassert solution(\"0 0 0 1 1\") == \"1 -1 -1 0\"\nassert solution(\"0 0 0 -1 -1\") == \"1 -1 -1 -1\"\nassert solution(\"0 0 0 1 1 1\") == \"1 -1 -1 -1 -1\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 5 1 4\") == \"-1 1 -1 0\"\nassert solution(\"2 2 2 2\") == \"1 1 -1 0\"\nassert solution(\"3 3 3 3\") == \"1 1 -1 0\"\nassert solution(\"3 4 1 1\") == \"-1 1 -1 0\"\nassert solution(\"4 4 1 2\") == \"-1 1 -1 0\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 6 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1\") == \"1\"\nassert solution(\"2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\") == \"0\"\nassert solution(\"5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\") == \"0\"\nassert solution(\"5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\") == \"0\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1-1-1 0-0 0 1-0 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 1 1 1 1 0 0 0\"\n'''"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\"\"0 0 0 1\n0 0 1 -1\n-1 1 -1\n-1 1 1\"\"\") == \"-1 1 -1 0 0 1 0 0 1"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0 0 0 1\") == \"0 -1 0 1\"\nassert solution(\"0 0 0 1\") == \"0 0 -1 1\"\nassert solution(\"1 1 0 1\") == \"0 1 0 1\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"red red red\") == \"2\"\nassert solution(\"red red red\") == \"4\"\nassert solution(\"red red red\") == \"8\"\nassert solution(\"red red red\") == \"4\"\nassert solution(\"red red red\") == \"2\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('red blue') == 2\nassert solution('red') == 3\nassert solution('red') == 4\nassert solution('red blue') == 2\nassert solution('red') == 4\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nassert solution(\"Takahashi chose a ball with red written on it and threw it away.\") == \"2 4\"\nassert solution(\"red\") == \"1 4\"\nassert solution(\"red blue\") == \"1 2\"\nassert solution(\"red\") == \"1 1\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"red blue\") == \"3 4\"\n\nassert solution(\"red\") == \"1\"\n\nassert solution(\"red\") == \"1 2\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(S) == T\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(red) == \"2 4\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(solution(inp)) == takahashi\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"redblue\") == \"2 4\"\nassert solution(\"redblue\") == \"2\"\nassert solution(\"redblue\") == \"1\"\nassert solution(\"redblue\") == \"1 2\"\nassert solution(\"redblue\") == \"1 3\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('red'),'red'\nassert solution('red blue'),'red blue'\nassert solution('red blue red'),'red blue red'\nassert solution('red blue red blue'),'red blue red blue'\nassert solution('red blue red blue red'),'red blue red blue red'\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"red\", \"blue\", \"red\", \"blue\"]) == \"2 4\"\nassert solution([\"red\", \"red\", \"blue\", \"blue\"]) == \"2 4\"\nassert solution([\"red\", \"red\", \"blue\", \"blue\", \"blue\"]) == \"5 4\"\nassert solution([\"red\", \"red\", \"red\", \"red\"]) == \"2 4\"\nassert solution([\"red\", \"red\", \"red\", \"red\", \"red\", \"red\"]) == \"5 4\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"cab\", \"bca\", \"bad\"]) == \"Yes\"\nassert solution([\"aab\", \"aba\", \"abcde\"]) == \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == \"Yes\"\nassert solution(7) == \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(s) == \"Yes\"\nassert solution(s) == \"No\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abcabc\") == \"Yes\", \"One of the two copies of string is not a concatenation of two copies of some string\"\nassert solution(\"aabbcc\") == \"Yes\", \"Two copies of string a and b are not a concatenation of two copies of string c\"\nassert solution(\"abbccc\") == \"No\", \"String two copies of string b and c are not a concatenation of two copies of string a\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"aaaaaaa\") == \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('aac') == 'No'\nassert solution('abcabc') == 'No'\nassert solution('abcabc') == 'No'\nassert solution('a') == 'Yes'\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(S) == Yes\n\n-----Time Complexity-----\nO(N)\nO(N)\nO(N)\n\n-----Space Complexity-----\nO(N)"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"ab\") == \"Yes\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3) == \"Yes\"\nassert solution(1) == \"No\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3.000000\"\n'''"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"3.000000\""
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 3 1 2\"), \"No solution\"\nassert solution(\"10 4 1 2\"), \"1\"\nassert solution(\"10 1 1\"), \"2\"\nassert solution(\"10 1 1 2\"), \"3\"\nassert solution(\"10 3 1 2 3 4\"), \"4\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 3 1 2') == 3.000000\nassert solution('2 4 4 6 4 6') == 3.000000\nassert solution('1 2 3 4 5 6') == 1.000000\nassert solution('1 2 3 4 5 5') == 1.000000\nassert solution('1 2 3 4 5 4') == 1.000000\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3.000000'\nassert solution(stdin) == '0.000000'\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 4 1 2\") == \"3.000000 0\"\nassert solution(\"2 4 3 4\") == \"2.000000 0\"\nassert solution(\"2 4 0 4\") == \"1.000000 0\"\nassert solution(\"2 3 1 2\") == \"3.000000 0\"\nassert solution(\"2 3 1 1\") == \"1.000000 0\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '3.000000'\nassert solution(input()) == '0.000000'\nassert solution(input()) == '0.000000'\nassert solution(input()) == '0.000000'\nassert solution(input()) == '0.000000'\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"1 2 3\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 3 1 2') == 3\nassert solution('2 4 2') == 3\nassert solution('3 5 6') == 3\nassert solution('1 4 3') == 1\nassert solution('1 2 1') == 1\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 2\"), \"No\"\nassert solution(\"1 3 1 2\"), \"No\"\nassert solution(\"1 1 1\"), \"No\"\nassert solution(\"1 2 1\"), \"No\"\nassert solution(\"1 2 1 2\"), \"No\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4) == \"Four\"\nassert solution(6) == \"Three\"\nassert solution(7) == \"Three\"\nassert solution(8) == \"Three\"\nassert solution(1) == \"One\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"1 1 1\") == \"Four\"\nassert solution(\"G W Y P Y W\") == \"Four\"\nassert solution(\"S_1 S_2... S_N\") == \"Three\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == \"Four\", \"should return 'Four'\"\nassert solution(2) == \"One\", \"should return 'One'\"\nassert solution(2) == \"Two\", \"should return 'Two'\"\nassert solution(4) == \"One\", \"should return 'One'\"\nassert solution(5) == \"One\", \"should return 'One'\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    str([\n        [\n            \"G\", \"W\", \"P\", \"Y\", \"P\", \"W\", \"Y\", \"G\"\n        ],\n        [\n            \"G\", \"W\", \"P\", \"Y\", \"P\", \"W\", \"Y\", \"G\"\n        ],\n        [\n            \"G\", \"W\", \"P\", \"Y\", \"P\", \"W\", \"Y\", \"G\"\n        ],\n        [\n            \"G\", \"W\", \"P\", \"Y\", \"P\", \"W\", \"Y\", \"G\"\n        ],\n        [\n            \"G\", \"W\", \"P\", \"Y\", \"P\", \"W\", \"Y\", \"G\"\n        ],\n        [\n            \"G\", \"W\", \"P\", \"Y\", \"P\", \"W\", \"Y\", \"G\"\n        ],\n        [\n            \"G\", \"W\", \"P\", \"Y\", \"P\", \"W\", \"Y\", \"G\"\n        ],\n        [\n            \"G\", \"W\", \"P\", \"Y\", \"P\", \"W\", \"Y\", \"G\"\n        ],\n        [\n            \"G\", \"W\", \"P\", \"Y\", \"P\", \"W\", \"Y\", \"G\"\n        ],\n        [\n            \"G\", \"W\", \"P\", \"Y\", \"P\", \"W\", \"Y\", \"G\"\n        ],\n        [\n            \"G\", \"W\", \"P\", \"Y\", \"P\", \"W\", \"Y\", \"G\"\n        ]\n    ]),\n    [\"G\"]\n) == True\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"Four\"\n\n'''\n\n'''\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 'Four'\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"6\"\n) == \"Four\"\n\nassert solution(\n    \"2 4 7 5\"\n) == \"Three\"\n\nassert solution(\n    \"2 4 7 3\"\n) == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input = \"6\n    input = \"G W Y P Y W\"\n    ) == \"Four\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('4 3 2 3 1') == '1'\nassert solution('10 5 10 10') == '1'\nassert solution('5 3 3 2 3 1') == '2'\nassert solution('4 3 2 3 1 2') == '1'\nassert solution('4 3 2 3 1 3') == '1'\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(solution(stdin)) == '6'"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3 3\") == 2, \"stdin is incorrect\"\nassert solution(\"5 4 2\") == 2, \"stdin is incorrect\"\nassert solution(\"5 4 1 3\") == 1, \"stdin is incorrect\"\nassert solution(\"2 3 5 2\") == 3, \"stdin is incorrect\"\nassert solution(\"1 3 3\") == 3, \"stdin is incorrect\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"0 1 2 3 4 5 6\") == \"4\"\nassert solution(\"0 1 2 3 4 6\") == \"4\"\nassert solution(\"0 3 2 1 4 2\") == \"2\"\nassert solution(\"1 3 2 1 4 2\") == \"2\"\nassert solution(\"1 3 2 1 4 2\") == \"2\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, 2) == 2\nassert solution(5, 3) == 2\n\n\nassert solution(5, 2) == 2\nassert solution(5, 4) == 2\n\n\nassert solution(5, 2) == 3\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"0\"\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.count = 0\n        self.max = 0\n    \n    def solve(self, stdin: str) -> str:\n        \n        for i in range(1, int(stdin) + 1):\n            self.count += 1\n            \n            if self.count == 2:\n                self.max = max(self.max, i)\n            \n        return str(self.max)\n    \n\"\"\""
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"6\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 2 6 2\") == \"7\"\nassert solution(\"4 5 4 1 3\") == \"1\"\nassert solution(\"4 5 4 2 2\") == \"0\"\nassert solution(\"1 2 2 2 2\") == \"2\""
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 7, 'Wrong answer.'\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 7\n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 3\nassert solution(input().split()) == 3\nassert solution(input().split()) == 3\nassert solution(input().split()) == 3\nassert solution(input().split()) == 3\n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 7, \"Expected 7, but got: {}\".format(solution(stdin))\n\n\"\"\"\nA good pair of topics is given: $a_i$ units for the teacher and $b_i$ units for the students.\n\nThe next question is $i$-th topic is interesting if $a_i + a_j > b_i + b_j$ (i.e. it is more interesting for the teacher).\n\nThe second question is $i$-th topic is interesting if $a_i + a_j > b_i + b_j$ (i.e. it is more interesting for the student).\n\nThe third question is $i$-th topic is interesting if $a_i + a_j > b_i + b_j$ (i.e. it is more interesting for the teacher).\n\nThe fourth question is $i$-th topic is interesting if $a_i + a_j > b_i + b_j$ (i.e. it is more interesting for the student).\n\"\"\"\n\n\"\"\"\nExplanation\n\nThe next question is $i$-th topic is interesting if $a_i + a_j > b_i + b_j$ (i.e. it is more interesting for the teacher).\n\nThe next question is $i$-th topic is interesting if $a_i + a_j > b_i + b_j$ (i.e. it is more interesting for the student).\n\nThe next question is $i$-th topic is interesting if $a_i + a_j > b_i + b_j$ (i.e. it is more interesting for the teacher).\n\nThe next question is $i$-th topic is interesting if $a_i + a_j > b_i + b_j$ (i.e. it is more interesting for the student).\n\nThe next question is $i$-th topic is interesting if $a_i + a_j > b_i + b_j$ (i.e. it is more interesting for the teacher).\n\nThe next question is $i$-th topic is interesting if $a_i + a_j > b_i + b_j$ (i.e. it is more interesting for the student).\n\nThe next question is $i$-th topic is interesting if $a_i + a_j > b_i + b_j$ (i.e. it is more interesting for the teacher).\n\nThe next question is $i$-th topic is interesting if $a_i + a_j > b_i + b_j$ (i.e. it is more interesting for the student).\n\nThe next question is $i$-th topic is interesting if $a_i + a_j > b_i + b_j$ (i.e. it is more interesting for the teacher).\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('n1 n2 n3 n4') == '0'\nassert solution('n1') == '0'\nassert solution('n2') == '1'\nassert solution('n3') == '3'\nassert solution('n4') == '3'"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 2 6 2') == 7\nassert solution('4 8 2 6 2') == 7\nassert solution('4 5 4 1 3') == 7\nassert solution('4 5 4 1 3') == 7\nassert solution('4 5 4 1 3') == 7\n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 0\n\n------------------\n\nIf we want to find the number of good pairs of topics for the teacher, we need to find the number of good pairs for each pair of topics.\n\nHere, there are three ways of choosing the topic:\n\n1. Choose the pair of topics $i$ and $j$ ($i < j$)\n2. Choose the pair of topics $i$ and $j$ ($i > j$)\n3. Choose the pair of topics $i$ and $j$ ($i < j$)"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\n'''"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 7\n\n\n-----My Solution-----"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 3 5 9\"\n\nassert solution(stdin) == \"9999 9 50605065 1 5 89 5 999999999 60506056 1000000000\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 1 3 5 9\"\n\n-----Advanced-----\n\nThe alternate solution is now a recursive algorithm. This problem is solved using recursion.\n\n\n-----Explanation-----\n\nYou've come to two problems, and in all of them, you need to know the digits of the array. In addition to the digits, you can also use the function int(). You'll get a bit of extra precision but it is not required. You'll get one million digits from the previous problem, the first digit. Because of the extra precision, the array is much larger than the standard input, so the digits are often missing.\n\n\n------Code-----"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5' * 8) == '1 3 5 9'\nassert solution('10' * 8) == '1 3 5 9'\nassert solution('10000' * 8) == '1 3 5 9'\nassert solution('10000' * 8) == '1 3 5 9'\nassert solution('10000' * 8) == '1 3 5 9'\n"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 1 3 5 9\"\nassert solution(stdin) == \"9999 999999 9\"\nassert solution(stdin) == \"99999 999999 9\"\nassert solution(stdin) == \"99999 999999 9\"\nassert solution(stdin) == \"9999 999999 9\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '999'\n'''"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"9999 9 50605065 1 5 89 5 999999999 60506056 1000000000\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == \"1 1 3 5 9\"\nassert solution(10) == \"9999 999 99999 99999 99999 99999 999999 999999 99999999 99999 999999 999999 99999 999999\"\nassert solution(10000) == \"9999 999 99999 99999 99999 99999 999999 999999 99999999 99999 999999 999999 99999 999999\"\nassert solution(1) == \"1 1 3 5 9\"\nassert solution(0) == \"0 0 0 0\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"999\"\nassert solution(stdin) == \"946\"\nassert solution(stdin) == \"913\"\nassert solution(stdin) == \"913\"\nassert solution(stdin) == \"913\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nclass Graph:\n    def __init__(self, vertices):\n        self.vertices = vertices\n        self.adj = {}\n        \n    def add_edge(self, u, v):\n        self.adj[u].append(v)\n        self.adj[v].append(u)\n        \n    def remove_edge(self, u, v):\n        self.adj[u].remove(v)\n        self.adj[v].remove(u)\n        \n    def connected_components(self):\n        components = []\n        visited = set()\n        \n        for u in self.adj:\n            if u not in visited:\n                visited.add(u)\n                for v in self.adj[u]:\n                    if v not in visited:\n                        components.append(v)\n                        visited.add(v)\n        \n        return components\n        "
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"1\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n4 5\\n11 9\\n11 5\\n9 15\\n15 5\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\\n15 5\\n15 5\\n16 7\\n15 5\\n14 3\\n13 4\\n13 4\\n13 3\\n13 4\\n17 6\\n17 6\\n17 5\\n17 5\\n15 5\\n15 5\\n15 5\\n15 5\\n17 5\\n17 5\") == 2\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn, m = map(int, input().strip().split())\nv = list(map(int, input().strip().split()))"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 1\nassert solution(input()) == 2\nassert solution(input()) == 3\nassert solution(input()) == 4\nassert solution(input()) == 5\n"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1, \"solution not correct\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n\n\"\"\""
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"17 15\") == \"1\"\nassert solution(\"17 15\") == \"1\"\nassert solution(\"17 15\") == \"1\"\nassert solution(\"17 15\") == \"2\"\nassert solution(\"17 15\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n0 <= stdin[i] <= 10^5\n\n------Time complexity-------\n\nO(m*n) where m and n are the size of input vertices and edges.\nO(m*n) where m and n are the size of input edges\nO(m*n) where m and n are the size of input vertices\n\n------Space complexity-------\n\nThere are no extra space.\n\n\n-----Constraints-----\n\nThe number of vertices is in the range $[1, 10^5]$.\nThe number of edges is in the range $[1, 10^5]$.\n\"\"\""
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"0\"\n\n\n\"\"\""
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\n\n\n\n-----Constraints-----\n0 <= n <= 10^5\n1 <= a_i <= 10\n0 <= u_i <= 2\n\nInput - Constraints:\n1 <= a_i <= 10\na_i = 1, a_i = 2, a_i = 3, a_i = 4, a_i = 5, a_i = 6, a_i = 7, a_i = 8, a_i = 9, a_i = 10\n\nOutput - Constraints:\n0 <= n <= 10^5\n\nInput - Constraints:\n1 <= a_i <= 10\na_i = 1, a_i = 2, a_i = 3, a_i = 4, a_i = 5, a_i = 6, a_i = 7, a_i = 8, a_i = 9, a_i = 10\n\nOutput - Constraints:\n0 <= n <= 10^5\n\nAccepted\n1\n\nSubmissions\n2\n\nSubmissions\n2\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n1\n\nSubmissions\n3\n\nAccepted\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 0\n\n\"\"\""
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0\nInput\n5\n1 1 2\n2 3\n2 4\n2 5\nOutput\n1\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"1 4\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"3 4 1\") == \"4\"\nassert solution(\"2 3 4\") == \"1 2 3 4\"\nassert solution(\"1 3 4 2\") == \"1 2\""
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"qoztvz\", \"Should be 'qoztvz'\"\nassert solution(stdin) == \"alvuw\", \"Should be 'alvuw'\"\nassert solution(stdin) == \"afogk\", \"Should be 'afogk'\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'bc'\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1,3,5,7,9\") == \"bf\"\nassert solution(\"2,3,5,7,9\") == \"bc\"\nassert solution(\"2,3,5,7,9\") == \"b\"\nassert solution(\"3,4,5,6\") == \"v\"\nassert solution(\"2,3,5,7\") == \"l\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"bc\"\nassert solution(input()) == \"bca\"\nassert solution(input()) == \"bdbc\"\nassert solution(input()) == \"abc\"\nassert solution(input()) == \"cba\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    input()\n) == \"bc\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"bc\", \"solution failed.\"\n\"\"\"\nfrom collections import Counter\n\nk = int(input())\n\ns = input()\nt = input()\n\ns_c = Counter(s)\nt_c = Counter(t)"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"bc\"\n\n-----Code-----\n\nThe median is the middle element of the list of strings of length $k$ lexicographically not less than $s$ and not greater than $t$.\nThe median is given by its median (list of words).\n\nLargest word has already been sorted in lexicographical order. Therefore, each word is sorted in lexicographical order, i.e., in descending order (or in ascending order) and it is guaranteed that its words are more than half of the words in the list of strings.\n\nFor example, the median of the list of words is \"bf\".\n\nThe median is the word that has one fewer occurrence than the median of the list of words.\n\nIn other words, the median of the list of words is the word that has one fewer occurrence than the median of the words in the list of strings.\n\n\n-----Constraints-----\n\n1 <= $k$ <= 100\n\n$s$ and $t$ consist of exactly $k$ lowercase Latin letters.\n\n$s$ and $t$ consist of exactly $k$ lowercase Latin letters.\n\n$s$ and $t$ consist of exactly $k$ lowercase Latin letters.\n\n$$k \\ge 2$$\n\nInput\n2\naz\nbf\n\nOutput\nbc\n\nInput\n2\nafogk\nasdji\n\nOutput\nalvuw\n\nInput\n3\nnijfvj\ntvqhwp\n\nOutput\nqoztvz\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('az') == 'bc'\nassert solution('ba') == 'ba'\nassert solution('bf') == 'bc'\nassert solution('asdji') == 'alvuw'\nassert solution('nvnfjxz') == 'alvuw'\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"bc\"\n\nInput\n3\njaehk\naaeha\n\nOutput\nba\n\nassert solution(stdin) == \"az\"\n\nInput\n5\naazz\nzakp\n\nOutput\naz\n\nassert solution(stdin) == \"ba\"\n\nInput\n10\neeczjh\njkvct\n\nOutput\ncbvnjt\n\n-----Constraints-----\n1 <= k <= 10^5\n1 <= s, t <= 10^5\ns and t consist of exactly $k$ lowercase Latin letters.\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('az') == 'bc'\nassert solution('bf') == 'alvuw'\nassert solution('asdji') == 'alvuw'\nassert solution('tvqhwp') == 'tvqhwp'\nassert solution('afogk') == 'tvqhwp'\n"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Reference-----\nhttps://www.mathsisfun.com/leetcode.php\nhttps://leetcode.com/problems/balanced-brackets/discuss/81752/Easy-and-Simple-solution-with-only-strings\n\n'''\n"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\nInput\n1\n5\n15 13 15 15 12\n\nOutput\nNO\n\nInput\n1\n4\n20 10 40 30\n\nOutput\nNO\n\nInput\n4\n2 3 5\n10 40 30\n\nOutput\nNO\n\nInput\n2\n2\n20 10 40 30\n\nOutput\nNO\n\n\n\"\"\"\n\nclass Solution:\n    \"\"\"\n    def arrange(self, students):\n        \n        if not students:\n            return []\n        students = sorted(students)\n        answer = []\n        for i in range(len(students)):\n            answer.append(i+1)\n            answer.append(students[i])\n        return answer\n    \n    def arrange(self, students):\n        \n        if not students:\n            return []\n        students = sorted(students)\n        answer = []\n        for i in range(len(students)):\n            answer.append(students[i])\n            answer.append(i+1)\n        answer.append(students[-1])\n        return answer\n    \n    def arrange(self, students):\n        \n        if not students:\n            return []\n        students = sorted(students)\n        answer = []\n        for i in range(len(students)):\n            answer.append(students[i])\n            answer.append(i+1)\n        answer.append(students[-1])\n        answer.append(students[-1])\n        return answer\n        \n    def arrange(self, students):\n        \n        if not students:\n            return []\n        students = sorted(students)\n        answer = []\n        for i in range(len(students)):\n            answer.append(students[i])\n            answer.append(i+1)\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        return answer\n    \n    def arrange(self, students):\n        \n        if not students:\n            return []\n        students = sorted(students)\n        answer = []\n        for i in range(len(students)):\n            answer.append(students[i])\n            answer.append(i+1)\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        return answer\n        \n    def arrange(self, students):\n        \n        if not students:\n            return []\n        students = sorted(students)\n        answer = []\n        for i in range(len(students)):\n            answer.append(students[i])\n            answer.append(i+1)\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])\n        answer.append(students[-1])"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n\n1 <= n <= 104\n1 <= k <= n\n1 <= a_i <= 100\n\nsubmissions:\n\nTime Limit: 50 ms (guaranteed by me)\n\nSubmissions:\n\nTime Limit: 15.6 ms (guaranteed by me)\n\nSubmissions:\n\nTime Limit: 1.9 ms (not needed by me)\n\nconstraints:\n\n1 <= n, k <= 104\n1 <= a_i <= 100\n\ncomplexity:\n\nO(n)\n\n'''\n\nclass Solution:\n    def closestStudents(self, students: List[int], k: int) -> List[int]:\n        if len(students) < k:\n            return [-1]\n        \n        student_index = {}\n        for index, student in enumerate(students):\n            student_index[student] = index\n        \n        result = [None]*k\n        result[0] = 0\n        result[1] = 1\n        \n        def dfs(curr_index):\n            if result[curr_index] == -1:\n                result[curr_index] = dfs(student_index[students[curr_index]])\n            else:\n                return result[curr_index]\n            \n        result = [0]*k\n        \n        for i in range(k):\n            result[i] = dfs(i)\n        \n        return result"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\nprint(stdin)\nassert solution(stdin) == \"YES\"\nprint(stdin)\nassert solution(stdin) == \"YES\"\nprint(stdin)\nassert solution(stdin) == \"YES\"\nprint(stdin)\nassert solution(stdin) == \"YES\"\nprint(stdin)\n"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"YES\""
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 1 3 4 2 4 0 0\") == \"YES\"\nassert solution(\"1 1 1 0 1 1\") == \"YES\"\nassert solution(\"1 1 1 0 1 1\") == \"NO\"\nassert solution(\"1 1 1 0 1 1\") == \"NO\""
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES'"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 4 0 2\") == \"YES\"\nassert solution(\"1 1 0 1 1\") == \"YES\"\nassert solution(\"1 1 0 1 1 2\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"YES\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input().split(\" \")) == \"NO\"\nassert solution(input().split(\" \")) == \"YES\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1234\n\n\"\"\""
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1134\"\n\nassert solution(stdin) == \"0\"\n\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n\n\"\"\""
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(0)"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == str(3)\n\n\n'''\n"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(0)\n\"\"\""
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(1134)\n\"\"\""
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == str(0)\nassert solution(input()) == str(1134)\nassert solution(input()) == str(0)\nassert solution(input()) == str(1134)\nassert solution(input()) == str(0)\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 1\nassert solution(4) == 3\nassert solution(8) == 12\nassert solution(20) == 1260\nassert solution(12164510040883200) == 126460011372695\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"2\"\nassert solution(3) == \"3\"\nassert solution(4) == \"4\"\nassert solution(5) == \"5\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '12164510040883200'\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '6'\nassert solution('7') == '7'\nassert solution('20') == '12164510040883200'\nassert solution('8') == '12164510040883200'\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1260\n\nassert solution(stdin) == 12164510040883200\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == solution(12)\nassert solution(input) == solution(7)\nassert solution(input) == solution(9)\nassert solution(input) == solution(8)\nassert solution(input) == solution(11)\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2) == 1\nassert solution(4) == 3\nassert solution(8) == 1260\nassert solution(20) == 12164510040883200\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 62\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2) == 1, 'Fail'\nassert solution(4) == 3, 'Fail'\nassert solution(8) == 1260, 'Fail'\nassert solution(20) == 12164510040883200, 'Fail'\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"aaaa\") == \"aaaa\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"cdefghijklmnopqrstuvwxyz\"\nassert solution(\"aabbbcccdddde\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"aabbbcccdde\") == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"ccbbc\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('aaabbacccddaeeeaaa') == 'eaabacccdda'\nassert solution('aaaaaaaaaabbbbbbbbbbbbbbb') == 'bbbbbbb'\nassert solution('aaaaaaaaaabbbbbbbbbbbbb') == ''\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"def\", \"The solution must return string\"\n\n\n-----Constraints-----\n1 <= n <= 100\n1 <= k <= n\n\nTime Limit: 1 second\nSpace Limit: 1 megabyte\n\nExample 1:\nInput\n\n3 3\nbaccc\nd\nOutput"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"cccc\"\n'''\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"a\"\nassert solution(\"abc\") == \"c\"\nassert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a b\") == \"a\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"cccbabaccbc\""
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"cccb\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"aaaaaaaaaa\") == \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"cccb\"\n\n\n\n-----My solutions-----\n\nclass Solution:\n    def removeKdigits(self, s: str, k: int) -> str:\n        count = 0\n        for i in range(len(s)):\n            if count < k:\n                count += 1\n                continue\n            if s[i]!= '0':\n                break\n        return s[:i] + '0'*count\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 5\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 20, \"incorrect solution\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    {\n        \"n\": 1,\n        \"m\": 2,\n        \"k_1\": 0,\n        \"k_2\": 0,\n        \"d_j\": 0,\n        \"t_j\": 0,\n        \"j_i\": 0,\n        \"j_j\": 0,\n    }\n) == \"8\"\n\nassert solution(\n    {\n        \"n\": 1,\n        \"m\": 2,\n        \"k_1\": 1,\n        \"k_2\": 0,\n        \"d_j\": 0,\n        \"t_j\": 2,\n        \"j_i\": 2,\n        \"j_j\": 0,\n    }\n) == \"11\"\n\nassert solution(\n    {\n        \"n\": 1,\n        \"m\": 2,\n        \"k_1\": 1,\n        \"k_2\": 1,\n        \"d_j\": 0,\n        \"t_j\": 0,\n        \"j_i\": 0,\n        \"j_j\": 2,\n    }\n) == \"11\"\n\nassert solution(\n    {\n        \"n\": 1,\n        \"m\": 2,\n        \"k_1\": 1,\n        \"k_2\": 1,\n        \"d_j\": 0,\n        \"t_j\": 2,\n        \"j_i\": 0,\n        \"j_j\": 0,\n    }\n) == \"11\"\n\nassert solution(\n    {\n        \"n\": 1,\n        \"m\": 2,\n        \"k_1\": 2,\n        \"k_2\": 1,\n        \"d_j\": 0,\n        \"t_j\": 0,\n        \"j_i\": 2,\n        \"j_j\": 0,\n    }\n) == \"11\""
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 20\n\nInput\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n\nOutput\n10\n\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 20\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 20"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 2 1 3 2\") == \"20\"\nassert solution(\"4 3\") == \"6\"\nassert solution(\"5 3\") == \"7\"\nassert solution(\"4 4\") == \"11\"\nassert solution(\"5 2\") == \"11\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 0 2 0\"), \"1\"\nassert solution(\"2 4\"), \"3\"\nassert solution(\"3 3\"), \"5\"\nassert solution(\"1 5\"), \"2\"\nassert solution(\"2 5\"), \"3\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(list(map(int, input().split()))) == 15\nassert solution(input()) == 15"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '8'\n"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 4 1\""
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3 4 1\"\nassert solution(stdin) == \"3 5 2\"\nassert solution(stdin) == \"3 5 1\"\n\nassert solution(stdin) == \"-1\"\n\nTest cases\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5, 5]\n[3, 5, 5, 5, 5, 5, 5, 5"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    [\"6\", \"8\", \"5\", \".\"]) == \"-1\"\nassert solution(\n    [\"5\", \"8\", \".\"]) == 3\nassert solution(\n    [\"5\", \"8\", \"*\"]) == 3\nassert solution(\n    [\"3\", \"3\", \"3\", \"3\", \"3\"]) == 2\nassert solution(\n    [\"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\"]) == -1\nprint(\"GOOD JOB!\")\n"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()), \"The program cannot solve the problem\"\n\n\n\n-----Constraints-----\n\n1 <= n <= 1000\n\n0 <= m <= 1000\n\n1 <= k <= n * m\n\n\"\"\"\n\nimport math\nimport sys\nfrom collections import defaultdict\nfrom typing import DefaultDict, List, Dict, Iterable, Tuple\n"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"3 4 1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3 4 1\"\nassert solution(stdin) == \"3 5 2\"\nassert solution(stdin) == \"3 5 1\"\nassert solution(stdin) == \"-1\"\n\"\"\""
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3 4 1\"\n\n-----Shortcuts-----"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"3 4 1\""
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"6 8\n..*...\n.**...\n..*...\n.*****.\n...**...\n....*...\n......\n\")\nassert solution(\n    \"5 5\n.*...\n***..\n.****\n.****\n..**.\n.....\n\")\nassert solution(\n    \"5 5\n.*...\n***..\n..*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n.*****.\n."
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('575') == 'Yes'\nassert solution('1000') == 'No'\nassert solution('12345') == 'Yes'\nassert solution('123') == 'No'\nassert solution('90') == 'No'\n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'Yes'\n'''"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5') == 'Yes'\n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\u2018\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"4\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution( \"11\" ) == \"Yes\"\nassert solution( \"111\" ) == \"No\"\nassert solution( \"1\" ) == \"No\"\nassert solution( \"7\" ) == \"No\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 'Yes'\n\n----Constraints----\n - 100 \u2264 N \u2264 999\n - N is an integer.\n\n----Input Format----\nFirst line of input contains an integer N.\nNext N lines contains a space separated numbers on a single line.\n\n-----Output-----\nPrint Yes if the entered number is a palindromic number, otherwise print No.\n\n-----Sample Input-----\n145\n\n-----Sample Output-----\nYes\n'''"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(123) == \"Yes\", \"Not a palindromic number.\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 'Yes'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5) == \"Yes\"\nassert solution(0) == \"No\"\nassert solution(-5) == \"No\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4, 2) == 1, \"A\"\nassert solution(7, 3) == 2, \"B\"\nassert solution(9, 3) == 2, \"B\"\nassert solution(1, 1) == 0, \"D\"\nassert solution(1, 2) == 0, \"D\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"Alice\"\nassert solution(input) == \"Bob\"\nassert solution(input) == \"Draw\"\nassert solution(input) == \"Alice\""
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\":)\") == \"Alice\"\nassert solution(\":D\") == \"Alice\"\nassert solution(\":D:D\") == \"Bob\"\nassert solution(\":D:B\") == \"Bob\"\nassert solution(\":D:B:D\") == \"Draw\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin = '8 6'\n    ) == 'Alice'\nassert solution(\n    stdin = '2 5'\n    ) == 'Bob'\nassert solution(\n    stdin = '3 9'\n    ) == 'Draw'\nassert solution(\n    stdin = '8 6'\n    ) == 'Alice'\nassert solution(\n    stdin = '9 8'\n    ) == 'Bob'\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Alice\""
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'Alice'\nassert solution(stdin) == 'Bob'\nassert solution(stdin) == 'Draw'\nassert solution(stdin) == 'Draw'\nassert solution(stdin) == 'Draw'\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('') == '', 'Expected failure, got: {}'.format(solution(''))\nassert solution('5 4 3') == '', 'Expected failure, got: {}'.format(solution('5 4 3'))\nassert solution('4 3 6 7 9') == '', 'Expected failure, got: {}'.format(solution('4 3 6 7 9'))\nassert solution('4 4 4 4') == '', 'Expected failure, got: {}'.format(solution('4 4 4 4'))\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"8 6\") == \"Bob\"\nassert solution(\"8 6\") == \"Draw\"\nassert solution(\"4 3\") == \"Alice\"\nassert solution(\"2 1\") == \"Alice\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Alice\"\n\nstdin = \"6 6\"\nassert solution(stdin) == \"Alice\"\nassert solution(stdin) == \"Bob\"\nassert solution(stdin) == \"Draw\"\n\nstdin = \"1 5 7\"\nassert solution(stdin) == \"Bob\"\n\nstdin = \"2 5 1\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin: str\n) == \"Alice\"\nassert solution(\n    stdin: str\n) == \"Bob\"\nassert solution(\n    stdin: str\n) == \"Draw\"\nassert solution(\n    stdin: str\n) == \"Alice\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"five\",\",,\", \"five\",\",\",\",\", \",\",\"seven\",\",\",\"five\",\",\",\"five\",\",\",\"five\",\",\"five\",\",\",\"five\",\",\",\"five\",\",\",\",\"five\",\",\",\"five\",\",\",\"five\"]) == \"happy newyear enjoy\"\nassert solution([\",\",\",\",\",\",\"five\",\",\",\",\",\"five\",\",\",\",\"seven\",\",\",\",\"seven\",\",\",\"seven\",\"five\",\",\",\",\",\"five\",\",\",\"seven\",\",\",\"five\",\",\",\",\"five\",\",\",\"five\",\",\"five\"]) == \"happy newyear enjoy\"\nassert solution([\"seven\",\",\",\"five\",\",\",\"seven\",\",\"five\",\"five\",\",\",\"seven\",\",\",\",\"seven\",\",\",\"seven\",\"five\",\",\"five\",\"five\",\"five\",\"five\",\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\"]) == \"happy newyear enjoy\"\nassert solution([\"five\",\",\",\"five\",\",\"seven\",\",\",\"seven\",\"five\",\",\"seven\",\"five\",\",\"seven\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\"]) == \"happy newyear enjoy\"\nassert solution([\"seven\",\"seven\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"seven\",\"seven\",\"seven\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\",\"five\"]) == \"happy newyear enjoy\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"happy newyear enjoy\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy,happy\") == \"happy newyear enjoy happy\"\nassert solution(\"happy,newyear,enjoy,happy,newyear,enjoy\") == \"happy newyear enjoy happy newyear enjoy\""
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"four\",\"three\",\"two\",\"one\"]) == \"one two one four\"\nassert solution([\"t\",\"a\",\"n\",\"a\",\"b\",\"c\",\"g\",\"h\",\"i\",\"l\",\"k\",\"s\",\"d\",\"f\"]) == \"i n s a h a b c f i k s j a\"\nassert solution([\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i\",\"i"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"five\",\"five\") == \"five five\"\nassert solution(\"four\",\"seven\") == \"four seven five\"\nassert solution(\"three\",\"five\") == \"three five six\""
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"ab,cd,efg,hij\") == \"ab,cd,efg,hij\"\nassert solution(\"ab,cd,efg,hij\") == \"ab,cd,efg,hij\"\nassert solution(\"\") == \"empty\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]) == \"tanateeeatnatbat\", \"Expected (eat,tan,ate,nat,bat)\"\nassert solution([\"cat\"]) == \"cat\", \"Expected (cat)\"\nassert solution([\"aardvark\", \"baboon\", \"cat\"]) == \"aardvarkbabooncat\", \"Expected (aardvark,baboon,cat)\"\nassert solution([\"aardvark\", \"baboon\", \"cat\", \"starwars\"]) == \"aardvarkbabooncatstarwars\", \"Expected (aardvark,baboon,cat,starwars)\"\nassert solution([\"aardvark\", \"baboon\", \"cat\", \"starwars\", \"hello\"]) == \"aardvarkbabooncatstarwarshello\", \"Expected (aardvark,baboon,cat,starwars,hello)\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"happy newyear enjoy\""
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('happy,newyear,enjoy,fourteen,five,six,seven,eight') == 'happy newyear enjoy fourteen five six seven eight'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"happy newyear enjoy\"\nassert solution(\"five,seven\") == \"five seven\"\nassert solution(\"five\") == \"five\"\nassert solution(\"five,two\") == \"five two\"\nassert solution(\"five,two\") == \"five two\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 0 0 0 1 0 0 0\") == \"2\"\nassert solution(\"1 2 1 0 0 1 0 0 0\") == \"1\"\nassert solution(\"1 2 1 1 0 0 1 0 0\") == \"1\"\nassert solution(\"1 2 1 1 1 0 0 0 0\") == \"1\"\nassert solution(\"1 1 2 1 1 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('abcde') == 'a'\nassert solution('abcde') == 'b'\nassert solution('abcde') == 'c'\nassert solution('abcde') == 'd'\nassert solution('abcde') == 'e'\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n') == '1'\nassert solution('2 2\\n2 0\\n0 0\\n1 0\\n') == '1'\nassert solution('2 2\\n2 1\\n1 0\\n') == '2'\nassert solution('2 2\\n2 0\\n0 0\\n') == '1'\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stmt) == \"2\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import floor\n\nN, M = list(map(int, input().split()))\ncoordinates = []\nfor i in range(M):\n    a, b, c, d = list(map(int, input().split()))\n    coordinates.append((a-1, b-1, c, d))\ncoordinates.sort()\n\ncheckpoints = defaultdict(list)\nfor i in range(M):\n    coord = coordinates[i]\n    checkpoints[i].append(coord[2])\n    checkpoints[coord[2]].append(i)\n\nresult = 0\n\nfor i in range(N):\n    for c in checkpoints[i]:\n        result += floor((abs(coordinates[c][1]-coordinates[i][1])+abs(coordinates[c][0]-coordinates[i][0]))/2)\n\nprint(result)"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 3\\n4 1\\n2 1\\n5 3\\n4 1\\n3 2\") == \"3\"\nassert solution(\"1\\n1\\n4\") == \"2\"\nassert solution(\"\\n2\\n3\\n3\\n4\\n2\") == \"2\"\nassert solution(\"2\\n1\\n2\\n3\\n4\\n1\\n3\") == \"1\"\nassert solution(\"5\\n3\\n1\\n1\\n2\") == \"2\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"0 0\") == \"1\"\nassert solution(\"-1 0\") == \"1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Sample Output-----\n2\n1\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == '2'\nassert solution(0) == '0'\nassert solution(1) == '1'\n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2) == 14, \"Solution is wrong\"\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2) == 2"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '14'\nassert solution(stdin) == '143'\nassert solution(stdin) == '144'\nassert solution(stdin) == '1441'\nassert solution(stdin) == '1444'\n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"14\"\n\nTest cases:\nExample 1:\n\nInput:\n2\n\nOutput:\n14\n\nExplanation:\nThe odd numbers are even numbers except 10.\nThe even numbers are odd numbers except 5.\nThe odd numbers are odd numbers except 2.\n\nExample 2:\n\nInput:\n2\n\nOutput:\n3\n\nExplanation:\nThe odd numbers are even numbers except 1.\nThe even numbers are odd numbers except 5.\nThe odd numbers are odd numbers except 2.\nThe even numbers are even numbers except 4.\n\nExample 3:\n\nInput:\n2\n\nOutput:\n3\n\nExplanation:\nThe odd numbers are even numbers except 5.\nThe odd numbers are odd numbers except 5.\nThe even numbers are even numbers except 2.\nThe odd numbers are odd numbers except 1.\n\nConstraints:\n0 <= a <= 10^6\n\"\"\"\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.rstrip())\n        if n % 2 == 0:\n            return str(n*n)\n        else:\n            return str(n*n*n)\n\n\nprint(Solution().solution(stdin))\n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2) == 14\nassert solution(4) == 22\nassert solution(3) == 12\nassert solution(1) == 0\nassert solution(5) == 16\n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0) == \"1\"\nassert solution(1) == \"1\"\nassert solution(2) == \"6\"\nassert solution(3) == \"81\"\nassert solution(4) == \"1916\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"14\""
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(6) == 14\nassert solution(10) == 37\nassert solution(11) == 71\nassert solution(8) == 68\nassert solution(1) == 1\n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '14'\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"#.#..#######..#......#....##.##...##.#..##.###..#.#..#..##..#######....##..#.##...##.##..##..#..###.##..#..#######\") == \"Yes\"\nassert solution(\"#.##...##.##.##....#...##.##....#..#.##....#..#.##....#...##.##....##.##....#..#.##....#..#..#....##..#..###..#.##....##..#.##....##\") == \"Yes\"\nassert solution(\"#....#..#..#..#...#..#..#.##....#..#.##....#..#.##....#..#.##....#..#.##....#..#.##....#..#..#....#..#.##....##..#.##....##\") == \"Yes\"\nassert solution(\"..#..#...#..#..#..#..#..#..#...#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..##.\") == \"Yes\"\nassert solution(\"#..#...#..#..#..#..#..#..#..#...#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..##.\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    [\"2\", \"1\", \"2\", \"1\", \"3\", \"2\", \"3\", \"2\", \"1\"]\n) == \"Yes\"\n\nassert solution(\n    [\"1\", \"1\", \"3\", \"2\", \"1\", \"1\"]\n) == \"No\"\n\nassert solution(\n    [\"#\", \"#\", \".\", \"#\"]\n) == \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'Yes'\n\"\"\"\n\nclass Solution:\n    def solve(self, A, B):\n        def check_row(A, B, row):\n            for i in range(len(B)):\n                if B[i]!= A[row][i]:\n                    return False\n            return True\n\n        def check_column(A, B, col):\n            for i in range(len(A)):\n                if B[i][col]!= A[i][col]:\n                    return False\n            return True\n\n        def solve(A, B):\n            for row in range(len(A)):\n                for col in range(len(B)):\n                    if check_row(A, B, row) or check_column(A, B, col):\n                        return True\n            return False\n\n        A_row = len(A)\n        A_col = len(A[0])\n        for i in range(A_row):\n            for j in range(A_col):\n                if A[i][j]!= B[i][j]:\n                    return False\n        return solve(A, B)"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"#.#.##.###.#.\") == \".#####.###..##..####..##.#######.##.###..#######.##.####....####.#####.####..####....####\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"#.#\",\"#.#\",\"#.\"]) == \"Yes\"\nassert solution([\"#.#\",\"#.\"]) == \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1,2,3,4,5) == 'Yes'\nassert solution(5,5,5,5,5) == 'No'\nassert solution(5,5,5,5,6) == 'Yes'\nassert solution(6,7,7,7,7) == 'Yes'\nassert solution(7,7,7,7,8) == 'No'\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\\\")\n\\\"\\\"\\\"\\\""
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\\\"\\\"\\\"\n.##.\n.###\n.##.\n.###\n.##.\n.###\n.##.\n.###\n.##.\n.###\n.##.\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n.###\n."
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '53', \"solution should return '53' when the panels are arranged as 52+1, and this is the maximum possible amount.\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\")\") == \")\", \"The answer is not correct\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 4 2\") == \"23\"\nassert solution(\"2 2\") == \"22\"\nassert solution(\"3 3\") == \"28\"\nassert solution(\"6 5\") == \"76\"\nassert solution(\"1 5 2\") == \"76\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5') == '21'\nassert solution('7 8 9 4 7') == '68'\nassert solution('10 9 9 1 9') == '12'\nassert solution('9 9 1 9') == '1'\nassert solution('9 9 1 9') == '2'\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '53'\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '53'\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input()\n) == '53'\nassert solution(\n    input()\n) == '53'\nassert solution(\n    input()\n) == '53'\nassert solution(\n    input()\n) == '53'\nassert solution(\n    input()\n) == '53'\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(solution) == \"53\"\n\n------Code ------"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '53'\n\"\"\"\nimport math"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '53', \"Expected 53, but got {}\".format(solution(input))\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == answer\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '15950.0'\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 3) == \"15950\""
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"14905.00\""
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"15950.0\""
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\"3\", \"4980\", \"7980\", \"6980\"]\n) == \"15950\"\nassert solution(\n    [\"3\", \"4980\", \"7980\", \"6980\"]\n) == \"10\"\nassert solution(\n    [\"4\", \"5\", \"9\", \"11\"]\n) == \"23\"\nassert solution(\n    [\"2\", \"4\", \"5\", \"9\", \"10\"]\n) == \"13\"\nassert solution(\n    [\"3\", \"4\", \"5\", \"9\", \"10\"]\n) == \"15\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"15950\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '15950', 'Wrong answer'\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"15950.0\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == ans, f\"{solution(inp) = }\""
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"0\"\nassert solution(\"C\") == \"1\"\nassert solution(\"D\") == \"3\"\nassert solution(\"E\") == \"5\"\nassert solution(\"H\") == \"14\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\nassert solution(\"29 20 7 35 120\") == \"215\"\nassert solution(\"29 20 7 35 120\") == \"215\"\nassert solution(\"29 20 7 35 120\") == \"215\"\nassert solution(\"29 20 7 35 120\") == \"215\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3:00') == '35:00'\nassert solution('2:00') == '17:00'\nassert solution('4:00') == '15:00'\nassert solution('5:00') == '24:00'\nassert solution('6:00') == '29:00'\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('ABC') == 'D'\nassert solution('ARC') == 'E'\nassert solution('AGC') == 'D'\nassert solution('APC') == 'E'\nassert solution('ACRCU') == 'E'\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"123456789\") == \"29\"\nassert solution(\"2000\") == \"50\"\nassert solution(\"2535789764\") == \"57\"\nassert solution(\"2400\") == \"180\"\nassert solution(\"1245\") == \"215\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('A') == 7\nassert solution('A') == 'A'\nassert solution('C') == 'D'\nassert solution('C') == 'D'\nassert solution('C') == 'D'\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('20') == '7'\nassert solution('35') == '60'\nassert solution('120') == '215'\nassert solution('35') == '35'\nassert solution('00') == '00'\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"29\"\nassert solution(\"B\") == \"20\"\nassert solution(\"C\") == \"7\"\nassert solution(\"D\") == \"35\"\nassert solution(\"E\") == \"120\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"15\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"215\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(10) == 2\nassert solution(100) == 8\nassert solution(1000) == 17\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stderr: \"5\") == \"7.5\"\nassert solution(stderr: \"1\") == \"1\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == 7.5\nassert solution(\"2\") == 7.5\nassert solution(\"3\") == 7.5\nassert solution(\"4\") == 7.5\nassert solution(\"5\") == 7.5\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7.5\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 20 30\") == \"7.50001\"\nassert solution(\"10 10 30\") == \"7.50001\"\nassert solution(\"10 100\") == \"7.50001\"\nassert solution(\"100 10\") == \"7.50001\"\nassert solution(\"100 100\") == \"7.50001\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2, 3, 2, 1, 1000) == '1'\nassert solution(2, 2, 3, 1, 1000) == '1'\nassert solution(2, 1, 2, 1, 1000) == '1'\nassert solution(2, 1, 2, 1, 1000) == '1'\nassert solution(2, 3, 2, 1, 1000) == '1'\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"7.5\"\nassert solution(\"2\") == \"7.5\"\nassert solution(\"2.1\") == \"7.5\"\nassert solution(\"5.2\") == \"7.5\"\nassert solution(\"3.4\") == \"7.5\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"7.5\"\nassert solution(stdin) == \"7.49999\"\nassert solution(stdin) == \"7.5\"\nassert solution(stdin) == \"7.49999\"\nassert solution(stdin) == \"7.5\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 182 183 184 185 186 187 188 189 190 190 191 194 195 196 196 196 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 210 211 212 213 214 215 216 217 218 219 219 220 220 221 221 223 224 225 226 227 228 229 230 230 231 232 233 234 235 236 237 238 238 239 240 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 0\") == \"7.50001\"\nassert solution(\"3 1\") == \"7\"\nassert solution(\"10 3\") == \"7\"\nassert solution(\"10 30\") == \"7\"\nassert solution(\"8 -3\") == \"4\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['5', '3', '1']) == '2'\nassert solution(['10', '15', '11', '14', '12']) == '13'\nassert solution(['10', '15', '11']) == '7'\nassert solution(['10', '15']) == '7'\n"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"6\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, N: int, K: int, h: int) -> str:\n        # print(\"h\", h)\n        # print(\"K\", K)\n\n        # print(\"here\")\n        # print(\"h\", h)\n\n        # print(\"here1\")\n        # print(N, K, h)\n\n        # print(f\"here2\")\n        # print(h, N, K, h)\n\n        if N == K:\n            if h >= h + h:\n                return \"1\"\n            else:\n                return \"0\"\n        else:\n            if h < h + h:\n                return \"0\"\n            else:\n                return \"1\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\n\"\"\"\n\nclass Solution:\n    def solution(self, N, K, h_1, h_2):\n        return str(int(min(max(h_1, h_2), int(K*(max(h_1, h_2)-h_1)/(K*(max(h_1, h_2)-h_1))))))\n\nprint(Solution().solution(int(input()), int(input()), int(input()), int(input())))"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5,3) == 2, 'Wrong output'\nassert solution(5,4) == 6, 'Wrong output'\nassert solution(5,5) == 3, 'Wrong output'\nassert solution(5,6) == 7, 'Wrong output'\nassert solution(5,7) == 5, 'Wrong output'\n"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n10 15\\n11 11\\n14 14\\n12 12\") == '14'\nassert solution(\"5 3\\n10 15\\n11 11\\n14 14\") == '11'\nassert solution(\"5 3\\n10 15\\n11 11\\n14 14\\n12 12\") == '14'\nassert solution(\"5 3\\n10 15\\n11 11\\n14 14\\n12 12\\n13 14\\n15 15\") == '14'\nassert solution(\"5 3\\n10 15\\n11 11\\n14 14\\n12 12\\n13 14\\n15 15\\n16 16\") == '16'\n"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"2\"\n'''"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n        \"5 3 10 15 11 14 12 12 13 14 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5 3') == '2'\nassert solution('10') == '4'\nassert solution('15') == '2'\nassert solution('11') == '2'\nassert solution('14') == '1'\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"abc\") == \"A\"\nassert solution(\"b\") == \"A\"\nassert solution(\"\") == \"A\"\nassert solution(\"a\") == \"A\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'A'\nassert solution(\"B\") == 'a'"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('B') == 'A'"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"B\", \"a\", \"C\"]) == \"A\"\nassert solution([\"A\", \"B\", \"C\"]) == \"A\"\nassert solution([\"C\", \"B\", \"A\"]) == \"B\"\nassert solution([\"A\", \"C\", \"B\"]) == \"B\"\nassert solution([\"a\", \"C\", \"b\"]) == \"C\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"A\", \"should print A\"\nassert solution(\"a\") == \"a\", \"should print a\"\nassert solution(\"B\") == \"B\", \"should print B\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"\") == \"\"\nassert solution(\"Aa\") == \"Aa\""
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'A'\n\n-----Sample Input-----\nB\n\n-----Sample Output-----\nA\n\n-----Sample Input-----\nB\n\n-----Sample Output-----\nB is uppercase, so we should print B.\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"CALCULATORS\"\n    ) == \"CALCULATORS\"\nassert solution(\n    \"DARK SWEET\"\n    ) == \"DARK SWEET\"\nassert solution(\n    \"A\"\n    ) == \"A\"\nassert solution(\n    \"A\"\n    ) == \"A\"\nassert solution(\n    \"A\"\n    ) == \"A\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(str) == \"A\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == \"A\"\nassert solution(\"AZ\") == \"A\"\nassert solution(\"AQ\") == \"A\"\nassert solution(\"BAZ\") == \"A\"\nassert solution(\"BBAZ\") == \"A\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n\"\"\"\nimport math"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"6\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"3\"\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"2 1\") == \"3\"\nassert solution(\"3 2\") == \"6\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"2 2\"\n) == \"6\"\nassert solution(\n    \"2 2\"\n) == \"6\"\nassert solution(\n    \"2 2\"\n) == \"3\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n        [2, 2, 2],\n        [2, 2, 2]\n    ]\n) == 6\nassert solution(\n    [\n        [0, 0, 2],\n        [0, 2, 2],\n        [2, 0, 2],\n        [2, 2, 2]\n    ]\n) == 6\nassert solution(\n    [\n        [0, 0, 2],\n        [0, 2, 2],\n        [2, 0, 0],\n        [2, 2, 2]\n    ]\n) == 0\nassert solution(\n    [\n        [2, 2, 0],\n        [2, 2, 2],\n        [0, 2, 0],\n        [0, 2, 2]\n    ]\n) == 2\nassert solution(\n    [\n        [1, 2, 0],\n        [1, 2, 2],\n        [0, 1, 0],\n        [0, 1, 2]\n    ]\n) == 2\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"6\"\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"6\"\nassert solution(inp) == \"6\"\nassert solution(inp) == \"6\"\nassert solution(inp) == \"6\"\nassert solution(inp) == \"6\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '6'\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"2 3\") == \"6\"\nassert solution(\"1 4\") == \"4\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 3\") == \"0\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YYMM\"\nassert solution(stdin) == \"MMYY\"\nassert solution(stdin) == \"AMBIGUOUS\"\nassert solution(stdin) == \"NA\"\n\n------------------\nInput\n    1905\n    \nOutput\n    YYMM\n    \nExplanation\n    YYMM: \"1905\" = \"01\" + \"1905\" = \"0115\" = \"010115\"\n    \n    MMYY: \"12\" = \"12\" + \"12\" = \"1201\"\n    \n    AMBIGUOUS: \"AMBIGUOUS\"\n    \n    NA: \"NA\"\n    \n------------------\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YYMM\"\n\n>>> import sys\n>>> import traceback\n>>> def trace(exc_type, exc_value, exc_tb):\n    sys.__excepthook__(exc_type, exc_value, exc_tb)\n\nTraceback (most recent call last):\n  File \"/home/richard/code/python-algebra/01_Algebra/01_1_01/main.py\", line 41, in <module>\n    trace(exc_type, exc_value, exc_tb)\nTypeError: trace() got multiple values for argument 'exc_tb'\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"20180905\") == \"YYMM\"\nassert solution(\"20180804\") == \"MMYY\"\nassert solution(\"20180604\") == \"AMBIGUOUS\"\nassert solution(\"20180703\") == \"NA\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(s) == 'YYMM'\nassert solution(s) == 'MMYY'\nassert solution(s) == 'AMBIGUOUS'\nassert solution(s) == 'NA'\nassert solution(s) == '2019'\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1205\") == \"MMYY\"\nassert solution(\"1305\") == \"AMBIGUOUS\"\nassert solution(\"2005\") == \"NA\"\n\"\"\"\n\n\nclass Solution:\n    def solution(self, str):\n        ans = 'NA'\n        for s in str:\n            # YYMM format\n            if s.isdigit():\n                m = int(s[-2:])\n                # MMYY format\n                if len(s) == 6:\n                    y = int(s[:2])\n                    # AMBIGUOUS format\n                    if len(s) == 8:\n                        m, y = int(s[2:5]), int(s[5:7])\n                # NA format\n                elif len(s) == 4:\n                    m = 1\n                    y = 1\n                ans = str(y) + str(m) + ans\n            else:\n                ans = str(int(s) + ans)\n        return ans\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"YYMM\"\nassert solution(\"01\") == \"AMBIGUOUS\"\nassert solution(\"1905\") == \"NA\"\nassert solution(\"12345\") == \"NA\"\nassert solution(\"1101\") == \"NA\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"YYMM\" or \"MMYY\" or \"AMBIGUOUS\" or \"NA\"\n\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"YYMM\") == \"YYMM\", \"No valid YYMM\"\nassert solution(\"MMYY\") == \"MMYY\", \"No valid MMYY\"\nassert solution(\"YYYY\") == \"AMBIGUOUS\", \"No valid AMBIGUOUS\"\nassert solution(\"123\") == \"NA\", \"No valid NA\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1905) == 'YYMM'\nassert solution(1905) == 'AAAM'\nassert solution(1905) == 'NA'\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('YYMM') == 'YYMM'\nassert solution('MMYY') == 'MMYY'\nassert solution('AMBIGUOUS') == 'AMBIGUOUS'\nassert solution('NA') == 'NA'\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2,1) == 2\nassert solution(2,3) == 3\nassert solution(5,2) == 3\nassert solution(5,3) == 4\nassert solution(5,4) == 6\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\n'''"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"1\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 2\nassert solution(\"5\") == 3\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()), \"incorrect input format\"\nassert solution(\"4\"), \"incorrect input format\"\nassert solution(\"0\"), \"incorrect input format\"\nassert solution(\"13\"), \"incorrect input format\"\nassert solution(\"23\"), \"incorrect input format\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(Input) == 'Two pairs can be chosen: (2,1) and (2,3'.\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n2\n\nTwo pairs can be chosen: (2,1) and (2,3).\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"1\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 2\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"9:00\") == \"21\"\nassert solution(\"21:00\") == \"21\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"9 12\") == \"21\"\nassert solution(\"9 1\") == \"1\"\nassert solution(\"9 2\") == \"21\"\nassert solution(\"9 2 1\") == \"2\"\nassert solution(\"9 5\") == \"21\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('9 12') == '21'\nassert solution('12 12') == '21'\nassert solution('21') == '21'\nassert solution('0 0 0') == '0'\nassert solution('0 1 2') == '0'\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"21\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"21\") == \"21\"\nassert solution(\"10\") == \"21\"\nassert solution(\"9:00\") == \"9\"\nassert solution(\"9:02\") == \"9\"\nassert solution(\"9:03\") == \"9\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"21 o'clock\") == \"21\"\nassert solution(\"22 o'clock\") == \"21\"\nassert solution(\"24 o'clock\") == \"21\"\nassert solution(\"01 o'clock\") == \"01\"\nassert solution(\"10 o'clock\") == \"10\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"21\"\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"9:00\") == \"21\"\nassert solution(\"10:00\") == \"01\"\nassert solution(\"11:59\") == \"01\"\nassert solution(\"21:00\") == \"21\"\nassert solution(\"8:00\") == \"00\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"21\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('9 12') == '21'\nassert solution('9 1') == '21'\nassert solution('9 5') == '21'\nassert solution('9 7') == '21'\nassert solution('9 6') == '21'\n"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3719\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '3719'\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 2919\") == \"3719\"\nassert solution(\"2 2919 5\") == \"3719\"\nassert solution(\"2 2919 5 1\") == \"3719\"\nassert solution(\"2 2919 5 4\") == \"3719\"\nassert solution(\"2 2919 5 10\") == \"3719\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(3719)\n"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 2919\") == 3719\nassert solution(\"2 2919\") == 2819\nassert solution(\"2 2919\") == 1619\nassert solution(\"2 2919\") == 1619\nassert solution(\"2 2919\") == 619\n"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '3719'\n\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '3719'\nprint('solution test passed')\n'''"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"3719\""
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3719\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3719\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '11'\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, 3) == 3\nassert solution(8, 2) == 2\nassert solution(50, 12) == 8\nassert solution(40, 8) == 12\nassert solution(60, 4) == 2\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin = str(\n        input()\n    )\n) == str(\n    input()\n)\n\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"3\", \"2\"]) == \"5\"\nassert solution([\"3\", \"7\"]) == \"8\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"9\"\nassert solution([\"2\", \"5\"]) == \"9\"\nassert solution([\"1\", \"3\", \"2\", \"4\"]) == \"6\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"11 2\") == 4\nassert solution(\n    \"1 5\") == 3\nassert solution(\n    \"1 5 7\") == 0\nassert solution(\n    \"1 5 2 7 8 9 10\") == 0\nassert solution(\n    \"1 5 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 189 190 191 192 193 194 195 196 197 198 199 200 201 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 219 220 220 221 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 4\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"11 2\") == \"4\"\nassert solution(\"1011\") == \"4\"\nassert solution(\"111\") == \"4\"\nassert solution(\"111X\") == \"5\"\nassert solution(\"100\") == \"1\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"4\"\nassert solution(inp) == \"11\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a\\n') == 'a'\nassert solution('a\\n\\n\\n\\n\\n') == 'a'\nassert solution('a\\n\\n\\n\\n') == 'a'\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"5\"\nassert solution(input) == \"5\"\nassert solution(input) == \"3\"\nassert solution(input) == \"3\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5') == '3'\nassert solution('5 3') == '7'\nassert solution('5 4') == '7'\nassert solution('5 5') == '21'\nassert solution('5 6') == '26'\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5\", \"4\", \"3\", \"2\", \"1\"]) == \"3\"\nassert solution([\"3\", \"2\", \"1\", \"4\", \"5\"]) == \"3\"\nassert solution([\"2\", \"4\", \"3\", \"1\", \"4\", \"5\"]) == \"2\"\nassert solution([\"4\", \"3\", \"1\", \"2\", \"1\", \"4\", \"5\"]) == \"2\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"3\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 2\"\n) == \"123456789\"\nassert solution(\n    \"5 5\"\n) == \"987654321\"\nassert solution(\n    \"3 3\"\n) == \"12345\"\nassert solution(\n    \"5 3\"\n) == \"98765\"\nassert solution(\n    \"5 4\"\n) == \"56789\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\\n\") == \"3\\n5\\n\"\nassert solution(\"2\\n2\\n\") == \"3\\n5\\n\"\nassert solution(\"2\\n1\\n\") == \"2\\n3\\n\"\nassert solution(\"1\\n1\\n\") == \"3\\n5\\n\"\nassert solution(\"1\\n1\\n1\") == \"3\\n5\\n\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"2 3\"\nassert solution(\"2 2\") == \"2 2\"\nassert solution(\"1 1\") == \"1 2\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 3\") == \"1 3\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"90\"\nassert solution(\"1\") == \"90\"\nassert solution(\"2\") == \"100\"\nassert solution(\"3\") == \"101\"\nassert solution(\"4\") == \"110\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(N,stdin) == '2'\nassert solution(N,stdin) == '4'\nassert solution(N,stdin) == '3'\nassert solution(N,stdin) == '1'\nassert solution(N,stdin) == '5'"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"3\"\n\n\"\"\"\nimport sys\nimport io\n"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"E869120's and square1001's 16-th birthday is coming soon\") == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5 4) == \"Yay!\"\nassert solution(6) == \"Yay!\"\nassert solution(10) == \"Yay!\"\nassert solution(11) == \"Yay!\"\nassert solution(12) == \"Yay!\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5 4) == \"Yay!\"\n\nSample Tests\nTest 1:\n\n>>> solution(\"5 4\")\n'Yay!'\n\nTest 2:\n\n>>> solution(\"Takahashi from AtCoder Kingdom gave them a round cake cut into 16 equal fan-shaped pieces. E869120 and square1001 were just about to eat A and B of those pieces, respectively, Takahashi and square1001 are not allowed to take two adjacent pieces of cake. Can both of them obey the instruction in the note and take desired numbers of pieces of cake?\"\n\n>>> solution(\"Takahashi from AtCoder Kingdom gave them a round cake cut into 16 equal fan-shaped pieces. E869120 and square1001 were just about to eat A and B of those pieces, respectively, Takahashi and square1001 are not allowed to take two adjacent pieces of cake.\")\n'Takahashi and square1001 are not allowed to take two adjacent pieces of cake'\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"A B\") == \"Yay!\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"Yay!\"\n\n-----Explanation-----\nThe instructions in the note are:\n\nE869120's and square1001's 16-th birthday is coming soon.\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"Yay!\"\nassert solution(input2) == \"Yay!\"\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin, stdout):\n        pass\n"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('A869120') == 'Yay!'\nassert solution('A869120') == 'Yay!'\nassert solution('A869120') == 'Yay!'\nassert solution('square1001') == 'Yay!'\n"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('E869120') == 'Yay!'\nassert solution('square1001') == 'Yay!'\n"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"E869120\",\"square1001\"]) == \"Yay!\",\"E869120 and square1001 cannot obey the instruction in the note and take desired numbers of pieces of cake.\"\n\nA, B = [int(i) for i in stdin.split()]\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"1234567876\n764\"\"\"\n) == 78\nassert solution(\n\"\"\"1234567876\n765\"\"\"\n) == 78\nassert solution(\n\"\"\"1234567876\n764\"\"\"\n) == 78\nassert solution(\n\"\"\"1234567\"\"\"\n) == 78\nassert solution(\n\"\"\"123456789\"\"\"\n) == 78\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 34\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(34)\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1234567876) == 34\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"1234567876\"\n) == 34, \"Test case failed\"\nassert solution(\"123456789\") == 0, \"Test case failed\"\nassert solution(\"1234567890123456789\") == 0, \"Test case failed\"\nassert solution
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1234567876\"]) == \"34\"\nassert solution([\"543210\", \"716\", \"6541\"]) == \"35\"\nassert solution([\"12\", \"22\", \"33\"]) == \"22\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1234567876\") == \"34\"\nassert solution(\"123456789\") == \"34\"\nassert solution(\"123456789\") == \"34\"\nassert solution(\"1123456789\") == \"34\"\nassert solution(\"1123456789\") == \"34\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(solution) == \"34\"\nassert solution(solution) == \"746\"\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1234567876) == 34, 'Wrong answer'\nassert solution(1234567873) == 743, 'Wrong answer'\nassert solution(123456777) == 787, 'Wrong answer'\nassert solution(1234567879) == 787, 'Wrong answer'\nassert solution(123456789) == 887, 'Wrong answer'\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == (34)\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 12 6\") == \"5 3\"\nassert solution(\"7 52 0 13 26 52\") == \"12 13\"\nassert solution(\"6 1000000000 4 6 8 4 2\") == \"2999999987\"\nassert solution(\"6 13 52\") == \"12 13\""
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"5 3\"\nassert solution(input()) == \"12 13\"\nassert solution(input()) == \"2999999987\"\nassert solution(input()) == \"12 13\"\nassert solution(input()) == \"2999999987\"\n\n-----Constraints-----\n1 <= n <= 10^{5}\n\n\n-----Submissions-----\n785/785\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(sum(map(int, stdin.split())))"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(2999999987)\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2999999987\"\nassert solution(stdin) == \"12 13\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"2\") == \"3\"\nassert solution(\"7\") == \"12\"\nassert solution(\"6\") == \"13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2999999987\"\nassert solution(stdin) == \"12 13\"\nassert solution(stdin) == \"21 17\"\nassert solution(stdin) == \"15 15\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 12, \"Fail\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n\nInput\n7\n6 2 3 3 4 3 5 3 6 5\n\nOutput\n4\nassert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3\""
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3'\n\"\"\"\nimport math"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '3'\n\n\n\"\"\"\n\nimport math\nimport sys\n\nfrom collections import defaultdict\nfrom functools import lru_cache\nfrom typing import Dict, List"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 4\nassert solution(stdin) == 4\nassert solution(stdin) == 4\nassert solution(stdin) == 4\n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1 2\"\nassert solution(input()) == \"1 1\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n1 <= n <= 200\n1 <= m <= n - 1\n\n\"\"\""
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"2\"\nassert solution(inp) == \"2\"\n\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\n\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"The function should return a string.\"\n\nassert solution(stdin), \"The function should return a string.\"\n\nassert solution(stdin), \"The function should return a string.\"\n\nassert solution(stdin), \"The function should return a string.\"\n\nassert solution(stdin), \"The function should return a string.\""
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"2 3\") == \"1\"\n\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 3\") == \"1\"\n\nassert solution(\"2 4\") == \"1\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(n, m) == 2\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 2') == 2\nassert solution('3 4') == 1\nassert solution('3 5') == 1\nassert solution('3 2 3 3 3') == 2\nassert solution('2 0') == 1\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, 2) == 1\nassert solution(2, 4) == 2\nassert solution(2, 3) == 1\nassert solution(3, 3) == 2\nassert solution(3, 0) == 3\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 11\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 11\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 16\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 11\n\n\n-----Discussion-----\n\nHere, we give you a binary tree and the restriction of a subset. The tree and restriction of the subset are stored in the input strings.\n\nEach input line is an edge in the tree. The first line is a binary tree node whose data is the label of a vertex. The second line of the input string is a string with all edges of the tree.\n\nThe third line of the input string is a string with the distance restriction of the subset.\n\nThe fourth line of the input string contains an integer $k$, the value of the restriction.\n\n\n-----Constraints-----\n\n1 <= n <= 10^4\n1 <= k <= 10^5\n0 <= a_i \\le n\n1 <= u_i, v_i \\le n\n1 <= u_i, v_i \\le n\na_i + v_i + 1 <= 10^5\n\n[input]\n\nThe first line of input contains an integer $n$ denoting the number of vertices in the tree.\n\nThe second line of input contains a string with all edges of the tree.\n\nThe third line contains a string with all possible edges, where $u_i, v_i \\le n$, $u_i \\ne v_i$ and $u_i \\ne v_i$ are integers.\n\nThe fourth line contains an integer $k$ denoting the restriction of the subset.\n\n\n[output]\n\nPrint one integer \u2014 the maximum total weight of the subset in which all pairs of vertices have distance more than $k$.\n\n\n[example]\n\nInput\n\n4\n1 2 3 4\n1 2\n2 3\n3 4\n\nOutput\n\n11\n\n'''\nimport sys\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 11\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 11, \"The output is not correct\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 11\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 11, 'failed'"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 6\") == \"1 1\"\nassert solution(\"2 3\") == \"1 9\"\nassert solution(\"2 5\") == \"2 1\"\nassert solution(\"2 5\") == \"2 5\"\nassert solution(\"2 6\") == \"2 13\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1 1'\nassert solution(stdin) == '1 9'\nassert solution(stdin) == '2 2'\nassert solution(stdin) == '2 13'\nassert solution(stdin) == '3 1'\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 9\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 13\"\nassert solution(stdin) == \"3 1\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1 2\"\n\nassert solution(input()) == \"1 9\"\n\nassert solution(input()) == \"2 1\"\n\nassert solution(input()) == \"2 9\"\n\nassert solution(input()) == \"3 1\""
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1 9'\nassert solution(stdin) == '1 4'\nassert solution(stdin) == '1 3'\nassert solution(stdin) == '2 13'\nassert solution(stdin) == '2 1'\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"1 9\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 6\"\n    ), \"3 6\"\nassert solution(\n    \"2 3\"\n    ), \"2 3\"\nassert solution(\n    \"5 10000000000\"\n    ), \"5 10000000000\"\nassert solution(\n    \"5 6 9999999999\"\n    ), \"5 6 9999999999\"\nassert solution(\n    \"2 1\"\n    ), \"2 1\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str([1,1,3,9])"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 1 1 1 1') == '1 1 1 1 1'\nassert solution
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10 5'), 'Incorrect result'\nassert solution('10 15 12'), 'Incorrect result'\nassert solution('5 10000000000'), 'Incorrect result'\nassert solution('5 100000000'), 'Incorrect result'\nassert solution('5 10000000'), 'Incorrect result'\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"11\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == [\"2 1 3\", \"1 100 100\", \"1 100 100\", \"1 100 100\"]"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1 100 100\"\nassert solution(input()) == \"1 100 100\"\nassert solution(input()) == \"2 3\"\nassert solution(input()) == \"1 1 1\"\nassert solution(input()) == \"1 2 1\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 1 3') == '2 1 3'\nassert solution('4 5 4') == '4 5 4'\nassert solution('4 1 3') == '4 1 3'\nassert solution('3 4 1') == '3 4 1'\nassert solution('1 1 3') == '1 1 3'\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '1 100 100'\nassert solution(input()) == '1 20 20'\nassert solution(input()) == '1 10 10'\nassert solution(input()) == '1 1000 1000'\nassert solution(input()) == '1 100 100'\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2 1 3'\nassert solution(stdin) == '1 100 100'\nassert solution(stdin) == '3'\nassert solution(stdin) == '201 101 101'"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0\\n100\\n101\\n101\\n100\\n101\\n101\\n\") == \"100\\n101\\n101\\n101\\n\"\nassert solution(\"1\\n1\\n3\\n1\\n3\\n1\\n3\\n\") == \"1\\n1\\n1\\n3\\n\"\nassert solution(\"0\\n0\\n0\\n0\\n\") == \"0\\n0\\n\"\nassert solution(\"0\\n0\\n0\\n1\\n\") == \"0\\n0\\n\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n\") == \"1\\n1\\n1\\n\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2 1 3\"\n\n\n-----Algorithm-----\n\nThe program can be solved in $O(n^3)$ time.\n\nThe implementation of an array is as follows:\n\nWrite an array that contains a, b, c.\nFor each element of array, select it's index, sum and product, the new array should be as follows:\n\na+b+c = (a+b+c)^3\n(a+b+c)^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+b+c^3\na+"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2 1 3\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 6\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 6\nassert solution(stdin) == 2\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 2, \"Failed to solve\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"13\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"7 6 3 2 4 5 6 7 5 6 5 6 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('RBGRRBRGG') == 2, \"expected 2, got {}\".format(2)\nassert solution('BBBGBRRR') == 2, \"expected 2, got {}\".format(2)\nassert solution('BBRRRRGGGGGRR') == 6, \"expected 6, got {}\".format(6)\nassert solution('BBBGRRRR') == 2, \"expected 2, got {}\".format(2)\nassert solution('RBRRRRGGGGGRR') == 4, \"expected 4, got {}\".format(4)\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5, \"failed\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '4'\nassert solution(stdin) == '6'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9\") == \"1 2 3 4\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6 7 8 3\"\nassert solution(\"9\") == \"1 2 3 4\"\nassert solution(\"\") == \"\"\nassert solution(\" \") == \"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(4)"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '6'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '1 2 3 7 8 9'\n\nassert solution(stdin) == '1 2 3 5 6'\n\nassert solution(stdin) == '1 2 3 5 6 7 8 9'"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6\") == \"6\"\nassert solution(\"4\") == \"1\"\nassert solution(\"9\") == \"2\"\nassert solution(\"11\") == \"1\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"6\") == \"6\"\nassert solution(\"9\") == \"9\"\nassert solution(\"10\") == \"10\"\nassert solution(\"11\") == \"11\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"6 5 4 6 8 2 3 7\") == \"7\"\nassert solution(\"6 5 4 6 8 2 3 7\") == \"6\"\nassert solution(\"1 4 2 3 7 8 9 10 11\") == \"1\"\nassert solution(\"9 7 8 3 4 5 9 10 11\") == \"1\"\nassert solution(\"4 6 8 7 3 9 2 5 1\") == \"3\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"7\",\n    \"3 3 4 7 5 6 8\"\n) == \"4\"\nassert solution(\n    \"6\",\n    \"1 3 5 2 4 6\"\n) == \"1\"\nassert solution(\n    \"9\",\n    \"6 7 8 3 4 5 9 10 11\"\n) == \"6\"\nassert solution(\n    \"9\",\n    \"6 7 8 3 4 5 9 10 11\"\n) == \"1\"\nassert solution(\n    \"9\",\n    \"3 5 6 8 7 9 10 11\"\n) == \"2\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"Yes\"\nassert solution(input) == \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 'Yes'\n\n\nclass Solution:\n    def isOdd(self, A: int, B: int) -> bool:\n        while B % 2 == 0:\n            B /= 2\n        return A * B == (A + B) * 2\n        \n\"\"\"\n    \n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(a) == \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\",\"2\",\"1\",\"3\",\"2\",\"4\",\"3\",\"2\",\"1\",\"4\",\"2\",\"1\",\"2\"]) == \"Yes\"\nassert solution([\"2\",\"3\",\"1\",\"1\",\"2\",\"4\",\"2\",\"4\",\"2\"]) == \"No\"\nassert solution([\"2\",\"3\",\"1\",\"1\",\"2\",\"2\",\"4\",\"2\",\"3\",\"4\",\"1\",\"1\"]) == \"No\"\nassert solution([\"1\",\"2\",\"3\",\"1\",\"1\",\"2\",\"3\",\"1\",\"2\",\"4\",\"1\",\"1\"]) == \"Yes\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"1\",\"4\",\"2\",\"3\",\"1\",\"1\",\"1\",\"3\"]) == \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1 2 3) == True\nassert solution(4 2) == False\nassert solution(1) == False\nassert solution(5) == True\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"No\"\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"Yes\"\nassert solution(\"2 2\") == \"No\"\nassert solution(\"3 3\") == \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\"2\", \"1\", \"2\", \"3\", \"2\", \"4\", \"1\", \"2\", \"3\"],\n    \"2\",\n    \"3\",\n)\nassert solution(\n    [\"3\", \"1\", \"2\", \"4\", \"2\", \"3\", \"3\", \"3\", \"4\"],\n    \"3\",\n    \"3\",\n)\nassert solution(\n    [\"3\", \"3\", \"2\", \"4\", \"2\", \"2\", \"4\", \"1\", \"2\"],\n    \"3\",\n    \"3\",\n)\nassert solution(\n    [\"3\", \"1\", \"2\", \"4\", \"2\", \"2\", \"4\", \"1\", \"2\"],\n    \"3\",\n    \"3\",\n)\nassert solution(\n    [\"3\", \"3\", \"2\", \"4\", \"2\", \"2\", \"4\", \"1\", \"2\"],\n    \"3\",\n    \"3\",\n)\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 1\") == \"10\"\nassert solution(\"20 4\") == \"30\"\nassert solution(\"30 5\") == \"40\"\nassert solution(\"200 1\") == \"80\"\nassert solution(\"50 1\") == \"50\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"80 100\") == \"110\"\nassert solution(\"120 50\") == \"111\"\nassert solution(\"180 10\") == \"111\"\nassert solution(\"200 0\") == \"111\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 2\nassert solution(4) == 3\nassert solution(5) == 2\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1 0 0 1 1\") == \"1\"\nassert solution(\"3 5 3\") == \"1\"\nassert solution(\"6 2\") == \"1\"\nassert solution(\"10 2\") == \"1\"\nassert solution(\"15 2\") == \"1\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"91 18 99 69 42 21 44 62 90 7 0 99 37 91 44 97 12\",\n    \"91 18 99 69 42 21 44 62 90 7 0 99 37 91 44 97 12\") == \"110\"\nassert solution(\n    \"91 18 99 69 42 21 44 62 90 7 0 99 37 91 44 97 12\",\n    \"91 18 99 69 42 21 44 62 90 7 0 99 37 91 44 97 12\") == \"110\"\nassert solution(\n    \"91 18 99 69 42 21 44 62 90 7 0 99 37 91 44 97 12\",\n    \"91 18 99 69 42 21 44 62 90 7 0 99 37 91 44 97 12\") == \"110\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '110'\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1000\", \"1100\"]) == \"110\"\nassert solution([\"1100\", \"1101\"]) == \"110\"\nassert solution([\"1100\", \"1110\"]) == \"110\"\nassert solution([\"1110\", \"1111\"]) == \"110\"\nassert solution([\"1100\", \"1101\"]) == \"110\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"110\"\n'''"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '110'\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"XY\" == \"110\") == \"110\"\nassert solution(\"XY\") == \"110\"\nassert solution(\"XY\") == \"110\"\nassert solution(\"XY\") == \"110\"\nassert solution(\"XY\") == \"110\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\"), \"5\"\nassert solution(\"16\"), \"16\"\nassert solution(\"10\"), \"10\"\nassert solution(\"8\"), \"8\"\nassert solution(\"4\"), \"4\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(int(input())) == 8\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 8"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(s) == '8'"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 8\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '8'\nassert solution(input()) == '8'\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"101\") == \"3\"\nassert solution(\"111\") == \"7\"\nassert solution(\"1011\") == \"7\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == '8'\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 8\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 8\n\npass\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\", \"Check your solution\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"7\") == \"NO\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"YES\"\n\nassert solution(\"6\") == \"NO\"\n\nassert solution(\"7\") == \"NO\"\n\nassert solution(\"8\") == \"NO\"\n\nassert solution(\"9\") == \"YES\"\n\n------Runtime Details----\nRuntime: 36 ms, faster than 96.89% of Python3 online submissions for Kids and adults who live in Shichi-Go-San and The Many Three-Year-Old. Runtime: 43 ms, faster than 22.12% of Python3 online submissions for Kids and adults who live in Shichi-Go-San and The Many Three-Year-Old.\nMemory Usage: 19.8 MB, less than 100.00% of Python3 online submissions for Kids and adults who live in Shichi-Go-San and The Many Three-Year-Old.\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"YES\"\n\n-----My Solution-----\n'''"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5') == 'YES'\nassert solution('6') == 'NO'\nassert solution('9') == 'YES'"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Explanation-----\nThe growth of a five-year-old child will be celebrated.\n\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"YES\"\nassert solution(inp) == \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10\\n7\\n10\\n1\\n5\") == \"NO\"\nassert solution(\"10\\n7\\n10\\n1\\n5\\n6\\n7\\n1\\n8\\n1\\n10\") == \"YES\"\nassert solution(\"1\\n10\\n3\\n1\\n5\\n7\\n6\\n9\\n8\\n10\") == \"YES\"\nassert solution(\"1\\n5\\n10\\n1\\n2\\n3\\n1\\n10\\n4\\n3\\n5\\n7\\n6\\n9\\n8\\n12\\n1\\n10\") == \"YES\"\nassert solution(\"1\\n5\\n10\\n1\\n2\\n3\\n1\\n10\\n4\\n3\\n5\\n7\\n6\\n9\\n8\\n12\\n1\\n10\") == \"YES\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"10\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 'YES' or solution(input) == 'NO'\n\n'''\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"ABC\"\n\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"ABC\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"ABC\", \"stdin is not correct\""
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('123') == 'ABC'\nassert solution('99999') == 'ABCD'\nassert solution('7') == 'ABC'\nassert solution('1') == 'AB'\nassert solution('0') == 'A'\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(solution) == \"ABC\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'ABC'\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"ABC\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"ABC\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 'ABC'\n\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'ABC'\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1') == 'Yay!'\nassert solution('2') == 'Yay!'\nassert solution('3') == 'Yay!'\nassert solution('4') == 'Yay!'\nassert solution('5') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Yay!\"\nassert solution(\"2\") == \"Yay!\"\nassert solution(\"4\") == \"Yay!\"\nassert solution(\"8\") == \"Yay!\"\nassert solution(\"9\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Yay!\"\nassert solution(\"2\") == \"Yay!\"\nassert solution(\"4\") == \"Yay!\"\nassert solution(\"8\") == \"Yay!\"\nassert solution(\"9\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"Yay!\""
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"2 1 4 3 8 9 15\"\n), \"2 1 4 3 8 9 15\"\n\nassert solution(\n    \"3 2 4 4 4\"\n), \"2 3 4 4\"\n\nassert solution(\n    \"4 6\"\n), \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"1\"\n) == \"Yes\"\nassert solution(\n    \"2\"\n) == \"No\"\nassert solution(\n    \"3\"\n) == \"Yes\"\nassert solution(\n    \"4\"\n) == \"No\"\nassert solution(\n    \"5\"\n) == \"Yes\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"2 4 8 9 15\") == \"Yay!\"\nassert solution(\"2 4 8 9 15\") == \"No\""
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"Yay!\""
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"pink\", \"pink\", \"pink\", \"pink\", \"pink\"]) == \"pink\"\nassert solution([\"pink\", \"pink\", \"pink\", \"pink\", \"pink\"]) == \"red\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3200) == 'pink'\nassert solution(3600) =='red'\nassert solution(600) =='red'\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"pink\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3200\"\n) == \"pink\", \"Correct Answer\""
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(123) == '123'\nassert solution(0) == '0'\nassert solution(999) == '999'\nassert solution(7200) == '7200'\nassert solution(7777) == '7777'\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3200) == \"pink\"\nassert solution(5200) == \"red\""
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution( \"pink\") == \"pink\"\nassert solution(\"pink\") == \"red\""
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"pink\"\nassert solution(\"pink\") == \"red\"\nassert solution(\"s\") == \"red\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3200) == \"pink\"\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3200) == 'pink'\nassert solution(3201) =='red'\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 'ABC'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"ABC\") == \"ARC\", \"Expected 'ABC'\"\nassert solution(\"ARC\") == \"ABC\", \"Expected 'ABC'\"\nassert solution(\"AGC\") == \"ARC\", \"Expected 'ABC'\"\nassert solution(\"AGC\") == \"ABC\", \"Expected 'ABC'\"\nassert solution(\"AGC\") == \"ABC\", \"Expected 'ABC'\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"ABC\"\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 'ABC'\nassert solution(input) == 'ARC'\nassert solution(input) == 'AGC'\nassert solution(input) == 'ARC'\nassert solution(input) == 'AGC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1100000\") == \"ABC\"\nassert solution(\"1000001\") == \"ARC\"\nassert solution(\"1000111\") == \"AGC\"\nassert solution(\"10111001\") == \"ABC\"\nassert solution
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"123\") == \"ABC\"\nassert solution(\"555\") == \"ARC\"\nassert solution(\"321\") == \"AGC\"\nassert solution(\"1234\") == \"ARC\"\nassert solution(\"1256\") == \"AGC\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\"), \"5\"\nassert solution(\"9\"), \"9\"\nassert solution(\"1\"), \"1\"\nassert solution(\"11\"), \"11\"\nassert solution(\"12\"), \"12\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('A' * 100) == 'A'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\"), \"Incorrect Format of input\"\nassert solution(\"13\"), \"1st Bad solution\"\nassert solution(\"\"), \"2nd Bad solution\"\nassert solution(\"15\"), \"3rd Bad solution\"\nassert solution(\"20\"), \"4th Bad solution\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0) == \"ABC\"\nassert solution(1) == \"ARC\"\nassert solution(2) == \"AGC\"\nassert solution(3) == \"ARC\"\nassert solution(4) == \"ABC\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(str) == 991\n'''\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(123) == \"9001\"\nassert solution(100) == \"9999\"\nassert solution(1000) == \"9001\"\nassert solution(9999) == \"1\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(123) == 991\nassert solution(111) == 9\nassert solution(999) == 1\nassert solution(1111) == 9\nassert solution(99999) == 9"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(int(input())) == \"91\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(str(n)) == \"9991\"\n'''\n\nfrom math import ceil"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(12) == '919'\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 5) == 9, \"Test failed\"\nassert solution(1, 9) == 1, \"Test failed\"\nassert solution(2, 9) == 9, \"Test failed\"\nassert solution(3, 9) == 1, \"Test failed\"\nassert solution(4, 9) == 9, \"Test failed\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"9991\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '9011'\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"aaaaa\"), \"cannot solve\"\nassert solution(\"bbbb\"), \"a\"\nassert solution(\"aaaaaabab\"), \"b\"\nassert solution(\"babbbababb\"), \"b\"\nassert solution(\"baab\"), \"a\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 'bac', \"Bubble Sort should be executed\"\nassert solution(2) == 'abac', \"Insertion Sort should be executed\"\nassert solution(3) == 'ac', \"Merge Sort should be executed\"\nassert solution(4) == 'bcdaf', \"Breadth-First Search should be executed\"\nassert solution(5) == 'zzzzzzzzzz', \"Breadth-First Search should be executed\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"abbaac\"\n) == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\n\n\"\"\"\nclass Solution:\n    def generateParenthesis(self, n):\n        if n == 0:\n            return ''\n\n        s = ''\n        for i in range(2,n+1):\n            s += \"(\")\n            for j in range(i):\n                s += \"(\"\n            for j in range(i-1):\n                s += \")\"\n            s += \")\"\n            print(s)\n            for j in range(i-1):\n                s += \"(\"\n            s += \")\"\n            print(s)\n            \n            \n        \n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'abac'\nassert solution(stdin) == 'ac'\nassert solution(stdin) == 'bcdaf'"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"abac\"\nassert solution(stdin) == \"ac\"\nassert solution(stdin) == \"bcdaf\""
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"aabb\") == \"ac\"\nassert solution(\"aabac\") == \"ac\"\nassert solution(\"abac\") == \"ac\"\nassert solution(\"abac\") == \"abac\"\nassert solution(\"abcde\") == \"abcde\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"abac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bccddaaf\"\n\n-----My Solution-----\n\nInput:\n4\nabbaac\nac\nbccddaaf\nzzzzzzzzzz\n\nOutput:\nabac\nac\nbcdaf\nzzzzzz\n\nn = int(input())\np = [int(i) for i in input().split()]\na = [list(map(int, input().split())) for _ in range(n)]\nfor i in range(n):\n    if a[i][0] % p[i]!= 0:\n        a[i][0] -= p[i]\n    if a[i][1] % p[i]!= 0:\n        a[i][1] -= p[i]\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"aabb\") == \"abc\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"abab\") == \"abab\"\nassert solution(\"abcabcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabc\") == \"abc\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 'abac', 'Your code failed'\nassert solution(input()) == 'ac', 'Your code failed'\nassert solution(input()) == 'bcdaf', 'Your code failed'\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"aabb\") == \"ab\"\nassert solution(\"aac\") == \"ac\"\nassert solution(\"aaca\") == \"ac\"\nassert solution(\"baa\") == \"ba\"\nassert solution(\"ababababababababab\") == \"ab\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n        \n        "
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 2\nassert solution(5) == 5\nassert solution(10) == 10\nassert solution(100) == 1\nassert solution(13) == 1\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(10, 10) == 10\nassert solution(1, 10) == 0\nassert solution(2, 10) == 2\nassert solution(3, 10) == 5\nassert solution(4, 10) == 4\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0 1\") == 0, '1'\nassert solution(\"0 2\") == 2, '2'\nassert solution(\"0 3\") == 3, '3'\nassert solution(\"0 4\") == 4, '4'\nassert solution(\"0 5\") == 5, '5'\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['1', '1', '1', '2']) == 0\nassert solution(['1', '2', '3', '4']) == 1\nassert solution(['5', '6', '7', '8', '9']) == 2\nassert solution(['2', '3', '4', '5', '6', '7', '8', '9', '10']) == 0\nassert solution(['1', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']) == 1\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2, \"Your program should print minimum number of moves required to make $a$ divisible by $b\"\n\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 4\nassert solution(stdin) == 3\nassert solution(stdin) == 1\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 10, 4, 9) == 2\nassert solution(9, 9, 10, 10) == 2\nassert solution(1, 10, 10, 10) == 2\nassert solution(3, 10, 4, 4) == 1\nassert solution(3, 10, 4, 3) == 1\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2.666666666666667\"\n    pass\n\"\"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2.666666666666667'\n\nInput\n2 3\n4 5 1 2\n\nOutput\n3.141592653589793\n"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2.666666666666667'\n\n-----Example-----\nInput\n3 3\n2 3 1 1\n\nOutput\n6\n"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2.666666666666667\"\n\n-----Constraints-----\n1 <= n <= 5000\n1 <= k <= n\na_i >= 0\n\n----Examples----\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin=input()\n    ) == '2.666666666666667'\n"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '2.666666666666667'\nassert solution(input()) == '2.000000000000004'\nassert solution(input()) == '2.833333333333333'\nassert solution(input()) == '3.3333333333333333'\nassert solution(input()) == '3.000000000000004'\n"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2.666666666666667'\n\nassert solution(stdin) == '2.666666666666667'\n"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2.6666666666666666\"\nassert solution(stdin) == \"2.666666666666667\"\nassert solution(stdin) == \"2.666666666666667\"\nassert solution(stdin) == \"2.666666666666667\"\nassert solution(stdin) == \"2.666666666666667\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2.666666666666667'\n'''"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2.666666666666667'\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'YES'\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES'\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == \"YES\"\nassert solution(2) == \"NO\""
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 2 3 2 1\") == \"YES\"\nassert solution(\"5 2 1 4 3\") == \"NO\""
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"z\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"baabbb\") == \"baabbb\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'z'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abcdef\") == \"def\"\nassert solution(\"bab\") == \"baa\"\nassert solution(\"baab\") == \"baab\"\nassert solution(\"sabab\") == \"sab\"\nassert solution(\"baab\") == \"bab\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"baabbb\", \"solution(stdin)\"\nassert solution(stdin) == \"bab\", \"solution(stdin)\"\nassert solution(stdin) == \"baa\", \"solution(stdin)\"\nassert solution(stdin) == \"baaa\", \"solution(stdin)\""
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"bbacad\") == \"baabbb\"\n\n\n-----Hints-----\n1. https://stackoverflow.com/questions/4794363/python-with-input-and-output-using-input-and-output\n2. https://stackoverflow.com/questions/4301225/how-do-i-write-code-using-print-and-input-in-python\n3. https://www.youtube.com/watch?v=U3QnZHj0eQ\n4. https://www.geeksforgeeks.org/python-print-and-input/\n5. https://www.py4e.com/code3/tutorial.html\n"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('bab') == 'baabbb'\nassert solution('baabbb') == 'baabbb'\nassert solution('baabbbaa') == 'baabbbaa'\nassert solution('babaabba') == 'baabaabba'\nassert solution('aabbbaaaa') == 'aabbbaaaa'\n"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"z\"\nassert solution(stdin) == \"oopppssss\"\nassert solution(stdin) == \"baabbb\"\nassert solution(stdin) == \"baabbb\""
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n[\n    \"baabbb\",\n    \"bab\",\n    \"baabbb\"\n]) == \"bab\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"z\") == \"z\"\nassert solution(\"mo\") == \"mo\"\nassert solution(\"zo\") == \"z\"\nassert solution(\"bz\") == \"bz\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 1\") == \"1\"\nassert solution(\"2 3 3\") == \"2\"\nassert solution(\"2 4 1\") == \"2\"\nassert solution(\"1 2 2\") == \"2\"\nassert solution(\"1 3 3\") == \"2\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n\npass\n-----END OF PROGRAM-----\n'''"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 4 6 5 0 1 2 3 3 4 0 2 3') == '2'\nassert solution('3 3 3') == '1'\nassert solution('3 3 3') == '0'\nassert solution('3 3 3') == '2'\nassert solution('1 0 1') == '0'\n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\""
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 0\") == \"0\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"2 4\") == \"0\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"4 6\") == \"0\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 1\") == \"1\"\nassert solution(\"2 3 3\") == \"1\"\nassert solution(\"2 4 5\") == \"2\"\nassert solution(\"1 4 2\") == \"2\"\nassert solution(\"1 5 3\") == \"2\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"8 10\",\n    \"1 2 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"GRBGRBB\"\nassert solution(stdin) == \"R\"\nassert solution(stdin) == \"GRB\"\nassert solution(stdin) == \"B\"\nassert solution(stdin) == \"RGBG\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"RGBRGBRG\"), \"solution() failed to print RGBRGBRG\"\nassert solution(\"GB\"), \"solution() failed to print GB\"\nassert solution(\"R\"), \"solution() failed to print R\"\nassert solution(\"GRBGRBG\"), \"solution() failed to print GRBGRBG\"\nassert solution(\"BRGBRGB\"), \"solution() failed to print BRGBRGB\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"5\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '7'\nassert solution(stdin) == 'GRB'\nassert solution(stdin) == 'RGBGRBB'\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"R\"\nassert solution(stdin) == \"G\"\nassert solution(stdin) == \"B\"\nassert solution(stdin) == \"R\"\nassert solution(stdin) == \"G\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"BRB\",\"GRB\",\"GRB\",\"BRB\",\"RGB\",\"GRB\",\"GRB\",\"BRB\",\"GRB\",\"GRB\",\"GRB\"]) == \"GRB\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'GRBGRBG'\nassert solution(stdin) == 'GRB'\nassert solution(stdin) == 'RGBG'\nassert solution(stdin) == 'RGBG'\nassert solution(stdin) == 'BRBG'\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"48000\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 48000.0, \"incorrect\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n0.10000000 BTC\\n10000"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '48000'\nassert solution(input()) == '48000.1'\nassert solution(input()) == '48000.5'\nassert solution(input()) == '48000.9'\nassert solution(input()) == '48000.99'\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"48000.0\"\n\n\"\"\"\n\nimport math\n\nclass Solution:\n    def solution(self, n, x, u):\n        import math\n        max_x = math.ceil(math.log(x) * math.log(1/380000.0))\n        if n == 0:\n            return max_x\n        # pass\n        x = max(x, u)\n\n        result = 0\n        # 1.2.2.1.1:\n        result += math.ceil(math.log(x) * math.log(x/380000.0))\n        # 1.2.2.1.2:\n        result += (math.ceil(math.log(x) * math.log(x/380000.0)) - 1) * 2\n        # 1.2.2.1.3:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(1/380000.0))\n        # 1.2.2.1.4:\n        result += (math.ceil(math.log(x) * math.log(x/380000.0) / math.log(1/380000.0)) - 1) * 2\n        # 1.2.2.1.5:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.1.6:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(1/380000.0))\n        # 1.2.2.1.7:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.1.8:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.1.9:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.1.10:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.2:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.2:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.3:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.4:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.5:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.6:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.7:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.8:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.9:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.10:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.11:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.12:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.13:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.14:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.15:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.16:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.17:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2.18:\n        result += math.ceil(math.log(x) * math.log(x/380000.0) / math.log(x/380000.0))\n        # 1.2.2"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"48000.0\"\n\nassert solution(stdin) == \"38000.0\"\n\nassert solution(stdin) == \"22000.0\"\n\nassert solution(stdin) == \"2.0\"\n\nassert solution(stdin) == \"1.0\""
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 48000.0\n\"\"\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin=stdin,\n    n=len(stdin)\n) == \"\"\n\"\"\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"48000.0\"\nprint(solution(input()))\n--- SOLUTION ---\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"48000.0\"\nassert solution(input()) == \"48000\"\nassert solution(input()) == \"48000.1\"\nassert solution(input()) == \"48000.01\"\nassert solution(input()) == \"48000.000\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"the second car from the front of a 4-car train is the third car from the back\"\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(a) == \"3\"\nassert solution(a) == \"3\"\nassert solution(a) == \"3\"\nassert solution(a) == \"3\"\nassert solution(a) == \"3\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n'''"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(solution(line)) == \"3\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"2\", \"3\", \"2\", \"5\"]) == \"3\"\nassert solution([\"5\"]) == \"3\"\nassert solution([\"5\", \"5\"]) == \"3\"\nassert solution([\"5\", \"6\"]) == \"3\"\nassert solution([\"5\", \"2\"]) == \"2\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n        \"5\",\n        \"4\",\n        \"2\",\n        \"4\",\n        \"2\",\n    ]\n) == \"3\"\nassert solution(\n    [\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n    ]\n) == \"5\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\""
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"The 3rd car from the front of a 4-car train is the third car from the back.\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\")((((\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"3\"\nprint(input())\nassert solution(input()) == \"3\"\nprint(input())\nassert solution(input()) == \"3\"\nprint(input())\nassert solution(input()) == \"3\"\nprint(input())\nassert solution(input()) == \"3\"\nprint(input())\n"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"ip\",\"cc\",\"l\",\"t\"]) == \"icpc\"\nassert solution([\"ip\",\"cc\",\"l\",\"t\"]) == \"ipccltt\"\nassert solution([\"ip\",\"cc\",\"l\",\"t\"]) == \"ipccltt\"\nassert solution([\"ip\",\"cc\",\"l\",\"t\"]) == \"ipccltt\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"ipcc\"\nprint(\"Example 1:\")\nprint(\"Input : \" + str(input))\nprint(\"Exception : \" + str(['ip', 'cc', 'pcc']))\nprint(\"Output : \" + str(solution(stdin)))\n\nprint(\"Example 2:\")\nprint(\"Input : \" + str(input))\nprint(\"Exception : \" + str(['ccc', 'pccc', 'ip', 'ipcc']))\nprint(\"Output : \" + str(solution(stdin)))\n\nprint(\"Example 3:\")\nprint(\"Input : \" + str(input))\nprint(\"Exception : \" + str(['cc', 'ccc', 'pcc', 'ccc', 'ipcc', 'ip', 'ipcc', 'pccc', 'cc']))\nprint(\"Output : \" + str(solution(stdin)))\n"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2, 'p') == 'pc'\nassert solution(1, 'p') == 'p'\n"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\nip cc\n\"\"\") == \"icpc\"\nassert solution(\n\"\"\"\nip ad\n\"\"\") == \"ad\"\nassert solution(\n\"\"\"\nip ad\n\"\"\"\n) == \"ad\"\nassert solution(\n\"\"\"\nip ad\naaaa\n\"\"\") == \"aaaa\"\nassert solution(\n\"\"\"\nip ad\naaaa\naaaa\n\"\"\"\n) == \"aaaa\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"ip cc\") == \"icpc\"\nassert solution(\n    \"ip\") == \"ip\"\nassert solution(\n    \"abc\") == \"bca\"\nassert solution(\n    \"abcdefg\") == \"bcafgdef\"\nassert solution(\n    \"abcedfg\") == \"abcedfg\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n'ipccc',\n'icpc'\n) == 'icpc'\n'''\n"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"pc\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\u201cip\u201d) == \u201cicpc\u201d\n"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"ip\",\"cc\"]) == \"icpc\"\nassert solution([\"ip\",\"cc\",\"p\",\"s\"]) == \"ips\"\nassert solution([\"cc\",\"ip\",\"cc\"]) == \"ip\"\nassert solution([\"cc\",\"ip\",\"p\",\"s\"]) == \"ip\"\nassert solution([\"ip\",\"cc\",\"p\",\"p\",\"s\"]) == \"icpc\""
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"ip cc\") == \"icpc\""
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('BABA') == 'No'\n'''"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"ABA\") == \"Yes\", \"ABA does not work\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"ABCDA\") == \"Yes\"\nassert solution(\"ABA\") == \"No\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"AB\"), \"No\"\nassert solution(\"ABC\"), \"Yes\"\nassert solution(\"ABBA\"), \"No\"\nassert solution(\"ABBAA\"), \"Yes\"\nassert solution(\"ABBAAA\"), \"No\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBA\") == \"No\"\n\nInput:\nABA\n\nOutput:\nNo\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"AAA\") == \"No\"\nassert solution(\"AAAB\") == \"Yes\"\nassert solution(\"AAAB\") == \"No\"\nassert solution(\"ABA\") == \"No\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABCB\") == \"No\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(S) == '2'\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"RRS\"), \"Expected to find 2, got 1\"\nassert solution(\"RLRRDDD\"), \"Expected to find 2, got 1\"\nassert solution(\"RLL\"), \"Expected to find 2, got 1\"\nassert solution(\"LLLL\"), \"Expected to find 3, got 3\"\nassert solution(\"LLL\"), \"Expected to find 2, got 1\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('RRS') == '2'\nassert solution('RRRR') == '2'\n"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(s) == \"2\""
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 2\n"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('') == 2\nassert solution('R') == 2"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(S) == \"2\"\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    'RRS',\n    ['R', 'R', 'R', 'R', 'R', 'R']) == 2, 'The maximum rainy days is 2.'\nassert solution(\n    'RRS',\n    ['R', 'R', 'R', 'R', 'R', 'R']) == 2, 'The maximum rainy days is 2.'\nassert solution(\n    'RRS',\n    ['R', 'R', 'R', 'R', 'R', 'R']) == 2, 'The maximum rainy days is 2.'\nassert solution(\n    'RRS',\n    ['R', 'R', 'R', 'R', 'R', 'R']) == 2, 'The maximum rainy days is 2.'\nassert solution(\n    'RRS',\n    ['R', 'R', 'R', 'R', 'R', 'R']) == 2, 'The maximum rainy days is 2.'\n"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"RRS\",\"RRS\",\"RRS\"]) == \"2\"\nassert solution([\"RRS\",\"RRS\",\"RY\"]) == \"2\"\nassert solution([\"RY\",\"RY\",\"RY\"]) == \"2\"\nassert solution([\"RY\",\"R\",\"R\"]) == \"0\"\nassert solution([\"RY\",\"RY\",\"RY\"]) == \"1\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"RRS\") == 2\nassert solution(\"RNR\") == 3\nassert solution(\"RUR\") == 3\nassert solution(\"RUR\") == 2\nassert solution(\"RNC\") == 2\n"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '3 2 1'\n'''\n\nimport math"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"3 1 2 4 5 6 7 8 9\"\nassert solution(\"1 2 3 4 5 6 7 8 9 12\") == \"3 1 2 4 5 6 7 8 9 12\"\nassert solution(\"1 2 3 4 5 6 7 8 9 12 13\") == \"3 1 2 4 5 6 7 8 9 12 13\"\nassert solution(\"1 2 3 4 5 6 7 8 9 12 13 14\") == \"3 1 2 4 5 6 7 8 9 12 13 14\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3 1 2\"\nassert solution(stdin) == \"3 1 2 4 5\"\nassert solution(stdin) == \"4 2 1\"\nassert solution(stdin) == \"4 1 1\"\nassert solution(stdin) == \"4 1 2\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3 3\"), \"The boxes contain an integer\"\nassert solution(\"1 1 1\"), \"The boxes contain an integer\"\nassert solution(\"4 4 4\"), \"The boxes contain an integer\"\nassert solution(\"4 4 4 5\"), \"The boxes contain an integer\"\nassert solution(\"4 4 4 2\"), \"The boxes contain an integer\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4 2 3\"\n'''"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"3 1 2\"\nassert solution(inp) == \"3 2 1\"\nassert solution(inp) == \"3 1 4\"\nassert solution(inp) == \"3 2 2\"\nassert solution(inp) == \"3 1 3\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"3 1 2\"\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solution(self, stdin):\n        input = stdin.split(' ')\n\n        X, Y, Z = map(int, input)\n        A = list(range(1, Y+1))\n        B = list(range(Y+1, Y+1+Z))\n        C = list(range(X+1, X+1+Z))\n\n        if X < A[0] or Y < B[0] or Z < C[0]:\n            return 'Invalid'\n\n        for i in range(1, len(A)):\n            A[i] = A[i] - 1\n            B[i] = B[i] - 1\n            C[i] = C[i] - 1\n            A[A[i]] = A[i]\n            B[B[i]] = B[i]\n            C[C[i]] = C[i]\n\n        return str(A[0]) +'' + str(B[0]) +'' + str(C[0])\n"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '3 1 2'\nassert solution('4 2 3') == '1 3 4'\nassert solution('1 5 6') == '6 5 1'\nassert solution('1 2 3 4 5 6') == '7 5 6 4'\nassert solution('1 5 6 7 8 9 10 11 12') == '12 7 8 9 10 11'\n"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 1 3\") == \"3 1 2\"\nassert solution(\"3 2 2\") == \"3 1 2\"\nassert solution(\"3 3 1\") == \"3 1 2\"\nassert solution(\"5 2 3\") == \"3 2 1\"\nassert solution(\"5 4 2\") == \"3 2 1\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"3 1 2\"\nassert solution(input) == \"3 1 2\"\nassert solution(input) == \"3 1 2\"\nassert solution(input) == \"3 1 2\"\nassert solution(input) == \"3 1 2\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2,1) == '100'\nassert solution(4,4) == '200'\nassert solution(9,8) == '900'"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"30 100\") == \"100\"\nassert solution(\"30 15\") == \"15\"\nassert solution(\"30 2\") == \"2\"\nassert solution(\"15 3\") == \"3\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"100\""
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"30 100\"\n) == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\".##.###.##\") == 0\nassert solution(\".##..##..##\") == 50\nassert solution(\".#.#...#.#.#\") == 300\nassert solution(\".#...#....#..\") == 500\nassert solution(\".#.##.#....#.\") == 900\n"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"100\""
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"100\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 20 30\") == \"100\"\nassert solution(\"100 100\") == \"100\"\nassert solution(\"100 200\") == \"100\"\nassert solution(\"1000 1000\") == \"100\"\nassert solution(\"900 900\") == \"100\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '100'\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1-1') == 1\n\nassert solution('1+1') == 2\n"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"10+10-10\") == 2\nassert solution(\"10+10-10\") == 1\n"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 2\n"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"+-++\") == \"2\"\nassert solution(\"++\") == \"2\"\nassert solution(\"--++\") == \"1\"\nassert solution(\"++--\") == \"1\"\nassert solution(\"+++\") == \"3\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('+-++') == '2'\nassert solution('-++') == '0'\nassert solution('++') == '1'\nassert solution('-++') == '1'\nassert solution('-+') == '1'\n"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '2'\n\"\"\"\n\n\nclass Solution:\n    def eaten_symbols(self, S: str) -> int:\n        m = len(S)\n        val = 0\n        for i in range(m):\n            if S[i] == \"+\":\n                val += 1\n            elif S[i] == \"-\":\n                val -= 1\n        return val"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1+1\") == \"2\"\nassert solution(\"+-++\") == \"0\"\nassert solution(\"3-++1\") == \"1\"\nassert solution(\"+1++\") == \"0\"\nassert solution(\"1+1+1\") == \"2\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1+1\") == 3\nassert solution(\"1+1-1\") == 3\nassert solution(\"1+1-1+1\") == 3\nassert solution(\"1+-1-1\") == 2\nassert solution(\"1+-1-1+1\") == 2\n"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"-+++-+\") == \"2\"\nassert solution(\"+++\") == \"1\"\nassert solution(\"-++\") == \"1\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n'''\n+\n-++\n+-++\n+-++\n'''\n) == 2\n\nassert solution(\n'''\n+\n-++\n-++\n+-++\n''') == 1\n\nassert solution(\n'''\n-\n+\n-++\n+-++\n''') == 0\n\nassert solution(\n'''\n+\n-++\n-++\n-++\n''') == 2\n\nassert solution(\n'''\n-\n-\n-\n''') == 0"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4) == \"Heisei\"\nassert solution(4.34) == \"TBD\"\nassert solution(4.04) == \"Heisei\"\nassert solution(4.4.54) == \"TBD\"\nassert solution(\"2019/04/30\") == \"TBD\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['April 30, 2019', 'April 31, 2019', 'April 32, 2019', 'April 33, 2019', 'April 34, 2019', 'April 35, 2019', 'April 36, 2019', 'April 37, 2019', 'April 38, 2019', 'April 39, 2019', 'April 40, 2019', 'April 41, 2019', 'April 42, 2019', 'April 43, 2019', 'April 44, 2019', 'April 45, 2019', 'April 46, 2019', 'April 47, 2019', 'April 48, 2019', 'April 49, 2019', 'April 50, 2019', 'April 51, 2019', 'April 52, 2019', 'April 53, 2019', 'April 54, 2019', 'April 55, 2019', 'April 56, 2019', 'April 57, 2019', 'April 58, 2019', 'April 59, 2019', 'April 60, 2019', 'April 61, 2019', 'April 62, 2019', 'April 63, 2019', 'April 64, 2019', 'April 65, 2019', 'April 66, 2019', 'April 67, 2019', 'April 68, 2019', 'April 69, 2019', 'April 70, 2019', 'April 71, 2019', 'April 72, 2019', 'April 73, 2019', 'April 74, 2019', 'April 75, 2019', 'April 76, 2019', 'April 77, 2019', 'April 78, 2019', 'April 79, 2019', 'April 80, 2019', 'April 81, 2019', 'April 82, 2019', 'April 83, 2019', 'April 84, 2019', 'April 85, 2019', 'April 86, 2019', 'April 87, 2019', 'April 88, 2019', 'April 89, 2019', 'April 90, 2019', 'April 91, 2019', 'April 92, 2019', 'April 93, 2019', 'April 94, 2019', 'April 95, 2019', 'April 96, 2019', 'April 97, 2019', 'April 98, 2019', 'April 99, 2019', 'April 100, 2019', 'April 101, 2019', 'April 102, 2019', 'April 103, 2019', 'April 104, 2019', 'April 105, 2019', 'April 106, 2019', 'April 107, 2019', 'April 108, 2019', 'April 109, 2019', 'April 110, 2019', 'April 111, 2019', 'April 112, 2019', 'April 113, 2019', 'April 114, 2019', 'April 115, 2019', 'April 116, 2019', 'April 117, 2019', 'April 118, 2019', 'April 119, 2019', 'April 120, 2019', 'April 121, 2019', 'April 122, 2019', 'April 123, 2019', 'April 124, 2019', 'April 125, 2019', 'April 126, 2019', 'April 127, 2019', 'April 128, 2019', 'April 129, 2019', 'April 130, 2019', 'April 131, 2019', 'April 132, 2019', 'April 133, 2019', 'April 134, 2019', 'April 135, 2019', 'April 136, 2019', 'April 137, 2019', 'April 138, 2019', 'April 139, 2019', 'April 140, 2019', 'April 141, 2019', 'April 142, 2019', 'April 143, 2019', 'April 144, 2019', 'April 145, 2019', 'April 146, 2019', 'April 147, 2019', 'April 148, 2019', 'April 149, 2019', 'April 150, 2019', 'April 151, 2019', 'April 152, 2019', 'April 153, 2019', 'April 154, 2019', 'April 155, 2019', 'April 156, 2019', 'April 157, 2019', 'April 158, 2019', 'April 159, 2019', 'April 160, 2019', 'April 161, 2019', 'April 162, 2019', 'April 163, 2019', 'April 164, 2019', 'April 165, 2019', 'April 166, 2019', 'April 167, 2019', 'April 168, 2019', 'April 169, 2019', 'April 170, 2019', 'April 171, 2019', 'April 172, 2019', 'April 173, 2019', 'April 174, 2019', 'April 175, 2019', 'April 176, 2019', 'April 177, 2019', 'April 178, 2019', 'April 179, 2019', 'April 180, 2019', 'April 181, 2019', 'April 182, 2019', 'April 183, 2019', 'April 184, 2019', 'April 185, 2019', 'April 186, 2019', 'April 187, 2019', 'April 188, 2019', 'April 189, 2019', 'April 190, 2019', 'April 191, 2019', 'April 192, 2019', 'April 193, 2019', 'April 194, 2019', 'April 195, 2019', 'April 196, 2019', 'April 197, 2019', 'April 198, 2019', 'April 199, 2019', 'April 200, 2019', 'April 201, 2019', 'April 202, 2019', 'April 203, 2019', 'April 204, 2019', 'April 205, 2019', 'April 206, 2019', 'April 207, 2019', 'April 208, 2019', 'April 209, 2019', 'April 210, 2019', 'April 211, 2019', 'April 212, 2019', 'April 213, 2019', 'April 214, 2019', 'April 215, 2019', 'April 216, 2019', 'April 217, 2019', 'April 218, 2019', 'April 219, 2019', 'April 220, 2019', 'April 221, 2019', 'April 222, 2019', 'April 223, 2019', 'April 224, 2019', 'April 225, 2019', 'April 226, 2019', 'April 227, 2019', 'April 228, 2019', 'April 229, 2019', 'April 230, 2019', 'April 231, 2019', 'April 232, 2019', 'April 233, 2019', 'April 234, 2019', 'April 235, 2019', 'April 236, 2019', 'April 237, 2019', 'April 238, 2019', 'April 239, 2019', 'April 240, 2019', 'April 241, 2019', 'April 242, 2019', 'April 243, 2019', 'April 244, 2019', 'April 245, 2019', 'April 246, 2019', 'April 247, 2019', 'April 248, 2019', 'April 249, 2019', 'April 250, 2019', 'April 251, 2019', 'April 252, 2019', 'April 253, 2019', 'April 254, 2019', 'April 255, 2019', 'April 256, 2019', 'April 257, 2019', 'April 258, 2019', 'April 259, 2019', 'April 260, 2019', 'April 261, 2019', 'April 262, 2019', 'April 263, 2019', 'April 264, 2019', 'April 265, 2019', 'April 266, 2019', 'April 267, 2019', 'April 268, 2019', 'April 269, 2019', 'April 270, 2019', 'April 271, 2019', 'April 272, 2019', 'April 273, 2019', 'April 274, 2019', 'April 275, 2019', 'April 276, 2019', 'April 277, 2019', 'April 278, 2019', 'April 279, 2019', 'April 280, 2019', 'April 281, 2019', 'April 282, 2019', 'April 283, 2019', 'April 284, 2019', 'April 285, 2019', 'April 286, 2019', 'April 287, 2019', 'April 288, 2019', 'April 289, 2019', 'April 290, 2019', 'April 291, 2019', 'April 292, 2019', 'April 293, 2019', 'April 294, 2019', 'April 295, 2019', 'April 296, 2019', 'April 297, 2019', 'April 298, 2019', 'April 299, 2019', 'April 300, 2019', 'April 301, 2019', 'April 302, 2019', 'April 303, 2019', 'April 304, 2019', 'April 305, 2019', 'April 306, 2019', 'April 307, 2019', 'April 308, 2019', 'April 309, 2019', 'April 310, 2019', 'April 311, 2019', 'April 312, 2019', 'April 313, 2019', 'April 314, 2019', 'April 315, 2019', 'April 316, 2019', 'April 317, 2019', 'April 318, 2019', 'April 319, 2019', 'April 320, 2019', 'April 321, 2019', 'April 322, 2019', 'April 323, 2019', 'April 324, 2019', 'April 325, 2019', 'April 326, 2019', 'April 327, 2019', 'April 328, 2019', 'April 329, 2019', 'April 330, 2019', 'April 331, 2019', 'April 332, 2019', 'April 333, 2019', 'April 334, 2019', 'April 335, 2019"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2/31/2020\") == \"1\"\nassert solution(\"04/12/2019\") == \"4\"\nassert solution(\"04/31/2019\") == \"0\"\nassert solution(\"04/12/2019\") == \"0\"\nassert solution(\"31/12/2019\") == \"1\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2019/04/30\") == \"2019/04/30\"\nassert solution(\"April 30, 2019\") == \"2019/04/30\"\nassert solution(\"April 30, 2020\") == \"April 30, 2019\"\nassert solution(\"April 30, 2019, March 1, 2020, March 2, 2020\") == \"April 30, 2019, March 1, 2020, March 2, 2020\"\nassert solution(\"April 30, 2019, March 1, 2020, March 2, 2020, March 2, 2020\") == \"April 30, 2019, March 1, 2020, March 2, 2020, March 2, 2020\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2019/04/30\") == \"PTB\"\nassert solution(\"2019/04/30\") == \"PTB\"\nassert solution(\"2019/04/30\") == \"BPT\"\nassert solution(\"2019/04/30\") == \"BPT\"\nassert solution(\"2019/04/30\") == \"BPT\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2019/04/30\") == \"2019/04/30\"\nassert solution(\"2019/04/31\") == \"2019/04/31\"\nassert solution(\"2019/04/30\") == \"2019/04/30\"\nassert solution(\"2019/03/30\") == \"2019/03/30\"\nassert solution(\"2019/02/01\") == \"2019/02/01\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2019/04/30\"\n) == \"Heisei\"\nassert solution(\"2019/04/30\") == \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2019/04/30\") == \"TBD\", \"2019/04/30\"\nassert solution(\"2019/04/31\") == \"TBD\", \"2019/04/31\"\nassert solution(\"2019/04/01\") == \"TBD\", \"2019/04/01\"\nassert solution(\"2019/05/01\") == \"TBD\", \"2019/05/01\"\nassert solution(\"2019/03/31\") == \"TBD\", \"2019/03/31\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2019/04/30\") == \"BBD\"\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n\"April 30, 2019\"\n) == \"Bold\", \"Bold should be for April 30, 2019\"\nassert solution(\"April 30, 2019\") == \"Bold\", \"Bold should not be for April 30, 2019\"\nassert solution(\"April 30, 2019\") == \"Bold\", \"Bold should not be for April 30, 2019\"\nassert solution(\"April 30, 2019\") == \"Bold\", \"Bold should not be for April 30, 2019\"\nassert solution(\"April 30, 2019\") == \"Bold\", \"Bold should not be for April 30, 2019\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()), \"Internal Server Error\"\n\n-----Constraints-----\n0 < n <= 10^5\n\n[input] integer n\n\n[output] integer\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"3\") == \"3\"\nassert solution(\"6\") == \"3\"\nassert solution(\"1337 1337 1337\") == \"3\"\nassert solution(\"100000\") == \"3\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3 7 10 7 9 2 10 6 2 1 2\") == \"14\"\n\n\nassert solution(\"3 3 1 3 3 2 5 5 5 3 3 3 3 2 5 5 5 3 3 3 3 3 3 2 5 5 5 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '14'\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n0 <= a_j <= 10^9\n\n-----Time Limit-----\n1 second\n\n1 second\n\n-----Space Limit-----\n20,000,000\n\n-----Alternatives-----\nThe main idea of the algorithm is to use a stack to efficiently store the solutions. The idea is to take the first problem in the queue, and push it to the stack, and after each iteration we have to take the next problem in the queue. When we have got the next problem we pop from the stack and insert the problem in the queue.\n\nThe stack holds all the solutions. We keep track of the number of solutions we have already seen and use them for the next iteration. We can maintain the stack as follows:\n\nFirst we push the first problem, because the number of problems in the set has to be equal to the number of solutions we have already seen and the number of solutions will be the minimum number of problems the solutions are needed to be.\n\nAfter we take the next problem, we pop it from the stack, and push it in the queue.\n\nAfter we have popped and inserted the next problem, we can take the next solution in the queue and pop it from the stack.\n\nAfter we have popped and inserted the next solution in the queue, we can take the next solution in the queue and pop it from the stack.\n\nAfter we have popped and inserted the next solution in the queue, we can take the next solution in the queue and pop it from the stack.\n\nFinally we pop the first solution from the stack.\n\nThe maximum number of problems in the set is the maximum number of problems we can handle.\n\nIf the number of problems in the set is one in a million, the number of solutions we have seen so far is then $O(n^2)$.\n\nTime complexity: O(n)\nSpace complexity: O(1)\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('7') == '14'\nassert solution('7') == '14'\nassert solution('5') == '3'\nassert solution('1') == '1'\nassert solution('3') == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"9\"\n\n\n-----Constraints-----\n1 \u2264 n \u2264 10^4\n1 \u2264 a_i \u2264 10^9\n\n-----SAMPLE INPUT(S)-----\n3\n3\n2\n3\n2\n3\n1\n3\n2\n\n2>\n\n-----SAMPLE OUTPUT-----\n\n2\n\n-----SAMPLE HINT-----"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '6'\nassert solution('2 1 2 3 4 5 6') == '14'\n\nassert solution('3 6 3 6 5') == '3'\nassert solution('3 6 3 6 7 8 9 10 10 11') == '6'\n\nassert solution('3 6 3 6') == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 3\n\nInput\n2\n1 2 1 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\n\nOutput\n1\n\nInput\n5\n6 6 6 3 6 1000000000 3 3 6 6\n\nOutput\n6\n\nInput\n2\n1 3 5\n\nOutput\n2\n\n-----Shortnotes-----\nIn this problem, Polycarp is the set of problems for which it has to be composed of all the topics. This is not true for every problem, because the topics may be contiguous, and each contest must have a problem and it can contain a single problem.\nIn order to reconstruct the original problems for all the problems, it is possible to add a new category for each problem to the original problems in the same way: $a_i$, $a_i$ and $a_i+1$, where $a_i$ is the topic of the $i$-th problem.\n\nExample 1:\nInput\n5\n1 1 1 1 1 1\n1 3 1 2 1 1\n1 5 1 1 1 1\n1 3 3 3 3 3\n1 3 1 1 1\n1 6 1 1 1\n1 6 1 1 1\n1 6 1 1 1\nOutput\n2\nExample 2:\nInput\n5\n1 1 1 1 1 1\n1 2 1 2 1 1\n1 3 2 3 3 3\n1 4 1 4 1 1\n1 5 2 5 1 1\n1 6 1 6 1 1\n1 7 1 7 1 1\n1 8 1 8 1 1\n1 9 1 9 1 1\n1 10 1 10 1 1\nOutput\n3\nExample 3:\nInput\n3\n1 1 1 1 1\n1 3 1 3 3\n1 5 1 1 1\n1 6 1 1 1\n1 7 1 7 1\n1 8 1 8 1\n1 9 1 9 1\n1 10 1 10 1\nOutput\n3\n\"\"\"\n\n\"\"\"\nSolution\n\nThis problem was asked by Facebook.\n\nA data stream is like a queue, except that it only has integers. Each integer appears twice, and we only want to be able to pop it, and not peek it back. Implement a data stream that can take any integer as its only input, and remove it from the stream just once it has been popped.\n\nFor example, if a data stream is given as follows:\n\ndata = [1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\nThen you can always remove the first item, then pop it off the stream, and then remove the last item, and so on.\n\nYou can't remove the second last item, because the second item is not present.\n\nFor example:\n\nThe data stream is [1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 780, 790, 800, 810, 820, 840, 850, 900, 910, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920, 920,"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 4 1 10 2 10 2 4 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"3 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\") == \"3\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n[\n    \"3\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"3\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"2\",\n    \"2\",\n    \"3\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"2\",\n    \"1\",\n    \"3\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"3\",\n    \"3\",\n    \"2\",\n    \"3\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"3\",\n    \"2\",\n    \"2\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"3\",\n    \"1\",\n    \"1\",\n    \"3\",\n    \"3\",\n    \"3\",\n    \"3\",\n    \"2\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"3\",\n    \"3\",\n    \"1\",\n    \"2\",\n    \"2\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"2\",\n    \"2\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"3\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"3\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"3\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"2\",\n    \"2\",\n    \"3\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"3\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"3\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"2\",\n    \"2\",\n    \"3\",\n    \"3\",\n    \"1\",\n    \"2\",\n    \"2\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"3\",\n    \"3\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"2"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"\"1 2\n1 2 3 2 1 3 2\n1 2 3 3 2 1 3 2\n2 3 2 2 2 2 2 2 2 3 2\n1 3 2 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n3 2 3 3 2 1 3 2\n3 2 3 3 2 1 3 2\n3 3 3 3 2 1 3 2\n3 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n1 3 3 3 2 1 3 2\n2 3 3 3 2 1 3 2\n2 3 3 3 2"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['1', '2', '3', '1', '2', '3']) == '3'\nassert solution(['2', '3', '3']) == '3'\nassert solution(['3', '3']) == '3'\nassert solution(['1', '2', '3']) == '3'"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0, 1) == \"2\"\nassert solution(0, 3) == \"3\"\nassert solution(1, 4) == \"3\"\nassert solution(1, 5) == \"3\"\nassert solution(1, 6) == \"3\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 4\") == \"3 1 3 2 1 2 3 2\"\nassert solution(\"1 2 3 1 1 2 1 2 3 3\") == \"3 1 3 2 1 2 3 2\"\nassert solution(\"1 2 3 2 1 2 1 2 3 2\") == \"2 1 3 2\"\nassert solution(\"3 3 3 3 3 3 2 3\") == \"3 3 3 3 2 2 2\"\nassert solution(\"3 2 3 3 3 3 3\") == \"3 3 3 3 3\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10 4', '2 3 3 1 1 2 1 2 3 3') == '3 1'\nassert solution('10 4', '2 3 3 1 1 2 1 2 3 3') == '3 2'\nassert solution('10 4', '2 3 3 1 1 2 1 2 3 3') == '3 2'\nassert solution('10 4', '2 3 3 1 1 2 1 2 3 3') == '3 2'\nassert solution('10 4', '2 3 3 1 1 2 1 2 3 3') == '3 2'\n"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n\"\"\""
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\"5\", \"4\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]\n    ) == \"8\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        \n        dp = [amount for i in range(amount)]\n        \n        def dfs(idx, cur_dp):\n            \n            if idx == len(coins):\n                return cur_dp[-1]\n            \n            cur_dp[idx] = -1\n            \n            for i in range(len(coins)):\n                if i < len(coins):\n                    if dp[i] > 0:\n                        dp[i] = min(cur_dp[:], dp[:i] + [dp[i] - coins[i]])\n                        \n            if dp[-1] >= 0:\n                return dp[-1]\n            else:\n                return -1\n            \n        return dfs(0, dp)\n"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\n'''"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\""
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"21\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"1 3 2 8 5 5 8 2 2 8 5 2\") == \"0\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 2 3 4\") == \"21\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('4 3') == '21'\nassert solution('3 3') == '0'\nassert solution('3 3') == '0'\nassert solution('3 3') == '0'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"21\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"3 3\") == \"0\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 8 5 5 8 2 2 8 5 2\") == \"21\"\nassert solution(\"1 3 1\") == \"0\"\nassert solution(\"1 3 2\") == \"0\"\nassert solution(\"3 3 2\") == \"0\"\nassert solution(\"3 3 3\") == \"0\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"4\", \"3\", \"3\", \"3\", \"4\", \"3\"]) == \"21\"\nassert solution([\"4\", \"3\", \"3\", \"3\", \"3\", \"3\"]) == \"0\"\nassert solution([\"5\", \"4\", \"4\", \"4\", \"4\", \"4\"]) == \"0\"\nassert solution([\"4\", \"4\", \"4\", \"4\", \"4\", \"4\"]) == \"1\"\nassert solution([\"4\", \"3\", \"3\", \"3\", \"3\", \"3\"]) == \"1\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\nassert solution(5) == 4\n"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '21'\n\n\n-----Constraints-----\n0 <= n <= 10^4\n0 <= k <= 10^5\n\n0 <= c_i, c_j <= 10^5\nc_i, c_j \\in {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nf_i, f_j \\in {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nh_i, h_j \\in {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\n0 <= t < 10^5\n\n-----Time Limit: 1 minute -----\nIn this problem, we're going to take the input of the three lines of input and solve the problem in O(1) extra time.\nSince the input takes O(1) time, the solution takes O(n) time.\n"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"21\"\nassert solution(\"3 3\") == \"0\""
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution == 2\nassert solution == 0\nassert solution == 1\nassert solution == 2\nassert solution == 2\n"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\", \"2\", \"4\", \"6\", \"6\", \"6\"]) == \"2\"\nassert solution([\"2\", \"4\", \"6\", \"6\", \"6\", \"6\"]) == \"2\"\nassert solution([\"2\", \"8\", \"10\", \"10\", \"10\", \"10\"]) == \"0\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 4\nassert solution(stdin) == 6\nassert solution(stdin) == 8\n"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4 6 6 6\") == \"2 2 1\"\nassert solution(\"3\") == \"1 1 1\"\nassert solution(\"4\") == \"1 1 2\"\nassert solution(\"5\") == \"1 1 3\"\nassert solution(\"6\") == \"2 2 2\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"2\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1 1 2'\nassert solution(stdin) == '1 1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1 2'\n"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1 2 3\"\nassert solution(input()) == \"1 2\"\nassert solution(input()) == \"2 1\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == solution(stdin.strip())\n"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution == 2\n"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n  1 2 3 4 5 6\n  1 1 1 1 1\n  1 1 2 2 3\n  1 2 2 2 2\n  1 3 3 3 3\n  1 4 4 4 4\n  1 5 5 5 5\n  1 6 6 6 6\n\"\"\") == 3\nassert solution(\"\"\"\n  1 2 3 4 5 6\n  1 1 1 1 1\n  1 1 2 2 3\n  1 2 2 2 2\n  1 3 3 3 3\n  1 4 4 4 4\n  1 5 5 5 5\n  1 6 6 6 6\n\"\"\") == 4\nassert solution(\"\"\"\n  2 3 4 5 6\n  1 2 3 4 5\n  1 1 1 1 1\n  1 1 2 2 3\n  1 2 2 2 2\n  1 3 3 3 3\n  1 4 4 4 4\n  1 5 5 5 5\n  1 6 6 6 6\n\"\"\") == 5\nassert solution(\"\"\"\n  2 3 4 5 6\n  1 2 3 4 5\n  1 1 1 1 1\n  1 1 2 2 3\n  1 2 2 2 2\n  1 3 3 3 3\n  1 4 4 4 4\n  1 5 5 5 5\n  1 6 6 6 6\n\"\"\") == 6\nassert solution(\"\"\"\n  4 5 8 9 10\n  1 2 3 4 5\n  1 1 1 1 1\n  1 1 2 2 3\n  1 2 2 2 2\n  1 3 3 3 3\n  1 4 4 4 4\n  1 5 5 5 5\n  1 6 6 6 6\n\"\"\") == 8\n"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5,1,0,1,0,0) == 1\nassert solution(3,1,0,1,1,0) == 2\nassert solution(5,1,0,1,0,1) == 0\nassert solution(5,1,0,1,0,2) == 1\nassert solution(3,1,0,1,0,0) == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\""
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n\n\"\"\""
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1' or solution(stdin) == '2' or solution(stdin) == '0', 'Failed'\n\n\"\"\""
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1\",\"1\",\"1\",\"0\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\"]) == \"0\"\nassert solution([\"1\",\"1\",\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]) == \"0\"\nassert solution([\"1\",\"1\",\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]) == \"0\"\nassert solution([\"1\",\"1\",\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]) == \"0\"\nassert solution([\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]) == \"0\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"100010\") == 2\nassert solution(\"100011\") == 2\nassert solution(\"101101\") == 0\nassert solution(\"00110\") == 0\nassert solution(\"00001\") == 0\n"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('100010') == 1\nassert solution('1000001') == 2\nassert solution('11111111') == 0\nassert solution('1000000000') == 1\nassert solution('1001001001') == 3\n"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\"\n\"\"\"\n\nimport sys\nfrom itertools import combinations\n\nn = int(sys.stdin.readline().strip())\n\nA = []\nfor i in range(n):\n    A.append(list(map(int,sys.stdin.readline().split())))"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 5\"\nassert solution(stdin) == \"3 2 3 3 2\"\nassert solution(stdin) == \"2 2 2 2 2 2\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3 1\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"3\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"2 3\") == \"4\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 7, \"wrong number of segments\"\nassert solution(stdin) == 5, \"wrong number of segments\"\nassert solution(stdin) == 4, \"wrong number of segments\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution == 7\n\n'''\n"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1 4 6 7\"\nassert solution(stdin) == \"3 2 6 7\"\nassert solution(stdin) == \"3 1 4 5\"\nassert solution(stdin) == \"3 1 2 3\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 3\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"0\""
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 30\n\n------Constraints------\n1 <= q <= 10^5\n1 <= n <= 2^20\n1 <= a_1, a_2, \\dots, a_n <= 10^5\n\n-----Submissions-----\nTime Limit: 1 second\nMemory Limit: 256 MB\n\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\nclass Solution:\n    def maxPPrettiness(self, n: int, a: List[int]) -> int:\n        \n        def getPrettiness(x):\n            return sum(a[:x+1])\n        \n        return max(getPrettiness(i) for i in range(1, n+1))"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '30'\nassert solution(stdin) == '31'\nassert solution(stdin) == '10'\nassert solution(stdin) == '30'\nassert solution(stdin) == '31'\n"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '30'\n"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"30\"\nassert solution(stdin) == \"31\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"31\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"30\""
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"30\"\n\"\"\""
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"30\"\nassert solution(stdin) == \"31\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"12\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\"5 5\", \"3 2\", \"4 2\", \"2 3\", \"3 3\", \"3 4\", \"1 2\", \"1 3\", \"1 4\", \"1 5\", \"1 6\", \"1 7\", \"1 8\", \"1 9\", \"2 4\", \"2 3\", \"2 5\", \"2 6\", \"2 7\", \"2 8\", \"2 9\", \"3 4\", \"3 5\", \"3 6\", \"3 7\", \"3 8\", \"3 9\", \"4 5\", \"4 6\", \"4 7\", \"4 8\", \"4 9\", \"5 6\", \"5 7\", \"5 8\", \"5 9\", \"6 6\", \"7 7\", \"8 8\", \"9 9\"]) == \"13\"\n\n\nassert solution(\n    [\"1 1\", \"2 2\", \"2 3\", \"1 4\", \"3 3\", \"1 5\", \"3 4\", \"1 6\", \"4 6\", \"1 7\", \"1 8\", \"1 9\", \"2 4\", \"2 5\", \"2 6\", \"2 7\", \"2 8\", \"2 9\", \"3 4\", \"3 5\", \"3 6\", \"3 7\", \"3 8\", \"3 9\", \"4 6\", \"4 7\", \"4 8\", \"4 9\", \"5 6\", \"5 7\", \"5 8\", \"5 9\", \"6 6\", \"7 7\", \"8 8\", \"9 9\"]) == \"10\"\n\n\nassert solution(\n    [\"1 1\", \"1 1\", \"2 2\", \"2 3\", \"3 3\", \"1 4\", \"3 4\", \"1 5\", \"3 5\", \"1 6\", \"3 6\", \"1 7\", \"1 8\", \"1 9\", \"2 4\", \"2 5\", \"2 6\", \"2 7\", \"2 8\", \"2 9\", \"3 4\", \"3 5\", \"3 6\", \"3 7\", \"3 8\", \"3 9\", \"4 6\", \"4 7\", \"4 8\", \"4 9\", \"5 6\", \"5 7\", \"5 8\", \"5 9\", \"6 6\", \"7 7\", \"8 8\", \"9 9\"]) == \"10\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \n)"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3 4 99 100\") == \"2\"\nassert solution(\"1 5 3 20\") == \"1\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 3 1 5') == '2'\nassert solution('2 4 2') == '2'\nassert solution('2 3 4 7 9') == '2'\nassert solution
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 3, 5, 6, 2, 99, 20) == \"2\"\nassert solution(1, 1, 3, 4, 99, 20, 2) == \"1\"\nassert solution(1, 1, 1, 1, 1, 99, 1) == \"1\"\nassert solution(4, 2, 5, 3, 99, 1, 2) == \"3\"\nassert solution(4, 3, 6, 2, 99, 1, 99) == \"2\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5\",\"5\",\"10\",\"10\",\"2\",\"2\"]) == \"2\"\nassert solution([\"2\",\"2\",\"4\",\"4\",\"99\"]) == \"1\"\nassert solution([\"2\",\"3\",\"6\",\"4\",\"3\",\"4\"]) == \"2\"\nassert solution([\"1\"]) == \"1\"\nassert solution([\"1\",\"1\"]) == \"1\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('4') == '2'\nassert solution('4 2') == '1'\nassert solution('4 3') == '1'\nassert solution('4 4 99 100') == '2'\nassert solution('42') == '2'\n"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '1'\n\n\n-----Constraints-----\n\n1 <= q <= 10^6\n1 <= n <= 100\n1 <= a[i] <= 100\n\nSubmissions are written within the class. The solution set must be valid.\n'''\nclass Solution:\n    def findTeam(self, n: int, a: List[int]) -> int:\n        if n == 1:\n            return -1\n        a.sort()\n        diff = abs(sum(a)-sum(a[:n//2]))\n        return diff // 2\n\nprint(solution(4, [2, 10, 1, 20]))\nprint(solution(4, [3, 6]))\nprint(solution(6, [2, 3, 4, 99, 100]))"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4\\n\") == \"2\\n1\\n2\\n3\\n4\\n\"\nassert solution(\"1\\n1\\n1\\n1\\n\") == \"1\\n\"\nassert solution(\"1\\n1\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n\") == \"1\\n1\\n2\\n2\\n\"\nassert solution(\"2\\n3\\n4\\n5\\n\") == \"1\\n\"\nassert solution(\"2\\n1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n\n\n\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3 20\") == \"2\"\n\n\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(int(stdin)) == '2'\n\n\nNote:\n\n1 <= stdin.length <= 300\n1 <= stdin[i] <= 10^9\nstdin.length <= 100\nstdin.length <= 100\nstdin.length <= 2 * 10^9\nstdin.length <= 100\n\"\"\"\nimport sys\nfrom itertools import combinations\n\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        n = len(nums)\n        if n < 2 or n % 2:\n            return False\n        \n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        \n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if nums[i - 1] <= j:\n                    dp[i][j] = dp[i - 1][j - nums[i - 1]] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        \n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if nums[i - 1] <= j and dp[i][j - nums[i - 1]] == 0:\n                    return False\n        \n        return True"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'YES'\n\"\"\"\nclass Solution:\n    def solution(self, n, a, b, n, s):\n        total = 0\n        for a_i in range(a):\n            total += a_i * n\n        for a_i in range(a):\n            total += a_i * n + a_i\n        for a_i in range(a):\n            if s == 0:\n                pass\n            elif n == 1:\n                pass\n            else:\n                total += (b + 1) * n\n                total += (b + 1) * n + a_i * n\n                total += (b + 1) * n + a_i * n + s\n        return str(total)\n\nn, a, b, n, s = map(int, input().split())\nstdin = input()\nstdin = [i for i in stdin]\nprint(Solution().solution(n, a, b, n, s))\n"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3 4 6 2\"), \"YES\"\n\n\n-----Brute Force-----"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3 4 4\") == \"NO\"\nassert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 3 2 3\") == \"NO\"\nassert solution(\"2 2 2\") == \"YES\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\n------Sol 1-----\nfor _ in range(int(stdin)):\n    n = int(stdin)\n    coins = []\n    coins.append(0)\n    for i in range(2, n+1):\n        coins.append(coins[i-1] + i)\n    coins.sort()\n    a = coins[0]\n    b = coins[n-1]\n    ans = str(a*b)\n    print(ans)\n\n\n\n-----Sol 2-----\nfor _ in range(int(stdin)):\n    n = int(stdin)\n    coins = []\n    coins.append(0)\n    for i in range(2, n+1):\n        coins.append(coins[i-1] + i)\n    coins.sort()\n    a = coins[0]\n    b = coins[n-1]\n    ans = str(a*b)\n    print(ans)\n"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1, 5) == 'YES'\nassert solution(1, 1) == 'NO'\nassert solution(1, 2) == 'NO'\nassert solution(1, 3) == 'YES'\nassert solution(1, 4) == 'YES'\n"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\nassert solution(\"2 3 2\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"1 3 7\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"2 3 4 1\") == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES'"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input=\n    \"\"\"\n    7\n    7 2 7 3 3 1 4\n    \n    5\n    4 3 2 1 0\n    \n    \n    5\n    3 4 1 4 2\n    \n    \n    \n    \"\"\".splitlines()\n) == \"YES\"\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"7\")\nprint(\"Output : \")\nprint(\"YES\")\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"5\")\nprint(\"Output : \")\nprint(\"NO\")\nprint(\"Example 3:\")\nprint(\"Input : \")\nprint(\"5\")\nprint(\"Output : \")\nprint(\"YES\")\nprint(\"Example 4:\")\nprint(\"Input : \")\nprint(\"1\")\nprint(\"Output : \")\nprint(\"NO\")\nprint(\"Exception :\")\nprint(\"2\")\nprint(\"Input : \")\nprint(\"5\")\nprint(\"Output : \")\nprint(\"YES\")"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('7\\n4 2 7 3 3 1 4') == 'YES'\nassert solution('5\\n4 3 1 5 3\\n0') == 'NO'\nassert solution('5\\n4 3 1 5 3') == 'YES'"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('123456') == 'YES'\nassert solution('1222333') == 'NO'\nassert solution('0') == 'NO'\nassert solution('0') == 'NO'\nassert solution('0') == 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\") == -1\nassert solution(\"1\") == 18\nassert solution(\"3\") == 9\nassert solution(\"4\") == 18\nassert solution(\"5\") == 10\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 18\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 18\nprint(solution(stdin))\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 8\nassert solution(stdin) == -1\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"-1\""
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 18\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 10\n\n\"\"\""
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 1\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 11\n\"\"\""
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5') == '6'\nassert solution('2 4 6 3') == '4'\nassert solution('4 4') == '4'\nassert solution('1 2 3 4 5') == '6'\nassert solution('1 6') == '1'\n"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 1 2 4 6 4 3 5\") == \"1 4\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '2'\nassert solution('1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 2 3 1\") == \"2\"\nassert solution(\"4 1 2 3\") == \"1\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\n\"\"\""
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\n        \"4 1\",\n        \"1 1 2 3 1\",\n    ]\n) == \"2\"\nassert solution(\n    [\n        \"4 2\",\n        \"6 4 8 5\",\n    ]\n) == \"6\"\nassert solution(\n    [\n        \"2 2\",\n        \"1 6\",\n    ]\n) == \"6\"\nassert solution(\n    [\n        \"2 6\",\n        \"1 6\",\n    ]\n) == \"2\"\nassert solution(\n    [\n        \"1 6\",\n        \"1 6\",\n    ]\n) == \"1\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 4 1 2 2 5 1\") == 2\nassert solution(\"2 3 4 3 2 2 5 3\") == 3\nassert solution(\"2 3 4 3 3 2 2 2 4 2\") == 6\nassert solution(\"3 6 4 3 4 4 4 4 4 4\") == -1\nassert solution(\"2 4 2 5\") == -1"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3 5 6 1 7 8 9 10 11\") == 7\nassert solution
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2, 5) == 2\nassert solution(5, 2) == 6\nassert solution(6, 2) == 2\nassert solution(2, 2) == 1\nassert solution(2, 4) == 2\n"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '6'\nassert solution(stdin) == '7'\n"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 8\n\nassert solution(stdin) == 12\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\n\n------Time complexity-----\nTime complexity: O(n^2)\n\n2.5.6. Time Limit: O(1)\n\n2.5.7. Space Complexity: O(n)\n\nTime: 16 ms, faster than 57.85% of Python online submissions for Remove Min Elements to Make the Array Good.\nMemory: 15 MB, less than 6.23% of Python online submissions for Remove Min Elements to Make the Array Good.\n\n\"\"\"\nclass Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        l = 0\n        r = len(nums)-1\n        while l<=r:\n            if nums[l]!= val:\n                nums[l+1] = nums[l]\n                l += 1\n            l += 1\n        return l\n    \n    def removeElement2(self, nums: List[int], val: int) -> int:\n        i,j = 0,len(nums)-1\n        while i<=j:\n            if nums[i]!=val:\n                j-=1\n            i+=1\n        return i\n    \n\"\"\"\nAlgorithm:\n1. take all possible subsequences from first to last and their length as a record\n2. sort them by their length to pick out the length which is greater than the first subsequence\n3. calculate the left and right index of the length which is greater than the last index\n4. add the remaining subsequences from first to last to the array to remove the minimum number of elements\n5. calculate the length of the array by using it in the end of the length of the previous subsequence\n6. return the length of the subsequences which are greater than the last index\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(str(5) + str(2) + str(3) + str(4)) == str(3)\nassert solution(str(12) + str(5) + str(6) + str(7) + str(8) + str(9) + str(10) + str(11) + str(12)) == str(0)\n"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n        '4',\n        '8',\n        '15',\n        '16',\n        '23',\n        '42'\n    ]) == [4, 8, 15, 16, 23, 42]\n\"\"\"\nimport math"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"n = 5 \")\nprint(\"a = [4, 8, 15, 16, 23, 42] \")\nprint(\"Output : \")\nprint(\"3\")\n\nprint(\"Exception : \")\nprint(\"0\")\n\n\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"n = 12 \")\nprint(\"a = [4, 8, 15, 16, 23, 42] \")\nprint(\"Output : \")\nprint(\"0\")\n\nprint(\"Exception : \")\nprint(\"3\")\n\n\nprint(\"Example 3:\")\nprint(\"Input : \")\nprint(\"n = 15 \")\nprint(\"a = [4, 8, 15, 16, 23, 42] \")\nprint(\"Output : \")\nprint(\"0\")\n\nprint(\"Exception : \")\nprint(\"3\")\n\n\nprint(\"Example 4:\")\nprint(\"Input : \")\nprint(\"n = 23 \")\nprint(\"a = [4, 8, 15, 16, 23, 42] \")\nprint(\"Output : \")\nprint(\"1\")\n\nprint(\"Exception : \")\nprint(\"0\")\n\n\nprint(\"Example 5:\")\nprint(\"Input : \")\nprint(\"n = 42 \")\nprint(\"a = [4, 8, 15, 16, 23, 42] \")\nprint(\"Output : \")\nprint(\"0\")\n\nprint(\"Exception : \")\nprint(\"0\")\n"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin=str(input())\n    ) == str(1)\n"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\nprint('Example 1:')\nprint('Input : ')\nprint('n = 5')\nprint('a = [4, 8, 15, 16, 23, 42]')\nprint('Exception :')\nprint('3')\nprint('Output :')\nprint(str(solution(stdin)))\n\nprint('Example 2:')\nprint('Input : ')\nprint('n = 12')\nprint('a = [4, 8, 15, 16, 23, 42]')\nprint('Exception :')\nprint('0')\nprint('Output :')\nprint(str(solution(stdin)))\n"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"0\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 2 4\") == \"3 2\"\nassert solution(\"5 3 2\") == \"3\"\nassert solution(\"5 3 4\") == \"3 3\"\nassert solution(\"5 5 1\") == \"3\"\nassert solution(\"5 5 2\") == \"3\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"13\") == \"0\"\nassert solution(\"5\") == \"3\"\nassert solution(\"5\") == \"0\"\nassert solution(\"5\") == \"3\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"9150\"\nassert solution(stdin) == \"79\"\nassert solution(stdin) == \"23\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == answer\n-----Constraints-----\n\n1 <= stdin.length <= 100\n0 <= stdin[i] <= 10^9\n1 <= a < 10^9\n1 <= b < 10^9\n\nTime Limit: 1 sec\nMemory Limit: 30 MB\n\n\n------Code Start------\n\nclass Solution:\n    def solve(self, s, n):\n        s = s.replace(')','').replace('(','').split()\n        a = int(s[0])\n        b = int(s[1])\n        a_lst = list(str(a))\n        b_lst = list(str(b))\n        m = 0\n        for i in range(1, len(s)):\n            if a_lst[i] == b_lst[i]:\n                m += 1\n            else:\n                return 'NO'\n        return f'YES{m}'\n\nassert Solution().solve(s, n) == answer\n"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"10 2\") == \"3\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"9 9\") == \"2\"\nassert solution(\"123456789 1000000000\") == \"0\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"92\"\nassert solution(stdin) == \"87654322\"\n\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(test) == \"0\"\nassert solution(test2) == \"3\"\nassert solution(test3) == \"3\"\nassert solution(test4) == \"4\"\nassert solution(test5) == \"3\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"92\"\nassert solution(stdin) == \"87654322\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1\", \"2\", \"0\", \"1\", \"3\", \"3\", \"4\", \"2\", \"3\", \"4\"], \"5\", \"0\", \"12345\", \"123456\", \"0\") == \"123456\"\nassert solution([\"1\", \"2\", \"0\", \"1\", \"3\", \"3\", \"4\", \"2\", \"3\", \"4\"], \"5\", \"0\", \"12345\", \"123456\", \"0\") == \"12345\"\nassert solution([\"1\", \"2\", \"0\", \"1\", \"3\", \"3\", \"4\", \"2\", \"3\", \"4\"], \"5\", \"0\", \"12345\", \"123456\", \"0\") == \"123456\"\nassert solution([\"1\", \"2\", \"0\", \"1\", \"3\", \"3\", \"4\", \"2\", \"3\", \"4\"], \"5\", \"0\", \"12345\", \"123456\", \"0\") == \"123456\"\nassert solution([\"1\", \"2\", \"0\", \"1\", \"3\", \"3\", \"4\", \"2\", \"3\", \"4\"], \"5\", \"0\", \"12345\", \"123456\", \"0\") == \"123456\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '12339'"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 12339\n"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '12339'\n"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('0'), '0'\nassert solution('1'), '1'\nassert solution('2'), '2'\nassert solution('3'), '3'\nassert solution('4'), '4'\n"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"7 4 123 5\") == \"123\"\nassert solution(\"7 0 4\") == \"0\"\nassert solution(\"5 0 4\") == \"0\"\nassert solution(\"10 5 15\") == \"15\"\nassert solution(\"17 8 54321\") == \"4321\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 0 4') == '12339'\nassert solution('5 0 4 5') == '12339'\nassert solution('5 0 4 6') == '12345'\nassert solution('5 0 4 7') == '12345'\nassert solution('5 0 4 8') == '12345'\n"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12339\n\n\n-----Example-----\nInput\n\n8\n2 0 2\n3 3 2\n5 5 2\n0 0\n\nOutput\n\n4\n3\n0\n5\n\n\n-----Note-----\n\nThe maximum value $k$ is 6, which is why $k \\bmod 6 = 0$ and $k \\bmod 2 = 1$.\n\n-----Explanation-----\n\nIt is shown that $k$ always exists under the given constraints.\n\nThe maximum value of $k$ is 4 (5 \\bmod 2 = 3), which means that $0 \\le k \\le n$ and $k \\bmod 2 = 3$ and $k \\bmod 2 = 1$. It is obvious that there is no greater integer not exceeding $12345$ which has the remainder $5$ modulo $2$ (because $12345 \\bmod 2 = 1$).\n\nIt is correct.\n\n\n-----Example-----\nInput\n\n6\n7 0 2\n4 3 0\n5 1 3\n\nOutput\n\n1\n5\n0\n2\n\n-----Solution-----\n\n=>"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1312345\") == \"12339\"\nassert solution(\"12345\") == \"12339\"\nassert solution(\"1234\") == \"1234\"\nassert solution(\"10\") == \"10\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 12339\n"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"4\"\n\n\n-----My Solution-----"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(6)\n"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '8'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n        [2, 2, 2, 2, 2, 2],\n        [2, 2, 2, 2, 2, 2],\n        [2, 2, 2, 2, 2, 2],\n        [2, 2, 2, 2, 2, 2],\n        [2, 2, 2, 2, 2, 2],\n        [2, 2, 2, 2, 2, 2],\n    ]\n) == \"6\"\nassert solution(\n    [\n        [1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1],\n    ]\n) == \"8\"\nassert solution(\n    [\n        [6, 6, 6, 6, 6, 6, 6],\n        [6, 6, 6, 6, 6, 6, 6],\n        [6, 6, 6, 6, 6, 6, 6],\n        [6, 6, 6, 6, 6, 6, 6],\n        [6, 6, 6, 6, 6, 6, 6],\n        [6, 6, 6, 6, 6, 6, 6],\n    ]\n) == \"4\"\nassert solution(\n    [\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 3 2 1 2') == 4\nassert solution('2 3 6 2') == 4\nassert solution('2 3 4 5 6 7') == 4\nassert solution('3 4 5 6 7 8') == 4\nassert solution('4 5 6 7 8 9') == 4\n"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"7 2\") == \"6\"\nassert solution(\"8 2\") == \"8\"\nassert solution(\"7 3\") == \"4\"\nassert solution(\"7 4\") == \"4\"\nassert solution(\"7 5\") == \"4\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '4'\n\n\n\"\"\"\n\nclass Solution:\n    def candy(self, boxes: List[int]) -> int:\n        # BFS\n        # N: Number of boxes.\n        # M: Number of candy boxes.\n        # M: number of boxes in the shop (but not in the shop itself)\n        \n        # number of pairs\n        n = len(boxes)\n        # number of pairs\n        m = len(boxes)\n        \n        # stores all pairs for later look up\n        pairs = [[] for i in range(n)]\n        \n        # stores pairs for each box\n        for i in range(n):\n            for j in range(i):\n                if boxes[i] > boxes[j]:\n                    pairs[i].append(j)\n                    pairs[j].append(i)\n        \n        # for each pair\n        for p in pairs:\n            # if one of pairs is empty\n            if p:\n                # if it's an empty pair\n                if len(p) == 1:\n                    # add all pairs into the shop\n                    for i in p:\n                        boxes[i] += boxes[p[0]]\n                    # remove all pairs from the shop\n                    for i in p:\n                        boxes[i] -= boxes[p[0]]\n                    # remove all pairs from the shop\n                    for i in p:\n                        boxes[i] -= boxes[p[0]]\n                # if it's a pair of boxes\n                else:\n                    # remove all pairs from the shop\n                    for i in p:\n                        boxes[i] -= boxes[p[0]]\n                    # add all pairs into the shop\n                    for i in p:\n                        boxes[i] += boxes[p[0]]\n                    # remove all pairs from the shop\n                    for i in p:\n                        boxes[i] -= boxes[p[0]]\n                    # remove all pairs from the shop\n                    for i in p:\n                        boxes[i] -= boxes[p[0]]\n                    \n                    # remove all pairs from the shop\n                    for i in p:\n                        boxes[i] -= boxes[p[0]]\n                    # add all pairs into the shop\n                    for i in p:\n                        boxes[i] += boxes[p[0]]\n                    # remove all pairs from the shop\n                    for i in p:\n                        boxes[i] -= boxes[p[0]]\n            \n        # all pairs are remaing\n        # pop them from the shop\n        for i in range(n):\n            boxes[i] -= boxes[i]\n        \n        # all boxes are remaing\n        # remove them from the shop\n        for i in range(n):\n            boxes[i] -= boxes[i]\n        \n        return sum(boxes)\n\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"7 2\") == \"6\"\nassert solution(\"8 2\") == \"8\"\nassert solution(\"7 3\") == \"4\"\nassert solution(\"7 4\") == \"6\"\nassert solution(\"8 3\") == \"6\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['ABC','C','A','D']) == 'ACDF'\nassert solution(['A','B','C']) == 'BCC'\nassert solution(['D']) == 'DC'"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'cba', 'The function should return a string which is the same as the input but lowercased'\n"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    'ABCD', 3\n) == 'BAC'\nassert solution(\n    'ABCD', 1\n) == 'ABC'\nassert solution(\n    'ABCD', 2\n) == 'AB'\nassert solution(\n    'ABCD', 3\n) == 'ABCD'\nassert solution(\n    'ABCD', 4\n) == 'ABBC'\n"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == \"aBC\"\nassert solution(\"ABC\") == \"ABC\"\nassert solution(\"ABC\") == \"aBc\"\nassert solution(\"ABC\") == \"BAC\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"A\", \"B\", \"C\"]) == \"ABC\"\nassert solution([\"a\",\"b\",\"c\"]) == \"abc\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'aBC'\n"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == \"aBC\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"ABCDEF\") == \"ABCDEF\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'ABC'"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == \"aBC\"\nassert solution(\"ABC\") == \"ABC\"\nassert solution(\"ABA\") == \"ABA\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"abc\") == \"Abc\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"1 3\"\nassert solution(\"abc\") == \"bcdef\"\nassert solution(\"zzz123\") == \"zzz123\"\nassert solution(\"qwertyuiop\") == \"qwertouio\"\nassert solution(\"qwertyuiop\") == \"qwertouio\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 4 2 5 1\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('khabarovsk 20') == '3'\nassert solution('moscow 10') == '1'\nassert solution('kazan 50') == '5'\nassert solution('kazan 35') == '2'\nassert solution('kazan 60') == '6'\n"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['khabarovsk','moscow','kazan','kazan','moscow','khabarovsk']), 'Empty array'\nassert solution(['khabarovsk','moscow', 'kazan','moscow', 'khabarovsk', 'kazan']), 'Empty array'\nassert solution(['khabarovsk','moscow','moscow', 'khabarovsk','moscow','moscow']), 'Empty array'\nassert solution(['khabarovsk','moscow','moscow', 'khabarovsk', 'kazan','moscow']), 'Empty array'\nassert solution(['khabarovsk','moscow','moscow', 'khabarovsk','moscow', 'kazan', 'khabarovsk','moscow']), 'Empty array'\n"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"2 3 1 5 2\"\nassert solution(input) == \"6\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"khabarovsk 20\") == \"3 4 6 1\"\nassert solution(\"moscow 10\") == \"1 2 4 6\"\nassert solution(\"kazan 50\") == \"1 4 2 10\"\nassert solution(\"kazan 35\") == \"1 2 10 3\"\nassert solution(\"moscow 60\") == \"1 4 10 15\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('khabarovsk 20') == '20'\nassert solution('moscow 10') == '10'\nassert solution('kazan 50') == '50'\nassert solution('kazan 35') == '35'\nassert solution('kazan 60') == '60'\n"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\"\"khabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\"\"\") == \"3 4 6 1 5 2\"\nassert solution(\"\"\"khabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\"\"\") == \"5 2 4 1\"\nassert solution(\"\"\"khabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\"\"\") == \"2 1 5 4\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('10 20 30 40 50 60') == '50 30 40 50 20'\nassert solution('10 50 20 50 30') == '10 50 20 50 50 30'\nassert solution('10 50 30 20 20 30') == '10 50 30 20 20 30'\nassert solution('10 50 30 20 30 30') == '10 50 30 20 30 30'\nassert solution('10 50 20 20 20 30') == '10 50 20 20 20 30'\n"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5, f\"The implementation for the solution exercise is wrong\""
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 1 5 2\""
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"No\"\nassert solution(\"9\") == \"Yes\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"8\") == \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(solution) == 'Yes','solution() does not return Yes'\n"
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nassert solution(\"2 700\") == \"Yes\"\nassert solution(\"9\") == \"No\"\nassert solution(\"\") == \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"No\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(k=2) == \"Yes\"\nassert solution(k=3) == \"No\"\nassert solution(k=5) == \"No\"\nassert solution(k=1) == \"Yes\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 'Yes'\n"
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2) == \"Yes\"\nassert solution(1) == \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution((\"5\", \"10\", \"15\", \"20\", \"25\")) == \"Yes\"\nassert solution((\"20\", \"100\", \"1\", \"2\", \"3\")) == \"No\"\nassert solution((\"3\", \"10\", \"5\", \"20\", \"4\", \"100\")) == \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(solution) == \"Yes\"\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom collections import defaultdict\n\nN, K = map(int, input().split())"
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"100 500\") == \"Yes\"\nassert solution(\"500 100\") == \"No\"\nassert solution(\"1\") == \"No\""
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"The implementation is wrong\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"3 10\") == \"0.145833333333\"\nassert solution(\n    \"3 10\") == \"0.0000000\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '0.145833333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 10') == '14.000000'\nassert solution('3 8') == '0.633333'\nassert solution('4 10') == '0.194444'\nassert solution('2 5') == '0.536666'"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['3','5','4','5','2','1','2']) == '7.8'\nassert solution(['1','3']) == '0'\nassert solution(['1','2','3']) == '0'\nassert solution(['2','2','3']) == '0'\nassert solution(['3','4','3']) == '4.3333333333333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    3 5\n    7 8 9\n    \"\"\") == \"3/4\"\n    \nassert solution(\n    \"\"\"\n    4\n    1\n    2\n    3\n    \"\"\") == \"1\"\n    \nassert solution(\n    \"\"\"\n    3 2\n    3 3\n    3 4\n    \"\"\") == \"0\"\n    \nassert solution(\n    \"\"\"\n    2 3\n    2 4\n    \"\"\") == \"0\"\n    \nassert solution(\n    \"\"\"\n    1 1\n    3 4\n    \"\"\") == \"0\"\n    \n"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0.145833333333\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"0.1\"\n\n\n-----Sample Input-----\n3 10\n\n-----Sample Output-----\n0.01894331328\n\n - If the die shows 2, Snuke needs to get three consecutive heads from two coin flips to obtain a score of 10 or above. The probability of this happening is \\frac{1}{2} \\times (\\frac{1}{2})^2 = \\frac{1}{12}.\n - If the die shows 3, Snuke needs to get two consecutive heads from two coin flips to obtain a score of 10 or above. The probability of this happening is \\frac{1}{2} \\times (\\frac{1}{2})^2 = \\frac{1}{12}.\n - If the die shows 1, Snuke needs to get four consecutive heads from four coin flips to obtain a score of 10 or above. The probability of this happening is \\frac{1}{4} \\times (\\frac{1}{4})^2 = \\frac{1}{24}.\nThus, the probability that Snuke wins is \\frac{1}{12} + \\frac{1}{24} + \\frac{1}{12} = \\frac{7}{24} \\simeq 0.01894331328.\n"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '7'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\n"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 2') == '0.145833333333'\nassert solution('3 3') == '0.333333333333'\nassert solution('3 4') == '0.333333333333'\nassert solution('3 5') == '0.333333333333'\nassert solution('3 6') == '0.333333333333'\n"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\".T.S.\") == \"1\"\n\"\"\"\n\nimport unittest\n\nfrom collections import deque\nfrom functools import reduce\n\n\nclass Solution(object):\n    def nextDay(self, date):\n        \"\"\"\n        :type date: str\n        :rtype: str\n        \"\"\"\n        return reduce(lambda x, y: x + str(y % 7), [\n            \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"], 0)\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(\n            Solution().nextDay(\n                \"T.S.\"), \"1\")\n"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('SUN') == 1, \"We have a problem.\"\nassert solution('MON') == 1, \"We have a problem.\"\nassert solution('TUE') == 1, \"We have a problem.\"\nassert solution('WED') == 1, \"We have a problem.\"\nassert solution('THU') == 1, \"We have a problem.\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('SUN') == '1'\nassert solution('MON') == '2'\nassert solution('TUE') == '3'\nassert solution('WED') == '4'\nassert solution('THU') == '5'\n"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"SUN\") == \"5\"\nassert solution(\"MON\") == \"2\"\nassert solution(\"TUE\") == \"3\"\nassert solution(\"WED\") == \"7\"\nassert solution(\"THU\") == \"6\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s) == 5,'should be 5'\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"Sat\") == 1\nassert solution(\"SUN\") == 7\nassert solution(\"Mon\") == 7\nassert solution(\"TUE\") == 8\nassert solution(\"WED\") == 8\n"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('SUN') == 1\nassert solution('Sat') == 7\nassert solution('SUN') == 7\nassert solution('SUN') == 7\nassert solution('SUN') == 7\n"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"Sat\"), 1"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"SUN\") == \"4\"\nassert solution(\"Mon\") == \"3\"\nassert solution(\"TUE\") == \"4\"\nassert solution(\"WED\") == \"2\"\nassert solution(\"THU\") == \"1\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2 10 20\", \"2 10 20\"]) == \"30 50 90 170 330 650 1290 2570 5130 10250\"\nassert solution([\"2 10 20\", \"2 2 10\", \"2 2 5\", \"2 5 3\"]) == \"30 50 90 170 330 650 1290 2570 5130 10250\"\nassert solution([\"2 10 20\", \"2 10 20\", \"2 2 3\"]) == \"30 50 90 170 330 650 1290 2570 5130 10250\"\nassert solution([\"2 10 20\", \"2 10 20\", \"2 10 20\", \"2 10 20\"]) == \"30 50 90 170 330 650 1290 2570 5130 10250\"\nassert solution([\"2 10 20\", \"2 10 20\", \"2 2 3\", \"2 3 4\"]) == \"30 50 90 170 330 650 1290 2570 5130 10250\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 10 20\") == \"30\"\nassert solution(\"2 10 20\") == \"50\"\nassert solution(\"2 10 20\") == \"90\"\nassert solution(\"2 10 20\") == \"170\"\nassert solution(\"2 10 20\") == \"330\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(sys.stdin.readline()) == '30'\n\"\"\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 10 20\") == \"30 50 90\"\nassert solution(\"2 10 20 0\") == \"0 0 0\"\nassert solution(\"2 10 20 1\") == \"0 0 0\"\nassert solution(\"2 10 20 2\") == \"0 0 0\"\nassert solution(\"2 10 20 3\") == \"0 0 0\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 10 20\") == \"30\"\nassert solution(\"2 10 20\") == \"50\"\nassert solution(\"2 10 20\") == \"90\"\nassert solution(\"2 10 20\") == \"170\"\nassert solution(\"2 10 20\") == \"330\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"30 50 90 170 330 650 1290\""
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution( \"2 10 20\" ) == \"30\"\nassert solution( \"2 10 20\" ) == \"50\"\nassert solution( \"2 10 20\" ) == \"90\"\nassert solution( \"2 10 20\" ) == \"170\"\nassert solution( \"2 10 20\" ) == \"330\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3050'\nassert solution(stdin) == '5050'\nassert solution(stdin) == '9050'\nassert solution(stdin) == '17000'\nassert solution(stdin) == '31000'\n"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 10 20\") == \"30 50 90 170 330 650 1290\"\nassert solution(\"2 10 10\") == \"40 30 50 90 170 330 650 1290\"\nassert solution(\"2 1 1\") == \"10\"\nassert solution(\"2 1 2\") == \"10\"\nassert solution(\"1 1 1\") == \"10\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10 2 2 5 2') == '50'\nassert solution('10 3 3 3 3 3') == '90'\nassert solution('10 10 10 10 10 10') == '170'\nassert solution('10 1 1 1 1 1') == '330'\nassert solution('10 1 1 1 1 10') == '650'\n"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5') == '5'\nassert solution('3') == '2'\nassert solution('4') == '0'\nassert solution('3') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"3 6 5 2\"\n    ),\n    \"Error!\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"5\"\n\"\"\""
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5\"\n\nPrint the solution\n\n-----\nSolution: \n"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input() == \"5\") == \"5\"\nassert solution(input() == \"3\") == \"4\"\nassert solution(input() == \"3\") == \"0\"\nassert solution(input()) == \"0\""
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 4 5\") == \"4\"\nassert solution(\"2 3 1\") == \"0\"\nassert solution(\"3 1 1\") == \"0\"\nassert solution(\"1 4 4\") == \"0\"\nassert solution(\"1 4 6\") == \"4\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 'NO'\nassert solution(2) == 'YES'\nassert solution(3) == 'NO'\nassert solution(4) == 'YES'\nassert solution(5) == 'YES'\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1,1,1,1) == \"YES\"\nassert solution(2,4,6,10) == \"NO\"\nassert solution(2,4,7,10) == \"NO\"\nassert solution(2,3,5,10) == \"NO\"\nassert solution(2,3,7,10) == \"NO\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, 3, 2, 3, 100, 100, 1000000000) == \"YES\"\nassert solution(5, 3, 2, 3, 100, 100, 1000000000) == \"NO\"\nassert solution(5, 3, 2, 3, 100, 100, 1000000000) == \"NO\"\nassert solution(5, 3, 2, 3, 100, 100, 1000000000) == \"NO\"\nassert solution(5, 3, 2, 3, 100, 100, 1000000000) == \"NO\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nInput\n5 4 5 4 3 2\n\nOutput\n6\n\nInput\n5 3 3 1 1\n\nOutput\n1\n\nInput\n5 3 3 2 1\n\nOutput\n2\n\nInput\n5 2 1 3 2\n\nOutput\n3\n\nInput\n5 2 1 4 2\n\nOutput\n3\n\nInput\n5 1 4 2 3 2\n\nOutput\n2\n\nInput\n5 1 4 2 3 2\n\nOutput\n1\n\nInput\n5 1 4 2 3 2\n\nOutput\n5\n\nInput\n5 1 4 2 3 2\n\nOutput\n0\n\nInput\n5 2 1 2 3 2\n\nOutput\n2\n\nInput\n5 3 1 4 2 3 2\n\nOutput\n3\n\nInput\n5 3 1 4 3 2\n\nOutput\n2\n\nInput\n5 1 4 2 3 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n4\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 2 1 3 2 2\n\nOutput\n0\n\nInput\n5 2 1 4 3 2\n\nOutput\n2\n\nInput\n5 2 1 4 2 3 2\n\nOutput\n3\n\nInput\n5 2 1 4 2 3 2\n\nOutput\n1\n\nInput\n5 1 4 2 3 2\n\nOutput\n2\n\nInput\n5 1 4 2 3 2\n\nOutput\n0\n\nInput\n5 2 1 4 3 2\n\nOutput\n1\n\nInput\n5 1 4 2 3 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n2\n\nInput\n5 1 4 3 2 2\n\nOutput\n3\n\nInput\n5 1 4 3 2 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n2\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n2\n\nInput\n5 1 4 3 2 2\n\nOutput\n2\n\nInput\n5 1 4 3 2 2\n\nOutput\n3\n\nInput\n5 1 4 3 2 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n2\n\nInput\n5 1 4 3 2 2\n\nOutput\n3\n\nInput\n5 1 4 3 2 2\n\nOutput\n2\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n3\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n3\n\nInput\n5 1 4 3 2 2\n\nOutput\n3\n\nInput\n5 1 4 3 2 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n2\n\nInput\n5 1 4 3 2 2\n\nOutput\n3\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n2\n\nInput\n5 1 4 3 2 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n2\n\nInput\n5 1 4 3 2 2\n\nOutput\n3\n\nInput\n5 1 4 3 2 2\n\nOutput\n2\n\nInput\n5 1 4 3 2 2\n\nOutput\n1\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n2\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput\n0\n\nInput\n5 1 4 3 2 2\n\nOutput"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\n\n\"\"\""
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"4\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"4\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n\n\n\n\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.i = 0\n        self.t = 0\n        \n    def solve(self, n, m, a):\n        \n        if n == 1:\n            self.t += a\n            return True\n        \n        if n % 2 == 1:\n            self.t += a * m\n            return self.solve(n//2, m, a)\n        \n        if n == 2*m:\n            self.t += a * m\n            return self.solve(n//2, m, a)\n        \n        if self.i > n:\n            self.i = 0\n            self.t += a\n            return False\n        else:\n            if self.i < n:\n                self.i += 1\n                self.t += a\n                return self.solve(n, m, a)\n            else:\n                return False\n        \n        \n    def nTm(self, n, m, a):\n        self.solve(n, m, a)\n        return self.t\n        "
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"4\"\n\n\"\"\""
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '4'\n\n\n-----Constraints-----\n0 < stdin.length <= 200\n1 < k < 10^5\n1 < n <= 106\n1 < a_1 <= k\n\nTime Limit: 1 sec\nMemory Limit: 1GB\n\n-----Usage-----\nThe first line contains an integer $n$ and a positive integer $k$.\n\nThe second line contains $n$ lines of text separated by a single space.\n\nThe third line contains a single integer $a_i$.\n\nThe fourth line contains a single integer $a_i$ for the initial box (i = 1).\n\nInput\n01\n2 3\n\nOutput\n2\n\nExample Input\n01\n\nInput\n01\n5 4 4\n5 2 3 4\n2 3 1 4 1\n\nOutput\n2\n\nExplanation\n\nMaksim has $n$ objects and $m$ boxes, each box has size exactly $k$. Objects are numbered from $1$ to $n$ in order from left to right, the size of the $i$-th object is $a_i$.\n\nMaksim wants to pack his objects into the boxes and he will pack objects by the following algorithm: he takes one of the empty boxes he has, goes from left to right through the objects, and if the $i$-th object fits in the current box (the remaining size of the box is greater than or equal to $a_i$), he puts it in the box, and the remaining size of the box decreases by $a_i$. Otherwise he takes the new empty box and continues the process above. If he has no empty boxes and there is at least one object not in some box then Maksim cannot pack the chosen set of objects.\n\nMaksim wants to know the maximum number of objects he can pack by the algorithm above. To reach this target, he will throw out the leftmost object from the set until the remaining set of objects can be packed in boxes he has. Your task is to say the maximum number of objects Maksim can pack in boxes he has.\n\n-----Constraints-----\n0 < stdin.length <= 200\n1 < k < 10^5\n1 < n <= 106\n1 < a_1 <= k\n\nTime Limit: 1 sec\nMemory Limit: 1GB\n\n-----Usage-----\nThe first line contains an integer $n$ and a positive integer $k$.\n\nThe second line contains $n$ lines of text separated by a single space.\n\nThe third line contains a single integer $a_i$.\n\nThe fourth line contains a single integer $a_i$ for the initial box (i = 1).\n\nInput\n01\n2 3\n5 4 2 3 2\n2 3 1 4 1\n4 1 2 1 2\n\nOutput\n2\n\nExample Input\n01\n\nInput\n01\n5 4 4\n5 2 3 4\n2 3 1 4 1\n4 1 2 1 2\n4 2 1 2 1\n\nOutput\n2\n\nExplanation\n\nMaksim has $n$ objects and $m$ boxes, each box has size exactly $k$. Objects are numbered from $1$ to $n$ in order from left to right, the size of the $i$-th object is $a_i$.\n\nMaksim wants to pack his objects into the boxes and he will pack objects by the following algorithm: he takes one of the empty boxes he has, goes from left to right through the objects, and if the $i$-th object fits in the current box (the remaining size of the box is greater than or equal to $a_i$), he puts it in the box, and the remaining size of the box decreases by $a_i$. Otherwise he takes the new empty box and continues the process above. If he has no empty boxes and there is at least one object not in some box then Maksim cannot pack the chosen set of objects.\n\nMaksim wants to know the maximum number of objects he can pack by the algorithm above. To reach this target, he will throw out the leftmost object from the set until the remaining set of objects can be packed in boxes he has. The answer is $4$.\n\n-----Constraints-----\n0 < stdin.length <= 200\n1 < k < 10^5\n1 < n <= 106\n1 < a_1 <= k\n\nTime Limit: 1 sec\nMemory Limit: 1GB\n\n-----Usage-----\nThe first line contains an integer $n$ and a positive integer $k$.\n\nThe second line contains $n$ lines of text separated by a single space.\n\nThe third line contains a single integer $a_i$.\n\nThe fourth line contains a single integer $a_i$ for the initial box (i = 1).\n\nInput\n01\n2 3\n5 4 2 3 2\n2 3 1 4 1\n4 1 2 1 2\n4 2 1 2 1\n\nOutput\n2\n\nExample Input\n01\n\nInput\n01\n5 4 4\n5 2 3 4\n2 3 1 4 1\n4 1 2 1 2\n4 2 1 2 1\n4 3 1 2 1\n\nOutput\n2\n\nExplanation\n\nMaksim has $n$ objects and $m$ boxes, each box has size exactly $k$. Objects are numbered from $1$ to $n$ in order from left to right, the size of the $i$-th object is $a_i$.\n\nMaksim wants to pack his objects into the boxes and he will pack objects by the following algorithm: he takes one of the empty boxes he has, goes from left to right through the objects, and if the $i$-th object fits in the current box (the remaining size of the box is greater than or equal to $a_i$), he puts it in the box, and the remaining size of the box decreases by $a_i$. Otherwise he takes the new empty box"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 3 3 3 3 3 3\") == \"4\"\nassert solution(\"2 3 3 3 3 3 3\") == \"3\"\nassert solution(\"1 3 3 3 3 3 3\") == \"3\"\nassert solution(\"1 3 3 3 3 3 3\") == \"3\"\nassert solution(\"2 3 3 3 3 3 3\") == \"4\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"10 3\", \"abacaba\"]) == \"12\"\nassert solution([\"10 4\", \"abacaba\"]) == \"21\"\nassert solution([\"10 1\", \"a\"]) == \"0\"\nassert solution([\"10 1\", \"a b\"]) == \"0\"\nassert solution([\"10 3\", \"abacaba\"]) == \"21\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('aaabbb') == \"10\"\nassert solution('aabaa') == \"13\"\nassert solution('a') == \"0\"\nassert solution('ab') == \"0\"\nassert solution('abc') == \"0\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('abacaba') == '2'\nassert solution('a b') == '1'\nassert solution('aaaaaaa') == '0'\nassert solution('bb') == '0'\nassert solution('a') == '0'\n"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"aaaaaaa\") == 12\nassert solution(\"b\") == 0\nassert solution(\"f\") == 0\nassert solution(\"d\") == 0\nassert solution(\"s\") == 0\n"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"f a d\") == \"12\"\nassert solution(\"aaaaaaa\") == \"21\"\nassert solution(\"b\") == \"0\"\nassert solution(\"abacaba\") == \"0\"\nassert solution(\"ab\") == \"0\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"21\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '12'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"12\"\n\"\"\""
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"12\"\nassert solution(\"a b\") == \"21\"\nassert solution(\"aaaaaaa\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 10\") == 12\nassert solution(\"4 5\") == 21\nassert solution(\"2\") == 0\n\n\n-----Constraints-----\n\n1 <= n <= 2^{10}\n1 <= k <= 26\n\nTime Limit: 1 sec\nSpace Limit: 1M\n\n\n-----Alternatives-----\n\nBrute force approach.\n\nAlgorithm\n  Find all substrings of string $s$ from index $i$ till $i$ is reached.\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"14\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '4'\nassert solution('5') == '-1'\nassert solution('6') == '6'\nassert solution('10') == '2'\n"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1') == '2'\nassert solution('-1') == '2'\nassert solution('1000000000') == '2'\nassert solution('-1000000000 -1000000000 -1000000000') == '2'\nassert solution('1 -1000000000 1 -1000000000 1 -1000000000') == '2'\n"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 7 -1 -2 -3 -1 -2\") == \"2\"\nassert solution(\"-1 -2 -1 -3 -1 -2\") == \"-2\"\nassert solution(\"-1 -2 -1 -3 -1 -2\") == \"-4\"\nassert solution(\"1\") == \"0\"\nassert solution(\"4 -1 -2 -3 -1 -2\") == \"0\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Test Case-----\nInput\n1\n5\n3 2 3 -1 -2\n5\n1 -1000000000 1 -1000000000 1 -1000000000\n\nOutput\n2\n-1\n6\n-2999999997\n"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"5 6 1 -1 2 -2 -1 -1 -2\") == \"-1\"\nassert solution(\n    \"5 6 1 -1 2 -2 -1 -1 -2\") == \"7\"\nassert solution(\n    \"5 6 1 -1 2 -2 -1 -1 -2\") == \"6\"\nassert solution(\n    \"5 6 1 -1 2 -2 -1 -1 -2\") == \"6\"\nassert solution(\n    \"5 6 1 -1 2 -2 -1 -1 -2\") == \"6\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\") == \"2\\n-1\\n-2\\n-1\\n2\\n-2\\n4\\n-1\\n1\\n-2\\n-2\\n2\\n-2\\n-1\\n-1\\n1\\n-2\\n1\\n1\\n-2\\n-1\\n-1\\n-1\\n-1\\n1\\n1\\n-1\\n-1\\n-1\\n1\\n-2\\n-1\\n-1\\n-1\\n-1\\n-1\\n-2\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 4\") == \"1 2\"\nassert solution(\"4 6\") == \"1 1\"\nassert solution(\"8 9\") == \"4 4\"\nassert solution(\"8 7\") == \"6 1\"\nassert solution(\"8 5\") == \"3 2\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '3 5'\nassert solution(input()) == '4 1'\nassert solution(input()) == '3 2'\nassert solution(input()) == '3 5'\nassert solution(input()) == '3 3'\n"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3 5'\nassert solution(stdin) == '3 2'\nassert solution(stdin) == '3 1'\nassert solution(stdin) == '3 3'\nassert solution(stdin) == '3 4'\n"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3 5\"\nassert solution(stdin) == \"4 1\"\nassert solution(stdin) == \"8 5\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 3\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3,5) == 5\nassert solution(4,6) == 3\nassert solution(8,9) == 2\nassert solution(8,6) == 1\nassert solution(8,5) == 4\n"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 6') == '3 5'\nassert solution('4 6') == '4 1'\nassert solution('8 9') == '3 2'\nassert solution('8 9') == '1 2'\nassert solution('8 9') == '1 3'\n"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n5 3\\n3 3\\n3 5\\n5 3\\n3 3\\n3 3\") == '3 5\\n2 1\\n3 2\\n3 4'\nassert solution(\"4 6\\n1 2\\n2 3\\n1 6\\n1 5\\n3 4\\n3 5\\n4 5\\n2 7\\n5 8\\n6 9\\n5 9\\n8 7\\n9 6\\n9 1\") == '3 4\\n2 1\\n1 2\\n1 3\\n1 4\\n2 5\\n3 5\\n3 6\\n3 7\\n3 8\\n3 9\\n5 10\\n6 11\\n6 12\\n6 13\\n6 14\\n6 15\\n5 16\\n7 17\\n8 18\\n9 19\\n10 20\\n11 21\\n12 22\\n13 23\\n14 24\\n15 25\\n16 26\\n17 27\\n18 28\\n19 29\\n20 30\\n21 31\\n22 32\\n23 33\\n24 34\\n25 35\\n26 36\\n27 37\\n28 38\\n29 39\\n30 40\\n31 41\\n32 42\\n33 43\\n34 44\\n35 45\\n36 46\\n37 47\\n38 48\\n39 49\\n40 50\\n41 51\\n42 52\\n43 53\\n44 54\\n45 55\\n46 56\\n47 57\\n48 58\\n49 59\\n50 60\\n51 61\\n52 62\\n53 63\\n54 64\\n55 65\\n56 66\\n57 67\\n58 68\\n59 69\\n60 70\\n61 71\\n62 72\\n63 73\\n64 74\\n65 75\\n66 76\\n67 77\\n68 78\\n69 79\\n70 80\\n71 81\\n72 82\\n73 83\\n74 84\\n75 85\\n76 86\\n77 87\\n78 88\\n79 89\\n80 90\\n81 91\\n82 92\\n83 93\\n84 94\\n85 95\\n86 96\\n87 97\\n88 98\\n89 99\\n90 100\\n91 101\\n92 102\\n93 103\\n94 104\\n95 105\\n96 106\\n97 107\\n98 108\\n99 109\\n100 110\\n101 111\\n102 112\\n103 113\\n104 114\\n105 115\\n106 116\\n107 117\\n108 118\\n119 119\\n120 120\\n121 121\\n122 122\\n123 123\\n124 124\\n125 125\\n126 126\\n127 127\\n128 128\\n129 129\\n130 130\\n131 131\\n132 132\\n133 133\\n134 134\\n135 135\\n136 136\\n137 137\\n138 138\\n139 139\\n140 140\\n141 141\\n142 142\\n143 143\\n144 144\\n145 145\\n146 146\\n147 147\\n148 148\\n149 149\\n150 150\\n151 151\\n152 152\\n153 153\\n154 154\\n155 155\\n156 156\\n157 157\\n158 158\\n159 159\\n160 160\\n161 161\\n162 162\\n163 163\\n164 164\\n165 165\\n166 166\\n167 167\\n168 168\\n169 169\\n170 170\\n171 171\\n172 172\\n173 173\\n174 174\\n175 175\\n176 176\\n177 177\\n178 178\\n179 179\\n180 180\\n181 181\\n182 182\\n183 183\\n184 184\\n185 185\\n186 186\\n187 187\\n188 188\\n189 189\\n190 190\\n191 191\\n192 192\\n193 193\\n194 194\\n195 195\\n196 196\\n197 197\\n198 198\\n199 199\\n200 200\\n201 201\\n202 202\\n203 203\\n204 204\\n205 205\\n206 206\\n207 207\\n208 208\\n209 209\\n210 210\\n211 211\\n212 212\\n213 213\\n214 214\\n215 215\\n216 216\\n217 217\\n218 218\\n219 219\\n220 220\\n221 221\\n222 222\\n223 223\\n224 224\\n225 225\\n226 226\\n227 227\\n228 228\\n229 229\\n230 230\\n231 231\\n232 232\\n233 233\\n234 234\\n235 235\\n236 236\\n237 237\\n238 238\\n239 239\\n240 240\\n241 241\\n242 242\\n243 243\\n244 244\\n245 245\\n246 246\\n247 247\\n248 248\\n249 249\\n250 250\\n251 251\\n252 252\\n253 253\\n254 254\\n255 255\\n256 256\\n257 257\\n258 258\\n259 259\\n260 260\\n261 261\\n262 262\\n263 263\\n264 264\\n265 265\\n266 266\\n267 267\\n268 268\\n269 269\\n270 270\\n271 271\\n272 272\\n273 273\\n274 274\\n275 275\\n276 276\\n277 277\\n278 278\\n279 279\\n280 280\\n281 281\\n282 282\\n283"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"4 9\", \"3 4\", \"3 2\", \"1 4\", \"1 3\", \"1 2\", \"2 3\", \"1 5\", \"3 6\"]) == \"4 2\"\nassert solution([\"5 4\", \"5 5\", \"5 6\", \"4 2\", \"3 1\", \"2 4\", \"1 5\", \"2 6\"]) == \"1 2\"\nassert solution([\"5 3\", \"4 1\", \"1 4\", \"1 2\", \"3 5\", \"2 6\", \"5 4\", \"3 6\"]) == \"3 6\"\nassert solution([\"4 1\", \"1 2\", \"1 5\", \"1 3\", \"2 3\", \"3 4\", \"3 5\"]) == \"2 1\"\nassert solution([\"4 3\", \"1 2\", \"2 4\", \"2 3\", \"3 4\", \"4 5\", \"5 6\"]) == \"2 1\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '3 5'\n"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 5\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"3 6\"\nassert solution(stdin) == \"4 1\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 40\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 40\nassert solution(stdin) == 41664916690999888\n\n\"\"\"\n\n\nclass Solution:\n    def solve(self, stdin=None):\n        n, *rows = map(int, stdin.split('\\n'))\n        m, *cols = map(int, stdin.split('\\n'))\n        n -= 2\n        m -= 1\n        matrix = [[0 for _ in range(n)] for _ in range(n)]\n        for row, col, value in zip(rows, cols, map(int, stdin.split('\\n'))):\n            matrix[row - 1][col - 1] = value\n        # print(matrix)\n        visited = [[False for _ in range(n)] for _ in range(n)]\n        directions = [[-1, 0], [0, 1], [1, 0], [0, -1]]\n        # print(directions)\n        def get_moves(row, col):\n            if col < 0 or row < 0 or col >= n or row >= n or matrix[row][col] == 0:\n                return []\n            if visited[row][col] is True:\n                return []\n            moves = []\n            for direction in directions:\n                next_row = row + direction[0]\n                next_col = col + direction[1]\n                if 0 <= next_row < n and 0 <= next_col < n:\n                    if matrix[next_row][next_col] == matrix[row][col]:\n                        if next_row == row and next_col == col:\n                            moves.append(1)\n                        else:\n                            moves.append(matrix[next_row][next_col] + 1)\n            # print(moves)\n            return moves\n\n        ans = 0\n        for row in range(n):\n            for col in range(n):\n                if matrix[row][col] == m:\n                    ans += 1\n                    moves = get_moves(row, col)\n                    if moves:\n                        ans += max(moves)\n        return ans\n"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 40"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\n        [1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1]\n    ]\n) == 40\nInput\n3\n1\n1\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 40\nassert solution(2) == 40\nassert solution(3) == 40\nassert solution(4) == 40\nassert solution(5) == 40\n"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 40\n\n-----Constraints-----\n1 <= t <= 200\n1 <= n <= 5\\cdot10^5\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3,4) == 0\nassert solution(5,4) == 40\nassert solution(5,5) == 0\nassert solution(1,5) == 40\nassert solution(1,1) == 0\n"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 40\n\n\n-----Constraints-----\n1 <= t <= 100\n\n0 <= n <= 10^5\n0 <= i < n\n\n\n-----Time complexity-----\nO(n * t)\n\nO(n * t)\n\n2\n\n-----Submissions-----\n1025\n\n\"\"\"\nclass Solution:\n    def solve(self, n: int, s: int, d: int, x: int) -> int:\n        return 0\n"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 40"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4\") == 40\nassert solution(\"2\") == 40\nassert solution(\"3\") == 40\nassert solution(\"1\") == 0\nassert solution(\"1\") == 0\n"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"4\",\"5\",\"7\",\"6\",\"7\",\"5\",\"4\",\"6\",\"7\"]) == \"1 1 1 2 -1 1 1 3 1 1\"\nassert solution([\"1\",\"2\",\"3\"]) == \"1 1 1 2 -1 1 1 3 1 1\"\nassert solution([\"6\",\"7\",\"6\",\"4\"]) == \"1 1 1 2 -1 1 1 3 1 1\"\nassert solution([\"4\",\"7\",\"7\",\"7\"]) == \"1 1 1 2 -1 1 1 3 1 1\""
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1 1 1 2 -1 1 1 3 1 1'\nassert solution(stdin) == '1 1 1 -1 1 1 3 1 1'\nassert solution(stdin) == -1"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 1 1 1\"\n\n'''\n"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\n'''\n\nclass Solution:\n    def getMinSteps(self, a, b):\n        if len(a)!= len(b):\n            return 0\n        dp = [[float('inf') for _ in range(len(a)+1)] for _ in range(len(b)+1)]\n        for i in range(len(a) + 1):\n            dp[i][i] = 0\n        for j in range(len(b) + 1):\n            dp[0][j] = 0\n        for i in range(1, len(a)+1):\n            for j in range(1, len(b)+1):\n                if a[i-1]!= b[j-1]:\n                    dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j])\n                else:\n                    dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j-1], dp[i-1][j])\n        return dp[-1][-1]\n"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\nExplanation\nGiven array $a$ consisting of $n$ integers, you want to reach the minimum the number of moves required to reach any position $j$ such that $a_j$ has the opposite parity from $a_i$ (i.e. if $a_i$ is odd then $a_j$ has to be even and vice versa).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$), where $a_i$ is the $i$-th element of $a$.\n\n\n-----Output-----\n\nPrint $n$ integers $d_1, d_2, \\dots, d_n$, where $d_i$ is the minimum the number of moves required to reach any position $j$ such that $a_j$ has the opposite parity from $a_i$ (i.e. if $a_i$ is odd then $a_j$ has to be even and vice versa).\n\nNote:\nEach array a_i is guaranteed to be odd.\n\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 8, \"Failed\"\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin=input(),\n    ) == '4 5 7 6 7 5 4 4 6 4'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nn = int(sys.stdin.readline())\na = [int(i) for i in sys.stdin.readline().split()]"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 2 4 5 7 6 7 5 4 4 6 4\") == -1\nassert solution(\"10 2 3 2 6 5 7 5 6 7 5 6 7 5 4 5 5 5 5 5 5 6 5 5\") == -1\nassert solution(\"10 2 3 2 6 7 6 7 5 5\") == 1\nassert solution(\"10 2 3 2 4 5 3 2 4 5\") == -1\nassert solution(\"10 2 3 2 6 5 7 5 6 7 5 6 7 5 4 5 4 5 5 5 5 5 6 5 5\") == -1\n"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\nassert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    '5 6 8 7 9'\n    ) == 'YES'\n    pass\n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == \"YES\"\nassert solution(64) == \"YES\"\nassert solution(32) == \"NO\"\nassert solution(97) == \"YES\"\nassert solution(12345) == \"YES\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n1 <= t <= 10^5\nn <= 10^5\nn <= 10^5\n1 <= a, b, c <= 10^9\n\n1 <= a, b, c <= 10^9\na+b+c <= n\n\n\"\"\"\n\nclass Solution:\n    def solve(self, n: int) -> str:\n        import math\n        c = math.ceil(n ** 0.5)\n        if n == 1:\n            return 'NO'\n        elif n == 2:\n            return 'YES'\n        elif n == 3:\n            return 'YES'\n        elif n == 4:\n            return 'YES'\n        else:\n            return 'YES'\n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"12345\") == \"YES\"\nassert solution(\"2 4 7 3\") == \"NO\"\nassert solution(\"2 5 7 3\") == \"NO\"\nassert solution(\"3\") == \"NO\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 'YES'\n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(int(input())) == \"YES\" or \"NO\"\nassert solution(int(input())) == \"YES\"\nassert solution(int(input())) == \"YES\"\nassert solution(int(input())) == \"NO\"\n\n-----Constraints-----\n1 <= t <= 10^4\n\n1 <= n <= 10^6\n\n------Submissions-----\nn = 5\nt = 5\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----\n5\n64\n32\n97\n2\n12345\n\n------Sample Execution-----"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == \"YES\"\nassert solution(64) == \"YES\"\nassert solution(32) == \"NO\"\nassert solution(97) == \"NO\"\nassert solution(12345) == \"YES\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2\", \"3\", \"4\", \"5\", \"6\"]) == \"YES\"\nassert solution([\"4\", \"1\", \"4\", \"3\", \"2\", \"1\"]) == \"YES\"\nassert solution([\"3\", \"2\", \"3\", \"4\", \"2\", \"3\"]) == \"YES\"\nassert solution([\"2\", \"1\"]) == \"NO\"\nassert solution([\"4\", \"2\", \"1\", \"2\", \"1\", \"2\"]) == \"NO\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\", \"Should return YES\"\nassert solution(stdin) == \"NO\", \"Should return NO\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 5\n\n\nOutput\n2\nabba\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(s=\"abba\") == \"bab\"\nassert solution(s=\"ababab\") == \"bab\"\nassert solution(s=\"aa\") == \"aa\"\nassert solution(s=\"ababab\") == \"ba\"\nassert solution(s=\"ba\") == \"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == 'abba'\nassert solution(stdin) == 'ba'"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"aabb\") == \"abb\"\nassert solution(\"aabbab\") == \"abbab\"\nassert solution(\"abababbbb\") == \"abbababb\"\nassert solution(\"aababbbabababab\") == \"abbababbababab\"\nassert solution(\"aabbbbbab\") == \"abbbabbbab\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abb\") == \"ba\"\nassert solution(\"ababab\") == \"ba\"\nassert solution(\"abba\") == \"ba\"\nassert solution(\"ab\") == \"ba\"\nassert solution(\"bbaa\") == \"ba\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('aabbbb') == 'aabbbb'\nassert solution('aabbaaaa') == 'aabbaaaa'\nassert solution('abbaaaa') == 'abbaaaa'\nassert solution('bbba') == 'ba'\nassert solution('ababbaaaa') == 'ababbaaaa'\n"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('bbbb') == 'ba'\nassert solution('ababab') == 'aab'\nassert solution('aa') == 'ba'\nassert solution('aaabab') == 'ba'\nassert solution('aaabababab') == 'ba'\n"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"abba\"\n\nassert solution(stdin) == \"ababab\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"abba\"\nassert solution(stdin) == \"ababab\"\nassert solution(stdin) == \"abbabbbba\"\nassert solution(stdin) == \"ababababbbbbbbbaa\"\nassert solution(stdin) == \"ababababbbbbbbbbbbbaa\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"ababab\"\nassert solution(stdin) == \"abba\"\nassert solution(stdin) == \"aabab\"\nassert solution(stdin) == \"ba\"\nassert solution(stdin) == \"ab\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '9'\nassert solution(stdin) == '9'\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 15\n\nassert solution(stdin) == 9\n\nassert solution(stdin) == 5\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 2"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"15\"\n\n-----Goals-----\n\nI didn't use a case-sensitivity algorithm. I just noticed that the problem is simple, and I am not sure of any better solution.\n\nI looked into whether this problem can be solved in obvious ways. I can only do one case-sensitivity fix on the question.\n\n\"when we are going to visit all key points, and what is the total distance we walk?\" I will answer:"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"15\"\n\"\"\"\n\nimport math\nfrom collections import defaultdict\n\nn = int(input())\nd = defaultdict(int)\n\nfor i in range(n):\n    x,y = list(map(int,input().split()))\n    d[x]-=y\n    d[y]-=x\n    print(d[x],d[y])\n    "
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '15'\nassert solution(stdin) == '9'\n"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '9'\nassert solution(stdin) == '15'\n\n\n\"\"\""
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"15\"\n\n-----Constraints-----\n0\n0\n2\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"15\"\n\nassert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 1 2 1 1 1 1 2 2 2 2') == '9'\nassert solution('2 1 2 1 1 2 2 2 2 2') == '9'\nassert solution('2 1 1 1 1 1 1 2 2 2') == '9'\nassert solution('2 1 0 1 1 1 1 2 2 2') == '9'\nassert solution('2 0 1 1 1 1 1 2 2 2') == '9'\n"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"15\"\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n\n---------------------------\nExplanation\nIn the sample input, the correct choice is '2'.\n\nThe last example has both 3 and 1 as wrong choices.\n\n'''\nimport sys\n"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1\", \"2\"]) == \"2\"\nassert solution([\"1\", \"3\"]) == \"3\"\nassert solution([\"1\", \"4\"]) == \"1\"\nassert solution([\"1\", \"5\"]) == \"2\"\nassert solution([\"1\", \"6\"]) == \"3\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, 1, 1, 1) == 1\nassert solution(2, 2, 3, 2) == 2\nassert solution(3, 1, 2, 1) == 2\nassert solution(3, 3, 2, 1) == 2\nassert solution(4, 1, 3, 2) == 2\n"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '2'\nassert solution(input('Question 3')) == '2'\nassert solution(input('Question 4')) == '2'\nassert solution(input('Question 5')) == '2'\nassert solution(input('Question 6')) == '2'\n"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 2\n1 2\n3 5\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n3 2\n1 2\n3 5\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n4 3\n1 2\n3 5\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n4 4\n1 2\n3 5\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n4 3\n1 2\n3 5\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n\n\n\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\n\nn = int(input())\n\na = defaultdict(int)\nb = defaultdict(int)\n\nfor i in range(n):\n    a[input()] += 1\n\nfor i in range(3, n+1):\n    b[input()] += 1\n\nfor k in a.keys():\n    if a[k]!= b[k]:\n        print(k)\n        break\n"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 3\nassert solution(5) == 1\nassert solution(10) == 1\nassert solution(100) == 1\nassert solution(1000) == 1\n"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"There is an error in the solution\"\nassert abs(max(map(lambda a: abs(a), [0.8, 1, 1.2]))) <= 10 ** -6, \"The maximum volume of a rectangular cuboid is 1\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '1.000000000000'\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.result = 0\n    \n    def __str__(self):\n        return str(self.result)\n    \n    def get_volume(self, L):\n        return (L**3 - L**2)**.5\n    \n    def solution(self, L):\n        if L == 0:\n            self.result = 0\n            return '1.000000000000'\n        \n        for i in range(1, 10):\n            self.result += self.get_volume(L/i)\n            if self.result > L:\n                return str(self.result)"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin),'solution() failed; expected: \\'18.0\\''\n"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1.000000000000\"\n-----Bonus-----\nTo help you debug your solution, you need to output your solution to the console and also keep track of the correct answer.\nFor example, when the radius of a cuboid is 0.8, your solution is \"1.000000000000\".\nThe correct answer is \"1,1,1\".\nIf the radius of a cuboid is 1, your solution is \"1,1,1\".\nYour solution is incorrect as the correct answer is \"1,1,1\".\nWrite a function solution_by_box(stdin: str) that returns the volume of a cuboid whose dimensions are 0.8 and 1.2.\nYour function should take as input the input to standard input and return the volume of the cuboid.\nYour function should keep track of the volume for each iteration of the loop.\n\n-----Constraints-----\n - 1 \u2264 stdin \u2264 1000\n - 1 \u2264 stdin \u2264 2000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nL\n\n-----Output-----\nPrint the volume of the cuboid whose dimensions are 0.8 and 1.2.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-6}.\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n0.09\n\nFor example, a cuboid whose dimensions are 0.8, 1, and 1.2 has a volume of 0.98.\nYour solution is correct.\n\n-----Bonus-----\nTo help you debug your solution, you need to output your solution to the console and also keep track of the correct answer.\nFor example, when the radius of a cuboid is 0.8, your solution is \"0.09\".\nThe correct answer is \"0,0,0\".\nYour solution is incorrect as the correct answer is \"0,0,0\".\nWrite a function solution_by_box(stdin: str) that returns the volume of a cuboid whose dimensions are 0.8 and 1.2.\nYour function should take as input the input to standard input and return the volume of the cuboid.\nYour function should keep track of the volume for each iteration of the loop.\n\n-----Constraints-----\n - 1 \u2264 stdin \u2264 1000\n - 1 \u2264 stdin \u2264 2000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nL\n\n-----Output-----\nPrint the volume of the cuboid whose dimensions are 0.8 and 1.2.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-6}.\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n0.09\n\nFor example, a cuboid whose dimensions are 0.8, 1, and 1.2 has a volume of 0.98.\nYour solution is correct.\n\n-----Bonus-----\nTo help you debug your solution, you need to output your solution to the console and also keep track of the correct answer.\nFor example, when the radius of a cuboid is 0.8, your solution is \"0.09\".\nThe correct answer is \"0,0,0\".\nYour solution is incorrect as the correct answer is \"0,0,0\".\nWrite a function solution_by_box(stdin: str) that returns the volume of a cuboid whose dimensions are 0.8 and 1.2.\nYour function should take as input the input to standard input and return the volume of the cuboid.\nYour function should keep track of the volume for each iteration of the loop.\n\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '1.000000000000'"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    f.readlines()\n) == \"1.000000000000\", \"The output is not correct\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0.5) == 1.5\nassert solution(1.4) == 1\nassert solution(2.7) == 2\nassert solution(4.8) == 2\nassert solution(5) == 3.6\n"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"A+B\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\")\") == \"\")\nassert solution(\"())\") == \"()\"\nassert solution(\"(\") == \"(())\"\nassert solution(\")()\") == \"()()\"\nassert solution(\"(())\") == \"()()()\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"A+B\"\nassert solution(\"3\") == \"A+B\"\nassert solution(\"4\") == \"A+B\"\nassert solution(\"5\") == \"A+B\""
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"Hello World\"\nassert solution(\"6\") == \"A+B\"\nassert solution(\"4\") == \"A+B\"\nassert solution(\"0\") == \"A+B\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Hello World\"\nassert solution(stdin) == \"A+B\"\nassert solution(stdin) == \"A+B\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'Hello World'\n"
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 'Hello World'\nassert solution(2) == 'A+B'\n\nTest 1:\n"
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"Hello World\", \"Should print Hello World\"\nassert solution(\"6\") == \"A+B\", \"Should print A+B\"\nassert solution(\"7\") == \"A+B\", \"Should print A+B\"\nassert solution(\"8\") == \"A+B\", \"Should print A+B\"\nassert solution(\"9\") == \"A+B\", \"Should print A+B\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 'Hello World', 'Passed!'\nassert solution(2) == 'A+B', 'Passed!'\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"A+B\"\n\n\nassert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"A+B\"\n\nassert solution(\"1\") == \"Hello World\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3') == '3333'\nassert solution('2') == '2222'\nassert solution('1') == '1'\nassert solution('4') == '2222'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2') == '22'\nassert solution('4') == '3333'\n"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"4\", \"3\"]) == \"3333\"\nassert solution([\"3\", \"5\", \"4\", \"1\"]) == \"3333\"\nassert solution([\"2\", \"1\", \"5\", \"3\", \"1\"]) == \"3333\"\nassert solution([\"1\", \"2\", \"1\", \"1\", \"1\"]) == \"3333\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"3333\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"11\") == \"3333\"\nassert solution(\"22\") == \"3333\"\nassert solution(\"3333\") == \"3333\"\nassert solution(\"15\") == \"3333\"\nassert solution(\"1555\") == \"3333\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3333'\nassert solution(stdin) == '444'"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3333\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('12345') == '1'\nassert solution('110') == '3'\nassert solution('2234') == '1'\nassert solution('1111') == '4'\nassert solution('2222') == '2'\n"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['1','1','1','1']) == '333'\nassert solution(['4','3','3']) == '3333'\nassert solution(['4','3','2']) == '3333'\nassert solution(['1','3']) == '3333'\nassert solution(['1','2']) == '3333'\n"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('666') == '333'\nassert solution('6666') == '555'\nassert solution('8888') == '1101'\nassert solution('6666666') == '111'\nassert solution('4666666') == '11'\n"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('dd') == '3333'\nassert solution('bb') == '3333'\nassert solution('aabb') == 'aabb'\nassert solution('bbbb') == 'aabb'\nassert solution('bbbbb') == 'bbbbb'\n"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"b\", \"a\"]) == \"a\"\nassert solution([\"a\", \"b\"]) == \"b\"\nassert solution([\"c\", \"b\"]) == \"b\"\nassert solution([\"c\", \"a\"]) == \"a\"\nassert solution([\"d\", \"b\"]) == \"b\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'b'\nassert solution(input()) == 'b'\nassert solution(input()) == 'c'\nassert solution(input()) == 'a'\nassert solution(input()) == 'a'\n"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"a\") == \"b\", \"Test case 1 failed\"\n\nassert solution(\"a\") == \"c\", \"Test case 2 failed\"\n\nassert solution(\"a\") == \"d\", \"Test case 3 failed\"\n\nassert solution(\"a\") == \"e\", \"Test case 4 failed\"\n\nassert solution(\"a\") == \"f\", \"Test case 5 failed\""
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"b\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"b\", \"Failed on sample input.\"\nassert solution(\"c\") == \"c\", \"Failed on sample input.\"\nassert solution(\"d\") == \"a\", \"Failed on sample input.\"\nassert solution(\"z\") == \"z\", \"Failed on sample input.\"\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 'b'\n\"\"\"\nimport unittest"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"b\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"b\", \"Test failed\"\nassert solution(\"ab\") == \"a\", \"Test failed\"\nassert solution(\"aaaa\") == \"b\", \"Test failed\"\nassert solution(\"bbb\") == \"a\", \"Test failed\"\nassert solution(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"a\", \"b\", \"c\"]) == \"c\"\nassert solution([\"a\", \"z\", \"z\"]) == \"z\"\nassert solution([\"c\", \"c\", \"c\", \"c\", \"c\"]) == \"c\"\nassert solution([\"a\", \"b\", \"c\", \"c\"]) == \"c\"\nassert solution([\"z\", \"z\", \"z\"]) == \"z\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"oder atc\",\n    \"tac\") == \"atcoder\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nassert solution(\"\"\"oder atc \"\"\") == \"atcoder\"\nassert solution(\"\"\"oder atc \"\"\") == \"atcoder\"\nassert solution(\"\"\"oder atc \"\"\") == \"\"\nassert solution(\"\"\"oder atc \"\"\") == \"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'atcoder', \"sample_test_1 failed\"\nassert solution(stdin) == 'atcoder', \"sample_test_2 failed\"\nassert solution(stdin) == 'atcoder', \"sample_test_3 failed\"\nassert solution(stdin) == 'atcoder', \"sample_test_4 failed\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abba\") == \"aabb\"\nassert solution(\"ba\") == \"aab\"\nassert solution(\"aabb\") == \"aabb\"\nassert solution(\"dog\") == \"dgg\"\nassert solution(\"dogdog\") == \"dggd\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"tacocatc\", \"tacocatc\") == \"atc\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"atcoder\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nassert solution(\"tatc\") == \"tacocat\"\nassert solution(\"tacocatatc\") == \"tacocatatc\"\nassert solution(\"tacocatat\") == \"tacocatat\"\nassert solution(\"tacocatatc\") == \"tacocatat\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(''), \"Empty String\"\nassert solution('abc'), 'abc'\nassert solution('a'), 'a'\nassert solution('aabb'), 'aabb'\nassert solution('aab'), 'aab'\n"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nassert solution(\"oder atcoder\") == \"atc\"\nassert solution(\"TACocat\") == \"TAC\"\nassert solution(\"TACCAT\") == \"TAC\"\nassert solution(\"TACA\") == \"TAC\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution == 0\n"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 4 6 3\") == \"1000000\"\n\nassert solution(\"6 7 2 1\") == \"1000000\"\n\nassert solution(\"2 6 1 4 5\") == \"1000000\"\n\nassert solution(\"1 10000000\") == \"1000000\"\n\nassert solution(\"2 3 2 1\") == \"1000000\""
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 12\nassert solution(stdin) == 17\nassert solution(stdin) == 40\n"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 0\n"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1,5,7,8,2,5,6,3,7,8,4,6,8,8,2,7,8,4,6,7,8,8,8,8,8,8\") == \"0\""
    },
    {
        "number": 4446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\n\"\"\""
    },
    {
        "number": 4446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 4446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 8\n'''"
    },
    {
        "number": 4446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 1 100 99') == '5'\nassert solution('7 4 2 1') == '5'\nassert solution('1 3 5 4 2 7 6') == '6'\nassert solution('1 1 100 99') == '5'\n"
    },
    {
        "number": 4446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution == 4\n"
    },
    {
        "number": 4446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\n'''"
    },
    {
        "number": 4446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 4446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n'''"
    },
    {
        "number": 4447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"0\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"3 2 0 6 10 12\"\nassert solution(inp) == \"3 2 0 7 10 14\"\nassert solution(inp) == \"3 2 0 7 10 14\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"3 2\"\nassert solution(inp) == \"0 0 0 7 14\"\nassert solution(inp) == \"0 1 2 3\"\nassert solution(inp) == \"0 1 2 3\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"10\""
    },
    {
        "number": 4447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0,3,0,0) == 0\nassert solution(1,2,0,0) == 2\nassert solution(1,3,1,3) == 1\nassert solution(2,3,2,3) == 0\nassert solution(2,3,1,1) == 0\n"
    },
    {
        "number": 4447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 10 8 5 3 9') == '3'\nassert solution('2 10 8 5 3 9') == '3 2'\nassert solution('2 10 8 5 3 9') == '3 2 3'\nassert solution('2 10 8 5 3 9') == '3 2 3 4'\nassert solution('2 10 8 5 3 9') == '3 2 3 4 6'\n"
    },
    {
        "number": 4447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3, \"3\"\nassert solution(stdin) == \"3\", \"1\"\nassert solution(stdin) == \"3\", \"2\"\nassert solution(stdin) == \"3\", \"3\"\nassert solution(stdin) == \"3\", \"4\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(a) == '0'\n"
    },
    {
        "number": 4447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(map(int, input().split())) == 3\nassert solution(map(int, input().split())) == 1\n"
    },
    {
        "number": 4447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 6\nassert solution(stdin) == 7\nassert solution(stdin) == 14\n"
    },
    {
        "number": 4448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2 3 2 0 2 3') == '10'\nassert solution('2 2 2 2 2 2') == '13'\nassert solution
    },
    {
        "number": 4448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1 3 2\") == 8\nassert solution(\"5 3\") == 15\nassert solution(\"2 4\") == 8\nassert solution(\"3 3\") == 15\nassert solution(\"4 2\") == 8\n"
    },
    {
        "number": 4448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 8\n"
    },
    {
        "number": 4448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution == 8\n'''\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nmatrix = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    matrix.append(list(map(int, line)))"
    },
    {
        "number": 4448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 0 2 0\") == \"8\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"4 4\") == \"4\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 20\n\"\"\""
    },
    {
        "number": 4448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 3') == '8'\nassert solution('5 3 1 2 2') == '2'\nassert solution('5 3 1 2 2 2') == '2'\nassert solution('5 3 1 2 2 2 3') == '2'\nassert solution('5 3 1 2 2 2 3 4') == '2'\n"
    },
    {
        "number": 4448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(in_: \"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n2 5\\n3 3\\n1 5\\n"
    },
    {
        "number": 4448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '8'\n"
    },
    {
        "number": 4448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '8'\n"
    },
    {
        "number": 4449,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 'YES'\n"
    },
    {
        "number": 4449,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"1 1 10 10\") == \"YES\"\nassert solution(\"2\") == \"NO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\", \"1 1 10 10\") == \"YES\"\nassert solution(\"5\", \"1 1 1 1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 4449,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\" or solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 4449,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4449,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1 10 10\") == \"YES\"\nassert solution(\"1 1 1 10 1 1 1 1 1 1\") == \"NO\"\n\n--------------------------------------------------------------------------------\n5\n1\n10 10\n1 1 10 1 10 1 1 1 1 1 1\n10\n1\n1\n10\n2\n10\n2 1 10 5 1 1 1 1 1 1\n10\n1 1 1 1 1 1 1 1 1\n10\n1 1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10\n\nOutput\nYES\nNO\nNO\nYES\nYES\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4449,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 3 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\") == \"3\"\nassert solution(\"2 3 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n1 6 4\\n2 3 2\\n3 4 5\\n5 1 8\\n6 5 10\") == \"9\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 4450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n5 1"
    },
    {
        "number": 4450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"false\""
    },
    {
        "number": 4450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 17\n\nclass Solution:\n    # @lc code=start\n    def shortestPath(self, g: List[List[int]], s: int, f: int, x: int, y: int) -> int:\n        def dfs(cur_x, cur_y, cur_d):\n            if cur_d == -1:\n                return cur_x, cur_y\n            elif cur_d == 0:\n                return cur_x, cur_y - 1\n            else:\n                cur_d = cur_d - 1\n                cur_x, cur_y = dfs(cur_x + 1, cur_y, cur_d)\n                cur_x, cur_y = dfs(cur_x, cur_y + 1, cur_d)\n                return cur_x, cur_y\n        \n        return dfs(x, y, g[s][x][y])[1]\n    \n    def shortestPath(self, g: List[List[int]], s: int, f: int, x: int, y: int) -> int:\n        def dfs(cur_x, cur_y, cur_d, visited):\n            if cur_d == -1:\n                return cur_x, cur_y\n            elif cur_d == 0:\n                return cur_x, cur_y - 1\n            else:\n                cur_d = cur_d - 1\n                cur_x, cur_y = dfs(cur_x + 1, cur_y, cur_d, visited)\n                cur_x, cur_y = dfs(cur_x, cur_y + 1, cur_d, visited)\n                return cur_x, cur_y\n        \n        return dfs(x, y, g[s][x][y], [0 for i in range(f + 1)])[1]\n    \n    def shortestPath(self, g: List[List[int]], s: int, f: int, x: int, y: int) -> int:\n        def dfs(cur_x, cur_y, cur_d, visited):\n            if cur_d == -1:\n                return cur_x, cur_y\n            elif cur_d == 0:\n                return cur_x, cur_y - 1\n            else:\n                cur_d = cur_d - 1\n                cur_x, cur_y = dfs(cur_x + 1, cur_y, cur_d, visited)\n                cur_x, cur_y = dfs(cur_x, cur_y + 1, cur_d, visited)\n                return cur_x, cur_y\n        \n        return dfs(x, y, g[s][x][y], [0 for i in range(f + 1)])[1]\n    \n    def shortestPath(self, g: List[List[int]], s: int, f: int, x: int, y: int) -> int:\n        def dfs(cur_x, cur_y, cur_d, visited):\n            if cur_d == -1:\n                return cur_x, cur_y\n            elif cur_d == 0:\n                return cur_x, cur_y - 1\n            else:\n                cur_d = cur_d - 1\n                cur_x, cur_y = dfs(cur_x + 1, cur_y, cur_d, visited)\n                cur_x, cur_y = dfs(cur_x, cur_y + 1, cur_d, visited)\n                return cur_x, cur_y\n        \n        return dfs(x, y, g[s][x][y], [0 for i in range(f + 1)])[1]\n    \n    def shortestPath(self, g: List[List[int]], s: int, f: int, x: int, y: int) -> int:\n        def dfs(cur_x, cur_y, cur_d, visited):\n            if cur_d == -1:\n                return cur_x, cur_y\n            elif cur_d == 0:\n                return cur_x, cur_y - 1\n            else:\n                cur_d = cur_d - 1\n                cur_x, cur_y = dfs(cur_x + 1, cur_y, cur_d, visited)\n                cur_x, cur_y = dfs(cur_x, cur_y + 1, cur_d, visited)\n                return cur_x, cur_y\n        \n        return dfs(x, y, g[s][x][y], [0 for i in range(f + 1)])[1]\n    \n    def shortestPath(self, g: List[List[int]], s: int, f: int, x: int, y: int) -> int:\n        def dfs(cur_x, cur_y, cur_d, visited):\n            if cur_d == -1:\n                return cur_x, cur_y\n            elif cur_d == 0:\n                return cur_x, cur_y - 1\n            else:\n                cur_d = cur_d - 1\n                cur_x, cur_y = dfs(cur_x + 1, cur_y, cur_d, visited)\n                cur_x, cur_y = dfs(cur_x, cur_y + 1, cur_d, visited)\n                return cur_x, cur_y\n        \n        return dfs(x, y, g[s][x][y], [0 for i in range(f + 1)])[1]\n    \n    def shortestPath(self, g: List[List[int]], s: int, f: int, x: int, y: int) -> int:\n        def dfs(cur_x, cur_y, cur_d, visited):\n            if cur_d == -1:\n                return cur_x"
    },
    {
        "number": 4450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution == 10, \"solution(s) failed\"\n'''\n\nimport collections\nimport heapq"
    },
    {
        "number": 4450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"6 10 5\") == \"3\"\nassert solution(\"2 5 1\") == \"5\"\nassert solution(\"5 3 9\") == \"6\"\nassert solution(\"6 2 2\") == \"6\"\nassert solution(\"5 1 8\") == \"5\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 22\n"
    },
    {
        "number": 4450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('7 5 5') == 3\nassert solution('7 15 18') == 3\nassert solution('15 18 18') == 3\nassert solution('7 15 18') == 3\nassert solution('7 15 18') == 3\n"
    },
    {
        "number": 4451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"7\"\nassert solution(\"6\") == \"7\"\nassert solution(\"10\") == \"7486\"\nassert solution(\"10\") == \"7486\"\nassert solution(\"10\") == \"7486\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"3 1 5\"\nassert solution(stdin) == \"7486 3\"\nassert solution(stdin) == \"7486 3 2\"\nassert solution(stdin) == \"7486 3 2 1\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 2\") == \"3\"\nassert solution(\"5 6\") == \"6\"\nassert solution(\"10\") == \"10\"\nassert solution(\"12 13 15 8 150\") == \"7\"\nassert solution(\"12 13\") == \"12\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3 1'\nassert solution(stdin) == '7486'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 10\n\"\"\""
    },
    {
        "number": 4451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\") == \"1 1 1 1 1\"\nassert solution(\"10\") == \"1 1 1 1 1\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"7486\"\nassert solution(stdin) == \"7486\"\nassert solution(stdin) == \"7486\"\nassert solution(stdin) == \"7486\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == 2\nassert solution(\"6\") == 3\nassert solution(\"10\") == 7\nassert solution(\"10\") == 7486\nassert solution(\"10\") == 7486"
    },
    {
        "number": 4451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3 1'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7486 3'\nassert solution(stdin) == '7486 3'\nassert solution(stdin) == '7486 3'\n"
    },
    {
        "number": 4452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"9 7 8 10 100\"\nassert solution(\"1 2 1 3 2\") == \"3 2\"\nassert solution(\"1 3 1\") == \"1\"\nassert solution(\"0 3 2\") == \"2\"\nassert solution(\"0 4 6\") == \"4\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1') == 1\nassert solution('1') == 1\nassert solution('1') == 1\nassert solution('1') == 1\nassert solution('1') == 1\n"
    },
    {
        "number": 4452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]) == \"7\"\nassert solution([\"1\",\"7\",\"9\",\"3\",\"4\",\"5\",\"6\",\"7\"]) == \"7\"\nassert solution([\"4\",\"99\",\"90\",\"9\",\"3\",\"9\"]) == \"100\"\nassert solution([\"4\",\"99\",\"90\",\"9\",\"3\",\"9\",\"3\"]) == \"100\"\nassert solution([\"1\",\"5\",\"6\",\"7\",\"8\",\"9\",\"9\",\"8\",\"7\",\"6\",\"5\",\"4\",\"3\",\"2\",\"1\"]) == \"5\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\",\"3\",\"4\",\"7\",\"10\"]) == \"4\", \"1:1\"\nassert solution([\"1\",\"3\",\"7\",\"10\"]) == \"4\", \"1:1\"\nassert solution([\"10\",\"7\",\"4\",\"9\"]) == \"4\", \"1:1\"\nassert solution([\"100\",\"1\",\"3\",\"7\",\"10\"]) == \"3\", \"1:2\"\nassert solution([\"1\",\"3\",\"7\",\"10\"]) == \"3\", \"1:2\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2000\"\nassert solution(stdin) == \"1505\"\nassert solution(stdin) == \"1210\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"11\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5000 9\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\n\nassert solution(stdin) == '7'\n\nassert solution(stdin) == '5'\n\nassert solution(stdin) == '100'\n\nassert solution(stdin) == '10'"
    },
    {
        "number": 4452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '1'\nassert solution(inp) == '1'\nassert solution(inp) == '1'\nassert solution(inp) == '1'\nassert solution(inp) == '1'\n"
    },
    {
        "number": 4453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 1 1 1\"\n\n\"\"\"\n\nn = int(input())\np = [int(i) for i in input().split()]\nnums = sorted(p)\nanswer = 0\nfor i in range(len(nums)):\n    if i == 0:\n        answer = nums[i]\n    else:\n        if answer == nums[i]:\n            answer += 1\n            continue\n        else:\n            answer += 1\n            continue\n        if nums[i] == answer:\n            continue\n        else:\n            answer += 1\n            continue\n    answer += 1\nprint(answer - 1)\n"
    },
    {
        "number": 4453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n\n\nOutput Format\n\nOutput one line containing the answer to the first question.\n\nInput\n\nThe first line of the input contains only one integer $q$ ($1 \\le q \\le 200$). Then $q$ queries follow.\n\nThe first line of the query contains only one integer $n$ ($1 \\le n \\le 200$). Then $q$ queries follow.\n\nThe second line of the query contains $n$ integers $p_1, p_2, \\dots, p_n$ ($1 \\le p_i \\le n$, all $p_i$ are distinct, i.e. $p$ is a permutation), where $p_i$ is the kid which will get the book of the $i$-th kid.\n\nNote:\n\np_1 and p_2 are numbered from $1$ to $n$.\np_1 = $1$, p_2 = $p_i$.\np_1 is the first (lowest) child in the tree.\n\nThere are $n$ children and $p$ permutations that contain all unique books.\nFor example, $p$ has $n = 6$ and $p[0] = 4$ and $p[1] = 6$. Each child's book is passed to the function $a_i$.\n\n\n-----Example-----\nInput\n\n6\n5\n3 1 2 4 2\n3 2 1\n6 2\n3 2 3\n6\n2 3 1 5 3\n\nOutput\n\n1 1 1 1 1 1 1 1\n3 3 3 3 3 3 3 3\n2 2 2 2 2 2 2 2 2\n4 4 4 1 4 4 4 4\n3 3 3 3 3 3 3 3 3\n2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2\n4 4 4 1 4 4 4 4\n3 3 3 3 3 3 3 3 3\n2 2 2 2 2 2 2 2 2\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n\n\n------OUTPUT-----\n\nOutput\n\nThe answer to the first question is printed on the screen.\n\n------SAMPLE INPUT(s)-----\n\n6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n\nOutput\n\n1 1 1 1 1 1 1 1 1\n\n------SAMPLE OUTPUT(s)-----\n\n2\n3 3 3 3 3 3 3 3 3 3\n2 2 2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3 3\n2 2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3 3\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2\n\n------SAMPLE EXAMPLES-----\n\nInput 1:\n\n6\n5\n3 1 2 4 2\n3 2 1\n6 2\n3 2 3\n6\n2 3 1 5 3\n\nOutput 1:\n\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n3 3 3 3 3 3 3 3 3\n2 2 2 2 2 2 2 2 2\n4 4 4 1 4 4 4 4\n3 3 3 3 3 3 3 3 3\n2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2\n4 4 4 1 4 4 4 4\n3 3 3 3 3 3 3 3 3\n2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2\n\nInput 2:\n\n6\n5\n3 1 2 4 2\n3 2 1\n6 2\n3 2 3\n6\n2 3 1 5 3\n\nOutput 2:\n\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n3 3 3 3 3 3 3 3 3\n2 2 2 2 2 2 2 2 2\n4 4 4 1 4 4 4 4\n3 3 3 3 3 3 3 3 3\n2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2\n4 4 4 1 4 4 4 4\n3 3 3 3 3 3 3 3 3\n2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 1 1 1 1\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution == \"1 1 1 1 1 1\"\n\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1 1 1 1 1\"\n\n'''\n\nclass Solution:\n    def returnKthDay(self, n: int, p: List[int]) -> int:\n        day = 1\n        while day < n:\n            day += 1\n            if p[day] == 0:\n                p[day] = 1\n            else:\n                p[day] = 1\n                p[day - 1] -= 1\n        return day"
    },
    {
        "number": 4453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1 1 1 1 1 1 1 1 1'\nassert solution(stdin) == '3 3 3 1 3'\nassert solution(stdin) == '1 1 1 1 1 1 1 1 1 1'\nassert solution(stdin) == '4 4 4 1 4'\nassert solution(stdin) == '5 5 5 1'\n"
    },
    {
        "number": 4453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 2 3 4 5\"\n\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    10\n    5\n    2 4 1 4 2\n    2 1 2 2 1\n    4 1 4 2 1\n    6 3 3 1\n    1 2 3 3 1\n    4 1 2 1 1\n    5 4\n    \"\"\"\n    ) == \"1 2 1 1\"\n    assert solution(\n    \"\"\"\n    10\n    1 1 1 1 1\n    1 1 1 1\n    1 1 1 1 1\n    1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    \"\"\"\n    ) == \"1 1 1 1\"\n    assert solution(\n    \"\"\"\n    10\n    1 1 1 1\n    1 1 1 1 1\n    1 1 1 1\n    1 1 1 1 1\n    1 1 1 1\n    \"\"\"\n    ) == \"1 1 1 1\"\n    assert solution(\n    \"\"\"\n    10\n    1 1 1 1\n    1 1 1 1\n    1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    \"\"\"\n    ) == \"1 1 1 1\"\n    assert solution(\n    \"\"\"\n    10\n    1 1 1 1 1\n    1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    \"\"\"\n    ) == \"1 1 1 1\"\n    "
    },
    {
        "number": 4453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5 3 2 3 1 2 1 3 1 5') == '1 1 1 1 1 1 1'\nassert solution('2 3 3 2 1 1 3 1 4 5') == '3 3 3 3 3 3 3'\nassert solution('1 2 3 1 3 1 3 4 5') == '1 2 2 2 3 2 2'\nassert solution('1 3 1 1 1 1 1 5') == '1 3 3 3 3 3'\nassert solution('1 3 1 1 1 1 1 5 6') == '1 3 3 3 3 3'\n"
    },
    {
        "number": 4454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 2 3 4 5\") == \"3\""
    },
    {
        "number": 4454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 6 7\") == \"3\"\nassert solution(\"1 9 8 7\") == \"1\"\nassert solution(\"3 1 2 4 5\") == \"2\"\nassert solution(\"2 2 1 4\") == \"2\"\nassert solution(\"3 2 2 1\") == \"2\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1\n    \n\"\"\"\n\nimport sys\n\nq = int(sys.stdin.readline())\n\nfor i in range(q):\n    n = int(sys.stdin.readline())\n    a = map(int, sys.stdin.readline().split())\n    a = list(a)\n    a = sorted(a)\n    sum = 0\n    for i in range(len(a)):\n        sum += a[i]*(10**i)\n    if sum == n:\n        print(sum)\n        exit()\n    else:\n        print('error')\n        exit()\n"
    },
    {
        "number": 4454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 2 2\") == \"3\"\nassert solution(\"1 2 1 1\") == \"3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1 1 1\") == \"3\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution == 1, \"incorrect answer\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == inp"
    },
    {
        "number": 4454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"6\"\n'''"
    },
    {
        "number": 4454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1 2\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution
    },
    {
        "number": 4455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution( \"10 4 10 15\" ) == 0\nassert solution( \"5 4 1 5 4 3 7 1 2 5\" ) == 5\nassert solution( \"4 6\" ) == 4\nassert solution( \"4 6\" ) == 5\nassert solution( \"4 6\" ) == 6\n"
    },
    {
        "number": 4455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == 1, \"1\"\nassert solution(\"4 4\") == 0, \"4\"\nassert solution(\"5 4 5\") == 4, \"5\"\nassert solution(\"10 4 5\") == 3, \"10\"\nassert solution(\"10 8\") == 0, \"8\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 0, \"solution\"\n\nassert solution(input()) == \"5 4 0 5 3 3 9 0 2 5\"\n\nassert solution(input()) == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2') == '0 0 1 2'\nassert solution('1 2 3 4') == '0 2 0 1'\nassert solution('1 2 3 4 5') == '1 1 2'\nassert solution('1 2 5 4 3') == '0 1'\nassert solution('4 6 1 2 3 4') == '2 2'\n"
    },
    {
        "number": 4455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\\\"\"\"\n3 2\n10 4 10 15\n1 2\n4 3\n\n2 3\n5 4\n\n0 0 1 2 \n\n3 4\n5 6\n\n7 4\n8 4\n\n9 3\n\n1 2\n4 3\n\n0 0 1 2 \n\n4 5\n7 4\n\n0 0 1 2 \n\n2 0 1 0 0\n\n3 2\n5 6\n\n5 4 0 5 3 3 7 1 2 5\n4 6\n2 1\n\n2 1 0 1 2\n\n3 2\n5 6\n\n2 0 1 0 0\n\n2 2\n5 6\n\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n0 0 1 2 \n\n2 0 1 0 0\n\n3 2\n5 6\n\n2 2\n5 6\n\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n1 2\n\n1 2\n1 2\n\n0 0 1 2 \n\n1 2\n"
    },
    {
        "number": 4455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 4 10 15\") == \"0 0 1 2 \"\nassert solution(\"5 4 1 5 4 3 7 1 2 5\") == \"5 4 0 5 3 3 9 0 2 5 \"\nassert solution(\"4 6\") == \"5 4 0 5 3 3 9 0 2 5 \"\nassert solution(\"\") == \"0 0 1 2 \"\nassert solution(\"5 4 1 5 4 3 7 1 2 5\") == \"5 4 0 5 3 3 9 0 2 5 \"\n"
    },
    {
        "number": 4455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3\\n4 5\\n4 6\\n2 1\\n10 8') == '0 0 1 2'\nassert solution('5 4') == '5 0 1 3'\nassert solution('4 4\\n4 5\\n4 6\\n4 7\\n4 8') == '0 0 1 2'\nassert solution('6 1\\n4 5\\n3 5\\n2 3\\n7 2') == '0 0 1 2'\nassert solution('6 2\\n5 4\\n3 4\\n2 5\\n1 3\\n7 2') == '0 0 1 2'\n"
    },
    {
        "number": 4455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"5 4 0 5 3 3 9 0 2 5\"\nassert solution(\"10 4 1 5 4 3 7 1 2 5\") == \"5 4 1 5 4 3 7 1 2 5\"\nassert solution(\"10 8 7 1 6 5 3 9 3 4\") == \"5 4 1 5 4 3 7 1 2 5\""
    },
    {
        "number": 4455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"0 0 1 2\"\nassert solution(\"1 2\") == \"1 0 1 2\"\nassert solution(\"3 4\") == \"3 0 1 2\"\nassert solution(\"3 4 5\") == \"3 0 1 2 5\"\nassert solution(\"3 4 5 6\") == \"3 0 1 2 6\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 4 2\") == \"0 1 2\"\nassert solution(\"1 4 1\") == \"0 1 0\"\nassert solution(\"1 4 3\") == \"0 1 0\"\nassert solution(\"1 4 3 5\") == \"0 1 0\"\nassert solution(\"1 4 4 4\") == \"1 0 0 0\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"abc\") == \"abc\", \"Error\"\nassert solution(\"abcdef\") == \"abcf\", \"Error\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\", \"Error\"\nassert solution(\"abccde\") == \"abccde\", \"Error\"\nassert solution(\"defghijklmnopqrstuvwxyz\") == \"defghijklmnopqrstuvwxyz\", \"Error\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abc\") == \"def\"\nassert solution(\"ABCDEF\") == \"EFG\"\nassert solution(\"abcdef\") == \"bcdef\"\nassert solution(\"abcde\") == \"bce\"\nassert solution(\"abcdefg\") == \"cdefg\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 1 1\") == \"YES\"\nassert solution(\"abc\") == \"YES\"\nassert solution(\"abababababab\") == \"YES\"\nassert solution(\"abababababab\") == \"NO\"\nassert solution(\"ab\") == \"YES\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"abc\") == \"YES\"\nassert solution(\"abcd\") == \"NO\"\nassert solution(\"abcddcba\") == \"YES\"\nassert solution(\"abcdeeeefcddc\") == \"YES\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\nInput\n3\n1 1 2 3\n1 1 2 3\n1 1 2 3\n\nOutput\nNO\n"
    },
    {
        "number": 4456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"hello\") == \"YES\", \"Wrong string\"\nassert solution(\"solution\") == \"YES\", \"Wrong string\"\nassert solution(\"clown\") == \"YES\", \"Wrong string\"\nassert solution(\"helloworld\") == \"YES\", \"Wrong string\"\nassert solution(\"123abcde\") == \"NO\", \"Wrong string\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\nassert solution(input()) == 'NO'\n"
    },
    {
        "number": 4456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"43\"\nassert solution(input) == \"64\"\nassert solution(input) == \"69\"\nassert solution(input) == \"3\"\nassert solution(input) == \"2 1 4 3\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"43\"\nassert solution(stdin) == \"64\"\nassert solution(stdin) == \"69\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '43'\nassert solution(input) == '64'\nassert solution(input) == '69'\nassert solution(input) == '3'\n"
    },
    {
        "number": 4457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 10, 20, 10, 20, 10) == \"43\"\nassert solution(4, 10, 20, 10, 20, 10) == \"64\"\nassert solution(6, 5, 4, 4, 4, 4) == \"69\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(test_input) == '43'\nassert solution(test_input) == '64'\nassert solution(test_input) == '69'\nassert solution(test_input) == '35'\nassert solution(test_input) == '35'\n"
    },
    {
        "number": 4457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"20\", \"10\", \"20\", \"10\", \"20\", \"20\"]) == \"43\"\nassert solution([\"20\", \"10\", \"20\", \"10\", \"20\", \"20\"]) == \"64\"\nassert solution([\"20\", \"10\", \"20\", \"10\", \"20\", \"20\"]) == \"69\""
    },
    {
        "number": 4457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"43\"\nassert solution(stdin) == \"64\"\nassert solution(stdin) == \"69\"\nassert solution(stdin) == \"63\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input().split()) == \"43\"\nassert solution(input().split()) == \"64\"\nassert solution(input().split()) == \"69\"\nassert solution(input().split()) == \"43\"\nassert solution(input().split()) == \"31\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"10\", \"20\", \"10\", \"20\"]) == \"43\"\nassert solution([\"10\", \"20\", \"10\", \"10\"]) == \"64\"\nassert solution([\"10\", \"20\", \"10\", \"10\", \"10\"]) == \"69\"\nassert solution([\"20\", \"10\", \"20\", \"20\"]) == \"43\"\nassert solution([\"10\", \"10\", \"20\", \"20\"]) == \"64\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 3 2\") == \"43\"\nassert solution(\"3\") == \"1 3\"\nassert solution(\"1 4\") == \"3\"\nassert solution(\"4\") == \"1 4\"\nassert solution(\"6\") == \"6 1 3 5 2 4\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, 4, 5, 1, 3) == 3\nassert solution(5, 4, 5, 1, 3) == 4\nassert solution(5, 4, 5, 1, 3) == 4\nassert solution(5, 4, 5, 1, 3) == 4\n\nExample:\nInput:\n5\n4 2 5 1 3\n\nOutput:\n3\n\nExplanation:\nFor each integer in the given input, the integers satisfy the following condition:\n- For all integers j (1 \\leq j \\leq i), P_i \\leq P_j.\n- P_i > P_j.\n\"\"\"\n\n\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"3\"\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"3\"\n-----Sample Input-----\n5\n4 2 5 1 3\n\n-----Sample Output-----\n3\n\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\nassert solution(\"4 2 5 1 3\") == \"2\"\nassert solution(\"4 2 5 1 3\") == \"4\"\nassert solution(\"4 2 5 1 3\") == \"2\"\nassert solution(\"4 2 5 1 3\") == \"0\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0,2,5,4) == 3\nassert solution(0,2,5,4) == 3\nassert solution(0,2,5,4) == 3\nassert solution(0,2,5,4) == 3\nassert solution(0,2,5,4) == 3\n"
    },
    {
        "number": 4458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(solution) == 5"
    },
    {
        "number": 4458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '5'\nassert solution(stdin) == '4'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n
    },
    {
        "number": 4459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 2 2 4 2 4 2 4 2 3 2 3 3 2 2 2 2 2 2 2') == 3\nassert solution('1 2 3') == 3\nassert solution('1 2 3 4 5 6') == 1\nassert solution('1 2 3 4 5 6 7 8 9 10') == 1\nassert solution('2 3 2 2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 4459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution( \"3 3 3 3\" ) == \"1\"\nassert solution( \"4 3 2\" ) == \"1\"\nassert solution( \"1 0 2 0\" ) == \"1\"\nassert solution( \"1 2 3 4 5 6 7 8 9 10\" ) == \"1\"\nassert solution( \"1 1 1 1\" ) == \"1\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3 3 3 3') == 1, \"The number of elements with repeating elements is incorrect\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"4\"\n) == 2\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\")\") == \"1\"\nassert solution(\"(\") == \"1\"\nassert solution(\"(\") == \"1\"\nassert solution(\"(\") == \"1\"\nassert solution(\"(())\") == \"2\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"3 3 3 3\") == 1\nassert solution(\n    \"1 2 3 4 5 6 7 8 9 10\") == 3\nassert solution(\n    \"2 3 1 3 7\") == 3\nassert solution(\n    \"1 2 4 5 3 6 7 8 9 10\") == 3\nassert solution(\n    \"1 2 3 3\") == 3\n"
    },
    {
        "number": 4459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()), \"fails due to invalid input\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 3 3 3\") == \"1\"\nassert solution(\"4 3 3 3\") == \"1\"\nassert solution(\"3 3 3 3 2\") == \"2\"\nassert solution(\"3 3 3 3 3\") == \"2\"\nassert solution(\"2 3 3 3 3\") == \"2\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1"
    },
    {
        "number": 4460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == 1\nassert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 1\n"
    },
    {
        "number": 4460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(str(5)) == 1\n\n'''\n'''\nOUTPUT\n[1, 0, 2, 4, 5]\n\n'''\n\nimport re"
    },
    {
        "number": 4460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 4460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 2 3 4 5'), '1'\nassert solution('0'), '0'\nassert solution('1 0'), '0'\nassert solution('0 0 0'), '0'\nassert solution('0 0 0 0'), '0'\n"
    },
    {
        "number": 4460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0, 2, 3, 4, 5) == 1\n\n\n\"\"\"\n\nimport re\n\nclass Solution:\n    def findWords(self, words: list, queries: list) -> list:\n        # Split the string\n        # For each word, get the letters of it.\n        # For each letter of the word, check it with the alphabet.\n        # If it exists, assign it to the new word.\n        # Otherwise, just check the previous word if it exists.\n        # Then, add it to the new word, if it does not exist,\n        # then just keep checking the previous word.\n        word_dict = {}\n        for word in words:\n            for c in word:\n                word_dict[c] = word\n        word_set = set(word_dict.keys())\n        for query in queries:\n            if query in word_dict:\n                word = query\n                new_word = word_dict[query]\n            else:\n                new_word = query\n                new_word_set = word_set - set(new_word)\n            if new_word_set:\n                word_dict[new_word] = new_word_set\n        return list(word_dict.values())"
    },
    {
        "number": 4460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('0 2 3 4 5') == '1'\nassert solution('2 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 3') == '1'\nassert solution('1 4') == '1'\n"
    },
    {
        "number": 4460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\n\n---Refactoring---\nOn the next assignment, it is possible to change the definition of solution by changing the function\nsolution. This function can be tested by making a string that contains a solution to the problem.\nWe have a string that contains one of three cases:\na) We have three variables.\nb) We have two variables.\nc) We have one variable.\nWe then have two substrings that only appear once.\nWe then go over all the substring in the string and update the variable Snuke.\nWe then print the index of Snuke which is the last occurrence of it.\n\n----Backtracking---\nWe can backtrack if the given variable has only one substring with the given solution.\nWe can backtrack if the given variable has two or more substring with the given solution.\nWe can backtrack if the given variable has three or more substring with the given solution.\nWe can backtrack if the given variable has two or more substring with the given solution.\n\n--Subtasks--\nThe subtasks below are not yet implemented.\n\n---Subtask A: Part 1: Part 1 of the Problem---\nThe first part of the problem is what we want to do.\n\n---Subtask B: Part 2: Part 2 of the Problem---\nPart 2: We want to solve the problem again.\n\n---Subtask C: Part 3: Part 3 of the Problem---\nPart 3: We want to solve the problem again.\n\n--Part Task--\nIf we have two variables, then we can go back to the problem to the initial states of both variables.\n\n--Part Task--\nIf we have two variables, then we can go back to the problem to the initial states of both variables.\n\n--Part Task--\nIf we have two variables, then we can go back to the problem to the initial states of both variables.\n\n----Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n----Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn this assignment, we have two variables.\nWe then go back to the problem to the initial states of both variables.\n\n--Part Task----\nIn"
    },
    {
        "number": 4460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"1\"\n\nInput Format\n\nA single line of input with the format:\n\n<integer x_i>\n\nThe variables x_1, x_2, x_3, x_4, and x_5 are integers and the value x_i is assigned to them.\n\nConstraints\n\n1 <= x_i <= 100\n\nSample Output\n\n1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 5\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\n\n-----Sample Input-----\n3 2\n\n-----Sample Output-----\n2\n\nIn the division below, S_{max} - S_{min} = 3 - 2 = 2.\n"
    },
    {
        "number": 4461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == ''\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0'\n\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '0'\n"
    },
    {
        "number": 4461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == str(0)"
    },
    {
        "number": 4461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"0\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"0\"\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\nassert solution(\"2 1 1 1 1 1 1 1\") == \"No\"\nassert solution(\"2 2 2 2 2 2 2 2\") == \"No\"\nassert solution(\"1 2 2 2 2 2 2 2\") == \"No\"\nassert solution(\"1 2 2 2 2 2 2 2\") == \"No\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"Yes\"\nassert solution(input) == \"No\"\n\n'''\n"
    },
    {
        "number": 4462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 100, 10) == \"Yes\"\nassert solution(2, 100, 10) == \"Yes\"\nassert solution(3, 100, 10) == \"No\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 'Yes'\n'''\nimport sys\nimport math"
    },
    {
        "number": 4462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"Yes\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'"
    },
    {
        "number": 4462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1\", \"10\"]) == \"Yes\"\nassert solution([\"4\"]) == \"No\"\nassert solution([\"4\", \"4\"]) == \"No\""
    },
    {
        "number": 4462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'Yes'\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(s) == \"Yes\", \"No\"\nassert solution(t) == \"Yes\", \"No\"\nassert solution(x) == \"No\", \"No\"\nassert solution(xy) == \"Yes\", \"No\"\nassert solution(xya) == \"Yes\", \"No\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(s) == t\n"
    },
    {
        "number": 4463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(x) == \"Yes\"\nassert solution(y) == \"No\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['yx','xy','yx','xy','xy','xy','xy','xy','xy']) == 'Yes'\nassert solution(['yx','xy','xy']) == 'No'"
    },
    {
        "number": 4463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('xy') == 'Yes'\nassert solution('xyz') == 'No'\nassert solution('xyyx') == 'Yes'\nassert solution('xyza') == 'Yes'\nassert solution('yxy') == 'No'\n"
    },
    {
        "number": 4463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('xyz') == 'Yes'\nassert solution('xyz') == 'No'\nassert solution('xy') == 'Yes'\nassert solution('xy') == 'No'\nassert solution('xy') == 'No'\n"
    },
    {
        "number": 4463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"yx\") == \"Yes\", \"Solution is not correct.\"\nassert solution(\"xy\") == \"No\", \"Solution is not correct.\"\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"yx\"), \"yx\"\nassert solution(\"xy\"), \"xy\"\nassert solution(\"yxa\"), \"yxa\"\nassert solution(\"yxa\"), \"yx\"\nassert solution(\"xyy\"), \"yxa\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, \"xyz\") == \"Yes\"\nassert solution(3, \"xyzx\") == \"No\"\nassert solution(5, \"xyzxyz\") == \"No\"\nassert solution(3, \"xyzxy\") == \"Yes\"\nassert solution(3, \"xyz\") == \"Yes\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"xy\") == \"No\"\n\npass\n"
    },
    {
        "number": 4464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\",\"4\",\"3\",\"2\",\"1\"]) == \"YES\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"NO\"\nassert solution([\"6\",\"5\",\"4\",\"3\",\"2\"]) == \"NO\"\nassert solution([\"6\",\"5\",\"4\",\"3\",\"2\",\"1\"]) == \"YES\""
    },
    {
        "number": 4464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 3 2\") == \"NO\"\nassert solution(\"3 1 3\") == \"YES\"\n\n-----Sample Input-----\n7 5 1\n\n-----Sample Output-----\nYES\n\"\"\"\n\nimport math\n\nA, B, C = map(int, input().split())"
    },
    {
        "number": 4464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    {\n        \"A\": 7,\n        \"B\": 14,\n        \"C\": 1,\n    }\n) == \"YES\", \"Test failed\"\n\nassert solution(\n    {\n        \"A\": 7,\n        \"B\": 14,\n        \"C\": 6,\n    }\n) == \"NO\", \"Test failed\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\")\" ) == 'YES', 'Unsuccesful!'\nassert solution(\")\" ) == 'NO', 'Unsuccesful!'\nassert solution(\")\") == 'NO', 'Unsuccesful!'"
    },
    {
        "number": 4464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3 4 1\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"0 0 0\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3 5\") == \"YES\"\nassert solution(\"2 4 5\") == \"NO\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"2 2\") == \"YES\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'YES'\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"5 5\") == \"5\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\", \"4\"]) == \"1\"\nassert solution([\"1\", \"4\", \"3\"]) == \"3\"\nassert solution([\"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2 2\"\n) == \"1\"\nassert solution(\n    \"2 3\"\n) == \"3\"\nassert solution(\n    \"2 4\"\n) == \"5\"\nassert solution(\n    \"2 1\"\n) == \"2\"\nassert solution(\n    \"2 0\"\n) == \"1\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"1\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"5 2 3\") == \"2\"\nassert solution(\"2 5\") == \"2\"\nassert solution(\"1 5\") == \"1\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2,2) == \"1\"\nassert solution(2,2) == \"2\"\nassert solution(2,2) == \"3\"\nassert solution(2,2) == \"4\"\nassert solution(2,2) == \"5\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"5 2 5 1 5 1\"\n) == \"1\"\n\nassert solution(\n    \"4 3 7\"\n) == \"4\"\n\nassert solution(\n    \"5 2 4 1 5 4 3\"\n) == \"4\"\n\nassert solution(\n    \"4 6 1\"\n) == \"4\"\n\nassert solution(\n    \"10 1 10 2 3 4 3\"\n) == \"12\""
    },
    {
        "number": 4465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"10\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 4466,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2\",\"1\",\"2\",\"2\",\"2\"]) == \"1\"\nassert solution([\"5\",\"3\",\"4\",\"4\",\"4\",\"3\"]) == \"5\"\nassert solution([\"6\",\"4\",\"8\",\"8\",\"8\",\"4\",\"6\"]) == \"4\"\nassert solution([\"3\",\"1\",\"2\"]) == \"2\"\nassert solution([\"6\",\"2\",\"6\",\"2\",\"2\",\"6\",\"2\",\"2\",\"4\",\"2\",\"4\",\"6\",\"6\",\"6\",\"2\",\"2\",\"6\",\"2\",\"2\",\"6\",\"2\",\"2\"]) == \"6\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 4 3') == '3'\nassert solution('2 4 3') == '2'\nassert solution('2 1 5') == '3'\nassert solution('2 2 4') == '2'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4466,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\nInput\n13 3 1\n\nOutput\n3\n\nExplanation\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n"
    },
    {
        "number": 4466,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\\\"3 2 1\\\") == 3\nassert solution(\\\"3 2 3 4 5 6 7 8 9\\\") == 13\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1,3,1) == \"3\"\nassert solution(1,3,2) == \"3\"\nassert solution(1,3,3) == \"2\"\nassert solution(2,5,3) == \"2\"\nassert solution(0,1,3) == \"1\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"2 2\") == \"3\"\nassert solution(\"1 1\") == \"3\"\nassert solution(\"6 6\") == \"4\"\nassert solution(\"1 1 2 2 2\") == \"4\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('7') == '1'\nassert solution('1') == '1'\nassert solution('5') == '2'\nassert solution('15') == '3'\nassert solution('3') == '1'\n"
    },
    {
        "number": 4466,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"3\"\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"6 1\") == \"3\"\nassert solution(\"3 2 3\") == \"3\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"6 6\") == \"3\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2, \"Hello\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10 5 3\") == \"5\"\nassert solution(\"2 1 6 3\") == \"3\"\nassert solution(\"2 3 1\") == \"1\"\nassert solution(\"2 2 4 5\") == \"0\"\nassert solution(\"2 1 0\") == \"2\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"), 0\n"
    },
    {
        "number": 4467,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 2 0 3 1 5 5\") == 2\n"
    },
    {
        "number": 4467,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 4 3') == '1 2 3'\nassert solution('3 4 2') == '1 2 3'\nassert solution('4 4 2') == '2 1 2'\nassert solution('0 4 2') == '1 2 3'\nassert solution('5 4 5') == '2 1 2'\n"
    },
    {
        "number": 4467,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n(2, 0)\n) == 2\nassert solution(\n(2, 2)\n) == 1\nassert solution(\n(3, 1)\n) == 3\nassert solution(\n(1, 3)\n) == 4\nassert solution(\n(4, 2)\n) == 5\n"
    },
    {
        "number": 4467,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 2\n\n-----Sample Input-----\n3\n1 2 1\n1 2 2\n2 2 3\n1 2 3\n\n-----Sample Output-----\n2\n\nThere are two pairs.\n-----Sample Input-----\n4\n0 3 1 3\n1 2 1 2\n2 1 1 1\n\n-----Sample Output-----\n2\n\nThere are two pairs.\n-----Sample Input-----\n5\n0 1 0 1 1 2 3 3 4\n1 2 0 3 4 5 6 7 8\n2 1 2 3 5 6 7 8 9 10\n\n-----Sample Output-----\n3\n\nThe number of friendly pairs is two, and the maximum is 2.\n\n'''"
    },
    {
        "number": 4467,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\") == \"1 3 5\"\nassert solution(\"2 4 5\") == \"1 2 4\"\nassert solution(\"4 2 3\") == \"1 1 2\"\nassert solution(\"5 5 4\") == \"1 1 4\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\"2 1\",\n    \"1 3\",\n    \"4 2\",\n    \"0 4\",\n    \"5 5\"]) == \"2\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 0') == 2\nassert solution('3 1') == 3\nassert solution('1 3') == 1\nassert solution('4 2') == 1\nassert solution('0 4') == 2\n"
    },
    {
        "number": 4468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"7\""
    },
    {
        "number": 4468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"7\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('0 0 0 0 1') == '7'\nassert solution('1 1 0 1') == '7'\nassert solution('2 2 2 1') == '5'\nassert solution('2 2 2 2') == '5'\nassert solution('2 2 2 3') == '4'\n"
    },
    {
        "number": 4468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '7'"
    },
    {
        "number": 4468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 4 2\") == \"7\"\nassert solution(\"1 0 3\") == \"5\"\nassert solution(\"1 3\") == \"4\"\nassert solution(\"1 3 4\") == \"3\"\nassert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, \"\"), \"No solution\"\nassert solution(2, \"1\"), \"Second 1\"\nassert solution(0, \"1\"), \"First 1\"\nassert solution(3, \"1\") == \"Second 1\"\nassert solution(4, \"1\") == \"Second 1\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == \"7\"\nassert solution(\"0 3\") == \"6\"\nassert solution(\"3 4\") == \"5\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"0 3\") == \"1\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == \"7\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"0 3\") == \"1\"\nassert solution(\"0 2\") == \"1\"\nassert solution(\"0 3\") == \"1\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\ninp: \"1 3\"\n) == \"7\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 7\n'''\n"
    },
    {
        "number": 4469,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4469,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10\\n10\\n10\\n10\") == \"1\"\nassert solution(\"100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100"
    },
    {
        "number": 4469,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('1,2') == '0'\nassert solution('1,2,3') == '0'\nassert solution('1,2,3,4') == '2'\nassert solution('1,2,3,4,5') == '1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4469,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3\\nR \\nR \\nR \\nR\") == \"1\"\nassert solution(\"4\\nR \\nL \\nR \\nR \\nR \\nR\") == \"0\"\nassert solution(\"5\\nR \\nL \\nR \\nR \\nR \\nR \\nR\") == \"2\""
    },
    {
        "number": 4469,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \"1000000000000000000\"\n    \""
    },
    {
        "number": 4470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 11"
    },
    {
        "number": 4470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 4\n"
    },
    {
        "number": 4470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n\"\n) == 1\nassert solution(\n    \"8\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n\"\n) == 7\nassert solution(\n    \"8\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n\"\n) == 8\nassert solution(\n    \"8\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n\"\n) == 8\n"
    },
    {
        "number": 4470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0\n\n\n-----Constraints-----\n1 <= q <= 100\n1 <= n <= 10^18\n\n----CODE----\nn = int(stdin.strip())\nwhile n > 0:\n    n = n//10\n    print(n)\n"
    },
    {
        "number": 4470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 0\nassert solution(input, 2) == 4\nassert solution(input, 4) == 6\nassert solution(input, 5) == 6\nassert solution(input, 6) == 6\n"
    },
    {
        "number": 4470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 1, \"A4\"\nassert solution(2) == -1\nassert solution(3) == 2\nassert solution(4) == 0\nassert solution(5) == -1\n"
    },
    {
        "number": 4470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0, \"Correct answer\"\nassert solution(stdin) == 4, \"Wrong answer\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 4, 'incorrect'"
    },
    {
        "number": 4470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"4\") == 2\nassert solution(\"5\") == 1\n"
    },
    {
        "number": 4471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\""
    },
    {
        "number": 4471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"2\") == \"NO\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5' == 'YES') == 'NO'\nassert solution('2' == 'YES') == 'NO'\nassert solution('10' == 'YES') == 'YES'\nassert solution('4' == 'YES') == 'YES'\nassert solution('10' == 'YES') == 'NO'\n"
    },
    {
        "number": 4471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"4 3 2 1\") == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"1 1 1\") == \"NO\"\nassert solution(\"1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4') == 'YES'\nassert solution('5') == 'NO'\nassert solution('3') == 'NO'\nassert solution('1') == 'NO'\nassert solution('4') == 'YES'\n"
    },
    {
        "number": 4471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 <= t <= 10^5\n1 <= n <= 10^6\n1 <= a_1, a_2, a_i <= 100\n\n--------\n\n'''\n"
    },
    {
        "number": 4471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2) == \"YES\"\nassert solution(3) == \"NO\"\nassert solution(4) == \"NO\"\nassert solution(5) == \"NO\"\nassert solution(6) == \"NO\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 4 7\") == \"1\"\nassert solution(\"1 5 3 6 7\") == \"5\"\nassert solution(\"1 2 3 4 3 2 4 5\") == \"3\"\nassert solution(\"1 2 3 4 3 2 4 3 3\") == \"3\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n'''"
    },
    {
        "number": 4472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\",\"zcabd\",\"dbacz\"]) == \"4\"\nassert solution([\"1\",\"zcabd\",\"dbacz\"]) == \"0\"\n\n'''\nclass Solution:\n    def minimumSwap(self, n: int) -> int:\n        a=''\n        b=''\n        for i in range(n):\n            a+=chr(randint(97,122))\n        for i in range(n):\n            b+=chr(randint(97,122))\n        print('a=',a)\n        print('b=',b)\n        print('res=',self.swap(a,b))\n        return self.swap(a,b)\n        \n    def swap(self,a,b):\n        if a==b:\n            return ''\n        if len(a)==1:\n            return a\n        if len(b)==1:\n            return b\n        #print(a,b)\n        # a = 0, b = 1\n        # 0, 0: [ 'a', 'a', 'b' ]\n        # 0, 1: [ 'a', 'a', 'b']\n        # 1, 1: [ 'a', 'a']\n        # 1, 2: [ 'b', 'b']\n        # 2, 2: [ 'a', 'b']\n        # 2, 3: [ 'b', 'b']\n        #...\n        # \n        # print(a,b)\n        # 2, 2: [ 'a', 'b']\n        # 2, 3: [ 'a', 'b']\n        # 2, 4: [ 'b', 'b']\n        #...\n        # \n        # a, b = 0, 1\n        # 0, 0: [ 'a', 'a', 'b' ]\n        # 0, 1: [ 'a', 'a']\n        # 1, 1: [ 'a', 'b']\n        # 1, 2: [ 'b', 'b']\n        # 2, 2: [ 'a', 'b']\n        # 2, 3: [ 'b', 'b']\n        #...\n        # \n        # print(a,b)\n        # 2, 2: [ 'a', 'b']\n        # 2, 3: [ 'a', 'b']\n        # 2, 4: [ 'b', 'b']\n        # 2, 5: [ 'b', 'a']\n        #...\n        # \n        # a, b = 1, 1\n        # 0, 0: [ 'a', 'a', 'b' ]\n        # 0, 1: [ 'a', 'b']\n        # 1, 1: [ 'a', 'b']\n        # 1, 2: [ 'a', 'a']\n        # 1, 3: [ 'b', 'b']\n        # 1, 4: [ 'b', 'a']\n        # 1, 5: [ 'b', 'a']\n        #...\n        # \n        # print(a,b)\n        # 1, 2: [ 'a', 'b']\n        # 1, 3: [ 'a', 'b']\n        # 1, 4: [ 'b', 'b']\n        # 1, 5: [ 'b', 'a']\n        #...\n        # \n        # print(a,b)\n        # 1, 2: [ 'a', 'b']\n        # 1, 3: [ 'a', 'b']\n        # 1, 4: [ 'a', 'a']\n        # 1, 5: [ 'a', 'a']\n        #...\n        # \n        # print(a,b)\n        # 0, 0: [ 'a', 'a', 'b' ]\n        # 0, 1: [ 'a', 'a']\n        # 1, 1: [ 'a', 'b']\n        # 1, 2: [ 'a', 'b']\n        # 1, 3: [ 'a', 'a']\n        # 1, 4: [ 'b', 'b']\n        # 1, 5: [ 'b', 'a']\n        #...\n        # \n        # print(a,b)\n        # 0, 1: [ 'a', 'a', 'b' ]\n        # 0, 2: [ 'a', 'a']\n        # 1, 1: [ 'a', 'b']\n        # 1, 2: [ 'a', 'b']\n        # 1, 3: [ 'b', 'b']\n        # 1, 4: [ 'b', 'a']\n        # 1, 5: [ 'b', 'a']\n        #...\n        # \n        # print(a,b)\n        # 0, 1: [ 'a', 'a', 'b' ]\n        # 0, 2: [ 'a', 'a']\n        # 1, 1: [ 'a', 'b']\n        # 1, 2: [ 'a', 'b']\n        # 1, 3: [ 'a', 'a']\n        # 1, 4: [ 'b', 'b']\n        # 1, 5: [ 'b', 'a']\n        #..."
    },
    {
        "number": 4472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == '4'\nassert solution(2) == '0'\nassert solution(3) == '0'\nassert solution(4) == '4'\nassert solution(5) == '0'\n"
    },
    {
        "number": 4472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3) == 4\nassert solution(3) == 4\nassert solution(3) == 4\nassert solution(3) == 4\nassert solution(3) == 4\n"
    },
    {
        "number": 4472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 6\n\n\n\n\n\n\n\"\"\"\n\n\nclass Solution:\n    def findMinNumberOfMoves(self, nums: List[int]) -> int:\n        n = len(nums)\n        nums.sort()\n        m = 0\n        for i in range(n):\n            if nums[i] < nums[m]:\n                m = i\n        return 1 + m if nums[m] % 2!= 0 else 1 + (nums[m] // 2)\n"
    },
    {
        "number": 4472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1, 1) == 1\nassert solution(1, 2) == 2\nassert solution(1, 3) == 3\nassert solution(1, 4) == 4\nassert solution(1, 5) == 5\n"
    },
    {
        "number": 4472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 5\nassert solution(stdin) == 7\n\n\n------Python implementation of solution-------"
    },
    {
        "number": 4472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"zcabd\") == 7\nassert solution(\"dbacz\") == 5\nassert solution(\"zcabd\") == 4\nassert solution(\"zcabd\") == 2\nassert solution(\"zcabd\") == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(a=\"zcabd\") == 4\nassert solution(a=\"aab\", b=\"cba\") == 0\nassert solution(a=\"aabab\", b=\"cbaab\") == 5\nassert solution(a=\"abab\", b=\"abab\") == 4\nassert solution(a=\"abab\", b=\"abab\") == 0\n"
    },
    {
        "number": 4473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 2 3 1000000000 100 1 4') == '8'\nassert solution('5 1 10 5') == '99'\nassert solution('1 1000000000 1 6') == '7'\nassert solution('1 1 1000000000') == '5'\nassert solution('1 1 999999999') == '1'\n"
    },
    {
        "number": 4473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5037\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1 1000000000\") == \"1\"\nassert solution(\"1 10 5\") == \"3\"\nassert solution(\"1 1 999999999\") == \"4\"\nassert solution(\"1 1 999999999\") == \"5\"\nassert solution(\"1 1 999999999\") == \"6\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3 5 100 100 100 100 1\") == 8\nassert solution(\"2 3 5 100 100 1\") == 7\nassert solution(\"2 3 5 100 100 1000\") == -10\nassert solution(\"3 2 3 100 100 100 1000\") == 2\nassert solution(\"3 2 3 100 100 1000\") == -2\n"
    },
    {
        "number": 4473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 5\nassert solution(input()) == 11\nassert solution(input()) == 13\n"
    },
    {
        "number": 4473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1 4 1\"]) == \"1\"\nassert solution([\"1 100\"]) == \"1\"\nassert solution([\"2 100\"]) == \"1\"\nassert solution([\"3 100\"]) == \"1\"\nassert solution([\"4 100\"]) == \"1\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0'\n\n-----Constraints-----\n\n1 <= t <= 1000\n1 <= a, b, k <= 10^9\n\n\"\"\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == str(0)\n\n\"\"\""
    },
    {
        "number": 4474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"30\") == \"1\"\nassert solution(\"20\") == \"3\"\nassert solution(\"12\") == \"1\"\nassert solution(\"2\") == \"19\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(map(int,stdin.split())) == '1'\nassert solution(map(int,stdin.split())) == '3'\nassert solution(map(int,stdin.split())) == '9'\nassert solution(map(int,stdin.split())) == '13'\nassert solution(map(int,stdin.split())) == '27'\n"
    },
    {
        "number": 4474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2) == 13\nassert solution(3) == 3620\nassert solution(4) == 28\nassert solution(5) == 2420"
    },
    {
        "number": 4474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    input:\n    ) == \"28\"\n\nassert solution(\n    input:\n    ) == \"5\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '3'\n\n\"\"\""
    },
    {
        "number": 4474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(test_cases[0]) == '3'\nassert solution(test_cases[1]) == '18'\nassert solution(test_cases[2]) == '15'\nassert solution(test_cases[3]) == '13'\nassert solution(test_cases[4]) == '1000000000000000000'\n"
    },
    {
        "number": 4474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1000000000000000000'\n\n------Theme for Input/Output-----\nWe run the program each time because the given input is too long.\n\nfor _ in range(int(stdin)):\n    n = int(stdin.strip())\n    print(solution(stdin.strip()))\n"
    },
    {
        "number": 4474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"3620\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(sys.argv) == '1'\nassert solution(sys.argv) == '2'\nassert solution(sys.argv) == '3'\nassert solution(sys.argv) == '4'\nassert solution(sys.argv) == '5'\n"
    },
    {
        "number": 4475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    stdin,\n    int(input())\n) == str(\n    int(\n        input()\n    ) * int(\n        input()\n    )\n)\n\n----Time complexity: O(n^2)\n----Space complexity: O(1)\n----If you change any of the input numbers, you may get another time complexity.\n"
    },
    {
        "number": 4475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5,10,5,10) == 70\nassert solution(5,10,5,8) == 77\nassert solution(5,10,6,8) == 55\nassert solution(5,5,10,10) == 1000000000\nassert solution(5,5,5,5) == 1000000000\n"
    },
    {
        "number": 4475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 0 0\") == 0\nassert solution(\"0 0 0 0 0 1\") == 1\nassert solution(\"0 0 0 0 0 1 1\") == 0\nassert solution(\"0 0 0 0 0 1 1 1\") == 1\nassert solution(\"0 0 0 0 0 1 1 1 1\") == 0\n"
    },
    {
        "number": 4475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"70\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"70\"\nassert solution(stdin) == \"77\"\nassert solution(stdin) == \"177177\"\nassert solution(stdin) == \"999999999000000000\"\nassert solution(stdin) == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, [1, 1, 1, 2, 1]) == 50\nassert solution(1, [1, 1, 1, 2, 1]) == 50\nassert solution(1, [1, 1, 1, 2, 1]) == 15\nassert solution(1, [2, 1, 2, 2, 1]) == 9\nassert solution(1, [1, 1, 1, 2, 1]) == 4\n"
    },
    {
        "number": 4475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1, 10, 1, 5) == 70\nassert solution(1, 10, 1, 6) == 77\nassert solution(1, 10, 1, 7) == 55\nassert solution(1, 10, 1, 8) == 10\nassert solution(1, 10, 1, 9) == 1000000000\n"
    },
    {
        "number": 4475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"70\"\nassert solution(input()) == \"77\"\nassert solution(input()) == \"177177\"\nassert solution(input()) == \"999999999\"\nassert solution(input()) == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n
    },
    {
        "number": 4475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, 4) == 7, \"incorrect solution\"\nassert solution(7, 4) == 7, \"incorrect solution\"\nassert solution(3, 2) == 3, \"incorrect solution\"\nassert solution(1, 2) == 1, \"incorrect solution\"\nassert solution(4, 3) == 4, \"incorrect solution\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(1)\nassert solution(stdin) == str(0)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(4)\n"
    },
    {
        "number": 4476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, 2, 3, 10, 2, 4, 7, 9, 3) == 1\nassert solution(5, 2, 3, 10, 2, 4, 7, 9, 3) == 0\nassert solution(5, 2, 3, 10, 2, 4, 7, 9, 3) == 2\nassert solution(5, 2, 3, 10, 2, 4, 7, 9, 3) == 2\nassert solution(5, 2, 3, 10, 2, 4, 7, 9, 3) == 3\n"
    },
    {
        "number": 4476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(4) == 1\nassert solution(5) == 0\nassert solution(6) == 2\nassert solution(7) == 1\nassert solution(8) == 2\n"
    },
    {
        "number": 4476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 3 2') == 1\nassert solution('1 3 1') == 0\nassert solution('2 4 3') == 2\nassert solution('3 4 2') == 2\nassert solution('2 4 1') == 1\n"
    },
    {
        "number": 4476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\\\"\\\"\\\"\n'''\n"
    },
    {
        "number": 4476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5 3 2') == 2\nassert solution('5 3 2 7 4') == 2\nassert solution('5 3 2 4 7') == 2\nassert solution('5 3 2 4') == 0\nassert solution('5 3 2') == 0\n"
    },
    {
        "number": 4477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"13\"\n\"\"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 53\n"
    },
    {
        "number": 4477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"13\"\n\npass\n\n----Constraints----\n1 <= t <= 36\n1 <= x <= 9999\n\"\"\""
    },
    {
        "number": 4477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 13\n\n'''\n\nimport re"
    },
    {
        "number": 4477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"Your solution does not work!\"\nassert solution(stdin), \"Your solution does not work!\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\"]) == \"1\"\nassert solution([\"1\", \"11\"]) == \"2\"\nassert solution([\"1\", \"11\", \"111\", \"111\"]) == \"3\"\nassert solution([\"1\", \"111\", \"1111\", \"1111\"]) == \"4\"\nassert solution([\"1\", \"111\", \"1111\", \"11111\"]) == \"5\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1, \"11111\") == \"10\"\nassert solution(2, \"11111\") == \"1\"\nassert solution(3, \"11111\") == \"1\"\nassert solution(4, \"11111\") == \"1\"\nassert solution(1, \"2222\") == \"3\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(10) == 13\nassert solution(22) == 18\nassert solution(99999) == 17"
    },
    {
        "number": 4477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0) == 0\nassert solution(2) == 1\nassert solution(1) == 2\nassert solution(5) == 3\nassert solution(9) == 4\n"
    },
    {
        "number": 4477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"13\"\nassert solution(stdin) == \"90\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"66\""
    },
    {
        "number": 4478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 5 2\") == \"YES\"\nassert solution(\"3 1 3 1 1\") == \"YES\"\nassert solution(\"4 2\") == \"NO\"\nassert solution(\"4 5\") == \"YES\"\nassert solution(\"4 6\") == \"NO\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nclass Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        size = len(nums)\n        if size == 0:\n            return 0\n        \n        for i in range(size):\n            if nums[i]!= val:\n                nums[i] = nums[i+1]\n                nums[i+1] = val\n                \n        size = len(nums)\n        \n        for i in range(size-1, 0, -1):\n            if nums[i]!= val:\n                nums[i] = nums[i-1]\n                nums[i-1] = val\n                \n        size = len(nums)\n        \n        for i in range(size-1, -1, -1):\n            if nums[i]!= val:\n                nums[i] = nums[i+1]\n                nums[i+1] = val\n                \n        return size\n                "
    },
    {
        "number": 4478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"No\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    input:\n    \"3\"\n    ) == \"NO\"\n    \nassert solution(\n    input:\n    \"5\"\n    ) == \"YES\"\n    \nassert solution(\n    input:\n    \"3\"\n    ) == \"YES\"\n    \nassert solution(\n    input:\n    \"4\"\n    ) == \"NO\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 3 2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"1 1 1 1 1\") == \"NO\"\nassert solution(\"2 2 2 2 2 2\") == \"NO\"\n"
    },
    {
        "number": 4479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('[3,-1,0,2]') == 6\nassert solution('[2,-3,-1,5,-4]') == 13\nassert solution('[4,-2,3]') == 6\nassert solution('[2,-3,-1]') == 6\nassert solution('[3,-1,0]') == 6\n"
    },
    {
        "number": 4479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin = \"10 5 -4 0 2 -3\") == 6\nassert solution(stdin = \"1 2 -3 -1 0 4 -2 -3 -4\") == -1\nassert solution(stdin = \"1 1 -2 -3 4 -4 -5 -6\") == 6\nassert solution(stdin = \"1 1 2 -3 4 -4 -5 -6 -7\") == -1\nassert solution(stdin = \"1 -2 3 4 5 -4 -5 -6 -7\") == 6\n"
    },
    {
        "number": 4479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2\\n3\") == \"5\"\nassert solution(\"2\\n3\\n4\") == \"6\"\nassert solution(\"1\\n2\\n3\\n4\") == \"5\"\nassert solution(\"1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n2\\n3\") == \"3\"\n"
    },
    {
        "number": 4479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('4 3') == '5'\nassert solution('4 2') == '3'\nassert solution('3 5') == '6'\nassert solution('3 3') == '13'\nassert solution('3 2') == '13'\n"
    },
    {
        "number": 4479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('4-1') == '-4'\nassert solution('5-3') == '-2'\nassert solution('4-2') == '-4'\nassert solution('4-1') == '-4'\nassert solution('5-1') == '-5'\n"
    },
    {
        "number": 4479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4,2,3\") == 5\nassert solution(\"3,-1,0,2\") == 6\nassert solution(\"3,-1,0,2\") == 13\nassert solution(\"4,-2,3\") == 6\nassert solution(\"5,-2,-2,1\") == 6\n"
    },
    {
        "number": 4479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"[4,-2,3]\"), 5\nassert solution(\"[3,-1,0,2]\"), 6\nassert solution(\"[2,-3,2,5,2]\"), 13"
    },
    {
        "number": 4479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(sum(map(int, stdin.split())))\n\"\"\"\n\nclass Solution:\n    def modifyTheArray(self, A: List[int], K: int) -> List[int]:\n        n = len(A)\n        answer = []\n        for i in range(n-1, -1, -1):\n            answer.append(A[i])\n            A[i] = -A[i]\n            for j in range(0, i):\n                if A[j] < A[i]:\n                    A[j] *= -1\n        for i in range(n-1, -1, -1):\n            answer[i] *= -1\n        for i in range(0, K):\n            answer.append(A[n-1])\n            A[n-1] = -A[n-1]\n            for j in range(n-2, -1, -1):\n                if A[j] < A[n-2]:\n                    A[j] *= -1\n        for i in range(n-1, -1, -1):\n            answer[i] *= -1\n        return answer"
    },
    {
        "number": 4479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('4 1 2') == 5\nassert solution('3 -1 -2 1') == 6\nassert solution('2 -3 -4 -5 -6') == 13\n"
    },
    {
        "number": 4480,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3,0,0,2,2,4,0,1,2,5,0,0,0,0,0,0,5,3,6,6,5,0,1,2,0,1,0,0,3,2,0,0,1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 4480,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == '0'\nassert solution(2) == '10'\nassert solution(3) == '0'\nassert solution(4) == '0'\nassert solution(5) == '0'\n"
    },
    {
        "number": 4480,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\nstdin.split('\\n')) == 'true'\nassert solution(\nstdin.split('\\n')) == 'false'\n"
    },
    {
        "number": 4480,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"true\"\nassert solution(stdin) == \"false\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['', '', '', '', '']) == 'true'\nassert solution(['', '', '', '', '', '']) == 'true'\nassert solution(['', '', '', '', '', '', '', '', '', '']) == 'true'\nassert solution(['', '', '', '', '', '', '', '', '', '', '']) == 'true'\nassert solution(['', '', '', '', '', '', '', '', '', '', '']) == 'true'\n"
    },
    {
        "number": 4480,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([0, 2, 1, -6, 6, 7, 9, 1, 2, 0, 1]) == \"true\"\nassert solution([0, 2, 1, -6, 6, 7, 9, 1, 2, 0, 1]) == \"false\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"true\"\nassert solution(stdin) == \"false\""
    },
    {
        "number": 4480,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'true'\nassert solution(stdin) == 'false'\nassert solution(stdin) == 'false'\n"
    },
    {
        "number": 4480,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('0') == '0'\nassert solution('2') == '1'\nassert solution('1') == '0'\nassert solution('5') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4480,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"true\"\nassert solution(stdin) == \"false\"\nassert solution(stdin) == \"false\"\nassert solution(stdin) == \"false\"\nassert solution(stdin) == \"false\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"7\") == \"beat\"\nassert solution(\"7\") == \"vet\"\nassert solution(\"7\") == \"beet\"\nassert solution(\"7\") == \"bed\"\nassert solution(\"7\") == \"bet\"\n\"\"\"\n\nclass Solution:\n    def numberOfVowels(self, string: str) -> int:\n        vowels = set(['a', 'e', 'i', 'o', 'u'])\n        count = 0\n        for c in string:\n            if c in vowels:\n                count += 1\n        return count"
    },
    {
        "number": 4481,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"beat\", \"bet\"]) == \"bet\"\nassert solution([\"vet\", \"beet\", \"bed\", \"bet\"]) == \"beet vet bed bet\"\nassert solution([\"beat\", \"beet\"]) == \"bet\"\nassert solution([\"bet\", \"bet\"]) == \"beet\"\nassert solution([\"vet\", \"beet\", \"bed\", \"bet\"]) == \"bet vet bed bet\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"beat\", \"vet\", \"beet\", \"bed\", \"vet\", \"bet\"]) == \"beat, vet, bet, bed, beat, vet\"\nassert solution([\"beat\", \"vet\", \"beet\", \"bed\", \"vet\", \"bet\"]) == \"beat, vet, bet, bed, beat, vet\"\nassert solution([\"beat\", \"vet\", \"beet\", \"bed\", \"vet\", \"bet\"]) == \"beat, vet, bet, bed, beat, vet\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\"), \"No candidates\"\n\nassert solution(\"beat\"), \"No candidates\"\n\nassert solution(\"vet\"), \"No candidates\"\n\nassert solution(\"beet\"), \"No candidates\"\n\nassert solution(\"bed\"), \"No candidates\""
    },
    {
        "number": 4481,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'beat'\nassert solution(stdin) =='vet'\nassert solution(stdin) == 'beet'\nassert solution(stdin) == 'bed'\nassert solution(stdin) == 'bet'\n"
    },
    {
        "number": 4481,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"beat\"\nassert solution(\"2\") == \"vet\"\nassert solution(\"3\") == \"beet\"\nassert solution(\"4\") == \"bed\"\nassert solution(\"5\") == \"bet\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"bet and vet\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"bed\") == \"beat\"\nassert solution(\"bed\") == \"bet\"\nassert solution(\"veet\") == \"beet\"\nassert solution(\"hay\") == \"bed\"\nassert solution(\"hay\") == \"bet\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"et\"\nassert solution(\"1\") == \"e\"\nassert solution(\"2\") == \"be\"\nassert solution(\"3\") == \"ed\"\nassert solution(\"4\") == \"be\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"7\") == [\"beat\", \"vet\", \"beet\", \"bed\", \"vet\", \"bet\", \"beet\", \"bed\"]\nassert solution(\"2\") == [\"beat\", \"bet\", \"beet\", \"bed\", \"vet\", \"bet\", \"bet\", \"bet\"]\nassert solution(\"1\") == [\"beat\", \"beat\", \"bet\", \"beet\", \"bet\", \"bet\", \"bet\", \"bet\"]\n"
    },
    {
        "number": 4482,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"7\"\nassert solution(\"5\") == \"7\"\nassert solution(\"6\") == \"15\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '8'\n"
    },
    {
        "number": 4482,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"10 5 3 4 3 2 1\") == \"9\"\nassert solution(\"2 1 2 1 1 1 1 1\") == \"9\"\nassert solution(\"6 5 4 4 4 2 4 2\") == \"11\"\nassert solution(\"8 8 8\") == \"10\"\nassert solution(\"1 1 1 1 1\") == \"9\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '8'\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"8\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(6,8) == 8\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"8\"\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('a_2') == 1\nassert solution('a_3') == 2\nassert solution('a_4') == 3\nassert solution('a_5') == 3\nassert solution('a_6') == 4\n"
    },
    {
        "number": 4482,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    input:\n    \"2\"\n    \"4 8\"\n    ) == 8\n\nimport math\nimport sys\n\nread = sys.stdin.readline"
    },
    {
        "number": 4482,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"8\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"84\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    (\"1234\", \"150\", \"100\")\n    ) == \"84\", \"test_case_1\"\nassert solution(\n    (\"1234\", \"150\", \"101\")\n    ) == \"84\", \"test_case_2\"\nassert solution(\n    (\"1234\", \"150\", \"102\")\n    ) == \"84\", \"test_case_3\"\nassert solution(\n    (\"1234\", \"150\", \"100\")\n    ) == \"84\", \"test_case_4\"\nassert solution(\n    (\"1234\", \"150\", \"101\")\n    ) == \"84\", \"test_case_5\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 84\n'''"
    },
    {
        "number": 4483,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('A') == '84', 'incorrect'\nassert solution('B') == '84', 'incorrect'\nassert solution('C') == '100', 'incorrect'\nassert solution('D') == '100', 'incorrect'\nassert solution('E') == '100', 'incorrect'\n"
    },
    {
        "number": 4483,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == \"84\"\nassert solution(5) == \"1084\"\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"500\"), \"500\"\nassert solution(\"200\"), \"200\"\nassert solution(\"900\"), \"900\"\nassert solution(\"600\"), \"600\"\nassert solution(\"1234\"), \"1234\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]) == \"1084\"\nassert solution([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]) == \"1084\"\nassert solution([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"]) == \"1084\"\nassert solution([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\"]) == \"1084\"\nassert solution([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\"]) == \"1084\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 1\") == \"84\"\nassert solution(\"2 4\") == \"85\"\nassert solution(\"0 1 2\") == \"15\"\nassert solution(\"0 1 4\") == \"5\"\nassert solution(\"1 2 3\") == \"10\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input), \"Invalid input\"\nassert solution(input) == \"1084\", \"Incorrect result\"\nassert solution(input) == \"84\", \"Incorrect result\"\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"4\", \"1\"]) == \"100\"\nassert solution([\"2\", \"2\"]) == \"110\"\nassert solution([\"5\", \"5\"]) == \"600\"\nassert solution([\"3\", \"3\"]) == \"120\"\nassert solution([\"2\", \"2\", \"1\"]) == \"20\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"0,1,0,0,0,0,0,0,0,0\"\n) == '8'\n"
    },
    {
        "number": 4484,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 8\nassert solution(input()) == 'We have 8 possible arrangements'"
    },
    {
        "number": 4484,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['1', '1']) == '1'\nassert solution(['1', '2', '1']) == '2'\nassert solution(['2', '2']) == '3'\nassert solution(['3', '3']) == '4'\nassert solution(['1', '2', '3']) == '6'\n"
    },
    {
        "number": 4484,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '8'\n\nNOTE: If the number of pairs is less than 10, then it is not possible. The case n=10 will have a value of 0.\n"
    },
    {
        "number": 4484,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"15\"\n\"\"\"\nfrom typing import List\nfrom itertools import permutations\n\nclass Solution:\n    def snakesAndLadders(self, board: List[str]) -> int:\n        N = len(board)\n        m, n = 0, 0\n        # Looping through the board, and selecting the midpoint of the board\n        for i, row in enumerate(board):\n            for j, letter in enumerate(row):\n                if letter == 'N':\n                    n = j\n                if letter == 'M':\n                    m = i\n                if letter == 'S':\n                    if j - 1 == n or j + 1 == m:\n                        continue\n                    if board[n + 1][j - 1] == 'B':\n                        continue\n                    if board[n + 1][j + 1] == 'B':\n                        continue\n                    continue\n        # We will do the following:\n        # 1. Find the midpoint of the board\n        # 2. We can't have two adjacent monkeys on a line, so we need to reverse the monkeys\n        # 3. The list of snakes and ladders, we will end up with three cases:\n        #    a) Snakes and ladders, then we will have the following restrictions:\n        #        snakes: Snakes can not be on the same line as ladders\n        #        ladders: Ladders can not be on the same line as snakes\n        #    b) Snakes and ladders, then we will have the following restrictions:\n        #        snakes: Snakes can not be on the same line as ladders\n        #        ladders: Ladders can not be on the same line as snakes\n        #    c) Snakes and ladders, then we will have the following restrictions:\n        #        snakes: Snakes can not be on the same line as ladders\n        #        ladders: Ladders can not be on the same line as snakes\n        #    d) Snakes and ladders, then we will have the following restrictions:\n        #        snakes: Snakes can not be on the same line as ladders\n        #        ladders: Ladders can not be on the same line as snakes\n        mid = (n + m) // 2\n        if board[mid][m] == 'B':\n            return 0\n        else:\n            return len(board[mid]) - len(board[mid][:m] + board[mid][m + 1:]) + 1\n\nsolution = Solution()\n\nn, m = list(map(int, input().strip().split()))\nboard = list(map(str, input().strip().split()))\nprint(solution.snakesAndLadders(board))"
    },
    {
        "number": 4484,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"8\"\nassert solution(\"2 1\") == \"4\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['A','B']) == '1'\nassert solution(['C','A','D']) == '2'\nassert solution(['C','A','B','D','E','F']) == '1'\nassert solution(['A','C','A','B','C','B','A','E','F']) == '2'\nassert solution(['A','C','B','C','B','A','C','A','E','F']) == '4'\n"
    },
    {
        "number": 4484,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['a', 'c', 'b']) == ['c', 'b', 'a']\nassert solution(['d', 'c', 'b']) == ['c', 'd', 'b']\nassert solution(['c', 'b', 'a']) == ['a', 'b', 'c']\nassert solution(['a', 'd', 'b']) == ['c', 'b', 'a']\nassert solution(['a', 'd', 'b']) == ['b', 'd', 'a']\n"
    },
    {
        "number": 4484,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"8\"\n\nThe testcases are generated using the standard input.\n\nNote: The testcases are generated in the following way.\n\nThe first line of the testcases contains a single integer N.\nThe second line contains N space separated integers representing the size of N dogs and M monkeys.\n\nThe third line of the testcases contains two space separated integers, representing the number of dogs and monkeys.\nFor example, if the testcases input is 3, and the corresponding output is 4, then the corresponding input value is 2, and the corresponding output is 3.\n\"\"\"\n\nN, M = map(int, input().split())\ndogs = list(map(int, input().split()))\nmonkeys = list(map(int, input().split()))\n\ndogs.sort()\nmonkeys.sort()"
    },
    {
        "number": 4485,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"POSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution(1) == 'POSSIBLE'\nassert solution(2) == 'IMPOSSIBLE'\nassert solution(3) == 'POSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(sample_input) == \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"POSSIBLE\", \"1 2\"\nassert solution(\"1 3\") == \"IMPOSSIBLE\", \"1 3\"\nassert solution(\"2 1\") == \"POSSIBLE\", \"2 1\"\nassert solution(\"2 3\") == \"IMPOSSIBLE\", \"2 3\""
    },
    {
        "number": 4485,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n1 2\n1 3\n2 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\n\"\"\"\n5 3\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n\"\"\") == \"POSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('8') == 'POSSIBLE'\nassert solution('4') == 'IMPOSSIBLE'"
    },
    {
        "number": 4485,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 2 3\") == \"POSSIBLE\"\nassert solution(\"1 1\") == \"IMPOSSIBLE\"\nassert solution(\"1 4\") == \"IMPOSSIBLE\"\nassert solution(\"2 1\") == \"IMPOSSIBLE\"\nassert solution(\"2 4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 2') == 'POSSIBLE'\nassert solution('2 3') == 'IMPOSSIBLE'\n\n-----DRY RUN-----\nInput:\nN M\n1 2\n1 3\n2 3\n\nOutput:\nPOSSIBLE\n\n-----SAMPLE INPUT-----\n1 2\n1 3\n2 3\n\n-----SAMPLE OUTPUT-----\nIMPOSSIBLE"
    },
    {
        "number": 4485,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 1\") == \"0\"\nassert solution(\"3 2\") == \"0\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"POSSIBLE\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"atcoder\", \"s\", \"dc\", \"ab\", \"c\", \"t\", \"ace\"]) == \"cacdr\"\nassert solution([\"atcoder\", \"t\", \"ab\", \"c\", \"s\", \"q\", \"d\", \"c\", \"t\", \"r\"]) == \"cacdr\"\nassert solution([\"atcoder\", \"t\", \"c\", \"s\", \"q\", \"d\", \"c\", \"t\", \"r\"]) == \"cacdr\"\n\"\"\"\nimport re"
    },
    {
        "number": 4486,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('cd') == 'cde'\nassert solution('aeg') == 'aeg'\nassert solution('aegc') == 'aegc'\n"
    },
    {
        "number": 4486,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nassert solution(\"acdr\") == \"acdr\"\nassert solution(\"atcoder\") == \"acdr\""
    },
    {
        "number": 4486,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nassert solution(\"abc\") == \"cab\"\nassert solution(\"abcdefg\") == \"abcdefg\"\nassert solution(\"abcde\") == \"cab\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"acdr\""
    },
    {
        "number": 4486,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == 'acdr'\n"
    },
    {
        "number": 4486,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"acdr\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nassert solution(\"atcoder\") == \"acdr\"\nassert solution(\"atcoder\") == \"acdr\"\nassert solution(\"atcoder\") == \"acdr\"\nassert solution(\"atcoder\") == \"acdr\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nassert solution(\"qwertyuiop\") == \"qwertyuiop\"\nassert solution(\"Codewars\") == \"CodeWars\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('rng') == 'YES', 'rng' not in solution('')\nassert solution('rng') == 'NO', 'rng' not in solution('rng')\nassert solution('rng') == 'YES', 'rng' not in solution('rng')\nassert solution('rng') == 'YES', 'rng' not in solution('rng')\nassert solution('rng') == 'NO', 'rng' not in solution('rng')\n"
    },
    {
        "number": 4487,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"cat dog dog\"), \"Cannot find a word chain from both strings\""
    },
    {
        "number": 4487,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"rng\",\"gorilla\",\"apple\") == \"YES\", \"The result of the example does not evaluate to YES\"\nassert solution(\"rr\",\"gg\",\"ab\") == \"NO\", \"The result of the example does not evaluate to NO\"\n'''"
    },
    {
        "number": 4487,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['RNG', 'GOL', 'AAPL', 'OOO', 'O']) == 'YES'\nassert solution(['RNG', 'GOL', 'AAPL', 'O', 'O']) == 'NO'\n"
    },
    {
        "number": 4487,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"rng\") == \"YES\", \"Empty word chain\"\nassert solution(\"rng\") == \"NO\", \"Single word chain\"\nassert solution(\"rng\") == \"YES\", \"Multiple word chains\"\n\n<missing code>\n\n<added code>\n"
    },
    {
        "number": 4487,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"gogogou\") == \"NO\"\nassert solution(\"b\") == \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\"\n\n\nclass Solution:\n    def word_chain(self, s: str) -> bool:\n        dic = {}\n        # s = list(s)\n        for ch in s:\n            if ch in dic:\n                dic[ch].append(ch)\n            else:\n                dic[ch] = [ch]\n        # print(dic)\n        for ch in s:\n            if ch in dic:\n                # print(dic[ch])\n                ch_list = dic[ch]\n                # print(ch_list)\n                if len(ch_list) > 0:\n                    for i in range(len(ch_list) - 1):\n                        if ch_list[i] == ch_list[i + 1]:\n                            return True\n            else:\n                return False\n"
    },
    {
        "number": 4487,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('rng') == 'YES', 'rng'\nassert solution('gorgon') == 'NO', 'gorgon'\nassert solution('apple') == 'NO', 'apple'\nassert solution('orange') == 'NO', 'orange'\nassert solution('apple') == 'YES', 'apple'\n"
    },
    {
        "number": 4487,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"rng\") == \"YES\"\nassert solution(\"gora\") == \"NO\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"rng\") == \"YES\"\nassert solution(\"rnga\") == \"NO\"\nassert solution(\"rngag\") == \"NO\"\nassert solution(\"gor\") == \"NO\"\nassert solution(\"apple\") == \"YES\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(6, 2) == \"GREATER\"\nassert solution(20, 10) == \"LESS\"\nassert solution(24, 10) == \"LESS\"\nassert solution(16, 1) == \"LESS\"\nassert solution(20, 1) == \"LESS\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"44\") == \"GREATER\"\nassert solution(\"32\") == \"LESS\"\nassert solution(\"1\") == \"EQUAL\"\nassert solution(\"0\") == \"EQUAL\"\nassert solution(\"23\") == \"LESS\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"GREATER\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"36\") == \"GREATER\"\nassert solution(\"24\") == \"GREATER\"\nassert solution(\"0\") == \"EQUAL\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(36,24) == \"GREATER\"\nassert solution(36,24) == \"LESS\"\nassert solution(24,36) == \"EQUAL\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'GREATER'\n"
    },
    {
        "number": 4488,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"GREATER\"\nassert solution(\"4\") == \"LESS\"\nassert solution(\"10\") == \"EQUAL\"\nassert solution(\"13\") == \"EQUAL\"\nassert solution(\"3\") == \"EQUAL\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"36\") == \"GREATER\"\nassert solution(\"24\") == \"LESS\"\nassert solution(\"0\") == \"EQUAL\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"GREATER\"\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline"
    },
    {
        "number": 4488,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1,2) == 1\nassert solution(3,5) == 2\nassert solution(16,6) == 3\nassert solution(34,7) == 4\nassert solution(38,4) == 2\n"
    },
    {
        "number": 4489,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(s1) == \"apple\"\nassert solution(s2) == \"orange\"\nassert solution(s3) == \"apple\"\nassert solution(s4) == \"apple\"\nassert solution(s5) == \"apple\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '2'"
    },
    {
        "number": 4489,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"abcdef\") == \"abcdef\"\nassert solution(\"abcabcabc\") == \"abcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabc\") == \"abcabc\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"7\") == \"3\"\nassert solution(\"1\") == \"3\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"apple\") == \"orange\"\nassert solution(\"orange\") == \"apple\"\nassert solution(\"apple\") == \"orange\"\nassert solution(\"grape\") == \"apple\"\nassert solution(\"apple\") == \"orange\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"B\") == \"G\"\nassert solution(\"C\") == \"T\"\nassert solution(\"D\") == \"A\"\nassert solution(\"E\") == \"A\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"C\") == \"T\"\nassert solution(\"G\") == \"G\"\nassert solution(\"T\") == \"C\"\nassert solution(\"A\") == \"T\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    'A') == 'T'\nassert solution('A') == 'G'\nassert solution('G') == 'T'\nassert solution('C') == 'A'\nassert solution('G') == 'A'\n"
    },
    {
        "number": 4490,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'T'\n"
    },
    {
        "number": 4490,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 'T'\nassert solution(input()) == 'C'\nassert solution(input()) == 'G'\nassert solution(input()) == 'A'"
    },
    {
        "number": 4490,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'A'\nassert solution('T') == 'C'\n"
    },
    {
        "number": 4490,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"A\"\nassert solution(\"T\") == \"A\"\nassert solution(\"T\") == \"C\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"A\"\nassert solution(\"G\") == \"T\"\nassert solution(\"T\") == \"G\"\nassert solution(\"T\") == \"A\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('A') == 'A'\nassert solution('G') == 'T'\nassert solution('T') == 'G'\nassert solution('C') == 'A'\nassert solution('T') == 'G'\n"
    },
    {
        "number": 4490,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"C\") == \"C\"\nassert solution(\"G\") == \"G\"\nassert solution(\"T\") == \"T\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, 3, 2, 1, 4, 1, 2, 2, 3) == 14\n"
    },
    {
        "number": 4491,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"14\"\nassert solution(\"5\") == \"3\"\nassert solution(\"3 2 2 4 1\") == \"3\"\nassert solution(\"2 2 2 4\") == \"1\"\nassert solution(\"2 2 2 4 3\") == \"3\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    (\n    N\n    1\n    2\n    3\n    4\n    5\n    )\n    ) == 14\n"
    },
    {
        "number": 4491,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '14'\n\n'''"
    },
    {
        "number": 4491,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 14, \"The number of collected candies should be 14\"\n\"\"\"\nimport sys\nfrom collections import deque\n\ninput = sys.stdin.readline\n\nN = int(input().strip())\nA = [int(i) for i in input().strip().split()]\n\nmax_candies = 0"
    },
    {
        "number": 4491,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(test_input) == 16\n"
    },
    {
        "number": 4491,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"14\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"14\"\nassert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5\n3 2 2 4 1\n1 2 2 2 1\n\n1 2 2 2 1\n1 2 2 2 2\n\n\"\"\"\n) == \"14\"\n\nassert solution(\n\"\"\"\n5\n3 2 2 4 1\n3 3 3 4 1\n1 3 3 3 2\n\n\"\"\"\n) == \"14\"\n\nassert solution(\n\"\"\"\n5\n3 2 2 4 1\n3 3 3 4 1\n1 3 3 3 2\n\n1\n2\n3\n\n\"\"\"\n) == \"14\"\n\nassert solution(\n\"\"\"\n5\n3 2 2 4 1\n3 3 3 4 1\n1 3 3 3 2\n1 1 1 1\n\n\"\"\"\n) == \"14\"\n\nassert solution(\n\"\"\"\n5\n3 2 2 4 1\n3 3 3 4 1\n1 3 3 3 2\n1 1 1 1\n\n\"\"\"\n) == \"14\""
    },
    {
        "number": 4492,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\n\"\"\"\nimport sys\nfrom collections import defaultdict\nimport collections"
    },
    {
        "number": 4492,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '5'\nassert solution(input().split()) == '10'\nassert solution(input().split()) == '10'\nassert solution(input().split()) == '10'\n\nprint(\"The solution is:\", solution(input()))"
    },
    {
        "number": 4492,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 2, 3, 4, 5, 6, 7) == 1\nassert solution(1, 2, 3, 4, 5, 6, 7, 1) == 1\nassert solution(1, 2, 3, 4, 5, 6, 7, 2) == 1\nassert solution(1, 2, 3, 4, 5, 6, 7, 3) == 1\nassert solution(1, 2, 3, 4, 5, 6, 7, 4) == 1\n"
    },
    {
        "number": 4492,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 2, 2) == 1, \"solution function must return 1\"\nassert solution(3, 2, 3) == 2, \"solution function must return 2\"\nassert solution(3, 2, 4) == 1, \"solution function must return 1\"\nassert solution(3, 3, 2) == 1, \"solution function must return 1\"\nassert solution(3, 3, 3) == 2, \"solution function must return 2\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 3\"), \"1\"\nassert solution(\"2 2 2\"), \"1\"\nassert solution(\"1 1\"), \"0\"\nassert solution(\"2 2 3\"), \"1\"\nassert solution(\"2 2 4\"), \"1\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input() == \"6 3\") == 1, \"the function returns false\""
    },
    {
        "number": 4492,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '1'\nassert solution(inp) == '2'\nassert solution(inp) == '2'\nassert solution(inp) == '1'\nassert solution(inp) == '2'\n"
    },
    {
        "number": 4492,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5 5 6 7 8 9 0\") == \"1\"\nassert solution(\"1 2 3 4 5 5 6 7 8 9 0\") == \"2\"\nassert solution(\"1 2 3 4 5 5 6 7 8 9 0\") == \"1 2 2 4 4 6 5 6 4\"\nassert solution(\"1 2 3 4 5 5 6 7 8 9 0\") == \"2 2 2 2 2\"\nassert solution(\"1 2 3 4 5 5 6 7 8 9 0\") == \"1 2 3 2 2\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 4493,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 0 1') == 'Yes'\nassert solution('2 1 2') == 'No'\nassert solution('1 0 1') == 'No'\nassert solution('2 1 2') == 'No'\nassert solution('1 0 1') == 'Yes'\n"
    },
    {
        "number": 4493,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 0 1\") == \"Yes\"\nassert solution(\"2 1 2\") == \"No\"\nassert solution(\"1 0 1\") == \"No\"\nassert solution(\"2 1 2\") == \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n"
    },
    {
        "number": 4493,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"Yes\"\n\n\"\"\"\n\n\nimport sys\nimport io"
    },
    {
        "number": 4493,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 'Yes'\n"
    },
    {
        "number": 4493,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n"
    },
    {
        "number": 4493,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 0 1\") == \"Yes\"\nassert solution(\"2 1 2\") == \"No\"\nassert solution(\"1 0 1\") == \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 0 1') == 'Yes'\nassert solution('1 0 1 2') == 'Yes'\nassert solution('1 0 1 2 3') == 'No'\nassert solution('2 1 2') == 'No'\nassert solution('2 0 1') == 'No'\n"
    },
    {
        "number": 4493,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 0 1') == 'Yes'\nassert solution('2 1 2') == 'No'\nassert solution('1 0 1') == 'No'\nassert solution('2 1 2') == 'Yes'\n"
    },
    {
        "number": 4493,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"ABC\"\n) == \"ARC\"\nassert solution(\n    \"A\"\n) == \"ARC\"\nassert solution(\n    \"ABC\"\n) == \"ABC\"\nassert solution(\n    \"A\"\n) == \"ABC\"\nassert solution(\n    \"ARC\"\n) == \"ARC\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"ABC\") == \"ARC\", \"Expected \\\"ABC\\\" for the first line\"\nassert solution(\"ARC\") == \"ABC\", \"Expected \\\"ARC\\\" for the second line\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == \"ARC\", 'Expected ARC, got {}'.format(solution(\"ABC\"))\nassert solution(\"ARC\") == \"ABC\", 'Expected ABC, got {}'.format(solution(\"ARC\"))"
    },
    {
        "number": 4494,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    'ABC'\n) == 'ARC'\nassert solution(\n    'ARC'\n) == 'ABC'\nassert solution(\n    'ABC'\n) == 'ARC'\nassert solution(\n    'ABC'\n) == 'ARC'\nassert solution(\n    'ABC'\n) == 'ARC'\n"
    },
    {
        "number": 4494,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(st) == \"ARC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(str) == \"ARC\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4494,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\nassert solution('ARC') == 'ARC'\nassert solution('ABC') == 'ABC'\nassert solution('ABC') == 'ARC'\n"
    },
    {
        "number": 4494,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ABC\"), \"ERROR\"\nassert solution(\"ARC\"), \"ERROR\"\nassert solution(\"ABC\"), \"ERROR\"\nassert solution(\"ABC\"), \"ERROR\"\nassert solution(\"ARC\"), \"ERROR\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ABC\") == \"ARC\"\nassert solution(\"ABC\") == \"ARC\"\nassert solution(\"ABC\") == \"ARC\"\nassert solution(\"ABC\") == \"ARC\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(n, x) == 3\n\n-----Tests-----\n>>> n = 4\n>>> x = 2\n>>> solution(n, x)\n3\n\n>>> n = 8\n>>> x = 6\n>>> solution(n, x)\n2\n\n>>> n = 10\n>>> x = 3\n>>> solution(n, x)\n2\n\n>>> n = 0\n>>> x = 0\n>>> solution(n, x)\n0\n\n>>> n = 1\n>>> x = 1\n>>> solution(n, x)\n0\n\n>>> n = 9\n>>> x = 2\n>>> solution(n, x)\n0\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"0\""
    },
    {
        "number": 4495,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(4, 8) == 3\nassert solution(4, 2) == 3\nassert solution(2, 4) == 1\nassert solution(2, 3) == 1\nassert solution(2, 7) == 2\n"
    },
    {
        "number": 4495,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"5 5 6\") == \"3\"\nassert solution(\"1 3\") == \"0\"\nassert solution(\"1 3 5 6\") == \"0\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, 1) == \"1\"\nassert solution(2, 1) == \"2\"\nassert solution(3, 1) == \"1\"\nassert solution(4, 1) == \"1\"\nassert solution(5, 1) == \"1\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    a = int(input()),\n    b = int(input()),\n    x = int(input())\n    ) == True\n"
    },
    {
        "number": 4495,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\na b x\n) == '3'\n"
    },
    {
        "number": 4495,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4495,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()), \"The input is incorrect\"\nassert solution(\"5\") == \"1\", \"The input is incorrect\"\nassert solution(\"1.5\") == \"1\", \"The input is incorrect\"\nassert solution(\"10.5\") == \"2\", \"The input is incorrect\"\nassert solution(\"2\") == \"1\", \"The input is incorrect\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(a, b, x) == 3\n"
    },
    {
        "number": 4496,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('23') == 'Christmas'\nassert solution('24') == 'Christmas'\nassert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas'\nassert solution('23') == 'Christmas'\n"
    },
    {
        "number": 4496,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(25) == \"Christmas\"\nassert solution(24) == \"Christmas\"\nassert solution(23) == \"Christmas\"\nassert solution(22) == \"Christmas\"\nassert solution(21) == \"Christmas\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0123456789\") == \"23456789\"\nassert solution(\"0123456789\") == \"0248510\"\nassert solution(\"0123456789\") == \"0248510\"\nassert solution(\"0123456789\") == \"0248510\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"C\"\nassert solution(\"11\") == \"C#\"\nassert solution(\"2\") == \"E\"\nassert solution(\"1\") == \"E#\"\nassert solution(\"3\") == \"F\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(25) == \"Christmas\"\nassert solution(23) == \"Christmas Eve\"\nassert solution(22) == \"Christmas Eve Eve\"\nassert solution(23) == \"Christmas Eve Eve\""
    },
    {
        "number": 4496,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve\"\nassert solution(\"22\") == \"Christmas Eve Eve\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(24) == \"Christmas\"\nassert solution(25) == \"Christmas Eve\"\nassert solution(22) == \"Christmas Eve Eve\"\nassert solution(23) == \"Christmas Eve Eve\"\nassert solution(22) == \"Christmas Eve Eve\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve'\nassert solution('25') == 'Christmas Eve Eve'\n"
    },
    {
        "number": 4496,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(25) == 'Christmas', 'Expected Christmas to be returned from the function'"
    },
    {
        "number": 4496,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Christmas\"\nassert solution(stdin) == \"Christmas\"\nassert solution(stdin) == \"Christmas\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(string) == str\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"4\"\n\n\"\"\"\n\nclass Solution:\n    def divisiblesum(self, n: int) -> str:\n        \n        dp = [[0 for i in range(n+1)] for j in range(n+1)]\n        \n        dp[0][0] = 1\n        \n        for i in range(1, n+1):\n            dp[i][0] = 0\n            dp[i][i] = 1\n        \n        \n        for i in range(1, n+1):\n            for j in range(1, i):\n                if i%j == 0:\n                    dp[i][j] = dp[i][j] + dp[i][i-j]\n        \n        \n        res = ''\n        \n        for i in range(1, n+1):\n            res = res + str(dp[i][n])\n        \n        return res\n"
    },
    {
        "number": 4497,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == 1\nassert solution(5) == 2\nassert solution(18) == 3\nassert solution(3) == 2\nassert solution(1) == 1\n\n'''"
    },
    {
        "number": 4497,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == 4, '5 is not a solution'\nassert solution(13) == 2, '13 is not a solution'\nassert solution(12) == 0, '12 is not a solution'\nassert solution(1) == 0, '1 is not a solution'\nassert solution(0) == 0, '0 is not a solution'\n"
    },
    {
        "number": 4497,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"1\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1') == 1\nassert solution('5') == 0\nassert solution('0') == 0\nassert solution('4') == 4\nassert solution('0') == 0\n"
    },
    {
        "number": 4497,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 4, 'incorrect'\nassert solution(10) == 4, 'incorrect'\nassert solution(20) == 4, 'incorrect'\nassert solution(37) == 4, 'incorrect'\nassert solution(19) == 4, 'incorrect'\n"
    },
    {
        "number": 4497,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '4'\n\n\"\"\"\n\nimport sys\nimport string\n\ninput = sys.stdin.readline"
    },
    {
        "number": 4497,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\""
    },
    {
        "number": 4498,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('') == 'No'\nassert solution('0') == 'No'\nassert solution('5') == 'No'\nassert solution('4') == 'Yes'\nassert solution('7') == 'Yes'\n"
    },
    {
        "number": 4498,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"Yes\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"Yes\""
    },
    {
        "number": 4498,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 5 3 9\") == \"Yes\"\nassert solution(\"2 6 4\") == \"Yes\"\nassert solution(\"1 2 5\") == \"No\"\nassert solution(\"1 2 3 4 5\") == \"No\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\", \"stdin is not valid\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"Yes\"\n\nA and B can indirectly communicate, and also B and C can indirectly communicate, so we should print Yes.\n\nB and C can directly communicate, and also B and C can directly communicate, so we should print Yes.\n"
    },
    {
        "number": 4498,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"Yes\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4498,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2, 1, 1, \"abcdefg\") == \"Yes\"\nassert solution(3, 2, 3, \"cdefgh\") == \"No\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\nassert solution(\"atcoder\") == \"ATC\"\nassert solution(\"atcoderc\") == \"ATC\"\nassert solution(\"beac\") == \"ABC\"\nassert solution(\"beacf\") == \"ABC\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"ABC\"\n'''"
    },
    {
        "number": 4499,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"atcoder beginner contest\") == \"ABC\"\nassert solution(\n    \"atcoder\") == \"A\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(sys.stdin.readline().strip()) == \"ABC\""
    },
    {
        "number": 4499,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"ATCOCO\"), \"No solution\"\nassert solution(\"ABDEXB\"), \"No solution\"\nassert solution(\"ADXBC\"), \"No solution\"\nassert solution(\"ATA\"), \"No solution\"\nassert solution(\"AB\"), \"No solution\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n"
    },
    {
        "number": 4499,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"atcoder beginner contest\\\"\\\"\\\"\\n\\\"atcoder\\\".join(\\\"-\\\").replace(' ', '') \\\n.split(\\\"\\\", \\\n    [3, 0, 2]) == [ \\\n'atcoder', \\\n'beber', \\\n'contest' \\\n]\n\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stderr.line) == 'ABC'\nassert solution(stdin.join(['atcoder', 'contest'])) == 'ABC'\nassert solution(stdin.join(['a', 'b', 'c'])) == 'AC'\n"
    },
    {
        "number": 4499,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(solution) == \"ABC\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\nassert solution(\"atcoder\") == \"ATC\"\nassert solution(\"python\") == \"PYTHON\"\nassert solution(\"python\") == \"PYTHON\"\nassert solution(\"python\") == \"PYTHON\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 100 120 5\") == \"No\"\nassert solution(\"50 100 120 1\") == \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"A-yen 0 A-yen 1 B-yen 2 A-yen 2\") == \"Yes\"\nassert solution(\"A-yen 0 A-yen 2 B-yen 1 A-yen 2\") == \"No\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5,5,5\") == \"Yes\"\nassert solution(\"10,5,5\") == \"Yes\"\nassert solution(\"5,10,5\") == \"No\"\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\")\") == \"Yes\"\n\"\"\"\n\n\nclass Solution:\n    def can_buy_toy(self, A: int, B: int, C: int) -> str:\n        pass\n"
    },
    {
        "number": 4500,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"50\",\"100\",\"120\"]) == \"Yes\"\nassert solution([\"50\",\"200\",\"120\"]) == \"No\"\nassert solution([\"50\",\"200\",\"150\"]) == \"No\"\nassert solution([\"50\",\"150\",\"150\"]) == \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 100 120.5\") == \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'Yes'\n"
    },
    {
        "number": 4500,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('50 50 100') == 'No'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4501,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 3 5 6\") == \"5\"\nassert solution(\"2 4 2\") == \"4\"\nassert solution(\"1 2 5\") == \"1\"\nassert solution(\"3 1 1\") == \"1\"\nassert solution(\"4 3 3\") == \"1\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 12\n"
    },
    {
        "number": 4501,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"5\""
    },
    {
        "number": 4501,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"5\"\n\n\"\"\"\n\nN, A = map(int, input().split())"
    },
    {
        "number": 4501,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 8\") == 5\nassert solution(\"7 9 8 9\") == 5\nassert solution(\"7 9 8 9 1\") == 5\nassert solution(\"7 9 8 9 2\") == 6\nassert solution(\"7 9 8 9 3\") == 7\n"
    },
    {
        "number": 4501,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 8\") == \"5\"\nassert solution(\"4 8\") == \"5\"\nassert solution(\"4 8\") == \"1\"\nassert solution(\"4 8\") == \"2\"\nassert solution(\"4 8\") == \"2\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '5'\n"
    },
    {
        "number": 4501,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\n        [\"4\", \"2\", \"1\", \"3\", \"5\"],\n        [\"3\", \"5\", \"4\", \"2\", \"6\"],\n        [\"2\", \"6\", \"6\", \"4\", \"8\"],\n        [\"1\", \"3\", \"5\", \"6\", \"9\"],\n    ]) == \"5\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '4 2 1 3'\n"
    },
    {
        "number": 4502,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 5 2 3 4\") == \"4 2 1 3\"\nassert solution(\"4 2 1 3\") == \"2 1 3 4\"\nassert solution(\"4 5 2 3 4\") == \"4 2 3 4\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == str(solution(sys.stdin.readline().strip())[::-1])\nprint(solution(inp))"
    },
    {
        "number": 4502,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == str(4)\nassert solution(input(\"N: \")) == str(2)\nassert solution(input(\"M: \")) == str(3)\nassert solution(input(\"N: \")) == str(4)\nassert solution(input(\"M: \")) == str(3)\n"
    },
    {
        "number": 4502,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"4 2 1 3\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4 2 1 3\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input()\n) == \"4 2 1 3\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '4 2 1 3'\n"
    },
    {
        "number": 4502,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 12\n"
    },
    {
        "number": 4502,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '4 2 1 3'\nassert solution('1 1 2 3 4') == '3 1 3 4'\nassert solution('2 1 3 4') == '1 2 1 3'\nassert solution('3 1 2 4') == '1 2 1 3'\nassert solution('4 1 2 3') == '1 2 1 3'\n"
    },
    {
        "number": 4503,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"6 3 5\") == \"Yes\"\nassert solution(\"1 5\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 5 3\") == \"No\"\nassert solution(\"3 5 2\") == \"Yes\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    [\"H 10\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"Yes\"\nassert solution(\n    [\"H 10\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 3') == 'No'\nassert solution('2 4') == 'No'\nassert solution('1 1') == 'No'\nassert solution('2 2') == 'No'\nassert solution('3 3') == 'Yes'\n"
    },
    {
        "number": 4503,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 1 7 5\") == \"Yes\"\nassert solution(\"4 7\") == \"No\"\nassert solution(\"2 2 4 3\") == \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, 5) == 'Yes'\nassert solution(5, 10) == 'Yes'\nassert solution(5, 4) == 'No'\nassert solution(5, 4) == 'No'\nassert solution(1, 10) == 'Yes'\n"
    },
    {
        "number": 4503,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"2 3\") == \"No\"\nassert solution(\"1 2 3\") == \"Yes\"\nassert solution(\"4 5 6\") == \"No\"\nassert solution(\"1 1\") == \"Yes\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 2') == 'No'\nassert solution('1 2') == 'Yes'\n"
    },
    {
        "number": 4503,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"11 3\"\n    ) == \"Yes\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('ababab') == 6\nassert solution('aaabaaa') == 3\nassert solution('aabbbba') == 4\nassert solution('abcabcbbcde') == 5\nassert solution('abcabcabcbbcde') == 4\n"
    },
    {
        "number": 4504,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(sys.stdin.readline()) == 6\n"
    },
    {
        "number": 4504,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abaababab\") == 6\nassert solution(\"aaabaaa\") == 0\nassert solution(\"abcdeffgabcd\") == 7\nassert solution(\"xyzzzcdffgabcb\") == 1\nassert solution(\"xyzcfdffgabcb\") == 2\n"
    },
    {
        "number": 4504,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('abaababaab') == 6\nassert solution('ababababab') == 4\nassert solution('abcabcabcabcabcabcabcabcab') == 4\nassert solution('abcabcabc') == 2\nassert solution('abcabcabcdef') == 2\n"
    },
    {
        "number": 4504,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(st) == \"abcde\"\nassert solution(st1) == \"abcde\"\nassert solution(st2) == \"abcde\"\nassert solution(st3) == \"abcde\"\nassert solution(st4) == \"abcde\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(6)\n"
    },
    {
        "number": 4504,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('aabb') == 3\nassert solution('aba') == 2\nassert solution('aaa') == 2\nassert solution('aaabb') == 2\nassert solution('aab') == 1\n"
    },
    {
        "number": 4504,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 6"
    },
    {
        "number": 4504,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['aabababab', 'abaabababa', 'aabababab']),'solution()'\nassert solution(['a', 'a', 'a', 'a', 'b']),'solution()'\nassert solution(['aabababab', 'abaabababa', 'aabababab', 'abaababab']),'solution()'\n"
    },
    {
        "number": 4504,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('bb') == 2\nassert solution('aaa') == 2\nassert solution('zxc') == 4\nassert solution('abaababaab') == 2\n"
    },
    {
        "number": 4505,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"abc\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(s) == 'Yes'\nassert solution(s) == 'No'\nassert solution(s) == 'Yes'\nassert solution(s) == 'No'\nassert solution(s) == 'Yes'\n"
    },
    {
        "number": 4505,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('abac') == 'Yes'\nassert solution('abcdef') == 'No'\nassert solution('abcd') == 'No'\nassert solution('abc') == 'No'\nassert solution('abc') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution( \"abcabcabc\" ) == \"Yes\"\nassert solution( \"defgabcd\" ) == \"Yes\"\nassert solution( \"bcabcde\" ) == \"No\"\nassert solution( \"bcabc\" ) == \"No\"\nassert solution( \"a\" ) == \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"a\"), \"a is not a solution to the problem\"\nassert solution(\"bb\"), \"bb is not a solution to the problem\"\nassert solution(\"c\"), \"c is not a solution to the problem\"\nassert solution(\"aab\"), \"aab is not a solution to the problem\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"Yes\", \"The output of your code is incorrect.\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('bbac') == 'No'"
    },
    {
        "number": 4505,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('cba') == 'No'\n'''"
    },
    {
        "number": 4505,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(bac) == \"abc\"\n\"\"\""
    },
    {
        "number": 4506,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 754402647\n"
    },
    {
        "number": 4506,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 829\n\n\"\"\""
    },
    {
        "number": 4506,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution() == 78601"
    },
    {
        "number": 4506,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '1 4 5'\nassert solution('1 4 3 2') == '2 4 3'\nassert solution('5 7 2 9 3 4') == '5 7 2 9 3 4'\nassert solution('1 1 1 1') == '1 1 1'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 4506,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5\",\"1\",\"8\",\"7\",\"2\",\"4\",\"3\",\"9\",\"6\"]) == \"646\"\nassert solution([\"1\",\"3\",\"2\",\"4\",\"9\"]) == \"57\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]) == \"77\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 104219\n"
    },
    {
        "number": 4506,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(sys.stdin.readline()) == 29\nassert solution(sys.stdin.readline()) == 29\nassert solution(sys.stdin.readline()) == 29\nassert solution(sys.stdin.readline()) == 29\nassert solution(sys.stdin.readline()) == 29\n"
    },
    {
        "number": 4506,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 566\nassert solution(input()) == 706\nassert solution(input()) == 7\n\nInput\n5\n1 8 7 2 4\n9 7 2 9 3\n\nOutput\n646\n\"\"\""
    },
    {
        "number": 4506,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1\", \"3\", \"4\", \"2\"]) == \"14\"\nassert solution([\"1\", \"3\", \"7\", \"2\"]) == \"22\"\nassert solution([\"4\", \"7\", \"2\", \"4\"]) == \"64\"\nassert solution([\"4\", \"7\", \"2\", \"3\"]) == \"9\"\nassert solution([\"3\", \"7\", \"4\", \"2\"]) == \"666\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 1 1') == 5\nassert solution('2 2') == 4\nassert solution('3 3 3') == 12\nassert solution('4 4 4') == 13\nassert solution('5 5 5') == 15\n"
    },
    {
        "number": 4507,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('9 1') == 17\nassert solution('5 4') == 7\nassert solution('9 7') == 17\n\n\nassert solution('1 1') == 1\nassert solution('3 4') == 4\n"
    },
    {
        "number": 4507,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 4 1 3 7\"), \"3\"\nassert solution(\"5 8 7 2 9 4\"), \"9\"\nassert solution(\"5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6"
    },
    {
        "number": 4507,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 1 4', '2 5 7 4 6', '8 4', '5 3'), \"7\"\nassert solution('5 1 4', '2 5 7 4 6', '8 4', '7'), \"7\"\nassert solution('5 1 4', '2 5 7 4 6', '8 4', '3'), \"7\"\nassert solution('5 1 4', '2 5 7 4 6', '8 4', '4'), \"7\"\nassert solution('5 1 4', '2 5 7 4 6', '8 4', '1'), \"7\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"7 4 8 5 2 4 7 3 1\") == \"7\"\nassert solution(\n    \"5 1 4\"\n) == \"17\"\nassert solution(\n    \"5 1 4 3 7 2 4 3\"\n) == \"7\"\nassert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"3 7 7 7\"\n) == \"17\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, [5, 3, 4, 8, 6]) == \"17\"\nassert solution(3, [1, 2]) == \"3\"\nassert solution(2, [1, 3]) == \"2\"\nassert solution(1, [2, 5]) == \"3\"\nassert solution(0, []) == \"0\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 17\n\"\"\"\n\nimport sys\nfrom itertools import permutations\nfrom typing import Iterable\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4507,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 4 5\") == \"15\"\nassert solution(\"9 8 5\") == \"11\"\nassert solution(\"5 4 7\") == \"18\"\nassert solution(\"5 4 4\") == \"12\"\nassert solution(\"5 4 4\") == \"4\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"7 4 5\", \"2 5 4\", \"2 1\", \"6 5\", \"2 1\", \"3 1\", \"9 7\", \"8 4\", \"5 3\", \"9 7\", \"6 5\"]) == \"7\"\nassert solution([\"5 1 4\", \"2 5 7\", \"2 1\", \"6 5\", \"2 1\", \"3 1\", \"9 7\", \"8 4\", \"5 3\", \"9 7\", \"6 5\"]) == \"17\""
    },
    {
        "number": 4507,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"17\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"17\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"7\") == 2\n\nassert solution(\"7\") == 0\n\nassert solution(\"7\") == 1\n\n\n-----Constraints-----\n1 <= n <= 100\n\nedge.\n0 <= edge[i] <= 100\n\nA graph is a tree when it's only a tree of vertices.\n\"\"\"\n\n\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left, self.right = None, None\n\n\nclass Solution:\n    def min_edge(self, n, edges):\n        return min(\n            n - len(edges) + 1,\n            self.min_edge(n, edges[i]) if i < len(edges) - 1 else float('inf')\n            for i in range(n)\n        )\n\n    def min_edge_index(self, n):\n        if n <= 1:\n            return 0\n        return self.min_edge(n, [])\n\n    def minimum_edge(self, n):\n        edge = []\n        for i in range(n):\n            edge.append((i, i))\n        return self.min_edge_index(n)\n\n    def solution(self, stdin, stdout):\n        n = int(stdin)\n        edges = []\n        for _ in range(n - 1):\n            u, v = map(int, stdin.split())\n            edges.append((u - 1, v - 1))\n        return self.minimum_edge(n)\n"
    },
    {
        "number": 4508,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"2\"\nassert solution(\"7\") == \"2\"\nassert solution(\"7\") == \"0\"\nassert solution(\"7\") == \"1\"\nassert solution(\"7\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"2\"\nassert solution(\"7\") == \"0\"\nassert solution(\"7\") == \"1\"\nassert solution(\"7\") == \"1\"\nassert solution(\"7\") == \"2\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 4\n2 3 4 5\n2 4 5 6\n2 5 6 7\n5 6 7 8\n7 8 9 10\n\n2 4 6 7 8 10 8 12\n9 5 6 8 12 7 3 1\n\n4\n8\n3\n6\n5\n\n5\n1 3 5\n1 7 4\n1 6 2\n\n7\n9\n4\n\n8\n4\n6\n\"\"\") == 2\n\"\"\") == 1\n\nassert solution(\"\"\"\n5\n1 2 3 4\n2 3 4 5\n2 4 5 6\n2 5 6 7\n5 6 7 8\n7 8 9 10\n\n2 4 6 7 8 10 8 12\n9 5 6 8 12 7 3 1\n\n4\n8\n3\n6\n\n5\n1 3 5\n1 7 4\n1 6 2\n\n7\n9\n4\n\n8\n4\n6\n\n\"\"\") == 1\n\nassert solution(\"\"\"\n5\n1 2 3 4\n2 3 4 5\n2 4 5 6\n2 5 6 7\n5 6 7 8\n7 8 9 10\n\n2 4 6 7 8 10 8 12\n9 5 6 8 12 7 3 1\n\n4\n8\n3\n6\n\n5\n1 3 5\n1 7 4\n1 6 2\n\n7\n9\n4\n\n8\n4\n6\n\n\"\"\") == 1\n\nassert solution(\"\"\"\n5\n1 2 3 4\n2 3 4 5\n2 4 5 6\n2 5 6 7\n5 6 7 8\n7 8 9 10\n\n2 4 6 7 8 10 8 12\n9 5 6 8 12 7 3 1\n\n4\n8\n3\n6\n\n5\n1 3 5\n1 7 4\n1 6 2\n\n7\n9\n4\n\n8\n4\n6\n\n\"\"\") == 1\n\nassert solution(\"\"\"\n1 2 3 4\n1 4 5 6\n2 4 6 7\n2 5 6 8\n3 4 7 10\n4 5 6 11\n\n2 4 6 7 8 10 8 12\n9 5 6 8 12 7 3 1\n\n4\n8\n3\n6\n\n5\n1 3 5\n1 7 4\n1 6 2\n\n7\n9\n4\n\n8\n4\n6\n\n\"\"\") == 1"
    },
    {
        "number": 4508,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input() == \"1\") == \"1\"\nassert solution(input() == \"2\") == \"2\"\nassert solution(input() == \"3\") == \"0\"\nassert solution(input() == \"4\") == \"0\"\nassert solution(input() == \"5\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"7\"\n) == \"2\"\n\nassert solution(\n    \"7\"\n) == \"0\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n'''"
    },
    {
        "number": 4509,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1000000000'"
    },
    {
        "number": 4509,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '97'\nassert solution(stdin) == '1000000001'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4509,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '97'\n\n\n-----Constraints-----\n1 <= t <= 1000\n1 <= n <= 10^9\n1 <= k <= 10^9\n\n----Code----\n\nimport sys; t = int(sys.stdin.readline().strip())\nfor i in range(t):\n    n, k = map(int, input().split())\n    while n % k!= 0:\n        n = n*10+1\n    print(n)\n\n----Test Cases----\ntest_cases = int(input())\nfor i in range(test_cases):\n    n, k = map(int, input().split())\n    while n % k!= 0:\n        n = n*10+1\n    print(n)\n"
    },
    {
        "number": 4509,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n1 <= t <= 10^4\n1 <= n, k <= 10^9\n\n\"\"\""
    },
    {
        "number": 4509,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '7'\n"
    },
    {
        "number": 4509,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '10'\nassert solution(input()) == '15'\nassert solution(input()) == '1999999999'\nassert solution(input()) == '113'\nassert solution(input()) == '1000000001'\n"
    },
    {
        "number": 4509,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1000000000\"\nassert solution(stdin) == \"1000000000\"\nassert solution(stdin) == \"1000000000\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]) == \"10\"\nassert solution([\"1\", \"2\", \"4\", \"8\", \"12\", \"14\", \"16\", \"18\", \"20\", \"24\", \"26\", \"28\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]) == \"2\"\nassert solution([\"1\", \"2\", \"4\", \"8\", \"12\", \"14\", \"16\", \"18\", \"20\", \"24\", \"26\", \"28\"]) == \"12\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]) == \"13\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 10\nassert solution(inp) == 15\nassert solution(inp) == 1999999999\nassert solution(inp) == 113\nassert solution(inp) == 1000000001\n"
    },
    {
        "number": 4510,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 3 2 1 3 2') == '2'\nassert solution('10 4') == '3'\nassert solution('1 3 3') == '1'\nassert solution('1 3 2 2 1 3 2') == '3'\nassert solution('1 2 3 2 1 3 2') == '3'\n"
    },
    {
        "number": 4510,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 4510,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '3'\n\n\n\n-----Constraints-----\n\n1 <= n <= 2 * 10^4\n1 <= k <= 10^4\n1 <= id_i <= 10^9\n\n\"\"\""
    },
    {
        "number": 4510,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 2 3 2 1 3 2\") == \"2\"\nassert solution(\"2 2 1 2 1\") == \"3\"\nassert solution(\"3 3 3 3 3 3 3\") == \"3\"\nassert solution(\"3 3 3 3 3 3 3\") == \"3\"\nassert solution(\"3 3 3 3 3 3 3\") == \"3\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"1 2 2 3 3 3 3\"\nassert solution(\"10 4\") == \"3 2 3 2 1 3 1 2 3 3\"\nassert solution(\"10 4\") == \"3 3 2 3 2 1 3 1 2 3\"\nassert solution(\"5 2\") == \"2 3 3 3 2 1 3 1 2 3\"\nassert solution(\"10 4\") == \"3 3 2 3 2 1 3 1 2 3\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 103 104 105 106 107 108 109 110 111 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 131 132 133 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 202 203 203 204 205 206 207 208 208 210 210 211 210 211 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210 211 210"
    },
    {
        "number": 4510,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"7 2\") == \"2 3 2 1 3 2\"\nassert solution(\"10 4\") == \"3 3 3 1 1 2 1 2 3 3\"\nassert solution(\"10 4\") == \"3 3 3 1 1 2 1 2 3 3\"\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"7 2\")\nprint(\"Output :\")\nprint(solution(stdin))\n\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"10 4\")\nprint(\"Output :\")\nprint(solution(stdin))\n\nprint(\"Example 3:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"10 4\")\nprint(\"Output :\")\nprint(solution(stdin))\n"
    },
    {
        "number": 4510,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('10 4') == 2\nassert solution('10 4') == 3\nassert solution('10 4') == 4\nassert solution('10 4') == 5\nassert solution('10 4') == 6\n"
    },
    {
        "number": 4510,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"6 4\") == \"2\"\nassert solution(\"6 5\") == \"3\"\nassert solution(\"5 6\") == \"3\"\nassert solution(\"4 5\") == \"1\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 4 5 3 6\") == \"183\"\nassert solution(\"3 2 1 6 5\") == \"26\"\nassert solution(\"3 4\") == \"7\"\nassert solution(\"6 3 7\") == \"11\"\nassert solution(\"3 5 1\") == \"3\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '263'"
    },
    {
        "number": 4511,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '263'\nassert solution(stdin) == '262'\nassert solution(stdin) == '261'\nassert solution(stdin) == '260'\nassert solution(stdin) == '259'\n"
    },
    {
        "number": 4511,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"13\"\nassert solution(\"3\") == \"24\"\nassert solution(\"4\") == \"21\"\nassert solution(\"2\") == \"20\"\nassert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == 7\n"
    },
    {
        "number": 4511,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4 7 2 10 5\") == \"53\"\nassert solution(\"3 2 7 1 3 4\") == \"1\"\nassert solution(\"3 1 3 3 2\") == \"3\"\nassert solution(\"3 1 3 3 2 4 5 6 7 8 9\") == \"5\"\nassert solution(\"3 1 3 3 2 4 5 6 7 8 9 10\") == \"5\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 3 1\") == 263\nassert solution(\"2 3 1\") == 2\nassert solution(\"1 2 1\") == 2\nassert solution(\"2 2 1\") == 2\nassert solution(\"1 2 3\") == 1\n"
    },
    {
        "number": 4511,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '263'\n\n\"\"\""
    },
    {
        "number": 4511,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3'), 'Error'\nassert solution('5'), 'Error'\nassert solution('1 2 3 4 5'), 'Error'\nassert solution('1 2 3 4 5 6 7 8 9 10'), 'Error'\nassert solution('1 4 2 3 3 4 1 2 3 2 4 3 3 4 3'), 'Error'\n"
    },
    {
        "number": 4511,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2 4 3 10 4 2 3 6\") == 63\n"
    },
    {
        "number": 4512,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"2\"\nassert solution(\"dfcbbcfeeedbaea\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"2\"\nassert solution(\"dfcbbcfeeedbaea\") == \"3\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution == 1\n"
    },
    {
        "number": 4512,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution == 6, \"solution is incorrect\""
    },
    {
        "number": 4512,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 4512,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution == solution(stdin)\n"
    },
    {
        "number": 4512,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '0'\n"
    },
    {
        "number": 4512,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"abcdefg\") == \"8\"\nassert solution(\"abcd\") == \"1\"\nassert solution(\"abab\") == \"2\"\nassert solution(\"abcde\") == \"2\"\nassert solution(\"abcdefa\") == \"2\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"dfcbbcfeeedbaea\") == 5, \"no\"\nassert solution(\"dfcbbcfeeedbaea\") == 2, \"no\"\nassert solution(\"dfcbbcfeeedbaea\") == 1, \"no\"\nassert solution(\"dfcbbcfeeedbaea\") == 1, \"no\"\nassert solution(\"dfcbbcfeeedbaea\") == 1, \"no\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == \"154873296\"\nassert solution(2) == \"386592714\"\nassert solution(3) == \"729641835\"\nassert solution(4) == \"863725149\"\nassert solution(5) == \"975314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"336592714\"\n\n\"\"\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == \"154873296\"\nassert solution(5) == \"386592714\"\nassert solution(1) == \"729641835\"\nassert solution(0) == \"863725149\"\nassert solution(7) == \"975314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == (\"304963348\" * 9)\nassert solution(input()) == \"30496334840404536537558579456748589854068003658763143664888890034506812129580454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545"
    },
    {
        "number": 4513,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"5468\"\n\n\"\"\""
    },
    {
        "number": 4513,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"144873296\"\n\n\n\"\"\""
    },
    {
        "number": 4513,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '631457982'\nassert solution(stdin) == '34563945'\nassert solution(stdin) == '212864456'\nassert solution(stdin) == '624456489'\nassert solution(stdin) == '587937443'\n"
    },
    {
        "number": 4513,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"35147891\"\nassert solution(input()) == \"357891\"\nassert solution(input()) == \"35147891\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == \"154873396\"\nassert solution(2) == \"336592714\"\nassert solution(3) == \"729645835\"\nassert solution(4) == \"875628939\"\nassert solution(5) == \"867454880\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"336592714\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"6\", \"6\"]) == \"1\"\nassert solution([\"9\", \"9\"]) == \"3\"\nassert solution([\"1\", \"3\", \"3\", \"3\", \"1\"]) == \"7\"\nassert solution([\"1\", \"3\", \"3\", \"3\", \"1\", \"3\", \"2\", \"1\", \"1\"]) == \"6\"\nassert solution([\"1\", \"3\", \"3\", \"3\", \"1\", \"3\", \"2\", \"1\", \"1\", \"3\", \"2\", \"1\", \"1\", \"3\", \"2\", \"1\", \"3\"]) == \"7\""
    },
    {
        "number": 4514,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"7\""
    },
    {
        "number": 4514,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3 3 4 2 2\") == \"3\"\nassert solution(\"5 3 3 3 3 3 2 2\") == \"3\"\nassert solution
    },
    {
        "number": 4514,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"-1\""
    },
    {
        "number": 4514,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()), \"-1\"\nassert solution(input().split()), [\"-1\"]\n\"\"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '4'\nassert solution(input()) == '7'\n"
    },
    {
        "number": 4514,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 1 1 3 5 3 5 7') == '3 1'\nassert solution('1 1 1 3 5 3 5 7') == '3 1'\nassert solution('1 1 1 3 5 3 5 7') == '3 1'\nassert solution('1 1 1 3 5 3 5 7') == '3 1'\nassert solution('1 1 1 3 5 3 5 7') == '3 1'\n"
    },
    {
        "number": 4514,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"100 101 102\") == \"YES\"\nassert solution(\"100 101 102\") == \"NO\"\nassert solution(\"100 101 102\") == \"NO\"\nassert solution(\"100 101 102\") == \"NO\"\nassert solution(\"100 101 102\") == \"YES\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 4515,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 2 2 8\") == \"YES\"\nassert solution(\"5 3 2 8\") == \"NO\"\nassert solution(\"5 3 2 8\") == \"YES\""
    },
    {
        "number": 4515,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"5 3 2 8\") == \"NO\"\nassert solution(\"5 3 2 8 101 102\") == \"YES\"\nassert solution(\"5 3 2 8 10 20 15 14\") == \"NO\"\nassert solution(\"5 3 2 8 10 20 15 14 101\") == \"YES\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n'''"
    },
    {
        "number": 4515,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 3 2 8') == 'NO'\nassert solution('5 3 2 8') == 'NO'\nassert solution('3 3 2 8') == 'YES'\nassert solution('5 3 2 8') == 'YES'\nassert solution('4 6 6 6 6 6 5') == 'NO'\n"
    },
    {
        "number": 4515,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"YES\"\n\"\"\""
    },
    {
        "number": 4516,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '8 4'\nassert solution(input()) == '9 8 12 6 8'\nassert solution(input()) == '3 3'\nassert solution(input()) == '3 4'\nassert solution(input()) == '5 5'\n"
    },
    {
        "number": 4516,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3 4 5\"\nassert solution(stdin) == \"3 4 5\"\nassert solution(stdin) == \"3 4 5\"\nassert solution(stdin) == \"3 4 5\"\nassert solution(stdin) == \"3 4 5\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"2 1 5 3 5\") == \"5 3 5 1\"\nassert solution(\"2 10\") == \"3 4 6 5\"\nassert solution(\"2 10\") == \"5 4 6 3\""
    },
    {
        "number": 4516,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3 4 6 5\"\nassert solution(stdin) == \"9 8 12 6 8\"\nassert solution(stdin) == \"3 3 4 5\"\nassert solution(stdin) == \"3 4 5\"\nassert solution(stdin) == \"4 1 2 3 4\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sys.stdin.readline()) == '3 4 6 5'\nassert solution(sys.stdin.readline()) == '9 8 12 6 8'\nassert solution(sys.stdin.readline()) == '3 3 6 5'\nassert solution(sys.stdin.readline()) == '3 3 5 4'\nassert solution(sys.stdin.readline()) == '3 3 5 4'\n"
    },
    {
        "number": 4516,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '3 4 6 5'\nassert solution('2 1 5 3 5') == '3 3 4 5'\nassert solution('2 10') == '5 6 8'\nassert solution('5 5') == '5 5'\nassert solution('5 5 2 3 1') == '3 3 5'\n"
    },
    {
        "number": 4516,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3 4 6 5\"\n\n\"\"\"\n\n\nn, m = map(int, input().split())\nx = [int(input()) for _ in range(n)]"
    },
    {
        "number": 4516,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(sys.stdin) == '9 8 12 6 8'\n"
    },
    {
        "number": 4516,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\"4 4\", \"2 1 4\", \"1 2 1 4\", \"1 1 1 4\", \"1 1 2 4\", \"1 2 1 4\", \"1 2 2 4\", \"1 3 2 4\", \"1 3 3 4\", \"1 4 1 4\", \"2 2 1 4\", \"2 2 2 4\", \"2 2 3 4\", \"2 3 2 4\", \"3 2 3 4\", \"3 3 3 4\", \"4 4 1 4\", \"4 4 2 4\", \"4 4 3 4\", \"4 4 4 4\"]\n) == \"5 4 6 8\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), 'No solution'\n\n### Tests\n\nprint(f'Input :\\n{stdin}')\n\nprint(f'Expected :\\n{6}')\nprint(f'Actual :\\n{solution(stdin)}')\n"
    },
    {
        "number": 4517,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\""
    },
    {
        "number": 4517,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"3 2 4 6\"\n) == \"YES\"\n\n\n\n@lc examples=\n7 4\n4 1\n4 2\n3 5\n3 6\n4 8\n4 9\n5 10\n6 10\n7 8\n8 9\n10 10\n9 9\n4 2 8 9 10\n1 2 3 7 9\n1 4 6 2\n1 4 5 7\n2 3 4 3\n1 5 8 9\n2 3 5 4\n2 1 6 3\n1 4 2 1\n1 4 1 6\n1 4 7 2\n1 5 3 7\n2 3 1 4\n2 3 1 1\n3 1 2 1"
    },
    {
        "number": 4517,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1\",\"2\",\"1\",\"2\",\"3\",\"4\",\"2\",\"4\"]) == \"YES\"\nassert solution([\"1\",\"2\",\"1\",\"2\",\"3\",\"4\",\"3\",\"3\",\"4\",\"2\",\"1\",\"2\",\"2\",\"2\",\"1\",\"1\"]) == \"YES\"\nassert solution([\"1\",\"3\",\"2\",\"1\"]) == \"NO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\nclass Graph:\n    def __init__(self, n):\n        self.vertices = range(n)\n        self.edges = []\n        \n    def add_edge(self, v1, v2):\n        if v1 not in self.vertices and v2 not in self.vertices:\n            return False\n        if v1 in self.vertices and v2 not in self.vertices:\n            return False\n        self.edges.append((v1, v2))\n        return True\n    \n    def print_edges(self):\n        for edge in self.edges:\n            print(edge[0], edge[1])\n    \n    def DFS(self, v):\n        if self.vertices[v] == v:\n            print(v, end=' ')\n            return\n        self.vertices[v] = v\n        for edge in self.edges:\n            self.DFS(edge[0])\n        return\n    \n    def get_all_distances(self, v):\n        distances = []\n        for edge in self.edges:\n            if edge[0] == v:\n                distances.append(edge[1])\n            if edge[1] == v:\n                distances.append(edge[0])\n        return distances\n    \n    def get_shortest_path(self, v):\n        shortest_path = [v]\n        for i in range(1, len(self.vertices)):\n            if self.vertices[i]!= v:\n                distances = self.get_all_distances(i)\n                min_distance = min(distances)\n                for distance in distances:\n                    if distance == min_distance:\n                        shortest_path.append(i)\n        return shortest_path\n    \n    def is_connected(self, v1, v2):\n        return self.vertices[v1] == self.vertices[v2]\n        \n    def reachable(self, v1):\n        reachable = []\n        for edge in self.edges:\n            if self.vertices[edge[0]] == self.vertices[v1] and self.vertices[edge[1]]!= v1:\n                reachable.append(edge[1])\n        return reachable\n    \n    def is_tree(self):\n        for vertex in self.vertices:\n            if vertex not in self.vertices:\n                return False\n        return True\n    \n    def solution(self):\n        if self.is_tree():\n            return \"YES\"\n        \n        distances = self.get_all_distances(self.vertices[0])\n        shortest_path = self.get_shortest_path(self.vertices[0])\n        \n        for i in range(1, len(shortest_path)):\n            for edge in self.edges:\n                if edge[0] == i and edge[1] not in shortest_path:\n                    distances = self.get_all_distances(edge[1])\n                    shortest_path = self.get_shortest_path(edge[1])\n                    if distances == []:\n                        print(edge[0], edge[1])\n                        return\n                    else:\n                        if distances[0] == shortest_path[0] and distances[-1] == shortest_path[-1]:\n                            distances.pop()\n                            shortest_path.pop()\n                            if distances == []:\n                                print(edge[0], edge[1])\n                                return\n        return \"NO\"\n\nn, m = map(int, input().split())\ng = Graph(n)\nfor i in range(n):\n    data = list(map(int, input().split()))\n    for j in range(len(data)):\n        if data[j] == 1:\n            g.add_edge(i, j)\n\nanswer = g.solution()\nprint(answer)"
    },
    {
        "number": 4517,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('10 6') == \"YES\"\nassert solution('10 6') == \"NO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 6\") == \"YES\"\nassert solution(\"5 7\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 3\") == \"NO\"\nassert solution(\"1 4\") == \"NO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4517,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5 6') == 'YES'\nassert solution('1 3 2 4 6') == 'YES'\nassert solution('1 3 4') == 'YES'\nassert solution('2 4') == 'YES'\nassert solution('2 5') == 'NO'\n"
    },
    {
        "number": 4518,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('t1') == 'YES'\nassert solution('t2') == 'NO'\nassert solution('t3') == 'YES'\nassert solution('t4') == 'NO'\nassert solution('t5') == 'YES'\n"
    },
    {
        "number": 4518,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4518,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"4\", \"5\", \"1\", \"2\", \"1\", \"3\", \"1\", \"4\", \"3\", \"5\"]) == \"YES\"\nassert solution([\"3\", \"3\", \"4\", \"4\", \"4\", \"4\", \"4\", \"3\", \"3\", \"4\", \"3\", \"3\", \"3\", \"4\", \"4\", \"5\"]) == \"NO\""
    },
    {
        "number": 4518,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4\\n2\\n5\\n3\\n1\\n4\\n1\\n1\\n1\\n\") == \"YES\\n1\\n3\\n5\\n4\\n2\\n1\\n1\\n1\\n1\\n\"\nassert solution(\"4\\n1\\n5\\n2\\n3\\n1\\n1\\n1\\n\") == \"NO\\nNO\\nNO\\nNO\\nNO\\n\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2') == 'NO'\nassert solution('1 2') == 'YES'\nassert solution('3 4') == 'NO'\nassert solution('3 4') == 'YES'\n"
    },
    {
        "number": 4518,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\nassert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'"
    },
    {
        "number": 4518,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n3\\n1 1 1\\n4\\n1 1000 101"
    },
    {
        "number": 4518,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4519,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(solution) == solution
    },
    {
        "number": 4519,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '01011110'\nassert solution(stdin) == '0101111'\nassert solution(stdin) == '0011111'\n\n\"\"\""
    },
    {
        "number": 4519,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\", \"0\"]) == \"011110\"\nassert solution([\"0\", \"1\"]) == \"01011110\"\nassert solution([\"0\", \"0\"]) == \"0011111\"\nassert solution([\"0\", \"1\"]) == \"0101111\"\nassert solution([\"1\", \"1\"]) == \"00111111\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"11011010\") == \"0101111\"\nassert solution(\"1111100\") == \"0101111\"\nassert solution(\"11001010\") == \"0101111\"\nassert solution(\"1111100\") == \"0101111\"\nassert solution(\"11001010\") == \"0101111\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '01011110'\nassert solution(input()) == '0101111'\nassert solution(input()) == '0011111'\nassert solution(input()) == '01010101'\nassert solution(input()) == '010110'\n"
    },
    {
        "number": 4519,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"0011100\") == \"0101111\"\nassert solution(\"0101111\") == \"0101111\"\nassert solution(\"11011010\") == \"01111010\"\nassert solution(\"11011010\") == \"01111010\"\nassert solution(\"1111100\") == \"01111100\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), 'Your code failed'\n\n\"\"\""
    },
    {
        "number": 4519,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0\") == \"01011110\", \"Should return 01011110\"\nassert solution(\"1\") == \"01111010\", \"Should return 01111010\"\nassert solution(\"1111100\") == \"01011111\", \"Should return 01011111\"\nassert solution(\"1111100\") == \"01011111\", \"Should return 01011111\"\n\n-----Example-----\nInput\n3\n8 5\n1111100\n7 9\n1111100\n\nOutput\n01011110\n0101111\n0011111\n\n-----Note-----\n\nIn the first example, you can change the string as follows: $1\\underline{10}11010 \\rightarrow \\underline{10}111010 \\rightarrow 0111\\underline{10}10 \\rightarrow 011\\underline{10}110 \\rightarrow 01\\underline{10}1110 \\rightarrow 01011110$. \n\nIn the third example, there are enough operations to make the string sorted.\n"
    },
    {
        "number": 4519,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '01111110'\nassert solution(stdin) == '0101111'\nassert solution(stdin) == '0011111'\n\n\n\"\"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"01011110\"\nassert solution(stdin) == \"0101111\"\nassert solution(stdin) == \"0011111\"\n\n\n-----Constraints-----\n1 <= q <= 10^4\n1 <= n <= 10^6\n0 <= k <= 10^6\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n--- Nguyen Van Duc ---"
    },
    {
        "number": 4520,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"4\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 1 3 4 5 7') == '3'\nassert solution('5 1 7') == '3'\nassert solution('6 1 7') == '3'\nassert solution('9 11') == '3'\nassert solution('6 8 9') == '3'\n"
    },
    {
        "number": 4520,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4520,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 4520,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '1'\n"
    },
    {
        "number": 4520,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input().strip()) == \"3\"\nassert solution(input().strip()) == \"3\"\nassert solution(input().strip()) == \"3\"\nassert solution(input().strip()) == \"3\"\nassert solution(input().strip()) == \"3\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 4520,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n'''\n\nimport math"
    },
    {
        "number": 4520,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\", \"\", \"\") == \"\", \"pass\"\n\nassert solution(\"1 2 3 4 5 6\", \"\", \"\") == \"1\", \"pass\"\n\nassert solution(\"2 1 3 3 4\", \"\", \"\") == \"1\", \"pass\"\n\nassert solution(\"2 1 3 3 4\", \"3\", \"\") == \"3\", \"pass\"\n\nassert solution(\"3 7 8 9 1\", \"9\", \"\") == \"7\", \"pass\""
    },
    {
        "number": 4520,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\n"
    },
    {
        "number": 4521,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 4521,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 4521,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 8\n\nInput\n3\n1 2 2\n-100 3 3\n\nOutput\n5\n\n'''\n\nfrom math import floor\n"
    },
    {
        "number": 4521,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"19\"\n\n\"\"\""
    },
    {
        "number": 4521,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 4521,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == ''\n\n\n-----Constraints-----\n0 < n < 2^20\n-10^9 <= v_i, v_i < 10^9\n-10^9 <= x_i, x_i < 10^9\n-10^9 <= v_i + v_j, v_i + v_j \\le 10^9\n\n-----Divide and Conquer-----\nTime Limit: 1 sec\n\n[execution time limit] 4 sec\n\n[solution]\nhttps://leetcode.com/problems/sum-of-minimum-distances-over-all-points/discuss/283964/C%2B%2BJava-solution-using-solutio-6-lines-Python-and-Py\n'''\nfrom math import inf\n\nclass Solution:\n    def solve(self, stdin: str, stdout: str) -> None:\n        n = int(stdin)\n        n_m = int(stdin[:n])\n        a = [int(i) for i in stdin[n+1:].split()]\n        v = [int(i) for i in stdin[:n].split()]\n\n        dp = [inf for _ in range(n_m)]\n        dp[0] = 0\n        for i in range(n_m):\n            for j in range(i, n_m):\n                dp[j] = min(dp[j], dp[j-i]+v[i])\n\n        if dp[-1] == inf:\n            stdout.write('0\\n')\n        else:\n            stdout.write(str(dp[-1]))"
    },
    {
        "number": 4521,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4521,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 4 3 2'), 3\nassert solution('2 3 4'), 2\nassert solution('2 3 4'), 2\nassert solution('2 4 3 2'), 2\nassert solution('2 3 4'), 2\n"
    },
    {
        "number": 4521,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Time complexity-----\n\nA naive solution: O(n^3)\n\nFor the given two sets of coordinates $x_i \\in [0,1]$, $x_i$ is a point in space, and $v_i$ is an arbitrary speed. The time complexity of this is O(n^2) since we use n log n comparisons to solve each pair of points.\n\n\n-----Space complexity-----\n\nA naive solution: O(n)\n\nfor the given two sets of coordinates $x_i \\in [0,1]$, $x_i$ is a point in space, and $v_i$ is an arbitrary speed. The space complexity of this is O(n) since we use n log n comparisons to solve each pair of points.\n\n\n-----Constraints-----\n\n0 \u2264 $n$ \u2264 10^5\n\nOutput\n>= 0\n\nExample\nInput\n\n3\n2 1 2\n-100 1 3\n\nOutput\n\n3\n\nExplanation\n\n2 points are $x_1, x_2$, $x_1$ is the initial coordinates and $x_2$ is the final coordinates. $d(i, j)$ is the minimum possible distance between these two points.\n\nSince $i \\le j \\le n$, $i \\le n^3$, $i \\le n^2$.\n\nThe space complexity of the above solution is O(n^2) since we use n log n comparisons to solve each pair of points.\n\n\n\n-----Constraints for the solution-----\n\nThe distance between two points $x_1$ and $x_2$ in the given space $O(n^3)$ is $O(n)$.\n\n-100 \u2264 $x_i$ \u2264 100\n\n-1000 \u2264 $v_i$ \u2264 1000\n\nExample\n\nInput\n\n4\n0 0 -100 10\n\nOutput\n\n9\n\nExplanation\n\nThe two points $x_1$ and $x_2$ are initially the same point. The two points $x_1$, $x_2$ and $x_2$ are at the same time as the point $x_1$. We need to find the minimum possible distance between these two points.\n\"\"\"\n\nfrom sys import stdin, setrecursionlimit\nsetrecursionlimit(10**6)"
    },
    {
        "number": 4521,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '17'"
    },
    {
        "number": 4522,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"21 7 15 21 3\"\n\nassert solution(stdin) == \"0 0\""
    },
    {
        "number": 4522,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3 3 2 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4522,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\") == \"21 7 15 21 3\"\nassert solution(\"3 2 3\") == \"3\"\nassert solution(\"5\") == \"5\"\nassert solution(\"10 5 5\") == \"15\"\nassert solution(\"10 2 2\") == \"0\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"21 7 15 21 3\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0 0\"\n\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '5'\n\n\"\"\"\n\nimport sys\nimport math\n\ninput = sys.stdin.readline"
    },
    {
        "number": 4522,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2021 1054 1623 2\"\nassert solution(stdin) == \"2021 1054 1623 3\"\n\n\"\"\"\n\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4522,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 3 4 2 2 0 2 0 0 0 0 0 0 0 0 0 1 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4522,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"15\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 21\n\nassert solution(stdin, 10) == 21\n\nassert solution(stdin, 100) == 21\n\nassert solution(stdin, 1000) == 21\n\nassert solution(stdin, 10) == 21"
    },
    {
        "number": 4523,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, 3) == \"YES\"\nassert solution(5, 2) == \"NO\"\nassert solution(5, 1) == \"NO\"\nassert solution(4, 4) == \"NO\"\nassert solution(2, 2) == \"YES\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2') == 'NO'\nassert solution('2') == 'YES'\nassert solution('1') == 'YES'\nassert solution('1') == 'NO'\nassert solution('1') == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Note-----\n\nThis is a variation of the variant that goes on in the class implementation.\n\nBelow is the implementation of the variant.\n\nimport collections\n\nclass Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        i = 0\n        for j in range(1,len(nums)):\n            if nums[i]!= nums[j]:\n                nums[i] = nums[j]\n                i = i + 1\n        return i\n"
    },
    {
        "number": 4523,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1 2 2\", \"1 3 4\", \"1 4 2\", \"1 2 3\", \"1 3 4\"]) == \"NO\"\nassert solution([\"1 4\", \"1 2\", \"1 3\", \"1 4\", \"2 2\", \"2 3\", \"2 4\", \"3 4\"]) == \"YES\"\nassert solution([\"1 2\", \"1 4\", \"2 4\", \"2 3\", \"3 4\"]) == \"YES\"\nassert solution([\"1 4\", \"1 2\", \"1 3\", \"1 4\", \"2 2\", \"2 3\", \"2 4\", \"3 4\"]) == \"YES\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, \"4 1 4 4\") == \"NO\"\nassert solution(5, \"5 5 5 5\") == \"YES\"\nassert solution(2, \"1 2 2\") == \"YES\"\nassert solution(3, \"5 5 5 5\") == \"NO\""
    },
    {
        "number": 4523,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n----------Constraints--------------\n1 <= t <= 1000\n1 <= n <= 50\n1 <= a_1, a_2, \\dots, a_n <= 100\na_1 + a_2 + \\dots + a_n = 100\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 3 3\") == \"YES\"\nassert solution(\"5 2 3 2\") == \"YES\"\nassert solution(\"4 3 3 4\") == \"NO\"\nassert solution(\"1 3 1\") == \"NO\"\n\nTime complexity: O(n^2)\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4523,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 4 3 1\") == \"YES\"\nassert solution(\"5 5 5 5\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4524,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '12'\n\n=======Solution"
    },
    {
        "number": 4524,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '11'\n"
    },
    {
        "number": 4524,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '12'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4524,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    input:\n    \"4 5\") == \"12\"\nassert solution(\n    input:\n    \"4 4\") == \"11\"\nassert solution(\n    input:\n    \"4 4\") == \"11\"\nassert solution(\n    input:\n    \"4 5\") == \"0\"\nassert solution(\n    input:\n    \"4 5\") == \"0\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"11\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"12\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"12\"\nassert solution(\"4 6\") == \"12\"\nassert solution(\"4 7\") == \"12\"\nassert solution(\"4 8\") == \"12\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(sys.stdin.readline()) == str(11)\nassert solution(sys.stdin.readline()) == str(0)"
    },
    {
        "number": 4524,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('4 4') == '12'\nassert solution('4 5') == '11'\nassert solution('4 6') == '11'\nassert solution('4 7') == '11'\nassert solution('4 8') == '11'\n"
    },
    {
        "number": 4524,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '11'\n\n\n-----Reference\nhttps://leetcode.com/problems/add-two-numbers/discuss/28168/JavaC%2B%2BPython-Straightforward-Solution-Count\n"
    },
    {
        "number": 4525,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4525,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == \"NO\"\nassert solution(2) == \"YES\"\nassert solution(3) == \"NO\"\nassert solution(4) == \"YES\"\nassert solution(5) == \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    2\n    8\n    \"\"\") == \"YES\"\n    assert solution(\n    \"\"\"\n    3\n    \"\"\") == \"YES\"\n    assert solution(\n    \"\"\"\n    4\n    \"\"\") == \"YES\"\n    assert solution(\n    \"\"\"\n    6\n    \"\"\") == \"NO\"\n    assert solution(\n    \"\"\"\n    7\n    \"\"\") == \"NO\"\n    "
    },
    {
        "number": 4525,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4525,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3\\n4') == 'YES'\nassert solution('3\\n6') == 'YES'\nassert solution('3\\n9') == 'YES'\nassert solution('3\\n4') == 'NO'"
    },
    {
        "number": 4525,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\") == \"NO\\nYES\""
    },
    {
        "number": 4525,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\""
    },
    {
        "number": 4526,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"9,3,1,5,9,2,6,5\") == 5\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n\nInput\n5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n\nOutput\n5\n1\n0\n4\n0\n"
    },
    {
        "number": 4526,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4526,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 9 4 1 2 4 5 1 2\"\n) == \"0 1 2 2 1 1 1\"\nassert solution(\n    \"3 9 4 1 2 4 5 1 2\"\n) == \"0 0 0 0 0 0 0 0\"\nassert solution(\n    \"3 9 4 1 2 4 5 1 2\"\n) == \"0 0 0 0 0 0 0 0\"\nassert solution(\n    \"3 9 4 1 2 4 5 1 2\"\n) == \"0 0 0 0 0 0 0 0\"\nassert solution(\n    \"3 9 4 1 2 4 5 1 2\"\n) == \"0 0 0 0 0 0 0 0\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n\n----Constraints----\n1 <= t <= 10^5\n1 <= n <= 10^7\n1 <= a_1, a_2, \\dots, a_n <= 10^7\nstdin contains integers in the range 1 to 10000\n\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"5\"\n\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, 9, 3, 1, 5, 1, 1, 1) == 0, \"output not as expected\"\nassert solution(5, 9, 3, 1, 5, 1, 1, 1) == 1, \"output not as expected\"\nassert solution(5, 9, 3, 1, 5, 1, 1, 1) == 5, \"output not as expected\"\nassert solution(5, 9, 3, 1, 5, 1, 1, 1) == 6, \"output not as expected\"\nassert solution(5, 9, 3, 1, 5, 1, 1, 1) == 8, \"output not as expected\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"3\",\"1\",\"4\",\"1\",\"5\",\"9\",\"2\",\"6\",\"5\"]) == \"5\"\nassert solution([\"3\",\"1\",\"4\",\"1\",\"5\",\"9\",\"2\",\"6\",\"5\"]) == \"0\"\nassert solution([\"3\",\"1\",\"4\",\"1\",\"5\",\"9\",\"2\",\"6\",\"5\"]) == \"0\"\nassert solution([\"3\",\"1\",\"4\",\"1\",\"5\",\"9\",\"2\",\"6\",\"5\"]) == \"0\"\nassert solution([\"3\",\"1\",\"4\",\"1\",\"5\",\"9\",\"2\",\"6\",\"5\"]) == \"0\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 1, 'The output should be 1'\n\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 5"
    },
    {
        "number": 4527,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 4527,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1,1,1,1,1,1,1,1,1) == 2\nassert solution(4,4,4,4,1,4,4,4,4) == 3\nassert solution(4,4,4,4,1,4,4,4,4) == 3\nassert solution(4,4,4,4,1,4,4,4,4) == 1\nassert solution(4,4,4,4,1,4,4,4,4) == 2\n"
    },
    {
        "number": 4527,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1 4 5 6 7\""
    },
    {
        "number": 4527,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Idea-----\n\nSet = [[], [], []]\n\nfor i in range(len(stdin)):\n    for j in range(len(stdin)):\n        if stdin[i] == '{':\n            Set[0].append(j)\n        elif stdin[i] == '}':\n            Set[1].append(j)\n        elif stdin[i] == '{':\n            Set[2].append(j)\n        elif stdin[i] == '}':\n            Set[0].pop()\n            Set[0].append(j)\n        elif stdin[i] == '}':\n            Set[2].pop()\n            Set[2].append(j)\n        else:\n            continue"
    },
    {
        "number": 4527,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 4527,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\nRuntime: 80 ms, faster than 91.18% of Python3 online submissions for Size of Intersection.\nMemory Usage: 18 MB, less than 25.02% of Python3 online submissions for Size of Intersection.\n\"\"\"\n\nclass Solution:\n    def sizeIntersection(self, A: List[List[int]], B: List[List[int]]) -> List[List[int]]:\n        m, n = len(A), len(B)\n        left, right = [0] * m, [0] * m\n        for i in range(m):\n            for j in range(n):\n                if A[i][j] < B[j][0]:\n                    left[i] += 1\n                elif A[i][j] > B[j][1]:\n                    right[i] += 1\n\n        res = []\n        i, j = 0, 0\n        while i < m and j < n:\n            if A[i][j] < B[j][0]:\n                res.append(A[i])\n                i += 1\n            elif A[i][j] > B[j][1]:\n                res.append(B[j])\n                j += 1\n\n        if i == m and j == n:\n            return res\n\n        res = []\n        while i < m:\n            res.append(A[i])\n            i += 1\n        while j < n:\n            res.append(B[j])\n            j += 1\n        return res\n"
    },
    {
        "number": 4527,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\n-----My Notes-----\n\n- Run Test cases, but remember to use additional indentation, and use double indentation to support the test case.\n\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4527,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\n\n\n'''\nclass Solution:\n    def maxSegments(self, arr: List[List[int]]) -> int:\n        \n        def possible(i, arr):\n            if i == len(arr):\n                return True\n            \n            if arr[i][1] - arr[i][0] == arr[i][0] - arr[i][1] and arr[i][0]!= arr[i][1]:\n                return False\n            \n            return True if possible(i + 1, arr) or (possible(i + 1, arr + [arr[i]]) and possible(i + 1, arr + [arr[i]] + [arr[i][0] - arr[i][1]])) else False\n        \n        return len([x for x in arr if possible(0, x)])\n'''"
    },
    {
        "number": 4527,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 4528,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 60\n\n-----Constraints-----\n1 <= t <= 9\n\nTime Limit: 1 sec\nMemory Limit: 1GB\n\nExample 1:\n\nInput\n5\n23 55\n23 0\n0 1\n4 20\n23 59\n\nOutput\n5\n60\n1439\n1180\n1\nassert solution(stdin) == 60\n\n\nExample 2:\n\nInput\n5\n23 55\n23 0\n0 1\n4 20\n23 59\n\nOutput\n5\n60\n1439\n1180\n1\nassert solution(stdin) == 60\n\n\nExample 3:\n\nInput\n5\n23 55\n23 0\n0 1\n4 20\n23 59\n\nOutput\n5\n60\n1439\n1180\n1\nassert solution(stdin) == 60"
    },
    {
        "number": 4528,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 6\n\"\"\"\nimport time"
    },
    {
        "number": 4528,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('test.txt') == '12'\nassert solution('test.txt') == '0'\nassert solution('test.txt') == '0'\nassert solution('test.txt') == '0'\nassert solution('test.txt') == '0'\n"
    },
    {
        "number": 4528,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '60'\n"
    },
    {
        "number": 4528,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"10 3\"\n) == \"60\"\nassert solution(\n    \"5 23 55\"\n) == \"60\"\nassert solution(\n    \"10 1 59 55\"\n) == \"1439\"\nassert solution(\n    \"1 20 59 55\"\n) == \"1180\"\nassert solution(\n    \"4 20 59 55\"\n) == \"1\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"11\") == 11\nassert solution(\"59\") == 59\nassert solution(\"11:59\") == 59\nassert solution(\"23:59\") == 59\nassert solution(\"23 0\") == 0\n"
    },
    {
        "number": 4528,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == str(60)\nassert solution(stdin) == str(1439)\nassert solution(stdin) == str(1180)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(0)\n"
    },
    {
        "number": 4528,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"60\"\n\n-----My Approach-----\n\nJust to implement it, just try to use a dictionary to store information.\n\n'''\n"
    },
    {
        "number": 4528,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"23\") == 60\nassert solution(\"23 55\") == 60\nassert solution(\"23 0\") == 1439\nassert solution(\"0 1\") == 0\nassert solution(\"4 20\") == 20\n"
    },
    {
        "number": 4528,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '60'\nExplanation\nYou need to pass the time and use 24-hour format!\n\n\"\"\""
    },
    {
        "number": 4529,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '-1'\nassert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '-1'"
    },
    {
        "number": 4529,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\n"
    },
    {
        "number": 4529,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n'''\nLURLLRUD\nLRUUD\nLURUD\nLURDU\nLURDR\nRUDLUR\n\n''') == ['L', 'R', 'U', 'D', 'R', 'L', 'D', 'R', 'U', 'L', 'D', 'R', 'L']\n"
    },
    {
        "number": 4529,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == [1, 2, 1, 4, 3, 4]\nassert solution(inp) == [1, 2, 1, 4, 3, 4]\nassert solution(inp) == [1, 2, 1, 4, 3, 4]\nassert solution(inp) == [-1, -1, 1, -1, -1, -1]\nassert solution(inp) == [1, 2, 1, 4, 3, 4]\n"
    },
    {
        "number": 4529,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == -1\nassert solution(stdin) == 2\nassert solution(stdin) == -1\n"
    },
    {
        "number": 4529,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"L\", \"U\", \"R\", \"D\", \"U\"]) == \"-1\"\nassert solution([\"L\", \"R\", \"U\", \"D\"]) == 2\nassert solution([\"L\", \"U\", \"D\"]) == 2\nassert solution([\"L\", \"U\", \"D\", \"R\"]) == 2\nassert solution([\"R\", \"U\", \"D\", \"R\"]) == 2\n"
    },
    {
        "number": 4529,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"LRUD\") == 1\nassert solution(\"LRUDD\") == 2\nassert solution(\"LLDDR\") == 2\nassert solution(\"RRUDD\") == -1\nassert solution(\"LLDDRD\") == 2\n"
    },
    {
        "number": 4529,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == -1\n\"\"\""
    },
    {
        "number": 4529,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4529,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    '4 4\\nLRUUD 4\\nLRUDU 4\\nRRUDU 4\\nRRUDU 4'\n) == 1, 'Expected 2. Got {}.'.format(2)\nassert solution(\n    '4 4\\nLRUDUD 4\\nLRUDU 4\\nRRUDU 4\\nRRUDU 4'\n) == 4, 'Expected 4. Got {}.'.format(4)\nassert solution(\n    '4 4\\nLRUUDUD 4\\nLRUDUD 4\\nRRUDUUD 4\\nRRUDUUD 4'\n) == 4, 'Expected 4. Got {}.'.format(4)\nassert solution(\n    '4 4\\nLRUUDUD 4\\nLRUDUDUD 4\\nRRUDUUDD 4\\nRRUDUUDD 4'\n) == -1, 'Expected -1. Got {}.'.format(-1)\n"
    },
    {
        "number": 4530,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n\n-----Solution-----\nimport itertools"
    },
    {
        "number": 4530,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Bug-----\n\nWe have a data structure for students with distinct skills.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills.\n\nFor example, $[1, 2, 3]$ contains only 1 skill and is not a valid pair.\n\nThe number of students can only contain unique skills"
    },
    {
        "number": 4530,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4530,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5 2 1 5 4\") == \"3\"\nassert solution(\"1 1 1 3\") == \"3\"\nassert solution(\"1 1 1 3\") == \"3\"\nassert solution(\"4 2 4 1 4 3 4\") == \"3\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n\n\n-----Constraints-----\n1 <= t <= 10^4\n1 <= n <= 10^5\n1 <= a_1, a_2,..., a_n <= n\n\nTime Limit: 1 sec\nSpace Limit: 1 MB\n\n\n------Code------"
    },
    {
        "number": 4530,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 4 1 4 3 4') == '3'\nassert solution('1 2 3 4') == '3'\nassert solution('2 1 2 3 4') == '3'\nassert solution('2 4 5 6 7') == '3'\nassert solution('2 3 4 5 6') == '3'\n"
    },
    {
        "number": 4530,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 2 4 1 4 3 4') == '3'\nassert solution('5 2 1 5 4 3 4') == '3'\nassert solution('1 1 1 3') == '3'\nassert solution('1 1 1 3 4') == '3'\nassert solution('4 2 4 1 4 3 4') == '3'\n"
    },
    {
        "number": 4530,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0'\n\n-----Constraints-----\n\n1 <= t <= 10^4\n1 <= stdin.length <= 10^5\nstdin.length = n\n1 <= a_1, a_2, \\dots, a_n <= 10^5\na_1, a_2, \\dots, a_n = 1, 1, 2, 2\n\n\"\"\""
    },
    {
        "number": 4530,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, [\"1 2\", \"3 2\", \"1 3\", \"2 4\", \"3 4\", \"1 4\"]) == \"3\"\nassert solution(3, [\"1 1\", \"3 2\", \"1 3\", \"2 4\", \"3 4\", \"1 4\"]) == \"1\"\nassert solution(4, [\"1 1\", \"3 2\", \"1 3\", \"2 4\", \"3 4\", \"1 4\"]) == \"1\"\nassert solution(4, [\"1 1\", \"3 2\", \"1 3\", \"2 4\", \"3 4\", \"1 4\"]) == \"0\"\nassert solution(5, [\"1 1\", \"3 2\", \"1 3\", \"2 4\", \"3 4\", \"1 4\"]) == \"0\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '4'\nassert solution(stdin) == '2 4 4 1 4 3 4'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 3 7 10 1 4 6 1\") == \"121\"\nassert solution(\"4 4 5 5 6 6 7\") == \"121\"\nassert solution(\"0 0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"7 5 1 7 3 6 1 0 0 0\") == \"121\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 121\n\nfor i in range(int(input())):\n    a, b = map(int, input().split())\n    print(min(a+b, b+a))"
    },
    {
        "number": 4531,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(sys.stdin.readline()) == 0, \"No solution\""
    },
    {
        "number": 4531,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('4 1 7 10 1 6 5') == '121'\nassert solution('1 2') == '121'\nassert solution('3 4') == '121'"
    },
    {
        "number": 4531,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '121'\n"
    },
    {
        "number": 4531,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 111 112 113 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 164 165 166 168 169 170 171 172 173 174 175 176 178 179 180 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 196 197 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 219 219 220 221 231 232 233 234 235 236 237 238 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4531,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 121\n"
    },
    {
        "number": 4531,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"8 11 3 1 7 10 1 6 5\"\n) == 121, \"Your code should print 121\"\n\nassert solution(\n    \"9\"\n) == 0, \"Your code should print 0\"\n\nassert solution(\n    \"9 11 1 7 10 1 6 5\"\n) == 121, \"Your code should print 121\"\n\nassert solution(\n    \"9 11 2 1 7 10 1 6 5\"\n) == 121, \"Your code should print 121\"\n\nassert solution(\n    \"9 11 3 1 7 10 1 6 5\"\n) == 121, \"Your code should print 121\""
    },
    {
        "number": 4531,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 121\n\n\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nUnit Test case #6\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\"\"\"\nimport sys; input=lambda:sys.stdin.readline().rstrip(); int, float, bool = map(int,input().split())\n"
    },
    {
        "number": 4531,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == str(121)\n"
    },
    {
        "number": 4532,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 18\nassert solution(4) == 0\nassert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 1\n"
    },
    {
        "number": 4532,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '22'\nassert solution(stdin) == '222'\nassert solution(stdin) == '1328'\nassert solution(stdin) == '220'\nassert solution(stdin) == '1329'\n"
    },
    {
        "number": 4532,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"24\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 18\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4532,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 18\n\n\"\"\""
    },
    {
        "number": 4532,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('8 7 1 2 3 4 5 6 7 8') == 18\nassert solution('5 10') == 22\nassert solution('10 25') == 27\nassert solution('8 8') == 1\nassert solution('1 2 3 4 5 6 7 8') == 6\n"
    },
    {
        "number": 4532,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"5\", \"4\", \"1\", \"2\", \"1\", \"3\"]) == \"6\"\nassert solution([\"4\", \"4\", \"4\", \"4\", \"3\", \"3\"]) == \"0\"\nassert solution([\"3\", \"1\", \"2\", \"1\", \"3\"]) == \"2\"\nassert solution([\"3\", \"1\", \"2\", \"1\", \"3\"]) == \"3\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"0\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 23\n\n\n---\n\nThe second solution was too slow. I think the performance of this solution is too fast and I would have to move it to another one. If I thought you were not to use a list, I could use a lot of memory.\n\n---\n\n'''\n"
    },
    {
        "number": 4532,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"10 6\", \"20 100 50 20 100500\", \"10 25\", \"24 24 24 24 24 24 24 24 24 24\", \"8 8\"]) == \"18\"\nassert solution([\"1 2 3 4 5 6 7 8\", \"1 2 3 4 5 6 7 8\"]) == \"0\"\nassert solution([\"1 2 3 4 5 6 7 8\"]) == \"0\"\nassert solution([\"1 2 3 4 5 6 7 8\", \"1 2 3 4 5 6 7 8\"]) == \"0\"\nassert solution([\"1 2 3 4 5 6 7 8\", \"1 2 3 4 5 6 7 8\", \"1 2 3 4 5 6 7 8\", \"1 2 3 4 5 6 7 8\"]) == \"0\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1') == '6'\nassert solution('1 2') == '6'\nassert solution('1 3') == '6'\nassert solution('1 4') == '6'\nassert solution('1 5') == '6'\n"
    },
    {
        "number": 4533,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['a','b','c']), 'a'\nassert solution(['a','b','a']), 'b'\nassert solution(['a','a','a','a','a']), 'a'\n"
    },
    {
        "number": 4533,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(str) == \"2\"\nassert solution(str) == \"2\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 2') == 2\nassert solution('3 2 1') == 1\nassert solution('3 1 2') == 1\n"
    },
    {
        "number": 4533,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1\",\"2\"], [\"1\",\"2\",\"3\"]) == \"2\"\nassert solution([\"1\",\"2\",\"1\"], [\"1\",\"1\",\"1\"]) == \"1\"\nassert solution([\"1\",\"1\",\"1\",\"1\"], [\"1\",\"1\",\"1\",\"1\"]) == \"1\"\nassert solution([\"3\",\"3\",\"3\",\"3\",\"3\"], [\"1\",\"1\",\"1\",\"1\",\"1\"]) == \"3\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1,2,3\"), \"1,1\"\nassert solution(\"1,2\"), \"1,2\"\nassert solution(\"1,2,3\"), \"2,2\"\nassert solution(\"1,2,3,4\"), \"2,3\"\nassert solution(\"1,2,3,4,5\"), \"4,5\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"{1,2}\") == \"2\"\nassert solution(\"{1,2,3}\") == \"2\"\nassert solution(\"{1,1}\") == \"1\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == inp\n"
    },
    {
        "number": 4533,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1,2\") == \"2\"\nassert solution(\"1,1\") == \"1\"\nassert solution(\"1,1,1\") == \"1\"\nassert solution(\"1,1,2\") == \"2\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1, 1) == 1, \"1\"\nassert solution(1, 2) == 1, \"1\"\nassert solution(2, 1) == 1, \"1\"\nassert solution(2, 2) == 1, \"1\"\nassert solution(3, 1) == 1, \"1\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('123') == '2'\nassert solution('1122') == '1'\nassert solution('1112') == '2'\nassert solution('1212') == '1'\nassert solution('12') == '1'\n"
    },
    {
        "number": 4534,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4) == [1,3,3,1]\n\"\"\"\n"
    },
    {
        "number": 4534,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == [1,3,3,1]\nassert solution(4) == [1,3,3,4]\nassert solution(3) == [1,3,3,5]\nassert solution(2) == [1,2,3,5]\nassert solution(1) == [1]"
    },
    {
        "number": 4534,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(123) == [1,3,3,1]\n\n\n'''"
    },
    {
        "number": 4534,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == [1,3,3,1]\nassert solution(5) == [1,3,3,1,3,1]\nassert solution(0) == [1]\nassert solution(1) == [1,1]\nassert solution(2) == [1,1,1]\n"
    },
    {
        "number": 4534,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2) == [1,3,3,1]\nassert solution(3) == [1,3,3,1,1]\nassert solution(4) == [1,3,3,1,3,1]\nassert solution(5) == [1,3,3,1,6,5,1]\nassert solution(6) == [1,6,10,20,35,60,90,120,720,5040]\n"
    },
    {
        "number": 4534,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5') == [1,3,3,1]\n\n\n'''\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        a = [1]\n        if rowIndex == 0:\n            return a\n        for i in range(1, rowIndex+1):\n            a.append(a[i-1] + a[i-1])\n        return a\n"
    },
    {
        "number": 4534,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3) == [1,3,3,1]\nassert solution(5) == [1,3,5,3,1]\nassert solution(0) == []\n"
    },
    {
        "number": 4534,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3) == [1,3,3,1]\nassert solution(4) == [1,3,2,1,3]\nassert solution(5) == [1,3,3,2,3,1]\n\"\"\"\n"
    },
    {
        "number": 4534,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3) == [1,3,3,1]\n\n\"\"\""
    },
    {
        "number": 4534,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\"]) == \"1\"\nassert solution([\"1\", \"2\"]) == \"1\"\nassert solution([\"1\", \"3\", \"3\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"4\"]) == \"1\"\nassert solution([\"1\", \"3\", \"3\", \"4\", \"4\"]) == \"1\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(123) == 32\nassert solution(11111) == 1\n"
    },
    {
        "number": 4535,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    input: stdin\n    ) == '3'\n'''\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        sum_ = 0\n        for i in range(32):\n            sum_ ^= (n >> i) & 1\n        return sum_\n\nprint(Solution().hammingWeight(65))"
    },
    {
        "number": 4535,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 31\n"
    },
    {
        "number": 4535,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 31\n"
    },
    {
        "number": 4535,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0000000000000000000000000000000100000100000001\") == 31\nassert solution(\"0000000000000000000000000001000100000\") == 5\nassert solution(\"0000000000000000000000001000100000000\") == 3\nassert solution(\"0000000000000000000000001000001000000\") == 1\nassert solution(\"0000000000000000000000001111111100000000000001000000000000010000010000000000000001000000\") == 31\n"
    },
    {
        "number": 4535,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 31\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 31\n\nassert solution(stdin) == 31\n"
    },
    {
        "number": 4535,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"31\"\n\n\n'''"
    },
    {
        "number": 4535,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31"
    },
    {
        "number": 4535,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"100000000000000000000000000001011\",\"100000000000000000000000010000000\"]) == \"3\"\nassert solution([\"00000000000000000000000000001011\",\"100000000000000000000000010000000\"]) == \"1\"\nassert solution([\"00000000000000000000000010000000\",\"100000000000000000000000000001011\"]) == \"31\"\nassert solution([\"000000000000000000000000111010\",\"00010100001011101100\"]) == \"11\"\nassert solution([\"0000000000000000000000001000000\",\"1011111111111100100100101101010010111111011\"]) == \"1011\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        \"\"\"\n        Given a non negative integer x, compute and return the Hamming weight of x.\n        \"\"\"\n        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if n in [1, 2]:\n            return 1\n        total = 0\n        while n!= 0:\n            total += n % 2\n            n //= 2\n        return total\n\n\nsolution = Solution()\nprint(solution.hammingWeight(1))\nprint(solution.hammingWeight(2))\nprint(solution.hammingWeight(3))\nprint(solution.hammingWeight(4))\nprint(solution.hammingWeight(0))\n"
    },
    {
        "number": 4535,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"31\"\nassert solution(input) == \"1\"\n\n>>> import operator\n>>> import itertools\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution(stdin):\n...     pass\n...\n...\n>>> def solution"
    },
    {
        "number": 4536,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1\",\"2\",\"3\"]) == \"1\"\nassert solution([\"4\",\"3\",\"2\",\"1\"]) == \"4\"\nassert solution([\"0\",\"0\",\"0\",\"0\"]) == \"0\"\nassert solution([\"0\",\"1\"]) == \"1\"\nassert solution([\"0\",\"0\",\"0\",\"0\"]) == \"0\""
    },
    {
        "number": 4536,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['1','2','3']) == '123'\nassert solution(['4','3','2','1']) == '4123'\nassert solution(['3','2','1']) == '3213'\nassert solution(['1','2','3','4']) == '4243'\nassert solution(['2','3','3']) == '32'\n"
    },
    {
        "number": 4536,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('', 0) == []\nassert solution('1') == [1]\nassert solution('4') == [4]\nassert solution('4 1') == [1, 4]\nassert solution('1 2 3 4') == [1, 2, 3, 4]\n"
    },
    {
        "number": 4536,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '1234'\nassert solution(input()) == '4321'\nassert solution(input()) == '56789'"
    },
    {
        "number": 4536,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\",\"2\",\"3\"]) == \"1\"\nassert solution([\"4\",\"3\",\"2\",\"1\"]) == \"4\"\nassert solution([\"4\",\"3\",\"2\",\"2\"]) == \"2\"\nassert solution([\"4\",\"3\",\"2\",\"0\"]) == \"2\"\nassert solution([\"4\",\"3\",\"2\",\"0\"]) == \"1\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(12)\n"
    },
    {
        "number": 4536,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == [1], \"1\"\nassert solution(2) == [1,2,3], \"2\"\nassert solution(3) == [1,2,3,4], \"3\"\nassert solution(4) == [4,3,2,1], \"4\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([1,2,3]) == [1,2,4]\nassert solution([4,3,2,1]) == [4,3,2,2]"
    },
    {
        "number": 4536,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1\", \"2\", \"3\"]) == \"1\"\nassert solution([\"4\", \"3\", \"2\", \"1\"]) == \"4\"\nassert solution([\"4\", \"3\", \"2\", \"0\"]) == \"0\"\nassert solution([\"1\", \"2\", \"0\"]) == \"1\""
    },
    {
        "number": 4536,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == [1]\nassert solution(1) == [1, 1]\nassert solution(1, 1) == [1, 1, 1]\nassert solution(1, 1, 1) == [1, 1, 1, 1]\nassert solution(1, 1, 1, 1) == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 4537,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 1\") == \"4\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 4\") == \"5\"\nassert solution(\"5 2\") == \"5\"\nassert solution(\"5 5\") == \"5\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"3 4\") == \"4\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2 2\") == \"4\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '3'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 4537,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3\", \"1\"]) == \"3\"\nassert solution([\"3\", \"1\", \"2\"]) == \"4\"\nassert solution([\"2\", \"1\", \"3\"]) == \"4\"\nassert solution([\"2\", \"3\", \"1\"]) == \"3\"\nassert solution([\"3\", \"1\", \"2\", \"4\"]) == \"3\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stmt) == \"4\"\nassert solution(stmt) == \"3\"\nassert solution(stmt) == \"3+1=4, 3-1=2 and 3 \\times 1=3. The largest among them is 4.\n"
    },
    {
        "number": 4537,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1 2\"]) == \"1 2\"\nassert solution([\"2 3\"]) == \"2 3\"\nassert solution([\"1 4\"]) == \"1 4\"\nassert solution([\"3 5\"]) == \"3 5\"\nassert solution([\"1 6\"]) == \"1 6\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\n"
    },
    {
        "number": 4537,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input(\" \")) == \"4\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 4\") == \"4\"\nassert solution(\"10 20\") == \"21\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 4\") == \"0\"\nassert solution(\"4 3\") == \"4\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 4 0\") == \"3\"\nassert solution(\"2 4 0\") == \"2\"\nassert solution(\"2 4 -4\") == \"2\"\nassert solution(\"5 2 4\") == \"3\"\nassert solution(\"5 2 -4\") == \"3\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 5\n\"\"\"\n\nn = int(input())\nd = int(input())\nfor _ in range(n):\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    a = pow((x2 - x1), 2) + pow((y2 - y1), 2)\n    b = d ** 2 - a\n    if b < 0:\n        print(0)\n    elif a > b:\n        print(1)\n    else:\n        print(2)\n"
    },
    {
        "number": 4538,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == '5'\n"
    },
    {
        "number": 4538,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 4538,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1,5) == \"3\"\nassert solution(1,4) == \"3\"\nassert solution(2,4) == \"2\"\nassert solution(2,5) == \"1\"\nassert solution(2,6) == \"3\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 3 4 5\") == \"3\"\nassert solution(\"2 2 6 9\") == \"3\"\nassert solution(\"3 3 4 -4\") == \"3\"\nassert solution(\"0\") == \"0\"\nassert solution(\"-2 -4 4\") == \"3\"\n\nRuntime: 36 ms (95.58%)\nMemory Usage: 18.7 MB (98.43%)\n\nIn [1]: solution(input())\nOut[1]:\n3\n'''\nimport math"
    },
    {
        "number": 4538,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 6\n    \n**********************************************************************\nHow do you implement a solution to a 5x5 matrix of integers?\nIn this challenge, you should design an algorithm that is similar to the following one:\n- Consider a matrix of size N\u00d7N. For any given coordinate pair (i,j), its value x+y+z=value,\nmake all pairs of (i,j) with z>=0. You have to compute how many pairs of coordinates satisfy this condition.\n\n------Input Format-----\nA sequence of integer separated by spaces.\n\n-----Output Format-----\nPrint an integer representing the number of pairs satisfying the condition.\n\n-----Sample Input-----\n1 2 2\n1 1 1\n2 1 2\n2 2 2\n1 1 3\n\n-----Sample Output-----\n2\n\nThe order in which we sort is as follows:\n- [2,1,1]\n- [1,2,2]\n- [2,1,3]\n- [1,2,3]\n- [1,3,2]\n- [2,3,2]\n\n------Expected Output------\n1\n**********************************************************************\nHow do you implement a solution to a 5x5 matrix of integers?\nIn this challenge, you should design an algorithm that is similar to the following one:\n- Consider a matrix of size N\u00d7N. For any given coordinate pair (i,j), its value x+y+z=value,\nmake all pairs of (i,j) with z>=0. You have to compute how many pairs of coordinates satisfy this condition.\n\n------Input Format-----\nA sequence of integer separated by spaces.\n\n-----Output Format-----\nPrint an integer representing the number of pairs satisfying the condition.\n\n-----Sample Input-----\n1 2 2\n1 1 1\n2 1 2\n2 2 2\n1 1 3\n\n-----Sample Output-----\n2\n\nThe order in which we sort is as follows:\n- [1,2,2]\n- [1,3,2]\n- [2,1,3]\n- [2,3,2]\n- [1,2,3]\n- [1,3,2]\n- [2,1,3]\n\n------Expected Output------\n1\n**********************************************************************\nHow do you implement a solution to a 5x5 matrix of integers?\nIn this challenge, you should design an algorithm that is similar to the following one:\n- Consider a matrix of size N\u00d7N. For any given coordinate pair (i,j), its value x+y+z=value,\nmake all pairs of (i,j) with z>=0. You have to compute how many pairs of coordinates satisfy this condition.\n\n------Input Format-----\nA sequence of integer separated by spaces.\n\n-----Output Format-----\nPrint an integer representing the number of pairs satisfying the condition.\n\n-----Sample Input-----\n1 2 2\n1 1 1\n2 1 2\n2 2 2\n1 1 3\n\n-----Sample Output-----\n2\n\nThe order in which we sort is as follows:\n- [1,2,2]\n- [1,3,2]\n- [2,1,3]\n- [2,3,2]\n- [1,2,3]\n- [1,3,2]\n- [2,1,3]\n\n------Expected Output------\n1\n**********************************************************************\nHow do you implement a solution to a 5x5 matrix of integers?\nIn this challenge, you should design an algorithm that is similar to the following one:\n- Consider a matrix of size N\u00d7N. For any given coordinate pair (i,j), its value x+y+z=value,\nmake all pairs of (i,j) with z>=0. You have to compute how many pairs of coordinates satisfy this condition.\n\n------Input Format-----\nA sequence of integer separated by spaces.\n\n-----Output Format-----\nPrint an integer representing the number of pairs satisfying the condition.\n\n-----Sample Input-----\n1 2 2\n1 1 1\n2 1 2\n2 2 2\n1 1 3\n\n-----Sample Output-----\n1\n**********************************************************************\nHow do you implement a solution to a 5x5 matrix of integers?\nIn this challenge, you should design an algorithm that is similar to the following one:\n- Consider a matrix of size N\u00d7N. For any given coordinate pair (i,j), its value x+y+z=value,\nmake all pairs of (i,j) with z>=0. You have to compute how many pairs of coordinates satisfy this condition.\n\n------Input Format-----\nA sequence of integer separated by spaces.\n\n-----Output Format-----\nPrint an integer representing the number of pairs satisfying the condition.\n\n-----Sample Input-----\n1 2 2\n1 1 1\n2 1 2\n2 2 2\n1 1 3\n\n-----Sample Output-----\n2\n\nThe order in which we sort is as follows:\n- [1,2,2]\n- [1,3,2]\n- [2,1,3]\n- [2,3,2]\n- [1,2,3]\n- [1,3,2]\n- [2,1,3]\n\n------Expected Output------\n1\n**********************************************************************\nHow do you implement a solution to a 5x5 matrix of integers?\nIn this challenge, you should design an algorithm that is similar to the following one:\n- Consider a matrix of size N\u00d7N. For any given coordinate pair (i,j), its value x+y+z=value,\nmake all pairs of (i,j) with z>=0. You have to compute how many pairs of coordinates satisfy this condition.\n\n------Input Format-----\nA sequence of integer separated by spaces.\n\n-----Output Format-----\nPrint an integer representing the number of pairs satisfying the condition.\n\n-----Sample Input-----\n1 2 2\n1 1 1\n2 1 2\n2 2 2\n1 1 3\n\n-----Sample Output-----\n1\n**********************************************************************\nHow do you implement a solution to a 5x5 matrix of integers?\nIn this challenge, you should design an algorithm that is similar to the following one:\n- Consider a matrix of size N\u00d7N. For any given coordinate pair (i,j), its value x+y+z=value,\nmake all pairs of (i,j) with z>=0. You have to compute how many pairs of coordinates satisfy this condition.\n\n------Input Format-----\nA sequence of integer separated by spaces.\n\n-----Output Format-----\nPrint an integer representing the number of pairs satisfying the condition.\n\n-----Sample Input-----\n1 2 2\n1 1 1\n2 1 2\n2 2 2\n1 1 3\n\n-----Sample Output-----\n1\n**********************************************************************\nHow do you implement a solution to a 5x5 matrix of integers?\nIn this challenge, you should design an algorithm that is similar to the following one:\n- Consider a matrix of size N\u00d7N. For any given coordinate pair (i,j), its value x+y+z=value,\nmake all pairs of (i,j) with z>=0. You have to compute how many pairs of coordinates satisfy this condition.\n\n------Input Format-----\nA sequence of integer separated by spaces.\n\n-----Output Format-----\nPrint an integer representing the number of pairs satisfying the condition.\n\n-----Sample Input-----\n1"
    },
    {
        "number": 4538,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 4\n\n-----Basic Strategy-----\n1. We know that we have N points in the two-dimensional plane.\n2. We know that each point is located on a line, so we can identify all the points that form a circle.\n3. We know that all points are located on a line.\n4. We have to check if the point (p,q) is located on the line segment (a,b) that is (p,q) is located in. If it is, we return the index of point (p,q).\n5. If the point (p,q) is located on the line segment (a,b) that is (p,q) is located in, we have to find all the other points on the line segment that is (p,q) is located in.\n6. In the case of a point (p,q) being located on the line segment (a,b) that is (p,q) is located in, we determine if there is any other point on the line segment that is located in.\n7. In the case of a point (p,q) being located on the line segment (a,b) that is located on the line segment (p,q), we determine that the point (p,q) is located on the line segment (a,b) that is located in.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 0 \\leq D \\leq 10^5\n - |X_i|,|Y_i| \\leq 2\\times 10^5\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN D\nX_1 Y_1\n\\vdots\nX_N Y_N\n\n-----Output-----\nPrint an integer representing the number of points such that the distance from the origin is at most D.\n\n-----Sample Input-----\n4 5\n0 5\n-2 4\n3 4\n4 -4\n\n-----Sample Output-----\n3\n\nThe distance between the origin and each of the given points is as follows:\n - \\sqrt{0^2+5^2}=5\n - \\sqrt{(-2)^2+4^2}=4.472\\ldots\n - \\sqrt{3^2+4^2}=5\n - \\sqrt{4^2+(-4)^2}=5.656\\ldots\nThus, we have three points such that the distance from the origin is at most 5.\n"
    },
    {
        "number": 4539,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == \"No\"\nassert solution(2) == \"No\"\nassert solution(3) == \"Yes\"\nassert solution(4) == \"No\"\nassert solution(5) == \"No\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(12) == 'Yes'\nassert solution(15) == 'No'\nassert solution(25) == 'No'\nassert solution(27) == 'No'\nassert solution(100) == 'Yes'\n"
    },
    {
        "number": 4539,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(10) == \"Yes\"\nassert solution(13) == \"No\"\nassert solution(0) == \"No\"\nassert solution(13) == \"No\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(123) == \"Yes\"\nassert solution(987) == \"No\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(12) == \"Yes\"\nassert solution(12) == \"No\"\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"010\") == \"Yes\"\nassert solution(\"11\") == \"No\"\nassert solution(\"101\") == \"No\"\nassert solution(\"10\") == \"Yes\"\nassert solution(\"0\") == \"Yes\""
    },
    {
        "number": 4539,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(12) == 'Yes'\nassert solution(12) == 'No'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(12) == \"Yes\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(12) == \"Yes\"\nassert solution(13) == \"No\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4539,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"16\") == \"No\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"13\") == \"Yes\"\nassert solution(\"112\") == \"Yes\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 5 -1\") == \"12\"\nassert solution(\"3 3 -1\") == \"8\"\nassert solution(\"3 2 -1\") == \"10\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 5 -1\") == \"12\"\nassert solution(\"3 5 -1\") == \"12\"\nassert solution(\"3 5 -1\") == \"12\"\nassert solution(\"3 5 -1\") == \"12\"\nassert solution(\"3 5 -1\") == \"12\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 5) == 12\nassert solution(3, -1) == 8\nassert solution(4, 2) == 10\nassert solution(6, 1) == 0\n"
    },
    {
        "number": 4540,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 5 -1') == '12'\nassert solution('3 5 -1') == '8'\nassert solution('3 5 -1') == '10'\nassert solution('3 5 -1') == '0'"
    },
    {
        "number": 4540,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 10\n\"\"\"\nimport sys\nfrom collections import deque\ninput = sys.stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\n\nvisited = [-1] * n\ndp = [0] * n\n\nfor i in range(n):\n    if visited[i] == -1:\n        dp[i] = a[i]\n        visited[i] = 1\n\nq = deque([0])\n\nwhile q:\n    p = q.popleft()\n\n    for i in range(n):\n        if dp[i] == -1:\n            continue\n\n        if visited[i] == 1:\n            continue\n\n        if visited[i] == 0:\n            continue\n\n        q.append(dp[i])\n        dp[i] = dp[p] + dp[i]\n        visited[i] = 0\nprint(sum(dp) - 1)"
    },
    {
        "number": 4540,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 5 -1\") == 12, \"Correct output\"\nassert solution(\"3 5 -1\") == \"8\", \"Incorrect output\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 5 -1\") == '12'\nassert solution(\"3 4 1\") == '8'\nassert solution(\"3 3 1\") == '10'\nassert solution(\"4 4 1\") == '10'\nassert solution(\"5 5 1\") == '0'"
    },
    {
        "number": 4540,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4540,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == str(12)\nassert solution(inp) == str(8)\nassert solution(inp) == str(10)\n"
    },
    {
        "number": 4540,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 12\n"
    },
    {
        "number": 4541,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'vowel'\nassert solution(\"a\") == \"a\"\nassert solution(\"e\") == \"e\"\nassert solution(\"i\") == \"i\"\nassert solution(\"o\") == \"o\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == \"VOWEL\"\nassert solution(2) == \"CONSONANT\"\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"a\", \"e\", \"i\", \"o\", \"u\"]) == \"vowel\"\nassert solution([\"A\", \"E\", \"I\", \"O\", \"U\"]) == \"vowel\"\nassert solution([\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]) == \"vowel\"\nassert solution([\"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\"]) == \"vowel\"\nassert solution([\"A\", \"E\", \"I\", \"O\", \"U\", \"A\", \"E\", \"I\", \"O\", \"U\"]) == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"a\", \"b\", \"c\", \"d\"]) == \"vowel\"\nassert solution([\"e\", \"f\", \"g\", \"h\"]) == \"consonant\"\nassert solution([\"i\", \"j\", \"k\", \"l\"]) == \"consonant\"\nassert solution([\"m\", \"n\", \"o\", \"p\"]) == \"vowel\"\nassert solution([\"q\", \"r\", \"s\", \"t\"]) == \"consonant\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 'vowel'\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"vowel\""
    },
    {
        "number": 4541,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"a\") == \"a\"\nassert solution(\"A\") == \"a\"\nassert solution(\"Aa\") == \"a\"\nassert solution(\"ae\") == \"a\"\nassert solution(\"AE\") == \"a\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"BBBWW\"), \"No\"\nassert solution(\"RRWW\"), \"No\"\nassert solution(\"RRWW\"), \"Yes\"\nassert solution(\"RRWW\"), \"Yes\"\nassert solution(\"RRWW\"), \"Yes\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 1\n\n-----Bonus-----\nLess than 200 lines of code.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4542,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('BBBWWBBBWW') == '6'\nassert solution('BBBWWBWBWBW') == '21'\nassert solution('BBBBBBBWWBBBB') == '3'\nassert solution('BBBBBWBWBWBWBBB') == '12'\n"
    },
    {
        "number": 4542,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"BBBWW\",\n    \"BBBWW\"\n) == 1\n"
    },
    {
        "number": 4542,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"BWWWWW\") == \"2\"\nassert solution(\"BWWWWW\") == \"2\"\nassert solution(\"BWWW\") == \"2\"\nassert solution(\"WW\") == \"1\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"BBBWW\") == 1\nassert solution(\"RRLL\") == 3\nassert solution(\"GGGBWW\") == 2\nassert solution(\"RRRQW\") == 5\nassert solution(\"RRRQW\") == 3\n"
    },
    {
        "number": 4542,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('BBBWW') == '2'\nassert solution('BBBWW') == '1'\nassert solution('BBBWW') == '1'\nassert solution('BBBWW') == '1'\nassert solution('BBBWW') == '2'\n"
    },
    {
        "number": 4542,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\"\nclass Solution:\n    def minimumNumberOfStones(self, stones: str) -> int:\n        n = len(stones)\n        white = 0\n        black = 0\n        \n        for i in range(n):\n            white += stones[i]!= 'W' and stones[i]!= 'B'\n            black += stones[i] == 'W' and stones[i]!= 'B'\n            \n        if white!= black:\n            return n + 1\n        \n        return n"
    },
    {
        "number": 4543,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['1', '2']) == 'Yes'\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n"
    },
    {
        "number": 4543,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"4 11\") == \"No\"\nassert solution(\"121\") == \"No\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1 2) == \"Yes\"\nassert solution(1 3) == \"No\"\nassert solution(1 4) == \"Yes\"\nassert solution(1 5) == \"No\"\nassert solution(2 3) == \"No\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2,21) == \"Yes\""
    },
    {
        "number": 4543,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 'Yes'\n\n\"\"\"\n\na, b = map(int, stdin.split())"
    },
    {
        "number": 4543,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 'Yes'\n\n------------------------------\n \"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1 21) == 'Yes'\n\"\"\"\nfrom sys import stdin\n\nN = stdin.readline().strip()\nN = int(N)\na, b = map(int, N.split())"
    },
    {
        "number": 4543,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\nprint(\"Yes\")\nassert solution(stdin) == \"No\"\nprint(\"No\")\n"
    },
    {
        "number": 4544,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 2 4 5 3 2 3 3 2 3') == 4\nassert solution('1 1 1') == 1\nassert solution('1 9') == 1\nassert solution('1 3 1 2 6 4 6 4 6 4 3') == 6\nassert solution('3 7 4 5 6 3 5 3 5 5') == 7\n"
    },
    {
        "number": 4544,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"4\"\n\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"7 11\") == \"4\"\nassert solution(\n    \"7 4 1\") == \"3\"\nassert solution(\n    \"7 3 1 4 5 9\") == \"2\"\nassert solution(\n    \"7 6\") == \"2\"\nassert solution(\n    \"7\") == \"0\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 4\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == 4\n'''\n"
    },
    {
        "number": 4544,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 4\") == 6\n\n-----Sample Input-----\n1\n3\n1\n\n-----Sample Output-----\n2\n\nFor example, turn the sequence into 2,2,3,2,6,9,2 and select X=2 to obtain 4, the maximum possible count.\n"
    },
    {
        "number": 4544,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1, 5, 2, 3, 2, 6, 2, 4) == \"2\"\nassert solution(1, 3, 2, 3, 2, 6, 2, 4) == \"1\"\nassert solution(1, 9, 2, 3, 2, 6, 2, 4) == \"3\"\nassert solution(2, 4, 2, 3, 2, 6, 2, 4) == \"2\"\nassert solution(2, 1, 2, 3, 2, 6, 2, 4) == \"1\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 2\nassert solution(4) == 4\n"
    },
    {
        "number": 4544,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '4'"
    },
    {
        "number": 4544,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    inp:\n    \"7 4 3 1 5 9 2\") == 4\nassert solution(\n    inp:\n    \"3 1 4 1 5 9 2\") == 4\nassert solution(\n    inp:\n    \"3 1 4 1 5 9 2\") == 2\nassert solution(\n    inp:\n    \"3 1 4 1 5 9 2\") == 1\nassert solution(\n    inp:\n    \"5 1 3 2 4 9 8\") == 3\n"
    },
    {
        "number": 4545,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\nclass Solution:\n    def solve(self, N, A):\n        counter = defaultdict(int)\n        for i in range(N):\n            for j in range(N):\n                if A[i][j] == 1:\n                    counter[(i, j)] += 1\n        return counter[(0,0)] * counter[(N-1, N-1)]"
    },
    {
        "number": 4545,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"5\""
    },
    {
        "number": 4545,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4') == '7'\nassert solution('5') == '4'\nassert solution('10') == '0'\nassert solution('100') == '0'\nassert solution('200') == '0'\n"
    },
    {
        "number": 4545,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"5\"\n\n'''\n\nimport numpy as np"
    },
    {
        "number": 4545,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 4 3\") == \"8\"\nassert solution(\"2 4 3\") == \"1\"\nassert solution(\"2 2 4\") == \"2\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"5 5 5\") == \"0\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"4 5 7 8 9\") == \"3\"\nassert solution(\"2 3 5 1\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 5 7\") == \"1\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"............\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 0 0 0 1 1\") == 5\nassert solution(\"2 2 3 2 3 3 4 4\") == 0\n"
    },
    {
        "number": 4545,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4\") == 5\n\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5 2\", \"2 4\", \"4 6\", \"6 2\"]) == \"YES\"\nassert solution([\"2 2\", \"3 3\", \"4 4\"]) == \"NO\"\n\"\"\"\n\nimport math\n\nclass Solution:\n    def isPollyCounded(self, p: str) -> bool:\n        if len(p) > 3:\n            return False\n        if p == \"b c\":\n            return True\n        p = list(p)\n        if p[0] == 'c':\n            if p[2] == 'b':\n                return True\n        if p[0] == 'a':\n            if p[2] == 'c':\n                return True\n        if p[0] == 'b':\n            if p[2] == 'a':\n                return True\n\n        return False"
    },
    {
        "number": 4546,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 4 6') == \"YES\"\nassert solution('3 4 6') == \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"2 4 6\"\n) == \"YES\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"4 6\") == \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 4 2\") == \"NO\"\nassert solution(\"2 4 6\") == \"YES\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"NO\"\n\nprint('solution test passed')"
    },
    {
        "number": 4546,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"5 3 7 9\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\n\n\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp := input().strip()) == \"YES\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"53\") == \"Yes\"\nassert solution(\"72\") == \"No\"\nassert solution(\"\") == \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2) == 'Yes'\nassert solution(5) == 'Yes'\nassert solution(0) == 'No'\n"
    },
    {
        "number": 4547,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(29) == 'Yes'\nassert solution(28) == 'No'\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"00\") == \"Yes\"\nassert solution(\"01\") == \"Yes\"\nassert solution(\"01\") == \"Yes\"\nassert solution(\"20\") == \"No\"\nassert solution(\"11\") == \"No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(solution(\"29\") == \"Yes\")\nassert solution(solution(\"300\") == \"No\")\nassert solution(solution(\"1000000\") == \"No\")\nassert solution(solution(\"2\") == \"No\")\nassert solution(solution(\"0\") == \"No\")"
    },
    {
        "number": 4547,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(10) == 'Yes'\nassert solution(29) == 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(9) == 'Yes'\nassert solution(29) == 'No'\n"
    },
    {
        "number": 4547,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"\") == \"No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\" or \"No\", \"Failed\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4548,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 4548,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3,3) == \"1\"\nassert solution(4,3) == \"1\"\nassert solution(5,3) == \"2\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4548,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5,3,3,3) == 1\nassert solution(5,4,3,4) == 1\nassert solution(5,3,3,5) == 0\nassert solution(5,3,4,5) == 0\nassert solution(5,3,4,4) == 0\n"
    },
    {
        "number": 4548,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n
    },
    {
        "number": 4549,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"#.######.###.##.######.###\") == \"Yes\"\nassert solution(\"######.##.###.######.##\") == \"No\"\n\n\"\"\"\n\nclass Solution:\n    def solution(self, *args):\n        pass"
    },
    {
        "number": 4549,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('#') == 'No'\nassert solution('...') == 'Yes'\nassert solution('..##') == 'Yes'\nassert solution('#.#') == 'Yes'\nassert solution('##.#') == 'No'"
    },
    {
        "number": 4549,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"No\"\nassert solution(input) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"No\"\n\nThis is a clever way to solve this problem, but I didn't need to do that for me. Sorry.\n\n'''\n\nfrom sys import stdin\nfrom collections import deque"
    },
    {
        "number": 4549,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"#.#.#\"\n) == \"Yes\", \"Empty square\"\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"#.. #\") == 'Yes'\nassert solution(\"###..#\") == 'No'\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4549,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"#.####\") == \"Yes\"\nassert solution(\"#.#.###\") == \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'Yes'\n\nassert solution(stdin) == 'No'\n\n-----Sample Input-----\n\n-----Input-----\n10 30 20\n\n-----Output-----\nNo\n\n-----Sample Output-----\nNo\n"
    },
    {
        "number": 4550,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('10 20 30') == 'Yes'\nassert solution('30 20 10') == 'No'\nassert solution('20 10 30') == 'No'\nassert solution('10 20 30') == 'No'\n"
    },
    {
        "number": 4550,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"10 20\"\n) == \"No\"\nassert solution(\n    \"10 10\"\n) == \"No\"\nassert solution(\n    \"10 10 20\"\n) == \"No\"\nassert solution(\n    \"10 10 10\"\n) == \"No\"\nassert solution(\n    \"10 10 30 20\"\n) == \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'Yes'\n"
    },
    {
        "number": 4550,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(9,2,3,3,1,2,1) == 'No'\nassert solution(9,2,3,3,1,2,3) == 'No'\nassert solution(10,10,10,10,10,10,10) == 'Yes'"
    },
    {
        "number": 4550,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('10 30 20') == 'No'\nassert solution('10 30 20') == 'No'\nassert solution('10 30 20') == 'No'\nassert solution('10 30 20') == 'Yes'\n"
    },
    {
        "number": 4551,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'Left'\nassert solution(input()) == 'Left'\nassert solution(input()) == 'Left'\n"
    },
    {
        "number": 4551,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'Left'\nassert solution(input()) == 'Balanced'\nassert solution(input()) == 'Right'\n"
    },
    {
        "number": 4551,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3 9 2\") == \"Left\"\nassert solution(\"3 1 6 1\") == \"Left\"\nassert solution(\"3 3 4 3\") == \"Left\"\nassert solution(\"4 7 3 3\") == \"Left\"\nassert solution(\"4 8 4 2\") == \"Left\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"Left\"\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'Left'\nassert solution(stdin) == 'Balanced'\nassert solution(stdin) == 'Right'\n"
    },
    {
        "number": 4551,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('A') == 'Left'\nassert solution('B') == 'Left'\nassert solution('C') == 'Left'\nassert solution('D') == 'Left'"
    },
    {
        "number": 4551,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"Left\"\nassert solution(input) == \"Balanced\"\nassert solution(input) == \"Right\""
    },
    {
        "number": 4551,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"Left\"\nassert solution(input) == \"Balanced\"\nassert solution(input) == \"Right\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'Left'\n"
    },
    {
        "number": 4551,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 'Left'\nassert solution(input()) == 'Left'\nassert solution(input()) == 'Left'\n"
    },
    {
        "number": 4552,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 10, \"Test 1 failed\"\n\nassert solution(inp) == 8, \"Test 2 failed\"\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1 0 1 0 0 1 0 1\") == \"8\"\nassert solution(\"1 1 0 1 0 0 1 0 1\") == \"8\"\nassert solution(\"1 1 0 1 0 0 1 0 1\") == \"8\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 1 0 1 0 0 1 1 0 1\\n2 4 5 6 7 8 9 -2 -3 4 -2'), '0'\nassert solution('1 1 0 1 0 0 1 1 0 1\\n2 4 5 6 7 8 9 -2 -3 4 -2'), '7'\nassert solution('1 1 0 1 0 0 1 1 0 1\\n2 4 5 6 7 8 9 -2 -3 4 -2'), '5'\nassert solution('1 1 0 1 0 0 1 1 0 1\\n2 4 5 6 7 8 9 -2 -3 4 -2'), '7'\nassert solution('1 1 0 1 0 0 1 1 0 1\\n2 4 5 6 7 8 9 -2 -3 4 -2'), '1'\n"
    },
    {
        "number": 4552,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 0 1 0 0 1 1 0 1\") == \"1\"\nassert solution(\"1 2 0 1 0 0 1 1 0 2\") == \"5\"\nassert solution(\"1 2 0 1 0 0 1 1 0 3\") == \"7\"\nassert solution(\"1 2 0 1 0 0 1 1 0 4\") == \"0\"\nassert solution(\"1 2 0 1 0 0 1 1 0 5\") == \"10\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"8\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 0 0 0 1 0 1 0 0 0 0 1 1 1 0 0 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4552,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"8\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1\",\"1\",\"1\",\"0\"]) == \"8\"\nassert solution([\"1\",\"1\",\"1\",\"0\",\"0\"]) == \"8\"\nassert solution([\"1\",\"1\",\"1\",\"1\"]) == \"8\"\nassert solution([\"1\",\"0\",\"1\",\"1\"]) == \"8\"\nassert solution([\"1\",\"0\",\"0\",\"1\"]) == \"8\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 1 0 1 0 0 1 0 1\") == \"2\"\nassert solution(\"1 1 1 0 1 0 0 0 1 1\") == \"2\"\nassert solution(\"1 1 1 0 1 0 0 0 0 0 0 1\") == \"1\"\nassert solution(\"1 1 1 0 1 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"1 1 1 0 1 0 0 0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    input: string\n    ) == 'Yes'\n    assert solution(\n    input: string\n    ) == 'No'\n\n'''\n"
    },
    {
        "number": 4553,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1,5) == \"Yes\"\nassert solution(5,1) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n'''\n\nimport math\nimport sys"
    },
    {
        "number": 4553,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"Yes\"\nassert solution(input) == \"No\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"A+B+1\", \"A+B\", \"B+1\"]) == \"Yes\"\nassert solution([\"A+1\", \"B+1\", \"B+1\"]) == \"No\"\nassert solution([\"A+\", \"A\", \"B\", \"B\"]) == \"No\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\""
    },
    {
        "number": 4553,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, \"A+B+1\") == \"Yes\"\nassert solution(0, \"A+B+1\") == \"No\"\n\"\"\"\nclass Solution:\n    def valid(self, number: str) -> bool:\n        if len(number) == 1 and number.isdigit():\n            return True\n        if len(number) >= 5 and number[0] == '-' and number.count('+') >= 2:\n            return True\n        else:\n            return False"
    },
    {
        "number": 4553,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 'Yes'\nassert solution(input) == 'No'\n"
    },
    {
        "number": 4554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(a=0, b=0, W=1) == '0'\nassert solution(a=0, b=0, W=2) == '1'\nassert solution(a=1, b=0, W=1) == '1'\nassert solution(a=1, b=0, W=2) == '2'\nassert solution(a=2, b=0, W=1) == '1'\n"
    },
    {
        "number": 4554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"AtCoDeer\") == \"1\"\nassert solution(\"abcde\") == \"3\"\nassert solution(\"gg\") == \"5\"\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input() == \"1\") == \"1\"\nassert solution(input() == \"2\") == \"1\"\nassert solution(input() == \"3\") == \"2\"\nassert solution(input() == \"4\") == \"2\"\nassert solution(input() == \"5\") == \"3\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"AtCoDeer\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 5 2 3 5 5\") == \"2\"\nassert solution(\"5 6 4 2 2\") == \"1\"\nassert solution(\"1 1 1 2 2\") == \"1\"\nassert solution(\"3 4 3 2\") == \"2\"\nassert solution(\"3 4 3 4\") == \"2\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(sys.stdin) == '1'\n\n-----Time Complexity-----\n - T = O(N * log(W) * W * W).\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline().rstrip())\ntable = list(map(int, stdin.readline().rstrip().split()))\ntable.sort()\nDP = [[0] * N for _ in range(N)]\nfor i in range(N):\n    for j in range(N):\n        DP[i][j] = DP[j][i] = table[i] // 2\n        if i > j:\n            DP[i][i] += DP[i][j]\n            DP[i][j] += DP[i][j - 1]\nprint(DP[N - 1][N - 1])"
    },
    {
        "number": 4554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input(\"int\")) == \"1\"\nassert solution(input(\"string\")) == \"1\"\nassert solution(input(\"string\")) == \"1\"\nassert solution(input(\"string\")) == \"1\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '1'\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 4555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\nassert solution(\"2 2 7 5 4 5\") == \"2 4 5 6 7\"\nassert solution(\"5 5 6 7 8 8 8 9\") == \"5 4 7\"\nassert solution(\"6 6 7 4 5 5\") == \"6 5 4 5\"\nassert solution(\"6 7 6 5 4 5\") == \"7 6 5 4\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\nassert solution(\"3 8 2\") == \"3 1 4 2\"\nassert solution(\"3 8 2\") == \"3 2 5 7\"\nassert solution(\"3 8 2\") == \"3 1 5 2\"\nassert solution(\"3 8 2\") == \"3 1 4 2\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3 8 2'\nassert solution(stdin) == '4 7 8'\nassert solution(stdin) == '4 7 8'"
    },
    {
        "number": 4555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4 8 7\""
    },
    {
        "number": 4555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\nassert solution(\"4 3 7 8\") == \"4 5 6 7 8\"\nassert solution(\"4 6 9 7 8\") == \"4 6 9 8 7\"\nassert solution(\"5 6 9 7 8\") == \"5 6 9 7 8\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7\"\nassert solution(\"2 3 2\") == \"2 3 4\"\nassert solution(\"2 4 2\") == \"2 3 4\"\nassert solution(\"2 5 2\") == \"2 3 5\"\nassert solution(\"4 2 4\") == \"2 3 2\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5\",\"3\",\"4\",\"1\",\"2\"]) == \"3 4 2 1\"\nassert solution([\"5\",\"3\",\"4\",\"1\",\"2\",\"9\"]) == \"1 2 1 9\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]) == \"3 4 5 6 7 8 9 0\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '7'\nassert solution(input()) == '8'\n"
    },
    {
        "number": 4555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1 10\") == \"1 10\"\nassert solution(\"3 2 3 8 7\") == \"3 8 7\"\nassert solution(\"3 1 3 9\") == \"3 9\"\nassert solution(\"3 7 4 5 8\") == \"5 4 8\"\nassert solution(\"3 7 9\") == \"7 9\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ABC\") == \"ABC\"\nassert solution(\"XCA\") == \"XCA\"\nassert solution(\"AC\") == \"AC\"\nassert solution(\"AAA\") == \"AAA\"\nassert solution(\"AbA\") == \"AbA\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"AtCoder s Contest\") == \"ABC\"\nassert solution(\"Snuke is going to open a contest named 'AtCoder s Contest'.\") == \"ABC\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"AUGCAAGCC\") == \"AB\"\nassert solution(\"XAuCAA\") == \"A\"\nassert solution(\"AuGCAA\") == \"A\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"AtCoder s Contest\") == \"AxC\"\nassert solution(\"AtCoder Beginner Contest\") == \"BC\"\nassert solution(\"ABC\") == \"ABC\"\n\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"AtCoder s Contest\") == \"ABC\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('AtCoder s Contest') == 'ABC'\n'''\n\nclass Solution:\n    def solution(self, name):\n        answer = \"\"\n        for i in name:\n            answer += str(ord(i) - ord('A'))\n        return answer"
    },
    {
        "number": 4556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"AtCoder Beginner Contest\"\n) == \"ABC\"\nassert solution(\n    \"AtCoder Beginner Contest\"\n) == \"A\"\nassert solution(\n    \"AtCoder Beginner Contest\"\n) == \"X\"\nassert solution(\n    \"AtCoder Beginner Contest\"\n) == \"Y\"\nassert solution(\n    \"AtCoder Beginner Contest\"\n) == \"a\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"test 1 failed\"\n\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"AtCoder s Contest\") == \"ABC\"\n\"\"\"\nfrom collections import Counter\nimport operator\n"
    },
    {
        "number": 4556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"AxC\") == \"ABC\"\nassert solution(\"A\") == \"A\"\nassert solution(\"ABC\") == \"ABC\"\nassert solution(\"AxC\") == \"ABC\"\nassert solution(\"Axy\") == \"Axy\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 4 4\") == \"YES\"\nassert solution(\"2 2 2\") == \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 10\") == \"NO\"\nassert solution(\"3 3\") == \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"a b 5 4 4 3 3 b 4 4 4 4 4 4\") == \"YES\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3,5) == \"YES\"\nassert solution(1,4) == \"NO\"\nassert solution(1,1) == \"YES\"\nassert solution(1,1) == \"NO\"\nassert solution(1,1) == \"YES\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"1 2 1 1 0 2\") == \"NO\"\nassert solution(\n    \"2 2 2 1 2\") == \"YES\"\nassert solution(\n    \"1 1 1\") == \"NO\"\nassert solution(\n    \"1 4 1\") == \"NO\"\nassert solution(\n    \"3 1 1\") == \"YES\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 1 2 3') == 'YES'\nassert solution('2 2 2 2') == 'NO'\nassert solution('3 3 1 3') == 'NO'\nassert solution('1 1 2 1') == 'YES'\nassert solution('1 1 2 4') == 'NO'\n\nprint('The solution is:'+ str(True))\nprint('The solution is:'+ str(True))\nprint('The solution is:'+ str(True))\nprint('The solution is:'+ str(False))\nprint('The solution is:'+ str(True))\nprint('The solution is:'+ str(True))\nprint('The solution is:'+ str(False))\nprint('The solution is:'+ str(False))"
    },
    {
        "number": 4557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\nassert solution(\"5 5\") == \"NO\""
    },
    {
        "number": 4557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, 4) == 'YES'\nassert solution(5, 1) == 'NO'\n"
    },
    {
        "number": 4557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"4\") == \"YES\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"83\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"83\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '83'\n\n\n-----------------\nSample Input:\n\n6\n2 4 6 4 5 2 5 6\n\nSample Output:\n\n2\n\n\n\"\"\"\nfrom collections import defaultdict\nimport time\nstart = time.time()\nimport math\n"
    },
    {
        "number": 4558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"5\") == \"5\"\nassert solution(\"5\") == \"7\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"15\",\"3\"]) == \"83\"\nassert solution
    },
    {
        "number": 4558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"83\", \"incorrect answer\""
    },
    {
        "number": 4558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1,5) == 83\nassert solution(0,3) == 0\nassert solution(0,6) == 0\nassert solution(0,11) == 0\n"
    },
    {
        "number": 4558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"100 17\") == \"83\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10 3 5\") == \"5\"\nassert solution(\"2 3 5\") == \"2\"\nassert solution(\"3 2 5\") == \"3\"\nassert solution(\"1 2 5\") == \"1\"\nassert solution(\"2 2 5\") == \"1\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '1000000000000000000'\nassert solution(input()) == '1000000000000000000'\nassert solution(input()) == '-1'\n"
    },
    {
        "number": 4559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1000000000) == 1000000000000000000\nassert solution(1000000000) == 1000000000000000000\nassert solution(100000000) == 0\nassert solution(0) == -1\n\n-----Sample Input-----\n2\n10\n100\n\n-----Sample Output-----\n10\n100\n\n-----Sample Input-----\n10\n1\n\n-----Sample Output-----\n0\n\n-----Sample Input-----\n1\n3\n\n-----Sample Output-----\n0\n\n-----Sample Input-----\n1\n1\n\n-----Sample Output-----\n0\n\n-----Sample Input-----\n1\n10\n\n-----Sample Output-----\n1000000000000000000\n\n-----Sample Input-----\n2\n1\n\n-----Sample Output-----\n10\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1000000000000000000'\n\n------Remarks-----\nYou are required to complete the function solution and print the string A_1 \\times... \\times A_N.\nA_1 \\times... \\times A_N must satisfy the following conditions:\n* 0 < A_i < 10^18\n* A_i \\leq A_1 \\leq A_N\n\nSample 1:\nInput:\n2\n1\nSample Output:\n1000000000000000000\nExplanation:\n1 0 |1\n1 0 |1\n\nSample 2:\nInput:\n3\n1 1 1\nSample Output:\n4000000000000000000\nExplanation:\n1 0 1 |1 0 1 |1 0 1\n1 0 1 |1 0 1 |1 0 1\n1 0 1 |1 0 1 |1 0 1\n1 0 1 |1 0 1 |1 0 1\n1 0 1 |1 0 1 |1 0 1\n1 0 1 |1 0 1 |1 0 1\n1 0 1 |1 0 1 |1 0 1\n1 0 1 |1 0 1 |1 0 1\n1 0 1 |1 0 1 |1 0 1\n\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 12, f\"The value is not correct!\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(6, 7) == 121\nassert solution(5, 8) == -1\nassert solution(5, 4) == 10\nassert solution(0, 1) == -1\nassert solution(1, 2) == 0\n"
    },
    {
        "number": 4559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"1000000000000000000\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1000000000 1000000000\") == \"1000000000000000000\"\nassert solution(\"1000000000 1000000000\") == -1\n"
    },
    {
        "number": 4559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2\") == 1000000000\nassert solution(\"1000000000 1000000000\") == 1000000000000000000\n"
    },
    {
        "number": 4559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1000000000 1000000000') == 1000000000000000000"
    },
    {
        "number": 4559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 3 4 5 6 7 8 9\") == \"11111\"\nassert solution(\n    \"3 8 2\") == -1\n"
    },
    {
        "number": 4560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2018\") == \"Yes\"\nassert solution(\"2018\") == \"No\"\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(string) == \"Yes\"\n'''\n\nfrom collections import deque"
    },
    {
        "number": 4560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2018\"\n) == \"No\"\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2018') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('E869120') == 'Yes', 'Expected Yes, got %s' % (solution('E869120'))"
    },
    {
        "number": 4560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3,6) =='safe', 'expected \"safe\" for solution'\nassert solution(4,3) == 'dangerous', 'expected \"dangerous\" for solution'\nassert solution(0,0) == 'dangerous', 'expected \"dangerous\" for solution'\n"
    },
    {
        "number": 4561,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin: str\n) =='safe'\nassert solution(\n    stdin: str\n) =='safe'\nassert solution(\n    stdin: str\n) =='safe'\nassert solution(\n    stdin: str\n) =='safe'\nassert solution(\n    stdin: str\n) =='safe'\n"
    },
    {
        "number": 4561,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"safe\"\nassert solution(stdin) == \"safe\"\nassert solution(stdin) == \"safe\"\nassert solution(stdin) == \"safe\"\nassert solution(stdin) == \"safe\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input(\"Testcase: \")) == \"safe\"\nassert solution(input(\"Input: \")) == \"safe\"\nassert solution(input(\"Input: \")) == \"safe\"\nassert solution(input(\"Input: \")) == \"safe\"\nassert solution(input(\"Input: \")) == \"safe\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"safe\"\nassert solution(\"5 1 2\") == \"safe\"\nassert solution(\"3 5\") == \"safe\"\nassert solution(\"3 6\") == \"safe\"\nassert solution(\"1 3 5\") == \"safe\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"safe\"\nassert solution(stdin) == \"safe\"\nassert solution(stdin) == \"safe\"\nassert solution(stdin) == \"safe\"\nassert solution(stdin) == \"dangerous\"\n\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('A1 5') =='safe'\nassert solution('A1 5') =='safe'\nassert solution('A1 5') =='safe'\nassert solution('A1 5') =='safe'\nassert solution('A1 5') =='safe'\n"
    },
    {
        "number": 4561,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"safe\"\nassert solution(input()) == \"safe\"\nassert solution(input()) == \"safe\"\nassert solution(input()) == \"safe\"\nassert solution(input()) == \"safe\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"safe\"\nassert solution(inp) == \"safe\"\nassert solution(inp) == \"safe\"\nassert solution(inp) == \"safe\"\nassert solution(inp) == \"safe\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"9 3 2\") == \"safe\"\nassert solution(\"3 3 4\") == \"safe\"\nassert solution(\"3 3 7\") == \"safe\"\nassert solution(\"3 3 9\") == \"safe\"\nassert solution(\"3 3 12\") == \"safe\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(10) == 9\n\n-----Time complexity-----\nTime complexity of the solution is O(N).\n\n-----Space Complexity-----\nSpace Complexity of the solution is O(1).\n\n-----Elements Used-----\nN is always an integer.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^9\n - N is an integer.\n\n-----Inputs-----\nInput is given from stdin.\n\n-----Outputs-----\nOutput is printed.\n\n-----Sample Input-----\n\nSample Input:\n\n12\n\nSample Output:\n\n9\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution( ) == '9', 'Result is not correct.'\n'''"
    },
    {
        "number": 4562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"9\"\n'''\nimport math\n\nclass Solution:\n    def solve(self, num: int) -> str:\n        self.res = max(self.res, math.sqrt(num))\n        return str(num)"
    },
    {
        "number": 4562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(4) == 7\n\"\"\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"9\"\n\n----- Sample Input -----\n1\n\n----- Sample Output -----\n'''"
    },
    {
        "number": 4562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '9'\n"
    },
    {
        "number": 4562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '9'\n"
    },
    {
        "number": 4562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3) == 9\n\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n2\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(())\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"5\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\n1\nT_1 A_1\nT_2 A_2\n:\nT_N A_N\n\nT_N 3\nA_1 1\nA_2 3\nA_3 1\nA_4 1\nA_5 2\nA_6 2\nA_7 2\nA_8 2\nA_9 2\nA_10 1\nA_11 1\nA_12 1\nA_13 1\nA_14 1\nA_15 1\nA_16 1\nA_17 1\nA_18 1\nA_19 1\nA_20 1\nA_21 1\nA_22 1\nA_23 1\nA_24 1\nA_25 1\nA_26 1\nA_27 1\nA_28 1\nA_29 1\nA_30 1\nA_31 1\nA_32 1\nA_33 1\nA_34 1\nA_35 1\nA_36 1\nA_37 1\nA_38 1\nA_39 1\nA_40 1\nA_41 1\nA_42 1\nA_43 1\nA_44 1\nA_45 1\nA_46 1\nA_47 1\nA_48 1\nA_49 1\nA_50 1\nA_51 1\nA_52 1\nA_53 1\nA_54 1\nA_55 1\nA_56 1\nA_57 1\nA_58 1\nA_59 1\nA_60 1\nA_61 1\nA_62 1\nA_63 1\nA_64 1\nA_65 1\nA_66 1\nA_67 1\nA_68 1\nA_69 1\nA_70 1\nA_71 1\nA_72 1\nA_73 1\nA_74 1\nA_75 1\nA_76 1\nA_77 1\nA_78 1\nA_79 1\nA_80 1\nA_81 1\nA_82 1\nA_83 1\nA_84 1\nA_85 1\nA_86 1\nA_87 1\nA_88 1\nA_89 1\nA_90 1\nA_91 1\nA_92 1\nA_93 1\nA_94 1\nA_95 1\nA_96 1\nA_97 1\nA_98 1\nA_99 1\nA_100 1\nA_101 1\nA_102 1\nA_103 1\nA_104 1\nA_105 1\nA_106 1\nA_107 1\nA_108 1\nA_109 1\nA_110 1\nA_111 1\nA_112 1\nA_113 1\nA_114 1\nA_115 1\nA_116 1\nA_117 1\nA_118 1\nA_119 1\nA_120 1\nA_121 1\nA_122 1\nA_123 1\nA_124 1\nA_125 1\nA_126 1\nA_127 1\nA_128 1\nA_129 1\nA_130 1\nA_131 1\nA_132 1\nA_133 1\nA_134 1\nA_135 1\nA_136 1\nA_137 1\nA_138 1\nA_139 1\nA_140 1\nA_141 1\nA_142 1\nA_143 1\nA_144 1\nA_145 1\nA_146 1\nA_147 1\nA_148 1\nA_149 1\nA_150 1\nA_151 1\nA_152 1\nA_153 1\nA_154 1\nA_155 1\nA_156 1\nA_157 1\nA_158 1\nA_159 1\nA_160 1\nA_161 1\nA_162 1\nA_163 1\nA_164 1\nA_165 1\nA_166 1\nA_167 1\nA_168 1\nA_169 1\nA_170 1\nA_171 1\nA_172 1\nA_173 1\nA_174 1\nA_175 1\nA_176 1\nA_177 1\nA_178 1\nA_179 1\nA_180 1\nA_181 1\nA_182 1\nA_183 1\nA_184 1\nA_185 1\nA_186 1\nA_187 1\nA_188 1\nA_189 1\nA_190 1\nA_191 1\nA_192 1\nA_193 1\nA_194 1\nA_195 1\nA_196 1\nA_197 1\nA_198 1\nA_199 1\nA_200 1\nA_201 1\nA_202 1\nA_203 1\nA_204 1\nA_205 1\nA_206 1\nA_207 1\nA_208 1\nA_209 1\nA_210 1\nA_211 1\nA_212 1\nA_213 1\nA_214 1\nA_215 1\nA_216 1\nA_217 1\nA_218 1\nA_219 1\nA_220 1\nA_221 1\nA_222 1\nA_223 1\nA_224 1\nA_225 1\nA_226 1\nA_227 1\nA_228 1\nA_229 1\nA_230 1\nA_231 1\nA_232 1\nA_233 1\nA_234 1\nA_235 1\nA_236 1\nA_237 1\nA_238 1\nA_239 1\nA_240 1\nA_241 1\nA_242 1\nA_243 1\nA_244 1\nA_245 1\nA_246 1\nA_247 1\nA_248 1\nA_249 1\nA_250 1\nA_251 1\nA_252 1\nA_253 1\nA_254 1\nA_255 1\nA_256 1\nA_257 1\nA_258 1\nA_259 1\nA_260 1\nA_261 1\nA_262 1\nA_263 1\nA_264 1\nA_265 1\nA_266 1\nA_267 1\nA_268 1\nA_269 1\nA_270 1\nA_271 1\nA_272 1\nA_273 1\nA_274 1\nA_275 1\nA_276 1\nA_277 1\nA_278 1\nA_279 1\nA_280 1\nA_281 1\nA_282 1\nA_283 1\nA_284 1\nA_285 1\nA_286 1\nA_287 1\nA_288 1\nA_289 1\nA_290 1\nA_291 1\nA_292 1\nA_293 1\nA_294 1\nA_295 1\nA_296 1\nA_297 1\nA_298 1\nA_299 1\nA_300 1\nA_301 1\nA_302 1\nA_303 1\nA_304 1\nA_305 1\nA_306 1\nA_307 1\nA_308 1\nA_309 1\nA_310 1\nA_311 1\nA_312 1\nA_313 1\nA_314 1\nA_315 1\nA_316 1\nA_317"
    },
    {
        "number": 4563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"T_1\",\"A_1\",\"T_2\",\"A_2\",\"T_N\",\"A_N\"]) == \"10\"\nassert solution([\"A_1\",\"A_2\",\"A_N\",\"A_N\"]) == \"10\"\nassert solution([\"T_1\",\"T_2\",\"A_1\",\"A_2\"]) == \"10\"\nassert solution([\"T_1\",\"T_2\",\"T_N\",\"A_N\"]) == \"10\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2,3) == 2\nassert solution(2,3) == 2\nassert solution(3,3) == 2\nassert solution(3,3) == 2\nassert solution(3,3) == 2\n"
    },
    {
        "number": 4563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3, \"Should be 3\""
    },
    {
        "number": 4563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3,2,1,3,2) == 3\nassert solution(3,2,1,2,3) == 6\nassert solution(3,1,1,3,2) == 4\nassert solution(3,1,1,3,3) == 5\n"
    },
    {
        "number": 4563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3,3,1,3,1,3,3) == 1\nassert solution(2,2,2,2,1,3,3) == 4\nassert solution(3,1,3,2,3,3,3) == 4\nassert solution(1,3,1,2,1,2,2) == 3\nassert solution(2,2,1,2,1,3,2) == 3\n"
    },
    {
        "number": 4563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 6\nassert solution(5) == 10\n"
    },
    {
        "number": 4563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    inputs :=\n
    },
    {
        "number": 4563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"10\""
    },
    {
        "number": 4564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('uncopyrightable') == 'no'\nassert solution('unceprvisible') == 'yes'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"uncopyrightable\") == \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"no\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"is\") == \"yes\", \"Should be 'is'\""
    },
    {
        "number": 4564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nassert solution(\"cope\") == \"yes\"\nassert solution(\"co\") == \"no\"\nassert solution(\"coop\") == \"no\"\nassert solution(\"coop\") == \"yes\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('uncopyrightable') == 'yes'\nassert solution('x') == 'no'\nassert solution('quiz') == 'no'\nassert solution('coding') == 'no'\nassert solution('code') == 'no'\n"
    },
    {
        "number": 4564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"Uncopyrightable\") == \"no\"\nassert solution(\"cocacola\") == \"yes\"\n\n\n============================================================\n"
    },
    {
        "number": 4564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"unco\") == \"yes\"\nassert solution(\"unco\") == \"no\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(unacorn) == 'no'\nassert solution(unspoken) == 'yes'\nassert solution(unpopular) == 'no'\nassert solution(unfavored) == 'no'\nassert solution(unfavoured) == 'no'\n"
    },
    {
        "number": 4564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"ab\"), [\"a\", \"a\", \"b\", \"b\", \"c\"]\nassert solution(\"aeeaaa\"), [\"a\", \"a\", \"a\", \"a\", \"aa\"]"
    },
    {
        "number": 4565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"WEEWW\") == \"1\"\nassert solution(\"WEEWW\") == \"2\"\nassert solution(\"WEEWW\") == \"2\"\nassert solution(\"WEEWW\") == \"3\"\nassert solution(\"WEEWW\") == \"4\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"1\"\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 4565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1\n\"\"\"\n\nclass Solution:\n    def solve(self, S):\n        N = len(S)\n        if N == 1:\n            return 1\n\n        N = N - 1\n        chars = [True] * 26\n        chars[ord(S[0]) - ord('A')] = False\n        if N % 2:\n            chars[ord(S[N]) - ord('A')] = False\n\n        for i in range(N, 0, -1):\n            if chars[ord(S[i]) - ord('A')]:\n                chars[ord(S[i]) - ord('A')] = False\n\n        return sum(chars)\n"
    },
    {
        "number": 4565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"1\""
    },
    {
        "number": 4565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(6, [\"EWW\", \"WEEWW\", \"WEWW\", \"WEWW\", \"EWW\"]) == 4\nassert solution(2, [\"EWW\", \"WEEW\"]) == 1\n"
    },
    {
        "number": 4565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 1\n"
    },
    {
        "number": 4565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(a), \"Failed\""
    },
    {
        "number": 4565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('WEEWW') == 1\nassert solution('WEWW') == 1\nassert solution('WEWS') == 1\nassert solution('WEWE') == 1\nassert solution('WEWE') == 1\n"
    },
    {
        "number": 4565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"WEEWW\") == \"1\"\nassert solution(\"WEEWW\") == \"2\"\nassert solution(\"WEWW\") == \"1\"\nassert solution(\"WEEWW\") == \"2\"\nassert solution(\"WEWW\") == \"1\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(test_cases[0]) == \"1\"\nassert solution(test_cases[1]) == \"3\"\nassert solution(test_cases[2]) == \"4\"\nassert solution(test_cases[3]) == \"2\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '2'\n"
    },
    {
        "number": 4566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3 2\") == \"2\"\nassert solution(\"2 4 1\") == \"1\"\nassert solution(\"1 1 4\") == \"1\"\nassert solution(\"1 1 3 4\") == \"2\"\nassert solution(\"1 3 2 4\") == \"2\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 3 4'), '4 3 2 1'\nassert solution('1 2'), '1 2'\nassert solution('1 4'), '4 1 2'\nassert solution('2 3'), '2 3'\nassert solution('1 4'), '4 1'\n"
    },
    {
        "number": 4566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1 1 2 1 4\"\nassert solution(input()) == \"2 1 2\"\nassert solution(input()) == \"2 3\"\nassert solution(input()) == \"2 3\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 5\nassert input == \"4 3\\n2 3\\n2 4\\n1 4\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\n----------------------------------------------------------------------------------------------------------------------\n\nInput:\nn = int(input())\n\narr = []\n\nfor i in range(n):\n    arr.append([int(x) for x in input().split()])"
    },
    {
        "number": 4567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == str(30)"
    },
    {
        "number": 4567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 4') == '5'\nassert solution('10 9') == '10'\nassert solution('5 4 5') == '15'\nassert solution('5 7 5') == '20'\nassert solution('5 5 4 5') == '25'\n"
    },
    {
        "number": 4567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 5') == '10'\nassert solution('1') == '1'\nassert solution('9') == '9'\nassert solution('4') == '4'\nassert solution('10') == '10'\n"
    },
    {
        "number": 4567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5', '10') == '5'\nassert solution('3', '10') == '3'\nassert solution('1') == '1'\nassert solution('10') == '10'\nassert solution('5') == '10'\n"
    },
    {
        "number": 4567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 11\"), \"5\"\nassert solution(\"9 3\"), \"9\"\nassert solution(\"2 1\"), \"1\"\nassert solution(\"2\"), \"2\"\nassert solution(\"1\"), \"2\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"4\") == \"4\"\nassert solution(\"6\") == \"6\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"1\\\") == \\\"100\\\",\"Number 1 should be correct.\"\nassert solution(\\\"2\\\") == \\\"101\\\",\"Number 2 should be correct.\"\nassert solution(\\\"3\\\") == \\\"102\\\",\"Number 3 should be correct.\"\nassert solution(\\\"4\\\") == \"100\\\",\"Number 4 should be correct.\"\nassert solution(\\\"5\\\") == \"101\\\",\"Number 5 should be correct.\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\\\"3\\\") == \\\"3\\\"\nassert solution(\\\"5\\\") == \\\"5\\\"\nassert solution(\\\"10\\\") == \\\"10\\\"\nassert solution(\\\"15\\\") == \\\"15\\\"\nassert solution(\\\"25\\\") == \\\"25\\\""
    },
    {
        "number": 4567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\", \"10\", \"15\"]) == \"15\"\nassert solution([\"5\", \"15\", \"10\"]) == \"30\"\nassert solution([\"10\", \"15\", \"5\"]) == \"20\"\nassert solution([\"5\", \"10\", \"15\", \"5\", \"10\"]) == \"30\"\nassert solution([\"5\", \"10\", \"15\", \"5\", \"10\", \"15\"]) == \"30\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"5\", \"2\"]) == \"0\"\nassert solution([\"10\", \"2\", \"10\"]) == \"0\"\nassert solution([\"10\", \"2\", \"10\", \"4\", \"4\", \"1\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\"]) == \"0\"\nassert solution([\"5\", \"5\"]) == \"0\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 2, \"Invalid input\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\".aab\") == \"bca\"\nassert solution(\".aaab\") == \"bca\"\nassert solution(\".aabcc\") == \"ca\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('') == '', 'Test 1'\nassert solution('aabca') == 'aabbc', 'Test 2'\nassert solution('aabbca') == 2, 'Test 3'\n"
    },
    {
        "number": 4568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"2\""
    },
    {
        "number": 4568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(123) == '123'\nassert solution(12) == '12'\nassert solution(\"\") == ''\n"
    },
    {
        "number": 4568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"aabbca\") == 2\nassert solution(\"aabbca\") == 1\nassert solution(\"aabbca\") == 2\nassert solution(\"aabbca\") == 2\nassert solution(\"aabbca\") == 1\n"
    },
    {
        "number": 4568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"aabbca\"), \"aabbca\"\nassert solution(\"aabbcaca\"), \"aabbca\"\nassert solution(\"aabbca\"), \"aabbca\"\nassert solution(\"aabbcaaaaaaabbc\"), \"aabbca\"\nassert solution(\"aabbcaaaaaaa\"), \"aabbca\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('aabbca') == 2\nassert solution('abcabc') == 2\nassert solution('abcabc') == 1\nassert solution('abcabc') == 0\nassert solution('abcabc') == 0\n"
    },
    {
        "number": 4568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"aaabbc\") == \"2\"\nassert solution(\"aabbca\") == \"2\"\nassert solution(\"aabbcaaaab\") == \"2\"\nassert solution(\"abc\") == \"1\"\nassert solution(\"abcabc\") == \"2\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"aaabbca\") == \"2\"\nassert solution(\"aab\") == \"2\"\nassert solution(\"aabb\") == \"1\"\nassert solution(\"abab\") == \"1\"\nassert solution(\"aabbca\") == \"1\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Cloudy\"\nassert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Cloudy\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Rainy\"\nassert solution(\"Cloudy\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Cloudy\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Rainy\"\nassert solution(\"Sunny\") == \"Rainy\"\nassert solution(\"Sunny\") == \"Cloudy\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Cloudy\"\nassert solution(\"Sunny\") == \"Sunny\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Takahashi') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\nassert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Sunny'\n"
    },
    {
        "number": 4569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Suns\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Cloudy\"\nassert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(    S        ) == \"Cloudy\"\n\n-----Sample Input-----\nSunny\n\n-----Sample Output-----\nCloudy\n\nIn Takahashi's town, a sunny day is followed by a cloudy day.\n"
    },
    {
        "number": 4569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'Cloudy'\nassert solution(input()) == 'Cloudy'\nassert solution(input()) == 'Cloudy'\n"
    },
    {
        "number": 4569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Cloudy'\nassert solution('Rainy') == 'Cloudy'\nassert solution('Sunny') == 'Sunny'\nassert solution('Rainy') == 'Cloudy'\n"
    },
    {
        "number": 4569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 'Cloudy'\n\n-----Sample Output-----\nSunny\n\nassert solution(inp) == 'Sunny'\n\n-----Explanation-----\nInput:\nSunny\n\nOutput:\nSunny\n\nInput:\nCloudy\n\nOutput:\nCloudy\n\nInput:\nRainy\n\nOutput:\nSunny\n\nInput:\nCloudy\n\nOutput:\nSunny\n\nInput:\nCloudy\n\nOutput:\nSunny\n\nInput:\nCloudy\n\nOutput:\nCloudy\n\nInput:\nRainy\n\nOutput:\nCloudy\n\nInput:\nSunny\n\nOutput:\nSunny\n\nInput:\nSunny\n\nOutput:\nCloudy\n\nInput:\nCloudy\n\nOutput:\nCloudy\n\nInput:\nSunny\n\nOutput:\nCloudy\n\nInput:\nCloudy\n\nOutput:\nSunny\n\n-----Constraints-----\n 1 <= S.length <= 10^5\n\n1 <= S[i] <= 3\n\n-----Time Limit: 1 sec (HIBP)-----\nTime Limit: 1 min\n\n----S = {Sunny, Cloudy, Rainy}----\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4570,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 0 6 12 4\") == 12\nassert solution(\"1 10\") == 21\nassert solution(\"1 1\") == 1\nassert solution(\"2 1\") == 1\nassert solution(\"1 0\") == 3\n"
    },
    {
        "number": 4570,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\")()((()()((())\") == \"120\"\nassert solution(\"(((((((((((())))))))))))()(((()(()(()()((()\")) == \"120\"\nassert solution(\"()(((((((()((())))))())()(((()(()(()(()(()(()((()\")) == \"120\"\nassert solution(\"((((((((((((((())))))))))))()(((()(()(()(()(()(()(()(()(()()(()((()))\") == \"120\"\nassert solution(\"((((((((((((((())))))))))))()(((()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()()(()(()()(()(()(()(()(()(()(()()()(()(()(()(()(()(()(()(()(()(()(()(()()(()(()(()(()()(()()()()()(()())()()(()(()(()()(())()(()()()(())()()()(()()()(()()()()()()()()()()()()()()()()()(())()(()()()()()(())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n"
    },
    {
        "number": 4570,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 6\") == \"119\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"9 2\") == \"6\"\nassert solution(\"123 4\") == \"123\"\nassert solution(\"1 10\") == \"10\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nassert solution(\"7 17\") == \"119\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"2 1 1\") == \"2\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"4\",\"3\",\"3\"]) == \"120\"\nassert solution([\"1\",\"1\",\"0\"]) == \"1\"\nassert solution([\"5\",\"3\",\"4\",\"0\"]) == \"120\"\nassert solution([\"3\",\"0\"]) == \"0\"\nassert solution([\"1\",\"1\",\"2\"]) == \"120\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\") == 119\nassert solution(\"100\") == 91476\nassert solution(\"30\") == 60\n"
    },
    {
        "number": 4570,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"119\""
    },
    {
        "number": 4570,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nassert solution(\"7 999 1\") == \"1\"\nassert solution(\"11\") == \"0\""
    },
    {
        "number": 4570,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nassert solution(\"7 17 -121\") == \"119\"\nassert solution(\"8 11 1\") == \"11\"\nassert solution(\"11 21 2\") == \"1\"\nassert solution(\"121 20 2\") == \"2\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"119\"\nassert solution(input()) == \"119\""
    },
    {
        "number": 4571,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '3800'\n\n-----------------\nGiven:\n5\n\nInput:\n3\n\nOutput:\n35\n\nExplanation:\nTakahashi is now competing in a programming contest, but he received TLE in a problem where the answer is YES or NO.\nWhen he checked the detailed status of the submission, there were N test cases in the problem, and the code received TLE in M of those cases.\nThen, he rewrote the code to correctly solve each of the other N-M cases without fail in 100 milliseconds.\nNow, he goes through the following process:\n - Submit the code.\n - Wait until the code finishes execution on all the cases.\n - If the code fails to correctly solve some of the M cases, submit it again.\n - Repeat until the code correctly solve all the cases in one submission.\nLet the expected value of the total execution time of the code be X milliseconds. Print X (as an integer).\n\n-----Constraints-----\n - All input values are integers.\n - 1 \\leq N \\leq 100\n - 1 \\leq M \\leq {\\rm min}(N, 5)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n\n-----Output-----\nPrint X, the expected value of the total execution time of the code, as an integer. It can be proved that, under the constraints in this problem, X is an integer not exceeding 10^9.\n\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n35\n\nIn this input, there is only one case. Takahashi will repeatedly submit the code that correctly solves this case with 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1900 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 3500.\n"
    },
    {
        "number": 4571,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3800\"\n\n-----Explanation-----\nWhile N is at most 5, the expected value of the total execution time of the code is roughly as follows:\n0100\n\nIf N is at most 100, the expected value of the total execution time is not clearly determined by the given constraints. Let's say the M is 3. The correct solution is [100, 600, 600].\nNow, the expected value of the total execution time of the code is roughly as follows:\n0100\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 1\") == \"40\"\nassert solution(\"5 1\") == \"80\"\nassert solution(\"5 2\") == \"80\"\nassert solution(\"5 3\") == \"80\"\nassert solution(\"5 4\") == \"80\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3800\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 3800\n"
    },
    {
        "number": 4571,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '3800'"
    },
    {
        "number": 4571,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '3800'\n\n-----Constraints-----\n - All input values are integers.\n - 1 \\leq N \\leq 1000\n - 1 \\leq M \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n\n-----Output-----\nPrint X, the expected value of the total execution time of the code, as an integer. It can be proved that, under the constraints in this problem, X is an integer not exceeding 10^9.\n\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n18\n\nIn this input, there is only one case. Takahashi will repeatedly submit the code that correctly solves this case with 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1900 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 1848.\n\nIn this input, there are two cases. Takahashi will receive a \"fail\" message if he does not correctly solve the second case, and he will receive TLE if he does not receive a \"success\" message in the first case.\nHe will submit the code that correctly solves this case without 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1800 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 4548.\n\nIn this input, there are two cases. Takahashi will receive a \"fail\" message if he does not receive a \"success\" message in the second case, and he will receive TLE if he does not receive a \"success\" message in the first case.\nHe will submit the code that correctly solves this case without 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1800 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 4548.\n\nIn this input, there are one case. Takahashi will receive a \"success\" message in the second case, and he will receive TLE if he does not receive a \"success\" message in the first case.\nHe will submit the code that correctly solves this case without 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1800 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 4548.\n\nIn this input, there are one case. Takahashi will receive a \"success\" message in the first case, and he will receive TLE if he does not receive a \"success\" message in the second case.\nHe will submit the code that correctly solves this case without 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1800 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 4548.\n\nIn this input, there are two cases. Takahashi will receive a \"fail\" message in the first case, and he will receive TLE if he does not receive a \"success\" message in the second case.\nHe will submit the code that correctly solves this case without 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1800 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 4548.\n\nIn this input, there are one case. Takahashi will receive a \"success\" message in the first case, and he will receive TLE if he does not receive a \"success\" message in the second case.\nHe will submit the code that correctly solves this case without 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1800 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 4548.\n\nIn this input, there are two cases. Takahashi will receive a \"success\" message in the first case, and he will receive TLE if he does not receive a \"success\" message in the second case.\nHe will submit the code that correctly solves this case without 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1800 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 4548.\n\nIn this input, there are one case. Takahashi will receive a \"success\" message in the second case, and he will receive TLE if he does not receive a \"success\" message in the first case.\nHe will submit the code that correctly solves this case without 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1800 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 4548.\n\nIn this input, there are one case. Takahashi will receive a \"fail\" message in the first case, and he will receive TLE if he does not receive a \"success\" message in the second case.\nHe will submit the code that correctly solves this case without 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1800 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 4548.\n\nIn this input, there are two cases. Takahashi will receive a \"fail\" message in the first case, and he will receive TLE if he does not receive a \"success\" message in the second case.\nHe will submit the code that correctly solves this case without 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1800 \\times 1/2 + (2 \\times"
    },
    {
        "number": 4571,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"7 3 2\") == \"3800\"\nassert solution(\"2 3 1\") == \"3800\"\nassert solution(\"1 2 7\") == \"3800\"\nassert solution(\"1 3 6\") == \"3800\"\nassert solution(\"4 5 2\") == \"3800\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '3800'\n'''"
    },
    {
        "number": 4571,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3800\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"a\"\n\nassert solution(stdin) == \"b\"\n\nassert solution(stdin) == \"a\"\n\nassert solution(stdin) == \"b\"\n\nassert solution(stdin) == \"c\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\")\" == \"\")\nassert solution(\"A\") == \"A\"\nassert solution(\"AB\") == None\nassert solution(\"(\") == \"B\"\nassert solution(\"((\") == None\n"
    },
    {
        "number": 4572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n        \"atcoderregularcontest\") == \"b\"\nassert solution(\"atcoderregularcontest\") == None\nassert solution(\"coderregularcontest\") == None\nassert solution(\"\") == None\nassert solution(\"aatcoder\") == \"b\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"atcoderregularcontest\", \"dafjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfhgfdhjklasdfh"
    },
    {
        "number": 4572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('aabbbc') == 'b'\nassert solution('abb') == None\nassert solution('ab') == None\nassert solution('abab') == 'a'\nassert solution('babba') == None\n"
    },
    {
        "number": 4572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nassert solution(\"abtacoder\") == \"a\"\nassert solution(\"abtacoderdef\") == \"a\"\nassert solution(\"abcdef\") == None\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"atcoder\") == \"b\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(s) == \"a\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(s) == None\n\nassert solution(s.swapcase()) == None\n\nassert solution(s.swapcase().swapcase()) == None\n\nassert solution(s.swapcase().swapcase().swapcase()) == None\n\nassert solution(s.swapcase().swapcase().swapcase()) == None\n"
    },
    {
        "number": 4572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(st) == \"b\"\nassert solution(st) == None\n\n----Sample Input----\natcoderregularcontest\n\natcoderregularcontest\n\nassert solution(st) == None\nassert solution(st) == None\n\n----Sample Output----\natcoderregularcontest\n\n----Sample Explanation----\nThe lexicographically smallest lowercase English letter that does not occur in S.\nNone\n\n-----Constraints-----\n - 1 \\leq |S| \\leq 10^5 (|S| is the length of string S.)\n - S consists of lowercase English letters.\n\n----Time Complexity----\n - O(N)\n - Best Case: No repeat\n - Worst Case: Some repeat\n\n----Space Complexity----\n - O(1)\n\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"4\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('4\\n2 4 4 3\\n'), '4'\nassert solution('4\\n2 4 4 3\\n5\\n'), '4'\nassert solution('4\\n4 4 3 4\\n3\\n3 4 4 3\\n4\\n'), '4'\nassert solution('4\\n4 4 3 4\\n3\\n3 4 4 3\\n4\\n'), '4'\nassert solution('4\\n4 4 3 4\\n3\\n3 4 4 3\\n4\\n5\\n'), '4'\n"
    },
    {
        "number": 4573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 5, \"Number of tests must be equal to answer.\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"4 5 4 3\"\n) == \"4\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == expected\nassert expected == str(solution(inp))\n"
    },
    {
        "number": 4573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5') == '4'\nassert solution('1 2 4') == '3'\nassert solution('1 2 3 4 5 6') == '4 5 6'\n"
    },
    {
        "number": 4573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == str(max(list(map(int,input().split()))))"
    },
    {
        "number": 4573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '5'"
    },
    {
        "number": 4573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"3 4 4 3\") == \"3 4\"\nassert solution(\"3 4 3 4\") == \"3 4\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(solution()) == \"4\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '2'\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n\n---Time Complexity---\nO(N * N * A_N * A_1) = O(N^2 * A_1)\nO(A_1) = O(A_1)\n
    },
    {
        "number": 4574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('6\\n3 1 2 4 2 1') == '4'\nassert solution('6\\n3 1 2 4 2 1\\n3 4 5 6') == '3'\nassert solution('6\\n3 1 2 4 2 1\\n3 4 5 6') == '4'\nassert solution('6\\n3 1 2 4 2 1\\n3 4 5 6') == '0'\n\n'''"
    },
    {
        "number": 4574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\n\"\"\"\n\nfrom math import sqrt\n\nN = int(input())\nA_list = list(map(int, input().split()))\nA_set = set(A_list)\n\nfor a in A_list:\n    if a in A_set:\n        continue\n    if sqrt(a) % 1 == 0:\n        continue\n    if a % 1 == 1:\n        print(int(sqrt(a) / 2), end=\" \")\n    else:\n        print(int(sqrt(a) * 3), end=\" \")\n\nprint()"
    },
    {
        "number": 4574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 10, \"Wrong answer\""
    },
    {
        "number": 4574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n1 2\n3 2\n4 3\n5 3\n6 4\n7 5\n8 6\n9 6\n10 10\n\"\"\") == \"2\"\n\n    pass\n"
    },
    {
        "number": 4575,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 8, \"Your code failed.\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"8\""
    },
    {
        "number": 4575,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 1 1') == '8'\nassert solution('7 1 2') == '6'\nassert solution('2 1 4') == '2'\nassert solution('5 1 10') == '5'\nassert solution
    },
    {
        "number": 4575,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1 0 0 1 1 1 1 0 0 1 1\") == \"1\"\nassert solution(\"1 1 0 0 1 1 1 1 0 1 1 1\") == \"1\"\nassert solution(\"1 1 0 0 1 1 1 1 1 1 0 1\") == \"1\"\nassert solution(\"1 1 0 0 1 1 1 1 1 1 1 1\") == \"1\"\nassert solution(\"1 1 0 0 1 1 1 1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('10 1') == 2\nassert solution('1 1') == 0\nassert solution('1 2') == 0\nassert solution('1 3') == 0\nassert solution('1 4') == 0\n"
    },
    {
        "number": 4575,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"8\""
    },
    {
        "number": 4575,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '8'\n"
    },
    {
        "number": 4575,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"7 2\"\nassert solution(input()) == \"5 6\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 7 1 10\") == 8\nassert solution(\"7 5 3 10\") == 1 + 4 + 2 + 1 = 8\nassert solution(\"3 1 5 7\") == 1 + 4 + 2 + 1 = 8\n"
    },
    {
        "number": 4575,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"8\"\nprint(\"Congrats, solution is correct\")\n\nInput:\n5\n2\n2\n2\n2\n2\n\nOutput:\n8\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\n        [\"2\", \"2\"],\n        [\"2\", \"2\"],\n        [\"2\", \"2\"],\n        [\"3\", \"3\"],\n        [\"5\", \"5\"],\n        [\"2\", \"2\"],\n        [\"5\", \"5\"],\n    ]\n) == 2\n\nassert solution(\n    [\n        [\"1\", \"1\"],\n        [\"1\", \"1\"],\n        [\"1\", \"1\"],\n        [\"3\", \"4\"],\n        [\"2\", \"1\"],\n        [\"1\", \"1\"],\n        [\"1\", \"2\"],\n        [\"1\", \"3\"],\n        [\"1\", \"4\"],\n        [\"1\", \"5\"],\n    ]\n) == 2\n\nassert solution(\n    [\n        [\"1\", \"2\", \"3\", \"4\"],\n        [\"1\", \"2\", \"1\", \"1\"],\n        [\"2\", \"1\", \"3\", \"1\"],\n        [\"3\", \"2\", \"1\", \"3\"],\n        [\"1\", \"3\", \"1\", \"4\"],\n        [\"1\", \"1\", \"1\", \"1\"],\n        [\"2\", \"1\", \"2\", \"2\"],\n        [\"3\", \"1\", \"1\", \"1\"],\n        [\"4\", \"1\", \"2\", \"2\"],\n        [\"3\", \"3\", \"1\", \"1\"],\n    ]\n) == 4\n\nassert solution(\n    [\n        [\"1\", \"2\", \"3\", \"4\"],\n        [\"1\", \"1\", \"1\", \"1\"],\n        [\"2\", \"1\", \"2\", \"1\"],\n        [\"3\", \"1\", \"3\", \"1\"],\n        [\"1\", \"2\", \"1\", \"1\"],\n        [\"2\", \"1\", \"2\", \"2\"],\n        [\"3\", \"1\", \"1\", \"1\"],\n        [\"4\", \"1\", \"1\", \"1\"],\n        [\"3\", \"2\", \"1\", \"1\"],\n        [\"2\", \"2\", \"2\", \"2\"],\n        [\"1\", \"1\", \"1\", \"1\"],\n        [\"1\", \"2\", \"1\", \"1\"],\n    ]\n) == 5\n\nassert solution(\n    [\n        [\"1\", \"2\", \"3\", \"4\"],\n        [\"1\", \"1\", \"2\", \"1\"],\n        [\"2\", \"1\", \"3\", \"3\"],\n        [\"3\", \"1\", \"3\", \"1\"],\n        [\"1\", \"2\", \"1\", \"1\"],\n        [\"2\", \"1\", \"2\", \"2\"],\n        [\"2\", \"2\", \"3\", \"1\"],\n        [\"3\", \"2\", \"1\", \"1\"],\n        [\"4\", \"1\", \"2\", \"1\"],\n        [\"3\", \"1\", \"1\", \"2\"],\n        [\"1\", \"2\", \"1\", \"1\"],\n    ]\n) == 6"
    },
    {
        "number": 4576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\n\n---------------------------\nAnswer\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\n\"\"\"\n\nclass Solution:\n    def solution(self, A: int, B: int, C: int, X: int) -> str:\n        if A > B or C > X:\n            return \"No\"\n        else:\n            dp = [[0]*(B+1) for _ in range(A+1)]\n            dp[0][0] = 1\n            dp[0][1] = 1\n            dp[1][1] = 1\n            if A+1 <= B+1:\n                dp[A][B+1] = 1\n            if A+1 <= C+1:\n                dp[A+1][C+1] = 1\n            for a in range(1, A+1):\n                for b in range(1, B+1):\n                    for c in range(1, C+1):\n                        if a + b + c > C:\n                            continue\n                        if a+b+c == C:\n                            dp[a][b+c] += dp[a][b]\n                            dp[a][c] += dp[a][b]\n                        else:\n                            dp[a][b+c] += dp[a][b] + dp[a][c]\n            return str(dp[A][B+1])\n"
    },
    {
        "number": 4576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2') == 2,'solution failed'\nassert solution('2 1') == 2,'solution failed'\nassert solution('1 2') == 2,'solution failed'\nassert solution('1 1') == 1,'solution failed'\nassert solution('2 3') == 1,'solution failed'\n"
    },
    {
        "number": 4576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"2 1\") == 2\nassert solution(\"2 0\") == 1\nassert solution(\"2 0 100\") == 1\nassert solution(\"2 0 500\") == 2\n"
    },
    {
        "number": 4576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 1\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"2\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == 2\n"
    },
    {
        "number": 4576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'"
    },
    {
        "number": 4576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"2\"\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 3 2\") == \"No\"\nassert solution(\"1 4 3\") == \"No\"\nassert solution(\"1 9 2\") == \"No\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"Yes\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 2 2\") == \"No\"\nassert solution(\"1 1 1\") == \"No\"\nassert solution(\"1 1 0\") == \"No\"\nassert solution(\"1 1 4\") == \"No\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 2 3') == 'Yes'\nassert solution('2 2 3') == 'No'\nassert solution('3 2 2') == 'Yes'\nassert solution('3 2') == 'No'\nassert solution('2 3') == 'No'\n"
    },
    {
        "number": 4577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3,2) == 'Yes'\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(a,b,c) == \"Yes\"\nassert solution(a,b,c) == \"No\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1,3,2) == \"No\"\nassert solution(2,2,1) == \"Yes\"\nassert solution(1,7,1) == \"No\"\nassert solution(6,6,6) == \"Yes\"\nassert solution(6,6,5) == \"Yes\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 3 2\") == \"Yes\"\nassert solution(\n    \"1 1 2\") == \"No\"\nassert solution(\n    \"4\") == \"No\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"9\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '3'\n"
    },
    {
        "number": 4578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '9'\n\"\"\"\nfrom collections import Counter\nfrom itertools import combinations"
    },
    {
        "number": 4578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 2') == '2'\nassert solution('2 2 2') == '2 3'\nassert solution('2 2 4 2') == '1'\nassert solution('2 2 5 2 3') == '2 2 3'\nassert solution('3 3 5 3 3 3') == '3 3 3 3'\n"
    },
    {
        "number": 4578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3 1000') == '9'\nassert solution('4 200') == '5'\nassert solution('4 500') == '5'\nassert solution('5 100') == '2'\n"
    },
    {
        "number": 4578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 9\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0 0 0\") == \"0\"\nassert solution(\"1 0 0\") == \"3\"\nassert solution(\"0 1 1\") == \"3\"\nassert solution(\"0 0 0\") == \"1\"\nassert solution(\"1 0 0\") == \"1\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"9\"\n\n'''\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"9\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 4 6 9 8 7 2 2 6 7 2 5 7 2 2 8 2 4 6 9 9 2 3 5 4 9 3 3 2 4 7 2 9 3 4 9 3 8 9 3 9 8 6 3 9 9 9 9 9 9 9 9 9 9 9 9 8 6 9 9 9 2 3 4 3 3 2 5 3 2 4 9 9 9 2 3 4 6 6 6 6 6 5 7 2 5 4 4 4 4 3 3 3 2 2 6 3 3 4 3 9 5 3 3 5 2 3 5 6 6 6 6 3 4 9 2 5 3 2 4 9 4 9 4 9 9 9 9 9 5 4 9 2 9 2 2 6 9 2 9 2 3 5 4 9 2 2 3 5 4 9 2 2 3 4 9 2 3 5 4 2 2 3 5 4 3 2 4 9 4 9 4 9 4 4 9 2 3 2 9 2 4 3 2 3 4 9 2 9 2 2 6 9 2 3 3 4 2 2 3 4 3 2 5 3 2 2 3 4 4 2 2 3 2 4 3 3 2 4 9 4 9 4 9 4 9 4 9 4 9 4 9 4 9 4 9 4 9 4 9 2 3 4 2 2 3 4 3 2 2 3 4 4 2 3 4 3 2 3 4 2 3 4 2 2 3 4 4 2 2 2 3 4 2 2 3 4 2 2 2 3 4 2 2 3 2 4 2 3 4 2 2 2 3 4 2 3 2 3 4 2 2 3 2 4 2 2 3 2 3 4 2 2 3 2 3 2 3 2 4 2 3 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 4579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 2\n"
    },
    {
        "number": 4579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 4579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 2\nassert solution(6) == 2\nassert solution(10) == 2\nassert solution(18) == 4\nassert solution(19) == 4\n"
    },
    {
        "number": 4579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(6, [\"apple\", \"orange\", \"apple\", \"apple\", \"orange\", \"orange\"]) == 2\nassert solution(0, [\"a\", \"b\", \"c\"]) == 0\nassert solution(1, [\"a\", \"b\", \"c\", \"d\"]) == 0\nassert solution(2, [\"d\", \"b\", \"a\"]) == 1\nassert solution(3, [\"a\", \"a\", \"b\"]) == 2\n"
    },
    {
        "number": 4579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '2'\n\npass\n"
    },
    {
        "number": 4579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5,\n        \"appleorangeapple\") == 2, \"Example 1 failed\"\nassert solution(1,\n        \"a\") == 1, \"Example 2 failed\"\nassert solution(3,\n        \"aabbb\") == 2, \"Example 3 failed\"\nassert solution(4,\n        \"ab\") == 2, \"Example 4 failed\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 3"
    },
    {
        "number": 4579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(9) == 2"
    },
    {
        "number": 4579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(string) == '2'\n"
    },
    {
        "number": 4580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"yellow orange\"\nassert solution(input) == \"orange yellow\"\nassert solution(input) == \"orange orange\"\nassert solution(input) == \"orange orange\"\nassert solution(input) == \"orange orange\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2100\", \"2500\", \"2700\", \"2700\"]) == \"2 2\"\nassert solution([\"2100\", \"2500\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\"]) == \"2 2\"\nassert solution([\"2100\", \"2500\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\"]) == \"2 2\"\nassert solution([\"2100\", \"2500\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\", \"2700\"]) == \"2 3\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"yellow orange\"\nassert solution(input) == \"orange\"\nassert solution(input) == \"orange\"\nassert solution(input) == \"orange\"\nassert solution(input) == \"orange\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5') == '1 5'\nassert solution('3 1 2 3') == '3'\nassert solution('1 1 1 1') == '1'\nassert solution('2 2 2 2') == '2'\nassert solution('3 3 3 3') == '3'\n"
    },
    {
        "number": 4580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'orange'\nassert solution(stdin) == 'yellow'\nassert solution(stdin) == 'orange'\nassert solution(stdin) == 'yellow'\nassert solution(stdin) == 'orange'\n"
    },
    {
        "number": 4580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3 4 5 6 7 8 9 10\") == \"10\"\nassert solution(\"3 4 3 3\") == \"5\"\nassert solution(\"9 5 5 3\") == \"2\""
    },
    {
        "number": 4580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"90023400500\"\nassert solution(input()) == \"12\"\n\nExplanation\nGiven N and a_i, we find the minimum and maximum possible numbers of different colors of the users.  \n\nInput\nThe first line of the input contains a single integer N.\nThe second line contains N space separated integers, a_i.\n\nOutput\nPrint the minimum possible number of different colors of the users, and the maximum possible number of different colors, with a space in between.  \n\nExample\n\nInput\n2\n1 200\n5 9\n\nOutput\n2 5\n3\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"green\"\nassert solution(input) == \"orange\"\nassert solution(input) == \"cyan\"\nassert solution(input) == \"blue\""
    },
    {
        "number": 4580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(a) == 'yellow orange'\nassert solution(a) == 'orange'\nassert solution(a) == 'yellow orange'\nassert solution(a) == 'orange'\nassert solution(a) == 'orange'\n"
    },
    {
        "number": 4580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"orange\" or \"yellow\" or \"green\" or \"cyan\" or \"blue\" or \"orange\" or \"yellow\" or \"green\" or \"cyan\" or \"blue\" or \"orange\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"oxo\") == \"900\""
    },
    {
        "number": 4581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('oxo') == '900'\nassert solution('Oxy') == '900'\nassert solution('Xoxo') == '300'\nassert solution('OxyX') == '900'\nassert solution('OxyXo') == '300'\n"
    },
    {
        "number": 4581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"900\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"900\"\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(in_str) == '900', 'incorrect return value'\n\"\"\"\nimport sys\nimport unittest\n\nfrom collections import deque"
    },
    {
        "number": 4581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(mystr) == \"900\"\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"oxo\") == \"900\"\nassert solution(\"pandemic\") == \"800\"\nassert solution(\"mushroom\") == \"100\"\nassert solution(\"cock\") == \"500\"\nassert solution(\"pancake\") == \"700\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"900\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 4581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ohio\"), \"ohio is not a ramen topping\"\nassert solution(\"ramen\"), \"ramen is not a ramen topping\"\nassert solution(\"4inp\"), \"4inp is not a ramen topping\"\nassert solution(\"1oyiho\"), \"ohio is not a ramen topping\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"oxo\") == 700 + 100\nassert solution(\"12po\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaaa\") == 0\nassert solution(\"a\") == 100\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"H\", \"H\", \"H\"]) == \"H\"\nassert solution([\"H\", \"H\", \"D\"]) == \"D\"\nassert solution([\"D\", \"D\", \"H\"]) == \"D\"\nassert solution([\"D\", \"D\", \"D\"]) == \"D\"\nassert solution([\"D\", \"D\", \"H\"]) == \"D\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'\n"
    },
    {
        "number": 4582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H H\") == \"H\"\nassert solution(\"D\") == \"D\"\nassert solution(\"D H\") == \"D\"\nassert solution(\"D H\") == \"D\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('H H') == 'H'\nassert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('H D') == 'D'\nassert solution('H D') == 'D'\n"
    },
    {
        "number": 4582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n'''\nH H\n''') == 'H'\nassert solution(\n'''\nH H\n''') == 'H'\nassert solution(\n'''\nH D\n''') == 'H'\nassert solution(\n'''\nD D\n''') == 'D'\nassert solution(\n'''\nD D\n''') == 'D'\n''') == 'D'\n"
    },
    {
        "number": 4582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'H'\n\"\"\"\n\nfrom collections import defaultdict\n\nfrom unidecode import unidecode"
    },
    {
        "number": 4582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n\"H H H H H H H H H\"\n), \"H\"\n\nassert solution(\n\"H D\"\n), \"D\"\n\nassert solution(\n\"D H\"\n), \"H\"\n\nassert solution(\n\"H D D\"\n), \"D\"\n\nassert solution(\n\"H D H D\"\n), \"H\""
    },
    {
        "number": 4582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 'H'\nassert solution(input) == 'D'\nassert solution(input) == 'D'\nassert solution(input) == 'D'\nassert solution(input) == 'H'\n"
    },
    {
        "number": 4582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\nassert solution(\"D H\") == \"D\"\nassert solution(\"H D D\") == \"D\"\nassert solution(\"H D D H\") == \"D\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('H') == 'H'\nassert solution('D') == 'D'\n"
    },
    {
        "number": 4583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '1+2+2+2=7'\n\"\"\"\nclass Solution:\n    def getNthM(self, a, b, c, d):\n        return a + b + c + d - 7\n\n    def solution(self, A, B, C, D):\n        if not (A>=0 and A<=9 and B>=0 and B<=9 and C>=0 and C<=9 and D>=0 and D<=9):\n            return 0\n        else:\n            return self.getNthM(A, B, C, D)\n        \n"
    },
    {
        "number": 4583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10-11-12\") == \"1-0+0-0\"\nassert solution(\"-1-1\") == \"1-0-0\"\nassert solution(\"2*\") == \"2*0\"\nassert solution(\"+123-456-7\") == \"1-0-0+0-0+0-0-0\"\nassert solution(\"1+123\") == \"1-123\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1+2+2+2=7\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '7+7+7+7=8'"
    },
    {
        "number": 4583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(    \"ABD\") == \"1+2+2+2=7\"\nassert solution(    \"2+1\") == \"1+1=2\"\nassert solution(    \"1+2+2\") == \"1+2+2=7\"\nassert solution(    \"1+2\") == \"1+2=2\"\nassert solution(    \"ABAB\") == \"1+2+2=7\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('1111') == '1+1+1+1=7'\nassert solution('10998') == '1+1+1+1=7'"
    },
    {
        "number": 4583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1+2+2+2=7\"\n\ntest cases:\n    input:\n        13\n        10\n    output:\n        1+2+2+2=7\n    input:\n        3\n        10\n    output:\n        1+2+2+2=7\n    input:\n        17\n        17\n    output:\n        1+2+2+2=7\n    input:\n        3\n        1\n    output:\n        1+2+2+2=7\n    input:\n        1\n        1\n    output:\n        1+2+2+2=7\n    input:\n        1\n        2\n    output:\n        1+2+2+2=7\n    input:\n        1\n        1\n    output:\n        1+2+2+2=7\n    input:\n        2\n        1\n    output:\n        1+2+2+2=7\n    input:\n        3\n        1\n    output:\n        1+2+2+2=7\n    input:\n        9\n        7\n    output:\n        1+2+2+2=7\n    input:\n        1\n        9\n    output:\n        1+2+2+2=7\n    input:\n        2\n        1\n    output:\n        1+2+2+2=7\n    input:\n        3\n        1\n    output:\n        1+2+2+2=7\n    input:\n        10\n        1\n    output:\n        1+2+2+2=7\n    input:\n        10\n        2\n    output:\n        1+2+2+2=7\n    input:\n        1\n        10\n    output:\n        1+2+2+2=7\n    input:\n        1\n        1\n    output:\n        1+2+2+2=7\n    input:\n        1\n        1\n    output:\n        1+2+2+2=7\n    input:\n        1\n        1\n    output:\n        1+2+2+2=7\n    input:\n        2\n        1\n    output:\n        1+2+2+2=7\n    input:\n        2\n        1\n    output:\n        1+2+2+2=7\n    input:\n        3\n        1\n    output:\n        1+2+2+2=7\n    input:\n        3\n        1\n    output:\n        1+2+2+2=7\n    input:\n        3\n        1\n    output:\n        1+2+2+2=7\n    input:\n        9\n        1\n    output:\n        1+2+2+2=7\n    input:\n        9\n        2\n    output:\n        1+2+2+2=7\n    input:\n        9\n        3\n    output:\n        1+2+2+2=7\n    input:\n        9\n        10\n    output:\n        1+2+2+2=7\n    input:\n        1\n        1\n    output:\n        1+2+2+2=7\n    input:\n        1\n        1\n    output:\n        1+2+2+2=7\n    input:\n        1\n        1\n    output:\n        1+2+2+2=7\n    input:\n        2\n        1\n    output:\n        1+2+2+2=7\n    input:\n        2\n        1\n    output:\n        1+2+2+2=7\n    input:\n        2\n        1\n    output:\n        1+2+2+2=7\n    input:\n        2\n        2\n    output:\n        1+2+2+2=7\n    input:\n        3\n        1\n    output:\n        1+2+2+2=7\n    input:\n        3\n        1\n    output:\n        1+2+2+2=7\n    input:\n        3\n        2\n    output:\n        1+2+2+2=7\n    input:\n        3\n        3\n    output:\n        1+2+2+2=7\n    input:\n        3\n        1\n    output:\n        1+2+2+2=7\n    input:\n        9\n        1\n    output:\n        1+2+2+2=7\n    input:\n        9\n        2\n    output:\n        1+2+2+2=7\n    input:\n        9\n        3\n    output:\n        1+2+2+2=7\n    input:\n        9\n        10\n    output:\n        1+2+2+2=7\n    input:\n        1\n        1\n    output:\n        1+2+2+2=7\n    input:\n        1\n        1\n    output:\n        1+2+2+2=7\n    input:\n        2\n        1\n    output:\n        1+2+2+2=7\n    input:\n        2\n        1\n    output:\n        1+2+2+2=7\n    input:\n        2\n        1\n    output:\n        1+2+2+2=7\n    input:\n        3\n        1\n    output:\n        1+2+2+2=7\n    input:\n        3\n        1\n    output:\n        1+2+2+2=7\n    input:\n        3\n        2\n    output:\n        1+2+2+2=7\n    input:\n        3\n        3\n    output:\n        1+2+2+2=7\n    input:\n        3\n        1\n    output:\n        1+2+2+2=7\n    input:\n        3\n        1\n    output:\n        1+2+2+2=7\n    input:\n        9\n        1\n    output:\n        1+2+2+2=7\n    input:\n        9\n        2\n    output:\n        1+2+2+2=7\n    input:\n        9\n        3\n    output:\n        1+2+2+2=7\n    input:\n        9\n        10\n    output:\n        1+2+2+2=7\n    input:\n        9\n        1\n    output:\n        1+2+2+2=7\n    input:\n        9\n        2\n    output:\n        1+2+2+2=7\n    input:\n        9\n        3\n    output:\n        1+2+2+2=7\n    input:\n        1\n        1\n    output:\n        1+2+2+2=7\n    input:\n        1\n        1\n    output:\n        1+2+2+2=7\n    input:\n        1\n        1\n    output:\n        1+2+2+2=7\n    input:\n        2\n        1\n    output:\n        1+2+2+2=7\n    input:\n        2\n        1\n    output:\n        1+2+2+2=7\n    input:\n        2\n        1\n    output:\n        1+2+2+2=7\n    input:\n        2\n        2\n    output:\n        1+2+2+2=7\n    input:\n        3\n        1\n    output:\n        1+2+2+2=7\n"
    },
    {
        "number": 4583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"7+2+2+2=7\"\nassert solution(\"2+1+1+1=2\") == \"2+1+1+1=2\"\nassert solution(\"4+2=3\") == \"4+2=3\"\nassert solution(\"5+7=8\") == \"5+7=8\"\nassert solution(\"0+0=1\") == \"0+0=1\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '1+2+2+2=7'\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1222\"]) == \"1+2+2+2=7\"\nassert solution([\"12\", \"22\", \"32\", \"44\", \"55\", \"66\", \"77\", \"88\", \"99\"]) == \"1+2+2+2=7\"\nassert solution([\"1222\", \"22\", \"32\", \"44\", \"55\", \"66\", \"77\", \"88\", \"99\"]) == \"1+2+2+2=7\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\"]) == \"1+2+2+2=7\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]) == \"1+2+2+2=7\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution == '3'\n"
    },
    {
        "number": 4584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(s) == \"2\""
    },
    {
        "number": 4584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"ABCDEF\") == \"2\"\nassert solution(\"ABCDEFG\") == \"0\"\nassert solution(\"ABABCDEEF\") == \"0\"\nassert solution(\"ABCDEFG\") == \"1\"\nassert solution(\"ABC\") == \"1\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"0 2\"\nassert solution(\"3 3 2\") == \"0 2 0\"\nassert solution(\"3 3 2 3\") == \"0 3 0 2\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 1') == 1, \"solution(1)\"\nassert solution('1 2') == 2, \"solution(2)\"\nassert solution('2 1') == 0, \"solution(2)\"\nassert solution('2 3') == 2, \"solution(3)\"\nassert solution('4 4') == 2, \"solution(4)\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '2'\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('A') == 2, 'A'\nassert solution('2') == 1, '2'\nassert solution('3') == 2, '3'\nassert solution('4') == 3, '4'\nassert solution('5') == 4, '5'\n"
    },
    {
        "number": 4584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(in_str) == solution(in_str.strip('\\n'))\n"
    },
    {
        "number": 4584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1 2 2\") == \"2\"\nassert solution(\"3 3 2\") == \"3\"\nassert solution(\"3 1 3\") == \"1\"\nassert solution(\"3 1 3 2\") == \"2\"\nassert solution(\"5 1 3 4\") == \"0\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 1 2 2') == '2'\nassert solution('1 1 3 2') == '2'\nassert solution('1 1 4 2') == '2'\nassert solution('1 1 5 2') == '0'\nassert solution('1 1 6 2') == '0'\n"
    },
    {
        "number": 4585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5') == '3'\nassert solution('2') == '3'\nassert solution('0') == '0'\nassert solution('4') == '3'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3\""
    },
    {
        "number": 4585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(4) == '3'\nassert solution(5) == '5'\nassert solution(3) == '0'"
    },
    {
        "number": 4585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '4'\nassert solution('2') == '5'\nassert solution('1') == '2'\nassert solution('1') == '3'\n"
    },
    {
        "number": 4585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == 3\n\n-----Bonus-----\nSample Input:\n5\n\n-----Sample Output:\n3\n\nThe kangaroo can reach his nest at time 3 by jumping to the right three times, which is the earliest possible time.\n"
    },
    {
        "number": 4585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"3\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(s) == \"3\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"3\"\nassert solution(\"4\") == \"3\"\nassert solution(\"6\") == \"6\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1118) == \"Yes\", \"1118 is not good\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1111') == 'Yes', 'Not a good'\n\nassert solution('1234567890') == 'No', 'Not a good'\n\nassert solution('1000000000') == 'No', 'Not a good'\n\nassert solution('2222') == 'No', 'Not a good'\n\nassert solution('11111111') == 'No', 'Not a good'"
    },
    {
        "number": 4586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == 'Yes', 'Error'\nassert solution(2) == 'No', 'Error'\nassert solution(3) == 'No', 'Error'\nassert solution(4) == 'Yes', 'Error'\nassert solution(5) == 'No', 'Error'\n"
    },
    {
        "number": 4586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4010\") == \"Yes\"\nassert solution(\"7201\") == \"No\"\nassert solution(\"1112\") == \"Yes\"\nassert solution(\"10001\") == \"No\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1118) == \"Yes\"\nassert solution(123) == \"No\"\nassert solution(999) == \"Yes\"\nassert solution(1111) == \"No\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 'Yes'\nassert solution(input) == 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1118) == 'No'\nassert solution(12345) == 'No'\nassert solution(1234567) == 'Yes'\nassert solution(1234567890) == 'Yes'\nassert solution(123456789) == 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\n-----Sample Input-----\n1121\n\n-----Sample Output-----\nNo\n"
    },
    {
        "number": 4586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(str(int(''.join(map(str, stdin))))), \"No\""
    },
    {
        "number": 4587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\n        [\"1 4\", \"1 5\", \"1 6\"],\n        [\"2 3\", \"2 4\", \"2 5\"],\n        [\"2 6\", \"2 7\", \"2 8\"],\n        [\"3 6\", \"3 7\", \"3 8\"],\n    ]) == \"3\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1,1,1,1,1) == 1\nassert solution(2,2,2,2,2) == 2\nassert solution(3,3,3,3,3) == 3\nassert solution(5,5,5,5,5) == 5\n"
    },
    {
        "number": 4587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"N 2 4\") == \"3\"\nassert solution(\"N 3 5\") == \"3\"\nassert solution(\"N 4 2\") == \"3\"\nassert solution(\"N 1 4\") == \"3\"\nassert solution(\"N 4 2\") == \"3\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2) == 3\nassert solution(5) == 2"
    },
    {
        "number": 4587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 3 2') == '3'\n"
    },
    {
        "number": 4587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 3 5 6') == 3\nassert solution('2 4 6') == 3\nassert solution('2 2 3') == 3\nassert solution('1 3 7 9') == 3\nassert solution('2 3 7 9') == 3\n"
    },
    {
        "number": 4587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"4\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '>'\nassert solution(stdin) == '='\nassert solution(stdin) == '<'\nassert solution(stdin) == '='\n\nassert solution(stdin) == '10'\n"
    },
    {
        "number": 4588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\">\") == \"5\"\nassert solution(\"<\") == \"5\"\nassert solution(\"=\") == \"5\"\nassert solution(\"10\") == \"5\"\nassert solution(\"A\") == \"5\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \">\"\nassert solution(stdin) == \"<\"\nassert solution(stdin) == \"=\"\nassert solution(stdin) == \"=\"\nassert solution(stdin) == \"<=\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"A B\") == \"10 = 0\"\nassert solution(\"AA\") == \"10 > 0\"\nassert solution(\"AAB\") == \"10 = 0\"\nassert solution(\"ABB\") == \"11 > 0\"\nassert solution(\"ABBC\") == \"10 = 0\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"A B\") == \">=\"\nassert solution(\"A > B\") == \"<=10\"\nassert solution(\"A = A\") == \"=10\"\nassert solution(\"X > Y\") == \">10\"\nassert solution(\"10 X = Y\") == \"=10\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(x y) == solution(x y x y)\nassert solution(x y z) == solution(x y z x y z)\n\"\"\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin: str\n    )\n"
    },
    {
        "number": 4588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"<\"\nassert solution(input()) == \"=\"\nassert solution(input()) == \">\"\nassert solution(input()) == \">\"\nassert solution(input()) == \"=\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(A B) == '<', 'A < B'\nassert solution(A B C) == '>', 'A > B'\nassert solution(A B C D) == '=', 'A = B'"
    },
    {
        "number": 4588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('A B') == '<'\nassert solution('B C') == '>'\nassert solution('C D') == '= '\nassert solution('D E') == '>='\nassert solution('E F') == '>'\n"
    },
    {
        "number": 4589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\".....\") == \"11211\"\nassert solution(\"....\") == \"1#2#1\"\nassert solution(\".....\") == \"1#1#1\"\nassert solution(\"....\") == \"11211\"\nassert solution(\"#.#.###.###.#\") == \"11211\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"..#.#..#..#..#.####....##....##.#..#######..#.#####.#####.#####.####.#####.####.###.#####.####.#####.#####.#####.#####.####.#####.#####.#####.#####.#####.#####.#####..#.###.####..#.#######.###..#..#.#####..#.####.##....##...#####.#####.#####.#####.#####.#####..####..#..#######.###.####.#####..#####.###.#####.#####.#####.####.#####.#####..#.###.####.#####.#####.#####.#####.#####.####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####..#######..#..#.######.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####."
    },
    {
        "number": 4589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == '0111'\n\nassert solution(inp) == '0111'\nassert solution(inp) == '0111'\nassert solution(inp) == '0111'\nassert solution(inp) == '0111'\n"
    },
    {
        "number": 4589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"S_1\") == \"1\"\nassert solution(\n    \"S_2\") == \"2\"\nassert solution(\n    \"S_3\") == \"1\"\nassert solution(\n    \"S_4\") == \"1\"\nassert solution(\n    \"S_5\") == \"1\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"11211\""
    },
    {
        "number": 4589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == output(), \"Failed to solve this problem\""
    },
    {
        "number": 4589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"H W\") == \"11211\"\nassert solution(\"H W 4\") == \"11211\"\nassert solution(\"H W 5\") == \"11211\"\nassert solution(\"H W 6\") == \"11211\"\nassert solution(\"H W 7\") == \"11211\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"11211\"\nassert solution(input) == \"1#2#1\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom operator import attrgetter\n\nfrom utils import print_matrix, read_matrix\n"
    },
    {
        "number": 4589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"..\", \"#\", \"..\", \".\", \"..\", \"..\", \".\", \"#\", \"#\", \"#\", \".\", \"#\"]) == \"...#....#...\"\nassert solution([\"..\", \"..\", \"...\", \".\", \"..\", \"..\", \".\", \"..\", \"...\", \".\", \"..\", \"..\", \"..\"]) == \"...#....#...\"\nassert solution([\"....\", \"....\", \"..\", \"..\", \"..\", \".\", \"..\", \".\", \"...\", \"..\", \"..\", \"..\"]) == \"...#....#...\"\n\n<S>\n<#>\n<#>\n<#>\n<#>\n\n\"\"\"\n\nfrom sys import stdin\n\nfrom collections import deque\n\ndx = [-1, 0, 1, 0]\ndy = [0, -1, 0, 1]"
    },
    {
        "number": 4589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '11211'\n'''"
    },
    {
        "number": 4590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 4 1\") == \"3\"\nassert solution(\"2 5 3\") == \"3\"\nassert solution(\"1 4 6\") == \"3\"\nassert solution(\"3 3 2\") == \"3\"\nassert solution(\"1 6 1\") == \"2\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 4 240\") == \"3\"\nassert solution(\"60 90 120\") == \"3\"\nassert solution(\"80 150 80 150\") == \"5\"\nassert solution(\"80 150 80 150\") == \"4\"\nassert solution(\"80 150 80 150\") == \"3\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Expected output-----\nIn this example, we have two desks with two books in them.\n In this example, we have three desks, and can read two books in one minute.\n In this example, we have three desks, and can read three books in one minute.\n In this example, we have three desks, and can read four books in one minute.\n In this example, we have four desks, and can read four books in one minute.\n In this example, we have four desks, and can read five books in one minute.\n In this example, we have five desks, and can read five books in one minute.\n In this example, we have five desks, and can read six books in one minute.\n In this example, we have six desks, and can read seven books in one minute.\n In this example, we have seven desks, and can read eight books in one minute.\n In this example, we have eight desks, and can read nine books in one minute.\n In this example, we have nine desks, and can read ten books in one minute.\n In this example, we have ten desks, and can read eleven books in one minute.\n In this example, we have eleven desks, and can read twelve books in one minute.\n In this example, we have twelve desks, and can read thirteen books in one minute.\n In this example, we have thirteen desks, and can read fourteen books in one minute.\n In this example, we have fourteen desks, and can read fifteen books in one minute.\n In this example, we have fifteen desks, and can read sixteen books in one minute.\n In this example, we have sixteen desks, and can read seventeen books in one minute.\n In this example, we have seventeen desks, and can read eighteen books in one minute.\n In this example, we have eighteen desks, and can read nineteen books in one minute.\n In this example, we have nineteen desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one minute.\n In this example, we have twenty desks, and can read twenty books in one"
    },
    {
        "number": 4590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"3 4 240\", \"60 90 120\", \"80 150 80 150\"]) == \"3\"\nassert solution([\"1 2 4 5 8 10 12\"]) == \"6\"\nassert solution([\"1 2 5 10 7 8 4 9 2 3\"]) == \"5\"\nassert solution([\"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7 8 9 10 12\", \"1 2 3 4 5 6 7"
    },
    {
        "number": 4590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4 240\") == \"3\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 4 10 60') == '15'\nassert solution('10 6 10 30') == '13'\nassert solution('10 6 10 30') == '15'\nassert solution('3 4') == '6'\nassert solution('8 8 8 8') == '12'\n"
    },
    {
        "number": 4590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 4 240\") == 12\nassert solution(\"3 4 5\") == 10\nassert solution(\"5 10 50\") == 14\nassert solution(\"4 4 5\") == 3\nassert solution(\"3 3\") == 1\n"
    },
    {
        "number": 4591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"A-pizza\", \"B-pizza\", \"AB-pizza\"), \"The cost is not enough to buy two AB-pizzas.\"\nassert solution(\"Pizza\", \"Pizza\", \"AB-pizza\"), \"The cost is not enough to buy two AB-pizzas.\"\nassert solution(\"AB-pizza\", \"AB-pizza\", \"AB-pizza\"), \"The cost is not enough to buy two AB-pizzas.\"\nassert solution(\"AB-pizza\", \"AB-pizza\", \"A-pizza\"), \"The cost is not enough to buy two AB-pizzas.\"\nassert solution(\"AB-pizza\", \"AB-pizza\", \"B-pizza\"), \"The cost is not enough to buy two AB-pizzas.\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"7900\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"A\", \"B\", \"C\", \"X\", \"Y\"]) == \"7900\"\nassert solution([\"A\", \"B\", \"C\", \"X\"]) == \"7900\"\nassert solution([\"A\", \"B\", \"C\", \"X\", \"Y\", \"AB\"]) == \"7900\"\nassert solution([\"A\", \"B\", \"C\", \"X\", \"Y\", \"AB\", \"AB\", \"AB\", \"AB\", \"AB\", \"AB\"]) == \"7900\"\nassert solution([\"A\", \"B\", \"C\", \"X\", \"Y\", \"AB\", \"AB\", \"AB\", \"AB\", \"AB\", \"AB\", \"AB\"]) == \"7900\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 1 4 6 8 6 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8"
    },
    {
        "number": 4591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'"
    },
    {
        "number": 4591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['A', 'A', 'A', 'B', 'B', 'AB', 'C', 'C', 'C', 'AB', 'C']) == 7"
    },
    {
        "number": 4591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"7900\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7900, 'incorrect'\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1903\"\n\"\"\"\nimport math"
    },
    {
        "number": 4591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"7900\""
    },
    {
        "number": 4592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == \"1\"\nassert solution(2) == \"1\"\nassert solution(1) == \"1\"\nassert solution(0) == \"1\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(sys.stdin.readline().strip()) == \"4\"\n'''\n"
    },
    {
        "number": 4592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"is not solution\"\nassert solution(\"3\"), \"is not solution\"\nassert solution(\"5\"), \"is not solution\"\nassert solution(\"57\"), \"is not solution\"\nassert solution(\"1\"), \"is not solution\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1') == 4\n"
    },
    {
        "number": 4592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\""
    },
    {
        "number": 4592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"100\") == \"100\"\nassert solution(\"11100\") == \"100\"\nassert solution(\"1110010\") == \"100\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n  string: str = \"937861\"\n) == \"7\"\nassert solution(\n  string: str = \"5\"\n) == \"4\"\nassert solution(\n  string: str = \"1\"\n) == \"1\"\nassert solution(\n  string: str = \"1000\"\n) == \"1\"\nassert solution(\n  string: str = \"0\"\n) == \"1\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3) == 4\nassert solution(12) == 4\nassert solution(26) == 4\nassert solution(1000) == 5\nassert solution(1) == 1\n"
    },
    {
        "number": 4593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '9'\n'''"
    },
    {
        "number": 4593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == 9\nassert solution(9) == 9\nassert solution(10) == 9\nassert solution(99) == 9\nassert solution(1000) == 9\n"
    },
    {
        "number": 4593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '9'\n\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10\") == 9\nassert solution(\"3\") == 9\nassert solution(\"5\") == 9\nassert solution(\"13\") == 9\nassert solution(\"12\") == 9\n"
    },
    {
        "number": 4593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(s) == 9, \"Function solution is not returning the correct result.\"\n\nassert solution(s) == 10, \"Function solution is returning the wrong result.\"\n\nassert solution(s) == \"9\", \"Function solution is returning wrong result.\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2) == 4\nassert solution(5) == 9\nassert solution(24) == 4\nassert solution(48) == 9\nassert solution(1024) == 7\n"
    },
    {
        "number": 4593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 6\nassert solution(4) == 9\nassert solution(5) == 13\n"
    },
    {
        "number": 4593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(string) == solution(input)\n\n'''"
    },
    {
        "number": 4593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(4) == '9'\nassert solution(8) == '1'\nassert solution(10) == '1'\nassert solution(13) == '2'\nassert solution(1000) == '9'\n"
    },
    {
        "number": 4593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(6) == 9\nassert solution(1) == 1\nassert solution(3) == 2\nassert solution(8) == 8\nassert solution(8) == 4\n"
    },
    {
        "number": 4594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\"4\", \"10\", \"8\", \"8\", \"6\", \"8\", \"6\", \"8\", \"6\"]) == \"3\"\nassert solution(\n    [\"2\", \"2\", \"1\", \"1\", \"1\", \"2\", \"3\", \"2\", \"3\"]) == \"3\"\nassert solution(\n    [\"3\", \"4\", \"4\", \"4\", \"3\", \"3\", \"4\", \"4\", \"3\"]) == \"3\"\nassert solution(\n    [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution(\n    [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"]) == \"1\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == str\n"
    },
    {
        "number": 4594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 3\n"
    },
    {
        "number": 4594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"3\"\nassert solution(\"1 2 3\") == \"4\"\nassert solution(\"2 1 4 8 2 5\") == \"3\"\nassert solution(\"2 1 4 5\") == \"4\"\nassert solution(\"2 2 5 3 4\") == \"3\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(3)"
    },
    {
        "number": 4594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"4 N 8 6 6\") == 3\nassert solution(\n    \"10 8 8 8\") == 3\nassert solution(\n    \"8 8 8 8\") == 3\nassert solution(\n    \"8 8 8 8\") == 3\nassert solution(\n    \"8 8 8 8\") == 3\n"
    },
    {
        "number": 4594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 0, 'The function does not work'\n"
    },
    {
        "number": 4594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('4'), \"4 is not a valid solution\"\nassert solution('5'), \"5 is not a valid solution\"\nassert solution('7'), \"7 is not a valid solution\"\nassert solution('8'), \"8 is not a valid solution\"\nassert solution('9'), \"9 is not a valid solution\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, 10, 8, 6) == 3, \"An error occured\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 5"
    },
    {
        "number": 4595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"Z\"\nassert solution(input()) == \"A\"\nassert solution(input()) == \"Q\"\nassert solution(input()) == \"QQ\"\nassert solution(input()) == \"ZZ\"\n\nn = int(input())\nl = [input() for _ in range(n)]\nprint(len(l[-1]))\n"
    },
    {
        "number": 4595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\".Z\") == \"Z\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"A24Z\"\n\n-----Example 1 -----\nInput\n\nQWERTYASDFZXCV\n\nOutput\n\n5\n\nExplanation\n\nIn this example we create a substring with 11 characters that starts with A and ends with Z.\n\n[11:11] means [A, Z]\n\nSo, the longest substring starting with A and ends with Z is formed by taking out the seventh character and taking out the eleven characters of the previous substring.\n\nIf we try to add A to the beginning or end of the substring, the substring will not be formed.\n\n[11:11] means [Z, A]\n\nSo, we have to add an additional character A.\n\n\n-----Example 2 -----\nInput\n\nQWERTYASDFZXCV\n\nOutput\n\n5\n\nExplanation\n\nIn this example we create a substring with 11 characters that starts with A and ends with Z.\n\n[11:11] means [A, Z]\n\nSo, the longest substring starting with A and ends with Z is formed by taking out the seven characters of the previous substring.\n\n[11:11] means [Z, A]\n\nSo, the substring will be formed by taking out the seven characters of the previous substring.\n\n[11:11] means [A, Z]\n\nSo, the longest substring is formed by taking out the seven characters of the previous substring and adding the seven characters of the new substring.\n\n\n-----Constraints-----\n - 1 \u2264 |s| \u2264 10\n - s contains uppercase English letters.\n\n-"
    },
    {
        "number": 4595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"QWERTYASDFZXCV\"), \"5\"\nassert solution
    },
    {
        "number": 4595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '5'\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\"\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution
    },
    {
        "number": 4595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(s) == \"ASDFZ\", \"The answer to part 1 is incorrect\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == 5\nassert solution(s) == 5\n"
    },
    {
        "number": 4596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"2\"\nprint(pass)"
    },
    {
        "number": 4596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '2'\n'''"
    },
    {
        "number": 4596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\"8 12 40\", \"4\", \"20\"]\n), \"1\"\nassert solution(\n    [\"3\", \"8\", \"12\", \"40\"]\n), \"2\"\nassert solution(\n    [\"1\", \"3\", \"1\", \"2\", \"3\", \"1\", \"1\"]\n), \"4\"\nassert solution(\n    [\"2\", \"2\", \"3\", \"10\", \"20\"]\n), \"4\""
    },
    {
        "number": 4596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\\\"\\\"\\\"\n3\n8 12 40\n\\\"\\\"\\\") == 20\nassert solution(\\\"\\\"\\\"\n3\n8 12 40\n7 7 30\n\\\"\\\"\\\") == 1\nassert solution(\\\"\\\"\\\"\n3\n8 12 40\n2 3 2\n\\\"\\\"\\\") == 1\nassert solution(\\\"\\\"\\\"\n3\n8 12 40\n3 5 6\n\\\"\\\"\\\") == 4\nassert solution(\\\"\\\"\\\"\n3\n8 12 40\n6 5 7\n\\\"\\\"\\\") == 1\n"
    },
    {
        "number": 4596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"2\"\n\"\"\"\nn = int(input())\ncount = 1\n\nfor _ in range(n):\n    string = input()\n    if string[0] == \"5\":\n        string = string[1:]\n        string += \"0\"\n        while string[-1] == \"5\":\n            string = string[:-1]\n            string += \"0\"\n        string = str(int(string) // 2)\n        count += 1\n        if count % 2 == 0:\n            print(string)\n        else:\n            print(string + \"1\")\n    else:\n        count += 1\n        if count % 2 == 0:\n            print(string)\n        else:\n            print(string + \"1\")\n"
    },
    {
        "number": 4596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Sample Output-----\nSample Input:\n7\n2 4 8 6 12\n\nSample Output:\n3\n\"\"\"\nimport sys"
    },
    {
        "number": 4596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '2'\n"
    },
    {
        "number": 4596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == str(2)\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(a) == \"6\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"18\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"6\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(s) == 7\nprint(solution(\"5\"))\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '6'\n"
    },
    {
        "number": 4597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3\") == \"6\"\nassert solution(\n    \"1\") == \"1\"\nassert solution(\n    \"0\") == \"0\"\nassert solution(\n    \"3\") == \"1\"\nassert solution(\n    \"2\") == \"2\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n\"4 3\"\n) == \"6\", \"1 + 2 + 3 = 6\"\nassert solution(\n\"2 4\"\n) == \"4\", \"2 + 4 = 4\"\nassert solution(\n\"3 2\"\n) == \"2\", \"3 + 2 = 3\"\nassert solution(\n\"3 4\"\n) == \"3\", \"3 + 4 = 4\"\nassert solution(\n\"3 5\"\n) == \"2\", \"3 + 5 = 3\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"6\""
    },
    {
        "number": 4598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5, \"Expected 5, but got {}\".format(solution(stdin))\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"6\""
    },
    {
        "number": 4598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(solution('a')) == '1'\nassert solution(solution('b')) == '2'\nassert solution(solution('c')) == '3'\nassert solution(solution('d')) == '4'\nassert solution(solution('e')) == '5'\n"
    },
    {
        "number": 4598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '6'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"4\") == \"3\"\nassert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3) == 6, \"output is wrong\"\n\n-----Experiments-----\npython3 solution.py\n"
    },
    {
        "number": 4599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 3 4 5\") == \"2\"\nassert solution(\"1 2 3 3\") == \"3\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"3 4 5 2\") == \"2\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"33\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"1\"\n\n-----Bonus-----\nThe value of the cards as shown in the sample input and the value of the scores as shown in the sample input must be in the range of 0 to 99, and the scores must be integers between 0 and 99 inclusive.\n\nInput Format\n\nThe first line contains an integer T, the number of test cases. Then T test cases follow. Each test case contains one line of input, where the first line denotes the dimension of N.\n\nConstraints\n1 <= T <= 10^5\n\nSample Input\n\n2\n1 1 1\n\nSample Output\n\n1\n\n-----Sample Input-output Format-----\nTest Case #1\n\nInput 1:\n3\n1 1 1\n\nOutput 1:\n1\n\n-----Sample Input-output Format-----\nTest Case #2\n\nInput 1:\n3\n1 1 1\n\nOutput 1:\n1\n\n-----Sample Input-output Format-----\nTest Case #2\n\nInput 1:\n4\n1 1 1\n1 2 1\n2 1 2\n1 3 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #2\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n\nOutput 1:\n1\n\n-----Sample Input-output Format-----\nTest Case #3\n\nInput 1:\n3\n1 1 1\n1 2 1\n2 1 2\n2 1 2\n3 1 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #3\n\nInput 1:\n3\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n\nOutput 1:\n1\n\n-----Sample Input-output Format-----\nTest Case #4\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #4\n\nInput 1:\n3\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n\nOutput 1:\n1\n\n-----Sample Input-output Format-----\nTest Case #5\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #5\n\nInput 1:\n5\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #6\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n3\n\n-----Sample Input-output Format-----\nTest Case #6\n\nInput 1:\n3\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n3\n\n-----Sample Input-output Format-----\nTest Case #7\n\nInput 1:\n2\n1 1 1\n2 2 2\n3 2 2\n3 3 3\n4 3 3\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #7\n\nInput 1:\n2\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n1\n\n-----Sample Input-output Format-----\nTest Case #8\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #8\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n1\n\n-----Sample Input-output Format-----\nTest Case #9\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #9\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n1\n\n-----Sample Input-output Format-----\nTest Case #10\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #10\n\nInput 1:\n5\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #10\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #11\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n1\n\n-----Sample Input-output Format-----\nTest Case #12\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #12\n\nInput 1:\n2\n1 1 1\n2 2 2\n3 2 2\n3 3 3\n4 3 3\n4 4 4\n5 3 3\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #13\n\nInput 1:\n1\n1\n1\n\nOutput 1:\n0\n\n-----Sample Input-output Format-----\nTest Case #14\n\nInput 1:\n1\n1\n1\n\nOutput 1:\n0\n\n-----Sample Input-output Format-----\nTest Case #15\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #16\n\nInput 1:\n3\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n1\n\n-----Sample Input-output Format-----\nTest Case #17\n\nInput 1:\n3\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #18\n\nInput 1:\n2\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #19\n\nInput 1:\n5\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n1\n\n-----Sample Input-output Format-----\nTest Case #20\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n0\n\n-----Sample Input-output Format-----\nTest Case #20\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n0\n\n-----Sample Input-output Format-----\nTest Case #21\n\nInput 1:\n5\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\nTest Case #21\n\nInput 1:\n4\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n\nOutput 1:\n2\n\n-----Sample Input-output Format-----\n"
    },
    {
        "number": 4599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"3 1 5\") == \"4\"\nassert solution(\"5 5 3\") == \"6\"\nassert solution(\"3 3 3 3 3 3 3 3 3\") == \"7\"\nassert solution(\"4 4 4 4 4 4 4 4 4\") == \"8\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"3 1\", \"1 2\"]) == \"2\"\nassert solution([\"1 2\"]) == \"1\"\nassert solution([\"1 4\"]) == \"1\"\nassert solution([\"1 1\"]) == \"1\"\nassert solution([\"1 1\", \"4\"]) == \"3\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"2\""
    },
    {
        "number": 4599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]) == \"3\"\nassert solution([\"1\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]) == \"3\"\nassert solution([\"5\",\"1\",\"4\",\"8\",\"10\"]) == \"8\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]) == \"2\"\nassert solution([\"1\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]) == \"3\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(test) == \"4 6\"\n\nassert solution(input) == \"2 4\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3,2,1) == \"1\"\nassert solution(1,1,2) == \"2\"\nassert solution(2,3,1) == \"2\"\nassert solution(5,3,1) == \"2\"\nassert solution(1,2,1) == \"1\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2 2\"\n\n\"\"\"\nN, M, p_i = map(int, input().split())\nS_0, S_1 = map(int, input().split())\nS_0 += M\nS_1 += M\nfor i in range(M):\n    S_0 += M - i\n    S_1 += M - i\nS_0 -= 1\nS_1 -= 1\nS = S_0 * S_1\n"
    },
    {
        "number": 4600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('4 5'), '2'\nassert solution('4 5 2'), '1'\nassert solution('4 5 2 3'), '3'\nassert solution('4 5 2 4'), '5'\nassert solution('4 5 2 4 5'), '0'\n"
    },
    {
        "number": 4600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '2 2'\nassert solution(input) == '2 2'\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2 2'\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 5') == '2 2'\nassert solution('1 WA') == '1 0'\nassert solution('2 AC') == '2 1'\nassert solution('2 WA') == '2 0'\nassert solution('2 AC') == '2 0'\n"
    },
    {
        "number": 4600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2 2\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"5\""
    },
    {
        "number": 4601,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 5) == 5\nassert solution(6, 9) == 5\nassert solution(6, 1) == 0\nassert solution(6, 0) == 0\nassert solution(6, 2) == 0\n"
    },
    {
        "number": 4601,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"N K\"\n    ) == \"5\"\n\n### Solution With Clever Way ###"
    },
    {
        "number": 4601,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 1 4 5\"\n) == \"4\"\nassert solution(\n    \"3 5\"\n) == \"4\"\nassert solution(\n    \"3 4 5 6 7 8 9\"\n) == \"4\"\nassert solution(\n    \"3 4 5 6 7 8 9\"\n) == \"1\"\nassert solution(\n    \"3 4 5 6 7 8 9\"\n) == \"1\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"3 1\\\") == 5\nassert solution(\\\"3 5\\\") == 0\nassert solution(\\\"1 3\\\") == 0\nassert solution(\\\"1 5\\\") == 4\nassert solution(\\\"1 1\\\") == 0\n"
    },
    {
        "number": 4601,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"5\"\n'''"
    },
    {
        "number": 4601,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1\"]) == \"1\"\nassert solution([\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\"]) == \"3\"\nassert solution([\"2\",\"1\",\"2\",\"3\",\"2\",\"2\",\"2\"]) == \"4\"\nassert solution([\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\"]) == \"1\"\nassert solution([\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\"]) == \"0\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == 5\nassert solution(\"4 1 5\") == 5\nassert solution(\"5 1\") == 5\nassert solution(\"4 1\") == 1\nassert solution(\"0 1\") == 1\n"
    },
    {
        "number": 4602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == 4\nassert solution(\"5\") == 6\nassert solution(\"2 5\") == 5\nassert solution(\"1 1\") == 1\nassert solution(\"2 2\") == 2\n"
    },
    {
        "number": 4602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1\",\"10\"]) == \"4\"\nassert solution([\"10\",\"1\"]) == \"4\"\nassert solution([\"10\",\"10\"]) == \"3\"\nassert solution([\"10\",\"10\",\"10\"]) == \"3\"\nassert solution([\"10\",\"10\",\"10\",\"10\"]) == \"3\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\n'''"
    },
    {
        "number": 4602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"1\") == \"4\"\nassert solution(\"0\") == \"4\"\nassert solution(\"K\") == \"4\"\nassert solution(\"10\") == \"4\""
    },
    {
        "number": 4602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 5\"\n) == \"2\"\nassert solution(\n    \"3 3\"\n) == \"0\"\nassert solution(\n    \"5 4\"\n) == \"0\"\nassert solution(\n    \"10 3\"\n) == \"0\"\nassert solution(\n    \"12 3\"\n) == \"5\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n  [\"5\", \"4\", \"2\", \"3\", \"4\"]) == \"4\"\nassert solution(\n  [\"2\", \"3\", \"1\", \"5\", \"4\", \"6\"]) == \"5\"\nassert solution(\n  [\"2\", \"5\", \"1\", \"4\", \"3\", \"6\"]) == \"7\"\nassert solution(\n  [\"4\", \"3\", \"3\", \"2\", \"1\", \"6\", \"5\", \"7\"]) == \"9\"\nassert solution(\n  [\"1\", \"3\", \"1\", \"2\", \"3\", \"5\", \"4\", \"6\", \"7\", \"8\"]) == \"1\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == 0"
    },
    {
        "number": 4602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '4'\n"
    },
    {
        "number": 4602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"4\"\n\n>>> 3\n3\n>>> 3 1\n3 1 3\n>>> 5 3\n5 3 5\n>>> 1 5 3\n5 3\n>>> 0 5 3\n5 3\n>>> 5 1 3\n3 1\n>>> 0 1 3\n3 1\n>>> 0 5 3\n3 1\n>>> 5 1 3\n3 1\n>>> 1 5 3\n3 1\n>>> 2 5 3\n3 2\n>>> 2 1 3\n3 2\n>>> 2 0 3\n3 2\n>>> 1 2 3\n3 2\n>>> 1 1 3\n3 2\n>>> 1 5 3\n3 2\n>>> 2 0 3\n3 2\n>>> 2 1 3\n3 2\n>>> 2 5 3\n3 2\n>>> 2 1 3\n3 2\n>>> 2 2 3\n3 2\n>>> 1 2 3\n3 2\n>>> 1 1 3\n3 2\n>>> 1 5 3\n3 2\n>>> 1 0 3\n3 2\n>>> 1 5 3\n3 2\n>>> 3 2 3\n3 2\n>>> 3 2 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 3 2 3\n3 2\n>>> 3 2 3\n3 2\n>>> 3 2 3\n3 2\n>>> 3 2 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 3 2 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3 2\n>>> 4 0 3\n3 2\n>>> 3 2 3\n3"
    },
    {
        "number": 4603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\"), \"solution() should return '300' or '520'\"\nassert solution(\"15\"), \"solution() should return '200' or '300'\"\nassert solution(\"3\"), \"solution() should return '300' or '520'\"\nassert solution(\"5\"), \"solution() should return '300' or '520'\"\nassert solution(\"3\"), \"solution() should return '520' or '300'\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"600 300 220\") == \"520\"\nassert solution(\"600 300 220\") == \"520\"\nassert solution(\"600 300 300\") == \"600\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '520'\n'''"
    },
    {
        "number": 4603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"600\",\n    \"300\",\n    \"220\",\n    \"420\"\n) == \"520\"\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"A = 600, B = 300, C = 220, D = 420\")\nprint(\"Output :\")\nprint(\"320\")\nprint(\"Exception :\")\nprint(\"300 + 220 = 320\")\nprint(\"Expected:\")\nprint(\"320\")\n"
    },
    {
        "number": 4603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '530'\nassert solution(stdin) == '420'\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"700\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"600\") == \"520\"\nassert solution(\"300\") == \"600\"\nassert solution(\"220\") == \"600\"\nassert solution(\"420\") == \"600\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == '520'\n"
    },
    {
        "number": 4603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"520\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"520\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == str(1)\n"
    },
    {
        "number": 4604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"4\"\n\"\"\"\n\n\"\"\"\nConstraints:\n - 1\u2266N\u226610^5\n - 0\u2266A_i\u2266N-1\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 17\n\"\"\""
    },
    {
        "number": 4604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"9\""
    },
    {
        "number": 4604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\"\n\nimport math\n\nn = int(input())\n\na = list(map(int, input().split()))\nd = []\nfor i in range(n):\n    d.append(math.sqrt(a[i]))\n\nfor i in range(n):\n    j = a[i]\n    for j in range(i+1,n):\n        if d[j] > d[i]:\n            d[j] = d[i]\n\nprint(len(d))\nprint(' '.join(map(str,d)))\n"
    },
    {
        "number": 4604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 4 0 2\") == 4\nassert solution(\"2 4 4 0 2\") == 0\nassert solution(\"4 4 0 2\") == 0\nassert solution(\"5 4 4 0 2\") == 4\nassert solution(\"2 1 2\") == 0\n"
    },
    {
        "number": 4604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"15\"\nassert solution(\"1 2 3 4 5 2 6 7 8 9 10\") == \"9\"\nassert solution(\"1 2 4 3\") == \"0\"\nassert solution(\"1 2 4 3 4\") == \"1\"\nassert solution(\"1 2 4 4 5 6 7 8 9 10\") == \"5\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == str(5)\nprint(solution(inp))\n\"\"\"\n\n\nclass Solution:\n    def numberOfLines(self, width, height):\n        if width == 0 or height == 0:\n            return 0\n        return (height // width) * (width + 1)\n"
    },
    {
        "number": 4604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1,2,3,4,5,6\") == '4'\nassert solution(\"2,4,6,7,8,9,1\") == '0'\nassert solution(\"1,2,3,5,8,9,11,12,13,14\") == '0'"
    },
    {
        "number": 4604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"5 4 4 0 2\"\n) == 4\nassert solution(\n    \"5 4 4 0 2 3\"\n) == 0\n"
    },
    {
        "number": 4605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '84'\n"
    },
    {
        "number": 4605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5,2) == 84\n"
    },
    {
        "number": 4605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 84\n\"\"\"\nimport sys\nimport bisect\n"
    },
    {
        "number": 4605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, 10) == 85, \"Solution failed\""
    },
    {
        "number": 4605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 3\") == \"84\"\nassert solution(\"2 2 4\") == \"84\"\nassert solution(\"2 5 1\") == \"84\"\nassert solution(\"5 20 4\") == \"84\"\nassert solution(\"2 12 13\") == \"84\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == str(sum(map(int, str(inp).split())))\n"
    },
    {
        "number": 4605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"1 2 5\"\n) == \"84\"\n\nassert solution(\n    \"2 3 5\"\n) == \"84\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(st) == '84'\n\"\"\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"17 9 17 12 18 19\") == \"85\"\nassert solution(\"4 12 2 4 8 5 9 12 18 19\") == \"85\"\nassert solution(\"11 12 2 4 8 5 9 12 18 19\") == \"85\"\nassert solution(\"112 12 2 4 8 5 9 12 18 19\") == \"85\"\nassert solution(\"3 7 4 5 8 9 13 18 19\") == \"85\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('20 2 5') == 84"
    },
    {
        "number": 4606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'ABC100'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'ABC'\n"
    },
    {
        "number": 4606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == \"ABC\"\nassert solution(\"A\") == \"A\"\nassert solution(\"ABC1\") == \"ABC\"\nassert solution(\"ABC2\") == \"ABC\"\nassert solution(\"ABC3\") == \"ABC\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 'ABC'\n\n-----Algorithm-----"
    },
    {
        "number": 4606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'ABC100'"
    },
    {
        "number": 4606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5123\") == \"ABC\"\nassert solution(\"5123456\") == \"ABC\"\nassert solution(\"123456\") == \"ABC\"\nassert solution(\"123\") == \"ABC\"\nassert solution(\"123A\") == \"ABC\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"ABC100\"\n\n### Submission Detail\n"
    },
    {
        "number": 4606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"abc\") == \"ABC\", \"Your solution for the 5th round of ABC is not as expected.\"\nassert solution(\"abc\") == \"ABC\", \"Your solution for the 5th round of ABC is not as expected.\"\nassert solution(\"abc\") == \"ABC\", \"Your solution for the 5th round of ABC is not as expected.\"\nassert solution(\"abc\") == \"ABC\", \"Your solution for the 5th round of ABC is not as expected.\"\nassert solution(\"abc\") == \"ABC\", \"Your solution for the 5th round of ABC is not as expected.\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"ABC\", \"Incorrect solution\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution(\"ABC\")) == \"ABC\"\nassert solution(\"ABC5\") == \"ABC5\"\nassert solution(\"ABC123\") == \"ABC123\"\nassert solution(\"ABC1215\") == \"ABC1215\"\nassert solution(\"ABC1215abcdefghijklmnopqrstuvwxyz\") == \"ABC1215\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 5') == 5\n\n\nfor _ in range(int(input())):\n    s=input()\n    print(s.split(\" \")[0])"
    },
    {
        "number": 4607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '5'"
    },
    {
        "number": 4607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['a','a','b','a']) == '1-1'\nassert solution(['a','a','b','c','d','d','e','f','e','f','f','f','f']) == '1-3'\nassert solution(['a','a','b','a','b','c','d','e','e','f','f','f','f','f']) == '2-3'\nassert solution(['a','a','b','c','d','e','f','f','f','f','f','f','f','f','f']) == '1-5'"
    },
    {
        "number": 4607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5-5\") == 3\n"
    },
    {
        "number": 4607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"5\""
    },
    {
        "number": 4607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == 5\nassert solution(\"1\") == 1\nassert solution(\"5\") == 0\n"
    },
    {
        "number": 4607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"5 5 5 7 5 5 5 5 5 8 5 8 8 5 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8"
    },
    {
        "number": 4607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 5"
    },
    {
        "number": 4607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 5\n"
    },
    {
        "number": 4607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n\nfrom typing import List\nimport re"
    },
    {
        "number": 4608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    stdin = \"\"\"\n1 4\n1\n1\n\n2 4\n1 2\n1\n\n2\n2\n2\n\n3 4\n1 2\n3\n\n4\n1\n1\n\n2\n1\n2\n\n3\n2\n\n3\n\n1\n2\n\n2\n1\n\"\"\"\n) == 3\n\"\"\"\n2\n1\n1\n1\n1\n1\n\n1\n1\n2\n2\n2\n\n1\n1\n1\n\n2\n1\n2\n2\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"abcdefg\") == \"1\"\nassert solution(\"abcdefg\") == -1\n"
    },
    {
        "number": 4608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 4 3') == '2'\nassert solution('3 4 3') == '3'\nassert solution('3 5 3') == '3'\nassert solution('4 5 3') == '3'\n"
    },
    {
        "number": 4608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 0\n"
    },
    {
        "number": 4608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 164 165 166 167 168 169 170 171 171 172 173 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 191 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 219 220 221 223 224 225 226 227 228 229 229 230 231 231 232 233 234 235 236 237 237 238 239 240 241 242 243 244 245 246 246 247 248 249 251 252 253 253 254 255 256 257 258 259 261 262 263 263 265 266 267 268 268 269 290 291 292 294 295 296 297 298 299 299 300 301 301 302 303 303 304 305 306 308 309 310 311 311 312 313 314 315 316 317 318 319 320 321 321 322 323 323 324 325 326 327 327 328 329 330 330 331 331 332 332 332 333 333 333 334 334 335 336 337 337 338 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 4608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\") == 1\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3,1,2) == 1\n\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 4') == '0'\nassert solution('3 4 1') == '1'\nassert solution('3 4 2') == '2'\nassert solution('3 4 3') == '3'\nassert solution('3 4 4') == '2'\n"
    },
    {
        "number": 4608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == -1, \"solution() failed\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(test_case) == -1, \"not possible\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 1, \"solution() failed\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '1'\n\nThe input will be a string of N and A_1,...,A_N separated by a space.\nThe input will be given as a string of A_1,...,A_N where A_i is the number of times that A_i appears in the sheet at the end of the game.\n\nConstraints\n - 1\u2264N\u2264100000\n - 1\u2264A_1\u22641000000000(=10^9)\n - All inputs are integers.\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4609,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"The game is not correct\"\n---NOTES----\nWhen, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when, when"
    },
    {
        "number": 4609,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n\n'''\n\nimport math\n\nN, A_1, A_N = map(int, input().split())"
    },
    {
        "number": 4609,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(solution(\"3\")) == \"1\"\nassert solution(solution(\"5\")) == \"0\"\nassert solution(solution(\"3 4\")) == \"2\"\nassert solution(solution(\"5 2 3\")) == \"0\""
    },
    {
        "number": 4609,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Bonus-----\n - You are awarded $1 per line.\n - Your score is given to you on the next line.\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nN = int(sys.stdin.readline())\npaper = defaultdict(int)\n\nfor _ in range(N):\n    paper[int(sys.stdin.readline())] += 1\n\nresult = 0\n\nfor a in paper.values():\n    if a % 2 == 0:\n        continue\n    result += a\n\nprint(result)"
    },
    {
        "number": 4609,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"3 6 2 6 6\") == \"1\"\nassert solution(\n    \"2 2 6 6\") == \"1\"\nassert solution(\n    \"1 2 2 2\") == \"1\"\nassert solution(\n    \"2 1 1 2\") == \"2\"\nassert solution(\n    \"3 3 3 3\") == \"3\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"6\"\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1,1,1,1,1,1) == 1\nassert solution(2,2,2,2,2,2) == 2\nassert solution(3,3,3,3,3,3) == 3\nassert solution(4,4,4,4,4,4) == 4\nassert solution(5,5,5,5,5,5) == 5"
    },
    {
        "number": 4610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == '1'\nassert solution(inp) == '2'\nassert solution(inp) == '3'\nassert solution(inp) == '4'\nassert solution(inp) == '5'\n"
    },
    {
        "number": 4610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, 2) == 1\nassert solution(1, 1) == 2\nassert solution(5, 1) == 2\nassert solution(1, 2) == 2\nassert solution(5, 5) == 3\n"
    },
    {
        "number": 4610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 1\n"
    },
    {
        "number": 4610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 2') == '1'\nassert solution('4 3') == '1'\nassert solution('1 1 2 3 4') == '1'\nassert solution('1') == '1'\nassert solution('2 3 4 5') == '1'\n"
    },
    {
        "number": 4610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == str(1)\n"
    },
    {
        "number": 4610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, 5, 2) == 1\nassert solution(4, 4, 2) == 1\nassert solution(5, 2, 2) == 1\nassert solution(3, 2, 3) == 2\nassert solution(2, 2, 2) == 3"
    },
    {
        "number": 4611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 1 2') == 'Yes'\n\n\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10 5 3 3\") == \"Yes\"\nassert solution(\"10 5 3 4\") == \"No\"\nassert solution(\"5 3 3 1\") == \"Yes\"\nassert solution(\"4 3 4 2\") == \"Yes\"\nassert solution(\"4 3 4 1\") == \"No\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"Yes\"\nassert solution(\"5 3\") == \"Yes\"\nassert solution(\"4 1\") == \"No\"\nassert solution(\"3 6\") == \"No\"\nassert solution(\"2 4\") == \"No\""
    },
    {
        "number": 4611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 'Yes'\n\nprint(\"The solution for example 1 is:\")\nprint(solution(input()))"
    },
    {
        "number": 4611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\"\"2\n3 1 2\n6 1 1\n\n1 3 2\n3 4 2\n\n2 4 5\n3 2 5\"\"\") == \"No\"\nassert solution(\"\"\"2\n3 1 2\n6 1 1\n\n1 3 2\n3 4 2\n\n2 4 5\n3 2 5\"\"\") == \"Yes\"\nassert solution(\"\"\"3\n3 1 2\n6 1 1\n\n1 3 2\n3 4 2\n\n2 4 5\n3 2 5\"\"\") == \"No\"\nassert solution(\"\"\"1\n1 1 1\n\n1 1 1\n\n1 1 1\n\n1 1 1\"\"\") == \"Yes\"\nassert solution(\"\"\"4\n4 4 4\n\n4 4 4\n\n4 4 4\n\n4 4 4\n\n4 4 4\"\"\") == \"Yes\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\"2\", \"3\", \"1\", \"1\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"]\n) == \"Yes\"\nassert solution(\n    [\"2\", \"3\", \"1\", \"1\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"]\n) == \"No\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\nassert solution(input()) == \"No\"\n\nA tree with height 2 would be of depth 1, and with height 3 would be of depth 2, etc.\n\nInput:\nA tree with height 1\n\nOutput:\nYes\n\nExplanation:\nThe tree has height 1, and can be traversed as follows:\n(0,0), (0,1), (1,1), (1,2), (1,1), (1,0), then (1,1).\n\nInput:\nA tree with height 3\n\nOutput:\nNo\n\nExplanation:\nThe tree has height 3, and can be traversed as follows:\n(0,0), (0,1), (0,2), (0,1), (0,0), (0,0), (0,0), (0,0).\n\nInput:\nA tree with height 4\n\nOutput:\nNo\n\nExplanation:\nThe tree has height 4, and can be traversed as follows:\n(0,0), (0,1), (0,2), (0,1), (0,0), (0,0), (0,0), (0,0).\n\nInput:\nA tree with height 2\n\nOutput:\nYes\n\nExplanation:\nThe tree has height 2, and can be traversed as follows:\n(0,0), (0,1), (0,2), (0,1), (0,0), (0,0), (0,0), (0,0).\n\nA tree with height 1 cannot be traversed because he cannot leave at the end of the tree.\n\nInput:\nA tree with height 1\n\nOutput:\nNo\n\nExplanation:\nThe tree has height 1, and can be traversed as follows:\n(0,0), (0,1), (0,2), (0,1), (0,0), (0,0), (0,0), (0,0).\n\"\"\"\nfrom collections import deque\nimport sys"
    },
    {
        "number": 4611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'"
    },
    {
        "number": 4612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n-----Bonus-----\n"
    },
    {
        "number": 4612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\\\"1 2 \\\") == 2\\n assert solution(\\\"2 3 \\\") == 2\\n assert solution(\\\"3 4 \\\") == 3\\n assert solution(\\\"4 5 \\\") == 4\\n assert solution(\\\"4 6 \\\") == 4\\n assert solution(\\\"4 7 \\\") == 4\\n assert solution(\\\"4 8 \\\") == 4\\n assert solution(\\\"5 9 \\\") == 5\\n assert solution(\\\"6 10 \\\") == 6\\n assert solution(\\\"7 11 \\\") == 7\\n assert solution(\\\"8 12 \\\") == 8\\n assert solution(\\\"9 13 \\\") == 9\\n assert solution(\\\"10 14 \\\") == 10\\n assert solution(\\\"11 15 \\\") == 11\\n assert solution(\\\"12 16 \\\") == 12\\n assert solution(\\\"13 17 \\\") == 13\\n assert solution(\\\"14 18 \\\") == 14\\n assert solution(\\\"15 19 \\\") == 15\\n assert solution(\\\"16 20 \\\") == 16\\n assert solution(\\\"17 21 \\\") == 17\\n assert solution(\\\"18 22 \\\") == 18\\n assert solution(\\\"19 23 \\\") == 19\\n assert solution(\\\"20 24 \\\") == 20\\n assert solution(\\\"21 25 \\\") == 21\\n assert solution(\\\"22 26 \\\") == 22\\n assert solution(\\\"23 27 \\\") == 23\\n assert solution(\\\"24 28 \\\") == 24\\n assert solution(\\\"25 29 \\\") == 25\\n assert solution(\\\"26 30 \\\") == 26\\n assert solution(\\\"27 31 \\\") == 27\\n assert solution(\\\"28 32 \\\") == 28\\n assert solution(\\\"29 33 \\\") == 29\\n assert solution(\\\"30 34 \\\") == 30\\n assert solution(\\\"31 35 \\\") == 31\\n assert solution(\\\"32 36 \\\") == 32\\n assert solution(\\\"33 37 \\\") == 33\\n assert solution(\\\"34 38 \\\") == 34\\n assert solution(\\\"35 39 \\\") == 35\\n assert solution(\\\"36 40 \\\") == 36\\n assert solution(\\\"37 41 \\\") == 37\\n assert solution(\\\"38 42 \\\") == 38\\n assert solution(\\\"39 43 \\\") == 39\\n assert solution(\\\"40 44 \\\") == 40\\n assert solution(\\\"41 45 \\\") == 41\\n assert solution(\\\"42 46 \\\") == 42\\n assert solution(\\\"43 47 \\\") == 43\\n assert solution(\\\"44 48 \\\") == 44\\n assert solution(\\\"45 49 \\\") == 45\\n assert solution(\\\"46 50 \\\") == 46\\n assert solution(\\\"47 51 \\\") == 47\\n assert solution(\\\"48 52 \\\") == 48\\n assert solution(\\\"49 53 \\\") == 49\\n assert solution(\\\"50 54 \\\") == 50\\n assert solution(\\\"51 55 \\\") == 51\\n assert solution(\\\"52 56 \\\") == 52\\n assert solution(\\\"53 57 \\\") == 53\\n assert solution(\\\"54 58 \\\") == 54\\n assert solution(\\\"55 59 \\\") == 55\\n assert solution(\\\"56 60 \\\") == 56\\n assert solution(\\\"57 61 \\\") == 57\\n assert solution(\\\"58 62 \\\") == 58\\n assert solution(\\\"59 63 \\\") == 59\\n assert solution(\\\"60 64 \\\") == 60\\n assert solution(\\\"61 65 \\\") == 61\\n assert solution(\\\"62 66 \\\") == 62\\n assert solution(\\\"63 67 \\\") == 63\\n assert solution(\\\"64 68 \\\") == 64\\n assert solution(\\\"65 69 \\\") == 65\\n assert solution(\\\"66 70 \\\") == 66\\n assert solution(\\\"67 71 \\\") == 67\\n assert solution(\\\"68 72 \\\") == 68\\n assert solution(\\\"69 73 \\\") == 69\\n assert solution(\\\"70 74 \\\") == 70\\n assert solution(\\\"71 75 \\\") == 71\\n assert solution(\\\"72 76 \\\") == 72\\n assert solution(\\\"73 77 \\\") == 73\\n assert solution(\\\"74 78 \\\") == 74\\n assert solution(\\\"75 79 \\\") == 75\\n assert solution(\\\"76 80 \\\") == 76\\n assert solution(\\\"77 81 \\\") == 77\\n assert solution(\\\"78 82 \\\") == 78\\n assert solution(\\\"79 83 \\\") == 79\\n assert solution(\\\"80 84 \\\") == 80\\n assert solution(\\\"81 85 \\\") == 81\\n assert solution(\\\"82 86 \\\") == 82\\n assert solution(\\\"83 87 \\\") == 83\\n assert solution(\\\"84 88 \\\") == 84\\n assert solution(\\\"85 89 \\\") == 85\\n assert solution(\\\"86 90 \\\") == 86\\n assert solution(\\\"87 91 \\\") == 87\\n assert solution(\\\"88 92 \\\") == 88\\n assert solution(\\\"89 93 \\\") == 89\\n assert solution(\\\"90 94 \\\") == 90\\n assert solution(\\\"91 95 \\\") == 91\\n assert solution(\\\"92 96 \\\") == 92\\n assert solution(\\\"93 97 \\\") == 93\\n assert solution(\\\"94 98 \\\") == 94\\n assert solution(\\\"95 99 \\\") == 95\\n assert solution(\\\"96 100 \\\") == 96\\n assert solution(\\\"97 101 \\\") == 97\\n assert solution(\\\"98 102 \\\") == 98\\n assert solution(\\\"99 103 \\\") == 99\\n assert solution(\\\"100 104 \\\") == 100\\n assert solution(\\\"101 105 \\\") == 101\\n assert solution(\\\"102 106 \\\") == 102\\n assert solution(\\\"103 107 \\\") == 103\\n assert solution(\\\"104 108 \\\") == 104\\n assert solution(\\\"105 109 \\\") == 105\\n assert solution(\\\"106 110 \\\") == 106\\n assert solution(\\\"107 111 \\\") == 107\\n assert solution(\\\"108 112 \\\") == 108\\n assert solution(\\\"109 113 \\\") == 109\\n assert solution(\\\"110 114 \\\") == 110\\n assert solution(\\\"111 115 \\\") == 111\\n assert solution(\\\"112 116 \\\") == 112\\n assert solution(\\\"113 117 \\\") == 113\\n assert solution(\\\"114 118 \\\") == 114\\n assert solution(\\\"115 119 \\\") == 115\\n assert solution(\\\"116 120 \\\") == 116\\n assert solution(\\\"117 121 \\\") == 117\\n assert solution(\\\"118 122 \\\") == 118\\n assert solution(\\\"119 123 \\\") == 119\\n assert solution(\\\"120 124 \\\") == 120\\n assert solution(\\\"121 125 \\\") == 121\\n assert solution(\\\"122 126 \\\") == 122\\n assert solution(\\\"123 127 \\\") == 123\\n assert solution(\\\"124 128 \\\") == 124\\n assert solution(\\\"125 129 \\\") == 125\\n assert solution(\\\"126 130 \\\") == 126\\n assert solution(\\\"127 131 \\\") == 127\\n assert solution(\\\"128 132 \\\") == 128\\n assert solution(\\\"129 133 \\\") == 129\\n assert solution(\\\"130 134 \\\") == 130\\n assert solution(\\\"131 135 \\\") == 131\\n assert solution(\\\"132 136 \\\") == 132\\n assert solution(\\\"133 137 \\\") == 133\\n assert solution(\\\"134 138 \\\") == 134\\n assert solution(\\\"135 139 \\\") == 135\\n assert solution(\\\"136 140 \\\") == 136\\n assert solution(\\\"137 141 \\\") == 137\\n assert solution(\\\"138 142 \\\") == 138\\n assert solution(\\\"139 143 \\\") == 139\\n assert solution(\\\"140 144 \\\") == 140\\n assert solution(\\\"141 145 \\\") == 141\\n assert solution(\\\"142 146 \\\") == 142\\n assert solution(\\\"143 147 \\\") == 143\\n assert solution(\\\"144 148 \\\") == 144\\n assert solution(\\\"145 149 \\\") == 145\\n assert solution(\\\"146 150 \\\") == 146\\n assert solution(\\\"147 151 \\\") == 147\\n assert solution(\\\"148 152 \\\") == 148\\n assert solution(\\\"149 153 \\\") == 149\\n assert solution(\\\"150 154 \\\") == 150\\n assert solution(\\\"151 155 \\\") == 151\\n assert solution(\\\"152 156 \\\") == 152\\n assert solution(\\\"153 157 \\\") == 153\\n assert solution(\\\"154 158 \\\") =="
    },
    {
        "number": 4612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"4 4\n5 1\n5 3\n5 5\n5 7\n5 2\n5 4\n5 6\n5 8\n5 0\n\n1 3\n\n1 0\n\n2 4\n\n2 8\n\n3 0\n\n3 5\n\n3 5\n\n3 7\n\n3 2\n\n3 4\n\n3 6\n\n3 8\n\n3 9\n\n3 10\n\n4 7\n\n4 8\n\n4 9\n\n4 10\n\n4 11\n\n4 12\n\n4 13\n\n4 14\n\n4 15\n\n4 16\n\n4 17\n\n4 18\n\n4 19\n\n4 20\n\n4 21\n\n4 22\n\n4 23\n\n4 24\n\n4 25\n\n4 26\n\n4 27\n\n4 28\n\n4 29\n\n4 30\n\n4 31\n\n4 32\n\n4 33\n\n4 34\n\n4 35\n\n4 36\n\n4 37\n\n4 38\n\n4 39\n\n4 40\n\n4 41\n\n4 42\n\n4 43\n\n4 44\n\n4 45\n\n4 46\n\n4 47\n\n4 48\n\n4 49\n\n4 50\n\n4 51\n\n4 52\n\n4 53\n\n4 54\n\n4 55\n\n4 56\n\n4 57\n\n4 58\n\n4 59\n\n4 60\n\n4 61\n\n4 62\n\n4 63\n\n4 64\n\n4 65\n\n4 66\n\n4 67\n\n4 68\n\n4 69\n\n4 70\n\n4 71\n\n4 72\n\n4 73\n\n4 74\n\n4 75\n\n4 76\n\n4 77\n\n4 78\n\n4 79\n\n4 80\n\n4 81\n\n4 82\n\n4 83\n\n4 84\n\n4 85\n\n4 86\n\n4 87\n\n4 88\n\n4 89\n\n4 90\n\n4 91\n\n4 92\n\n4 93\n\n4 94\n\n4 95\n\n4 96\n\n4 97\n\n4 98\n\n4 99\n\n4 100\n\n4 101\n\n4 102\n\n4 103\n\n4 104\n\n4 105\n\n4 106\n\n4 107\n\n4 108\n\n4 109\n\n4 110\n\n4 111\n\n4 112\n\n4 113\n\n4 114\n\n4 115\n\n4 116\n\n4 117\n\n4 118\n\n4 119\n\n4 120\n\n4 121\n\n4 122\n\n4 123\n\n4 124\n\n4 125\n\n4 126\n\n4 127\n\n4 128\n\n4 129\n\n4 130\n\n4 131\n\n4 132\n\n4 133\n\n4 134\n\n4 135\n\n4 136\n\n4 137\n\n4 138\n\n4 139\n\n4 140\n\n4 141\n\n4 142\n\n4 143\n\n4 144\n\n4 145\n\n4 146\n\n4 147\n\n4 148\n\n4 149\n\n4 150\n\n4 151\n\n4 152\n\n4 153\n\n4 154\n\n4 155\n\n4 156\n\n4 157\n\n4 158\n\n4 159\n\n4 160\n\n4 161\n\n4 162\n\n4 163\n\n4 164\n\n4 165\n\n4 166\n\n4 167\n\n4 168\n\n4 169\n\n4 170\n\n4 171\n\n4 172\n\n4 173\n\n4 174\n\n4 175\n\n4 176\n\n4 177\n\n4 178\n\n4 179\n\n4 180\n\n4 181\n\n4 182\n\n4 183\n\n4 184\n\n4 185\n\n4 186\n\n4 187\n\n4 188\n\n4 189\n\n4 190\n\n4 191\n\n4 192\n\n4 193\n\n4 194\n\n4 195\n\n4 196\n\n4 197\n\n4 198\n\n4 199\n\n4 200\n\n4 201\n\n4 202\n\n4 203\n\n4 204\n\n4 205\n\n4 206\n\n4 207\n\n4 208\n\n4 209\n\n4 210\n\n4 211\n\n4 212\n\n4 213\n\n4 214\n\n4 215\n\n4 216\n\n4 217\n\n4 218\n\n4 219\n\n4 220\n\n4 221\n\n4 222\n\n4 223\n\n4 224\n\n4 225\n\n4 226\n\n4 227\n\n4 228\n\n4 229\n\n4 230\n\n4 231\n\n4 232\n\n4 233\n\n4 234\n\n4 235\n\n4 236\n\n4 237\n\n4 238\n\n4 239\n\n4 240\n\n4 241\n\n4 242\n\n4 243\n\n4 244\n\n4 245\n\n4 246\n\n4 247\n\n4 248\n\n4 249\n\n4 250\n\n4 251\n\n4 252\n\n4 253\n\n4 254\n\n4 255\n\n4 256\n\n4 257\n\n4 258\n\n4 259\n\n4 260\n\n4 261\n\n4 262\n\n4 263\n\n4 264\n\n4 265\n\n4 266\n\n4 267\n\n4 268\n\n4 269\n\n4 270\n\n4 271\n\n4 272\n\n4 273\n\n4 274\n\n4 275\n\n4 276\n\n4 277\n\n4 278\n\n4 279\n\n4 280\n\n4 281\n\n4 282\n\n4 283\n\n4 284\n\n4 285\n\n4 286\n\n4 287\n\n4 288\n\n4 289\n\n4 290\n\n4 291\n\n4 292\n\n4 293\n\n4 294\n\n4 295\n\n4 296\n\n4 297\n\n4 298\n\n4 299\n\n4 300\n\n4 301\n\n4 302\n\n4 303\n\n4 304\n\n4 305\n\n4 306\n\n4 307\n\n4 308\n\n4 309\n\n4 310\n\n4 311\n\n4 312\n\n4 313\n\n4 314\n\n4 315\n\n4 316\n\n4 317\n\n4 318\n\n4 319\n\n4 320\n\n4 321\n\n4 322\n\n4 323\n\n4 324\n\n4 325\n\n4 326\n\n4 327\n\n4 328\n\n4 329\n\n4 330\n\n4 331\n\n4 332\n\n4 333\n\n4 334\n\n4 335\n\n4 336\n\n4 337\n\n4 338\n\n4 339\n\n4 340\n\n4 341\n\n4 342\n\n4 343\n\n4 344\n\n4 345\n\n4 346\n\n4 347\n\n4 348\n\n4 349\n\n4 350\n\n4 351\n\n4 352\n\n4 353\n\n4 354\n\n4 355\n\n4 356\n\n4 357\n\n4 358\n\n4 359\n\n4 360\n\n4 361\n\n4 362\n\n4 363\n\n4 364\n\n4 365\n\n4 366\n\n4 367\n\n4 368\n\n4 369\n\n4 370\n\n4 371\n\n4 372\n\n4 373\n\n4 374\n\n4 375\n\n4 376\n\n4 377\n\n4 378\n\n4 379\n\n4 380\n\n4 381\n\n4 382\n\n4 383\n\n4 384\n\n4 385\n\n4 386\n\n4 387\n\n4 388\n\n4 389\n\n4 390\n\n4 391\n\n4 392\n\n4 393\n\n4 394\n\n4 395\n\n4 396\n\n4 397\n\n4 398\n\n4 399\n\n4 400\n\n4 401\n\n4 402\n\n4 403\n\n4 404\n\n4 405\n\n4 406\n\n4 407\n\n4 408\n\n4 409\n\n4 410\n\n4 411\n\n4 412\n\n4 413\n\n4 414\n\n4 415\n\n4 416\n\n4 417\n\n4 418\n\n4 419\n\n4 420\n\n4 421\n\n4 422\n\n4 423\n\n4 424\n\n4 425\n\n4 426\n\n4 427\n\n4 428\n\n4 429\n\n4 430\n\n4 431\n\n4 432\n\n4 433\n\n4 434\n\n4 435\n\n4 436\n\n4 437\n\n4 438\n\n4 439\n\n4 440\n\n4 441\n\n4 442\n\n4 443\n\n4 444\n\n4 445\n\n4 446\n\n4 447\n\n4 448\n\n4 449"
    },
    {
        "number": 4612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"a\", \"b\"]) == \"2\"\nassert solution([\"a\", \"a\"]) == \"1\"\nassert solution([\"1\", \"2\"]) == \"2\"\nassert solution([\"3\", \"4\"]) == \"4\"\nassert solution([\"3\", \"2\"]) == \"2\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 2\") == \"0 2\"\nassert solution(\"3 1\") == \"3 1\"\nassert solution(\"2 5\") == \"2 5\"\nassert solution(\"1 4\") == \"1 4\"\nassert solution(\"2 9\") == \"2 9\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == str(2)\n\n--------Type checking-----\nclass Solution:\n    def solution(self, a, b) -> str:\n        return str(round(a/b))\n\n    def solution(self, a, b) -> str:\n        return str(round((a+b)/2))\n\n    def solution(self, a, b) -> str:\n        return str(round((a*b)/2))"
    },
    {
        "number": 4612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '2'\nassert solution(inp) == '2'\nassert solution(inp) == '2'\nassert solution(inp) == '2'\nassert solution(inp) == '2'\n"
    },
    {
        "number": 4612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"2\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 4612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input: \"1 3\"\n) == \"2\"\nassert solution(\n    input: \"1 2\"\n) == \"1\"\nassert solution(\n    input: \"1 3 2\"\n) == \"3\"\nassert solution(\n    input: \"1 3 4 5\"\n) == \"9\"\nassert solution(\n    input: \"2 2\"\n) == \"3\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('7 7') == 7\nassert solution('1 3') == 3\nassert solution('2 7') == 7\nassert solution('3 4') == 4\nassert solution('4 5') == 4\n"
    },
    {
        "number": 4613,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"4\""
    },
    {
        "number": 4613,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 5 5 6 1 6 2 3 4\") == 4\nassert solution(\"4 2 2 1\") == 0\nassert solution(\"4 3 4 2\") == 0\nassert solution(\"6 4 5 2 3\") == 2\nassert solution(\"4 5 5 3 4 3\") == 3\n"
    },
    {
        "number": 4613,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == str(4)\n"
    },
    {
        "number": 4613,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"8 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n\"\"\") == \"2\"\nassert solution(\"\"\"4 4\n3 2\n2 4\n1 3\n4 5\n6 7\n\"\"\") == \"1\"\nassert solution(\"\"\"7 2\n1 3\n2 4\n3 4\n4 5\n5 6\n6 7\n\"\"\") == \"4\"\nassert solution(\"\"\"2 3\n1 3\n1 4\n1 5\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6\n\"\"\") == \"3\"\nassert solution(\"\"\"2 4\n1 3\n1 5\n2 4\n2 6\n3 5\n3 7\n4 6\n4 7\n5 6\n5 7\n6 7\n\"\"\") == \"5\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"The input is invalid.\"\n\"\"\"\n\nclass Graph():\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = [[0 for column in range(vertices)] for row in range(vertices)]\n    def addEdge(self, u, v):\n        self.graph[u][v] = 1\n    def removeEdge(self, u, v):\n        self.graph[u][v] = 0\n    def show(self):\n        for i in range(self.V):\n            for j in range(self.V):\n                print(self.graph[i][j], end=\" \")\n            print()\n    def findShortestPath(self, s, d):\n        if d == 0:\n            return [[s]]\n        else:\n            path = [[s]]\n            visited = [[0 for column in range(self.V)] for row in range(self.V)]\n            for c in range(self.V):\n                visited[s][c] = 1\n            \n            while(len(path) > 0):\n                u = path[0][-1]\n                path.pop(0)\n                for i in range(self.V):\n                    if visited[u][i] == 0 and self.graph[u][i]!= 0:\n                        if d == 0:\n                            path.append([i])\n                        else:\n                            path.append([i] + self.findShortestPath(i, d - 1))\n                    visited[u][i] = 1\n            return path"
    },
    {
        "number": 4614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(INPUT) == 7\nassert solution(OUT) == \"7\""
    },
    {
        "number": 4614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 5 5\") == \"7\"\nassert solution(\"6 3 8\") == \"8\"\nassert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"1 1 1 1\") == \"3\"\nassert solution(\"1 2 2\") == \"2\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(st) == 7\nassert solution(st) == 7\nassert solution(st) == 7\nassert solution(st) == 7\n"
    },
    {
        "number": 4614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(test_cases[0]) == '7' or solution(test_cases[1]) == '7'\nassert solution(test_cases[2]) == '7' or solution(test_cases[3]) == '7'\n\n-----Time Complexity-----\nIn this problem, we use O(N) to store the solutions. \n\nWe will use O(N) space as the queue to store the solutions.\nWe will use O(N) time complexity for the solution.\n\nFor explanation, please refer to the problem description.\n"
    },
    {
        "number": 4614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(test_input) == '7'\n\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 7 5') == 7\nassert solution('5 7 6') == 7\nassert solution('5 7 7') == 7\nassert solution('5 7 9') == 7\nassert solution('5 7 8') == 7\n"
    },
    {
        "number": 4614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5,7,5,7) == 7\nassert solution(5,7,5,8) == 8\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == 5, \"Incorrect output\"\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 7 5\") == \"7\"\nassert solution(\"5 7 5 5\") == \"7\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"4 5\") == \"5\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"7\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 110\n\"\"\"\nimport math\n"
    },
    {
        "number": 4615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1010'\n\n\n-----Sample Output-----\nTest case 1:\nInput:\n4 10 3 10\n\nOutput:\n5\n\nTest case 2:\nInput:\n1 1 1 1\n\nOutput:\n1\n\nTest case 3:\nInput:\n1 100 1 1\n\nOutput:\n4\n\nTest case 4:\nInput:\n5 100 1 1\n\nOutput:\n4\n\nTest case 5:\nInput:\n3 1 3 1\n\nOutput:\n1\n\n-----Sample Input-----\nTest case 1:\nInput:\n2 10 3 10\n\nOutput:\n0\n\nTest case 2:\nInput:\n1 0 0 0\n\nOutput:\n0\n\nTest case 3:\nInput:\n2 0 0 0\n\nOutput:\n1\n\nTest case 4:\nInput:\n1 5 1 1\n\nOutput:\n1\n\nTest case 5:\nInput:\n1 1 1 1\n\nOutput:\n1\n'''\nimport sys\nfrom heapq import heappush, heappop"
    },
    {
        "number": 4615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"110\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"1\"\n\n-----Sample Input-----\n2 2 10 20 15 200\n\n-----Sample Output-----\n150 10\n\nIn this environment, 15 grams of sugar can dissolve into 100 grams of water, and the beaker can contain at most 200 grams of substances.\nWe can make 150 grams of sugar water by performing Operation 2 once and Operation 3 three times.\nWe cannot make 150 grams of sugar water by performing Operation 1 three times.\nThe beaker can contain at most 200 grams of substance.\nSo, if we perform Operation 1 three times, the beaker will not be dissolved in.\nFor example, the following sequences of operations are infeasible:\n - If we perform Operation 2 once and Operation 3 three times, the mass of substance in the beaker will exceed 200 grams.\n - If we perform Operation 1 three times, the mass of substance in the beaker will exceed 100 grams.\n"
    },
    {
        "number": 4615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 110\n\n-----Sample Output-----\nSample Input:\n1 2 10 20 15 200\nSample Output:\n110 10\n\nWe can make 110 grams of sugar water by performing Operation 1 once and Operation 3 two times.\nWe can make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 three times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe can make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams of sugar water by performing Operation 2 once and Operation 3 two times.\nWe cannot make 110 grams of sugar water by performing Operation 1 once and Operation 4 two times.\nWe cannot make 110 grams"
    },
    {
        "number": 4615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"110\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"110\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"110\"\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '110'\nassert solution(input()) == '20'\nassert solution(input()) == '10'\nassert solution(input()) == '20'\nassert solution(input()) == '5'\n"
    },
    {
        "number": 4615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin=\"1 2 10 20 15 200\") == \"110\"\nassert solution(\n    stdin=\"1 2 10 20 15 200\") == \"112\"\nassert solution(\n    stdin=\"1 2 10 20 15 200\") == \"112\"\nassert solution(\n    stdin=\"1 2 10 20 15 200\") == \"112\"\nassert solution(\n    stdin=\"1 2 10 20 15 200\") == \"112\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"110\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"i18n\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('ic') == 'i18n'\n"
    },
    {
        "number": 4616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"i18n\"\nassert solution(input().lower()) == \"i18n\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"i18n\") == \"i18n\"\nassert solution(\"aia\") == \"i18n\"\nassert solution(\"a\") == \"i18n\"\nassert solution(\"a11\") == \"i18n\"\nassert solution(\"a3\") == \"i18n\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"internationalization\"), \"The input string is not valid\""
    },
    {
        "number": 4616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n\"internationalization\") == \"i18n\"\nassert solution(\"havamaram\") == \"havam\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert solution(\"abab\") == \"ab\"\nassert solution(\"banana\") == \"bana\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\nassert solution(\"hello\") == \"hl\"\nassert solution(\"ma\") == \"ml\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('internationalization') == 'i18n'\nassert solution('abbreviation') == 'abbreviation'\nassert solution('abbreviation') == 'abc'\nassert solution('abbreviation') == 'abc'\nassert solution('abbreviation') == 'abc'\n"
    },
    {
        "number": 4616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('internationalization') == 'i18n'\nassert solution('iii') == 'i'\nassert solution('iiiiiii') == 'i'\nassert solution('iiii') == 'i'\nassert solution('iiiiiiii') == 'iii'\n"
    },
    {
        "number": 4616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 'i18n'\n"
    },
    {
        "number": 4617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'NO'"
    },
    {
        "number": 4617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"YES\"\nassert solution(input) == \"NO\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n\"\"\"\n\nfrom collections import deque\nfrom copy import deepcopy"
    },
    {
        "number": 4617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"C_{11}C_{12}C_{13}\"\n    ) == \"YES\"\nassert solution(\n    \"C_{21}C_{22}C_{23}\"\n    ) == \"NO\"\nassert solution(\n    \"pot\"\n    ) == \"NO\"\nassert solution(\n    \"pot\"\n    ) == \"YES\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"top\"]) == \"NO\"\nassert solution([\"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\"]) == \"YES\"\nassert solution([\"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\"]) == \"YES\"\nassert solution([\"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\"]) == \"YES\"\nassert solution([\"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\", \"top\"]) == \"YES\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"C\", \"C\") == \"YES\"\nassert solution(\"C\", \"B\") == \"NO\""
    },
    {
        "number": 4618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"abab\", \"ababab\", \"aba\"]) == \"b\"\nassert solution([\"abc\", \"bab\"]) == \"b\"\nassert solution([\"a\", \"b\", \"bab\"]) == \"b\"\nassert solution([\"abc\", \"abab\", \"abaa\", \"aba\", \"bab\"]) == \"b\"\nassert solution([\"a\", \"a\", \"a\", \"b\", \"b\"]) == \"b\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('ba') == 'ba'\nassert solution('ab') == 'ab'\nassert solution('abab') == 'ab'\nassert solution('abc') == 'c'\nassert solution('abcabab') == 'c'\n"
    },
    {
        "number": 4618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"ba\"\nassert solution(\"abab\") == \"ab\"\nassert solution(\"abababab\") == \"abab\"\nassert solution(\"abcabc\") == \"abc\"\nassert solution(\"abac\") == \"ab\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\u2018abcabcabcabcabcabcabcabcabcabc\u2019) == \u2018abcabc\u2019\nassert solution(\u2018abcabcabcabcabcabcabcabcabcabcababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 4618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"aba\"\n) == \"ba\"\nassert solution(\n    \"aab\"\n) == \"a\"\nassert solution(\n    \"aaab\"\n) == \"ab\"\nassert solution(\n    \"aabb\"\n) == \"a\"\nassert solution(\n    \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"ababcd\", \"cdcde\", \"afgfa\", \"bbaa\", \"aaaaa\"]) == \"a\"\nassert solution([\"bbb\", \"cdd\", \"abaa\", \"aab\", \"aaab\"]) == \"b\"\nassert solution([\"abaa\", \"aab\", \"aaab\", \"aab\", \"aaab\"]) == \"a\"\nassert solution([\"aab\", \"abab\"]) == \"abab\"\nassert solution([\"cbb\"]) == \"cbb\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"b\"\n\"\"\"\nfrom math import factorial as fact\n"
    },
    {
        "number": 4618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"ba\"\nassert solution(\"abab\") == \"bba\"\nassert solution(\"abcdef\") == \"abcdef\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcde\") == \"cdee\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(f) == \"b\"\n\n2\n2\nab\nba\nabab\nababab\nabababab\n\n3\n2\nabab\nba\nababab\nabababab\nababababab\nabababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 4618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"ba\"\nassert solution(\"abababababababab\") == \"bab\"\nassert solution(\"abcabcabcabcabcabcabcabcabcabcab\") == \"abc\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"9\"\n\n\"\"\"\nimport sys\nimport numpy as np"
    },
    {
        "number": 4619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\", \"4\", \"2\", \"1\", \"3\", \"4\", \"5\", \"6\"]) == \"9\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 4 2\\n2 1 1\\n3 3 4\\n4 1 4\\n5 4 4') == '9'\nassert solution('5 4 5\\n5 4 5\\n5 5 5\\n5 4 4\\n5 4 4\\n5 5 5\\n') == '9'\nassert solution('4 4 4\\n3 3 3\\n5 5 5\\n5 5 5\\n') == '9'\nassert solution('1 1\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n') == '9'\n"
    },
    {
        "number": 4619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"9\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 4 2\") == \"9\"\nassert solution(\"2 2 1\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 3\") == \"1\"\nassert solution(\"1 1 5\") == \"1\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(f) == \"9\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 4 2\") == \"9\"\nassert solution(\"2 1 1\") == \"9\"\nassert solution(\"3 3 4\") == \"9\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['5 4 2', '2 1 1', '3 3 4', '1 1 1', '3 3 4']) == '9'\nassert solution(['2 1 1', '2 2 2', '2 2 2', '2 3 3']) == '10'\nassert solution(['2 3 3', '2 3 3', '2 3 3', '2 4 4', '2 4 4']) == '10'\nassert solution(['2 2 2', '2 2 2', '2 2 2', '2 2 2']) == '10'\nassert solution(['2 1 1', '2 1 1', '2 1 1', '2 1 1']) == '10'\n"
    },
    {
        "number": 4619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 4 2\") == \"9\"\nassert solution(\"2 1 1\") == \"9\"\nassert solution(\"3 3 4\") == \"9\""
    },
    {
        "number": 4619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 4 2\") == \"9\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 5 1\") == \"0\"\nassert solution(\"5 1 10\") == \"0\"\nassert solution(\"6 5 1\") == \"0\"\nassert solution(\"6 5 1\") == \"0\"\nassert solution(\"7 5 1\") == \"0\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"4\",\"8\",\"10\",\"12\"]) == \"0 0 0 0 0\"\nassert solution([\"3\",\"5\",\"1\"]) == \"3 1 0 0\"\nassert solution([\"3\",\"5\",\"1\",\"2\"]) == \"3 1 1 0\"\nassert solution([\"3\",\"5\",\"1\",\"2\",\"3\",\"1\",\"2\",\"4\",\"3\",\"5\",\"1\",\"2\"]) == \"3 1 0 0\"\nassert solution([\"3\",\"5\",\"1\",\"2\",\"3\",\"1\",\"2\",\"4\",\"3\",\"5\",\"1\",\"2\"]) == \"3 1 1 0\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '6'\nassert solution(input()) == '5'\nassert solution(input()) == '0'\nassert solution(input()) == '10'\n"
    },
    {
        "number": 4620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\"\nimport unittest\nfrom typing import List, Dict\n\nfrom libs.timetable_model import Time\n"
    },
    {
        "number": 4620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 10 1\") == \"12\"\nassert solution(\"1 5 1\") == \"11\"\nassert solution(\"1 10 0\") == \"0\"\nassert solution(\"1 10 10\") == \"10\"\nassert solution(\"1 2 1\") == \"1\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 5 1 1 10 1 10 1 11 10 1 10 1 10 1\") == \"1\"\nassert solution(\n    \"3 6 5 1 1 10 1 10 1 11 10 1 10 1 10 1\") == \"1\"\nassert solution(\n    \"3 6 5 1 1 10 1 10 1 11 10 1 10 1 10 1\") == \"1\"\nassert solution(\n    \"3 6 5 1 1 10 1 10 1 11 10 1 10 1 10 1\") == \"1\"\nassert solution(\n    \"3 6 5 1 1 10 1 10 1 11 10 1 10 1 10 1\") == \"1\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 5 1\") == \"8\"\nassert solution(\"6 5 1\") == \"8\"\nassert solution(\"2 5 1\") == \"8\"\nassert solution(\"3 5 1\") == \"8\"\nassert solution(\"2 3 1\") == \"8\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '12'\nassert solution(input()) == '11'\nassert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '5'\n"
    },
    {
        "number": 4620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 1 1 1\") == \"1 5 1 1 1\"\nassert solution(\"3 5 2 1\") == \"3 5 2 1\"\nassert solution(\"6 5 1 1\") == \"6 5 1 1\"\nassert solution(\"6 5 1 2\") == \"6 5 1 2\"\nassert solution(\"6 5 2 1\") == \"6 5 2 1\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 5 1 0 0 0 0 0 0 1 10 0 0 0 0 0 0 0 1 10 0 1\") == \"12\"\nassert solution(\"5 5 1 0 0 0 0 0 0 1 10 0 0 0 0 0 0 0 0 1 10 0 1\") == \"11\"\nassert solution(\"5 5 1 0 0 0 0 0 0 1 10 0 0 0 0 0 0 0 0 0 1 10 0 1\") == \"0\"\nassert solution(\"5 5 1 0 0 0 0 0 0 1 10 0 0 0 0 0 0 0 0 0 0 1 10 0 1\") == \"0\"\nassert solution(\"5 5 1 0 0 0 0 0 0 1 10 0 0 0 0 0 0 0 0 0 0 1 10 0 1\") == \"0\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1. 1. 1\") == \"1. 1. 1\"\nassert solution(\"1.. 1. 1\") == \". 1. 1. 1\"\nassert solution(\"1. 1 1 1\") == \"1. 1 1 1\"\nassert solution(\"1. 1 1. 1\") == \". 1 1 1 1\"\nassert solution(\"1... 1. 1\") == \"1... 1. 1\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"*.\\n*.\\n*.\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"2 2\"\n) == \"*...\"\nassert solution(\n    \"2 2 2\"\n) == \"*....\"\nassert solution(\n    \"2 2 2 2\"\n) == \"*....\"\nassert solution(\n    \"2 2 2 3\"\n) == \"*....\"\nassert solution(\n    \"2 2 2 3 4\"\n) == \"*....\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2 2\"\n    ) == \".###..#######..##.#####...#######..##.#####...\"\nassert solution(\n    \"2 3\"\n    ) == \".##.###.###.##.##.##.###.###.###.##.###.###.###.###.###.#####.\"\nassert solution(\n    \"3 2\"\n    ) == \".##.##.##.##.##.##.##.###.##.###.##.###.##.###.##.##.#####.\"\nassert solution(\n    \"3 3\"\n    ) == \".##.###.###.###.###.###.###.###.###.#####...\"\nassert solution(\n    \"4 1\"\n    ) == \"#######....#.###.###.#######....#\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('.') == '..'\nassert solution('*') == '*'\nassert solution('C') == '*.C'\nassert solution('C.C') == '.C*.C'\nassert solution('C.C.C') == '*.C*.C.C'\n"
    },
    {
        "number": 4621,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '..\\n.\\n.\\n..\\n'"
    },
    {
        "number": 4621,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '*\\n.\\n.\\n.'\n"
    },
    {
        "number": 4621,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"5 5.0 4.0 3.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0\"\n    ) == \".0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0"
    },
    {
        "number": 4621,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"./*.\") == \".----.---.----.---.----.---.----.----.---.----.---.----.\"\nassert solution(\"****\") == \"*****\"\nassert solution(\"***\") == \"****\"\nassert solution(\"*\") == \"*\"\nassert solution(\"**\") == \"**\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"1 2.. 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 4622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n[\n    \"2 6 1 4 5\",\n    \"2 5 4 1 6\",\n    \"2 2 6 1 5\",\n    \"2 6 3 4 5\",\n    \"2 2 1 1 5\",\n    \"2 2 4 4 5\",\n    \"2 2 4 5 6\",\n    \"2 2 2 2 2\",\n    \"2 2 2 1 1\",\n    \"2 2 1 2 1\",\n    \"2 2 4 1 4\",\n    \"2 3 4 4 4\",\n    \"2 2 1 2 5\",\n    \"2 3 5 4 6\",\n    \"2 1 2 3 2\",\n    \"2 2 2 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 2\",\n    \"2 2 2 1 1\",\n    \"2 2 1 2 2\",\n    \"2 2 2 2 2\",\n    \"2 2 2 2 1\",\n    \"2 2 2 1 2\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 2\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 2\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 2\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 2\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 2\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 2\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 2\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 2\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 2\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 2\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2 2 1 2 1\",\n    \"2"
    },
    {
        "number": 4622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == \"YES\"\nassert solution(2) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 2 1 4 5') == 'YES'\nassert solution('2 6 1 4 5') == 'NO'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 'YES'\n"
    },
    {
        "number": 4622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"NO\""
    },
    {
        "number": 4622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == \"YES\"\nassert solution(6) == \"NO\"\nassert solution(7) == \"NO\"\nassert solution(8) == \"NO\"\nassert solution(9) == \"NO\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"YES\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"The input string is not valid\"\n'''"
    },
    {
        "number": 4623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 5 1 2 4 5\") == \"1\"\nassert solution(\"5 6 6 6 6 6 8 8\") == \"4\"\nassert solution(\"5 2 3 3 3\") == \"3\"\nassert solution(\"5 3 3 3\") == \"3\"\nassert solution(\"5 4\") == \"4\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 2 1 3 4 5 6 8\") == \"2\"\nassert solution(\"5 2 2 1 2 1 1 2\") == \"3\"\nassert solution(\"5 2 2 1 2 1 1 2\") == \"3\"\nassert solution(\"5 2 2 1 2 1 1 2\") == \"3\"\nassert solution(\"5 2 2 1 2 1 1 2\") == \"3\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 1 1 1\") == \"2\"\nassert solution(\"2 1 3 4 2\") == \"3\"\nassert solution(\"3 1 3 4\") == \"3\"\nassert solution(\"4 1 2 3\") == \"4\"\nassert solution(\"5 1\") == \"4\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(test_cases) == answer\n\nYour runtime beats 95.58 % of python3 submissions\n\nRuntime of the program: 68.08\n\n'''\n\nimport sys\n\nclass Solution:\n    def maxWeightComp(self, w: List[int]) -> int:\n        def qsort(arr):\n            n = len(arr)\n            if n <= 1:\n                return arr\n\n            mid = n // 2\n            left = qsort(arr[:mid])\n            right = qsort(arr[mid:])\n\n            i = j = 0\n\n            while i < len(left) and j < len(right):\n                if left[i][0] <= right[j][0]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    i += 1\n                    j += 1\n                else:\n                    i += 1\n\n            while i < len(left):\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n                j += 1\n\n            while j < len(right):\n                arr[i], arr[j] = arr[j], arr[i]\n                j += 1\n                i += 1\n\n        return max(qsort(w))\n\n    def maxWeightComp(self, w: List[int]) -> int:\n        n = len(w)\n        d = defaultdict(int)\n        for i in range(n):\n            d[w[i]] += 1\n        if n in d:\n            return n * (n - 1) // 2\n        else:\n            return n"
    },
    {
        "number": 4623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '4'\nassert solution(stdin) == '6'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"8 6 6 6 6 6 8 8\") == \"4\"\nassert solution(\"1 1 3 4 2 2\") == \"3\"\nassert solution(\"1 3 3\") == \"3\"\nassert solution(\"1 1 3 4 2 2\") == \"3\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5, 5) == 2\nassert solution(5, 8) == 4\nassert solution(5, 1) == 1\nassert solution(5, 6) == 1\nassert solution(5, 2) == 2\n"
    },
    {
        "number": 4623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n\n\n\n-----Constraints-----\n\n1 <= t <= 10^5\n1 <= n <= 10^5\n1 <= w_1, w_2, \\dots, w_n <= n\n\n\n-----Time Limit (Cached)-----\n\nWe are given n is the number of test cases.\n\nFor all test cases, the maximum possible weight is n.\n\nTime Limit: 1 sec\n\nInput:\n1\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n\nOutput:\n2\n3\n4\n1\n2\n\n\n-----Solution-----\n"
    },
    {
        "number": 4623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, [2, 3, 4, 5]) == \"3\"\nassert solution(2, [6, 6, 6, 6, 8, 8]) == \"4\"\nassert solution(3, [8, 8, 8, 8, 8, 8, 8]) == \"1\"\n\n-----Constraints-----\n\n1 <= t <= 1000\n0 <= n <= 50\n\nRuntime: 40 ms\nMemory Usage: 20.5 MB\n\n\n-----\u63d0\u4ea4\u6b21\u6570-----"
    },
    {
        "number": 4624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"2 3\"\n) == \"3\"\nassert solution(\n    \"7 2\"\n) == \"3\"\nassert solution(\n    \"1 5\"\n) == \"3\"\nassert solution(\n    \"22 5\"\n) == \"3\"\nassert solution(\n    \"987 13\"\n) == \"3\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\n\nassert solution(stdin) == '5'\n\nassert solution(stdin) == '17'\n\nassert solution(stdin) == '28'\n\n-----Written By Othele-----\nPython 3.9.5\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 7 1\") == \"3\"\nassert solution(\"9 12 3\") == \"3\"\nassert solution(\"22 5\") == \"1\"\nassert solution(\"987 13\") == \"2\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '3'"
    },
    {
        "number": 4624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3 4 1 2 1') == '3'\nassert solution('1 4 2 1 2') == '1'\nassert solution('1 2 1 2 1') == '2'\nassert solution('1 2 3 1 2') == '1'\nassert solution('1 2 3 4 1') == '1'\n"
    },
    {
        "number": 4624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 1 3 4 3 5') == '3'\nassert solution('3 1 2 4 1 6') == '6'\nassert solution('1 2 2 3 4 4 5 6 7') == '3'\nassert solution('4 3 4 2 4 3') == '3'\nassert solution('1 1 1 2 2 2 3 3 3 4') == '3'\n"
    },
    {
        "number": 4624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"4\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(stdin) == \"0 0 9 4 5 3\"\nassert solution(stdin) == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"abc\") == \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('codeforces') == 26, 'incorrect output'\n\nassert solution('codeforc') == 4, 'incorrect output'\n\nassert solution('cod') == 2, 'incorrect output'\n\nassert solution('codeforce') == 2, 'incorrect output'\n\nassert solution('codeforc') == 2, 'incorrect output'"
    },
    {
        "number": 4625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"abca\"), \"Invalid syntax: $s$ contains 0, 0, 0, 0, 0.\"\nassert solution(\"codeforces\"), \"Invalid syntax: $s$ contains 0, 0, 0, 0, 0.\"\nassert solution(\"codeforces\"), \"Invalid syntax: $s$ contains 0, 0, 0, 0, 0.\"\nassert solution(\"codeforces\"), \"Invalid syntax: $s$ contains 0, 0, 0, 0, 0.\"\nassert solution(\"codeforces\"), \"Invalid syntax: $s$ contains 0, 0, 0, 0, 0.\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"abca\") == \"4 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"4 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"abca\") == \"10 5 1 2 3 5 10 5 9 4\"\nassert solution(\"codeforces\") == \"2 8 3 2 9\"\nassert solution(\"codeforc\") == \"10 5 3 2 4 9\"\nassert solution(\"cod\") == \"10 5 3 2 4 9\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0\") == 36\nassert solution(\"1\") == 0\nassert solution(\"2\") == 0\nassert solution(\"3\") == 0\nassert solution(\"4\") == 0\n"
    },
    {
        "number": 4626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '36'\n\"\"\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"99999\"\nassert solution(input()) == \"999999\"\nassert solution(input()) == \"99999999\""
    },
    {
        "number": 4626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"36\"\nassert solution(stdin) == \"1999999994\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"200\"\nassert solution(stdin) == \"36\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 4626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 4626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 37\n"
    },
    {
        "number": 4626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    inp := input()\n) == \"36\"\n\nassert solution(\n    inp := input()\n) == \"0\"\n\nassert solution(\n    inp := input()\n) == \"0\"\n\nassert solution(\n    inp := input()\n) == \"0\"\n\nassert solution(\n    inp := input()\n) == \"0\""
    },
    {
        "number": 4627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\", \"No\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"YES\"\nassert solution(\"1 2 3 4 6 7 8 9 10\") == \"NO\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"YES\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"3\", \"3\", \"3\", \"3\", \"3\"]) == \"YES\"\nassert solution([\"3\", \"3\", \"3\", \"3\", \"3\"]) == \"NO\"\nassert solution([\"1\", \"1\", \"2\", \"3\", \"3\", \"4\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"NO\"\nassert solution([\"1\", \"2\", \"1\", \"2\", \"1\", \"2\", \"1\", \"2\", \"1\", \"2\", \"1\", \"2\"]) == \"YES\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 4627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 4628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 5 2\") == \"22\"\nassert solution(\"5 4 3\") == \"13\"\nassert solution(\"1 3 3\") == \"13\"\nassert solution(\"2 2 3\") == \"22\"\nassert solution(\"1 4 5\") == \"22\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '13'\n\"\"\"\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"22\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 3 5\") == \"13\"\nassert solution(\"2 4 2\") == \"22\"\nassert solution(\"2 3 4\") == \"22\"\nassert solution(\"3 5 7\") == \"21\"\nassert solution(\"4 4 6\") == \"21\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"22\"\n\n-----Constraints-----\n\n1 <= n <= 500\n1 <= m <= 1000\n1 <= k <= 5000\n0 <= x_i, y_i, w_i <= n\n\nTime Limit: 1 second\nMemory Limit: 128 MB\n\n------IMP-----\n\n'''"
    },
    {
        "number": 4628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('10 10 10') == '22'\nassert solution('10 10 10 1') == '2'\nassert solution('10 10 10 1 1') == '1'\nassert solution('10 10 10 1 1 1') == '1'\nassert solution('10 10 10 1 1 1 2') == '2'\n"
    },
    {
        "number": 4628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '22'\n\"\"\"\n\nfrom math import comb, sqrt\n\nn, m, k = map(int, input().split())"
    },
    {
        "number": 4628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 5 1\") == \"22\"\nassert solution(\"5 5 1 2\") == \"22\"\nassert solution(\"4 4 4 4 4\") == \"11\"\nassert solution(\"5 3 7\") == \"12\"\nassert solution(\"5 2\") == \"8\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '22'\n\nclass Solution:\n    def minCostToDeliverProducts(self, products: List[List[int]], warehouse: List[List[int]]) -> int:\n        def dfs(i, j):\n            global ans\n            ans += 1\n            tmp_value = i * j\n            if ans == k:\n                return ans\n            for x, y in warehouse[i][j]:\n                if x < 0 or y < 0 or x == i or y == j:\n                    continue\n                if ans > tmp_value:\n                    continue\n                tmp_value += dfs(x, y)\n            return tmp_value\n\n        k = len(products)\n        ans = 0\n        warehouse = list(zip(*warehouse))\n        for p in products:\n            i, j = p\n            ans += dfs(i, j)\n        return ans\n\n\n-----Test-----\n\nInput\n10\n10\n10\n3\n4\n\nOutput\n4\n\nInput\n2\n1\n3\n2\n\nOutput\n1\n\nExplanation\n[0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1]\n\n[0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1]\n\n[0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1]\n\n[0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1]\n\n[0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1]\n\n[0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1]\n\n[0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1]\n\n[0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1]\n\n[0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] --> [0, 1] -->"
    },
    {
        "number": 4628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '22'\n"
    },
    {
        "number": 4629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == '1'\nassert solution(2) == '3'\nassert solution(6) == '9'\nassert solution(13) == '13'\nassert solution(14) == '27'\n"
    },
    {
        "number": 4629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1\", \"1\", \"2\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"1\", \"1\", \"2\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\"]) == \"3\"\nassert solution([\"1\", \"3\", \"4\"]) == \"4\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(123) == 1\nassert solution(50) == 1\nassert solution(123) == 2\nassert solution(123) == 2\nassert solution(123) == 3\n"
    },
    {
        "number": 4629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '1'\n\n\"\"\""
    },
    {
        "number": 4629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 3\nassert solution(5) == 4\n"
    },
    {
        "number": 4629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"13\"\nassert solution(\"5\") == \"16\"\nassert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\n\n\n------Test Cases-----\n\nInput 1:\n\n2\n1\n2\n3\n4\nOutput 1:\n\n1\n3\n7\n8\n0\n'''\n\nimport math\n\nq = int(input())\nn = int(input())\n\nnums = [int(i) for i in input().split()]"
    },
    {
        "number": 4629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 5 4 3 2 1 3 1') == '1 1 1 1 1'"
    },
    {
        "number": 4630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '4 1 2 1 3'\nassert solution(stdin) == '2 2 2'\nassert solution(stdin) == '2 2'\nassert solution(stdin) == '2 2'\nassert solution(stdin) == '2 2'\n"
    },
    {
        "number": 4630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 1 1 1 1\"\n\nassert solution(stdin) == \"3 3 3\"\n\nassert solution(stdin) == \"2 2 2 2\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution == '3 2 1 1 2'\n"
    },
    {
        "number": 4630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 5 3 4 1 2') == '1 1 1 1 1'\nassert solution('6 6 2 1 3 4 5') == '1 1 1 1 1'\nassert solution('6 4 2 2 2 2') == '2 2 2 2 2'\nassert solution('6 5 5 5 5 5 5') == '2 2 2 2 2'\nassert solution('1 1 1 1 1 1') == '1 1 1 1 1'\n"
    },
    {
        "number": 4630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1 1 1 1 1\"\nassert solution(\"3 2 1 2\") == \"1 1 1 1 1\"\nassert solution(\"3 3 3 1\") == \"1 1 1 1 1\"\nassert solution(\"4 6 2 1 5 3\") == \"1 1 1 1 1\"\nassert solution(\"1 1 1 1 1\") == \"1 1 1 1 1\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 6\\n1 5\") == 5\nassert solution(\"3 5\") == -1\nassert solution(\"4 3\\n0 0\") == 0\nassert solution(\"5 0\") == -1\n"
    },
    {
        "number": 4631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '8'\nassert solution(input()) == '-1 2 6 4 0 3'\nassert solution(input()) == '5'\nassert solution(input()) == '-1 2 6 4 0 3'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 4631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == answer\n\"\"\""
    },
    {
        "number": 4631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-1 2 6 4 0 3'\nassert solution(stdin) == '5 -2 4 -1 2'\nassert solution(stdin) == '7'\nassert solution(stdin) == '5 3'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == \"1 2 6 4 0 3\"\nassert solution(\"3 5 6\") == \"5 -2 4 -1 2\"\nassert solution(\"3 5 6 7\") == \"5 -2 4 -1 2 7\"\nassert solution(\"3 6 5\") == \"6 -1 1 3\"\nassert solution(\"3 5 6 7 8 9 10 12\") == \"6 7 8 9 10 12\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution == 4\n"
    },
    {
        "number": 4631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 4\\n5 0\\n6 1\\n0 2\\n0 3\\n') == '0 -1 2 3 4'\nassert solution('3 0\\n5 3\\n2 1\\n0 4\\n') == '0 1 2'\nassert solution('4 1\\n3 2\\n0 2\\n0 0\\n') == '0 1 2'\nassert solution('3 0\\n0 3\\n0 1\\n') == '0 -1 2'\nassert solution('5 3\\n0 3\\n0 2\\n0 0\\n') == '5 -1 2 3'\n"
    },
    {
        "number": 4631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 7\nassert solution(stdin) == 5\nassert solution(stdin) == 2\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1 2 6 4 0 3'\n"
    },
    {
        "number": 4632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 4632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"4\") == \"NO\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 4632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3,5) == 'YES'\nassert solution(3,5) == 'NO'\nassert solution(3,5) == 'NO'\nassert solution(3,5) == 'YES'\n"
    },
    {
        "number": 4632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 'NO'\nassert solution(1) == 'NO'\nassert solution(5) == 'YES'\nassert solution(5) == 'YES'\nassert solution(10) == 'NO'\n"
    },
    {
        "number": 4632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.size = 9\n        self.s = \"RUUURRRRUU\"\n        self.t = len(self.s)\n\n    def min_path(self, cur_x, cur_y, visited):\n        if cur_x == cur_y:\n            return self.s[cur_x]\n        if cur_x >= self.size or cur_y >= self.size:\n            return None\n        if not visited[cur_x][cur_y]:\n            visited[cur_x][cur_y] = True\n            min_path = self.min_path(cur_x + 1, cur_y, visited)\n            max_path = self.min_path(cur_x, cur_y + 1, visited)\n            if min_path:\n                return min_path\n            if max_path:\n                return max_path\n            else:\n                visited[cur_x][cur_y] = False\n        return None\n\n    def min_path_bis(self, cur_x, cur_y, visited):\n        if cur_x == cur_y:\n            return self.s[cur_x]\n        if cur_x >= self.size or cur_y >= self.size:\n            return None\n        if not visited[cur_x][cur_y]:\n            visited[cur_x][cur_y] = True\n            min_path = self.min_path(cur_x + 1, cur_y, visited)\n            max_path = self.min_path(cur_x, cur_y + 1, visited)\n            if min_path:\n                return min_path\n            if max_path:\n                return max_path\n            else:\n                visited[cur_x][cur_y] = False\n        return None\n    \n    def minimum_path(self):\n        visited = [[False for _ in range(self.size)] for _ in range(self.size)]\n        visited[0][0] = True\n        for i in range(1, self.size):\n            min_path = self.min_path(i, 0, visited)\n            if not min_path:\n                return None\n            visited[i][0] = True\n            visited[i][i] = True\n        return self.min_path_bis(0, 0, visited)\n\n    def dfs_graph(self, cur_x, cur_y, visited):\n        if cur_x == cur_y:\n            return self.s[cur_x]\n        if cur_x >= self.size or cur_y >= self.size:\n            return None\n        if not visited[cur_x][cur_y]:\n            visited[cur_x][cur_y] = True\n            visited[cur_x][cur_y] = True\n            result = self.dfs_graph(cur_x + 1, cur_y, visited)\n            if result:\n                return result\n            visited[cur_x][cur_y] = False\n            visited[cur_x][cur_y] = False\n            result = self.dfs_graph(cur_x, cur_y + 1, visited)\n            if result:\n                return result\n            visited[cur_x][cur_y] = False\n            visited[cur_x][cur_y] = False\n            visited[cur_x][cur_y] = True\n        return None\n\n    def dfs_path(self, cur_x, cur_y, visited):\n        if cur_x == cur_y:\n            return self.s[cur_x]\n        if cur_x >= self.size or cur_y >= self.size:\n            return None\n        if not visited[cur_x][cur_y]:\n            visited[cur_x][cur_y] = True\n            visited[cur_x][cur_y] = True\n            result = self.dfs_path(cur_x + 1, cur_y, visited)\n            if result:\n                return result\n            visited[cur_x][cur_y] = False\n            visited[cur_x][cur_y] = False\n            result = self.dfs_path(cur_x, cur_y + 1, visited)\n            if result:\n                return result\n            visited[cur_x][cur_y] = False\n            visited[cur_x][cur_y] = False\n            return None\n        return None\n\n    def minimum_path(self):\n        visited = [[False for _ in range(self.size)] for _ in range(self.size)]\n        visited[0][0] = True\n        for i in range(1, self.size):\n            visited[i][0] = True\n            visited[i][i] = True\n        result = self.dfs_path(0, 0, visited)\n        return result\n\n    def minimum_path_bis(self, cur_x, cur_y, visited):\n        if cur_x == cur_y:\n            return self.s[cur_x]\n        if cur_x >= self.size or cur_y >= self.size:\n            return None\n        if not visited[cur_x][cur_y]:\n            visited[cur_x][cur_y] = True\n            visited[cur_x][cur_y] = True\n            "
    },
    {
        "number": 4632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == \"YES\"\nassert solution(2) == \"NO\"\nassert solution(3) == \"YES\"\nassert solution(4) == \"NO\"\nassert solution(5) == \"YES\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\nfor case in 1,2,3,4,5:\n    print(solution(stdin))\n"
    },
    {
        "number": 4633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(int(input())) == 8\n"
    },
    {
        "number": 4633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(test_cases) == 8\nprint(\"Correct\" if solution(test_cases) == 8 else \"Wrong\")\n"
    },
    {
        "number": 4633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\",\"3\",\"4\",\"4\",\"2\"]) == \"8\"\nassert solution([\"5\",\"5\",\"4\",\"2\"]) == \"0\"\nassert solution([\"2\",\"3\",\"2\",\"4\",\"3\"]) == \"0\"\nassert solution([\"2\",\"3\",\"2\",\"4\",\"2\"]) == \"4\"\nassert solution([\"2\",\"3\",\"2\",\"1\",\"2\"]) == \"2\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == 8\nassert solution(2) == 0\nassert solution(1) == 0\nassert solution(500) == 0\nassert solution(217871987498122) == 0\n"
    },
    {
        "number": 4633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2, 5) == 8\nassert solution(1, 5) == 1\nassert solution(1, 1) == 0\nassert solution(500, 1) == 500\nassert solution(217871987498122, 10) == 217871987498122\n"
    },
    {
        "number": 4633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input=\n    \"5\"\n    ) == \"8\"\n\nprint(\"Example 1:\")\nprint(\"Expected result:\")\nprint(\"4\")\nprint(\"Your result:\")\nprint(solution(\n    input=\n    \"5\"\n    ))\n\nprint(\"Example 2:\")\nprint(\"Expected result:\")\nprint(\"3\")\nprint(\"Your result:\")\nprint(solution(\n    input=\n    \"3\"\n    ))\n\nprint(\"Example 3:\")\nprint(\"Expected result:\")\nprint(\"4\")\nprint(\"Your result:\")\nprint(solution(\n    input=\n    \"3\"\n    ))\n\nprint(\"Example 4:\")\nprint(\"Expected result:\")\nprint(\"2\")\nprint(\"Your result:\")\nprint(solution(\n    input=\n    \"4\"\n    ))\n\nprint(\"Example 5:\")\nprint(\"Expected result:\")\nprint(\"1\")\nprint(\"Your result:\")\nprint(solution(\n    input=\n    \"1\"\n    ))"
    },
    {
        "number": 4633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"500\"\nassert solution(stdin) == \"2128012501878\"\nassert solution(stdin) == \"899999999999999999\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\n"
    },
    {
        "number": 4633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 8\n\n-----Constraints-----\n1 <= t <= 10^4\n1 <= n <= 10^4\n1 <= s <= 999\n\n-----Time complexity-----\nO(t * 10^4)\n\nO(t * 10^4)\n\nO(t * 10^4)\n\n------------------\n\"\"\""
    },
    {
        "number": 4633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 8, 'Failed'\n"
    },
    {
        "number": 4634,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4634,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"4\") == \"1\"\nassert solution(\"1\") == \"4\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4 2 4 2 2') == 1\nassert solution('1 5 1 2 5 2') == 3\nassert solution('0 0 0 0 0') == 2\nassert solution('0 0 0 0 0 0') == 3\nassert solution('0 0 0 0 0 0') == 4\n"
    },
    {
        "number": 4634,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4634,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0) == 0\nassert solution(0) == 0\nassert solution(0) == 0\nassert solution(0) == 0\nassert solution(0) == 0\n"
    },
    {
        "number": 4634,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\") == 4\nassert solution(\"4\") == 2\nassert solution(\"1\") == 1\nassert solution(\"0\") == 0\n\n------CORRECT ANSWER-----\n\nFor each test case, print one integer: the minimum number of moves required to collect all the books on the shelf as a contiguous (consecutive) segment (i.e. the segment without gaps).\n\nIn each test case, you can shift the segment $[3; 3]$ to the right and the segment $[4; 4]$ to the right. After all moves, the books form the contiguous segment $[5; 7]$. So the answer is $2$.\n\nIn each test case, you can shift the segment $[5; 5]$ to the left and then the segment $[4; 4]$ to the left again. After all moves, the books form the contiguous segment $[1; 3]$. So the answer is $2$.\n\nIn each test case, you can shift the segment $[1; 1]$ to the right, the segment $[2; 2]$ to the right, the segment $[6; 6]$ to the left and then the segment $[5; 5]$ to the left. After all moves, the books form the contiguous segment $[3; 4]$. So the answer is $4$.\n\nIn each test case, you can shift the segment $[1; 2]$ to the right, the segment $[2; 5]$ to the right, the segment $[6; 6]$ to the left and then the segment $[5; 5]$ to the left. After all moves, the books form the contiguous segment $[3; 4]$. So the answer is $1$.\n\nIn each test case, you can shift the segment $[3; 5]$ to the right and then the segment $[4; 4]$ to the right, the segment $[6; 6]$ to the left and then the segment $[5; 5]$ to the left. After all moves, the books form the contiguous segment $[1; 2]$. So the answer is $2$.\n\nIn each test case, you can shift the segment $[3; 5]$ to the left and then the segment $[2; 5]$ to the left again. After all moves, the books form the contiguous segment $[1; 2]$. So the answer is $2$.\n\nIn each test case, you can shift the segment $[1; 2]$ to the right again, the segment $[2; 5]$ to the left and then the segment $[3; 5]$ to the right. After all moves, the books form the contiguous segment $[1; 2]$. So the answer is $2$.\n\nIn each test case, you can shift the segment $[1; 2]$ to the right again again, the segment $[2; 5]$ to the left and then the segment $[3; 5]$ to the right. After all moves, the books form the contiguous segment $[1; 2]$. So the answer is $1$.\n\"\"\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '4'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4634,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 0 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"1 0 0 0 1\") == \"0\"\nassert solution(\"1 0 0 1 1\") == \"1\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 3 0 1 0 1 1\") == \"2\"\nassert solution(\"5 1 0 0 0 0\") == \"2\"\nassert solution(\"5 1 0 0 1\") == \"4\"\nassert solution(\"5 2\") == \"2\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"pqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"z\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"\") == \"abc\"\nassert solution(\"cbcacab\") == \"ababab\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"cbcacab\"\nassert solution(stdin) == \"abcd\"\nassert solution(stdin) == \"baabab\""
    },
    {
        "number": 4635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"3\", \"5\"]) == \"a\"\nassert solution([\"3\", \"5\"]) == \"abc\"\nassert solution([\"2\", \"1\", \"6\"]) == \"a\"\nassert solution([\"2\", \"3\", \"2\", \"3\", \"3\", \"3\", \"3\"]) == \"cbbacab\"\nassert solution([\"2\", \"3\", \"2\", \"3\", \"3\", \"3\", \"3\"]) == \"a\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"cbcacab\") == \"cbcacaab\"\nassert solution(\"cbcab\") == \"cbcacab\"\nassert solution(\"cab\") == \"ccbbaab\"\nassert solution(\"aaaaa\") == \"aaabbbbaaa\"\nassert solution(\"aaaaa\") == \"aaabbbbaaa\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"cbcab\"\nassert solution(stdin) == \"baabab\"\nassert solution(stdin) == \"caab\"\nassert solution(stdin) == \"bbaab\"\n\n\nExplanation\n\nThe simple constraints are only for the maximum minimal frequency.\n\nThe minimum frequency is 2, so the solution can be any permutation of the letters in the string.\nThe maximum minimal frequency can be 3, so the solution does not exist.\n\n\n\"\"\""
    },
    {
        "number": 4635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"t3\", \"t2\", \"t1\"]) == \"t1\"\nassert solution([\"t2\", \"t3\", \"t4\", \"t2\"]) == \"t2\"\nassert solution([\"t3\", \"t5\", \"t6\", \"t2\"]) == \"t3\"\nassert solution([\"t1\", \"t2\", \"t4\", \"t5\", \"t6\"]) == \"t6\"\nassert solution([\"t3\", \"t1\", \"t2\"]) == \"t1\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'cbcab'\nassert solution(stdin) == 'cbcabba'\nassert solution(stdin) == 'cbcababa'\nassert solution(stdin) == 'cbcababb'\nassert solution(stdin) == 'ccbbaaa'\n"
    },
    {
        "number": 4635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin: str,\n    t: int,\n    k: int,\n) == str, \"The solutions must return a string.\""
    },
    {
        "number": 4635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"abccbca\") == \"cbcab\"\nassert solution(\"abccbca\") == \"ccab\"\nassert solution(\"abccbca\") == \"cbcab\"\nassert solution(\"abcbcbc\") == \"cbcac\"\nassert solution(\"abcbcbc\") == \"cbcab\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"cbcacab\"\nassert solution(stdin) == \"abcd\"\nassert solution(stdin) == \"baabab\"\nassert solution(stdin) == \"ccbbaaa\""
    },
    {
        "number": 4636,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == [\"6\", 23, \"21\"]\n\n\"\"\""
    },
    {
        "number": 4636,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 23\n"
    },
    {
        "number": 4636,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"\"\n'''\nimport sys\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 4636,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n        stdin='7 11 3 1 5 9 2 6 5 3 5'\n    ) == '6 23 21'\nassert solution(\n        stdin='11 1000'\n    ) == '12'\nassert solution(\n        stdin='3 1 4 1 5 9 2 6 5 3 5'\n    ) == '3 1 4 1 5 9 2 6 5 3 5'\nassert solution(\n        stdin='3 1 4 1 5 9 2 6 5 3 5'\n    ) == '0'\nassert solution(\n        stdin='3 1 4 1 5 9 2 6 5 3 5'\n    ) == '0'\n"
    },
    {
        "number": 4636,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '23 21'"
    },
    {
        "number": 4636,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 1 4 1 5 9 2 6 5 3 5\"), 858\nassert solution(\"3 1 4 1 5 9 2 6 5 3 5\"), 1101\nassert solution(\"3 1 4 1 5 9 2 6 5 3 5\"), 1101\nassert solution(\"3 1 4 1 5 9 2 6 5 3 5\"), 1101\nassert solution(\"3 1 4 1 5 9 2 6 5 3 5\"), 1101\n"
    },
    {
        "number": 4636,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\") == \"7 23 21\"\nassert solution(\"1\\n1\\n1\") == \"7\"\nassert solution(\"1\\n1\\n1\\n2\") == \"1\\n2\\n3\"\nassert solution(\"1\\n1\\n1\\n3\") == \"3 23 21\"\nassert solution(\"1\\n1\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"6 23 21\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"9 11 3 1 1 9 2 6 5 3 5\") == \"6 23 21\"\nassert solution
    },
    {
        "number": 4636,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"24\""
    },
    {
        "number": 4637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5\", \"1\", \"1\", \"2\", \"2\"]) == \"6\"\nassert solution([\"2\", \"3\", \"2\", \"4\", \"2\"]) == \"6\"\nassert solution([\"5\", \"1\", \"1\", \"2\", \"1\", \"3\", \"1\", \"2\", \"2\"]) == \"6\"\nassert solution([\"5\", \"1\", \"1\", \"2\", \"1\", \"2\", \"1\", \"2\", \"2\", \"1\"]) == \"6\"\nassert solution([\"5\", \"1\", \"1\", \"2\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"6\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '27', 'Expected 27, but got {}'.format(solution(stdin))\nassert solution(stdin) == '39', 'Expected 39, but got {}'.format(solution(stdin))\nassert solution(stdin) == '11', 'Expected 11, but got {}'.format(solution(stdin))\nassert solution(stdin) == '17', 'Expected 17, but got {}'.format(solution(stdin))"
    },
    {
        "number": 4637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\n        [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"2\", \"1\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"2\", \"1\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"2\", \"1\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"2\", \"1\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"2\", \"1\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"],\n    ]\n) == [36, 15, 10, 15, 14, 10, 10]\n"
    },
    {
        "number": 4637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '27'\nassert solution(stdin) == '39'\nassert solution(stdin) == '11'\n\n\"\"\"\nn,k = list(map(int,input().split()))\na = list(map(int,input().split()))\nb = list(map(int,input().split()))"
    },
    {
        "number": 4637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 5 2 4 7 8 1 3 4 9\") == \"6\"\nassert solution(\"2 2 1 3 2 5 4\") == \"10\"\nassert solution(\"5 4 3 1 4 2 3\") == \"10\"\nassert solution(\"4 0 4 4\") == \"10\"\nassert solution(\"5 4 1 1\") == \"10\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"27\"\nassert solution(stdin) == \"39\"\nassert solution(stdin) == \"11\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n        stdin=\n        '''\n        5\n        2\n        1 2\n        3 4\n        5 5\n        5 5 6 5 5\n        '''\n        ) == '1'\n\nassert solution(\n        stdin=\n        '''\n        2\n        1 2\n        2 3\n        3 4\n        '''\n        ) == '11'\n\nassert solution(\n        stdin=\n        '''\n        2\n        1 2\n        1 2 3\n        '''\n        ) == '27'\n\nassert solution(\n        stdin=\n        '''\n        1 2\n        3\n        3 4\n        '''\n        ) == '39'\n\nassert solution(\n        stdin=\n        '''\n        2\n        2 2\n        '''\n        ) == '6'"
    },
    {
        "number": 4637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"27\"\nassert solution(stdin) == \"39\""
    },
    {
        "number": 4637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0 7 13 18 24 35 36 37 40 45'\n"
    },
    {
        "number": 4638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 4638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3 3 1 3 3 1 4 1\") == \"0 7 13 18 24 35 36 37 40 45\"\nassert solution(\"1 2 2 3 2 2 1 3 3\") == \"0 2 4 7 8 11 13 14 16 17\"\nassert solution(\"1 2 3 2 3 2 1 4 3\") == \"0 4 7 8 11 13 14 16 17\"\nassert solution(\"2 4 3 1 3 3 1 4 1\") == \"0 4 7 8 11 13 14 16 17\"\nassert solution(\"1 2 1 2 1 2 1 2 3\") == \"0 4 7 8 11 13 14 16 17\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0 7\"\nassert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 10 2\") == \"0 7 13 18 24 35 36 37 40 45\"\nassert solution(\"10 1\") == \"0 2 3 4 5\"\nassert solution(\"1 2 3 4 5\") == \"0 1 3 4 5\"\nassert solution
    },
    {
        "number": 4638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 2\") == \"0 7 13 18 24 35 36 37 40 45\"\nassert solution(\"10 1\") == \"0 2 3 4 5 6 7 8 9 10\"\nassert solution(\"10 3\") == \"0 2 4 3\"\nassert solution(\"10 4\") == \"0 4\"\nassert solution(\"10 5\") == \"0 5\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 4638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10 2\") == \"0 7 13 18 24 35 36 37 40 45\"\nassert solution(\"10 1\") == \"0 2 4 7 8 11 13 14 16 17\"\nassert solution(\"3 2 3 1 3 3 1 4 1\") == \"3 7 13 18 24 35 36 37 40 45\"\nassert solution(\"3 3 3 3 3 3 3 4 1\") == \"3 9 13 18 24 35 36 37 40 45\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0 7 13 18 24 35 36 37 40 45'\nassert solution(stdin) == '0 0 0 0 0 0 0 0 0 0 0'\nassert solution(stdin) == '0 0 0 0 0 0 0 0 0 0 0'\n"
    },
    {
        "number": 4638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 18\nassert solution(stdin) == 55\nassert solution(stdin) == 189\n"
    },
    {
        "number": 4639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 4639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, 7) == \"aaabb\"\nassert solution(5, 5) == \"aabab\"\nassert solution(5, 10) == \"baaba\"\nassert solution(1, 2) == \"aaabb\"\nassert solution(1, 3) == \"baaba\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'aaaaabaaaaabaaaaaaaa'\n\"\"\""
    },
    {
        "number": 4639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'aabab'\n'''"
    },
    {
        "number": 4639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 1 2\") == \"aaabb\"\nassert solution(\"5 2 8\") == \"baaba\"\nassert solution(\"5 10\") == \"bab\"\nassert solution(\"5 100\") == \"aaaaabaaaaab\""
    },
    {
        "number": 4639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"abab\"\nassert solution(stdin) == \"baaba\"\nassert solution(stdin) == \"aaaaabaaaaabaaaaaaaa\"\nassert solution(stdin) == \"aaabb\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'aaabb'\nassert solution(stdin) == 'aaaaab'\nassert solution(stdin) == 'aaaaabaaaaab'\n"
    },
    {
        "number": 4639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"aabab\"\nassert solution(input()) == \"aabab\"\nassert solution(input()) == \"bab\"\nassert solution(input()) == \"bba\"\nassert solution(input()) == \"aabb\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"the code is wrong\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == ['aaabb', 'aabab', 'baaba', 'bbaaa', 'abb', 'bab', 'aaaaabaaaaabaaaaaaaa']\nassert solution(input()) == 'aaaaabaaaaabaaaaaaaa'\nassert solution(input()) == 'aaaaabaaaaabaaaaaaaa'\nassert solution(input()) == 'baaba'\nassert solution(input()) == 'bab'\n"
    },
    {
        "number": 4640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4\") == 5\nassert solution(\"7 1\") == 3\nassert solution(\"1 5 2 3 1 5 4\") == 1\nassert solution(\"1 3 6 7 2 5 4\") == 1\nassert solution(\"1 1\") == 1\n"
    },
    {
        "number": 4640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"6\"\n\nExplanation\n\nStandard input is shown below:\n\nt = 4\nn = 7\nk = 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n\nstdin input:\n\n4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n\nstdin output:\n\n6\n\n\n\n\"\"\""
    },
    {
        "number": 4640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    [\n        \"7 1\",\n        \"1 5 2 3 1 5 4\",\n        \"1 3 6 7 2 5 4\",\n        \"1 1\",\n        \"1000000000\",\n        \"1000000000\",\n        \"5 10\",\n        \"10 7 5 15 8\",\n        \"20 199 192 219 1904\",\n        \"10 10\",\n        \"15 19 8 17 20 10 9 2 10 19\",\n        \"12 13 6 17 1 14 7 9 19 3\",\n        \"0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(5)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(2)\n"
    },
    {
        "number": 4640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n
    },
    {
        "number": 4640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"5\"]) == \"4\"\nassert solution([\"1\", \"1\", \"1\"]) == \"4\"\nassert solution([\"3\", \"1\", \"1\", \"1\", \"1\"]) == \"4\"\nassert solution([\"3\", \"1\", \"1\", \"2\", \"3\", \"3\"]) == \"6\"\nassert solution([\"2\", \"1\", \"1\", \"1\", \"2\", \"3\", \"3\", \"3\"]) == \"8\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\nstdin=\n[\n    \"1\",\n    \"1 4\",\n    \"1 3 6\",\n    \"1 1\",\n    \"1 5 2 3 1 5 4\"\n]\n) == \"1\"\nassert solution(\nstdin=\n[\n    \"4\",\n    \"5\",\n    \"5 7 5 15 8\"\n]\n) == \"5\"\nassert solution(\nstdin=\n[\n    \"4\",\n    \"5 7 5 15 8\",\n    \"10 6\"\n]\n) == \"10\"\nassert solution(\nstdin=\n[\n    \"5 7 5 15 8\",\n    \"3 6\",\n    \"2 4 5 3 4 7\"\n]\n) == \"2\"\nassert solution(\nstdin=\n[\n    \"2 1 3 6\",\n    \"4 4 7 2\",\n    \"1 6 1 5\"\n]\n) == \"1\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 4640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nprint(\"PASS\")\n\"\"\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"10\") == \"0\""
    },
    {
        "number": 4641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\n"
    },
    {
        "number": 4641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('0') == '0'\nassert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(7)\n\n---OR---"
    },
    {
        "number": 4641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"7 3\"\n) == \"1\"\nassert solution(\n    \"4 3\"\n) == \"2\"\nassert solution(\n    \"4 3\"\n) == \"3\"\nassert solution(\n    \"4 3\"\n) == \"3\"\nassert solution(\n    \"4 3\"\n) == \"0\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution(' ') ==''\nassert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 4642,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"24 20 50\"\n\"\"\""
    },
    {
        "number": 4642,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, 2, 3) == 4\nassert solution(1, 5, 2) == 4\nassert solution(5, 3, 1) == 3\nassert solution(1, 10, 2) == 5\nassert solution(5, 10, 2) == 5\n"
    },
    {
        "number": 4642,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 49 20 50 10\"\n\n\"\"\""
    },
    {
        "number": 4642,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 10\nassert solution(stdin) == 10\nassert solution(stdin) == 10\nassert solution(stdin) == 10\n"
    },
    {
        "number": 4642,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(test_input) == expected_output\n\n-----Bonus-----\nThe problem has been tested with this particular test case.\nThe minimum possible element is $2$, and the maximum possible element is $10^9$.\n\n\"\"\""
    },
    {
        "number": 4642,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 1 1 9') == 1\nassert solution('2 1 1 4') == 1\nassert solution('2 1 1 4') == 2\nassert solution('2 1 1 4') == 3\nassert solution('2 1 1 4') == 4\n"
    },
    {
        "number": 4642,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"Some two consecutive elements are not correct\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2 1 49\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"3 1 8\"\nassert solution(input()) == \"1 2 4\"\nassert solution(input()) == \"2 2\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"The string is not correct\"\n\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n{\n    \"n\": 3,\n    \"x\": 1,\n    \"y\": 2\n}\n) == \"20\"\n\"\"\"\n\nimport math\nimport sys\nfrom itertools import permutations\nfrom collections import defaultdict\nfrom functools import reduce\n\nT = int(input())"
    },
    {
        "number": 4643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 3 1 2\") == \"1 2 3\""
    },
    {
        "number": 4643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 4 1 2\") == \"2 4 1\"\nassert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"1 2 3 4 5 6 7 8 9 10\"\n\n\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 2 3\""
    },
    {
        "number": 4643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 144 143 145 146 147 148 149 150 151 152 153 154 155 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 210 211 212 213 214 215 216 217 218 219 220 221 223 224 225 226 227 228 229 229 230 231 231 232 233 233 234 235 236 237 237 238 239 240 241 241 243 242 243 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, 3, 5) == \"1 3 5\"\nassert solution(7, 3, 5) == \"7 3 5\"\nassert solution(0, 1, 4) == \"1 4\"\nassert solution(5, 3, 5) == \"5 5\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 3 1 2\"\n) == \"1 2 3\"\n\nassert solution(\n    \"4 3 1 2\"\n) == \"1 2 3\"\n\nassert solution(\n    \"4 4 6 5 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 124 125 126 127 128 129 130 131 131 132 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 192 194 195 196 197 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 231 232 233 234 235 236 237 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 3 1 2') == '1 2 3'\nassert solution('4 4 5 3 1 2') == '4 4 5 3 1 2'\nassert solution('4 5 3 1 2') == '1 2 3'\nassert solution('4 1 2 3 4 1 2 3 4') == '4 1 2 3 4 1 2 3 4'\nassert solution('1 2 3 4 5 1 2 3 4') == '1 2 3 4 5 1 2 3 4'\n"
    },
    {
        "number": 4643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 6 9 8 5 2 3') == '1 2 3 4 6 9 8 5 2 3'"
    },
    {
        "number": 4643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0) == \"\"\n\nassert solution(\"10 20 30 40 50 60 70\") == \"70 30 40 50 60\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, 1) == 1\nassert solution(3, 2) == 2\nassert solution(3, 3) == 1\nassert solution(3, 4) == 2\nassert solution(3, 5) == 1\n"
    },
    {
        "number": 4644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\n\nNote: You do not need to read input or print anything."
    },
    {
        "number": 4644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 3 4\") == \"NO\"\nassert solution(\"2 3 4 5 6\") == \"YES\""
    },
    {
        "number": 4644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES'\n\n\n-----Constraints-----\n1 <= t <= 2000\n\n\n-----Time complexity-----\nO(n^2 * 2^n)\n\nO(n^2 * 2^n)\n\n\n-----Space complexity-----\nO(2^n)\n\n\n-----Good luck!-----\n"
    },
    {
        "number": 4644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 3 0\") == \"YES\"\nassert solution(\"2 3 0\") == \"NO\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"1 2 3 4 5 6\") == \"YES\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(test_cases[0]) == 'NO'\nassert solution(test_cases[1]) == 'YES'\n"
    },
    {
        "number": 4644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5, 2) == \"YES\"\nassert solution(5, 2) == \"NO\"\nassert solution(5, 2) == \"YES\"\nassert solution(5, 2) == \"NO\"\nassert solution(5, 2) == \"NO\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, 2) == 'NO'\nassert solution(5, 4) == 'YES'\nassert solution(5, 3) == 'NO'\nassert solution(5, 4) == 'YES'\nassert solution(5, 4) == 'NO'\n"
    },
    {
        "number": 4644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"NO\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"YES\"\n"
    }
]