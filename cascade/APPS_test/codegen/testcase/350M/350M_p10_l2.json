[
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 6 5 7 8') == '8'\nassert solution('1 5 6 2 3 4 7') == '7'\nassert solution('1 2 3 4 6 5 7 8') == '5'\nassert solution('1 2 3 4 2 4') == '4'\nassert solution('1 2 3 4 6') == '2'\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '5'\nassert solution('1 5 4 3') == '5'\nassert solution('1 7 3') == '5'\nassert solution('5 6 3') == '5'\nassert solution('5 2 4 3') == '5'\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input() == \"5 4 6\") == \"3 8 7\"\nassert solution(input() == \"1 5 6\") == \"3 2 6\"\nassert solution(input() == \"1 5 6\") == \"3 2 6\"\nassert solution(input() == \"1 5 3\") == \"3 2 4\"\nassert solution(input() == \"1 5 3\") == \"4 3 4\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin,\n    4\n) == 5\n\n\n-----Constraints-----\n1 <= stdin.length <= 200\n1 <= n <= 10^5\n1 <= a, b, c <= 10^5\n0 <= a_i, b_i <= 10^5\n0 <= b_i <= n\n0 <= c_i <= 10^5\n\"\"\"\nclass Solution:\n    \"\"\"\n    @param: n: a non-negative integer\n    @param: a: a list of integers\n    @param: b: a list of integers\n    @param: c: a list of integers\n    @return: a string\n    \"\"\"\n    def simplifyPath(self, n, a, b, c):\n        # write your code here\n        paths = []\n        for i in range(1,n+1):\n            paths.append('.'*i+b[i-1]+c[i-1])\n\n        return ''.join(paths)\n\n\n\"\"\"\n@lc code=start\n\nimport re\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nc = list(map(int,input().split()))\n\nres = re.findall(r\"(?<=.)(?=[^\\d\\+-])\",self.simplifyPath(n,a,b,c))"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"5 8\"\nassert solution(input()) == \"1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(\"1 2 3 4 5 6\") == \"6\"\n\nassert solution(\"1 2 3 4 5 6 5 2 3 7\") == \"5\"\n\nassert solution(\"1 2 3 4 5 6 2\") == \"5\"\n\nassert solution(\"1 2 3 4 5 6 4\") == \"4\""
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"5\"\nassert solution(\"1 5\") == \"1 5\"\nassert solution(\"5 5\") == \"4 5\"\nassert solution(\"5 3\") == \"8 3\"\nassert solution(\"5 4\") == \"5 4\""
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2') == '8'\nassert solution('2 2') == '8'\nassert solution('2 3') == '8'\nassert solution('2 4') == '8'\nassert solution('2 5') == '8'\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"4 5\"\nassert solution(\"3 4 2\") == \"3 8 6\"\n\n\n-----Constraints-----\n1 <= n <= 100000\n0 <= a, b, c <= n\na \\le b <= n\na \\ne b <= n\na \\ne c <= n\na, b, c \\le n\n\n1 <= stdin.length <= 10^5\n\n\n-----Time Complexity-----\nTime complexity: O(N)\n\nSpace Complexity: O(n)\n'''\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"20 8\"\nassert solution(stdin) == \"20 8 20 20 8 20 20 2 4 4 20 4 20 20 20 20 2 4 5 20 4 20 20 2 20 20 2 20 20 2 20 20 2 4 5 20 20 20 2 20 20 2 20 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20 20 2 20"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"20 8\"\nassert solution(stdin) == \"20 8 2 1 2 4 1 20 4 5\"\n\n\n-----Advanced-----\n\n1. Initialize a dict with all divisors of $x$ (number of divisors), which will be a copy of the given list (possibly in the same order) of divisors.\n2. Iterate through the list of divisors, and for each element, try to find a non-repeated number in the given list of divisors.\n3. If this number exists, return it. If not, repeat from step 2.\n4. Return this number.\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4 6 1 8 2 1 4 2 20 4 5'\n\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, 2, 3, 4, 5, 6, 7) == [1, 2, 4, 5]\nassert solution(2, 2, 1, 4, 2, 3, 6) == [2, 3, 4, 6]\nassert solution(2, 2, 1, 4, 2, 3, 6) == [1, 2, 4, 6]\nassert solution(2, 2, 2, 2, 3, 2, 3) == [2, 2, 3, 3]\nassert solution(5, 1, 1, 1, 2, 2, 2) == [1, 2, 1, 2]\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"8 11 20 4 20 5 3 2 4 1 2\"\nassert solution(stdin) == \"5 3 7 2\"\n\n\n-----Constraints-----\n1 <= n <= 10^4\n0 <= d_i <= 10^4\n\nmemory limit: 12MB\ntime limit: 30 seconds\n\n\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3,5,4,1,2,6,8,12,14,20,24,25,26,27') == '24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,7"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '20 8'\n\nThis may take a while to run.\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('10') == '20'\nassert solution('10 2 8 1 2 4 1 20 4 5') == '20 8'\nassert solution
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == ['1', '2', '4', '5', '6', '8', '9', '10', '20']\n\n\n-----Sample Input-----\n\n2\n4 2 4 1 2 4 1 20 4 5\n\nSample Output\n\n20 8\n\n-----Sample Output-----\n\n2\n4 2 4 1 2 4 1 20 4 5\n'''\nimport math\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 3 4 3\") == \"24\"\nassert solution(\"1 5 4 3\") == \"5\"\nassert solution(\"1 7 4 3\") == \"7\"\nassert solution(\"1 8 4 3\") == \"3\"\nassert solution(\"1 9 4 3\") == \"3\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 4 3\") == \"24\"\nassert solution(\"5 5 4\") == \"24\"\nassert solution(\"3 5 1 2 4\") == \"24\"\nassert solution(\"1 5 7 1 2\") == \"24\"\nassert solution(\"1 5 7 1\") == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"24\"\n'''\n\nimport math"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n8 4 7 1 2\\n5 5 2 2 2\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\") == \"56\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\") == \"56\"\nassert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\") == \"24\""
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"24\"\nprint('solution cases passed')\n\n-----Example-----\npython3 solution.py 10 6\n
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"5 4 3\", \"1 2 3 4\", \"5 2 2 2\"]) == \"24\"\nassert solution([\"5 5 4\", \"1 2 4 2 1\", \"3 5 1 2 4\", \"1 5 7 1 2\"]) == \"24\"\nassert solution([\"4 4 5\", \"4 1 5 1\", \"4 7 1 2 4\", \"4 3 7 1 2\", \"3 2 3 7 1\"]) == \"35\"\nassert solution([\"1 2 1 2\", \"3 2 3 3\", \"4 3 4 3\", \"5 3 5 4\"]) == \"10\"\nassert solution([\"1 2 1 2\", \"3 2 3 3\", \"4 3 4 3\", \"5 3 5 4\", \"1 2 1 2\"]) == \"5\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 24\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\n\nInput\n5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\n\nOutput\n24\n\n\"\"\"\n) == 24\n\n\n-----Other Solutions-----"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n[\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [5, 2, 4, 1, 7, 8, 6, 9, 11, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n]\n) == 24\n\nassert solution(\n[\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n]\n) == 24\n\nassert solution(\n[\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n]\n) == 24\n\nassert solution(\n[\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n]\n) == 24\n\nassert solution(\n[\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n]\n) == 24"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 6\nassert solution(stdin) == 4\nassert solution(stdin) == 2\nassert solution(stdin) == 3"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"LRRRR\"\n\n-----Examples-----\nExample 1:\n\nInput:\n    n = 5\n    a = [1, 2, 4, 3, 2]\nOutput:\n    5\nExplanation:\n    1. The sequence is strictly increasing (as shown in the example).\n    2. The first element is removed from the sequence.\n    3. The sequence becomes [1, 2, 4, 3] and the rightmost element is removed from the sequence.\n    4. The sequence becomes [2, 4, 3] and the rightmost element is removed from the sequence.\n    5. The sequence is strictly increasing (as shown in the example).\n    6. The sequence becomes [2, 4, 3] and the rightmost element is removed from the sequence.\n\nExample 2:\n\nInput:\n    n = 7\n    a = [1, 2, 4, 3, 2, 5, 6, 7]\nOutput:\n    7\nExplanation:\n    1. The sequence is strictly increasing (as shown in the example).\n    2. The first element is removed from the sequence.\n    3. The sequence becomes [1, 2, 4, 3, 2, 5, 6] and the rightmost element is removed from the sequence.\n    4. The sequence becomes [2, 4, 3, 2, 5, 6] and the rightmost element is removed from the sequence.\n    5. The sequence is strictly increasing (as shown in the example).\n    6. The sequence becomes [2, 4, 3] and the rightmost element is removed from the sequence.\n    7. The sequence is strictly increasing (as shown in the example).\n    8. The sequence becomes [2, 4, 3, 2, 5, 6, 7] and the rightmost element is removed from the sequence.\n    9. The sequence is strictly increasing (as shown in the example).\n    10. The sequence becomes [1, 2, 4, 3, 2, 5, 6, 7, 8, 9] and the rightmost element is removed from the sequence.\n    11. The sequence is strictly increasing (as shown in the example).\n    12. The sequence becomes [1, 2, 4, 3, 2] and the rightmost element is removed from the sequence.\n    13. The sequence becomes [1, 2, 4, 3] and the rightmost element is removed from the sequence.\n    14. The sequence becomes [1, 2] and the rightmost element is removed from the sequence.\n    15. The sequence becomes [1, 2, 4] and the rightmost element is removed from the sequence.\n    16. The sequence becomes [1, 2, 4, 3] and the rightmost element is removed from the sequence.\n    17. The sequence becomes [1, 2, 4, 3, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] and the rightmost element is removed from the sequence.\n    18. The sequence becomes [1, 2, 4, 3, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] and the rightmost element is removed from the sequence.\n    19. The sequence becomes [1, 2, 4, 3] and the rightmost element is removed from the sequence.\n    20. The sequence becomes [1, 2, 4, 3, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] and the rightmost element is removed from the sequence.\n    21. The sequence becomes [1, 2, 4, 3, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] and the rightmost element is removed from the sequence.\n    22. The sequence becomes [1, 2, 4, 3, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n\n\n-----Constraints-----\n0 <= n <= 1e5\n0 <= a[i] <= 100\n\nSubtask No. 5 is solved in about 3 minutes.\n\nConstraints:\n\n1 <= n <= 100\n1 <= a.length <= n\na.length <= n\na[i] is an integer between 1 and 100.\n\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\", \"2\", \"4\", \"3\", \"2\"]) == \"4\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"5\"\nassert solution([\"1\", \"3\", \"5\", \"4\", \"6\"]) == \"6\"\nassert solution([\"2\", \"1\", \"2\", \"1\", \"1\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"5\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 4\nassert solution(stdin) == 4\nassert solution(stdin) == 4\n\n-----------------------Test-----------------------------\nInput 1:\n4\n1 2 4 3 2\nOutput 1:\n4\nLRLRRR\n\nInput 2:\n7\n1 3 5 6 5 4 2\nOutput 2:\n6\nLRRRRR\n\nInput 3:\n5\n1 2 4 3 2\nOutput 3:\n5\nLLRRLR\n\nInput 4:\n3\n1 2 4 3 2\nOutput 4:\n1\nR"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"123\"), \"123\"\nassert solution(\"11\"), \"11\"\nassert solution(\"112\"), \"112\"\nassert solution(\"1\"), \"1\"\nassert solution(\"222\"), \"2\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'L'\n\n\n\n\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == 'L'\nassert solution(stdin) == 'R'\nassert solution(stdin) == 'LRRR'\nassert solution(stdin) == 'LLRR'\n\n'''"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, [3, 5, 6, 2, 1]) == 4\nassert solution(2, [2, 1, 3]) == 4\nassert solution(3, [1, 2, 3]) == 4\nassert solution(4, [3, 2, 5, 4]) == 4\n\n\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 1 3 5 6 5 4 2\") == \"5\"\nassert solution(\"7 1 3 5 6 5 4 2\") == \"6\"\nassert solution(\"3 2 2\") == \"3\"\nassert solution(\"1 3 2 4 1\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('4 1 4 3') == '4'\nassert solution('5 5 6 5 4') == '5'\nassert solution('7 3 6 5 4') == '3'\nassert solution('4 2 4 5') == '3'\nassert solution('3 2 4 4 3') == '3'\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin, 3) == 3\nassert solution(stdin, 4) == 3\nassert solution(stdin, 7) == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1') == 3\nassert solution('1') == -1\nassert solution('1') == -1\nassert solution('1') == 3\nassert solution('1') == -1"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1,1') == '1'\nassert solution('2,4,7') == '3'\nassert solution('1,2,3,4') == '2'\nassert solution('2,5,6,7') == '5'\nassert solution('1,1') == '0'\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3, \"1\"\nassert solution(stdin) == -1, \"2\"\nassert solution(stdin) == 3, \"3\"\nassert solution(stdin) == -1, \"4\"\nassert solution(stdin) == -1, \"5\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10\") == 3\nassert solution(\"0\") == -1\nassert solution(\"1\") == -1\nassert solution(\"3\") == -1"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\n\n\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"No\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 3 7 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 4 6\") == \"YES\"\nassert solution(\"0 0 7 4\") == \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 7 5\") == \"YES\"\nassert solution(\"3 3 7 5\") == \"NO\"\nassert solution(\"5 3 7 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 3 7 5'), 'Yes'\nassert solution('5 2 10 5'), 'No'\n\npass"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"\\\"\\\"\\\"Input:\n10 2 3\n3 0 0\n3 0 4\n3 0 1\n3 0 6\n3 0 7\n3 0 8\n3 1 0\n3 1 1\n3 1 6\n3 1 7\n3 1 8\n3 2 0\n3 2 1\n3 2 6\n3 2 7\n3 2 8\n3 3 0\n3 3 1\n3 3 6\n3 3 7\n3 3 8\nOutput:\nYES\n\nInput:\n1 1 0 1\n1 0 0 1\n\nOutput:\nNO\n\nInput:\n5 2 1 3\n2 1 3 3\n2 1 0 3\n2 1 2 2\n2 2 2 1\n2 3 2 0\n2 3 3 0\n2 4 0 1\n2 4 2 3\n2 4 1 2\n3 1 1 1\n3 3 0 1\n3 5 1 3\n3 5 2 2\n3 6 0 1\n3 7 1 4\n3 7 2 3\n3 8 0 4\n3 9 1 4\n3 9 2 0\nOutput:\nYES\n\nInput:\n3 1 4 1\n4 1 0 4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'\n'''\n\nimport math\nimport sys\nfrom collections import Counter\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2\", \"1\"]) == \"1\"\nassert solution([\"5\", \"5\", \"3\", \"1\"]) == \"4\"\nassert solution([\"4\", \"1\", \"3\", \"1\"]) == \"2\"\nassert solution([\"4\", \"3\", \"1\", \"1\"]) == \"2\"\nassert solution([\"1\", \"1\", \"1\", \"1\"]) == \"0\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n\n\n-----Examples-----\nInput\n3\n\nOutput\n3\n\nInput\n30\n\nOutput\n6\n\n\n\n-----Note-----\n\nThe numbers that are reachable from $3$ are:\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$.\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 20\n\"\"\"\n\nimport math\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == 12\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1001') == 4\nassert solution('1005') == 5\nassert solution('101') == 5\nassert solution('1003') == 5\nassert solution('1010') == 5\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"1098\") == 1\nassert solution(\"10\") == 0\nassert solution(\"5\") == 0\nassert solution(\"6\") == 0\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 20\n\nExample 2\n\nInput\n10\n\nOutput\n14\n\nExplanation\n\nThe numbers that are reachable from 10 are:\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 10, 1098, 1099$\n\n\n------Challenge----\n\nWhich of these numbers is not reachable from $1098$?\n\nBut which is not reachable from 7?\n\nIf you have no reason to solve all those, just go for it in the next implementation.\n\ninput = input().split()\nanswer = 0\n\nfor i in input:\n    answer += int(i)\nprint(answer)\n\n-----More examples-----\nInput\n4\n\nOutput\n4\n\nExplanation\n\nThe numbers that are reachable from 4 are:\n\n$1, 2, 3, 4, 5$\n\n4 is reachable from 6.\n\nIf you have no reason to solve all those, just go for it in the next implementation.\n\ninput = input().split()\nanswer = 0\n\nfor i in input:\n    answer += int(i)\nprint(answer)\n\n------More examples------\nInput\n6\n\nOutput\n6\n\nExplanation\n\nThe numbers that are reachable from 6 are:\n\n$1, 2, 3, 4, 5, 6$\n\n6 is reachable from 7.\n\nIf you have no reason to solve all those, just go for it in the next implementation.\n\ninput = input().split()\nanswer = 0\n\nfor i in input:\n    answer += int(i)\nprint(answer)\n\n------More examples------\nInput\n5\n\nOutput\n4\n\nExplanation\n\nThe numbers that are reachable from 5 are:\n\n$1, 2, 3, 4, 5$\n\n5 is reachable from 6.\n\nIf you have no reason to solve all those, just go for it in the next implementation.\n\ninput = input().split()\nanswer = 0\n\nfor i in input:\n    answer += int(i)\nprint(answer)\n\n------More examples------\nInput\n2\n\nOutput\n1\n\nExplanation\n\nThe numbers that are reachable from 2 are:\n\n$1, 2$\n\n2 is reachable from 1.\n\nIf you have no reason to solve all those, just go for it in the next implementation.\n\ninput = input().split()\nanswer = 0\n\nfor i in input:\n    answer += int(i)\nprint(answer)\n\n------More examples------\nInput\n10\n\nOutput\n10\n\nExplanation\n\nThe numbers that are reachable from 10 are:\n\n$1, 2, 3, 4, 5$\n\n10 is reachable from 5.\n\nIf you have no reason to solve all those, just go for it in the next implementation.\n\ninput = input().split()\nanswer = 0\n\nfor i in input:\n    answer += int(i)\nprint(answer)\n\n------More examples------\nInput\n4\n\nOutput\n4\n\nExplanation\n\nThe numbers that are reachable from 4 are:\n\n$1, 2, 3$\n\n4 is reachable from 5.\n\nIf you have no reason to solve all those, just go for it in the next implementation.\n\ninput = input().split()\nanswer = 0\n\nfor i in input:\n    answer += int(i)\nprint(answer)\n\n------More examples------\nInput\n4\n\nOutput\n3\n\nExplanation\n\nThe numbers that are reachable from 4 are:\n\n$1, 2, 3$\n\n4 is reachable from 5.\n\nIf you have no reason to solve all those, just go for it in the next implementation.\n\ninput = input().split()\nanswer = 0\n\nfor i in input:\n    answer += int(i)\nprint(answer)\n\n------More examples------\nInput\n6\n\nOutput\n6\n\nExplanation\n\nThe numbers that are reachable from 6 are:\n\n$1, 2, 3, 4, 5, 6$\n\n6 is reachable from 5.\n\nIf you have no reason to solve all those, just go for it in the next implementation.\n\ninput = input().split()\nanswer = 0\n\nfor i in input:\n    answer += int(i)\nprint(answer)\n\n------More examples------\nInput\n2\n\nOutput\n1\n\nExplanation\n\nThe numbers that are reachable from 2 are:\n\n$1, 2$\n\n2 is reachable from 1.\n\nIf you have no reason to solve all those, just go for it in the next implementation.\n\ninput = input().split()\nanswer = 0\n\nfor i in input:\n    answer += int(i)\nprint(answer)\n\n------More examples------\nInput\n10\n\nOutput\n10\n\nExplanation\n\nThe numbers that are reachable from 10 are:\n\n$1, 2, 3, 4, 5, 6$\n\n10 is reachable from 5.\n\nIf you have no reason to solve all those, just go for it in the next implementation.\n\ninput = input().split()\nanswer = 0\n\nfor i in input:\n    answer += int(i)\nprint(answer)\n\n------More examples------\nInput\n3\n\nOutput\n2\n\nExplanation\n\nThe numbers that are reachable from 3 are:\n\n$1, 2, 3$\n\n3 is reachable from 1.\n\nIf you have no reason to solve all those, just go for it in the next implementation.\n\ninput = input().split()\nanswer = 0\n\nfor i in input:\n    answer += int(i)\nprint(answer)\n\n------More examples------\nInput\n2\n\nOutput\n1\n\nExplanation\n\nThe numbers that are reachable from 2 are:\n\n$1, 2$\n\n2 is reachable from 1.\n\nIf you have no reason to solve all those, just go for it in the next implementation.\n\ninput = input().split()\nanswer = 0\n\nfor i in input:\n    answer += int(i)\nprint(answer)\n\n------More examples------\nInput\n3\n\nOutput\n1\n\nExplanation\n\nThe numbers that are reachable from 3 are:\n\n$1, 2, 3$\n\n3 is reachable from 1.\n\nIf you have no reason to solve all those, just go for it in the next implementation.\n\ninput = input().split()\nanswer = 0\n\nfor i in input:\n    answer += int(i)\nprint(answer)\n\n------More examples------\nInput\n1\n\nOutput\n1\n\nExplanation\n\nThe numbers that are reachable from 1 are:\n\n$1$\n\nIf you have no reason to solve all those, just go for it in the next implementation.\n\ninput = input().split()\nanswer = 0"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 4\nassert solution(7) == 10\nassert solution(5) == 0"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 20, f'Expected 20, got {stdin}'\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1098) == 20\n\n\n-----Constraints-----\n1 <= stdin.length <= 1000\n1 <= stdin[i] <= 10^9\n\n\n-----Examples-----\necho \"0\" | python3 solution.py\n3\n\necho \"1\" | python3 solution.py\n10\necho \"1\" | python3 solution.py\n101\necho \"10\" | python3 solution.py\n0\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\nstdin[i] is a digit in [0, 9].\n\n\n-----Example 1-----\n\nInput\n3\n\nOutput\n3\n\nExplanation\nWe can get 3 different numbers.\nThe starting number is $3$ and the ending number is $3$ and the number $3$ is reachable from $3$ from $3$.\n\nExplanation\n$2, 3, 4$ are the same digits; $2, 3, 5$ are not reachable from $2$, because $3$ is not reachable from $2$, so $2$ does not change the number.\n$1, 2, 3$ is the same digit; $1, 2, 4$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is not the same digit; $1, 2, 5$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n\nThe first two digits of $3$ are the same, and the last two digits are different.\n\nThe next three digits are the same, and the next three digits are different.\n\nThe next four digits are the same, and the next four digits are different.\n\nThe next five digits are the same, and the next five digits are different.\n\nThe next six digits are the same, and the next six digits are different.\n\nThe next seven digits are the same, and the next seven digits are different.\n\nThe next eight digits are the same, and the next eight digits are different.\n\nThe next nine digits are the same, and the next nine digits are different.\n\n\n-----Example 2-----\n\nInput\n6\n\nOutput\n6\n\nExplanation\nThe numbers that are reachable from $6$ are:\n\n$2, 3, 4$ are the same digits, $2, 3, 5$ are different digits, $2, 3, 6$ are not reachable from $2$, because $3$ is not reachable from $2$, so $2$ does not change the number.\n$1, 2, 3$ is the same digit, $1, 2, 4$ is different digits, $1, 2, 5$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is the same digit, $1, 2, 6$ is different digits, $1, 2, 5$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is not the same digit, $1, 2, 5$ is not different digits, $1, 2, 6$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is the same digit, $1, 2, 6$ is different digits, $1, 2, 5$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is the same digit, $1, 2, 6$ is different digits, $1, 2, 5$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is not the same digit, $1, 2, 5$ is not different digits, $1, 2, 6$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is the same digit, $1, 2, 6$ is different digits, $1, 2, 5$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is the same digit, $1, 2, 6$ is different digits, $1, 2, 5$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is the same digit, $1, 2, 6$ is different digits, $1, 2, 5$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is the same digit, $1, 2, 6$ is different digits, $1, 2, 5$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is the same digit, $1, 2, 6$ is different digits, $1, 2, 5$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is the same digit, $1, 2, 6$ is different digits, $1, 2, 5$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is the same digit, $1, 2, 6$ is different digits, $1, 2, 5$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is the same digit, $1, 2, 6$ is different digits, $1, 2, 5$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is the same digit, $1, 2, 6$ is different digits, $1, 2, 5$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is the same digit, $1, 2, 6$ is different digits, $1, 2, 5$ is not reachable from $1$, because $2$ is not reachable from $1$, so $1$ does not change the number.\n$1, 2, 3$ is the same digit, $1, 2, 6$ is different digits, $1, 2, 5$ is not reachable from $"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 0 0 0 1 0 1\") == \"0 2 0 0 0 1\"\nassert solution(\"0 0 0 0 0 0 0 0 0\") == \"0 0 0 0 0 0\"\nassert solution(\"0 0 0 0 0 0 0 0 0\") == \"0 0 0 0 0 0\"\nassert solution(\"0 0 0 0 0 0 0 0 0\") == \"0 0 0 0 0 0\"\nassert solution(\"0 0 0 0 0 0 0 0 0\") == \"0 0 0 0 0 0\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('Input: \"3 2 4\\n3 0 0\\n2 0 0\\n4 0 0\\n5 1 1\\n6 1 1\\n7 1 0\\n8 1 1\\n9 1 0\\n10 1 0\\n11 1 1\\n12 1 0\\n13 1 0\\n14 1 1\\n15 1 0\"') == '3 2 4\\n3 0 0\\n2 0 0\\n4 0 0\\n5 1 1\\n6 1 1\\n7 1 0\\n8 1 1\\n9 1 0\\n10 1 0\\n11 1 1\\n12 1 0\\n13 1 0\\n14 1 1\\n15 1 0'\nassert solution('Input: \"0 1\\n0 2\\n2 0\\n1 1\\n0 1\\n0 1\"') == '0 1'\nassert solution('Input: \"0 2\\n0 1\\n1 2\\n1 0\"') == '0 1'\nassert solution('Input: \"3 2 4\\n3 0 0\\n2 0 0\\n4 0 0\\n5 1 1\\n6 1 1\\n7 1 0\\n8 1 1\\n9 1 0\\n10 1 0\\n11 1 1\\n12 1 0\\n13 1 0\\n14 1 1\\n15 1 0\"') == '2 0 0\\n2 0 0\\n2 0 0\\n2 0 0\\n2 0 0\\n2 0 0\\n2 0 0\\n2 0 0\\n2 0 0\\n2 0 0\\n2 0 0'\nassert solution('Input: \"3 2 4\\n3 0 0\\n2 0 0\\n4 0 0\\n5 1 1\\n6 1 1\\n7 1 0\\n8 1 1\\n9 1 0\\n10 1 0\\n11 1 1\\n12 1 0\\n13 1 0\\n14 1 1\\n15 1 0\"') == '0 1'\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3 2 1 4 5 6 \") == \"4 1 2 1 3 4 5 6\"\nassert solution(\"0 3 1 2 4 0 6\") == \"5 3 1 2 4 0 6\"\nassert solution(\"0 0 0 0\") == \"0 0 0 0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3 0 0 0\") == \"3 0 0 0\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '7 3 2 1 4 5 6'\nassert solution(stdin) == '7 4 2 3 6 5 1'\nassert solution(stdin) == '7 4 2 3 6 5'"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1 2 1'\nassert solution(stdin) == '1 3 3'\nassert solution(stdin) == '1 2'\nassert solution(stdin) == '1 2 1'\nassert solution(stdin) == '1 3'\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 7 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7 7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7 7 0 0 1 4 0 6\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5 7 0 0 1 4 0 6\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5 7 0 0 1 4 0 6\") == \"7 4 2 3 6 5 1\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin = \"5 7 0 0 2 4\"\n    ), \"1 3 1 2 4\"\nassert solution(\n    stdin = \"7 7 0 0 1 4\"\n    ), \"7\"\nassert solution(\n    stdin = \"5 7 0 0 1 2\"\n    ), \"2\"\nassert solution(\n    stdin = \"7 4 0 3 0 5 1\"\n    ), \"4\"\nassert solution(\n    stdin = \"7 4 0 3 0 5 2\"\n    ), \"5\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2 1 4 5 3\""
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '5 3 1 2 4'\nassert solution(stdin) == '7 3 2 1 4'\nassert solution(stdin) == '7 4 2 3 6 5 1'\nassert solution(stdin) == '7 4 2 3 6 5 1'\nassert solution(stdin) == '7 4 2 3 6 5 1'\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"YES\"\nassert solution(inp) == \"NO\"\nassert solution(inp) == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\" or solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"4 2\"\n    ), \"NO\"\nassert solution(\n    \"5 2\"\n    ), \"NO\"\nassert solution(\n    \"5 3\"\n    ), \"NO\"\nassert solution(\n    \"5 1\"\n    ), \"NO\"\nassert solution(\n    \"5 2\"\n    ), \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 2 3\\n1 2 1 2 3\\n1 2 1 1 2 3\\n1 2 1 1 2 1\\n1 2 1 1 1 2 1\\n1 2 1 1 1 2 1\\n\") == \"YES\"\nassert solution(\"2 3 1\\n1 3 1\\n2 3 1\") == \"YES\"\nassert solution(\"1 1 2\\n1 1 1\\n\") == \"YES\"\nassert solution(\"1 1 1\\n\") == \"NO\"\nassert solution(\"2 1 1\\n1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"NO\"\nassert solution(inp) == \"YES\"\nassert solution(inp) == \"NO\"\nassert solution(inp) == \"YES\"\nassert solution(inp) == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"NO\"\n\n-----Constraints-----\n0 \u2264 n, k \u2264 5000\n1 \u2264 a_i, a_i \\le k\n1 \u2264 n \u2264 5000\n1 \u2264 a_i\na_i \\le k\na_i \\le n\n\nTime Limit: 40 ms\nMemory Limit: 80 MB\n\n\n\n-----Bug fix-----\nI had to change the input so that the variables are less duplicated and the variables are read as integers.\n\"\"\""
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1, 2, 5, 10, 2, 3, 10, 5, 2) == 3\n\nassert solution(1, 2, 3, 4) == 2\n\nassert solution(0) == 0"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 9\nassert solution(stdin) == 12\nassert solution(stdin) == 29\n\n\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\n\n------Example-------\n\nInput\n10\n10\n10\n10\n\nOutput\n10\n\n\"\"\"\nimport math"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\""
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(11,2) == 3\nassert solution(11,5) == 1\nassert solution(11,1) == 1\nassert solution(10,1) == 2\nassert solution(10,3) == 2\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"11 5 2\") == 3\nassert solution(\"11 1 2\") == 3\nassert solution(\"11 1 3\") == 2\nassert solution(\"11 101010101\") == 10\nassert solution(\"1111111111\") == 9\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 12\n\nassert solution(\"\") == 0\n\nassert solution(\"11010100101\") == 1\n\nassert solution(\"11010100101\") == 3\n\n-----Constraints-----\n\n1 <= n <= 10^5\nstdin.length <= 100\n0 <= stdin[i] <= 1\nstdin[i] is either 0 or 1\n\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 2\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"11 5 2\") == 3\nassert solution(\"11 1\") == 1\nassert solution(\"11 1 1\") == 1\nassert solution(\"100100100100\") == 1\nassert solution(\"100100100100\") == 3\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5,3) == 'YES'\nassert solution(5,4) == 'NO'\nassert solution(5,5) == 'YES'\nassert solution(5,6) == 'NO'\nassert solution(5,7) == 'NO'\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == \"YES\"\nassert solution(1) == \"YES\"\nassert solution(2) == \"NO\"\nassert solution(3) == \"NO\"\nassert solution(4) == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n-----Time complexity-----\n\nThe input is processed into a variable with size $n$, which is computed as $n \\times \\mathbb{E}_{n \\ge 100}$.\n\nTo compute the length of the subsequences of length $3$ of $a$, we compute a new variable $l_3$ which is computed as $l_3 = (n-3)*3^{n-3}$,\nwhich is computed as the number of different subsequences of length $3$ of the array $a$ which are palindromes.\nThen, we compute a variable $l_4$ which is computed as $l_4 = 3^{n-3}$, and we add that to $l_3$ to compute the length of the subsequences of length $4$ of $a$.\nFinally, we compute a variable $l_5$ which is computed as $l_5 = 4^{n-3}$, which is computed as the sum of the subsequences of length $4$ of the array $a$ which are palindromes.\nFinally, we compute a variable $l_6$ which is computed as $l_6 = n$.\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n------Solution-----\n\nApproach\nThe idea is to compare the length of the subsequences of length $3$ of $a$ with the length of the subsequences of length $4$ of $a$.\nWe have to check for palindromes by adding 2 to the length of the subsequences of length $3$ of $a$ and adding 2 to the length of the subsequences of length $4$ of $a$.\nWe also have to check for palindromes by adding 1 to the length of the subsequences of length $4$ of $a$.\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n------Solution-----\n\nApproach\nThe idea is to compute the length of the subsequences of length $4$ of $a$.\nWe have to check for palindromes by adding 1 to the length of the subsequences of length $4$ of $a$.\nWe also have to check for palindromes by adding 2 to the length of the subsequences of length $4$ of $a$.\nWe also have to check for palindromes by adding 2 to the length of the subsequences of length $4$ of $a$.\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Note-----\n\nIn the first case, we have to compute the length of the subsequences of length $3$ of $a$ which are palindromes.\n\nIn the second case, we have to check for palindromes by adding 2 to the length of the subsequences of length $4$ of $a$.\n\nIn the third case, we have to check for palindromes by adding 1 to the length of the subsequences of length $4$ of $a$.\n\nIn the fourth case, we have to check for palindromes by adding 2 to the length of the subsequences of length $4$ of $a$.\n\nIn the fifth case, we have to check for palindromes by adding 2 to the length of the subsequences of length $4$ of $a$.\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n------Solution-----\n\nApproach\nThe idea is to compute the length of the subsequences of length $4$ of $a$.\nWe have to check for palindromes by adding 2 to the length of the subsequences of length $4$ of $a$.\nWe also have to check for palindromes by adding 1 to the length of the subsequences of length $4$ of $a$.\nWe also have to check for palindromes by adding 2 to the length of the subsequences of length $4$ of $a$.\nWe also have to check for palindromes by adding 2 to the length of the subsequences of length $4$ of $a$.\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n------Solution-----\n\nApproach\nThe idea is to compute the length of the subsequences of length $4$ of $a$.\nWe have to check for palindromes by adding 2 to the length of the subsequences of length $4$ of $a$.\nWe also have to check for palindromes by adding 1 to the length of the subsequences of length $4$ of $a$.\nWe also have to check for palindromes by adding 2 to the length of the subsequences of length $4$ of $a$.\nWe also have to check for palindromes by adding 2 to the length of the subsequences of length $4$ of $a$.\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Note-----\n\nIn the first case, we have to compute the length of the subsequences of length $4$ of $a$ which are palindromes.\n\nIn the second case, we have to check for palindromes by adding 2 to the length of the subsequences of length $4$ of $a$.\n\nIn the third case, we have to check for palindromes by adding 1 to the length of the subsequences of length $"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5\n\"\"\"\n) == \"NO\"\nassert solution(\n\"\"\"\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5\n\"\"\"\n) == \"NO\"\nassert solution(\n\"\"\"\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5\n\"\"\"\n) == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(sys.argv) == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"1 2 1\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"1 2 2 3 2\") == \"NO\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 9"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,1) == 1\nassert solution(1,2) == 2\nassert solution(1,3) == 3\nassert solution(1,4) == 4\nassert solution(1,5) == 5\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1169\n\n\n###\n\"\"\""
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '33'\nassert solution(stdin) == '99999'"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4, \"1337\") == \"1557\"\nassert solution(5, \"11111\") == \"33\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"33\"\n\"\"\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1557'\nassert solution(stdin) == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1557\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"Your solution does not work\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1 1 3'\nassert solution(stdin) == '1 1 4'\nassert solution(stdin) == '1 1 4'\nassert solution(stdin) == '1 1 4'\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"18\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1 1 3\"\n) == \"1\"\nassert solution(\n    \"123 321 456\"\n) == \"23\"\nassert solution(\n    \"15 18 21\"\n) == \"21\"\nassert solution(\n    \"15 18 21\"\n) == \"10\"\nassert solution(\n    \"100 100 101\"\n) == \"10\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"11\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0) == 1\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4, 1, 1, 1, 1) == 1\nassert solution(6, 2, 2, 2, 2, 2, 2, 2, 2) == 2\nassert solution(6, 2, 2, 2, 2, 2, 2, 2, 2, 2) == 4\nassert solution(6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2) == 6\nassert solution(4, 1, 1, 1, 1, 1, 1, 1, 1, 1) == 1\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1 1 3'\nassert solution(stdin) == '1 1 3'\nassert solution(stdin) == '1 2 3'\nassert solution(stdin) == '1 22 29'\nassert solution(stdin) == '1 19 38'\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 1 3\"\nassert solution(stdin) == \"1 1 2\"\nassert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"12\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2 1 3 7') == '3 - 1'\nassert solution('2 1 1') == '0'\nassert solution('1 3') == '0'\nassert solution('2 100000') == '0'\nassert solution('2 1 3 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 181 182 183 184 185 186 186 187 188 189 190 191 191 192 193 194 195 196 197 198 199 200 201 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 219 220 220 221 222 223 224 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 244 245 245 246 247 248 249 251 252 253 253 254 255 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 304 305 306 308 308 309 310 311 311 313 314 315 316 317 318 419 419 420 421 441 444 445 445 454 454 465 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 4"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\""
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\\n3\\n7\\n100000\\n3\\n100000\\n100000\\n100000\\n100000\\n\") == \"2\"\nassert solution(\"2\\n1\\n3\\n7\\n100000\\n3\\n100000\\n100000\\n100000\\n100000\\n100000\\n100000\\n100000\\n100000\\n\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"4 1 3 7\"\n) == 2\nassert solution(\n    \"2 3 7\"\n) == 2\nassert solution(\n    \"2 100000\"\n) == 0\nassert solution(\n    \"2\"\n) == 0\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 1\n\n-----Constraints-----\n0 <= n <= 10^5\n\n------Time Complexity------\nO(n)\n\n------Space Complexity------\nO(1)\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"0\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2 2') == '1 2'\nassert solution('3 4') == '3 4'\nassert solution('7 6') == '7 5'\nassert solution('10 12') == '10 12'"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 2\"\n) == \"-1\"\nassert solution(\n    \"3 2\"\n) == 2\nassert solution(\n    \"10 3\"\n) == -1\nassert solution(\n    \"10 3\"\n) == 2\nassert solution(\n    \"10 3\"\n) == 2\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1 2 0 3\"\n\n-----Notes-----\n\nIn other words, the schedule for a given day is not necessarily an exact subset of the schedule for the next day. Thus, we can't fill it with special dates.\n\nIn the second example, there are three days and two exams. So, Petya can prepare in only one day (because in two other days he should pass exams). Then, it is not possible to pass any exams for another day.\n\nIn the third example, there are three days and three exams. So, Petya can prepare in only two days (because in two other days he should pass exams). Then, it is not possible to pass any exams for another day.\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 1 1\") == \"1 3 1\"\nassert solution(\"3 2\") == \"2 2 2\"\nassert solution(\"4 7 2\") == \"1 10 3\"\nassert solution(\"3 10\") == \"3 2\"\nassert solution(\"7 9 1\") == \"2\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == -1\nassert solution(inp) == 0\nassert solution(inp) == 1\n\n\n-----Notes-----\n\nIn the input, there are several examples.\n\nThe $i$-th example is given by the $s_i$ line. \nThe $d_i$ line is given by the $d_i$ line.\nThe $c_i$ line is given by the $c_i$ line.\nThere are several situations.\n\nIn the first example, Petya does not need to do anything, and passes the exam once. In the second example, Petya does need to do two or more exams.\nIn the third example, Petya can not prepare, and passes the exam in two days. In the fourth example, Petya can not prepare, and passes the exam in one day.\n\nIn the fifth example, Petya does not prepare, and passes the exam in a single day. In the sixth example, Petya can prepare and pass in a single exam.\n\nNote that a day is considered to be a special day in the first example, and a special day in the second example.\n\nIn the seventh example, Petya does not need to prepare, and passes the exam in only one day. In the eighth example, Petya does need to prepare, and passes the exam in only one day. In the ninth example, Petya does prepare in two days.\nIn the tenth example, Petya does prepare in one day.\n\nIn the eleventh example, Petya does not prepare, and passes the exam in only one day. In the eighteenth example, Petya does prepare in two days.\nIn the nineteenth example, Petya does prepare in two days.\nIn the twelfth example, Petya does prepare in two days.\nIn the thirteenth example, Petya does prepare in two days.\nIn the fourteenth example, Petya does prepare in two days.\nIn the fifteenth example, Petya does prepare in two days.\nIn the seventeenth example, Petya does not prepare and passes the exam in two days.\nIn the eighteenth example, Petya does prepare in two days.\nIn the eighteenth example, Petya does not prepare and passes the exam in one day.\nIn the nineteenth example, Petya does not prepare and passes the exam in two days.\nIn the nineteenth example, Petya does not prepare and passes the exam in one day.\nIn the twentieth example, Petya does not prepare and passes the exam in only one day.\nIn the twentieth example, Petya does not prepare and passes the exam in only one day.\nIn the twentieth example, Petya does prepare and passes the exam in only one day.\nIn the twentieth example, Petya does not prepare and passes the exam in two days.\nIn the twentieth example, Petya does not prepare and passes the exam in only one day.\nIn the twentieth example, Petya does not prepare and passes the exam in only one day.\nIn the twentieth example, Petya does not prepare and passes the exam in two days.\nIn the twentieth example, Petya does not prepare and passes the exam in only one day.\nIn the twentieth example, Petya does not prepare and passes the exam in only one day.\nIn the twentieth example, Petya does not prepare and passes the exam in only one day.\nIn the twentieth example, Petya does not prepare and passes the exam in two days.\nIn the twentieth example, Petya does not prepare and passes the exam in only one day.\nIn the twentieth example, Petya does not prepare and passes the exam in only one day.\nIn the twentieth example, Petya does not prepare and passes the exam in two days.\nIn the twentieth example, Petya does not prepare and passes the exam in only one day.\nIn the twentieth example, Petya does not prepare and passes the exam in two days.\nIn the twentieth example, Petya does not prepare and passes the exam in only one day.\nIn the twentieth example, Petya does not prepare and passes the exam in two days.\nIn the twentieth example, Petya does not prepare and passes the exam in only one day.\nIn the twentieth example, Petya does not prepare and passes the exam in two days.\nIn the twentieth example, Petya does not prepare and passes the exam in only one day.\nIn the twentieth example, Petya does not prepare and passes the exam in two days.\nIn the twentieth example, Petya does not prepare and passes the exam in only one day.\nIn the twentieth example, Petya does not prepare and passes the exam in two days.\nIn the twentieth example, Petya does not prepare and passes the exam in only one day.\nIn the twentieth example, Petya does not prepare and"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 2') == '1 3 1'\nassert solution('3 2') == '2 2 2 1 1 0 4 3 4 4'\nassert solution('10 3') == '0 0 1 1'\n\n-----Complexity-----\n\nTime: O(N)\nSpace: O(N)\n\nRuntime: 40 ms (41.73%)\nMemory Usage: 14.2 MB (49.31%)\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3 2 3 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == ''\nassert solution(stdin) == '-1'\nassert solution(stdin) == ''\nassert solution(stdin) == '0'\nassert solution(stdin) == ''\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 2 1 0 0\") == \"1 2 1 0 0\"\nassert solution(\"4 3 1 0 0\") == \"1 2 1 0 0\"\nassert solution(\"5 3 1 0 0\") == \"1 2 1 0 0\"\nassert solution(\"3 10 1 0 0\") == \"1 2 1 0 0\"\nassert solution(\"3 7 1 0 0\") == \"1 2 1 0 0\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2 3 1 1 0 4 3 4\") == \"1\"\nassert solution(\"3 1 4 5 1 3 2 1 0\") == \"1\"\nassert solution(\"4 1 3 5 1\") == \"1\"\nassert solution(\"5 2 3 1 1\") == \"2\"\nassert solution(\"4 2 1 5\") == \"0\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"{1, 4, 5, 8, 13, 21, 34, 55, 89}\") == \"0\"\nassert solution(\"{42, 36, 52, 100, 144}\") == \"7\"\nassert solution(\"{42, 36, 52, 100, 144}\") == \"7\"\nassert solution(\"{48, 72, 144}\") == \"0\"\nassert solution(\"{48, 72, 144}\") == \"0\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(12490, 24720) == 7\nassert solution(12490, 24720) == -1\n\nassert solution(3, 300) == 0\nassert solution(3, 300) == -1\n\nassert solution(1, 5) == 0\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(120,51840) == 7\nassert solution(42,42) == 0\nassert solution(48,72) == -1"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('120 5320') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"48 72\") == \"0\"\nassert solution(\"72\") == \"-1\"\nassert solution(\"480 71840\") == \"0\"\nassert solution(\"48 72 720\") == \"0\"\nassert solution(\"480 720\") == \"0\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\nassert solution(\"123\") == -1\nassert solution(\"432\") == 0\nassert solution(\"182\") == -1\nassert solution(\"1\") == 0\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(120, 51840) == 7\nassert solution(42, 42) == 0\nassert solution(48, 72) == -1\nassert solution(48, 72) == -1\nassert solution(48, 72) == -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"7\"\n\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"0\"\n\nassert solution(input()) == -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"120 51840\"\n) == \"7\"\n\nassert solution(\n    \"42 42\"\n) == \"0\"\nassert solution(\n    \"48 72\"\n) == \"-1\"\n\nassert solution(\n    \"48 72\"\n) == \"0\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\"ab\", \"a\", \"ab\", \"a\"]\n) == \"ababababa\"\nassert solution(\n    [\"ab\", \"a\", \"ab\", \"aa\"]\n) == \"ababababa\"\nassert solution(\n    [\"a\", \"a\", \"a\", \"a\"]\n) == \"ababababa\"\nassert solution(\n    [\"a\", \"a\", \"a\", \"a\"]\n) == \"ababababa\"\nassert solution(\n    [\"a\", \"a\", \"a\", \"a\"]\n) == \"ababababa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"b\") == \"ab\"\nassert solution(\"aa\") == \"ab\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'ababababa'\nassert solution(stdin) == 'catcat'\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nassert solution(\"ababa\") == \"ababababa\"\nassert solution(\"aaaa\") == \"aaab\"\nassert solution(\"aabb\") == \"ababab\"\nassert solution(\"aabaabab\") == \"abababab\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"ababababa\"\nassert solution(stdin) == \"ababababa\"\nassert solution(stdin) == \"ababababa\"\nassert solution(stdin) == \"ababababa\"\nassert solution(stdin) == \"ababababa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"ababababa\"\n\n\n-----Advanced-----\n\nYou are given a string $t$ consisting of $n$ lowercase Latin letters and an integer number $k$.\n\nLet's define a substring of some string $s$ with indices from $l$ to $r$ as $s[l \\dots r]$.\n\nYour task is to create such a string $s$ of minimum possible length that there are exactly $k$ substrings of $s$ equal to $t$.\n\nIt is guaranteed that the answer is always unique.\n\nNote:\n\nThe length of the substrings of $s$ is < $k$ and $s[l \\dots r] is a substring of $t$.\nThe substring of $t$ is composed of $s[l \\dots r]*$ and not necessarily contained in $s[l \\dots r]$.\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"a\", \"t\", \"a\", \"t\"]) == \"ababababa\"\nassert solution([\"a\", \"t\", \"a\", \"t\", \"t\"]) == \"ababababa\"\nassert solution([\"a\", \"t\", \"a\", \"t\", \"t\", \"a\", \"t\", \"a\", \"t\", \"a\", \"t\", \"t\"]) == \"abababababa\"\nassert solution([\"a\", \"t\", \"a\", \"t\", \"t\", \"a\", \"t\", \"a\", \"t\", \"a\", \"t\", \"t\", \"t\", \"t\", \"t\", \"t\"]) == \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution() == 'catcat', 'incorrect answer'\n'''\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'ababababa'\n\"\"\""
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"a\", \"a\", \"b\", \"a\", \"a\"]) == \"bababababab\"\nassert solution([\"a\", \"a\", \"a\", \"b\", \"b\", \"a\"]) == \"bababababab\"\nassert solution([\"a\", \"a\", \"a\", \"a\", \"a\"]) == \"ababababab\"\nassert solution([\"a\", \"a\", \"a\", \"b\", \"b\", \"a\"]) == \"bababababab\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n\n\n  \n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\",\"2\",\"2\",\"5\",\"5\",\"7\",\"10\",\"10\",\"10\",\"10\",\"10\"]) == \"3\"\nassert solution([\"2\",\"5\",\"2\"]) == \"0\"\nassert solution([\"10\",\"10\",\"10\"]) == \"0\"\nassert solution([\"3\",\"4\",\"6\"]) == \"0\"\nassert solution([\"2\",\"2\"]) == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5') == 0\nassert solution('4') == 0\nassert solution('0') == 0\nassert solution('2') == 0\nassert solution('2') == 0\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5') == '0'\nassert solution('4') == '0'\nassert solution('5') == '0'\nassert solution('8') == '0'\nassert solution('2') == '0'\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution( \"1 2 3 4\" ) == \"1\"\nassert solution( \"5 6 4 5\" ) == \"5\"\nassert solution( \"5 6 4 7\" ) == \"0\"\n\nprint(\"OK\")\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n\n-----Tags-----\n\nThese are the tags given to me.\n\n'''\n\nimport sys\n\ninput = sys.stdin.readline"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == solution.__name__\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 55\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= k <= 10^12\n\nTime Limit: 1sec\n\nSpace Limit: 1GB\n\n-----Tags-----\nBinary Search\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"asdf\") == \"asdf\"\nassert solution(\"aaaaa\") == \"aaaaa\"\nassert solution(\"ajihiushda\") == \"ajihiushda\"\nassert solution(\"asdfgdsf\") == \"asdfgdsf\"\nassert solution(\"asfd\") == \"asfd\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('asdf') == -1\nassert solution('aaaaa') == 233\nassert solution('asd') == 0\nassert solution('asdfsdf') == 0\nassert solution('sdf') == -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 233\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"asdf\") == 5\nassert solution(\"aaaaa\") == 233\nassert solution(\"asdfa\") == -1"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"asdfasdasdf\") == 5\n\n\n-----Constraints-----\n0 < stdin.length <= 10^4\n1 <= stdin.length <= 10^12\n1 <= k <= 10^9\n1 <= s.length <= 200\ns[i] is a lowercase Latin letter.\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, \"asdf\") == -1\nassert solution(5, \"aaaaa\") == 10\nassert solution(5, \"asdf\") == -1\nassert solution(5, \"asd\") == -1\nassert solution(5, \"sdf\") == -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\n\n\nassert solution(stdin)!= -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 233\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 'YES'\n\nassert solution(input) == 'NO'\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 2^10\n2^m - 1 <= edges[i] <= 2^m - 1\n0 <= vertex <= n\n\n'''"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 1') == 'YES'\nassert solution('2 3') == 'NO'\nassert solution('4 3') == 'NO'\n\nInput\n3 1\n1 2\n1 3\n\nOutput\nYES\n1 2\n1 3\n\nInput\n3 2\n1 3\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 3\n4 1\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES', 'incorrect result'\nassert solution(stdin) == 'NO', 'incorrect result'\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 1 1') == 'YES'\nassert solution('2 2 3') == 'YES'\nassert solution('1 1 1') == 'NO'\nassert solution('1 1 1') == 'NO'\nassert solution('2 2 3') == 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 1 2 1 2\"), \"NO\"\nassert solution(\"2 3 3 3 3\"), \"NO\"\nassert solution(\"3 4 4 4 4\"), \"NO\"\nassert solution(\"4 4 4 4 4\"), \"NO\"\nassert solution(\"4 5 3 4 5\"), \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 5 1\") == \"YES\"\nassert solution(\"4 5 3\") == \"NO\"\nassert solution(\"4 4 3\") == \"NO\"\nassert solution(\"4 4 3\") == \"YES\"\nassert solution(\"4 4 3\") == \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"YES\"\nassert solution(\"6 6 1\") == \"YES\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4 4\") == \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution == 'NO', 'incorrect output'"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\n\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"YES\", \"1 2\"\nassert solution(\"1 3\") == \"YES\", \"1 3\"\nassert solution(\"1 4\") == \"NO\", \"1 4\"\nassert solution(\"2 3\") == \"NO\", \"2 3\"\nassert solution(\"3 4\") == \"YES\", \"3 4\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\nassert solution(\"01:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\nassert solution(\"01:02\") == \"01:02\"\nassert solution(\"03:02\") == \"02:02\"\n\n'''\n\nclass Solution:\n    def solution(self, stdin):\n        pass\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:00') == '11:30'\nassert solution('01:02') == '02:02'\nassert solution('03:02') == '02:02'\nassert solution('01:02:01') == '01:02:02'\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '02:02'\n\n\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('01:02') == '01:02'\nassert solution('11:00') == '11:00'\nassert solution('11:00') == '11:00'\nassert solution('03:02') == '03:02'\nassert solution('00:00') == '00:00'\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"10:00\", \"11:00\"]) == \"02:02\"\nassert solution([\"10:00\", \"11:10\"]) == \"11:11\"\nassert solution([\"11:10\", \"11:12\"]) == \"01:02\"\nassert solution([\"01:02\", \"02:02\"]) == \"01:01\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:00\"\nassert solution(\"01:02\") == \"01:02\"\nassert solution(\"02:02\") == \"02:02\"\n\n\n-----Constraints-----\n1 <= h_1 <= 23\n1 <= m_1 <= 59\n1 <= h_2 <= 23\n1 <= m_2 <= 59\n\n--------End of problem set 1, 2, 4, 5------\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:00\"\nassert solution(\"01:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:00') == '11:00'\nassert solution('01:02') == '01:02'\nassert solution('03:02') == '03:02'"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"00:00:00\") == \"10:30\"\nassert solution(\"00:00:00\") == \"11:11\"\nassert solution(\"00:00:00\") == \"00:00:00\"\nassert solution(\"01:01:01\") == \"00:00:00\"\nassert solution(\"01:02:01\") == \"01:02:01\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 1\nassert solution(4) == 2\nassert solution(27) == 5\nassert solution(42) == 6\nassert solution(2700) == 27\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('27') == '1'\nassert solution('42') == '2'\nassert solution('96') == '2'\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2) == 1\nassert solution(4) == 2\nassert solution(27) == 5\nassert solution(42) == 6\nassert solution(42) == 1"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2) == '1'\nassert solution(4) == '2'\nassert solution(27) == '5'\nassert solution(42) == '6'\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"2\"\nassert solution(\"43\") == \"2\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"2\"\n) == \"1\"\nassert solution(\n    \"4\"\n) == \"2\"\nassert solution(\n    \"27\"\n) == \"5\"\nassert solution(\n    \"42\"\n) == \"6\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2) == 1\nassert solution(4) == 2\nassert solution(27) == 5\nassert solution(42) == 6\nassert solution(27) == 8\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"0 7 9 2 1 2 5\") == \"3\"\nassert solution(\n    \"0 7 9 2 3 4 5\") == \"3\"\nassert solution(\n    \"0 1 1 0 1 2\") == \"2\"\nassert solution(\n    \"0 1 0\") == \"0\"\nassert solution(\n    \"0 0 1 0 1\") == \"0\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"27\") == \"27\"\nassert solution(\"42\") == \"42\"\nassert solution(\"75\") == \"75\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('4') == '2'\nassert solution('2') == '1'\nassert solution('27') == '5'\nassert solution('42') == '6'\nassert solution('12345') == '12345'"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"1\"\nassert solution(\"2 6\") == \"3\"\nassert solution(\"0 4\") == \"4\"\nassert solution(\"1 20\") == \"2\"\nassert solution(\"0 4\") == \"2\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"2 5 0 5 3\"\n) == \"1\"\nassert solution(\n    \"2 6 1 10 20\"\n) == \"2\"\nassert solution(\n    \"2 2 4 1 5 3\"\n) == \"3\"\nassert solution(\n    \"3 10 4 0 0 0\"\n) == \"0\"\nassert solution(\n    \"3 10 2 3\"\n) == \"2\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\n\"\"\""
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 3 0 2 4 5 7') == '1 3'\nassert solution('2 1 2 1 20 3 5 20') == '1 20'\nassert solution('2 4 0 6 4 10 20 0') == '1 4'\nassert solution('2 3 5 1 7 20 0 0') == '1 7'\nassert solution('2 3 10 0 6 5 20 0') == '1 7'\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin=\n    \"4\\n1 3\\n2 6\\n0 4\\n3 3\\n\"\n) == \"1\"\nassert solution(\n    stdin=\n    \"3\\n1 3\\n2 6\\n0 4\\n3 10\\n\"\n) == \"3\"\nassert solution(\n    stdin=\n    \"2\\n9 20\\n\"\n) == \"0\"\nassert solution(\n    stdin=\n    \"3\\n3 3\\n9 20\\n\"\n) == \"3\"\nassert solution(\n    stdin=\n    \"1\\n1 2\\n9 20\\n\"\n) == \"2\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 3' == '1 2 3' or '1 3' == '1 2 3' or '1 3') == '1 2 3'\nassert solution('2 3' == '1 3' or '1 3' == '2 3') == '1 3'\nassert solution('2 5' == '1 3' or '1 3' == '2 3' or '1 3') == '1 3'\nassert solution('3 3' == '1 3' or '1 3' == '2 3' or '1 3') == '1 3'\nassert solution('0 4' == '1 3' or '1 3' == '2 3' or '1 3') == '1 3'\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 5 7\") == \"1 2\"\nassert solution(\"3 5 3\") == \"1\"\nassert solution(\"3 3 10 3\") == \"3\"\nassert solution(\"4 5 2\") == \"3\"\nassert solution(\"2 4 2\") == \"3\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(4) == 3\nassert solution(5) == 0\nassert solution(3) == 3\nassert solution(4) == 2\nassert solution(4) == 2\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4\") == 1\nassert solution(\"5\") == 1\nassert solution(\"3\") == 0\nassert solution(\"2\") == 2\nassert solution(\"0\") == 2\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, [\"5\"]) == \"YES\"\nassert solution(3, [\"2\"]) == \"NO\"\nassert solution(3, [\"3\", \"5\"]) == \"YES\"\nassert solution(3, [\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"YES\"\nassert solution(3, [\"1\", \"2\", \"2\", \"1\"]) == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 5 3\") == \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5\\n1 1 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\n5 3 2\\"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'NO'\nassert solution('2') == 'YES'\n\n\nassert solution('5') == 'NO'\nassert solution('3') == 'NO'\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"NO\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"1 1 1 1 1 1\") == \"YES\"\nassert solution(\"1 2 2 2\") == \"YES\"\nassert solution(\"1 3 4 5\") == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input().strip()) == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"6\") == \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2, [2, 2, 2, 2, 5]) == \"YES\"\nassert solution(3, [3, 3, 3, 5]) == \"NO\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"asdf\") == 1\nassert solution(\"aaaaa\") == -1\nassert solution(\"asdf\") == -1\nassert solution(\"asf\") == -1\nassert solution(\"adf\") == -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 233, \"Answer is wrong\"\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('abc') == '0', 'incorrect'\nassert solution('aab') == '-1', 'incorrect'\nassert solution('abca') == '-1', 'incorrect'\nassert solution('abcdef') == '-1', 'incorrect'\nassert solution('abcddd') == '-1', 'incorrect'\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"4\", \"5\", \"6\"]) == \"4\"\nassert solution([\"5\", \"6\", \"7\"]) == \"7\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"-1\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"asdf\") == -1\nassert solution(\"asd\") == 0\nassert solution(\"asdfa\") == -1\nassert solution(\"aasdf\") == -1\nassert solution(\"asdfaasdf\") == 0\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"233\"\n\nPass\n\n-----Constraints-----\n\n1 <= n <= 50\n1 <= k <= 100\n\nSample Input\n\n4 5\nasdf\n\nSample Output\n\n4\n\nExplanation\n\nAll possible strings are of length n and with the following constraints:\n\n0 <= n <= 100\ns[i] can be used to add to the set S.\ns[i] can not be used to delete from the set S.\ns[i] can not be used to add or delete from the set S.\ns[i] can not be used to delete or add from the set S.\n\nExample 1:\n\nInput\n\n5 6\nasdf\nasd\nadf\nsdf\nasd\nsdf\nsdf\nsdf\nsdf\n\nSample Output\n\n10\n\nExplanation:\n\nThe set S is { \"asd\", \"adf\", \"asdf\", \"sdf\", \"sdf\", \"sdf\", \"sdf\", \"sdf\" }.\n\nSample Explanation\n\nThe maximum possible total cost is $10$, and it means that S = { \"sdf\", \"sdf\", \"sdf\", \"sdf\", \"sdf\", \"sdf\", \"sdf\", \"sdf\" }.\n\n\"\"\"\n\nclass Solution:\n    def minCostToSuppose(self, costs: List[List[int]], k: int) -> int:\n        result = 0\n        costs = sorted(costs, key=lambda x: x[0])\n        for i in range(k):\n            cost = costs[i][0]\n            new_cost = 0\n            for j in range(i, len(costs)):\n                new_cost += costs[j][0] - cost\n            result = max(result, new_cost)\n        return result"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 233\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"asdf\", \"asd\", \"adf\", \"asf\", \"sdf\"]) == \"5\"\nassert solution([\"asd\", \"asdf\", \"asdf\", \"sdf\"]) == \"5\"\nassert solution([\"a\", \"a\", \"b\", \"b\", \"a\"]) == \"0\"\nassert solution([\"aaaaa\"]) == \"0\"\nassert solution([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]) == \"0\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 233\n\nprint(solution(input()))\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 233\nassert solution(stdin) == -1\nassert solution(stdin) == 2\nassert solution(stdin) == 11\nassert solution(stdin) == 4\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 2 2\") == \"3\"\nassert solution(\"3 1 1\") == \"3\"\nassert solution(\"3 1 2\") == \"4\"\nassert solution(\"30 20 10\") == \"7\"\nassert solution(\"100 20 10\") == \"3\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2 3\") == \"3\"\nassert solution(\"1 100 1\") == \"4\"\nassert solution(\"30 20 10\") == \"7\"\nassert solution(\"6\") == \"0\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"2 2 2\") == \"3\"\nassert solution(\"2 3 2\") == \"3\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution(\"1 1 0\") == \"3\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2 2\") == \"7\"\nassert solution(\"3 1 1\") == \"3\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"1 100 2\") == \"4\"\nassert solution(\"1 100 3\") == \"7\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"7\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"39\"\nassert solution(inp) == \"7\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    inp := list(map(int, stdin.split()))) == str(10000)\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"7\""
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 2 2') == '7'\nassert solution('3 2 1') == '3'\nassert solution('3 1 2') == '4'\nassert solution('30 20 10') == '39'\nassert solution('30 20 50') == '26'\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5\\n4\\n1\\n5\\n5\\n7\\n8\\n7\\n8\\n9\\n9\\n10\\n1\\n2\\n2\\n3\\n3\\n3\\n4\\n4\\n5\\n5\\n6\\n1\\n4\\n4\\n5\\n6\\n7\\n7\\n8\\n8\\n9\\n9\\n10\\n11\\n12\\n1\\n1\\n2\\n3\\n3\\n4\\n4\\n5\\n6\\n7\\n8\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 3 4\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"5 6\") == \"NO\"\nassert solution(\"7 4\") == \"NO\"\nassert solution(\"5 7\") == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\nprint('Success')"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1,2,3,4,5,6\") == \"0\"\nassert solution(\"1,3,4,5,6\") == \"1\"\nassert solution(\"1,3,4,5,6\") == \"1\"\nassert solution(\"1,2,3,4,5,6\") == \"1\"\nassert solution(\"1,2,3,4,5,6\") == \"0\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()), \"Invalid input\"\n\nInput:\n3\n1 4\n1 2 3 4\n\nOutput:\n1\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '0'\nassert solution(input) == '1'\nassert solution(input) == '1'\nassert solution(input) == '1'\nassert solution(input) == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('1') == '1'\nassert solution('1') == '2'\nassert solution('2') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 4 6\"\n) == 1\nassert solution(\n    \"2 2 6\"\n) == 1\nassert solution(\n    \"1 2 3 4 5 6\"\n) == 1\nassert solution(\n    \"1 1 1 1\"\n) == 1\nassert solution(\n    \"0\"\n) == 0"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3) == 0\nassert solution(5) == 1\nassert solution(6) == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 1\nassert solution(5) == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 5\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"(()()()()()\", \"(()(()()())\"]) == \"5\"\nassert solution([\"((()(()()(((((((\", \"(((((())\") == \"5\"\nassert solution([\"((((((()\"]) == \"0\"\nassert solution([\"(((()\"]) == \"1\"\nassert solution([\"(()\", \"(()\", \"(())\"]) == \"1\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"()()()\") == 4\nassert solution(\"(()())\") == 0\nassert solution(\"((()))\") == 1\nassert solution(\"((()()))\") == 2\nassert solution(\"((()()()))\") == 3\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\n\nprint(\"coding done\")\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"()()\") == 0, \"nothing\"\nassert solution(\"((()))\") == 0, \"nothing\"\nassert solution(\"(()())\") == 0, \"nothing\"\nassert solution(\"(()())\") == 1, \"one\"\nassert solution(\"()\") == 1, \"one\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0, 'failed'\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\"()()()\",\n     \"(()())\",\n     \"()()()\",\n     \"()()()()\",\n     \"(()(()))\",\n     \"()()()()()\",\nn(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\\\"()((()))()\\\"), 4\nassert solution(\\\"((()()))()()\\\"), 5\nassert solution(\\\"(()()()()()()())()()()()()()()()()()()\\\"), 9\nassert solution(\\\"(()()()())()()()()()()()()()()()()()()()()()()\\\"), 12\nassert solution(\\\"()((()))()()()()()()()()()()()()()()()()()()()\\\"), 21\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\n\n\n\"\"\"\n\nclass Solution:\n    def countSubseq(self, seq, s):\n        d = collections.defaultdict(int)\n        for i, c in enumerate(seq):\n            d[c] += 1\n            if c == s[i]:\n                d[s[i]] += 1\n            if i == len(seq)-1:\n                break\n        return sum(d.values()) % (10**9+7)\n\nassert solution(stdin) == str(self.countSubseq(stdin, \"((()))\"))"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == -1\nassert solution(stdin) == 2\nassert solution(stdin) == -1\nassert solution(stdin) == 3\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n\"\"\"\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        x = 0\n        while x < len(nums):\n            if nums[x] == 0:\n                nums.pop(x)\n                nums.pop(x)\n                x -= 1\n            else:\n                x += 1\n        while x < len(nums):\n            if nums[x] == 0:\n                nums.pop(x)\n            else:\n                x += 1\n        while x < len(nums):\n            if nums[x] == 0:\n                nums.pop(x)\n            else:\n                x -= 1\n\nprint(Solution().moveZeroes(stdin))"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\n\nprint(solution(input()))\n\n--------------------------------------------------------------------------------------------------------------------\nInput\n\nThe first line contains an integer $n$ (1\u2264n\u226410^3).\n\nOutput\n\nIf it is impossible to obtain a number that is divisible by $25$, print -1. Otherwise print the minimum number of moves required to obtain such number.\n\nNote that you can swap only adjacent digits in the given number.\n\nExample\n\nFor n = 50, the output should be\nsolution(str(n)) = 3\n\nExplanation\n\nThe sequence $2,3,5$ shows the possible moves required to obtain the number $25$.\n\nFor n = 50, the output should be\nsolution(str(n)) = 2\n\nExplanation\n\nThe sequence $5,5,5$ shows the possible moves required to obtain the number $25$ but there is no such move.\n\nExample\n\nFor n = 50, the output should be\nsolution(str(n)) = -1\n\nExplanation\n\nThe sequence $25,25,25$ shows the possible moves required to obtain the number $25$ but there is no such move.\n\nFor n = 5701, the output should be\nsolution(str(n)) = -1\n\nExplanation\n\nThe sequence $1,1,1$ shows the possible moves required to obtain the number $5701$ but there is no such move.\n\nFor n = 7501, the output should be\nsolution(str(n)) = -1\n\nExplanation\n\nThe sequence $1,1,1$ shows the possible moves required to obtain the number $7501$ but there is no such move.\n\nFor n = 7510, the output should be\nsolution(str(n)) = -1\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7510$ but there is no such move.\n\nFor n = 7510, the output should be\nsolution(str(n)) = -1\n\nExplanation\n\nThe sequence $10,10,10$ shows the possible moves required to obtain the number $7510$ but there is no such move.\n\nFor n = 7510, the output should be\nsolution(str(n)) = -1\n\nExample\n\nFor n = 7701, the output should be\nsolution(str(n)) = 1\n\nExplanation\n\nThe sequence $1,2,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = -1\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = -1\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 1\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution(str(n)) = 0\n\nExplanation\n\nThe sequence $1,10,10$ shows the possible moves required to obtain the number $7701$ but there is no such move.\n\nFor n = 7701, the output should be\nsolution"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin) == -1\nassert solution(\n    stdin) == 4\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5071') == -1\nassert solution('705') == 4\nassert solution('1241367') == 1\nassert solution('1234660') == 2\nassert solution('12341440') == -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == -1\n'''"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 1\nassert solution(10) == -1\nassert solution(25) == -1\nassert solution(27) == 1\nassert solution(2700) == 2\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"7\") == \"1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"5\") == \"1 1 1 1 1 1 1 1 1\"\nassert solution(\"3\") == \"1 1 1 1 1 1 1 1\"\nassert solution(\"2\") == \"1 2 1 2 1 2\"\nassert solution(\"1\") == \"1 1 1\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('abacbecfd') == '1 2 1 1 2 1 1 2 1'\nassert solution('aaabbcbb') == '1 1 2 1 2 1 1 2 1'\nassert solution('abcdedc') == '1 1 2 1 2 1 1 2 1'"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"8.4.5.6.1.3.5.7.8.9.10.2.3.4.1.2.1.8.2.2.7.4.5.9.3.3.1.5.5.6.4.4.5.1.9.4.2.5.8.6.7.7.5.1.4.4.5.4.8.2.9.9.4.3.5.2.1.5.7.2.4.4.8.2.8.8.3.8.5.8.3.4.2.6.2.7.7.6.6.4.7.4.2.3.2.5.2.1.3.8.2.8.3.8.4.7.8.6.8.2.7.8.1.2.5.2.3.7.2.9.8.3.2.2.9.1.4.9.9.2.6.8.3.3.1.5.9.3.9.7.5.5.8.3.4.1.8.2.6.2.3.5.3.3.1.8.2.7.7.2.9.2.4.5.6.7.5.2.3.4.7.9.1.1.7.8.6.8.2.2.8.7.5.4.7.3.5.9.9.2.7.3.6.9.2.4.2.5.8.3.3.4.9.5.9.8.7.8.2.2.1.2.2.2.7.4.2.2.8.4.9.2.5.7.4.3.4.4.2.2.7.5.4.8.1.8.8.8.2.2.4.3.7.7.7.8.2.4.3.8.8.8.2.6.9.8.5.2.9.6.2.5.7.6.2.7.2.8.6.7.8.8.2.2.7.2.3.3.8.1.9.4.3.2.9.5.4.3.8.1.2.3.7.2.9.1.9.3.2.5.1.3.7.6.1.5.3.7.6.8.8.3.9.7.2.8.9.1.7.3.8.3.1.9.6.1.5.1.7.2.3.8.6.9.2.4.2.5.5.6.2.9.4.1.3.5.7.7.3.6.4.5.2.8.5.2.7.6.9.5.2.6.6.2.8.7.3.2.2.7.1.8.2.7.8.2.8.2.3.2.1.6.1.7.2.3.8.7.8.3.1.5.7.1.7.8.6.5.8.3.7.4.3.7.7.7.8.1.3.9.4.9.3.8.7.8.1.2.5.6.8.6.5.7.2.2.4.2.4.4.3.3.8.3.2.2.5.8.3.8.2.8.1.4.7.8.2.3.1.3.3.5.1.2.5.5.7.7.2.2.5.5.6.7.2.5.5.1.5.7.5.9.4.2.7.7.8.8.2.4.8.7.1.9.3.7.4.1.8.7.2.5.7.7.9.3.2.6.1.3.2.4.4.7.3.8.5.7.8.5.2.3.2.6.1.6.1.2.9.8.4.4.1.5.3.9.3.7.7.2.4.9.1.3.5.2.7.6.2.9.3.8.7.9.9.3.2.6.9.3.4.6.3.7.9.7.8.9.2.2.5.3.2.6.1.9.9.8.2.9.6.7.4.1.3.6.1.4.8.1.9.3.3.5.7.2.2.5.8.3.7.6.2.4.8.8.5.6.2.3.8.2.1.6.2.9.3.5.2.7.7.6.7.8.1.3.6.8.2.4.1.5.5.6.4.7.9.6.5.2.3.4.6.4.7.5.4.8.9.2.8.1.3.2.6.7.2.9.1.5.5.2.3.4.6.5.7.2.3.7.1.9.1.1.3.2.2.6.1.5.9.7.2.4.5.7.5.6.3.7.8.1.9.1.6.3.8.9.9.1.5.3.9.7.1.9.1.3.2.3.6.5.2.3.2.6.5.1.4.3.3.8.7.8.3.1.7.5.1.8.9.4.9.3.2.5.3.4.9.7.7.3.3.7.9.1.6.3.8.4.4.7.1.7.1.9.4.6.7.9.9.9.3.1.4.8.2.3.7."
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('abcde') == '1 2 1 1 2 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('aaabbcbb', 7) == 1, 'pass'\nassert solution('abcde', 8) == 1, 'pass'\nassert solution('abcd', 7) == 1, 'pass'\nassert solution('aaabcaa', 8) == 1, 'pass'\nassert solution('aaabbcbb', 7) == 2, 'pass'\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == \"YES\"\n\n\nExplanation\n\nstdin contains strings with non-consecutive letters, hence we need to figure out which of these letters are present.\n\nThe idea is that the substring of the given string is a substring of the given string.\n\nSo given that given strings are strings, there are only 2 possible ways:\n\nconsecutive letters of the given string are present in the string.\n\nFor example, given string \"ba\", given strings are \"baab\", \"abaab\", and \"abbab\".\n\n\n-----------------\n\nthe string has non-consecutive letters.\n\nSo we can reorder the strings to contain non-consecutive letters, we can reorder the strings to contain consecutive letters, and we can reorder the strings to contain consecutive letters.\n\n-----------------------\n\nthe string has a consecutive letters.\n\nSo we can reorder the strings to contain consecutive letters, we can reorder the strings to contain consecutive letters, and we can reorder the strings to contain consecutive letters.\n\n-----------------------\n\nthe string has at least 2 consecutive letters, hence we can reorder the strings to contain the characters with the same order of letters.\n\nSimilarly, the strings are consecutive, hence we can reorder the strings to contain consecutive letters, and we can reorder the strings to contain consecutive letters.\n\n-----------------------\n\nall the strings have at least 2 consecutive letters, hence we can reorder the strings to contain the characters with the same order of letters.\n\nExample :\n\nInput :\n\n5\na\nbab\nabacaba\nabaabab\n\nOutput :\n\nYES\na\nbab\nabaabab\nabaabab\nbab\nabaabab\n\n\nInput :\n\n2\nq\nq\nq\nq\n\nOutput :\n\nNO\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abba\") == \"YES\"\nassert solution(\"baa\") == \"YES\"\nassert solution(\"aabab\") == \"NO\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"abab\") == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"YES\"\nassert solution(\"five\") == \"YES\"\nassert solution(\"four\") == \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3) == \"YES\", \"incorrect output\"\nassert solution(5) == \"YES\", \"incorrect output\"\nassert solution(2) == \"NO\", \"incorrect output\"\nassert solution(1) == \"YES\", \"incorrect output\"\nassert solution(4) == \"YES\", \"incorrect output\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"aabab\") == \"a\"\nassert solution(\"aab\") == \"a\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"ab\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"a\",\"q\",\"w\",\"y\",\"t\",\"y\",\"t\",\"a\",\"t\",\"u\",\"y\"]) == \"YES\"\nassert solution([\"a\",\"q\",\"w\",\"y\",\"t\",\"a\",\"t\",\"a\",\"t\",\"u\",\"y\"]) == \"YES\"\nassert solution([\"a\",\"q\",\"w\",\"y\",\"t\",\"a\",\"t\",\"a\",\"t\",\"u\",\"y\"]) == \"NO\"\nassert solution([\"a\",\"q\",\"w\",\"y\",\"t\",\"a\",\"t\",\"a\",\"t\",\"u\",\"y\"]) == \"YES\"\nassert solution([\"a\",\"q\",\"w\",\"y\",\"t\",\"a\",\"t\",\"a\",\"t\",\"u\",\"y\"]) == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution == \"YES\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"5 100\") == \"0\"\nassert solution(\"5 1000\") == \"0\"\nassert solution(\"5 100 100\") == \"0\"\nassert solution(\"5 4 2 1 3\") == \"0\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\n\nInput\n5 2\n1 2\n2 1 2\n3 1 2\n3 2 1\n3 1 2\n3 1 2\n3 1 2\n3 1 2\n3 1 2\n3 1 2\n3 1 2\n3 1 2\n3 1 2\n3 1 2\n3 1 2\n3 1 2\n3 1 2\n3 1 2\n3 1 2\n3 1 2\n\nOutput\n5\n\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\n\n-----Done-----\n'''"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"11\"\nassert solution(\"2 3 4 6 7 8 9\") == \"10\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"6\"\nassert solution(\"5 5 5 5\") == \"0\"\nassert solution(\"5 4 3 2 1 3\") == \"0\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 5\n\n-----Constraints-----\n0\n\nSample Input\n\n8 4\n4 2 3 1 5 1 6 4\n\nSample Output\n\n5\nExplanation\n\nMishka solves problems in the following order: $[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6]$, so the maximum number of solved problems will be equal to $5$.\n\n-----Constraints-----\n0\n\nSample Input\n\n5\n4 2 3 1 5 1 6 4\n\nSample Output\n\n0\nExplanation\n\nMishka solves all the problems as he can.\n\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5, 4) == 5\nassert solution(5, 2) == 5\nassert solution(5, 100) == 5\nassert solution(5, 12) == 5\nassert solution(5, 56) == 5\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 100\") == \"5\"\nassert solution(\"5 200\") == \"3\"\nassert solution(\"5 300\") == \"1\"\nassert solution(\"5 400\") == \"0\"\nassert solution(\"5 500\") == \"0\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\n        \"2 4\",\n        \"5 3 4 2 1 6\",\n        \"5 5 5 3 1\",\n        \"2 1\",\n        \"1 2 3 4 5\",\n        \"5 5\",\n        \"1 2\",\n        \"2 3 2 3\",\n        \"5 5 2 1\",\n        \"1 3\",\n        \"1 4\",\n        \"5 2\",\n        \"3 3\",\n        \"1 1 1 1\",\n        \"1 3\",\n        \"3 3\",\n        \"2 1\",\n        \"2 2\",\n        \"1 1 1 1\",\n        \"1 2\",\n        \"1 3\",\n        \"3 3\",\n        \"1 1\",\n        \"3 3\",\n        \"1 4\",\n        \"2 3\",\n        \"2 3\",\n        \"1 1\",\n        \"2 2\",\n        \"1 1\",\n        \"1 2\",\n        \"1 3\",\n        \"2 1\",\n        \"1 2\",\n        \"2 1\",\n        \"1 1 1 1\",\n        \"3 2\",\n        \"2 2\",\n        \"1 1\",\n        \"2 1\",\n        \"3 3\",\n        \"2 1\",\n        \"1 1 1 1\",\n        \"1 2\",\n        \"2 2\",\n        \"1 1\",\n        \"2 2\",\n        \"1 1\",\n        \"2 3\",\n        \"1 3\",\n        \"2 1\",\n        \"1 2\",\n        \"2 1\",\n        \"1 1 1 1\",\n        \"1 2\",\n        \"1 3\",\n        \"3 2\",\n        \"1 1\",\n        \"2 1\",\n        \"1 1\",\n        \"2 1\",\n        \"1 1 1 1\",\n        \"2 1\",\n        \"1 2\",\n        \"1 3\",\n        \"2 3\",\n        \"2 1\",\n        \"2 1\",\n        \"1 1\",\n        \"2 1\",\n        \"1 1\",\n        \"2 2\",\n        \"1 3\",\n        \"2 2\",\n        \"1 1\",\n        \"2 1\",\n        \"2 1\",\n        \"1 2\",\n        \"1 1\",\n        \"1 1\",\n        \"1 2\",\n        \"1 2\",\n        \"1 1\",\n        \"2 1\",\n        \"1 1 1 1\",\n        \"2 2\",\n        \"1 2\",\n        \"1 1\",\n        \"2 1\",\n        \"1 1\",\n        \"1 2\",\n        \"1 1\",\n        \"1 2\",\n        \"1 1\",\n        \"1 1 1 1\",\n        \"1 2\",\n        \"1 3\",\n        \"3 2\",\n        \"1 2\",\n        \"1 2\",\n        \"1 1\",\n        \"1 1\",\n        \"2 1\",\n        \"1 2\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1 1 1\",\n        \"2 2\",\n        \"1 2\",\n        \"1 1\",\n        \"1 1\",\n        \"2 1\",\n        \"1 1\",\n        \"2 1\",\n        \"1 1\",\n        \"1 1\",\n        \"2 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 2\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"2 2\",\n        \"1 2\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 2\",\n        \"1 2\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"2 1\",\n        \"1 2\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n        \"1 1\",\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n\ninput\n3 3\n\noutput\n7\n\ninput\n3 3\n\noutput\n12\n\"\"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"4 3\"\n) == 12\nassert solution(\n    \"9 3\"\n) == 14\nassert solution(\n    \"506 2708\"\n) == 3218\n\"\"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"7 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(read()\n\n-----Constraints-----\n1 <= stdin.length <= 10^3\n\n0 <= a <= 10^14\n\n0 <= b <= 10^14\n\n0 <= c <= 10^14\n\n-----Time Limit-----\n1 minute\n\n0 <= k <= 10^14\n\n1 <= lines(starting from 1) <= 100\n\nTestcase Example:\n\nSample Input-1:\n\n3\n4\n5\n6\n\nSample Output-1:\n\n1\n\nSample Input-2:\n\n5\n5\n6\n\nSample Output-2:\n\n17\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 3 2\") == \"12\"\nassert solution(\"4 3 2\") == \"14\"\nassert solution(\"6 3 2\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\nassert solution(\"9 6\") == \"12\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == str(3218)\n'''"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"8 2\") == \"9\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"3 5\") == \"4\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 7\") == \"3 7\"\nassert solution(\"4 6\") == \"4 6\"\nassert solution(\"4 4\") == \"4 4\"\nassert solution(\"9 7\") == \"9 7\"\nassert solution(\"506 2708\") == \"14 12\"\n\nThe input can be modified.\n\nFor example, it is possible to change the diagonal lines of the input to the left and right.\n\n\n-----Input-----\n\n3 7\n\nOutput\n14\n\n-----Example-----\nInput:\n3 7\n7 6 4 5\n7 6 5 4\n5 5 6 7\n\nOutput:\n7\n6\n\n-----Note-----\n\nThe input can be modified.\n\nFor example, it is possible to change the diagonal lines of the input to the top and bottom.\n\n\n-----Input-----\n\n3 7\n4 5 6\n\nOutput\n14\n\n-----Example-----\nInput:\n1 4 5 7\n7 3 4 6\n8 7 6 4\n\nOutput:\n1 4\n8\n7\n\n-----Note-----\n\nThe input can be modified.\n\nFor example, it is possible to change the diagonal lines of the input to the left and right.\n\n\n\n-----Input-----\n\n3 7\n1 3 7\n7 6 4 5\n\nOutput:\n7\n3\n\n-----Example-----\nInput:\n4 5 6 8\n1 2 3 4 5\n\nOutput:\n3 4\n5\n\n-----Note-----\n\nThe input can be modified.\n\nFor example, it is possible to change the diagonal lines of the input to the top and bottom.\n\n\n\n-----Input-----\n\n506 2708\n\nOutput\n3218\n\n-----Example-----\nInput:\n1 6 5 4\n1 6 5 4\n2 3 4 5\n2 3 5 4\n3 4 5 6\n\nOutput:\n1 6\n6\n\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"abcde\") == \"YES\""
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"aaabbcbb\") == \"NO\"\nassert solution(\"abcdedc\") == \"YES\"\nassert solution(\"abcde\") == \"NO\"\nassert solution(\"\") == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"ababcd\") == \"YES\"\nassert solution(\"abcd\") == \"NO\"\nassert solution(\"abcd\") == \"NO\"\nassert solution(\"abcd\") == \"YES\"\nassert solution(\"abce\") == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    ['abcdefghijklmnopqrstuvwxyz',\n     'abcdefghijklmnopqrstuvwxyz'\n     ]\n) == '011010101'\n\"\"\"\n\nimport sys\nimport math\n\n\nclass Solution:\n    def colorString(self, string: str) -> str:\n        pass\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"abacbecfd\") == \"YES\"\nassert solution(\n    \"aaabbcbb\") == \"YES\"\nassert solution(\n    \"abcdedc\") == \"NO\"\nassert solution(\n    \"abcde\") == \"NO\"\nassert solution(\n    \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0) == 'NO', \"test 1 failed\"\nassert solution(1) == 'YES', \"test 1 failed\"\nassert solution(2) == 'YES', \"test 1 failed\"\nassert solution(3) == 'YES', \"test 1 failed\"\nassert solution(4) == 'YES', \"test 1 failed\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == \"YES\"\nassert solution(s) == \"NO\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"2 2\") == -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"A B\") == -1\nassert solution(\"2 2\") == 25\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2, 2) == 25\nassert solution(2, 3) == -1"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == 5\nassert solution(\"11 21\") == 1\nassert solution(\"10 3\") == -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2 2) == 25\nassert solution(0) == -1\nassert solution(1) == 2\nassert solution(1) == 2\nassert solution(2) == 2\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"2 2\"\n    ) == 25\nassert solution(\n    \"3 6\"\n    ) == -1\nassert solution(\n    \"2 2\"\n    ) == 25\nassert solution(\n    \"1 1\"\n    ) == 2\nassert solution(\n    \"1 1\"\n    ) == 2\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2 2\"\n) == 25\nassert solution(\n    \"2 2\"\n) == -1\n\"\"\"\n\nclass Solution:\n    def calculatePrice(self, price: int) -> int:\n        res = 0\n        for a, b in zip(str(price), str(price)[::-1]):\n            if int(a) + int(b) > 0:\n                res += int(a) * int(b)\n        return res\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 25\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5 2') == '25'\nassert solution('5 4') == '25'\nassert solution('5 1') == -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == 25\nassert solution(\"1 3\") == -1\nassert solution(\"6 7\") == 25\nassert solution(\"6 9\") == 25\nassert solution(\"6 10\") == 25\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 2 4 5 6 8\") == \"YES\"\nassert solution(\"3 2 4 5 6 8\") == \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"2 4\") == \"NO\"\nassert solution(\"3\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['24', '24', '24', '24', '24', '24', '24', '24', '24', '24', '24', '24']) == 'YES'\nassert solution(['24', '24', '24', '24', '24', '24', '24', '24', '24', '24', '24', '24']) == 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 3 6 5 8\") == \"YES\"\nassert solution(\"1 4 9 10 5\") == \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"11 11 6\") == \"YES\"\nassert solution(\"8 8 5 4\") == \"NO\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"3 1 2 3\") == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"26 6\"\n) == \"YES\"\nassert solution(\n    \"8 3\"\n) == \"NO\"\nassert solution(\n    \"1 1\"\n) == \"YES\"\nassert solution(\n    \"9 4\"\n) == \"NO\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 3"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"5 20\") == \"3\"\nassert solution(\"4 6\") == \"3\"\nassert solution(\"10 -2\") == \"3\"\nassert solution(\"8 -1\") == \"3\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == max([len(project) for project in stdin.split()])\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sys.stdin.readline()) == '3'\n\nassert solution(sys.stdin.readline()) == '5'\n\nassert solution(sys.stdin.readline()) == '14'\n\nassert solution(sys.stdin.readline()) == '80'\n\nassert solution(sys.stdin.readline()) == '80'\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '3'\n\n\n-----Time complexity-----\n\nTo calculate the time complexity of the following solution is O(n), which is the largest case. The time complexity of the above two lines is O(n) because Polycarp's rating will increase or decrease by $b_i$, and Polycarp will have to select the subset of projects having maximum possible size and the order in which he will complete them, so he has enough time to complete all the projects in his current order.\n\nAs a time complexity grows, the worst case is O(n).\n\n------Space complexity-----\n\nThe input is not read nor processed.\n\nInput\n10\n5 20\n4 6\n10 -2\n8 -1\n\nOutput\n10\n\nInput\n5\n300 -300\n1 299\n1 123\n1\n\nOutput\n10\n\nInput\n5\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 4') == '3'\nassert solution('5 20') == '5'\nassert solution('45 -6') == '5'\nassert solution('34 -15') == '4'\nassert solution('10 34') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input().strip(\"-\")) == \"3\"\nassert solution(input().strip(\".\")) == \"3\"\nassert solution(input().strip(\"-\")).isnumeric() == True\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('-2 0') == '1 0'\nassert solution('10 0') == '0 0'\nassert solution('1 -1') == '1 0'\nassert solution('1 -1') == '0 0'\nassert solution('1 2') == '0 0'\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution == 10, \"solution function is wrong\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 5 5\") == \"YES\"\nassert solution(\"5 8 8\") == \"YES\"\nassert solution(\"6 9 6\") == \"NO\"\nassert solution(\"6 1 1\") == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\"\nassert solution(\"2 1 1 1 1 3 3 3 3\") == \"YES\"\nassert solution(\"3 4 1 2 4 3 4 4 3 4\") == \"YES\"\nassert solution(\"1 0 0 0 0 0 0 0\") == \"YES\"\nassert solution(\"0 0 0 0 0 0 0 0\") == \"YES\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Test-----\n\nassert solution(stdin) == \"YES\"\n\n\n-----Time complexity-----\n\nO(n*n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(1)\n\nO(1)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(1)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(1)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\n\nassert solution(input()) == \"NO\"\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"8\") == \"NO\"\nassert solution(\"9\") == \"NO\"\nassert solution(\"1\") == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\nclass Solution:\n    def __init__(self):\n        self.isPalindrome = False\n        self.ret = \"\"\n        \n    def isPalindrome(self, s: str) -> bool:\n        s = s.lower()\n        # Initialize a variable, which is initialized to False\n        is_palindrome = False\n        # Check every character\n        for char in s:\n            # Check if it's a digit\n            if char.isdigit():\n                # Check if the number is the same, if not set it as a True\n                if self.is_palindrome(char):\n                    is_palindrome = True\n                else:\n                    is_palindrome = False\n            # If it is a number that is not a digit, set the flag as False\n            else:\n                is_palindrome = False\n                break\n        # If a number is an odd or even number, set it to False\n        if is_palindrome:\n            self.isPalindrome = True\n        else:\n            self.isPalindrome = False\n        return self.isPalindrome\n\n    def print(self, s: str) -> str:\n        self.ret = \"\"\n        for char in s:\n            # Check if it's a digit\n            if char.isdigit():\n                self.ret += char\n            else:\n                break\n        return self.ret\n\nclass Solution:\n    def __init__(self):\n        self.isPalindrome = False\n        self.ret = \"\"\n        \n    def isPalindrome(self, s: str) -> bool:\n        s = s.lower()\n        # Initialize a variable, which is initialized to False\n        is_palindrome = False\n        # Check every character\n        for char in s:\n            # Check if it's a digit\n            if char.isdigit():\n                # Check if the number is the same, if not set it as a True\n                if self.is_palindrome(char):\n                    is_palindrome = True\n                else:\n                    is_palindrome = False\n            # If it is a number that is not a digit, set the flag as False\n            else:\n                is_palindrome = False\n                break\n        # If a number is an odd or even number, set it to False\n        if is_palindrome:\n            self.isPalindrome = True\n        else:\n            self.isPalindrome = False\n        return self.isPalindrome\n\n    def print(self, s: str) -> str:\n        self.ret = \"\"\n        for char in s:\n            # Check if it's a digit\n            if char.isdigit():\n                # Check if the number is the same, if not set it as a True\n                if self.is_palindrome(char):\n                    self.ret += char\n                else:\n                    self.ret += \" \"\n            else:\n                break\n        return self.ret\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 1 2 1\") == \"YES\"\nassert solution(\"0 3\") == \"YES\"\nassert solution(\"0 7\") == \"NO\"\nassert solution(\"0 1 3\") == \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(str(input())) == \"YES\"\nassert solution(str(input())) == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\"\"4 4\n4 6\n10 -2\n8 -1\n\"\"\") == \"YES\", \"Expected YES\"\n\nassert solution(\"\"\"5 5\n5 -5\n10 2\n10 -10\n30 1\n30 0\n\"\"\") == \"NO\", \"Expected NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"YES\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^6\n1 <= n <= 100\n-300 <= a_i, b_i <= 300\n-10^9 <= r <= 10^9\n\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1,4) == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\n\nassert solution(stdin) == 'NO'"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\n-----Constraints-----\n1 <= n, r <= 30000\n-300 <= a_i, b_i <= 300\na_i \\le n \\le 300\nb_i \\le 300\n\nA student has to complete at most $a_i$ projects\nto complete all the projects.\n\n-----Time Limit-----\nYou will need to wait $10^6ms$ for the solution to finish.\n\n\n-----Example 1-----\nInput\n3 4\n4 6\n10 -2\n8 -1\n\nOutput\nYES\n\nInput\n3 5\n4 -5\n4 -2\n1 3\n\nOutput\nYES\n\nInput\n3 10\n10 0\n10 -10\n30 0\n\nOutput\nNO\n\nInput\n3 4\n4 -5\n4 -2\n1 3\n\nOutput\nNO\n\nInput\n4 4\n5 2\n5 -3\n2 1\n4 -2\n\nOutput\nNO\n\nInput\n4 4\n5 2\n5 -3\n2 1\n4 -2\n\nOutput\nNO\n\nInput\n3 10\n10 0\n10 -10\n30 0\n\nOutput\nNO\n\nInput\n4 4\n5 2\n5 -3\n2 1\n4 -2\n\nOutput\nNO\n\n-----Note-----\n\nIn the first example, the possible order is: $1, 2, 3$, and $2, 3, 1$.\n\nIn the second example, the possible order is: $2, 3, 1$, and $3, 1, 4$.\n\nIn the third example, the possible order is: $3, 1, 4, 2$, and $4, 2, 1, 3$.\n\nThe final example has $3, 1, 4, 2$ as the possible order.\n\n-----Time Limit-----\nYou will need to wait $10^6ms$ for the solution to finish.\n\n-----Solve-----\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"[0, 1, 0, 2, 2, 0, 3]\") == \"YES\"\nassert solution(\"[1, 2, 1]\") == \"NO\"\nassert solution(\"[1, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11]\") == \"NO\"\nassert solution(\"[1, 3, 5, 7, 11, 13, 14, 15, 16]\") == \"NO\"\nassert solution(\"[1, 3, 5, 7, 11]\") == \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"YES\"\nassert solution(\"5 2\") == \"NO\"\nassert solution(\"2 3 1 2\") == \"NO\"\nassert solution(\"8 3 1 4\") == \"NO\"\nassert solution(\"6 0 5 7\") == \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 'YES'\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 1 5\") == [\"0 0 0 0 0 0 0 0 0 1\", \"0 0 0 0 0 0 0 0 0 1\", \"0 0 0 0 0 0 0 0 0 0\"]\n\nassert solution(\"10 1 5\") == [\"0 0 0 0 0 0 0 0 0 1\", \"0 0 0 0 0 0 0 0 0 1\", \"0 0 0 0 0 0 0 0 0 0\"]\n\nassert solution(\"10 1 5\") == [\"0 0 0 0 0 0 0 0 0 1\", \"0 0 0 0 0 0 0 0 0 1\", \"0 0 0 0 0 0 0 0 0 0\"]\n\nassert solution(\"10 1 5\") == [\"0 0 0 0 0 0 0 0 0 1\", \"0 0 0 0 0 0 0 0 0 1\", \"0 0 0 0 0 0 0 0 0 0\"]\n\nassert solution(\"10 1 5\") == [\"0 0 0 0 0 0 0 0 0 1\", \"0 0 0 0 0 0 0 0 0 1\", \"0 0 0 0 0 0 0 0 0 0\"]\n\nInput\n10 1 5\n1\n\nOutput\nYES\n0 0 0 0 0 0 0 0 0 1\n\nInput\n10 1 5\n1\n\nOutput\nNO\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n1\n\nOutput\nYES\n0 0 0 0 0 0 0 0 0 1\n\nInput\n10 1 5\n2\n\nOutput\nNO\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n1\n\nOutput\nYES\n0 0 0 0 0 0 0 0 0 1\n\nInput\n10 1 5\n2\n\nOutput\nNO\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n1\n\nOutput\nYES\n0 0 0 0 0 0 0 0 0 1\n\nInput\n10 1 5\n2\n\nOutput\nNO\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n1\n\nOutput\nYES\n0 0 0 0 0 0 0 0 0 1\n\nInput\n10 1 5\n2\n\nOutput\nNO\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n1\n\nOutput\nYES\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n1\n\nOutput\nNO\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n2\n\nOutput\nNO\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n3\n\nOutput\nNO\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n4\n\nOutput\nNO\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n4\n\nOutput\nYES\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n5\n\nOutput\nYES\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n6\n\nOutput\nNO\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n6\n\nOutput\nNO\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n7\n\nOutput\nNO\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n7\n\nOutput\nYES\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n7\n\nOutput\nNO\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n7\n\nOutput\nNO\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5\n7\n\nOutput\nNO\n0 0 0 0 0 0 0 0 0 1\n\n------------------\n\nInput\n10 1 5"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 1 1') == 'YES'\nassert solution('3 2 2') == 'YES'\nassert solution('3 0 0 0') == 'YES'\nassert solution('5 2 1 1 0 0 0') == 'YES'\nassert solution('3 5 2 0 0 1') == 'YES'\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1 0\") == \"NO\"\nassert solution(\"1 0 0\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"0 1 1 0 0 0 1\") == \"YES\"\nassert solution(\"0 0 1 1 0 0 0\") == \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 2 1 4 2 4 2 2 2\") == \"YES\"\nassert solution(\"7 1 3 0\") == \"YES\"\nassert solution(\"6 4 5 3\") == \"YES\"\nassert solution(\"6 3 2\") == \"NO\"\nassert solution(\"6 0 3 0\") == \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2') == ['1', '0', '1', '0', '0', '0', '0', '0', '0', '0']"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"7 3 2\") == \"YES\"\nassert solution(\"10 1 11\") == \"YES\"\nassert solution(\"10 1 5\") == \"NO\"\nassert solution(\"10 1 5\") == \"YES\"\nassert solution(\"10 1 5\") == \"YES\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"asdfasdf\") == 3\nassert solution(\"test\") == \"tst\"\nassert solution(\"tset\") == \"se\"\nassert solution(\"contest\") == \"ct\""
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"bbaba\",\"bb\",\"bb\",\"bb\",\"baaba\",\"ab\",\"abcde\",\"abcde\",\"asdfasdf\",\"fasd\",\"asdfasdf\",\"fasd\"]) == 3\nassert solution([\"bb\",\"ba\",\"bba\",\"ab\",\"abcde\",\"ab\",\"abcde\",\"asdfasdf\",\"fasd\",\"asdfasdf\",\"fasd\"]) == 1\nassert solution([\"aa\",\"aa\",\"aa\",\"a\"]) == 1\nassert solution([\"aa\",\"aa\",\"a\"]) == 1\nassert solution([\"aa\",\"aa\",\"a\"]) == 2\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n'''\n\nimport collections\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('aaaba') == 3\nassert solution('aab') == 2\nassert solution('asdasdf') == 0\nassert solution('abcde') == 3\n\n\n\"\"\""
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"bb\") == 3\nassert solution(\"aabababa\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"asdfasdasdasdas\") == 3\nassert solution(\"aabbbbb\") == 2\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2') == 3, 'Input 2 does not solve the problem'\nassert solution('3') == 3, 'Input 3 does not solve the problem'\nassert solution('4') == 3, 'Input 4 does not solve the problem'\nassert solution('5') == 3, 'Input 5 does not solve the problem'\nassert solution('10') == 10, 'Input 10 does not solve the problem'\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2.5\") == \"3 2\"\nassert solution(\"4.0\") == \"9 9\"\nassert solution(\"0.9\") == \"9 9\"\nassert solution(\"0\") == \"1 0\"\nassert solution(\"1.5\") == \"1 5\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"10 3\"\nassert solution(stdin) == \"10 3 9\"\nassert solution(stdin) == \"10 3 9\"\nassert solution(stdin) == \"10 3 9\"\nassert solution(stdin) == \"10 3 9\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1.200000\") == 3, \"should return 3\"\nassert solution(\"2.572479\") == 10, \"should return 10\"\nassert solution(\"4.024922\") == 9, \"should return 9\"\nassert solution(\"5.0\") == 5, \"should return 5\"\nassert solution(\"1.0\") == 1, \"should return 1\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3 2\"\nassert solution(input()) == \"10 3\"\nassert solution(input()) == \"9 9\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '13'\nassert solution(stdin) == '14'\nassert solution(stdin) == '13'\nassert solution(stdin) == '14'\nassert solution(stdin) == '10'\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 10\nassert solution(input()) == 3\nassert solution(input()) == 2\nassert solution(input()) == 1\nassert solution(input()) == 9\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1.0\") == 2\nassert solution(\"2.0\") == 3\nassert solution(\"3.0\") == 4\nassert solution(\"4.0\") == 5\nassert solution(\"6.0\") == 10\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1.200000) == 2 and solution(2.572479) == 10 and solution(4.024922) == 9"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\u20181.200000\u2019) == 3 2\nassert solution(\u20182.572479\u2019) == 10 3\nassert solution(\u20184.024922\u2019) == 9 9"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\"\n\nimport sys\nfrom itertools import combinations\nimport collections"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 3, 3) == 'YES', \"test: 1,3 failed\"\nassert solution(1, 3, 4) == 'NO', \"test: 1,3 failed\"\nassert solution(1, 3, 6) == 'YES', \"test: 1,3 failed\"\nassert solution(1, 3, 8) == 'NO', \"test: 1,3 failed\"\nassert solution(1, 3, 10) == 'NO', \"test: 1,3 failed\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"YES\"\nassert solution(inp) == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('1 3 4') == '3 4 1'\nassert solution('1 2 3 4 5 6 7 8 9') == '3 7 6 8'\nassert solution('1 2 4 3 5') == '3'\nassert solution('2 5 6 7 3 4') == '2'\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 3 3') == 'YES'\nassert solution('2 2 2') == 'NO'\nassert solution('2 2 1') == 'YES'\nassert solution('2 6 7') == 'YES'\nassert solution('5 5 1') == 'NO'\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"11 4\n10 1\n5 2\n3 6\n8 2\n7 3\n4 1\n11 2\n9 4\n4 2\n6 1\"\"\") == \"YES\"\nassert solution(\"\"\"7 3\n4 5\n5 1\n4 2\n3 6\n2 7\n6 8\n8 5\n1 7\n8 9\n2 3\n10 1\n3 1\n4 8\n4 4\n5 7\n6 2\n7 7\n9 3\n9 2\n9 1\n2 3\n3 7\n6 8\n7 4\n7 2\n3 5\n6 7\n8 4\n3 4\n4 9\n7 7\n9 3\n5 2\n8 4\n1 6\n1 1\n3 5\n3 6\n9 2\n4 7\n4 5\n5 7\n4 3\n3 4\n6 3\n7 4\n5 7\n7 4\n1 6\n6 8\n8 5\n2 7\n1 3\n3 7\n3 6\n6 5\n7 4\n1 5\n6 3\n8 4\n7 3\n3 4\n7 4\n5 7\n2 6\n5 5\n5 6\n3 1\n2 3\n8 5\n7 6\n1 7\n3 2\n3 4\n8 5\n4 6\n7 2\n3 4\n5 7\n6 2\n7 4\n4 3\n3 2\n3 6\n3 7\n6 3\n5 2\n1 6\n4 4\n3 2\n2 6\n8 2\n3 7\n2 4\n4 3\n6 7\n3 4\n7 4\n6 5\n1 3\n1 5\n7 6\n5 2\n7 1\n5 8\n5 7\n7 4\n3 4\n2 4\n8 5\n6 8\n1 6\n8 3\n2 7\n3 6\n4 4\n4 3\n3 5\n6 2\n7 6\n3 2\n1 3\n7 3\n4 2\n3 7\n7 4\n1 4\n2 7\n1 5\n3 6\n3 7\n1 8\n8 4\n7 4\n6 8\n7 3\n4 5\n5 4\n1 6\n3 1\n2 4\n7 7\n1 3\n6 3\n4 4\n6 2\n4 8\n3 4\n3 5\n2 4\n7 4\n3 1\n6 7\n6 1\n4 5\n2 6\n3 7\n3 2\n3 4\n2 4\n8 5\n7 5\n3 4\n6 5\n3 1\n6 6\n2 6\n5 6\n2 7\n7 4\n1 3\n2 3\n1 8\n2 7\n2 4\n4 3\n6 7\n3 4\n5 7\n3 1\n3 6\n4 4\n5 4\n1 7\n2 4\n3 6\n4 5\n3 2\n1 6\n7 4\n1 3\n1 6\n6 2\n6 4\n7 3\n2 1\n1 4\n1 8\n4 6\n2 7\n7 4\n2 4\n6 3\n3 5\n3 2\n1 5\n7 4\n2 1\n3 2\n1 3\n2 4\n1 3\n3 4\n1 6\n1 8\n6 8\n1 7\n6 2\n1 1\n1 5\n1 7\n4 3\n7 4\n4 6\n1 4\n7 4\n1 7\n5 3\n6 4\n1 6\n1 7\n5 2\n3 7\n6 7\n7 6\n5 8\n7 8\n1 7\n3 4\n4 8\n1 4\n6 8\n1 2\n7 4\n3 6\n6 8\n1 5\n5 1\n3 4\n2 6\n2 2\n3 2\n4 5\n2 4\n4 6\n1 6\n2 7\n2 2\n3 2\n6 4\n3 1\n3 2\n7 4\n1 2\n2 7\n1 6\n3 4\n6 5\n2 4\n5 3\n7 4\n2 1\n2 6\n5 4\n2 7\n1 4\n1 1\n6 6\n3 2\n2 4\n4 3\n1 4\n6 7\n3 7\n3 2\n1 6\n1 3\n2 6\n3 4\n3 7\n4 5\n2 7\n1 5\n3 3\n1 8\n1 1\n4 3\n2 4\n1 6\n7 4\n1 2\n3 4\n2 4\n1 4\n3 6\n4 5\n1 5\n1 2\n2 3\n1 8\n1 7\n3 4\n6 3\n1 6\n3 2\n2 4\n1 1\n3 2\n5 7\n2 3\n2 1\n3 4\n3 7\n3 2\n1 4\n3 4\n4 3\n3 2\n3 7\n1 7\n1 7\n4 3\n3 2\n2 4\n3 5\n2 1\n1 2\n1 4\n5 6\n1 5\n1 1\n3 4\n3 2\n3 7\n3 1\n3 1\n2 2\n1 3\n1 6\n5 2\n3 7\n3 1\n1 6\n6 3\n1 5\n1 6\n7 4\n1 4\n1 1\n5 2\n6 5\n1 4\n3 6\n6 2\n1 4\n6 5\n3 7\n3 6\n7 4\n1 2\n6 4\n1 5\n1 4\n2 1\n1 4\n6 3\n3 2\n1 6\n1 3\n2 4\n3 5\n3 3\n1 3\n1 4\n5 5\n3 3\n2 3\n3 7\n3 2\n3 2\n5 1\n1 3\n6 4\n1 4\n1 3\n1 6\n3 4\n6 5\n1 4\n5 4\n3 4\n4 3\n6 5\n1 5\n2 3\n2 5\n1 2\n1 5\n2 2\n4 6\n3 2\n4 7\n5 5\n3 7\n4 5\n1 5\n3 4\n1 4\n1 1\n3 4\n3 2\n3 4\n3 5\n3 6\n5 2\n1 6\n6 3\n2 6\n3 2\n2 1\n3 4\n3 5\n3 4\n1 7\n3 7\n1 4\n1 6\n3 1\n6 6\n3 1\n3 6\n2 4\n3 7\n2 1\n3 2\n1 2\n3 7\n3 6\n4 6\n1 4\n1 5\n3 4\n3 7\n1 3\n2 2\n1 6\n3 3\n3 1\n2 3\n3 2\n1 3\n3 5\n3 4\n3 7\n1 4\n1 2\n3 4\n3 7\n3 2\n6 4\n1 2\n1 3\n3 2\n3 7\n3 4\n1 1\n3 1\n2 1\n1 3\n3 5\n3 3\n1 3\n1 4\n3 7\n2 4\n1 2\n3 4\n3 5\n3 2\n1 1\n5 1\n1 4\n3 4\n3 6\n3 4\n3 4\n6 4\n2 1\n5 3\n1 3\n3 2\n4 5\n3 7\n1 3\n3 5\n3 3\n3 3\n1 3\n4 2\n4 3\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\"\"4 4 3\n3 1 2\n1 2 3\n2 3 2\n3 3 1\n4 3 1\n4 5 2\n3 4 4\n3 6 5\n3 7 6\n\"\"\") == \"YES\"\nassert solution(\"\"\"4 4 3\n3 1 2\n1 2 3\n2 3 2\n3 3 1\n4 3 1\n3 4 4\n3 6 5\n3 7 6\n\"\"\") == \"YES\"\nassert solution(\"\"\"1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1111111\"\nassert solution(stdin) == \"1100011\"\nassert solution(stdin) == \"11001011\"\nassert solution(stdin) == \"01110101\"\nassert solution(stdin) == \"01111100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"00010110\") == \"01010\"\nassert solution(\"11101100\") == \"101100\"\nassert solution(\"111001\") == \"101101\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2, 1) == \"0011\"\nassert solution(3, 3) == \"101100\"\nassert solution(5, 6) == \"010100\""
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '0110010011101001010010110010100110110111111'\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0110\") == \"101100\"\nassert solution(\"1110\") == \"001011\"\nassert solution(\"1111\") == \"000101\"\nassert solution(\"111110\") == \"0001100\"\nassert solution(\"111111\") == \"001100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '010011010010'\n\n\nassert solution(stdin) == '01100101010'\nassert solution(stdin) == '111100111011'\n\nassert solution(stdin) == '111001000001'\nassert solution(stdin) == '111001010011'"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"01001101\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2, 3, 5, 6) == 1100, \"Fail\"\nassert solution(5, 3, 4, 5) == 101100, \"Fail\"\nassert solution(3, 3, 3, 4) == 110100, \"Fail\"\nassert solution(2, 3, 3, 4) == 100110, \"Fail\"\nassert solution(5, 3, 2, 3) == 011001, \"Fail\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"01010100\"\nassert solution(stdin) == \"101100\"\nassert solution(stdin) == \"1111111\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"ab\") == \"NO\"\nassert solution(\"ab\") == \"NO\"\nassert solution(\"bc\") == \"YES\"\nassert solution(\"abc\") == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\", 'failed'"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\"\n\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def findNthPattern(self, n: int, pattern: str, s: str) -> str:\n        \"\"\"\n        We can use dp array to store all the possible pattern\n        \"\"\"\n\n        def dfs(i, j):\n            if i > len(s) or j > len(pattern):\n                return\n            if i == len(s) or j == len(pattern):\n                return\n            if pattern[j] == s[i]:\n                dfs(i + 1, j + 1)\n            else:\n                dfs(i, j + 1)\n\n        res = []\n        dfs(0, 0)\n        return res[n - 1] if n > 0 else \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('ab') == 'ab', 'NO'\nassert solution('ab') == 'abc', 'YES'\nassert solution('bb') == 'bb', 'YES'\nassert solution('aab') == 'aab', 'NO'"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\" or solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"YES\", \"Should be YES\"\nassert solution(\"abcd\") == \"NO\", \"Should be NO\"\nassert solution(\"abab\") == \"YES\", \"Should be YES\"\nassert solution(\"ababcd\") == \"YES\", \"Should be YES\"\nassert solution(\"ababcbacb\") == \"YES\", \"Should be YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 'ab'), \"ab\"\nassert solution(2, 'ab'), \"cbc\"\nassert solution(3, 'ab'), \"cacbacbab\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('10 3 4 5 8 9') == '3 4 5 8 9'\nassert solution('-1 4 1') == '-1 1'\nassert solution('10 2') == '1 2'\nassert solution('-2 -1 1') == '-1 -1'\nassert solution('1 4') == '-1 -1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"2 1 2 3 4\"\nassert solution(stdin) == \"1 2 1\"\nassert solution(stdin) == \"1 2 3 4\"\nassert solution(stdin) == \"1 2 3 4\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(-1)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(4)\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(int(stdin)) == int(stdin)\nassert solution(int(stdin)) == -1\nassert solution(int(stdin)) == -1\nassert solution(int(stdin)) == 1\nassert solution(int(stdin)) == 1\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == \"3 1 2\"\nassert solution(1) == \"1 2\"\nassert solution(2) == \"1 2\"\nassert solution(4) == \"1 2 3 4\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\nfrom sys import stdin, setrecursionlimit\n\nsetrecursionlimit(10 ** 5)"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3 1 2 \n\n\n---My solution---"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 1 2\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input=\n    \"5\\n\"\n    \"3 2\\n\"\n    \"1 2 3\\n\"\n    \"4\\n\"\n    \"1 4\\n\"\n    \"4\\n\"\n    \"4\\n\"\n) == \"1\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '1'\n\n\nassert solution(input()) == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('') == 0\n\n\nassert solution(4) == 1\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 10 6 2 3\"\n) == \"1\"\nassert solution(\n    \"5 2 3\"\n) == \"2\"\nassert solution(\n    \"5 6 3\"\n) == \"3\"\nassert solution(\n    \"5 6 3 4 5\"\n) == \"1\"\nassert solution(\n    \"5 6 3 4 5 2\"\n) == \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 2\n\nassert solution(5) == 2\n\nassert solution(1) == 1\n\nassert solution(5) == 2\n\nassert solution(0) == 0"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '1'"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"incorrect input\"\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(st) == 5\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(10) == 5\n\n\"\"\"\nimport sys\nimport itertools"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == 5"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(10) == 5\nprint(solution(10))\n-----Sample Input-----\n2\n\n-----Sample Output-----\n3\n\n(1,1) cannot be reached in three moves.\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(INPUT) == '5'\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('10') == '5'\nassert solution('100') == '3'\nassert solution('9') == '4'\nassert solution('4') == '4'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4) == 5, \"answer is not correct\"\nassert solution(123) == 0, \"answer is not correct\"\nassert solution(4) == 4, \"answer is not correct\""
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\nassert solution(stdin) == '0 15'\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '119 226'\nassert solution(stdin) == '6'\nassert solution(stdin) == '3'\nassert solution(stdin) == '6'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"1 0\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(0)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(4)\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0 3\"\nassert solution(stdin) == \"0 15\"\nassert solution(stdin) == \"0 16\"\nassert solution(stdin) == \"0 17\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"0 1 0\") == \"0 1 0\"\nassert solution(\"5 3\") == \"5 3\"\nassert solution(\"5 5 5\") == \"5 5 5\"\nassert solution(\"5 5 5\") == \"5 5 5\"\nassert solution(\"5 5 5\") == \"5 5 5\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 3 0 4') == '0 1'\nassert solution('5 5 5 5') == '0 0'\nassert solution('5 5 5 5') == '0 0'\nassert solution('3 5 3') == '0 1'\nassert solution('3 3 3') == '0 1'\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n\"\"\") == \"0 15\"\nassert solution(\"\"\"\n3\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n3 0 0\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"a_1_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 11\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    5\n    5 4 1 3 2\n    5 1 1\n    1 3 4 1 2\n    3 2 2\n    1 3 4\n    4 3 1\n    5 3 1\n    3 4 1\n    3 2 2\n    2 2\n    \"\"\"\n) == \"4 4 4 4\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5 7\"\n\n\nInput\n4\n3 4 3 5 3 6 5\n\nOutput\n6\n3 5\n4 6\n5 5\n3 6\n\nInput\n3\n3 3 3 3 3 3 3\n\nOutput\n1\n1\n\nInput\n6\n3 3 3 3 3 3 3 3\n\nOutput\n6\n5\n6\n3\n3\n3\n3\n\n------------------\n'''\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\""
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"3\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4 3\"\nassert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"3 4\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    input=\n    '7 4 1 2 2 1 5 3'\n) == '3 4'\nassert solution(\n    input=\n    '11 -5 -4 -3 -2 -1 0 1 2 3 4 5'\n) == '3'\nassert solution(\n    input=\n    '4 1 2 2 1 5 3'\n) == '1 1 1 1'\nassert solution(\n    input=\n    '4 1 2 2 1 5 3'\n) == '2'\nassert solution(\n    input=\n    '11 -5 -4 -3 -2 -1 0 1 2 3 4 5'\n) == '2'\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"5\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"]) == '22'\nassert solution([\"4\", \"5\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"]) == '23'\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == '2'\nassert solution([\"-5\", \"-4\", \"-3\", \"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"]) == '2'\nassert solution([\"1\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\"]) == '2'\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 2 1 5 3\"), \"3\"\nassert solution(\"4 1 2 2 1 5 3\"), \"5\"\nassert solution(\"4 1 2 2 1 5 3\"), \"3\"\nassert solution(\"4 1 2 2 1 5 3\"), \"2\"\nassert solution(\"4 1 2 2 1 5 3\"), \"3\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1 2 3\"]) == \"YES\"\nassert solution([\"1 2 3 4 5\"]) == \"NO\"\nassert solution([\"1 2 3 4 5\"]) == \"NO\"\nassert solution([\"3 2 1 4 5 3\"]) == \"YES\"\nassert solution([\"1 2 3 4 5\"]) == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == \"YES\"\nassert solution(2) == \"NO\"\nassert solution(3) == \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"3\", \"1\", \"2\", \"2\", \"3\", \"2\", \"2\"]) == \"YES\"\nassert solution([\"1\", \"2\", \"2\", \"2\", \"3\", \"2\"]) == \"NO\"\n\n\nExample 1:\n\nInput:\n\n3\n1 2 3\n\nOutput:\n\nYES\n\n\nExample 2:\n\nInput:\n\n5\n1 2 1 1\n\nOutput:\n\nNO\n\n\nExample 3:\n\nInput:\n\n4\n2 2 2 1\n\nOutput:\n\nNO\n\n\nExample 4:\n\nInput:\n\n5\n2 3 2 3 2 1\n\nOutput:\n\nYES\n\n\nConstraints:\n\n1 <= stdin.length <= 5 * 10^4\n1 <= a_i <= 100\n1 <= n <= 10^3\n\n------ Solution -------\n\n### Dynamic programming\n\n### DP\n\ndp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + a[i-1][j-1]\n\n### DP"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nprint(\"PASS\")\n\nassert solution(\"1 2 3\") == \"NO\"\nprint(\"PASS\")\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, [5, 3, 1, 5]) == \"NO\"\nassert solution(3, [1, 2, 2, 3]) == \"NO\"\nassert solution(3, [5, 2, 1, 3]) == \"YES\"\nassert solution(3, [1, 2, 3, 4, 5]) == \"YES\"\nassert solution(3, [1, 3, 2, 4]) == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"abcde\", \"abcd\") == \"3\"\nassert solution(\"abcde\", \"abcde\") == \"3\"\nassert solution(\"abcde\", \"abcde\") == \"4\"\nassert solution(\"abcde\", \"abcde\") == \"5\"\nassert solution(\"abcde\", \"abcde\") == \"5\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"abcdef\", \"abdcef\", \"abdfce\", \"abdcd\", \"abdcf\", \"abdfc\"), \"return -1\"\nassert solution(\"abcde\", \"acdee\", \"abcdf\", \"acddd\", \"cdeff\", \"cdeef\"), \"return 4\"\nassert solution(\"abcdef\", \"abdcef\", \"abdcf\", \"abdfce\", \"abdcd\", \"abdcf\", \"abdfce\"), \"return 3\"\nassert solution(\"abcdef\", \"abdcef\", \"abdcf\", \"abdfce\", \"abdcd\", \"abdcf\", \"abdfce\"), \"return 2\"\nassert solution(\"abcdef\", \"abdcef\", \"abdcf\", \"abdcd\", \"abdcf\", \"abdcd\", \"abdcf\"), \"return 1\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abcdef\") == \"3\"\nassert solution(\"abcd\") == \"3\"\nassert solution(\"abdfec\") == \"3\"\nassert solution(\"abdcef\") == \"3\"\nassert solution(\"abdcf\") == \"3\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"abcdef\"\nassert solution(stdin) == \"abdfce\"\nassert solution(stdin) == \"abdcfe\"\nassert solution(stdin) == \"abdcef\"\nassert solution(stdin) == \"abcdef\"\n\nInput\n6\nabcdef\nabdfec\nabdcef\nabdcfe\nabdfce\nabdfec\n\nOutput\n4\n3 5 4 5 \n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abcdef\") == \"4\"\nassert solution(\"abcd\") == \"3\"\nassert solution(\"abcd\") == \"1\"\nassert solution(\"abdcef\") == \"0\"\nassert solution(\"abdfce\") == \"0\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"3 5 4 5\"\nassert solution(stdin) == \"1 0 2 0\"\nassert solution(stdin) == \"0 0 0 0\"\nassert solution(stdin) == \"1 0 1 1\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"abcdef\", \"abdcef\", \"abdcfe\", \"abdfce\", \"abdfec\"]) == \"4\"\nassert solution([\"abcd\", \"accd\", \"acd\"]) == \"1\"\nassert solution([\"abcd\", \"abd\", \"bcd\"]) == \"2\"\nassert solution([\"abcd\", \"abcd\", \"abcd\"]) == \"0\"\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input().strip()) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['abcdef','abdcef','abdcfe','abdfce','abdfec']), '-1'\nassert solution(['abcde','abdfc','acdb','acd','cde']), '3'\nassert solution(['abcd','abdfc','acdb','acd','cde']), '0'\nassert solution(['abcdef','abcdef','abcdef','abcdef','abcdef','abcdef']), '-1'\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"-1\"\n\n\n\"\"\""
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"P\"\nassert solution(\"ab\") == \"PS\"\nassert solution(\"aa\") == \"PS\"\nassert solution(\"babb\") == \"P\"\nassert solution(\"aab\") == \"SP\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"SPPSPSPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"SPPSPSPS\"\n\nassert solution(stdin) == \"PSS\"\n\nassert solution(stdin) == \"S\"\n\nassert solution(stdin) == \"SPSPS\"\n\nassert solution(stdin) == \"PSSPS\""
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"SPPSPSPS\"\nassert solution(stdin) == \"PSS\"\nassert solution(stdin) == \"PPPPPPPPPPPP\"\nassert solution(stdin) == \"PPPPP\"\nassert solution(stdin) == \"PSP\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abab\") == \"PPPSPSPS\"\nassert solution(\"aaa\") == \"PPPSPSPS\"\nassert solution(\"a\") == \"PP\"\nassert solution(\"ab\") == \"PPPS\"\nassert solution(\"a\") == \"P\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"SPPSPSPS\"\nassert solution(stdin) == \"PS\"\n\n\nTime Complexity\n---------------------\n\nO(N) - space complexity (O(N)) - number of chars in string\nO(N) - time complexity (O(N)) - number of chars in string\n\nSpace Complexity\n---------------------\n\nO(1) - the number of prefixes/suffixes (O(n)) - number of characters in string\nO(N) - the number of prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\nO(1) - the number of characters in prefixes/suffixes (O(n)) - the number of characters in string\n\n\n\n---------Problem 1-2---------\nTime Complexity\n------------\n\nO(N) - number of prefixes/suffixes (O(N))\nO(N) - time complexity (O(N))\n\nSpace Complexity\n------------\n\nO(N) - number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes (O(N))\nO(N) - the number of prefixes/suffixes"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"PPSPSPS\"\nassert solution(stdin) == \"PS\"\nassert solution(stdin) == \"PS\"\nassert solution(stdin) == \"PS\"\nassert solution(stdin) == \"SPPSPSPS\""
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 'SPPSPSPS'\nassert solution(3) == 'PS'\nassert solution(2) == 'SP'\nassert solution(1) == 'a'\nassert solution(0) == 'a'\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"SPPSPSPS\"\nassert solution(stdin) == \"PSS\"\nassert solution(stdin) == \"PPSP\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"SPPSP\"\nassert solution(stdin) == \"PS\"\nassert solution(stdin) == \"PSP\"\nassert solution(stdin) == \"P\"\nassert solution(stdin) == \"PP\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2 4 6 8 10\"]) == \"1\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n\n'''"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2 4 6 8 10) == 1\nassert solution(5 6 5 3 2) == 1\nassert solution(100 10 100) == 1\nassert solution(1000) == 1\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 100\n\n-----Time Limit-----\n1 seconds\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '1'\n\n\n### Solutions ####"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n\n--- Nguyen Minh ---\nO(n)\n\"\"\"\nfrom math import factorial, floor\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2 4 6 8 10) == 1\nassert solution(2 4 6 8 10) == 1\nassert solution(2 4 6 8 10) == 1\nassert solution(2 4 6 8 10) == 1\nassert solution(2 4 6 8 10) == 1\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 2 3 4 5 6 8 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 190 191 191 192 193 194 195 196 197 198 199 200 200 201 201 202 202 203 204 205 206 207 208 208 209 210 210 211 210 211 212 212 213 214 215 216 217 218 219 220 220 221 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 259 260 261 262 263 264 265 266 268 268 269 270 270 271 272 274 275 276 277 278 279 280 281 282 283 284 285 287 286 288 289 289 290 291 291 292 293 294 295 295 296 297 298 299 300 301 301 302 303 303 304 305 306 308 308 309 310 310 311 310 311 312 313 313 314 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 332 331 332 35 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 332 331 332 35 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 332 331 332 35 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 332 331 332 35 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 332 331 332 35 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 332 331 332 35 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 332 331 332 35 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 332 331 332 35 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 332 331 332 35 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 332 331 332 35 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 332 331 332 35 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 332 331 332 35 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 332 331 332 35 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 332 331 332 35 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\n\n\nInput\n5\n8 9 1 7 9 5 7 6 4 8 5\n\nOutput\n9\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 300\n1 <= stdin[i] <= 100"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 0\n\n\n\n-----Solution-----\nInput\n5\n1 1 0 0 0\n\nOutput\n1\n\nInput\n5\n1 1 1 1 1\n\nOutput\n0\n\nInput\n4\n1 1 1 1\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the second example people from flats $2$ and $7$ or $4$ and $7$ can turn off the light and nobody will be disturbed. It can be shown that there is no better answer in this example.\n\n\nassert solution(inp) == 0\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n\n0 <= stdin[i] <= 10^9\n\n------Coding Rules------\nRecall that:\n\nthe number of flats can be $n$\n\nthe state of light can be in the range [1,n]\n\nexample\nInput 1:\n\n7\n1 1 0 1 1 0 1 0 1 0\nOutput 1:\n\n2\n\nInput 2:\n\n6\n0 1 1 0 0 1 0 1 0\nOutput 2:\n\n0\n\n----links----\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\n\nPassed\n1\n\n'''\n\nimport sys"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 2\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1\"]) == 1\nassert solution([\"1\", \"2\", \"3\"]) == 3\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == 5\nassert solution([\"6\"]) == 6\nassert solution([\"6\", \"90\"]) == 6\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 5\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '10'\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin: str\n) == '1'\nprint(\"Correct!\")\n\n'''\nimport time\nfrom math import sqrt"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n\n\n-----Constraints-----\n1 <= n <= 100\n1 <= a_i <= 100\n\nTime Limit: 1 sec\nSpace Limit: 50\n\n---My solution---\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 0 0 0 0 0\") == \"1\"\nassert solution(\"1 0 0 0 0 1\") == \"1\"\nassert solution(\"1 1 0 0 0 1\") == \"0\"\nassert solution(\"1 1 1 0 0 0\") == \"1\"\nassert solution(\"1 1 1 0 0 1\") == \"0\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    str(input())) == 5\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n'''\n\nfrom sys import stdin\n\nn = int(stdin.readline())\n\na = list(map(int, stdin.readline().split()))\n\na_set = set(a)\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '-1'"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 0 0 0 0 0 0 1 1\") == '3'\nassert solution(\"1 2 3 0 0 0 0 0 0 0 1 0\") == '3'\nassert solution(\"1 2 3 0 0 0 0 0 0 0 0 0\") == '3'\nassert solution(\"1 2 3 0 0 0 0 0 0 0 0 0 0 0\") == '3'\nassert solution(\"2 3 4 5 6 7 8 9 10 11 12\") == '-1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"5 3\") == \"3\"\nassert solution(\"10 3\") == \"3\"\nassert solution(\"4 10\") == \"3\"\nassert solution(\"10 3\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3\", \"0 0 0 0 0 0\") == 3\nassert solution(\"5 10\", \"0 0 0 0 0 1\") == -1\nassert solution(\"5 3 10\", \"0 0 0 0 0 1\") == -1\nassert solution(\"10 3\", \"0 0 0 0 0\") == 3\nassert solution(\"10 5\", \"0 0 0 0 1\") == -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n\nfor test in [test_cases[0], test_cases[1]]:\n    for line in stdin:\n        print(line)"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 4 3\") == \"2\"\nassert solution(\"1 4 2\") == \"0\"\nassert solution(\"0 0 0 0 0 1\") == \"0\"\nassert solution(\"1 0 0 0 0 1\") == \"0\"\nassert solution(\"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == 2\nassert solution(\"10 3\") == -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n\n------Tags: Coding, Readability, Time Complexity---Medium\nRuntime: 232 ms, faster than 78.86% of Python3 online submissions for Minimum Number of Heaters.\nMemory Usage: 13.9 MB, less than 75.97% of Python3 online submissions for Minimum Number of Heaters.\n\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == 3\nassert solution(\"5 10\") == -1\n\nassert solution(\"10 3\") == 3\nassert solution(\"10 5\") == 2\n\nassert solution(\"3 2\") == -1\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n\n-----Example 1 -----\n\nInput\n\n1\n3\n5\n\nOutput\n\n5\n\nExample 2\n\nInput\n\n1\n6\n\nOutput\n\n6\n\nExplanation\n\nA, B, C = (1, 1, 2)\n\nThe solution can be written as (A, B, C) \\times (A, B, C).\nA \\times B = A * B * C\nA * B = A * B * C\nB = B * C\nC = C * A\nA = B * A\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\n\nExample 3\n\nInput\n\n1\n6\n\nOutput\n\n6\n\nExample 4\n\nInput\n\n3\n6\n\nOutput\n\n9\n\nExplanation\n\nA, B, C = (1, 1, 2)\n\nThe solution can be written as (A, B, C) \\times (A, B, C).\nA \\times B = A * B * C\nA * B = A * B * C\nA * C = A * B * C\nA * B = A * C * B\nA * C = A * B * C\nB = B * C\nC = C * A\nA = B * A\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\n\nA, B, C = (1, 1, 2)\n\nThe solution can be written as (A, B, C) \\times (A, B, C).\nA \\times B = A * B * C\nA * B = A * B * C\nA * C = A * B * C\nA * B = A * C * B\nA * C = A * B * C\nA * B = A * C * B\nA * C = A * B * C\nA = B * C\nB = C * A\nC = A * B\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\nB = C * A\nC = A * B\nA = B * C\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\u20183\u2019) == \u20183\u2019\nassert solution(\u20182\u2019) == \u20182\u2019\nassert solution(\u20182\u2019) == \u20181\u2019\nassert solution(\u20183\u2019) == \u20181\u2019\nassert solution(\u20181\u2019) == \u20181\u2019\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\""
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\nprint(\"Example 1:\")\nprint(\"Input : \" + str(input))\nprint(\"Exception : \" + str(3))\n\nprint(\"Example 2:\")\nprint(\"Input : \" + str(input))\nprint(\"Exception : \" + str(6))\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"3\"\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '2'\nassert solution(inp) == '3'\nassert solution(inp) == '2'\nassert solution(inp) == '3'\nassert solution(inp) == '2'\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == '2'\nassert solution(2) == '4'\nassert solution(3) == '3'\nassert solution(4) == '3'\nassert solution(5) == '3'\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == '2'\nassert solution(2) == '3'\nassert solution(3) == '0'"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 1\nassert solution(6) == 2\nassert solution(4) == 3\nassert solution(1) == 0\nassert solution(1) == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(s) == 2\nassert solution(s.replace(\"()\", \"(\")) == 1\nassert solution(s.replace(\"(()\", \"()\")).count(\"(())\") == 2\nassert solution(s.replace(\"()\", \"((()\")).count(\"((()\") == 1\nassert solution(s.replace(\"(())\", \"()()\")).count(\"(())\") == 2\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"()()\"), \"true\"\nassert solution(\"((()))\"), \"false\"\nassert solution(\"()((()\")), \"false\"\nassert solution(\")(()(()\")), \"true\"\nassert solution(\"((()))((()\") == \"true\", \"false\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"(((()()\nassert solution(\n    \"()))()\"\nassert solution(\n    \"(())()\"\nassert solution(\n    \"(((()()\nassert solution(\n    \"()))()\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(list(input())) == 1,'solution not correct'\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"((())()\") == 3\nassert solution(\"((()(\") == 0\nassert solution(\"(()((\") == 0\nassert solution(\"()))((())\") == 4\nassert solution(\"()))((((\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(string) == 0, 'Invalid bracket sequence'\nassert solution(string) == 0, 'Invalid bracket sequence'\nassert solution(string) == 0, 'Invalid bracket sequence'\nassert solution(string) == 0, 'Invalid bracket sequence'\nassert solution(string) == 0, 'Invalid bracket sequence'\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 7, \"solution() failed\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('bbbaababaab' == 3) == 3\nassert solution('baabaab' == 0) == 0\nassert solution('baa') == 0\nassert solution('aabb') == 2\nassert solution('aabbcde') == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('aaab') == 2\nassert solution('abab') == 1\nassert solution('abcde') == 3\nassert solution('aaaab') == 4\nassert solution('abda') == 5\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"d\"\nassert solution([\"a\", \"c\", \"b\", \"d\", \"e\", \"f\"]) == \"c\"\nassert solution([\"a\", \"b\", \"c\", \"a\", \"d\", \"c\", \"f\"]) == \"f\"\nassert solution([\"a\", \"b\", \"c\", \"a\", \"d\", \"c\", \"a\"]) == \"d\"\nassert solution([\"a\", \"b\", \"c\", \"a\", \"d\", \"c\", \"b\"]) == \"c\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n\"\"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"solution failed\"\nassert solution(stdin), \"solution failed\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\nassert solution('asdfasdf') == 3\nassert solution('fasd') == 2\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(s = \"test\"), \"The string test is not a subsequence of the string \" + solution(s = \"test\") + \".\"\nassert solution(s = \"tset\"), \"The string tset is not a subsequence of the string \" + solution(s = \"tset\") + \".\"\nassert solution(s = \"contest\"), \"The string contest is not a subsequence of the string \" + solution(s = \"contest\") + \".\"\nassert solution(s = \"asdfasdf\"), \"The string asdfasdf is not a subsequence of the string \" + solution(s = \"asdfasdf\") + \".\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"ababacadaba\") == 3\nassert solution(\"abcabcabcabcabc\") == 3\nassert solution(\"abcabcabc\") == 1\nassert solution(\"abcabcabcab\") == 3\nassert solution(\"abcabcabc\") == 0\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\""
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input() == '1 2 1 1') == 2\nassert solution(input() == '2') == 2\nassert solution(input() == '1 2 3') == 3\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 1 1\") == \"2\"\nassert solution(\"3 1 1\") == \"3\"\nassert solution(\"4 1 1\") == \"4\"\nassert solution(\"5 1 1\") == \"5\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"2 3 5\") == \"10\""
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"2\"\nprint(\"Example 1:\")\nprint(\"Example 2:\")\nprint(\"Example 3:\")\nprint(\"Example 4:\")\nprint(\"Example 5:\")\nprint(\"Example 6:\")\nprint(\"Example 7:\")\nprint(\"Example 8:\")\nprint(\"Example 9:\")\nprint(\"Example 10:\")\nprint(\"Example 11:\")\nprint(\"Example 12:\")\nprint(\"Example 13:\")\nprint(\"Example 14:\")\nprint(\"Example 15:\")\nprint(\"Example 16:\")\nprint(\"Example 17:\")\nprint(\"Example 18:\")\nprint(\"Example 19:\")\nprint(\"Example 20:\")\nprint(\"Example 21:\")\nprint(\"Example 22:\")\nprint(\"Example 23:\")\nprint(\"Example 24:\")\nprint(\"Example 25:\")\nprint(\"Example 26:\")\nprint(\"Example 27:\")\nprint(\"Example 28:\")\nprint(\"Example 29:\")\nprint(\"Example 30:\")\nprint(\"Example 31:\")\nprint(\"Example 32:\")\nprint(\"Example 33:\")\nprint(\"Example 34:\")\nprint(\"Example 35:\")\nprint(\"Example 36:\")\nprint(\"Example 37:\")\nprint(\"Example 38:\")\nprint(\"Example 39:\")\nprint(\"Example 40:\")\nprint(\"Example 41:\")\nprint(\"Example 42:\")\nprint(\"Example 43:\")\nprint(\"Example 44:\")\nprint(\"Example 45:\")\nprint(\"Example 46:\")\nprint(\"Example 47:\")\nprint(\"Example 48:\")\nprint(\"Example 49:\")\nprint(\"Example 50:\")\nprint(\"Example 51:\")\nprint(\"Example 52:\")\nprint(\"Example 53:\")\nprint(\"Example 54:\")\nprint(\"Example 55:\")\nprint(\"Example 56:\")\nprint(\"Example 57:\")\nprint(\"Example 58:\")\nprint(\"Example 59:\")\nprint(\"Example 60:\")\nprint(\"Example 61:\")\nprint(\"Example 62:\")\nprint(\"Example 63:\")\nprint(\"Example 64:\")\nprint(\"Example 65:\")\nprint(\"Example 66:\")\nprint(\"Example 67:\")\nprint(\"Example 68:\")\nprint(\"Example 69:\")\nprint(\"Example 70:\")\nprint(\"Example 71:\")\nprint(\"Example 72:\")\nprint(\"Example 73:\")\nprint(\"Example 74:\")\nprint(\"Example 75:\")\nprint(\"Example 76:\")\nprint(\"Example 77:\")\nprint(\"Example 78:\")\nprint(\"Example 79:\")\nprint(\"Example 80:\")\nprint(\"Example 81:\")\nprint(\"Example 82:\")\nprint(\"Example 83:\")\nprint(\"Example 84:\")\nprint(\"Example 85:\")\nprint(\"Example 86:\")\nprint(\"Example 87:\")\nprint(\"Example 88:\")\nprint(\"Example 89:\")\nprint(\"Example 90:\")\nprint(\"Example 91:\")\nprint(\"Example 92:\")\nprint(\"Example 93:\")\nprint(\"Example 94:\")\nprint(\"Example 95:\")\nprint(\"Example 96:\")\nprint(\"Example 97:\")\nprint(\"Example 98:\")\nprint(\"Example 99:\")\nprint(\"Example 100:\")\nprint(\"Example 101:\")\nprint(\"Example 102:\")\nprint(\"Example 103:\")\nprint(\"Example 104:\")\nprint(\"Example 105:\")\nprint(\"Example 106:\")\nprint(\"Example 107:\")\nprint(\"Example 108:\")\nprint(\"Example 109:\")\nprint(\"Example 110:\")\nprint(\"Example 111:\")\nprint(\"Example 112:\")\nprint(\"Example 113:\")\nprint(\"Example 114:\")\nprint(\"Example 115:\")\nprint(\"Example 116:\")\nprint(\"Example 117:\")\nprint(\"Example 118:\")\nprint(\"Example 119:\")\nprint(\"Example 120:\")\nprint(\"Example 121:\")\nprint(\"Example 122:\")\nprint(\"Example 123:\")\nprint(\"Example 124:\")\nprint(\"Example 125:\")\nprint(\"Example 126:\")\nprint(\"Example 127:\")\nprint(\"Example 128:\")\nprint(\"Example 129:\")\nprint(\"Example 130:\")\nprint(\"Example 131:\")\nprint(\"Example 132:\")\nprint(\"Example 133:\")\nprint(\"Example 134:\")\nprint(\"Example 135:\")\nprint(\"Example 136:\")\nprint(\"Example 137:\")\nprint(\"Example 138:\")\nprint(\"Example 139:\")\nprint(\"Example 140:\")\nprint(\"Example 141:\")\nprint(\"Example 142:\")\nprint(\"Example 143:\")\nprint(\"Example 144:\")\nprint(\"Example 145:\")\nprint(\"Example 146:\")\nprint(\"Example 147:\")\nprint(\"Example 148:\")\nprint(\"Example 149:\")\nprint(\"Example 150:\")\nprint(\"Example 151:\")\nprint(\"Example 152:\")\nprint(\"Example 153:\")\nprint(\"Example 154:\")\nprint(\"Example 155:\")\nprint(\"Example 156:\")\nprint(\"Example 157:\")\nprint(\"Example 158:\")\nprint(\"Example 159:\")\nprint(\"Example 160:\")\nprint(\"Example 161:\")\nprint(\"Example 162:\")\nprint(\"Example 163:\")\nprint(\"Example 164:\")\nprint(\"Example 165:\")\nprint(\"Example 166:\")\nprint(\"Example 167:\")\nprint(\"Example 168:\")\nprint(\"Example 169:\")\nprint(\"Example 170:\")\nprint(\"Example 171:\")\nprint(\"Example 172:\")\nprint(\"Example 173:\")\nprint(\"Example 174:\")\nprint(\"Example 175:\")\nprint(\"Example 176:\")\nprint(\"Example 177:\")\nprint(\"Example 178:\")\nprint(\"Example 179:\")\nprint(\"Example 180:\")\nprint(\"Example 181:\")\nprint(\"Example 182:\")\nprint(\"Example 183:\")\nprint(\"Example 184:\")\nprint(\"Example 185:\")\nprint(\"Example 186:\")\nprint(\"Example 187:\")\nprint(\"Example 188:\")\nprint(\"Example 189:\")\nprint(\"Example 190:\")\nprint(\"Example 191:\")\nprint(\"Example 192:\")\nprint(\"Example 193:\")\nprint(\"Example 194:\")\nprint(\"Example 195:\")\nprint(\"Example 196:\")\nprint(\"Example 197:\")\nprint(\"Example 198:\")\nprint(\"Example 199:\")\nprint(\"Example 200:\")\nprint(\"Example 201:\")\nprint(\"Example 202:\")\nprint(\"Example 203:\")\nprint(\"Example 204:\")\nprint(\"Example 205:\")\nprint(\"Example 206:\")\nprint(\"Example 207:\")\nprint(\"Example 208:\")\nprint(\"Example 209:\")\nprint(\"Example 210:\")\nprint(\"Example 211:\")\nprint(\"Example 212:\")\nprint(\"Example 213:\")\nprint(\"Example 214:\")\nprint(\"Example 215:\")\nprint(\"Example 216:\")\nprint(\"Example 217:\")\nprint(\"Example 218:\")\nprint(\"Example 219:\")\nprint(\"Example 220:\")\nprint(\"Example 221:\")\nprint(\"Example 222:\")\nprint(\"Example 223:\")\nprint(\"Example 224:\")\nprint(\"Example 225:\")\nprint(\"Example 226:\")\nprint(\"Example 227:\")\nprint(\"Example 228:\")\nprint(\"Example 229:\")\nprint(\"Example 230:\")\nprint(\"Example 231:\")\nprint(\"Example 232:\")\nprint(\"Example 233:\")\nprint(\"Example 234:\")\nprint(\"Example 235:\")\nprint(\"Example 236:\")\nprint(\"Example 237:\")\nprint(\"Example 238:\")\nprint(\"Example 239:\")\nprint(\"Example 240:\")\nprint(\"Example 241:\")\nprint(\"Example 242:\")\nprint(\"Example 243:\")\nprint(\"Example 244:\")\nprint(\"Example 245:\")\nprint(\"Example 246:\")\nprint(\"Example 247:\")\nprint(\"Example 248:\")\nprint(\"Example 249:\")\nprint(\"Example 250:\")\nprint(\"Example 251:\")\nprint(\"Example 252:\")\nprint(\"Example 253:\")\nprint(\"Example 254:\")\nprint(\"Example 255:\")\nprint(\"Example 256:\")\nprint(\"Example 257:\")\nprint(\"Example 258:\")"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2 1 1\") == \"2\"\nassert solution(\n    \"2 2 1 1\") == \"1\"\nassert solution(\n    \"1 2 1 2\") == \"1\"\nassert solution(\n    \"2 2 1 2\") == \"1\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 2 1 1') == '2'\nassert solution('1 2') == '2'\nassert solution('1 3') == '3'\nassert solution('1 1') == '1'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\n\n------Output------\n<BLANKLINE>\n\n***** Time complexity*****\n\n1\n\n2\n\n2\n\n3\n\n3\n\n****** Time complexity ******\n\n2\n\n2\n\n3\n\n3\n\n****** Time complexity ******\n\n4\n\n*****************************************************************************************************************"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"3\"\nassert solution(input) == \"3\"\nassert solution(input) == \"5\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3 4 6 7\") == \"2\"\nassert solution(\"6\") == \"2\"\nassert solution(\"5\") == \"2\"\n\n-----Concept-----\n\nThis problem is a problem with difficulty K. \n\nA problem with difficulty K or higher is a problem with difficulty K. \n\nA problem with difficulty lower than K is a problem with difficulty lower than K.\n\nA problem with difficulty n is a problem with difficulty k \u2265 n.\n\nA problem with difficulty 10 is a problem with difficulty 10 \u2264 n.\n\nA problem with difficulty 11 is a problem with difficulty 11 > n.\n\nA problem with difficulty 12 is a problem with difficulty 12.\n\nA problem with difficulty 13 is a problem with difficulty 13 \u2264 n.\n\nA problem with difficulty 14 is a problem with difficulty 14.\n\nA problem with difficulty 15 is a problem with difficulty 15 < n.\n\nA problem with difficulty 16 is a problem with difficulty 16.\n\nA problem with difficulty 17 is a problem with difficulty 17 \u2264 n.\n\nA problem with difficulty 18 is a problem with difficulty 18.\n\nA problem with difficulty 19 is a problem with difficulty 19.\n\nA problem with difficulty 20 is a problem with difficulty 20.\n\nA problem with difficulty 21 is a problem with difficulty 21 \u2265 n.\n\nA problem with difficulty 22 is a problem with difficulty 22.\n\nA problem with difficulty 23 is a problem with difficulty 23.\n\nA problem with difficulty 24 is a problem with difficulty 24.\n\nA problem with difficulty 25 is a problem with difficulty 25.\n\nA problem with difficulty 26 is a problem with difficulty 26.\n\nA problem with difficulty 27 is a problem with difficulty 27.\n\nA problem with difficulty 28 is a problem with difficulty 28.\n\nA problem with difficulty 29 is a problem with difficulty 29.\n\nA problem with difficulty 30 is a problem with difficulty 30.\n\nA problem with difficulty 31 is a problem with difficulty 31.\n\nA problem with difficulty 32 is a problem with difficulty 32.\n\nA problem with difficulty 33 is a problem with difficulty 33.\n\nA problem with difficulty 34 is a problem with difficulty 34.\n\nA problem with difficulty 35 is a problem with difficulty 35.\n\nA problem with difficulty 36 is a problem with difficulty 36.\n\nA problem with difficulty 37 is a problem with difficulty 37.\n\nA problem with difficulty 38 is a problem with difficulty 38.\n\nA problem with difficulty 39 is a problem with difficulty 39.\n\nA problem with difficulty 40 is a problem with difficulty 40.\n\nA problem with difficulty 41 is a problem with difficulty 41.\n\nA problem with difficulty 42 is a problem with difficulty 42.\n\nA problem with difficulty 43 is a problem with difficulty 43.\n\nA problem with difficulty 44 is a problem with difficulty 44.\n\nA problem with difficulty 45 is a problem with difficulty 45.\n\nA problem with difficulty 46 is a problem with difficulty 46.\n\nA problem with difficulty 47 is a problem with difficulty 47.\n\nA problem with difficulty 48 is a problem with difficulty 48.\n\nA problem with difficulty 49 is a problem with difficulty 49.\n\nA problem with difficulty 50 is a problem with difficulty 50.\n\nA problem with difficulty 51 is a problem with difficulty 51.\n\nA problem with difficulty 52 is a problem with difficulty 52.\n\nA problem with difficulty 53 is a problem with difficulty 53.\n\nA problem with difficulty 54 is a problem with difficulty 54.\n\nA problem with difficulty 55 is a problem with difficulty 55.\n\nA problem with difficulty 56 is a problem with difficulty 56.\n\nA problem with difficulty 57 is a problem with difficulty 57.\n\nA problem with difficulty 58 is a problem with difficulty 58.\n\nA problem with difficulty 59 is a problem with difficulty 59.\n\nA problem with difficulty 60 is a problem with difficulty 60.\n\nA problem with difficulty 61 is a problem with difficulty 61.\n\nA problem with difficulty 62 is a problem with difficulty 62.\n\nA problem with difficulty 63 is a problem with difficulty 63.\n\nA problem with difficulty 64 is a problem with difficulty 64.\n\nA problem with difficulty 65 is a problem with difficulty 65.\n\nA problem with difficulty 66 is a problem with difficulty 66.\n\nA problem with difficulty 67 is a problem with difficulty 67.\n\nA problem with difficulty 68 is a problem with difficulty 68.\n\nA problem with difficulty 69 is a problem with difficulty 69.\n\nA problem with difficulty 70 is a problem with difficulty 70.\n\nA problem with difficulty 71 is a problem with difficulty 71.\n\nA problem with difficulty 72 is a problem with difficulty 72.\n\nA problem with difficulty 73 is a problem with difficulty 73.\n\nA problem with difficulty 74 is a problem with difficulty 74.\n\nA problem with difficulty 75 is a problem with difficulty 75.\n\nA problem with difficulty 76 is a problem with difficulty 76.\n\nA problem with difficulty 77 is a problem with difficulty 77.\n\nA problem with difficulty 78 is a problem with difficulty 78.\n\nA problem with difficulty 79 is a problem with difficulty 79.\n\nA problem with difficulty 80 is a problem with difficulty 80.\n\nA problem with difficulty 81 is a problem with difficulty 81.\n\nA problem with difficulty 82 is a problem with difficulty 82.\n\nA problem with difficulty 83 is a problem with difficulty 83.\n\nA problem with difficulty 84 is a problem with difficulty 84.\n\nA problem with difficulty 85 is a problem with difficulty 85.\n\nA problem with difficulty 86 is a problem with difficulty 86.\n\nA problem with difficulty 87 is a problem with difficulty 87.\n\nA problem with difficulty 88 is a problem with difficulty 88.\n\nA problem with difficulty 89 is a problem with difficulty 89.\n\nA problem with difficulty 90 is a problem with difficulty 90.\n\nA problem with difficulty 91 is a problem with difficulty 91.\n\nA problem with difficulty 92 is a problem with difficulty 92.\n\nA problem with difficulty 93 is a problem with difficulty 93.\n\nA problem with difficulty 94 is a problem with difficulty 94.\n\nA problem with difficulty 95 is a problem with difficulty 95.\n\nA problem with difficulty 96 is a problem with difficulty 96.\n\nA problem with difficulty 97 is a problem with difficulty 97.\n\nA problem with difficulty 98 is a problem with difficulty 98.\n\nA problem with difficulty 99 is a problem with difficulty 99.\n\nA problem with difficulty 100 is a problem with difficulty 100.\n\nA problem with difficulty 101 is a problem with difficulty 101.\n\nA problem with difficulty 102 is a problem with difficulty 102.\n\nA problem with difficulty 103 is a problem with difficulty 103.\n\nA problem with difficulty 104 is a problem with difficulty 104.\n\nA problem with difficulty 105 is a problem with difficulty 105.\n\nA problem with difficulty 106 is a problem with difficulty 106.\n\nA problem with difficulty 107 is a problem with difficulty 107.\n\nA problem with difficulty 108 is a problem with difficulty 108.\n\nA problem with difficulty 109 is a problem with difficulty 109.\n\nA problem with difficulty 110 is a problem with difficulty 110.\n\nA problem with difficulty 111 is a problem with difficulty 111.\n\nA problem with difficulty 112 is a problem with difficulty 112.\n\nA problem with difficulty 113 is a problem with difficulty 113.\n\nA problem with difficulty 114 is a problem with difficulty 114.\n\nA problem with difficulty 115 is a problem with difficulty 115.\n\nA problem with difficulty 116 is a problem with difficulty 116.\n\nA problem with difficulty 117 is a problem with difficulty 117.\n\nA problem with difficulty 118 is a problem with difficulty 118.\n\nA problem with difficulty 119 is a problem with difficulty 119.\n\nA problem with difficulty 120 is a problem with difficulty 120.\n\nA problem with difficulty 121 is a problem with difficulty 121.\n\nA problem with difficulty 122 is a problem with difficulty 122.\n\nA problem with difficulty 123 is a problem with difficulty 123."
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('4,2,6') == '2'\nassert solution('3,1,4,4,6') == '2'\nassert solution('2,9,8') == '3'\nassert solution('2,3,7,5') == '3'\nassert solution('2,4,2') == '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"7 3 4 6 7 2 5 4 4 4 4\") == \"1\"\nassert solution(\"7 5 1 3 3 3\") == \"2\"\nassert solution(\"3 3 4 4 4 4 3\") == \"2\"\nassert solution(\"5 6 6 6 6 5 6 6\") == \"1\"\nassert solution(\"1 1 4 1 4 5 4 5\") == \"0\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"5 3 4\") == \"2\"\nassert solution(\"4\") == \"1\"\n\n\"\"\"\n\n\n\nfrom sys import stdin"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"16 17 14 20 20 11 22\") == \"7\"\nassert solution(\"24 21 23\") == \"1\"\nassert solution(\"24 23\") == \"2\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"16 17 14 20 20 11 22\") == \"3\"\nassert solution(\"7 1 1 2 2 2\") == \"4\"\nassert solution(\"7 1 1 2 3 3\") == \"4\"\nassert solution(\"7 1 1 3 3 3\") == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"3\"\nassert solution(\"1 1\") == \"3\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"1 4\") == \"0\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"8\"\nassert solution(\"10 3\") == \"13\"\nassert solution(\"7 3 23\") == \"13\"\nassert solution(\"7 3 23\") == \"17\"\nassert solution(\"7 3 23\") == \"13\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"16 17 14 20 20 11 22\") == \"3\"\nassert solution(\"7 16 13 14\") == \"0\""
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10 25') == '3'\nassert solution('10 25') == '6'\nassert solution('10 25') == '5'\nassert solution('10 25') == '5'\nassert solution('10 25') == '3'\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 5 3 4 1 2 3 4 5 10\") == \"3\"\nassert solution(\"2 4 7 5 7 6 10 1 2 3 4 10\") == \"4\"\nassert solution(\"2 4 7 5 7 6 10 1 2 3 4 10\") == \"4\"\nassert solution(\"2 4 7 5 7 6 10 1 2 3 4 10\") == \"3\"\nassert solution(\"2 4 7 5 7 6 10 1 2 3 4 10\") == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('1 2') == '3'\nassert solution('1 5') == '4'\nassert solution('1 6') == '4'\nassert solution('1 7') == '3'\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"3\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"7\") == \"1\"\nassert solution(\"10\") == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\n\n\n-----Example-----\nInput 1:\n\n10\n10 100 150 200 250\n\nInput 2:\n\n10\n1 2 10 50 110 250\n\nOutput 1:\n\n4\n\nInput 3:\n\n5\n4 3 7 12 100 150 199\n\nOutput 3:\n\n1\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= a_1 <= a_i\na_i + a_2 + a_3 <= 10^9\n\nn!= 0\nstdin.readline() does not contain \\n character\n\nstdin.readline() does not contain \\n character\n\nn!= 0\nstdin.readline() does not contain \\n character\n\nstdin.readline() does not contain \\n character\n\n2 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= a_1 <= a_i\na_i + a_2 + a_3 <= 10^9\n\nn!= 0\nstdin.readline() does not contain \\n character\n\nstdin.readline() does not contain \\n character\n\nn!= 0\nstdin.readline() does not contain \\n character\n\nn!= 0\nstdin.readline() does not contain \\n character\n\n2 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= a_1 <= a_i\na_i + a_2 + a_3 <= 10^9\n\nn!= 0\nstdin.readline() does not contain \\n character\n\nstdin.readline() does not contain \\n character\n\nn!= 0\nstdin.readline() does not contain \\n character\n\nn!= 0\nstdin.readline() does not contain \\n character\n\n1 <= a_i <= 10^9\n1 <= a_1 <= a_i\na_i + a_2 + a_3 <= 10^9\n\n2 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= a_1 <= a_i\na_i + a_2 + a_3 <= 10^9\n\n2 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= a_1 <= a_i\na_i + a_2 + a_3 <= 10^9\n\n2 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= a_1 <= a_i\na_i + a_2 + a_3 <= 10^9\n\nn!= 0\nstdin.readline() does not contain \\n character\n\nstdin.readline() does not contain \\n character\n\nn!= 0\nstdin.readline() does not contain \\n character\n\nn!= 0\nstdin.readline() does not contain \\n character\n\n2 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= a_1 <= a_i\na_i + a_2 + a_3 <= 10^9\n\nn!= 0\nstdin.readline() does not contain \\n character\n\nstdin.readline() does not contain \\n character\n\nn!= 0\nstdin.readline() does not contain \\n character\n\n3 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= a_1 <= a_i\na_i + a_2 + a_3 <= 10^9\n\nn!= 0\nstdin.readline() does not contain \\n character\n\nstdin.readline() does not contain \\n character\n\nn!= 0\nstdin.readline() does not contain \\n character\n\n3 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= a_1 <= a_i\na_i + a_2 + a_3 <= 10^9\n\nn!= 0\nstdin.readline() does not contain \\n character\n\nstdin.readline() does not contain \\n character\n\nn!= 0\nstdin.readline() does not contain \\n character\n\n3 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= a_1 <= a_i\na_i + a_2 + a_3 <= 10^9\n\nn!= 0\nstdin.readline() does not contain \\n character\n\nstdin.readline() does not contain \\n character\n\nn!= 0\nstdin.readline() does not contain \\n character\n\n3 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= a_1 <= a_i\na_i + a_2 + a_3 <= 10^9\n\nn!= 0\nstdin.readline() does not contain \\n character\n\nstdin.readline() does not contain \\n character\n\nn!= 0\nstdin.readline() does not contain \\n character\n\n3 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= a_1 <= a_i\na_i + a_2 + a_3 <= 10^9\n\nn!= 0\nstdin.readline() does not contain \\n character\n\nstdin.readline() does not contain \\n character\n\nn!= 0\nstdin.readline() does not contain \\n character\n\n3 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= a_1 <= a_i\na_i + a_2 + a_3 <= 10^9\n\nn!= 0\nstdin.readline() does not contain \\n character\n\nstdin.readline() does not contain \\n character\n\nn!= 0\nstdin.readline() does not contain \\n character\n\n3 <= n <= 10^5\n1 <= a_i"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 20 50 40 100 200 200 210\") == 4\nassert solution(\"3 9 12 5 10 50\") == 4\nassert solution(\"1\") == 1"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Known Issues-----\n\nTestcases with more than 10 problems fail the problem set:\n\n>>> solution('5\\n5\\n6\\n6\\n7\\n7\\n10')\n'4'\n\n>>> solution('5\\n5\\n4\\n10')\n'5'\n\n>>> solution('1')\n'1'\n\n'''"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"6 7 12 100 150 199\") == \"3\"\nassert solution(\"1 3 2\") == \"1\"\nassert solution(\"2 5\") == \"1\"\nassert solution(\"3 7\") == \"1\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"1 3 4 6 7 12 21 23 24 49\") == \"4\"\nassert solution(\"1 4 7 12 100 150 199\") == \"2\"\nassert solution(\"1 5 10 50 110 250\") == \"1\"\nassert solution(\"1 5 6 7 12 100 150 199\") == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 1\nassert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 7\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"1\n2 5 6 7 10 21 23 24 49\n\"\"\") == 4\nassert solution(\"\"\"1\n2 10 50 110 250\n\"\"\") == 1\nassert solution(\"\"\"1\n2 4 7 12 100 150 199\n\"\"\") == 3\nassert solution(\"\"\"1\n2 4 7 12 100 150 199\n\"\"\") == 0\nassert solution(\"\"\"1\n2 4 7 12 100 150 199\n\"\"\") == 3\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['5','2','4','8','3','6','10','1','10','2']) == '1 2'\nassert solution(['5','2','4','8','3','6','10','1','10','2', '10','2']) == '2 3'\nassert solution(['2','3','4','7']) == '7'\nassert solution(['2','3','4','8']) == '2'\nassert solution(['2','3','4','8']) == '8'\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution() == '1 2'\nassert solution(3) == 2\nassert solution(4) == 1\nassert solution(6) == 4\nassert solution(6) == 4\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 3\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 4 8 3 6\") == \"1 2\"\nassert solution(\"5 5 5 7 7\") == \"1 2\"\nassert solution(\"2 2 5 11 3\") == \"1 4\"\nassert solution(\"4 4 5 5 4 3\") == \"1 5\"\nassert solution(\"4 5 5 6 7\") == \"1 4\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1 2\"\nassert solution(input()) == \"2 4\"\nassert solution(input()) == \"2 4 8 3 6\"\nassert solution(input()) == \"2 4 6\"\nassert solution(input()) == \"2 6\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1, \"The first line of the input contains one integer.\"\nassert solution(stdin) == 2, \"The second line of the input contains one integer.\"\nassert solution(stdin) == 2, \"The second line of the input contains one integer.\"\nassert solution(stdin) == 2, \"The second line of the input contains one integer.\"\nassert solution(stdin) == 2, \"The second line of the input contains one integer.\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5 6') == 2\nassert solution('4 5 8') == 2\nassert solution('4 2 8 9 1') == 1\nassert solution('3 7') == 1\nassert solution('3 9 10 3 2') == 1\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"2 4\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 5\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"021\"\n\n\n-----My solution-----\n\nn = int(stdin.strip())\nres = str(n) + \"0\"\nfor i in range(n-1):\n    res = res[1:] + res[0] + \"1\"\nfor i in range(n):\n    res = res[:-1] + res[-1] + \"1\"\nprint(res)\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5') == '11100110'\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"621\") == \"001122\"\nassert solution(\"62112\") == \"120120\""
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1') == '01'\nassert solution('101') == '101'\nassert solution('1111') == '1011'\nassert solution('11111') == '111111'\nassert solution
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution == \"021\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"021\"\nassert solution(input()) == \"021\"\nassert solution(input()) == \"021\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"021\") == \"211200\"\nassert solution(\"0123\") == \"0123\"\nassert solution(\"1111\") == \"1111\"\nassert solution(\"010101\") == \"111011\"\nassert solution
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '021'\nassert solution(input()) == '001122'\nassert solution(input()) == '211200'\nassert solution(input()) == '211200'\nassert solution(input()) == '021'\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"021\"\nassert solution(stdin) == \"120120\"\nassert solution(stdin) == \"021\"\nassert solution(stdin) == \"021\"\nassert solution(stdin) == \"021\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '8'\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"4\"\n\n'''\n\nN,M = map(int,input().split())\na_1,a_2 = map(int,input().split())\n\na_1 = [a_1]\na_2 = [a_2]\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '4'"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\""
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '4'\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"4\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"6 1\"\n) == \"4\"\nassert solution(\n    \"6 3\"\n) == \"4\"\nassert solution(\n    \"6 4\"\n) == \"2\"\nassert solution(\n    \"6 5\"\n) == \"3\"\nassert solution(\n    \"6 6\"\n) == \"3\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 1\") == \"4\"\nassert solution(\"6 3\") == \"1\"\nassert solution(\"5 6\") == \"0\"\nassert solution(\"1 4\") == \"0\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"11\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\n6 2 4\n\n-----Sample Output-----\n2\n\nTakahashi is now at coordinate 6. He can move from coordinate 6 to coordinate 2, and he can move from coordinate 2 to coordinate -2.\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"5 4 2\") == \"2\"\nassert solution(\"4 6 3\") == \"5\"\nassert solution(\"6 5 4\") == \"5\"\nassert solution(\"6 2 6\") == \"6\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\n\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"10\"\nassert solution(\"4 4\") == \"6\"\nassert solution(\"7 8\") == \"9\"\nassert solution(\"3 7\") == \"2\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('{}'.format(2)) == '2'\nassert solution('{}'.format(4)) == '4'\nassert solution('{}'.format(10)) == '0'\nassert solution('{}'.format(8)) == '8'\nassert solution('{}'.format(12)) == '12'\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"12\") == \"1\"\nassert solution(\"16\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"571576\") == \"0\"\nassert solution(\"2128506\") == \"2\"\n\n\n\n-----Constraints-----\n0 <= n <= 2000000000\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nGuaranteed constraints:\n2 <= n <= 2000000000\n\n\n[output] integer\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == 10\nassert solution(stdin) == 2\nassert solution(stdin) == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(14) == 2\nassert solution(61441) == 0\nassert solution(571576) == 10\nassert solution(2128506) == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(12) == 2\nassert solution(0) == 0\nassert solution(1000000000) == 0\nassert solution(1000000000000) == 0\nassert solution(1000000000) == 0\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0\") == \"0\", \"0\"\nassert solution(\"1\") == \"1\", \"1\"\nassert solution(\"2\") == \"2\", \"2\"\nassert solution(\"3\") == \"3\", \"3\"\nassert solution(\"4\") == \"4\", \"4\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == 10\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"2 3\") == \"2\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 27\nassert solution(19) == 40"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 27\n'''"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 27, \"Solution failed\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == 27\nassert solution(10) == 30\nassert solution(5) == 30\n\n'end'\n\n'No'\n'''\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3) == 27\nassert solution(1) == 1\nassert solution(0) == 0\nassert solution(2) == 0\nassert solution(4) == 0\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3\") == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == 10"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3) == 27\nassert solution(123) == 27\nassert solution(12345) == 27\nassert solution(1234567) == 27\nassert solution(1234) == 27\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(solution) == 27\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3) == \"27\"\nassert solution(5) == \"27\"\nassert solution(6) == \"27\"\nassert solution(10) == \"33\"\nassert solution(11) == \"39\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1234') == '1'\nassert solution('9998') == '0'\nassert solution('666') == '0'\nassert solution('99') == '1'\nassert solution('') == '1'"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"12345\"\n) == \"1\"\nassert solution(\n    \"2\"\n) == \"0\"\nassert solution(\n    \"98765\"\n) == \"0\"\nassert solution(\n    \"123\"\n) == \"0\"\nassert solution(\n    \"9\"\n) == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"14\") == 1, \"Wrong output!\"\nassert solution(\"100\") == 1, \"Wrong output!\"\nassert solution(\"10\") == 0, \"Wrong output!\"\nassert solution(\"0\") == 1, \"Wrong output!\"\nassert solution(\"99\") == 1, \"Wrong output!\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(13) == \"1\"\nassert solution(927) == \"0\"\nassert solution(48) == \"1\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1, \"stdin = {}\".format(stdin)"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"123\") == \"1\"\nassert solution(\"13\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"123\") == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"1\", \"Your code should be working correctly.\"\nassert solution(\"927\") == \"1\", \"Your code should be working correctly.\"\nassert solution(\"48\") == \"0\", \"Your code should be working correctly.\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(927) == 1\nassert solution(48) == 0\nassert solution(17) == 0\nassert solution(\"hello\") == \"hello\"\nassert solution(\"1234\") == \"1\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'\n\n\"\"\"\n\nclass Solution:\n    def solution(self, n: int) -> str:\n        \n        string = list(map(str, range(1,n+1)))\n        string = ''.join(string)\n        i = string.find('2')\n        while i!= -1:\n            string = string[:i] + string[i+1] + string[i+2:]\n            i = string.find('2')\n        return string[:i]\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '5'"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 5 3 1\") == \"4\"\n\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(solution()) == \"6\"\n'''\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\n'''\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 3 1\") == \"5\"\nassert solution(\"3 1 2\") == \"2\"\nassert solution(\"0 1 1\") == \"1\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10 20 30 10 30\") == \"30 30 20\"\nassert solution(\"10 30 20 10\") == \"20 10 30\"\nassert solution(\"10 20 10\") == \"10 20\"\nassert solution(\"10 5 5 5 5\") == \"10\"\nassert solution(\"10 6 6 6 6\") == \"6\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 2\n\n\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"4\"\n\nassert solution([\"1\", \"2\", \"3\", \"1\", \"1\", \"1\", \"1\"]) == \"3\"\n\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\n\nassert solution([\"1\", \"2\", \"3\", \"3\", \"3\", \"3\", \"3\"]) == \"3\"\n\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\""
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5\\n8\\n8\\n6\\n999999733\\n999999733\\n999999733\\n') == '2\\n8'\nassert solution('5\\n8\\n8\\n6\\n999999733\\n999999733\\n999999733\\n') == '1'"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3,1) == 1\nassert solution(2,10) == 7\nassert solution(2,50) == 8\nassert solution(1,9) == 2\nassert solution(2,1) == 1\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    str(input())\n) == \"2\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\n\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"2\"\n\nassert solution(input) == \"8\"\n\nassert solution(input) == \"1\"\n\nassert solution(input) == \"3\"\n\nassert solution(input) == \"1\""
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"999999733\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0, 1) == 2\nassert solution(0, 2) == 3\nassert solution(0, 3) == 4\nassert solution(0, 4) == 5\nassert solution(0, 5) == 6\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == '1'\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"1\"\n\n\"\"\"\n\nclass Solution:\n    def bulbSwitch(self, n: int, p: List[int]) -> int:\n        return sum(p[n])"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 2\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 1 2\") == \"2\"\nassert solution(\"2 1 1 2\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"0 2\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1,2,5,3) == 5, \"6\"\nassert solution(4,9,0,2) == 4, \"7\"\nassert solution(6,0,4,3) == 6, \"8\"\nassert solution(9,0,0,9) == 5, \"8\"\nassert solution(9,0,0,4) == 2, \"9\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5.00000000000000000000', 'Expected 5.00000000000000000000 got {}'.format(stdin)"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"5.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"5.00000000000000000000\""
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 7 5 3\") == \"50.00000\"\nassert solution(\"2 7 4 3\") == \"50.00000\"\nassert solution(\"2 7 4 9\") == \"150.00000\"\nassert solution(\"2 7 2 9\") == \"150.00000\"\nassert solution(\"1 2 2\") == \"0.00000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"A B H M\",\n    \"5 15 0\") == \"5.00000000000000000000\"\nassert solution(\n    \"A B H M\",\n    \"5 15 0\") == \"5.00000000000000000000\"\nassert solution(\n    \"A B H M\",\n    \"5 15 0\") == \"5.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"5.00000000000000000000\"\nassert abs(solution(inp) - 5.0) < 10 ** -9\n'''\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"A 4 9 0\") == \"5.00000000000000000000\"\nassert solution(\"B 4 9 0\") == \"5.00000000000000000000\"\nassert solution(\"A 4 9 0\") == \"5.00000000000000000000\"\nassert solution(\"A 4 9 0\") == \"5.00000000000000000000\"\nassert solution(\"A 4 9 0\") == \"5.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"5.00000000000000000000\"\n\n\"\"\"\n\nA, B = map(int, input().split())\nH = int(input())\nM = int(input())\nprint(A * B * H * M)\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3 4 9\", \"0 0 0\"]) == \"5.00000000000000000000\"\nassert solution([\"1 1 0\", \"0 0 0\"]) == \"5.00000000000000000000\"\nassert solution([\"0 0 0\"]) == \"5.00000000000000000000\"\nassert solution([\"0 0 0\"]) == \"5.00000000000000000000\"\nassert solution([\"1 1 0\", \"0 0 0\"]) == \"5.00000000000000000000\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '97'\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"97\"\n\nprint(\"Example 1:\")\n\nprint(\"Input : \" + str(stdin) + \"\\n\")\n\nprint(\"Output : \" + solution(stdin))\n\nprint(\"Example 2:\")\n\nprint(\"Input : \" + str(stdin) + \"\\n\")\n\nprint(\"Output : \" + solution(stdin))\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"8\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '97'\n\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 97\nassert solution(stdin) == 97\nassert solution(stdin) == 97\n\n-----Constraints-----\n0 <= stdin.length <= 20\n0 <= stdin[i] < 10^5\n1 <= stdin[i] <= 10^5\n\nTime Limit: 1 sec\n\n--- Nguyen Van Duc ---\n\"\"\"\n\nimport math\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nm = int(input())\nb = list(map(int, input().split()))"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\") == \"4\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"1 4 5 60 4\") == \"6\"\n\n'''"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"97\"\n\n-----Constraints-----\n0 < stdin.length < 10^5\n0 < stdin[i] < 10^5\n\n----Code----\n\nimport math"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == str(97)\n\n\"\"\""
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '0'\nassert solution('100000000') == '0'\nassert solution('100000000000') == '0'\nassert solution('100000000000000000000000000000000000') == '0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(sorted([0, -4, 1, 1, 2, 6, 7])[-1] + 1)\nassert solution(stdin) == str(sorted([0, -4, 1, 1, 2, 6, 7])[-1] + 1)\nassert solution(stdin) == str(sorted([0, -4, 1, 1, 2, 6, 7])[-1] + 1)"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 1 4\") == \"4\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"1 3 4\") == \"3\"\nassert solution(\"1 2 1\") == \"0\"\nassert solution(\"1 0 0\") == \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"6\""
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 3') == '6'\nassert solution('5 4') == '7'\nassert solution('1 3') == '0'\nassert solution('1 4') == '0'\n\n\n-----Constraints-----\n\n0 <= n <= 10^4\n-10^5 < a[i] < 10^5\n-10^4 < a_j < 10^4\n-10^6 < c_i < 10^6\na[i] + a[j] = a_i + a_j = -10^5\nn <= 30\n\n'''\n\nimport sys\nimport math\n\nn = int(input())\na = [int(i) for i in input().split()]\n\ni = 0\nj = 0\n\nwhile i < n and j < n:\n    j += 1\n    if i + a[j] < -10:\n        print(0)\n        sys.exit()\n    elif -10**6 < i + a[j] < 10**6:\n        print(j - i)\n        sys.exit()\n    elif i + a[j] > 10**6:\n        print(math.ceil(j - i))\n        sys.exit()\n    i += a[j]\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '6'\n\nassert solution(stdin) == '7'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\""
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'Yes'\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\"\"\"\n\nclass Solution:\n    def checkDict(self, sentence):\n        res = []\n        for s in sentence:\n            if len(s) < 2:\n                continue\n            count = 1\n            i = 0\n            while i < len(s):\n                if s[i:i+2] in s and s[i:i+2] not in res:\n                    count += 1\n                    res.append(s[i:i+2])\n                else:\n                    break\n                i += 2\n        if len(res) < 2:\n            return 'Yes'\n        return 'No'\n\n    def checkDict2(self, sentence):\n        res = set()\n        for s in sentence:\n            if len(s) < 2:\n                continue\n            for i in range(len(s) - 1):\n                if s[i:i+2] in res:\n                    res.remove(s[i:i+2])\n                else:\n                    res.add(s[i:i+2])\n        if len(res) == 0:\n            return 'Yes'\n        return 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\""
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"fced\", \"xyz\", \"r\", \"dabcef\", \"az\", \"aa\", \"bad\", \"babc\"]) == \"Yes\"\nassert solution([\"fced\", \"xyz\", \"r\", \"dabcef\", \"az\", \"aa\", \"bad\", \"babc\"]) == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('abc') == 'Yes', 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'No'\nassert solution('az') == 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['fced', 'xyz', 'r', 'dabcef', 'az', 'aa', 'bad', 'babc']) == \"Yes\"\nassert solution(['fced', 'xyz', 'r', 'dabcef', 'az', 'aa', 'bad']) == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(''''\ndfce\n'''\n) == 'Yes'\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(6)\nassert solution(stdin) == str(7)\nassert solution(stdin) == str(0)\n\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1,1) == 0\nassert solution(2,3) == 2\nassert solution(3,2) == 1\nassert solution(4,3) == 0\nassert solution(5,4) == 4\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '0'\n\n\n-----Solution-----\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().strip().split(' '))\na = [int(x) for x in input().strip().split(' ')]\n\nfor i in range(m):\n    l, r = map(int, input().strip().split(' '))\n    a[l-1:r] = a[l-1:r] - a[l-1:r][:r-l+1]\n\na = [x+1 for x in a]\nb = [1, 1]\n\nfor i in range(m):\n    b = b + [a[i] - b[i]]\n\nfor i in range(len(b)):\n    b[i] = b[i]//b[i]\n    b = b[:m] + [b[i]]"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('aabbaaaaaaab'), 'no'"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0\n\nExplanation\n\nThe input is as follows:\n\nLine 1:\n\nInput:\n5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\nOutput:\n6\n2\n4 1 \n\nLine 2:\n\nInput:\n1 0\n1\n\nOutput:\n0\n0\n\nLine 3:\n\nInput:\n1 0\n4\n3 5\n\nOutput:\n4\n3 1\n\nLine 4:\n\nInput:\n2 0\n0\n\nOutput:\n0\n\nLine 5:\n\nInput:\n2 2\n1\n\nOutput:\n1\n\nLine 6:\n\nInput:\n1 4\n3 5\n\nOutput:\n3\n1 2\n\nLine 7:\n\nInput:\n2 1\n1\n\nOutput:\n2\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 10\n\nInput\n1\n1\n1\n1\n2\n1\n1\n2\n2\n2\n2\n\nOutput\n1\n0\n\n\n-----Constraints-----\n\n0 <= n <= 10^5\n1 <= m <= 300\n-10^6 <= a_i <= 10^6\n\n--- Nguyen Van Duc ---\n'''\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 7, \"wrong answer\"\n\nassert solution(stdin) == \"0\", \"wrong answer\"\n\nassert solution(stdin) == \"0\", \"wrong answer\"\n\nassert solution(stdin) == \"0\", \"wrong answer\"\n\nassert solution(stdin) == \"0\", \"wrong answer\""
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"1\"\nassert solution(stdin), \"0\""
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '4'\nassert solution(stdin) == 'LRL'\nassert solution(stdin) == 'LRL'\nassert solution(stdin) == 'LLL'\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\n\nAssume that a is distinct, then for a to be distinct, it can be done by removing a from the left side.\n\nSince the elements are distinct, we want to remove the leftmost element of a (which is the one at the leftmost index of a).\n\nSo, if a[1] is odd, we can remove it from the left side.\n\nSince all values of a are distinct, we just take the rightmost element.\n\nSo, a[1] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[1] from the left side.\n\nSo, if a[3] is odd, we can remove it from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n\nSo, a[3] is also the rightmost element.\n\nSo, we want to remove the rightmost element of a (which is the one at the rightmost index of a) and a[3] from the left side.\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, [2, 1, 5, 4, 3]) == \"4\"\nassert solution(7, [1, 3, 5, 6, 7, 4, 2]) == \"LLL\"\nassert solution(7, [1, 3, 5, 6, 7, 4, 2]) == \"LRL\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('[2, 1, 5, 4, 3]') == 4\nassert solution('[1, 5, 4, 3]') == 4\nassert solution('[1, 5, 4]') == 1\nassert solution('[1, 5]') == 1\nassert solution('[1]') == 1\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"5 4 3 1 3 5 1 2 3 7\") == \"LRRR\"\nassert solution(\n    \"6 2 3 1 2 6 3 3 4 1\") == \"LLL\"\nassert solution(\n    \"7 3 2 3 1 2 3 3 1 2\") == \"LLL\"\nassert solution(\n    \"3 3 2 1 2 2 1 1 4 3 3\") == \"LLL\"\nassert solution(\n    \"3 2 2 2 1 3 2 2 1 1 3\") == \"LLR\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == 'L'\nassert solution(stdin) == 'L'\nassert solution(stdin) == 'R'\nassert solution(stdin) == 'L'\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"2\", \"1\", \"5\", \"4\", \"3\"]) == \"4\"\nassert solution([\"2\", \"1\", \"5\", \"4\", \"3\"]) == \"L\"\nassert solution([\"2\", \"1\", \"5\", \"4\", \"3\"]) == \"L\"\nassert solution([\"2\", \"1\", \"5\", \"4\", \"3\"]) == \"R\"\nassert solution([\"2\", \"1\", \"5\", \"4\", \"3\"]) == \"L\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"RR\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"LL\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"1 1 2 3\") == \"4\"\nassert solution(\"2 2 2 2\") == \"3\"\nassert solution(\"2 2 3 3\") == \"3\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3 2 5 4\", \"1 2 5\", \"6 5 4 3 4\", \"1 2 4\"]) == \"2\"\nassert solution([\"6 5 4 3 4\", \"1 2 4\"]) == \"2\"\nassert solution([\"1 2 5\", \"1 2 4\", \"2 5 4\"]) == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"3\",\"1\",\"2\"]) == \"4\"\nassert solution([\"2\",\"2\",\"3\",\"4\",\"2\",\"3\"]) == \"2\"\nassert solution([\"4\",\"2\",\"1\",\"3\",\"3\",\"3\",\"4\"]) == \"4\""
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, [1, 2, 5, 3, 4]) == 4\nassert solution(2, [1, 2]) == 2\nassert solution(7, [6, 5, 4, 3, 2, 4, 3]) == 2\nassert solution(0, []) == 0\nassert solution(7, []) == 0\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\",\"2\",\"5\",\"3\",\"4\"]) == \"3\"\nassert solution([\"6\",\"5\",\"4\",\"3\",\"2\"]) == \"2\"\nassert solution([\"5\",\"5\",\"5\",\"5\"]) == \"2\"\nassert solution([\"5\",\"4\",\"3\",\"2\",\"1\"]) == \"2\""
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, [1, 2, 5, 3, 4]) == 4, \"Failed\"\nassert solution(2, [1, 2]) == 2, \"Failed\"\nassert solution(7, [6, 5, 4, 3, 2, 4, 3]) == 2, \"Failed\"\nassert solution(3, [3, 2, 4, 4]) == 2, \"Failed\"\nassert solution(3, [1, 2, 3, 4, 5]) == 3, \"Failed\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '4'\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4, [1, 2, 5, 3, 4]) == 2\nassert solution(7, [6, 5, 4, 3, 2, 4, 3]) == 4\nassert solution(1, [2, 2, 5]) == 1\nassert solution(5, [1, 2, 3, 4]) == 2\n\n\n\n-----Solution-----\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin: str = \"\"\n)\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1\nprint(solution(stdin))\n'''"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1\n\n---Constraints---\n\n1 <= n <= 10^5\n1 <= k <= 10^4\n\n---Time complexity---\nO(NlogN) where $N$ is the number of elements in the array and $NlogN$ is the number of operations needed to obtain at least $k$.\n\n---Space complexity---\nO(N) for the constant array $n$.\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3 4 5\") == \"2\"\nassert solution(\"2 2 2 2\") == \"0\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\", \"3\", \"1\"]) == \"0\"\nassert solution([\"5\", \"3\", \"1\", \"4\", \"2\", \"3\", \"5\", \"4\", \"5\"]) == \"1\"\nassert solution([\"1\", \"1\"]) == \"1\"\nassert solution([\"1\", \"1\", \"2\", \"3\", \"4\", \"5\", \"5\"]) == \"2\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"4\""
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('9 9 8 5 5') == '8'\nassert solution('1 2 3') == '0'\nassert solution('1 4 3') == '3'\nassert solution('9 9 2 1 1') == '1'\nassert solution('5 2 1 1 2') == '0'\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '4'\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, 5, 4) == 4\nassert solution(8, 8, 4) == 4\n\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(test_input) == '4'\nassert solution(input) == '1'\nassert solution(input_example) == '1'\nassert solution(input_example_2) == '1'\nassert solution(input_example_3) == '3'\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"5\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"2 3\") == \"2\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('8 3 4') == '4'\nassert solution('8 3 1') == '1'\nassert solution('8 1 3') == '1'\nassert solution('8 4 2') == '2'\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution == 4, 'incorrect output'\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 5 4\") == \"5\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"5 2\") == \"1\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == 5\nassert solution(stdin) == 1\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2\", \"8\", \"8 2 12 6 4 24 16 3\"]) == \"48\"\nassert solution([\"2\", \"8\", \"8 2 12 6 4 24 16 3\", \"5\"]) == \"1\"\nassert solution([\"2\", \"8\", \"8 2 12 6 4 24 16 3\", \"5\", \"5\"]) == \"2\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == -1\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '48'\n\n-----Time complexity-----\n\nO(t x n) where t is the number of queries and n is the number of divisors.\n\nO(n) where t is the number of queries and n is the number of divisors.\n\nO(n) where t is the number of queries and n is the number of divisors.\n\nTime complexity: O(t x n) for all the queries and O(n) for all the n-divisors.\n\n\n-----Space Complexity-----\n\nSince the second line of the query contains n integers, space complexity is O(n) because it contains the integer.\n\nO(t x n) for all the queries and O(n) for all the n-divisors.\n\n\n-----Algorithm-----\n\nFirstly, we start with the required amount of divisors. We will use the fact that if we guessed a number $x$, then we will have at most $d_1, d_2, \\dots, d_n$.\n\nThen we will check the difference of the guessed number from the number x in the list of divisors.\n\nWe will calculate the minimum possible $x$ that can be the guessed number, which is the minimum possible $x$ that is the difference in the two possible numbers.\n\nWe will use the fact that the list of divisors is exactly the numbers that can be the guessed number.\n\nFor example, when we guessed $x = 23$, we will have possible divisors: 7, 13, 23, 24, 25, 27. Then we need to check whether the difference is the same. If the difference is the same, then we know the minimum possible $x$.\n\nNow, we will check if the difference is the minimum possible $x$. If it is not, then we know the minimum possible $x$.\n\nWe will have to use some built-in function called min.\n\nFor example, the difference between the two numbers $x$ and $y$ is $x - y$. Then we can calculate the minimum possible $x$ that is the difference between them.\n\nFor example, the difference between $x$ and $y$ is $x - y$ if $x$ is the maximum possible difference between $x$ and $y$.\n\n\n-----Recursion-----\n\nWe'll use a recursive function called the following algorithm.\n\nFor each divisor $d_i$ in the list of divisors, we will calculate the minimum possible $x$ that is the difference between $d_i$ and $d_i$ - $d_i$ is the minimum possible $x$. Then we check the difference between the two numbers $d_i$ and $d_i$ and is a better one.\n\nIf it is a better one, then we check the difference between $d_i$ and $d_i$ - $d_i$ is the minimum possible $x$. If it is not, then we check the difference between $d_i$ and $d_i$ - $d_i$ is the minimum possible $x$.\n\nNow, we will calculate the minimum possible $x$ that is the difference between $d_i$ and $d_i$ - $d_i$. So we'll have to calculate the minimum possible $x$ that is the difference between $d_i$ - $d_i$ and the difference between $d_i$ and $d_i$.\n\nNow, we will calculate the minimum possible $x$ that is the difference between $d_i$ and $d_i$ - $d_i$ and $d_i$. So we will have to calculate the minimum possible $x$ that is the difference between $d_i$ - $d_i$ and the difference between $d_i$ - $d_i$.\n\nThen we will calculate the minimum possible $x$ that is the difference between $d_i$ - $d_i$ and $d_i$ - $d_i$. So we will have to calculate the minimum possible $x$ that is the difference between $d_i$ - $d_i$ and $d_i$ - $d_i$.\n\nWe will calculate the minimum possible $x$ that is the difference between $d_i$ - $d_i$ and $d_i$ - $d_i$. So we will have to calculate the minimum possible $x$ that is the difference between $d_i$ - $d_i$ and $d_i$ - $d_i$.\n\n\n-----Dependencies-----\n\nTo do a solution with a dependency free optimization (DAG), we need to take out the nodes whose dependencies are not of interest. We can use the DAG of a DAG (directed acyclic graph) as an input.\n\nSimilarly, we need to check if the dependencies of all nodes are of interest. If they are, we need to remove them from the DAG.\n\nWe need to use the DAG to find the minimal possible $x$.\n\nWe need to do some tests:\n\n- if the number of dependencies are the same as the number of divisors, then we can say that the number of dependencies is the same.\n\n- if the number of dependencies is even, then we need to add the missing divisors to the DAG.\n\n- if the number of dependencies is odd, then we need to find the minimum possible $x$ that is the difference between $d_i$ - $d_i$ and $d_i$.\n\n- if the number of dependencies is odd, then we need to find the minimum possible $x$ that is the difference between $d_i$ - $d_i$ and $d_i$.\n\n- if the number of dependencies is even, then we need to find the minimum possible $x$ that is the difference between $d_i$ - $d_i$ and $d_i$.\n\n- if the number of dependencies is odd, then we need to find the minimum possible $x$ that is the difference between $d_i$ - $d_i$ and $d_i$.\n\n\n-----Approach-----\n\n1. We use a DAG and find the minimal possible $x$.\n2. We need to remove the nodes whose dependencies are of interest (in other words, we don't need to check their dependencies).\n3. We need to find the minimum possible $x$ that is the difference between $d_i$ - $d_i$ and $d_i$.\n4. We need to find the minimum possible $x$ that is the difference between $d_i$ - $d_i$ and $d_i$.\n5. We need to find the minimum possible $x$ that is the difference between $d_i$ - $d_i$ and $d_i$.\n\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"48\"\n'''"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 48\n\n'''\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '48'\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2') == '48'\nassert solution('2 3') == '7'\nassert solution('2 4') == '4'\nassert solution('2 4 5') == '5'\nassert solution('2 3 4 5') == '3'\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2') == -1\nassert solution('1') == 1\nassert solution('6') == 4\nassert solution('3') == 6\nassert solution('1') == -1"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2\\n8\\n8 2 12 6 4 24 16 3') == '48'\nassert solution('2\\n8\\n8 2 12 6 4 24 16 3\\n1') == '1'\nassert solution('2\\n8\\n8 2 12 6 4 24 16 3\\n2') == -1\nassert solution('2\\n8\\n8 2 12 6 4 24 16 3\\n7') == '7'\nassert solution('2\\n8\\n8 2 12 6 4 24 16 3\\n3') == '7'\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input() == \"5 6 1\") == \"3\"\nassert solution(input() == \"5 6 6\") == \"3 4\"\nassert solution(input() == \"1 5 5 1\") == \"2\"\nassert solution(input() == \"1 3\") == \"1\"\nassert solution(input() == \"\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 5 5 1 6 1\") == \"3\"\nassert solution(\"2 4 2 4 4\") == \"2\"\nassert solution(\"6 6 6 6 6\") == \"1\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"2 3 4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2 4\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5 6\"\n\nassert solution(stdin) == \"1 5 5 1 6 1\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 4 2 4 4\") == \"1 4\"\nassert solution(\"1 2 4 6\") == \"1 3\"\nassert solution(\"5 2 4 3\") == \"1 3 4\"\nassert solution(\"5 6 6 6 6\") == \"1 3\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\"\"1 5 5 1 6 1\"\"\") == \"3\"\nassert solution(\"\"\"2 4 2 4 4\"\"\") == \"2\"\nassert solution(\"\"\"6 6 6 6 6\"\"\") == \"1\"\nassert solution(\"\"\"1 1 1 1 1\"\"\") == \"1\"\nassert solution(\"\"\"2 1 2 1 2\"\"\") == \"2\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 4 4\") == \"2 4\"\nassert solution(\"5 1 4 5 6\") == \"1\"\nassert solution(\"5 1 1 1 1 1\") == \"1\"\nassert solution(\"5 1 2 4 4\") == \"2 4\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 23\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"42\") == \"44\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\""
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"435\"\nassert solution(stdin) == \"347\"\nassert solution(stdin) == \"239\"\nassert solution(stdin) == \"443\"\nassert solution(stdin) == \"472\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"435\"\n\n-----Constraints-----\n1 <= a <= 1000\n\n------Time complexity-------\nO(n)\n\n------Space complexity-------\nO(n)\n\n\n------Time complexity-------\nO(n)\n\n------Space complexity-------\nO(n)\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"{a}\") == \"435\"\nassert solution(\"{a}\") == \"435\"\nassert solution(\"{a}\") == \"435\"\nassert solution(\"{a}\") == \"435\"\nassert solution(\"{a}\") == \"435\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(43) == 42\nassert solution(99) == 103\nassert solution(237) == 237\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"432\"\n) == \"435\"\nassert solution(\n    \"99\"\n) == \"103\"\nassert solution(\n    \"237\"\n) == \"237\"\nassert solution(\n    \"42\"\n) == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\nassert solution(5) == 5\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"99\") == \"99\"\nassert solution(\"9\") == \"9\"\nassert solution(\"9\") == \"9\"\nassert solution(\"9\") == \"9\"\nassert solution(\"0\") == \"9\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"234\") == \"435\"\nassert solution(\"23\") == \"234\"\nassert solution(\"4\") == \"234\"\nassert solution(\"5\") == \"234\"\nassert solution(\"12\") == \"234\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"abac\",\"abac\"]) == \"aac\", \"answer is wrong\"\nassert solution([\"abac\",\"aac\"]) == \"aac\", \"answer is wrong\"\nassert solution([\"abac\",\"aac\",\"aac\"]) == \"aac\", \"answer is wrong\"\nassert solution([\"abc\",\"aab\"]) == \"aab\", \"answer is wrong\"\nassert solution([\"abc\",\"ab\",\"aac\"]) == \"aac\", \"answer is wrong\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"aac\") == \"a\", \"a should be aac\"\nassert solution(\"aab\") == \"a\", \"a should be a\"\nassert solution(\"ecoosdcefr\") == \"d\", \"e should be e\"\nassert solution(\"faab\") == \"a\", \"a should be a\"\nassert solution(\"foooo\") == \"f\", \"f should be f\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(stdin) == \"abca\"\nassert solution(stdin) == \"aabc\"\nassert solution(stdin) == \"abc\"\nassert solution(stdin) == \"abc\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"aac\", \"aab\"]) == \"aac\", \"aac, aab\"\nassert solution([\"abac\", \"aab\"]) == \"abac\", \"abac, aab\"\nassert solution([\"a\", \"a\", \"a\", \"a\", \"a\"]) == \"ab\", \"a, a, a, a, a\"\nassert solution([\"abc\", \"def\"]) == \"def\", \"abc, def\"\nassert solution([\"a\"]) == \"a\", \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abac\") == \"aab\"\nassert solution(\"aac\") == \"b\"\nassert solution(\"aab\") == \"c\"\nassert solution(\"eooo\") == \"c\"\nassert solution(\"aabba\") == \"c\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, [\"aac\", \"aab\", \"abac\"]) == \"abc\"\nassert solution(3, [\"aac\", \"aab\", \"abac\"]) == \"a\"\nassert solution(3, [\"aac\", \"aab\", \"abac\"]) == \"a\"\nassert solution(3, [\"aac\", \"aab\", \"abac\"]) == \"b\"\nassert solution(3, [\"aac\", \"aab\", \"abac\"]) == \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('abac') == 'aac', 'Output should be \"aac\"'\nassert solution('abac') == 'aac', 'Output should be \"aac\"'\nassert solution('abc') == 'abc', 'Output should be \"abc\"'\nassert solution('abc') == 'abc', 'Output should be \"abc\"'\nassert solution('baa') == 'aba', 'Output should be \"aba\"'\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"abac\", \"3\", \"2 1 0\", \"abc\", \"1\", \"0\", \"abba\", \"3\", \"1 0 1\", \"ecoosdcefr\", \"10\", \"38 13 24 14 11 5 3 24 17 0\"]) == \"aac\"\nassert solution([\"aac\", \"a\", \"ab\", \"c\"]) == \"abc\"\nassert solution([\"aab\", \"a\", \"a\", \"b\"]) == \"a\"\nassert solution([\"aab\", \"a\", \"ab\", \"b\"]) == \"a\"\nassert solution([\"a\", \"b\", \"a\", \"a\"]) == \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('abcd') == 'ba'\nassert solution('cdefgh') == 'ca'\nassert solution('def') == 'def'\nassert solution('f') == 'fa'\nassert solution('abac') == 'abac'\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abac') == 'aab'\nassert solution('abc') == 'b'\nassert solution('a') == 'a'\nassert solution('ab') == 'b'\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'b'\nassert solution(input()) == 'b'\nassert solution(input()) == 'b'\nassert solution(input()) == 'b'\nassert solution(input()) == 'b'\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1000000000000001 dogs suddenly appeared under the roof of Roger's house, all of which he decided to keep. The dogs had been numbered 1 through 1000000000000001, but he gave them new names, as follows:\n - the dogs numbered 1,2,\\cdots,26 were respectively given the names a, b,..., z;\n - the dogs numbered 27,28,29,\\cdots,701,702  were respectively given the names aa, ab, ac,..., zy, zz;\n - the dogs numbered 703,704,705,\\cdots,18277,18278  were respectively given the names aaa, aab, aac,..., zzzy, zzz;\n - the dogs numbered 18279,18280,18281,\\cdots,475253,475254  were respectively given the names aaaa, aaaab,...;\n - and so on.\nTo sum it up, the dogs numbered 1, 2, \\cdots were respectively given the following names:\na, b,..., z, aa, ab,..., az, ba, bb,..., bz,..., za, zb,..., zz, aaa, aab,..., aaz, aba, abb,..., abz,..., zzz, aaaa,...\n\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1000000000000001 dogs suddenly appeared under the roof of Roger's house, all of which he decided to keep. The dogs had been numbered 1 through 1000000000000001, but he gave them new names, as follows:\n - the dogs numbered 1,2,\\cdots,26 were respectively given the names a, b,..., z;\n - the dogs numbered 27,28,29,\\cdots,701,702  were respectively given the names aaa, aab, aac,..., zyy, zzz;\n - the dogs numbered 703,704,705,\\cdots,18277,18278  were respectively given the names aaaa, aaab,...;\n - the dogs numbered 18279,18280,18281,\\cdots,475253,475254  were respectively given the names aaaaa, aaaab,...;\n - the dogs numbered 475255,475256,\\cdots  were respectively given the names aaaaa, aaaab,...;\n - and so on.\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'b'"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"ba\"\nassert solution(\"c\") == \"ca\"\nassert solution(\"a\") == \"a\"\nassert solution(\"\") == \"\"\nassert solution(\"abcde\") == \"cd\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3) == \"a\"\nassert solution(9) == \"bb\"\nassert solution(1000) == \"aaaabbbccd\"\nassert solution(10000) == \"aaaabbccddddeeeeeeeeeeeeeeeeeeeeeee\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"b\"\nassert solution(\"4\") == \"ba\"\nassert solution(\"1\") == \"a\"\nassert solution(\"17\") == \"aab\"\nassert solution(\"1727\") == \"aac\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"b\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n_____________________________________________________________________________________\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 13\n\nassert solution(stdin) == 12\n\n\n-----Constraints-----\n1 <= n <= 10^4\n1 <= w_i <= 10^7\n\n-----Time Limit: 1 minute\n-----Space Limit: 1MB\n\nALGORITHM:\nS = [s_i, s_{i+1}, s_j,..., sn-1, s_{n-1}, s_{n}]\n\nS[i][j] = s_i[:i] + s_i[i+1:] + [w_i[:j] + w_i[j+1:] + [w_j] for w_j in range(j + 1, sn - 1) for w_i in range(i + 1, n) if w_i < sn]\nS[i][j] = s_i[:i] + s_i[i+1:] + [w_i[:j] + [w_j] + w_i[j+1:] + [w_j + [s_j]] for w_j in range(j + 1, sn) for w_i in range(i + 1, n) if w_i < sn]\n\n\"\"\""
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('to be or not to be') == 12, 'Wrong result'\nassert solution('a ab aa aa bb aa bb') == 11, 'Wrong result'\nassert solution('aa bb aa aa bb bb') == 11, 'Wrong result'\nassert solution('aa bb aa aa bb') == 12, 'Wrong result'\nassert solution('a a a a') == 11, 'Wrong result'\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 12\nassert solution(stdin) == 13\nassert solution(stdin) == 11\nassert solution(stdin) == 12\nassert solution(stdin) == 11\n\n\nExample 2\n\nInput\n5\nto be or not to be\n\nOutput\n13\n\nExample 3\n\nInput\n3\nAA AB BA AB\n\nOutput\n2\n\n\n\n-----Notes-----\n\nYou are not allowed to use any permutation of the letters of the word.\n\nNote: you do not need to write any code.\n\nConstraints:\n\n1 <= n <= 10^5\n\nAccepted\n71,150\nSubmissions\n14,144\nMemory Usage\n\nRuntime: 92 ms, faster than 87.62% of Python3 online submissions for Minimum Length of Abbreviations.\nMemory Usage: 14.1 MB, less than 93.56% of Python3 online submissions for Minimum Length of Abbreviations.\n\n\"\"\"\n\nclass Solution:\n    def minimumLengthAbbreviations(self, text: str) -> int:\n        max_num = len(text)\n        visited = set()\n        for i in range(len(text) - 1):\n            if text[i] in visited:\n                continue\n            j = i + 1\n            k = j + 1\n            while k < len(text):\n                if text[i:j+1] in visited:\n                    j += 1\n                else:\n                    visited.add(text[i:j+1])\n                    if k < len(text):\n                        k += 1\n                    else:\n                        k = 0\n            visited.add(text[i:j+1])\n            if len(text[i:j+1]) < max_num:\n                max_num = len(text[i:j+1])\n        return max_num\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 12\nassert solution(stdin) == 13\nassert solution(stdin) == 11\nassert solution(stdin) == 12\nassert solution(stdin) == 12\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"aaaaaabbbaaaaaaab\"), \"4\"\nassert solution(\"aab\"), \"2\"\nassert solution(\"aaab\"), \"2\"\nassert solution(\"baa\"), \"1\"\nassert solution(\"aabab\"), \"1\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('to be or not to be') == 12\n\n\n-----Constraints-----\n1 <= n <= 100\n\n-----Time Limit-----\n0 < n < 300\n\n\n-----Example 1-----\nInput\n\nInput 1:\n\nOutput 1:\n\nExplanation 1:\n\nAll possible words are written consecutively, so the segment of words that contains each word is an abbreviation.\n\nThe text should be lowercased, and all letters are lowercase.\n\nExplanation 2:\n\nThere are n+1 segments of words, so the segment that contains all words is a abbreviation.\n\nNote that, since the words are separated by spaces, it will be written in lowercase.\n\nExplanation 3:\n\nThis means that it is possible to create one segment of words. The segment of words that contains all words is an abbreviation.\n\nThe first word of a segment of words is a first letter of the word. The segment of words that contain the word \"a\" is an abbreviation.\n\nThe next word of a segment of words is a second letter of the word. The segment of words that contain the word \"a\" is an abbreviation.\n\nThe next word of a segment of words is a third letter of the word. The segment of words that contain the word \"a\" is an abbreviation.\n\nThe first word of a segment of words is a space character. The segment of words that contain the word \"a\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"a\" is not an abbreviation.\n\nThe second word of a segment of words is a space character. The segment of words that contain the word \"a\" is not an abbreviation.\n\nThe third word of a segment of words is a space character. The segment of words that contain the word \"a\" is not an abbreviation.\n\nThe first word of a segment of words is a space character. The segment of words that contain the word \"b\" is an abbreviation.\n\nThe second word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe third word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe first word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe second word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe third word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The segment of words that contain the word \"b\" is not an abbreviation.\n\nThe next word of a segment of words is a space character. The"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 11\nassert solution(input()) == 13\n\n\n-----Constraints-----\n1 <= n <= 300\n1 <= words[i] <= 10^6\n\n\n-----Time Limit Exceeded-----\nTime limit exceeded\n\n\n\n-----Submissions-----\nSame as above, but the time limit is 0.1 seconds\n\n\"\"\""
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 12\n\nassert solution(stdin) == 13\n\nassert solution(stdin) == 11\n\nassert solution(stdin) == 12\n\nassert solution(stdin) == 13\n\"\"\"\n\nfrom typing import Tuple\n\nimport collections"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"solution does not work\"\n\n------Examples-----\nInput\n8 3\n5 4 2 6 5 1 9 2\n\nOutput\n3\n4\n5\n\nInput\n4 2\n1 2000 2000 2\n\nOutput\n1\n4\n5\n\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4000\"\n\n-----Constraints-----\n1 <= n <= 2000\n\n0 <= stdin[i] <= 2000\n\n0 <= stdin[i + j] <= 2000"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '4000'\n\n----------Constraints----------\n\n1 <= n <= 2^3\n1 <= k <= 2000\n-100 <= a_1, a_2, a_3 <= 2000\n\n------Coding Rules------\n\nThe input consists of two lines. The first line contains the number of problems and the number of days. The second line contains the difficulties of each problem separated by a space.\n\nThe input consists of two lines. The first line contains the number of problems and the number of days. The second line contains the difficulties of each problem separated by a space.\n\n\n------My Code-----"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2000'\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4000'\n\n-----Constraints-----\n\n0 <= stdin.length <= 200\n1 <= k <= n\n\n0 <= a_1, a_2, \\dots, a_n <= 2000\na_1, a_2, \\dots, a_n are integers in the range [1, 2000].\n\nFor the range $1 \\le a_1 \\le 2000$ and $1 \\le a_2 \\le 2000$ and $1 \\le a_3 \\le 2000$ and $1 \\le a_4 \\le 2000$ and $1 \\le a_5 \\le 2000$ and $1 \\le a_6 \\le 2000$ and $1 \\le a_7 \\le 2000$ and $1 \\le a_8 \\le 2000$\nand $1 \\le a_9 \\le 2000$ and $1 \\le a_10 \\le 2000$ and $1 \\le a_11 \\le 2000$ and $1 \\le a_12 \\le 2000$\nand $1 \\le a_13 \\le 2000$ and $1 \\le a_14 \\le 2000$ and $1 \\le a_15 \\le 2000$\nand $1 \\le a_16 \\le 2000$ and $1 \\le a_17 \\le 2000$ and $1 \\le a_18 \\le 2000$ and $1 \\le a_19 \\le 2000$\nand $1 \\le a_20 \\le 2000$\nand $1 \\le a_21 \\le 2000$ and $1 \\le a_22 \\le 2000$ and $1 \\le a_23 \\le 2000$\nand $1 \\le a_24 \\le 2000$\nand $1 \\le a_25 \\le 2000$ and $1 \\le a_26 \\le 2000$\nand $1 \\le a_27 \\le 2000$ and $1 \\le a_28 \\le 2000$\nand $1 \\le a_29 \\le 2000$ and $1 \\le a_30 \\le 2000$\nand $1 \\le a_31 \\le 2000$ and $1 \\le a_32 \\le 2000$\nand $1 \\le a_33 \\le 2000$ and $1 \\le a_34 \\le 2000$\nand $1 \\le a_35 \\le 2000$ and $1 \\le a_36 \\le 2000$\nand $1 \\le a_37 \\le 2000$ and $1 \\le a_38 \\le 2000$\nand $1 \\le a_39 \\le 2000$ and $1 \\le a_40 \\le 2000$\nand $1 \\le a_41 \\le 2000$ and $1 \\le a_42 \\le 2000$\nand $1 \\le a_43 \\le 2000$ and $1 \\le a_44 \\le 2000$\nand $1 \\le a_45 \\le 2000$ and $1 \\le a_46 \\le 2000$\nand $1 \\le a_47 \\le 2000$ and $1 \\le a_48 \\le 2000$\nand $1 \\le a_49 \\le 2000$ and $1 \\le a_50 \\le 2000$\nand $1 \\le a_51 \\le 2000$ and $1 \\le a_52 \\le 2000$\nand $1 \\le a_53 \\le 2000$ and $1 \\le a_54 \\le 2000$\nand $1 \\le a_55 \\le 2000$ and $1 \\le a_56 \\le 2000$\nand $1 \\le a_57 \\le 2000$ and $1 \\le a_58 \\le 2000$\nand $1 \\le a_59 \\le 2000$ and $1 \\le a_60 \\le 2000$\nand $1 \\le a_61 \\le 2000$ and $1 \\le a_62 \\le 2000$\nand $1 \\le a_63 \\le 2000$ and $1 \\le a_64 \\le 2000$\nand $1 \\le a_65 \\le 2000$ and $1 \\le a_66 \\le 2000$\nand $1 \\le a_67 \\le 2000$ and $1 \\le a_68 \\le 2000$\nand $1 \\le a_69 \\le 2000$ and $1 \\le a_70 \\le 2000$\nand $1 \\le a_71 \\le 2000$ and $1 \\le a_72 \\le 2000$\nand $1 \\le a_73 \\le 2000$ and $1 \\le a_74 \\le 2000$\nand $1 \\le a_75 \\le 2000$ and $1 \\le a_76 \\le 2000$\nand $1 \\le a_77 \\le 2000$ and $1 \\le a_78 \\le 2000$\nand $1 \\le a_79 \\le 2000$ and $1 \\le a_80 \\le 2000$\nand $1 \\le a_81 \\le 2000$ and $1 \\le a_82 \\le 2000$\nand $1 \\le a_83 \\le 2000$ and $1 \\le a_84 \\le 2000$\nand $1 \\le a_85 \\le 2000$ and $1 \\le a_86 \\le 2000$\nand $1 \\le a_87 \\le 2000$ and $1 \\le a_88 \\le 2000$\nand $1 \\le a_89 \\le 2000$ and $1 \\le a_90 \\le 2000$\nand $1 \\le a_91 \\le"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2000\"\nassert solution(stdin) == \"4000\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4000'"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"4000\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3 4 5 6 1 9 2\") == \"400\"\nassert solution(\"5 1 1 1 1 1\") == \"4000\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"3 2 3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '4000'\nassert solution(stdin) == '4000'\nassert solution(stdin) == '4000'\nassert solution(stdin) == '4000'"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"0\"\nassert solution(input) == \"0\"\nassert solution(input) == \"0\"\nassert solution(input) == \"0\"\nassert solution(input) == \"0\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(solution(\"5 4 -1 -1 1 -1 1 -1 -1\")) == \"3\"\n\n\n-----IMPORTANT-----\n\nIf you want to use less memory than standard programming, then you can add additional lines at the end of the input.\n\nIf you want to use more memory than standard programming, then you can split the input line by spaces in the end of the input line.\n\nIf you want to use less memory than standard programming, then you can use nested loops, which is much faster than standard programming.\n\nNote: only numeric strings are accepted.\n\n-----CONSTANTS-----\n\nINT_MAX = 2147483647\nINT_MIN = -2147483648\n\n\n-----CONSTANTS END-----\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n\n----Test Cases----\n\nInput 1:\n\nn = 4\na_1 = 1 -5 3 2\na_2 = 4 -2 3 -9 2\na_3 = -1 1 -1 1 -1 1 -1 -1\n\nOutput 1:\n\n1\n\nInput 2:\n\nn = 5\na_1 = 1 -5 -3 -1 -1 1 1\na_2 = 4 -2 -9 -1 1 1 1 -1 -1\na_3 = -1 1 -1 1 -1 1 -1 -1 -1\n\nOutput 2:\n\n0\n\n-----Constraints-----\n\n1 <= n <= 10^3\n\n\n-----Time complexity-----\n\nO(n)\n\n\nO(n)\n\n\nExample 1:\n\nInput:\n\n4\n1 -5 3 2\n\nOutput:\n\n3\n\nExample 2:\n\nInput:\n\n5\n-1 1 -1 1 -1 1 1 -1 -1\n\nOutput:\n\n0\n\n\n-----Note-----\n\nThe array is very big. You can't insert any integer in the array without modifying it, so it's ok.\n\nIt's just quite useful.\n\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"0\"\n\nassert solution(\"5 -2 3 2\") == \"0\"\n\nassert solution(\"-1 1 -1 1 -1 1 -1 -1\") == \"0\"\n\nassert solution(\"-1 1 -1 1 -1 1 -1 -1\") == \"0\"\n\nassert solution
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 -5 3 2') == '1'\nassert solution('5 4 -4 3 2') == '0'\nassert solution('9 2 -9 1 -1 1 1 -1 -1') == '1'\nassert solution('8 -16 -15 10 5 4 -4') == '0'\nassert solution('8 -16 -15 10 5 4 -4') == '6'\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 5 -5 0\") == \"3 0\"\nassert solution(\"8 5 3 2\") == \"4 0\"\nassert solution(\"4 2 4 -4 1\") == \"0 1\"\nassert solution(\"16 -5 -11 -15 10 5 4 -4\") == \"0\"\n\n\n-----Note-----\n\nTo solve this problem you'll need to find the minimum number of integers that you need to insert into Kolya's array in such a way that the resulting array doesn't contain any subsegments with the sum $0$. If there are multiple elements with the same sum then Kolya needs to insert all the elements of the subsegments that have the same sum.\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 200\\,000$) \u2014 the number of elements in Kolya's array.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^{9} \\le a_i \\le 10^{9}, a_i \\neq 0$) \u2014 the description of Kolya's array.\n\n\n-----Output-----\n\nPrint the minimum number of integers you have to insert into Kolya's array in such a way that the resulting array doesn't contain any subsegments with the sum $0$.\n\n\n-----Examples-----\nInput\n4\n1 -5 3 2\n\nOutput\n1\n\nInput\n5\n4 -2 3 -9 2\n\nOutput\n0\n\nInput\n8\n16 -5 -11 -15 10 5 4 -4\n\nOutput\n3\n\n\n\n-----Note-----\n\nConsider the first example. There is only one subsegment with the sum $0$. It starts in the second element and ends in the fourth element. It's enough to insert one element so the array doesn't contain any subsegments with the sum equal to zero. For example, it is possible to insert the integer $1$ between second and third elements of the array.\n\nThere are no subsegments having sum $0$ in the second example so you don't need to do anything.\n\nThere are multiple elements with the same sum but different subsegments with the same sum so you don't need to insert any elements in the subsegments with the sum equal to zero.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 200\\,000$) \u2014 the number of elements in Kolya's array.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^{9} \\le a_i \\le 10^{9}, a_i \\neq 0$) \u2014 the description of Kolya's array.\n\n\n-----Output-----\n\nPrint the minimum number of integers you have to insert into Kolya's array in such a way that the resulting array doesn't contain any subsegments with the sum $0$.\n\n\n-----Examples-----\nInput\n4\n1 -5 3 2\n\nOutput\n1\n\nInput\n5\n4 -2 3 -9 2\n\nOutput\n0\n\nInput\n8\n16 -5 -11 -15 10 5 4 -4\n\nOutput\n3\n\n\n\n-----Note-----\n\nConsider the second example. There is only one subsegment with the sum $0$. It starts in the second element and ends in the fourth element. It's enough to insert one element so the array doesn't contain any subsegments with the sum equal to zero. For example, it is possible to insert the integer $1$ between second and third elements of the array.\n\nThere are no subsegments having sum $0$ in the second example so you don't need to do anything.\n\nThere are multiple elements with the same sum but different subsegments with the same sum so you don't need to insert any elements in the subsegments with the sum equal to zero.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 200\\,000$) \u2014 the number of elements in Kolya's array.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^{9} \\le a_i \\le 10^{9}, a_i \\neq 0$) \u2014 the description of Kolya's array.\n\n\n-----Output-----\n\nPrint the minimum number of integers you have to insert into Kolya's array in such a way that the resulting array doesn't contain any subsegments with the sum $0$.\n\n\n-----Examples-----\nInput\n4\n1 -5 3 2\n\nOutput\n1\n\nInput\n5\n4 -2 3 -9 2\n\nOutput\n0\n\nInput\n8\n16 -5 -11 -15 10 5 4 -4\n\nOutput\n3\n\n\n\n-----Note-----\n\nKolya does not like that the sum of some subsegments can be $0$. The subsegment is some consecutive segment of elements of the array.\n\nThe subsegment is some consecutive segment of elements of the array that can be represented as integers by using all adjacent integers. For example, [1, 3, 5, 7, 9].\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 200\\,000$) \u2014 the number of elements in Kolya's array.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^{9} \\le a_i \\le 10^{9}, a_i \\neq 0$) \u2014 the description of Kolya's array.\n\n\n-----Output-----\n\nPrint the minimum number of integers you have to insert into Kolya's array in such a way that the resulting array doesn't contain any subsegments with the sum $0$.\n\n\n-----Examples-----\nInput\n4\n1 -5 3 2\n\nOutput\n1\n\nInput\n5\n4 -2 3 -9 2\n\nOutput\n0\n\nInput\n8\n16 -5 -11 -15 10 5 4 -4\n\nOutput\n3\n\n\n\n-----Note-----\n\nConsider the first example. There is only one subsegment with the sum $0$. It starts in the second element and ends in the fourth element. It's enough to insert one element so the array doesn't contain"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Constraints-----\n1 <= n <= 200\n-10^9 <= a_i \\le 10^9\n-10^9 <= a_1, a_2, a_3, a_4 <= 10^9\n\n------IMPORTS-----\nimport sys\nfrom itertools import combinations\n\nsys.setrecursionlimit(10**6)\n\nn = int(input())\na = list(map(int, input().split()))\na = sorted(a, key=lambda x: x*-1)"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 1 2 3 4') == '0'\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0 2 0 1\") == \"0\"\nassert solution(\"1 -1 1\") == \"-1\"\nassert solution(\"2 -1 -1 1\") == \"0\"\nassert solution(\"3 1 1 -1\") == \"-1\"\nassert solution(\"4 1 -1 1 2 3\") == \"0\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"2000000000\"\n\n-----Constraints-----\n1 <= t <= 10^4\n\nO(m * n) time |n| + |m| + 2 |m| = 1\nm <= n <= 10^9\n\nIntrinsic Space\n1 <= n <= 10^9\n\n0 <= m <= n\n\n1 <= t <= 10^4\n\"\"\"\nt = int(input())\nfor i in range(t):\n    n,m = map(int,input().split())\n    s = input()\n    answer = 0\n    for i in range(n-1):\n        answer += abs(int(s[i+1])-int(s[i]))\n    print(answer)\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0'\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '10'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"10\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n        stdin: str\n    ) == \"0\"\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"0\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"10\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '10'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == ''\n\n\n-----Constraints-----\n\n1\n10^4\n\n\n\n-----Submissions-----\n\n1\n\n------OUTPUT------\n\n1\n'''\n\nt = int(input())\n\nfor case in range(t):\n    n,m=map(int,input().split())\n    a = list(map(int,input().split()))\n\n    maxValue=0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum=0\n            for k in range(j+1,n):\n                sum+=abs(a[k]-a[j])\n            if sum>=m:\n                maxValue=max(sum,maxValue)\n    print(maxValue)"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '10'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(-1)\n'''\nimport math\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"4\"\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"101\"]) == \"4\"\nassert solution([\"7\", \"77\", \"777\"]) == \"4\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\"]) == \"41\""
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"101\") == 4\nassert solution(\"7777\") == -1\nassert solution(\"77777\") == -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\"\n\n\nclass Solution:\n    def findNumbers(self, K: int) -> str:\n        s = ''\n        for i in range(1, int(K ** 0.5) + 1):\n            if K % i == 0:\n                s += str(i)\n                if K // i == K % i:\n                    s += '.'\n        if K == 1:\n            return '1'\n        else:\n            return s[:-1]\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\")\") == \"7\"\nassert solution(\"(\") == \"77\"\nassert solution(\"(())\") == \"77\"\nassert solution(\"(()\") == \"77\"\nassert solution(\"((\") == \"77\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\""
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\n\n\n### Question\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '4'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"48\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"48\"\nassert solution(stdin) == \"48\"\nassert solution(stdin) == \"48\"\nassert solution(stdin) == \"48\"\nassert solution(stdin) == \"48\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, \"2 4 5 3 1\") == \"1 4\"\nassert solution(15, \"1 2 3 4 5\") == \"1 2\"\nassert solution(15, \"1 2 3 4 5\") == \"1 2\"\nassert solution(16, \"1 2 3 4 5\") == \"1 2\"\nassert solution(16, \"1 2 3 4 5\") == \"1 2\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"24\"\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\",\"2\",\"3\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\"]) == \"12\"\nassert solution([\"2\",\"1\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\"]) == \"1\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"48\"\n'''\n\nimport collections\nimport math\nimport sys\n\nread = sys.stdin.readline\n\nclass Solution:\n    def median(self, n, p):\n        median = math.floor(((n-1)*(n-2)/2 + n/2) / 2)\n        total = len(p)\n        for i in range(n):\n            for j in range(i, total):\n                if p[i] > p[j]:\n                    median = max(median, p[j]-p[i])\n        return median\n\n    def solution(self, n, m, p):\n        p.sort()\n        median = self.median(n, p)\n        if m > n/2:\n            return 0\n        if m <= (n-1)/2:\n            return median\n        mid = math.floor((n-1)/2+m)\n        left = self.solution(n, m, p[mid:mid+2])\n        right = self.solution(n, m, p[:mid+1])\n        if left < right:\n            return median + left\n        else:\n            return median + right\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5, [1, 2, 3, 4, 5]) == 4\nassert solution(5, [1, 2, 3, 4, 8]) == 0\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 48\nassert solution(stdin) == 48\n\n-----------------------------\n\nTest cases\n\nInput 1:\n\n3\n1\n2\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\n\nInput 2:\n\n4\n1 3 5 7 8 9 10\n1\n\nOutput 1:\n\n7\n\nInput 2:\n\n3\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\n\nInput 3:\n\n3\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\n\n1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\n\nOutput: 1\n\n\n-----------------------------\n\nConstraints:\n1 <= n <= 2^30\n1 <= p_1 < p_2 < p_3 < p_4 < p_5 < p_6 < p_7 < p_8 < p_9 < p_10 < p_11 < p_12 < p_13 < p_14 < p_15 < p_16 < p_17 < p_18 < p_19 < p_20 < p_21 < p_22 < p_23 < p_24 < p_25 < p_26 < p_27 < p_28 < p_29 < p_30 < p_31 < p_32 < p_33 < p_34 < p_35 < p_36 < p_37 < p_38 < p_39 < p_40 < p_41 < p_42 < p_43 < p_44 < p_45 < p_46 < p_47 < p_48 < p_49\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 200\n1 <= n, m <= 100\n1 <= a_1, a_2, a_3 <= 100\n1 <= a_i <= 10^9\n\n'''"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == str(min(5, 14))\nassert solution(stdin) == str(min(4, 6))\nassert solution(stdin) == str(min(2, 3))\nassert solution(stdin) == str(min(0, 1))\nassert solution(stdin) == str(min(1, 0))\n\n\n---Input:\n\n8\n2 2 1 2\n\nOutput:\n\n3\n\n---Input:\n\n7\n1 1 2 1 1 1 1 1 1 1\n\nOutput:\n\n3\n\n---Input:\n\n5\n1 1 2 1 1 1 1 1 1 1 1\n\nOutput:\n\n5\n\n---Input:\n\n5\n\nOutput:\n\n2\n\n---Input:\n\n5\n\nOutput:\n\n2\n\n---Input:\n\n2\n\nOutput:\n\n1\n\n---Input:\n\n3\n\nOutput:\n\n1\n\n---Input:\n\n3\n\nOutput:\n\n2\n\n---Input:\n\n5\n\nOutput:\n\n2\n\n---Input:\n\n5\n\nOutput:\n\n2\n\n---Input:\n\n5\n\nOutput:\n\n3\n\n---Input:\n\n8\n\nOutput:\n\n3\n\n---Input:\n\n8\n\nOutput:\n\n4\n\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1, 'incorrect'\n\n'''"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5 8') == '4'\nassert solution('5 15') == '2'\nassert solution('5 16') == '1'\nassert solution('5 26') == '-1'"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0\" or solution(stdin) == \"1\"\nassert solution(stdin) == \"1\" or solution(stdin) == \"3\"\nassert solution(stdin) == \"2\" or solution(stdin) == \"4\"\nassert solution(stdin) == \"1\" or solution(stdin) == \"2\"\nassert solution(stdin) == \"2\" or solution(stdin) == \"3\" or solution(stdin) == \"4\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1,1,2,3,4\") == \"3\"\nassert solution(\"1,1,2,3,4,4,1\") == \"3\"\nassert solution(\"2,2,1,2,1,0,2,1\") == \"3\"\nassert solution(\"1,1,2,3,4,5,1,5,5\") == \"5\"\nassert solution(\"1,2,3,4,5,6,7,8,9\") == \"5\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5') == 0\nassert solution('3') == 1\nassert solution('2') == 2\nassert solution('24') == 3\nassert solution('21') == 0\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"-1\"\nassert solution(\"2\") == 0\nassert solution(\"1\") == 1\nassert solution(\"3\") == 3\nassert solution(\"4\") == 3\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(max(get_lcp(stdin)))\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 10\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"7 6\") == \"6\"\nassert solution(\"3 5\") == \"5\"\nassert solution(\"10 10\") == \"10\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['10', '20', '30', '40', '50', '60', '70', '80', '90', '100']) == '100'\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 20"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 10\n\n\n-----My Approach-----\n\n1. Sort and maintain a hashmap to store the number of students.\n2. Use a DFS to identify the students in teams.\n3. How many teams should be allocated for each student.\n4. Find the maximum number of teams that can be allocated for each student.\n5. Find the number of students in each team.\n6. Update the hashmap to keep track of the students in each team.\n7. Backtrack to find the maximum number of teams that can be allocated for each student.\n8. Backtrack to find the maximum number of teams that can be allocated for each student.\n\nRuntime: 188 ms, faster than 81.35% of Python3 online submissions for Non-Balanced Teams.\nMemory Usage: 14.2 MB, less than 70.74% of Python3 online submissions for Non-Balanced Teams.\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        # Time complexity: O(n^2)\n        # Space Complexity: O(n^2)\n        # 4. Use a dict to keep track of the students in teams.\n        # 5. Find the number of teams that can be allocated for each student.\n        # 6. Find the number of students in each team.\n        # 7. Backtrack to find the maximum number of teams that can be allocated for each student.\n        # 8. Backtrack to find the maximum number of teams that can be allocated for each student.\n        n, k = [int(i) for i in stdin.split()]\n        team_number = [0] * n\n        team_students = [0] * n\n        i = 0\n        for j in range(n):\n            a = int(stdin[i])\n            team_number[j] = a\n            team_students[j] = a\n            i += 1\n        \n        team_number.sort()\n        team_students.sort()\n        \n        answer = 0\n        \n        # Initialize a hashmap to store students.\n        # For each student, if the student already exists,\n        # it must be in their hashmap.\n        # Set the value to -1 if the student does not exist.\n        hashmap = {}\n        for i in range(n):\n            if team_number[i] in hashmap:\n                hashmap[team_number[i]].append(i)\n            else:\n                hashmap[team_number[i]] = [i]\n        \n        # For each team, find the students that can be allocated.\n        # If there are no available slots, keep the team as the maximum number of teams.\n        for i in range(n):\n            if len(hashmap[team_students[i]])!= 0:\n                answer += len(hashmap[team_students[i]])\n                for j in range(len(hashmap[team_students[i]])):\n                    for k in range(j+1, len(hashmap[team_students[i]])):\n                        team_number[hashmap[team_students[i]][j]] -= 1\n                        team_number[hashmap[team_students[i]][k]] += 1\n                        if team_number[hashmap[team_students[i]][k]] <= 0:\n                            hashmap[team_students[i]].pop(k)\n                \n        return str(answer)"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"100\"\n\"\"\"\n\nfrom collections import defaultdict\n\n\nclass Dict(defaultdict):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 8"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"7\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"7\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\u201cS\u201d\u201d) == \u201c7\u201d,\u201cexpected\u201d"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 7"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, 7) == 7\nassert solution(8, 3) == -1"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['5', '10', '7', '8', '10', '3', '6', '8', '9']) == '8'\nassert solution(['5', '10', '3', '6', '8', '9']) == -1"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 7\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '7'\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '7'\nassert solution(input()) == '-1'\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3 4\") == \"No\"\nassert solution(\"2 3 4 5\") == \"No\"\nassert solution(\"2 3 4 5 6\") == \"Yes\"\nassert solution(\"2 4 4 4\") == \"No\"\nassert solution(\"4 3 4 4\") == \"Yes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 0 0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0 0'\nassert solution('1 0 0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0 0'\nassert solution('1 0 0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0 0'\nassert solution('1 0 0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0 0'\nassert solution('1 0 0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0 0'\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5 3\", \"1\", \"1\"]) == \"Yes\"\nassert solution([\"1\", \"2\"]) == \"No\"\nassert solution([\"4\", \"5\"]) == \"Yes\"\nassert solution([\"1\", \"3\", \"1\", \"2\"]) == \"No\"\nassert solution([\"2\", \"1\", \"1\"]) == \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == 'Yes'\nassert solution(inp) == 'No'\nassert solution(inp) == 'Yes'\nassert solution(inp) == 'No'\nassert solution(inp) == 'Yes'\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\".\") == \"No\"\nassert solution(\"3\") == \"No\"\nassert solution(\"2\") == \"No\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"3\") == \"Yes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"3\", \"1\"]) == \"No\"\nassert solution([\"3\", \"1\", \"4\", \"1\", \"5\", \"1\", \"6\", \"1\", \"4\", \"1\", \"3\", \"1\"]) == \"Yes\"\nassert solution([\"3\", \"1\", \"4\", \"1\", \"5\", \"1\", \"6\", \"1\", \"4\", \"1\", \"3\"]) == \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 'Yes'\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 1\") == \"NO\"\nassert solution(\"1 0 0\") == \"YES\"\nassert solution(\"1 0 1\") == \"YES\"\nassert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"0 0 0 0\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n\") == \"YES\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n1 1 1 1\\n\") == \"NO\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n\") == \"NO\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n\") == \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1 0 1\") == \"YES\"\nassert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"0 0 0 0\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2 2\") == \"YES\", \"No\"\nassert solution(\n    \"3 4\") == \"YES\", \"No\"\nassert solution(\n    \"1 1 1 1\") == \"NO\", \"No\"\nassert solution(\n    \"0 0 0 0\") == \"NO\", \"No\"\nassert solution(\n    \"0 0 0 0 1\") == \"NO\", \"No\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    ['2', '3', '1', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0']) == \"YES\"\nassert solution(\n    ['3', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']) == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 2') == 'YES'\nassert solution('3 4') == 'YES'\nassert solution('3 3') == 'NO'\nassert solution('3 3') == 'YES'\nassert solution('3 3') == 'YES'\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"YES\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"3 4\") == \"NO\""
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"3 4 5\") == \"YES\"\nassert solution(\"3 5\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1234321\") == \"Yes\"\nassert solution(\"12345\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"412\") == \"Yes\"\nassert solution(\"21\") == \"No\"\nassert solution(\"17\") == \"Yes\"\nassert solution(\"027\") == \"No\"\nassert solution(\"7467\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(get_string(stdin)) == \"Yes\"\nassert solution(get_string(stdin)) == \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"Yes\"\nassert solution(\"100\") == \"No\"\nassert solution(\"1\") == \"No\"\nassert solution(\"342\") == \"Yes\"\nassert solution(\"1534\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"12345678\") == \"Yes\"\nassert solution(\"234567\") == \"No\"\n\n\n\n===============================================================================\nTest case 1\n===============================================================================\n\nInput\n\n1234\n\nOutput\nNo\n\nInput\n\n3445\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 2\n===============================================================================\n\nInput\n\n1234\n\nOutput\nYes\n\nInput\n\n3245\n\nOutput\nNo\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 3\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\nInput\n\n4567\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 4\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\nInput\n\n456789\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 5\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\nInput\n\n456789\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 6\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\nInput\n\n456789\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 7\n===============================================================================\n\nInput\n\n1234\n\nOutput\nNo\n\nInput\n\n13432\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 8\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 9\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 10\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 11\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 12\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 13\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 14\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 15\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 16\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 17\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 18\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 19\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 20\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 21\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 22\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 23\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 24\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 25\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 26\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 27\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 28\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 29\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 30\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 31\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 32\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 33\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 34\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 35\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 36\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 37\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 38\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 39\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 40\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 41\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 42\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 43\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 44\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 45\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 46\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 47\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 48\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 49\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 50\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 51\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 52\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 53\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 54\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 55\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 56\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 57\n===============================================================================\n\nInput\n\n12345\n\nOutput\nYes\n\n===============================================================================\n\n===============================================================================\nTest case 58\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 59\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 60\n===============================================================================\n\nInput\n\n12345\n\nOutput\nNo\n\n===============================================================================\n\n===============================================================================\nTest case 61\n===============================================================================\n\nInput"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"2\", \"3\"]) == \"Yes\", \"2 or 3 is not a solution\"\nassert solution([\"3\", \"2\"]) == \"Yes\", \"3 or 2 is not a solution\"\nassert solution([\"1\", \"5\"]) == \"Yes\", \"1 or 5 is not a solution\"\nassert solution([\"1\", \"4\"]) == \"Yes\", \"1 or 4 is not a solution\"\nassert solution([\"4\", \"3\"]) == \"Yes\", \"4 or 3 is not a solution\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"123456789012345678\") == \"Yes\"\nassert solution(\"1123\") == \"Yes\"\nassert solution(\"1234567890\") == \"No\"\nassert solution(\"12345\") == \"Yes\"\nassert solution(\"123\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"4321\") == \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution('5')) == 'Yes'\nassert solution(solution('1')) == 'No'\nassert solution(solution('3')) == 'No'\nassert solution(solution('4')) == 'Yes'\nassert solution(solution('6')) == 'No'"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 1 3 1\") == \"3\"\nassert solution(\"6 3 1\") == \"3\"\nassert solution(\"6 2 1\") == \"3\"\nassert solution(\"7\") == \"2\"\nassert solution(\"7 5 3 0\") == \"2\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2\",\"2\",\"1\",\"0\",\"0\",\"1\",\"1\"]) == \"3\"\nassert solution([\"1\",\"0\",\"0\",\"0\",\"0\",\"1\",\"1\"]) == \"2\"\nassert solution([\"0\",\"0\",\"0\",\"1\",\"1\",\"1\",\"1\"]) == \"1\"\nassert solution([\"1\",\"1\",\"0\",\"0\",\"1\",\"1\",\"1\"]) == \"1\"\nassert solution([\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]) == \"1\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1 0 0\") == \"3\"\nassert solution(\"0 0 0 0\") == \"5\"\nassert solution(\"0 0 1 0\") == \"3\"\nassert solution(\"0 0 0 1\") == \"3\"\nassert solution(\"0 0 0 0\") == \"5\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 3 1\") == 5\nassert solution(\"6 2 1\") == 3\nassert solution(\"6 3 1\") == 3\nassert solution(\"4 2 1\") == 3\nassert solution(\"4 1 0\") == 2\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\""
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '4'\n\"\"\"\nimport sys\nfrom math import gcd\nfrom collections import Counter\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 1 0 1 1') == '0 0 0 1 0'\nassert solution('1 1 0 1 0') == '1 0 0 1 0'\nassert solution('0 0 0 0 0') == '0 1 0 1 0'\nassert solution('0 0 0 1 1') == '0 0 0 1 0'\nassert solution('0 0 0 1 0') == '0 0 0 1 0'\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '5'\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= b,a <= 10^5\n1 <= s_1, s_2, \\dots, s_n <= 10^5\n\n-----Time Limit: 30 seconds--------\n\nSample Input-1:\n\n4 2 1\n0 1 0 1 0\n\nSample Output-1:\n\n4\n\nSample Input-2:\n\n5 2 1\n1 0 0 1 0 1\n\nSample Output-2:\n\n5\n\nSample Input-3:\n\n6 2 1\n1 0 0 1 0 1\n\nSample Output-3:\n\n3\n\n\n------Solution-----\n\nTime = O(n) + O(n^2)\nSpace = O(1)\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(7,3) == 4\nassert solution(8,3) == -46\nassert solution(0,0) == -1\nassert solution(1,0) == 0\nassert solution(112,37) == 375\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"0\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"1-1\") == \"0\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"376\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1+1-1+0+0\") == \"4\"\nassert solution(\"2+2\") == \"0\"\nassert solution(\"2+2-1-0-1\") == \"0\"\nassert solution(\"2+2-1-0-1-0\") == \"0\"\nassert solution(\"2+2-1-0-1-0+0\") == \"0\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n        \"2+2\") == 4\nassert solution(\n    \"8-7+6-5+4-3+2-1-0\") == -46\nassert solution(\n    \"112-37\") == 375\nassert solution(\n    \"2+2\") == -46\nassert solution(\n    \"2-1\") == -1\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '375'\nassert solution(inp) == '4'\nassert solution(inp) == '-46'\nassert solution(inp) == '0'\nassert solution(inp) == '1'\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(8-7+6-5+4-3+2-1-0) == 4\nassert solution(2+2) == -46\nassert solution(112-37) == 375\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5+8-3-3+0\") == \"8\"\nassert solution(\"1+4\") == \"6\"\nassert solution(\"1-1\") == \"0\"\nassert solution(\"10-2-2-1+2\") == \"11\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == answer\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '375'\nassert solution(input()) == '2398'\nassert solution(input()) == '104'\nassert solution(input()) == '29'\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('') == 'YES'\n\"\"\"\nComplete the solution so that it prints \"YES\" when the color of the man's costume is the same as the color of the woman's costume in the next pair. \nThen print \"NO\" when the color of the man's costume is different from the color of the woman's costume in the next pair. \n\"\"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('0 2 3 4 5') == 'YES'\nassert solution('1 2 3 4') == 'YES'\nassert solution('1 3 1 4') == 'NO'\nassert solution('4 5 2 3 4') == 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 0 0 1 0 0 0 0 0\") == \"NO\"\nassert solution(\"1 1 1 1 1 1 0 1 0 0 0\") == \"YES\"\nassert solution(\"1 2 0 0 0 0 0 0 1 0 0\") == \"YES\"\nassert solution(\"1 1 1 1 1 1 0 0 0 0\") == \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 100"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == -1\nassert solution(input()) == 18\nassert solution(input()) == 0\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1, \"The condition is not satisfiable\"\n\"\"\"\nn, k = map(int, input().split())\nx = list(map(int, input().split()))\n\nsum_beauty = 0\nsum_beauty_array = []\n\nfor i in range(1, n+1):\n    sum_beauty_array.append(sum(x[:i]))\n\nmax_beauty = max(sum_beauty_array)\n\nbeauty = x.count(max_beauty)\n\nfor j in range(1, k+1):\n    beauty = max(beauty, sum(x[:j]) + x[j])"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n\nExplanation\nThe news feed has a minimum length of 5, and the number of pictures Vova has to repost 1, which is the minimum length of segment with at least one repost.\n\nFor example, if $k=1$ then Vova has to repost all the pictures in the news feed.\n\nThe beauty of Vova is 100, but the sum of beauty values of all reposted pictures is 1.\n\nFor example, if $k=2$ then Vova can skip some pictures, and between each pair of consecutive pictures Vova has to repost at least one of them.\n\nThe sum of beauty values of reposted pictures is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 = 105.\n\nFor example, if $k=3$ then Vova has to repost all the pictures in the news feed.\n\nThe beauty of Vova is 105, but the sum of the beauty values of reposted pictures is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 = 108.\n\nFor example, if $k=4$ then Vova has to skip some pictures, but between each pair of consecutive pictures Vova has to repost at least one of them.\n\nThe sum of the beauty values of reposted pictures is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 = 106.\n\nFor example, if $k=5$ then Vova has to repost all the pictures in the news feed.\n\nThe sum of the beauty values of reposted pictures is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 = 108.\n\nInput\n\n10 50 2 10\n5\n\nOutput\n\n2\n\nInput\n\n3 7 50 10\n6\n\nOutput\n\n2\n\nInput\n\n5 2 2 2\n1\n\nOutput\n\n2\n\nInput\n\n3 10 2 10\n2\n\nOutput\n\n4\n\nInput\n\n3 10 2 10\n3\n\nOutput\n\n2\n\nInput\n\n10 5\n5\n\nOutput\n\n5\n\nExplanation\nVova likes pictures with kittens. The news feed is a picture with one picture reposted by Vova, and another picture reposted by kitten. Vova likes all these pictures, and the sum of beauty values of reposted pictures is maximum possible.\n\nVova likes pictures with kittens.\n\nVova likes all these pictures, but some are more beautiful than the others.\n\nFor example, if $k=1$ then Vova has to repost all the pictures in the news feed.\n\nVova likes kitten pictures with one picture reposted by Vova.\n\nVova likes kitten pictures with two pictures reposted by Vova.\n\nVova likes kitten pictures with three pictures reposted by Vova.\n\nVova likes kitten pictures with four pictures reposted by Vova.\n\nVova likes kitten pictures with five pictures reposted by Vova.\n\nVova likes kitten pictures with six pictures reposted by Vova.\n\nVova likes kitten pictures with seven pictures reposted by Vova.\n\nVova likes kitten pictures with eight pictures reposted by Vova.\n\nVova likes kitten pictures with nine pictures reposted by Vova.\n\nVova likes kitten pictures with ten pictures reposted by Vova.\n\nVova likes kitten pictures with twelve pictures reposted by Vova.\n\nVova likes kitten pictures with thirteen pictures reposted by Vova.\n\nVova likes kitten pictures with fourteen pictures reposted by Vova.\n\nVova likes kitten pictures with fifteen pictures reposted by Vova.\n\nVova likes kitten pictures with sixteen pictures reposted by Vova.\n\nVova likes kitten pictures with seventeen pictures reposted by Vova.\n\nVova likes kitten pictures with eighteen pictures reposted by Vova.\n\nVova likes kitten pictures with nineteen pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova.\n\nVova likes kitten pictures with two hundred pictures reposted by Vova."
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1, 'incorrect solution'"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1, 'There is no way to repost some pictures to satisfy all the conditions.'\n\nInput\n4 3 1\n5 100 1 1\n\nOutput\n100\n\nInput\n4 3 1\n100 1 1 1\n\nOutput\n-1\n'''\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 1\"), \"1\"\nassert solution(\"12 6\"), \"6\"\nassert solution(\"4\"), \"4\"\nassert solution(\"5\"), \"5\"\nassert solution(\"12 6\"), \"6\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"21\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"12\"\n\nassert solution(stdin) == \"7\""
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['5', '1', '1', '0', '1', '0']) == '3'\nassert solution(['5', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '1', '0', '1', '1', '0']) == '15'\nassert solution(['6', '1', '1', '0', '1', '0']) == '4'\nassert solution(['6', '1', '0', '0', '1', '0']) == '15'\nassert solution(['5', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '1', '0', '1', '1', '0']) == '21'"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(18)\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4') == '4'\nassert solution('12 6') == '15'\nassert solution('13') == '0'\n\n\n\"\"\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 1\") == \"1\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"12 6\") == \"6\"\nassert solution(\"4 1\") == \"1\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5 2') == '3'\nassert solution('6 1') == '3'\nassert solution('4 1') == '4'\nassert solution('12 6') == '15'\n\nassert solution('3') == '3'\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('aaa' == 'aaz') == 'No'\nassert solution('aaabaaaa') == 'Yes'"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(S) == T\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"aazel\",\"apple\"]) == \"Yes\"\nassert solution([\"aazel\",\"az\"]) == \"No\"\nassert solution([\"aazel\",\"aazel\",\"z\"]) == \"Yes\"\nassert solution([\"aazel\",\"az\",\"baz\"]) == \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abcd\") == \"No\"\nassert solution(\"aaac\") == \"Yes\"\nassert solution(\"ababcd\") == \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"zzz\") == \"Yes\", \"solution() failed\"\nassert solution(\"zz\") == \"No\", \"solution() failed\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"abcde\") == \"Yes\"\nassert solution(\"babad\") == \"Yes\"\nassert solution(\"cdefghi\") == \"No\"\nassert solution(\"deeedbb\") == \"No\"\nassert solution(\"bba\") == \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"azzel\") == \"apple\"\nassert solution(\"apple\") == \"apple\"\nassert solution(\"appleapple\") == \"no\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"aaaabb\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"No\"\n\"\"\"\n\nclass Solution:\n    def solution(self, S, T):\n        if len(S) == len(T):\n            for i in range(len(S)):\n                if S[i]!= T[i]:\n                    return \"No\"\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 4\") == \"5\"\nassert solution(\"3 5\") == \"15\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"11\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"5\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"12\\n1\\n4\\n4\\n3\\n5\\n5\\n7\\n7\\n7\\n4\\n4\\n7\\n7\\n5\\n4\\n7\\n7\\n6\\n5\\n1\\n1\\n2\\n3\\n5\\n5\\n2\\n6\\n7\\n4\\n5\\n3\\n6\\n7\\n5\\n5\\n3\\n7\\n3\\n5\\n7\\n7\\n4\\n4\\n2\\n2\\n2\\n7\\n4\\n5\\n5\\n5\\n4\\n7\\n5\\n5\\n2\\n7\\n7\\n6\\n4\\n5\\n7\\n3\\n2\\n1\\n7\\n7\\n4\\n1\\n7\\n7\\n3\\n5\\n2\\n1\\n1\\n2\\n4\\n3\\n4\\n2\\n5\\n6\\n4\\n5\\n3\\n7\\n4\\n7\\n2\\n1\\n2\\n3\\n7\\n4\\n4\\n7\\n6\\n4\\n5\\n1\\n7\\n4\\n4\\n3\\n3\\n3\\n4\\n1\\n7\\n4\\n1\\n7\\n5\\n4\\n2\\n6\\n1\\n2\\n6\\n1\\n1\\n4\\n3\\n4\\n1\\n7\\n5\\n5\\n1\\n2\\n5\\n2\\n3\\n1\\n2\\n1\\n6\\n3\\n3\\n5\\n4\\n1\\n2\\n4\\n3\\n3\\n3\\n5\\n5\\n7\\n6\\n7\\n6\\n5\\n4\\n1\\n6\\n3\\n1\\n4\\n1\\n3\\n1\\n6\\n6\\n7\\n5\\n4\\n4\\n4\\n5\\n6\\n5\\n6\\n7\\n1\\n5\\n4\\n5\\n6\\n1\\n7\\n6\\n7\\n2\\n5\\n5\\n6\\n2\\n7\\n4\\n2\\n1\\n3\\n1\\n1\\n5\\n1\\n6\\n4\\n4\\n2\\n3\\n3\\n4\\n4\\n5\\n2\\n6\\n4\\n1\\n6\\n3\\n1\\n1\\n5\\n1\\n3\\n3\\n5\\n7\\n5\\n4\\n6\\n2\\n5\\n5\\n4\\n3\\n1\\n1\\n4\\n1\\n5\\n1\\n5\\n1\\n5\\n3\\n3\\n4\\n1\\n7\\n2\\n1\\n5\\n1\\n7\\n3\\n2\\n2\\n6\\n3\\n5\\n4\\n1\\n6\\n2\\n4\\n1\\n4\\n4\\n3\\n2\\n6\\n5\\n1\\n3\\n3\\n2\\n1\\n2\\n5\\n5\\n3\\n3\\n1\\n1\\n4\\n3\\n3\\n2\\n4\\n3\\n2\\n4\\n5\\n6\\n2\\n5\\n3\\n1\\n5\\n1\\n1\\n4\\n4\\n3\\n5\\n1\\n1\\n4\\n5\\n2\\n5\\n2\\n4\\n1\\n4\\n3\\n3\\n4\\n5\\n4\\n5\\n2\\n2\\n3\\n1\\n1\\n1\\n3\\n2\\n3\\n5\\n5\\n2\\n1\\n5\\n4\\n2\\n5\\n3\\n3\\n5\\n4\\n1\\n3\\n3\\n1\\n4\\n2\\n2\\n2\\n3\\n1\\n3\\n3\\n4\\n5\\n3\\n3\\n1\\n3\\n3\\n1\\n5\\n4\\n4\\n5\\n3\\n4\\n2\\n3\\n3\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n4\\n3\\n4\\n3\\n4\\n4\\n5\\n5\\n5\\n4\\n5\\n3\\n3\\n5\\n3\\n2\\n1\\n5\\n4\\n4\\n4\\n4\\n5\\n5\\n4\\n5\\n4\\n5\\n5\\n3\\n5\\n4\\n4\\n3\\n4\\n3\\n4\\n3\\n3\\n3\\n3\\n4\\n5\\n4\\n4\\n3\\n3\\n3\\n3\\n5\\n4\\n4\\n3\\n3\\n5\\n4\\n1\\n3\\n2\\n5\\n2\\n3\\n4\\n3\\n3\\n3\\n3\\n4\\n4\\n3\\n4\\n4\\n3\\n3\\n3\\n3\\n4\\n3\\n3\\n3\\n3\\n4\\n3\\n4\\n3\\n3\\n3\\n3\\n4\\n4\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n4\\n3\\n4\\n4\\n3\\n3\\n4\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n4\\n4\\n3\\n4\\n3\\n4\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n4\\n4\\n5\\n3\\n4\\n3\\n4\\n4\\n3\\n3\\n3\\n3\\n3\\n4\\n4\\n3\\n3\\n3\\n4\\n3\\n3\\n3\\n4\\n3\\n4\\n4\\n3\\n3\\n4\\n3\\n3\\n3\\n3\\n3\\n4\\n4\\n3\\n3\\n4\\n3\\n3\\n3\\n3\\n3\\n4\\n4\\n3\\n4\\n3\\n3\\n4\\n4\\n3\\n4\\n4\\n3\\n4\\n4\\n4\\n4\\n4\\n3\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == \"10\"\nassert solution(\"2 2 1 3 3\") == \"15\"\nassert solution(\"2 1 2 1 1\") == \"5\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"5\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"3\"\nassert solution(\"3 5 4\") == \"5\"\nassert solution(\"3 5 3\") == \"3\"\nassert solution(\"3 6 5\") == \"0\"\nassert solution(\"3 3 4\") == \"0\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"M\"\nassert solution(\"2\") == \"M\"\nassert solution(\"3\") == \"M\"\nassert solution(\"4\") == \"M\"\nassert solution(\"5\") == \"M\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"2\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"0\""
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\""
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 6') == '7 4'\nassert solution('1 2') == '3'\nassert solution('1 5') == '1'\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 7 800' == '600')\nassert solution('2 400 200' == '600')\nassert solution('2 400 400 200' == '600')\nassert solution('1 100 700' == '600')\nassert solution('1 100 1000' == '600')\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5 200\", \"1 200\", \"1 300\", \"1 200\", \"1 100\"]) == \"100\"\nassert solution([\"5 800\", \"1 200\", \"1 300\", \"1 800\", \"1 200\", \"1 600\"]) == \"200\"\nassert solution([\"4 200\", \"1 100\", \"1 100\", \"1 600\"]) == \"500\""
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"1\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '4'\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"9\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10 ** 5)\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n5 5 4 5 5 5 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n8\n4 8 8 7 8 4 4 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n9\n2 3 4 2 2 3 2 2 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2\n\"\"\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '2'"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\""
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n\n1 \u2264 a_i \u2264 10^4\n\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 4"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"3 5 4 5 5 6\"\n    ) == \"2\"\n    assert solution(\n    \"2 3 4 2 2 3 2 2 4\"\n    ) == \"3\"\n    assert solution(\n    \"1 3 5 2 2 3 2 2 4\"\n    ) == \"2\"\n    assert solution(\n    \"3 1 5 1 5 1 5 4\"\n    ) == \"3\"\n    assert solution(\n    \"3 4 1 2 2 2 2 2 4\"\n    ) == \"2\"\n    "
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == -1\n\n\n--------------------------------------------------------------------------------------------------------------------------\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1, \"There is no way to repost some pictures to satisfy all the conditions\""
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(list(map(int, input().split()))) == -1\nassert solution(input().split()) == -1\nassert solution(input().split()) == -1"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 18\nassert solution(stdin) == -1\n\"\"\""
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2 3 1\") == 18\nassert solution(\"1 5 2 10\") == 30\nassert solution(\"1 1 1 1\") == -1\nassert solution(\"1 1 1 1 1 1\") == 100\nassert solution(\"1 100 1 1\") == 100\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution == 18\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == \"Yes\"\nassert solution(2) == \"No\"\n\nInput\nThe first line contains a single integer, N, which denotes the number of test cases or operations.\nThe next N lines contains N integers each separated by a single space.\n\nOutput\nFor each test case, print Yes if the solution to the problem is correct. Otherwise, print No.\n\nConstraints\n1 <= N <= 10^6\n1 <= amount of cakes and doughnuts <= 10^6\n1 <= amount of doughnuts <= 10^6\n1 <= amount of cakes <= amount of doughnuts\n\nExample:\nInput:\n4\n2 2 3\n4 2 3 4\n5\n2 4\n5\n\nOutput:\nYes\nNo\nNo\nNo\nNo\nNo\nNo\nNo\n\n-----Constraints-----\n - 1 <= N <= 10^6\n - N <= amount of cakes <= 10^6\n - N <= amount of doughnuts <= 10^6\n - 1 <= amount of cakes <= amount of doughnuts <= 10^6\n - 1 <= amount of cakes <= amount of doughnuts <= amount of cakes\n\n-----Input-----\nSample Input\n5\n2 2 3 4 5\n4 2 3 4 5\n6 2 3 4 5\n7 2 3 4 5\n8 2 3 4 5\n9 2 3 4 5\n10 2 3 4 5\n\nSample Output\nYes\nNo\nNo\nNo\nNo\nNo\n\n-----Constraints-----\n - 1 <= N <= 10^6\n - N <= amount of cakes <= 10^6\n - N <= amount of doughnuts <= 10^6\n - 1 <= amount of cakes <= amount of doughnuts <= amount of cakes\n\nConstraints\n1 <= amount of cakes <= 10^6\n1 <= amount of doughnuts <= 10^6\n1 <= amount of cakes <= amount of doughnuts\n\n\"\"\"\n\n\"\"\"\nThis version:\n\nfor _ in range(int(stdin.readline().strip())):\n    if _ == 0:\n        print(str(True))\n    elif _ == 1:\n        print(str(False))\n    else:\n        print(str(True))\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"4 3\"\n) == \"Yes\"\n\nassert solution(\n    \"5\"\n) == \"No\"\n\nassert solution(\n    \"3 6\"\n) == \"No\"\n\nassert solution(\n    \"2\"\n) == \"Yes\"\n\nassert solution(\n    \"1\"\n) == \"No\"\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 'Yes'"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 5\") == \"No\"\nassert solution(\"10 1\") == \"No\"\nassert solution(\"4 2\") == \"No\"\nassert solution(\"4 2\") == \"No\"\nassert solution(\"5 4\") == \"Yes\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\""
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"5\") == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 'Yes', \"Case #1 failed\"\nassert solution(2) == 'No', \"Case #2 failed\"\nassert solution(3) == 'Yes', \"Case #3 failed\"\nassert solution(4) == 'No', \"Case #4 failed\"\nassert solution(5) == 'Yes', \"Case #5 failed\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1') == 'Yes'\nassert solution('2') == 'No'\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == \"Yes\"\nassert solution(9) == \"No\"\nassert solution(10) == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(123) == \"Yes\"\n\n\nassert solution(10000) == \"No\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 2 6\"\nassert solution(stdin) == \"2 2 6\"\nassert solution(stdin) == \"2 2 6\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2 2 6\"\n\n-----Sample Input-----\n5\n2 3 5\n2 1 5\n1 2 5\n3 2 5\n\n-----Sample Output-----\n2 2 6\n\"\"\"\nfrom collections import defaultdict\nfrom math import sqrt"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 3 5\") == \"2 2 6\"\nassert solution(\"4 5 2\") == \"2 3 5\"\nassert solution(\"5 2 5\") == \"2 3 5\"\nassert solution(\"5 5 5\") == \"2 3 5\""
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"4\", \"2\", \"3\", \"5\", \"2\", \"1\", \"5\", \"2\", \"5\", \"4\"]) == \"2 2 6\"\nassert solution([\"5\", \"2\", \"1\", \"2\", \"1\", \"2\", \"2\", \"5\", \"1\", \"2\"]) == \"3 2 3\"\nassert solution([\"2\", \"3\", \"3\", \"4\", \"3\", \"2\"]) == \"3 4 4\"\nassert solution([\"2\", \"3\", \"3\", \"1\", \"2\", \"1\"]) == \"2 2 3\"\nassert solution([\"5\", \"5\", \"1\", \"5\", \"5\", \"5\", \"2\", \"1\", \"1\", \"1\"]) == \"2 6 6\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"4\", \"5\", \"5\", \"5\", \"5\", \"5\"]) == \"2 3 5\"\nassert solution([\"3\", \"3\", \"3\", \"3\", \"3\", \"3\"]) == \"1 2 5\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"1 1 2\"\nassert solution([\"6\", \"6\", \"6\", \"6\", \"6\", \"6\"]) == \"3 3 4\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution == \"2 2 6\"\n\n-----Sample Output-----\nIn this case, the center coordinates and the height of the pyramid can be uniquely identified.\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2 2 6\"\n-----Sample Input-----\n3\n1 1 1\n2 2 2\n2 2 2\n1 1 2\n3 2 2\n3 2 2\n3 2 2\n\n-----Sample Output-----\n1 1 1 2\n\nIn this case, the center coordinates and the height can be identified as (1, 1) and 1.\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2 2 6\"\n\n\n-----Sample Input-----\n3\n4 2 5 3\n1 5 7\n2 6 7\n5 6 2\n3 3 3\n5 5 5\n3 3 3\n5 5 5\n6 2 3\n4 6 6\n\n-----Sample Output-----\n0 2 6\n6 7 3\n3 3 3\n\nIn this case, the pyramid has height max(H - |X - C_X| - |Y - C_Y|, 0)\n\n-----Constraints-----\n - N is an integer between 1 and 100 (inclusive).\n - x_i and y_i are integers between 0 and 100 (inclusive).\n - h_i is an integer between 0 and 10^9 (inclusive).\n - The N coordinates (x_1, y_1), (x_2, y_2), (x_3, y_3),..., (x_N, y_N) are all different.\n - The center coordinates and the height can be uniquely identified.\n\n-----Input-----\nInput is given from Standard Input in the following format:  \nN\nx_1 y_1 h_1\nx_2 y_2 h_2\nx_3 y_3 h_3\n:\nx_N y_N h_N\n\n-----Output-----\nPrint values C_X, C_Y and H representing the center coordinates and the height of the pyramid in one line, with spaces in between.  \n\n-----Sample Input-----\n4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\n5 6 2\n3 3 3\n5 5 5\n3 3 3\n5 5 5\n6 2 3\n4 6 6\n\n-----Sample Output-----\n2 2 6\n6 7 3\n3 3 3\n5 5 5\n3 3 3\n5 5 5\n6 2 3\n4 6 6\n\nIn this case, the center coordinates and the height can be identified as (2, 2) and 6.\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2 2 6\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2 2 6\"\n\nInput: A Python 3.9 implementation of the pyramid's diameter problem\n\nOutput:\nA solution for the problem, given by (x_1, y_1), (x_2, y_2),..., (x_N, y_N)\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"taco\") == 2\nassert solution(\"taco\") == 2\nassert solution(\"tt\") == 3\nassert solution(\"redcoder\") == 1\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\\\"abc\\\") == \"cad\"\nassert solution(\\\"abcd\\\") == \"cd\"\nassert solution(\\\"abca\\\") == \"cba\"\nassert solution(\\\"abcde\\\") == \"cdee\"\nassert solution(\\\"abcdef\\\") == \"cbfe\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abcdefghijklm\") == \"2\"\nassert solution(\"abc\") == \"3\"\nassert solution(\"abab\") == \"4\"\nassert solution(\"ab\") == \"5\"\nassert solution(\"abcd\") == \"6\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\u2018redcoder\u2019) == \u20181\u2019\nassert solution(\u2018redcoder\u2019) == \u20181\u2019\nassert solution(\u2018redcoder\u2019) == \u20181\u2019\nassert solution(\u2018redcoder\u2019) == \u20181\u2019\nassert solution(\u2018redcoder\u2019) == \u20181\u2019\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('redcoder') == 1\n\nassert solution('babbbabbbabaababbbbababbabaababbbabbbabbbabbbaaaaabbaabbbbbbaabaabaaababbbabbbabbaababaaaaaaaababbbababbbabbaabbbbbaabaabbababbbabbabbbbaabababbbabbaabbbbbbaabaabbbabbbbbaabaabbbabbaabbabababbaababbbbbbbaababaabababbababbbabbbaabaabbbbababbbabbaabababbabababbbbbbbabbbabbbbbbaaabbabababbabababbbbbabababababbababbbbbabbababbbbaaaaaababbaabababaabababababaabababababababababababababbabababababaabababbbabbbbbbbaabaabababbababbbbaabaababababbbabbbabbbabbbbbaabaababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(st := input()) == 0, \"Error\"\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"abc\") == 2\nassert solution(\"abcdefg\") == 3\nassert solution(\"abcd\") == 3\nassert solution(\"abba\") == 2\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"redcoder\") == \"1\"\nassert solution(\"pig\") == \"4\"\nassert solution(\"birou\") == \"1\"\nassert solution(\"aakash\") == \"0\"\nassert solution(\"kiin\") == \"1\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 10\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('redcoder') == 1\n\n\nInput:\nA string\n\n\nOutput:\nPrint a line containing the answer,\nwhich contains the minimum number of hugs needed to make the string S palindromic.\n\nExample:\nInput:\nA\n\nOutput:\n1\n\nExplanation:\n\nGiven is a string S.\nSolution() returns 2.\nSolution() returns 2.\nSolution() returns 1.\nSolution() returns 1.\nSolution() returns 1.\nSolution() returns 1."
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"9\") == \"No\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"0\") == \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"No\"\nassert solution(\"9\") == \"Yes\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5') == 'Yes'\nassert solution('10') == 'No'\nassert solution('12') == 'No'\nassert solution('17') == 'Yes'\nassert solution('2') == 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"Yes\"\nassert solution(10) == \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"50\") == \"No\"\n\npass\n'''"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9') == 'Yes'\nassert solution('9 6 8 1 2') == 'No'"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 'Yes'\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(Input) == \"Yes\"\nassert solution(Input) == \"No\"\nassert solution(Input) == \"No\"\nassert solution(Input) == \"Yes\""
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"5\"\n\n'''\n\nimport sys\n\nT = int(sys.stdin.readline())\n\nfor _ in range(T):\n    N = int(sys.stdin.readline())\n    L_i, L_j, L_k = map(int, sys.stdin.readline().split())\n    \n    if (L_i + L_j + L_k) % 3!= 0 or L_i + L_j + L_k!= N:\n        print(0)\n        continue\n    \n    triples = []\n    for i in range(L_i, L_i + L_j):\n        for j in range(L_i, L_i + L_j):\n            for k in range(L_i, L_i + L_j):\n                if i + j + k == N:\n                    triples.append((i, j, k))\n    \n    print(len(triples))\n    \n    "
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'\n\nhttps://www.geeksforgeeks.org/program-to-check-if-the-triplet-satisfies-a-conditions/\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2\""
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"9\"\nassert solution(\"5 6 9\") == \"7\"\nassert solution(\"4 9 7\") == \"6\"\nassert solution(\"1 2 3 4\") == \"6\"\nassert solution(\"3 7 6\") == \"7\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 4 9 7 5') == '10'\nassert solution('1 4 9 7 2') == '2'\nassert solution('2 3 4 5 6') == '6'\nassert solution('5 6 9 5 4') == '0'\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input: str\n    ) == '5'\n\nassert solution(\n    input: str\n    ) == '0'\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\", \"\") == \"1\"\nassert solution(\"\", \"1\") == \"1\"\nassert solution(\"\", \"1 2 3\") == \"2\"\nassert solution(\"\", \"1 2 3 4 5 6 7 8 9\") == \"5\"\nassert solution(\"1 3 4\") == \"4\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"6\"\n\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 3 2 2\") == \"4\"\nassert solution(\"5 5 5\") == \"3\"\nassert solution(\"3 3 3\") == \"3\"\nassert solution(\"3 3 2 2 3 3 3\") == \"3\"\nassert solution(\"3 3 2 2 3 4\") == \"3\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"5\"\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == 10\nassert solution(\"2 3\") == -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    ['2', '5']) == '10'\nassert solution(\n    ['1', '4']) == '-1'"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(6, 7) == 10\nassert solution(1, 10) == -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"10\"\nassert solution(\"3 2\") == -1\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2, 5) == 10\nassert solution(2, 5) == -1"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == 10\nassert solution(\"2 4\") == -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 5') == 10\nassert solution('5 2') == -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == 10\nassert solution(\"2 4\") == -1\n\"\"\"\nimport sys\nimport time"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\n2 5\n2 3\n2 1\n2 4\n2 7\n3 1\n3 9\n3 1\n3 1\n3 1\n3 1\n3 3\n3 1\n3 5\n4 7\n4 6\n4 4\n4 3\n5 2\n5 2\n5 5\n5 3\n5 4\n5 3\n5 1\n5 2\n5 4\n5 1\n4 1\n5 1\n5 2\n5 3\n5 4\n5 5\n6 4\n6 2\n6 3\n7 4\n7 1\n7 3\n7 1\n7 5\n7 6\n8 4\n8 4\n8 6\n8 1\n8 4\n8 7\n8 6\n8 1\n8 2\n9 2\n9 1\n9 3\n9 6\n9 3\n9 2\n9 5\n10 3\n10 4\n10 2\n10 1\n10 1\n10 1\n10 5\n10 4\n10 7\n11 5\n11 4\n11 1\n11 3\n11 1\n11 2\n11 6\n11 5\n11 4\n11 1\n11 3\n12 2\n12 3\n12 1\n12 3\n12 1\n12 5\n12 4\n12 7\n13 5\n13 4\n13 1\n13 1\n13 3\n13 4\n13 1\n13 5\n14 3\n14 2\n14 1\n14 3\n14 2\n14 4\n14 1\n15 1\n15 4\n15 7\n16 4\n16 3\n16 5\n16 2\n16 3\n16 1\n16 3\n16 5\n16 4\n16 1\n16 1\n16 1\n16 1\n15 1\n15 5\n15 4\n15 7\n16 1\n16 2\n16 3\n16 4\n16 7\n16 6\n16 2\n15 2\n16 3\n16 4\n16 7\n16 6\n15 4\n15 3\n15 1\n15 5\n15 4\n15 1\n15 2\n16 1\n16 1\n16 3\n16 4\n16 5\n16 6\n16 7\n16 4\n16 1\n16 3\n16 5\n16 4\n16 4\n16 7\n16 3\n16 6\n16 4\n16 2\n16 5\n16 6\n16 2\n15 5\n15 4\n15 3\n15 1\n15 6\n15 2\n15 4\n15 2\n15 4\n15 2\n15 4\n15 1\n15 1\n15 5\n15 4\n15 2\n15 2\n15 5\n15 4\n15 6\n15 3\n15 1\n15 4\n15 5\n15 3\n15 2\n15 3\n15 3\n15 1\n15 1\n15 4\n15 3\n15 4\n15 2\n15 4\n15 5\n15 1\n15 5\n15 2\n15 2\n15 3\n15 3\n15 2\n15 5\n15 2\n15 1\n15 1\n15 1\n15 3\n15 3\n15 1\n15 4\n15 4\n15 3\n15 2\n15 4\n15 4\n15 2\n15 4\n15 5\n15 4\n15 4\n15 7\n15 2\n15 3\n15 3\n15 3\n15 2\n15 2\n15 1\n15 1\n15 5\n15 1\n15 4\n15 2\n15 4\n15 3\n15 4\n15 2\n15 2\n15 3\n15 1\n15 4\n15 1\n15 4\n15 5\n15 1\n15 3\n15 1\n15 3\n15 2\n15 5\n15 1\n15 5\n15 5\n15 2\n15 1\n15 3\n15 1\n15 5\n15 2\n15 1\n15 3\n15 3\n15 1\n15 5\n15 3\n15 1\n15 2\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 3\n15 3\n15 3\n15 3\n15 1\n15 1\n15 1\n15 3\n15 1\n15 1\n15 1\n15 4\n15 1\n15 1\n15 4\n15 3\n15 3\n15 1\n15 3\n15 2\n15 3\n15 1\n15 3\n15 4\n15 1\n15 3\n15 1\n15 3\n15 3\n15 3\n15 3\n15 1\n15 1\n15 1\n15 3\n15 1\n15 2\n15 1\n15 1\n15 1\n15 3\n15 1\n15 1\n15 3\n15 1\n15 1\n15 1\n15 3\n15 4\n15 1\n15 3\n15 4\n15 1\n15 3\n15 1\n15 3\n15 3\n15 1\n15 1\n15 3\n15 2\n15 3\n15 4\n15 1\n15 3\n15 1\n15 1\n15 2\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 3\n15 1\n15 3\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 3\n15 3\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 3\n15 4\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n15 1\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input().strip().split()) == \"10\"\nassert solution(\n    input().strip().split()) == \"1\"\n\n\"\"\"\n\nA = input()\nB = input()\n\nprint(len(A) * len(B))"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"5\""
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"15\"\nprint('Example 1:')\nprint('Input : ')\nprint(inp)\nprint('Exception :')\nprint(str(5))\nprint('Output :')\nprint('15')\n\nprint('Example 2:')\nprint('Input : ')\nprint(inp)\nprint('Exception :')\nprint(str(5))\nprint('Output :')\nprint('21')"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"5\"\nassert solution(\"2 4\") == \"4\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"2 1 2\") == \"2\"\nassert solution(\"2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\") == \"3\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 169 170 171 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 220 222 223 224 225 226 226 227 227 228 228 229 229 230 231 232 233 234 235 236 237 237 238 239 240 241 242 243 244 245 246 245 247 246 257 248 258 259 260 261 262 263 264 265 266 267 268 269 270 271 271 272 273 274 275 275 277 276 277 278 279 280 281 282 283 284 285 286 287 288 288 289 290 291 291 292 293 294 295 296 297 298 299 300 301 301 302 303 303 304 305 306 307 308 309 310 311 310 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 329 330 330 331 332 333 333 334 333 335 336 337 336 338 339 340 341 341 341 343 345 346 347 348 349 349 350 351 352 351 353 354 355 356 357 358 359 359 360 361 360 361 362 363 363 363 364 365 366 366 367 366 369 370 371 371 372 373 374 374 375 375 376 377 378 379 380 381 383 384 384 385 386 385 387 388 389 398 399 399 401 401 402 401 402 401 400 401 400 400 401 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 400 401 400 400 400 400 400 400 401 400 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 400 401 400 400 400 400 400 401 400 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 401 400 400 400 400 401 400 400 400 401 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 401 400 400 400 400 401 400 400 400 401 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400 401 400 400 400 400"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 5') == 5, \"solution does not work as expected\"\nassert solution('10 12 1 2 14') == 5, \"solution does not work as expected\"\nassert solution('X1 X2 X3 X4 X5') == 5, \"solution does not work as expected\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"The program failed to solve this problem\"\n\n'''\nclass Solution:\n    def solution(self, N, M, X):\n        d = {}\n        for i in range(1, N+1):\n            d[i] = i\n            \n        for j in range(1, M+1):\n            d[j] = j\n            \n        for i in range(1, N+1):\n            for j in range(1, M+1):\n                if d[X] == i:\n                    d[X+j] = d[X]\n                    d[X-j] = d[X]\n                elif d[X] < i:\n                    d[X+j] = d[X]\n                    d[X-j] = d[X]\n                elif d[X] > i:\n                    d[X+j] = d[X]\n                    d[X-j] = d[X]\n                else:\n                    d[X] = d[X]\n                    d[X+j] = d[X]\n                    d[X-j] = d[X]\n        if d[1] == N:\n            return N\n        if d[10] == M:\n            return M\n        if d[-10] == M:\n            return M\n        return min(N, M)\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"5\"\nassert solution(inp) == \"8\"\nassert solution(inp) == \"11\"\nassert solution(inp) == \"13\"\nassert solution(inp) == \"16\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 5\"), \"2 5\"\nassert solution(\"10 12 1 2 14\"), \"10 12 1 2 14\"\nassert solution(\"\"), \" \"\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '5'\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().rstrip().split())\nX = [int(input().rstrip()) for _ in range(N)]"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '2'\nassert solution(input().split()) == '1'"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"1 5\") == \"0\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 1 2') == '1 2'\nassert solution('1 1 0') == '1 1'\nassert solution('1 0 2') == '2'\nassert solution('1 3 1') == '1'\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '111100'\nassert solution(input()) == '110100'\nassert solution(input()) == '111101'\nassert solution(input()) == '110101'\nassert solution(input()) == '111110'\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input=\n    \"4 4 3\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"1 4\\n\"\n    \"4 3\\n\"\n    \"2 4\\n\"\n    \"1 3\\n\"\n) == \"1\\n\""
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 1') == '0 1 0 0'\nassert solution('1 0 1 0 0 0 0 0 1 0 0 0') == '0 1 0 0 0 0 0 0 1 0 0 0'\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(list(map(int, stdin.split()))) == '111100'\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"YES\"\nassert solution(\"100\") == \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\n\nassert solution(\"4 5 3\") == \"YES\"\nassert solution(\"5 3\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5\"), \"NO\"\nassert solution(\"5\"), \"NO\"\nassert solution(\"3\"), \"YES\"\nassert solution(\"3\"), \"YES\"\nassert solution(\"2\"), \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"YES\"\n\n\nExample 1:\n\nInput\n\n2\n1 1 1 1 1\n\nOutput\n\nNO\n\nExample 2:\n\nInput\n\n5\n2 1 1 2 5\n\nOutput\n\nYES\n\nExample 3:\n\nInput\n\n3\n1 2 3\n\nOutput\n\nYES\n\nInput\n\n3\n2 2 3\n\nOutput\n\nYES\n\nInput\n\n1\n3\n\nOutput\n\nYES\n\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\ntime limit: 40 ms\nmemory limit: 12.9 MB\n\n\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Examples-----\nInput\n10\n10 3 5 7\n\nOutput\nYES\n\nInput\n3\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n\nOutput\nNO\n\n\n-----Notes-----\n\nThe wall is represented by a sequence of $n$ integers $a_i$ representing the height of the $i$-th part of the wall. We can maintain the difference of heights, and only keep the changes that are positive or negative (no overflow), because we need only to check all possible combinations of height changes and keep the minimum height, so that the wall can be completed.\n\nWe can keep adding up the heights as we go, in a recursive way.\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 9\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '4999999999996'"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1000000000000 5\") == -1\nassert solution(\"1000000000000 6\") == 0"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4999999999996\nassert solution(stdin) == -1"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\n\n\n-----Constraints-----\n1 <= stdin.length <= 5\n-10^5 <= stdin[i] <= 10^5\n-10^6 <= d[i] <= 10^6\n\ntips:\n-You will be given in the first line only, it should be the number of rounds.\n-For example, if the first line contains only \"1\", the second line contains only \"1\", the third line contains only \"1\", and so on.\n-Therefore, it is always that the line always has exactly 2 digits.\n-If the first line contains only \"0\", the second line contains only \"0\", the third line contains only \"0\", and so on.\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"-100\", \"0\", \"-200\", \"0\", \"-300\", \"125\", \"77\", \"-4\"]) == \"4\"\nassert solution([\"-100\", \"0\", \"-200\", \"0\", \"-300\", \"125\", \"77\", \"-4\"]) == \"9\"\nassert solution([\"-100\", \"0\", \"-200\", \"0\", \"-300\", \"125\", \"77\", \"-4\"]) == \"13\"\nassert solution([\"-100\", \"0\", \"-200\", \"0\", \"-300\", \"125\", \"77\", \"-4\"]) == \"14\"\nassert solution([\"-100\", \"0\", \"-200\", \"0\", \"-300\", \"125\", \"77\", \"-4\"]) == \"15\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 5 1\") == \"2\"\nassert solution(\"2 1 4\") == \"1\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"2 7 -1\") == \"3\"\nassert solution(\"7 4\") == \"7\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1000 6\", \"-100 -200 -300 125 77 -4\"]) == \"9\"\nassert solution([\"1000 6\", \"-100 -200 -300 125 77 -4\"]) == \"4999999999996\"\nassert solution([\"1000 6\", \"-100 -200 -300 125 77 -4\"]) == \"3\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1000 6\") == 9\nassert solution(\"1000000000000 5\") == -1\nassert solution(\"10 4\") == 4999999999996\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"AB\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n1 \u2264 s[i] \u2264 n\n\n------------------\n\nTime Limit: 1 sec\n\nSpace Limit: 1KB\n\n-------------------------------------------------------------------------------------------------------------\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"ZZZZZZ\"\n\nassert solution(input()) == \"ZZZZZZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'ZZ'\nassert solution(input()) == 'ZZ'\n\nassert solution(input()) == 'AA'\nassert solution(input()) == 'A'\n\nassert solution(input()) == 'Z'\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"BB\"\nassert solution(stdin) == \"ZZ\"\nassert solution(stdin) == \"AAAA\"\nassert solution(stdin) == \"ZZZZ\"\n\n\nInput\n7\nABACABA\n\nOutput\nAB\n\nInput\n5\nZZZAA\n\nOutput\nZZ\n\ninput:\n4\nAB\n\noutput:\nBB\n\ninput:\n2\nBA\n\noutput:\nBA\n\ninput:\n1\nA\n\noutput:\nA\n\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"AAAAABBBACA\"\n) == \"AAAAABBBACAA\"\n\nassert solution(\n    \"AAAAABBBACA\"\n) == \"AAABBBACA\"\n\nassert solution(\n    \"AAAAABBBACA\"\n) == \"AAABBBACA\"\n\nassert solution(\n    \"AAAAABBBACA\"\n) == \"AAABBBACAA\"\n\nassert solution(\n    \"AAA\"\n) == \"AAA\""
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ZZ\") == \"ZZZ\"\nassert solution(\"AAA\") == \"AA\"\nassert solution(\"AABBBAAB\") == \"AABB\"\nassert solution(\"AABBAABBAABBAABBBAA\") == \"AABBBBBB\"\nassert solution(\"AABAABBAA\") == \"A\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"BB\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"AZAA\"\nassert solution(input()) == \"AAZ\"\nassert solution(input()) == \"AZ\"\nassert solution(input()) == \"A\"\nassert solution(input()) == \"A\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == [\"BB\",\"AA\",\"AA\",\"AA\",\"AA\"]\nassert solution(stdin) == [\"BB\",\"AA\",\"AA\",\"AA\",\"AA\"]\nassert solution(stdin) == [\"BB\",\"AA\",\"AA\"]\nassert solution(stdin) == [\"BB\"]\nassert solution(stdin) == [\"BB\"]\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(test_input), \"No solution\"\nassert solution(input), \"No solution\"\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str()\nassert solution(stdin) == str()\nassert solution(stdin) == str()\nassert solution(stdin) == str()\nassert solution(stdin) == str()\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"codeforces\") == \"codeforces\", \"error\"\n\nassert solution(\n    \"test\") == \"test\", \"error\"\n\nassert solution(\n    \"test\") == \"test\", \"error\"\n\n\n-----Other Solutions-----\n\nIn this problem, you are given two strings $s$ and $t$. In a single move, you can choose any of two strings and delete the first (that is, the leftmost) character. After a move, the length of the string decreases by $1$. You can't choose a string if it is empty.\n\nFor example:  by applying a move to the string \"where\", the result is the string \"here\",  by applying a move to the string \"a\", the result is an empty string \"\". \n\nYou are required to make two given strings equal using the fewest number of moves. It is possible that, in the end, both strings will be equal to the empty string, and so, are equal to each other. In this case, the answer is obviously the sum of the lengths of the initial strings.\n\nWrite a program that finds the minimum number of moves required. It is possible that, in the end, both strings will be equal to the empty string, and so, are equal to each other. In this case, the answer is obviously the sum of the lengths of the given strings.\n\n\n-----Input-----\n\nThe first line of the input contains $s$. In the second line of the input contains $t$. Both strings consist only of lowercase Latin letters. The number of letters in each string is between 1 and $2\\cdot10^5$, inclusive.\n\n\n-----Output-----\n\nOutput the fewest number of moves required. It is possible that, in the end, both strings will be equal to the empty string, and so, are equal to each other. In this case, the answer is obviously the sum of the lengths of the given strings.\n\n\n-----Examples-----\nInput\ntest\ncodeforces\n\nOutput\n2\n\nInput\ncodeforces\nyes\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example, you should apply the move once to the first string and apply the move once to the second string. As a result, both strings will be equal to \"est\".\n\nIn the second example, the move should be applied to the string \"codeforces\" $8$ times. As a result, the string becomes \"codeforces\" $\\to$ \"es\". The move should be applied to the string \"yes\" once. The result is the same string \"yes\" $\\to$ \"es\".\n\nIn the third example, you can make the strings equal only by completely deleting them. That is, in the end, both strings will be empty.\n\nIn the fourth example, the first character of the second string should be deleted.\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"est\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('st') == 'es'\nassert solution('st') == 'es'\nassert solution('st') =='st'\nassert solution('st') =='st'\nassert solution('st') == 'es'\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"es\"\nassert solution(stdin) == \"e\"\nassert solution(stdin) == \"t\"\nassert solution(stdin) == \"t\"\nassert solution(stdin) == \"est\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"test\") == \"2\"\nassert solution(\"codeforces\") == \"7\"\nassert solution(\"yes\") == \"1\"\nassert solution(\"test\") == \"1\"\nassert solution(\"codeforces\") == \"1\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"test\"\n) == \"3\"\nassert solution(\n    \"b\"\n) == \"ab\"\nassert solution(\n    \"ab\"\n) == \"a\"\nassert solution(\n    \"codeforces\"\n) == \"3\"\nassert solution(\n    \"test\"\n) == \"7\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"test\"\n    \"codeforces\"\n    \"yes\") == \"\\t8\\n\"\n    \"\\t4\\n\"\n    \"\\t1\\n\"\n    \"\\t3\\n\"\n    \"\\t\"\n)\n\nassert solution(\n    \"test\"\n    \"codeforces\"\n    \"yes\"\n    \"no\") == \"\\to\"\n    \"\\t0\\n\"\n    \"\\t0\\n\"\n    \"\\t0\\n\"\n    \"\\t\"\n)\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '7'\nassert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == solution(\"test\")\nassert solution(stdin) == solution(\"codeforces\")\nassert solution(stdin) == solution(\"yes\")\nassert solution(stdin) == solution(\"b\")\nassert solution(stdin) == solution(\"ab\")\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == expectedOutput\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"1 7 11\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"1 7\") == \"1\"\nassert solution(\"1 9\") == \"1\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"No solution.\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3 3\",\"1 7 11\",\"1 5\",\"4 2\",\"5 1\",\"4 5\",\"4 7\",\"4 2\",\"4 4\"]) == \"2\"\nassert solution([\"2 3\",\"1 5\",\"4 2\",\"1 5\",\"1 6\",\"3 7\",\"2 4\",\"2 5\",\"1 1\",\"4 3\",\"1 4\",\"4 3\",\"3 5\",\"2 4\"]) == \"3\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"2\"\nassert solution([\"1\", \"3\", \"2\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"2\"\nassert solution([\"1\", \"3\", \"4\", \"5\", \"7\", \"8\", \"9\", \"10\", \"11\"]) == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"2\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"7 11\") == \"1\"\nassert solution(\"3 11\") == \"1\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 3\"\n) == 2\n\nassert solution(\n    \"1 7 11\"\n) == 2\n\nassert solution(\n    \"1 7 11\"\n) == 2\n\nassert solution(\n    \"1 7 11\"\n) == 2\n\nassert solution(\n    \"1 7 11\"\n) == 2"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3,2) == 2\nassert solution(1,7,11,3) == 2\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"2\"\nprint(solution(input))\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"AKasaka\") == \"Yes\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"Yes\"\nassert solution(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") == \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 'Yes' or solution(input) == 'No', 'Test failed'\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('tist') == 'Yes'\nassert solution('aa') == 'No'\nassert solution('ab') == 'No'\nassert solution('aaaa') == 'Yes'\nassert solution('aaaaa') == 'Yes'\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(S) == \"Yes\"\nassert solution(S) == \"No\"\n\n\nInput Format\nThe first line contains an integer T, which denotes the number of test cases. Then T lines follow. Each line contains a single string S.\n\nConstraints\n0<=T<=50\n\nOutput Format\nOutput the answer for each test case.\n\nSample Input\n5\nAkkasaka\nAKkasaka\nAKkasak\nAKkasak\nAKkasak\nAKkasak\nAKkasak\nAKkasak\nAKkasak\nAKkasak\nAKkasak\nAKkasak\n\nSample Output\n\nYes\nYes\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'Yes','stdin:' + str(stdin) + '==\"Yes\"'"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"Yes\"\n\nprint(\"The solution is:\", solution(input) )"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(S) == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 'Yes' or 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(a) == 'Yes', 'The function should return Yes.'\nassert solution(b) == 'Yes', 'The function should return Yes.'\nassert solution(c) == 'Yes', 'The function should return Yes.'\nassert solution(d) == 'No', 'The function should return No.'\n\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nassert solution(\"198 1.01\") == \"217.01\"\nassert solution(\"199 1.01\") == \"217.01\"\nassert solution(\"199 1.02\") == \"217.02\"\nassert solution(\"199 1.01\") == \"217.02\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1.10\") == \"217\"\n\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(0) == 0\nassert solution(1.0) == 1\nassert solution(2.0) == 2\nassert solution(3.0) == 3\nassert solution(4.0) == 4\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '217'\n\n-----Sample Input-----\n\nSample Input:\n7\n\n-----Output-----\n10\n\nSample Input:\n5.23\n\n-----Output-----\n5.23\n\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 217, \"solution() failed; returned '{}', expected '{}'\".format(solution(stdin), 217)\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1234\") == \"217\"\nassert solution(\"43.5\") == \"217\"\nassert solution(\"12.123456789123\") == \"217\"\nassert solution(\"123.123456789123\") == \"217\"\nassert solution(\"123\") == \"217\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(''), 'The input is not valid.'\nassert solution('198'), 'The input is not valid.'\nassert solution('198.1'), 'The input is not valid.'\nassert solution('198.1.10'), 'The input is not valid.'\nassert solution('198.1.10.2'), 'The input is not valid.'\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"217\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 217\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(str.splitlines()) == 217\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n\n\n-----Time complexity-----\nThe question is to solve it in $O(n^2)$ time.\n\nFor the example, the following input is input to the program\n\n3\n7\n1\n3\n2000000000\n763243547\n\nWe can write a function that can return the number of ways to distribute $n$ candies between two sisters in a way described above.\n\nWe use the following variables:\n\n$a=6$, $b=1$; $a=5$, $b=2$; $a=4$, $b=3$.\n\nThe recursive implementation of this function is as follows:"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 23\n\n-----Sample Input-----\n\n1\n1\n2\n1\n1\n1\n\nOutput\n1\n0\n0\n1\n\n-----Sample Output-----\n\n0\n1\n\n-----Constraints-----\n\n1\n\n1\n\n2\n1\n\n2\n1\n3\n1\n\n2\n1\n1\n2\n\n-----Idea-----\n\n1\n1\n2\n3\n1\n2\n1\n\n2\n1\n2\n1\n3\n2\n\n2\n\n'''\n\nimport math\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\\\"\\\"\\\"\\\")\nassert solution(\\\"\\\"\\\"\\\")\nassert solution(\\\"\\\"\\\"\\\")\nassert solution(\\\"\\\"\\\"\\\")\nassert solution(\\\"\\\"\\\"\\\")\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n\"\"\"\nimport sys\nimport collections\n\ninput = sys.stdin.readline\n\nn = int(input().strip())\n\na = list(map(int, input().split()))\n\nd = collections.Counter(a)\n\ntotal = 0\nfor key in d:\n    if d[key] == n:\n        total += key"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 3 1\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"3\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\n\n-----Constraints-----\n1 <= n, m, s <= 500, 1 <= u <= n, v <= m, 1 <= u_i, v_i <= n, 1 <= w_i <= n\n1 <= w <= n\n0 <= s <= s_i\n0 <= u <= u_i\n0 <= v <= v_i\n\n------Time complexity: O(n) ------\nTime: O(n)\nSpace: O(n)\n\n------Space complexity: O(n) ------\nTime: O(n)\nSpace: O(n)\n\n-----Algorithm complexity: O(n) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n-----Approach: We define all the four roads to be reachable from the capital. We iterate over all the pairs of cities $u_i$, $v_i$ and find the minimum number of extra roads. \n\n------Time complexity: O(n^3) ------\nTime: O(n^3)\nSpace: O(n^3)\n\n------Space complexity: O(n^3) ------\nTime: O(n^3)\nSpace: O(n^3)\n\n-----Approach: We check whether $u_i$ is reachable from $s_i$ and add any additional roads from $v_i$ to $u_i$ and $v_i$ to $s_i$. \n\n------Time complexity: O(n^3) ------\nTime: O(n^3)\nSpace: O(n^3)\n\n------Space complexity: O(n^3) ------\nTime: O(n^3)\nSpace: O(n^3)\n\n-----Approach: We iterate over all the pairs of cities $u_i$, $v_i$ and find the minimum number of extra roads. \n\n------Time complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n------Space complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n-----Approach: We iterate over all the pairs of cities $u_i$, $v_i$ and find the minimum number of extra roads. \n\n------Time complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n------Space complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n-----Approach: We iterate over all the pairs of cities $u_i$, $v_i$ and find the minimum number of extra roads. \n\n------Time complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n------Space complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n-----Approach: We iterate over all the pairs of cities $u_i$, $v_i$ and find the minimum number of extra roads. \n\n------Time complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n------Space complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n-----Approach: We iterate over all the pairs of cities $u_i$, $v_i$ and find the minimum number of extra roads. \n\n------Time complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n------Space complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n-----Approach: We iterate over all the pairs of cities $u_i$, $v_i$ and find the minimum number of extra roads. \n\n------Time complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n------Space complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n-----Approach: We iterate over all the pairs of cities $u_i$, $v_i$ and find the minimum number of extra roads. \n\n------Time complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n------Space complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n-----Approach: We iterate over all the pairs of cities $u_i$, $v_i$ and find the minimum number of extra roads. \n\n------Time complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n------Space complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n-----Approach: We iterate over all the pairs of cities $u_i$, $v_i$ and find the minimum number of extra roads. \n\n------Time complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n------Space complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n-----Approach: We iterate over all the pairs of cities $u_i$, $v_i$ and find the minimum number of extra roads. \n\n------Time complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n------Space complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n-----Approach: We iterate over all the pairs of cities $u_i$, $v_i$ and find the minimum number of extra roads. \n\n------Time complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n------Space complexity: O(n^2) ------\nTime: O(n^2)\nSpace: O(n^2)\n\n-----Approach: We iterate over all the pairs of cities $u_i$, $v_i$ and find the minimum number of extra roads. \n\n------Time complexity: O(n^2) ------\nTime:"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 1\") == \"3\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nprint(\"Example 1:\")\nprint(\"solution({'n': 1,'m': 1,'s': 1, '1': 1})\"\n)\nassert solution(stdin) == \"3\"\nprint(\"Example 2:\")\nprint(\"solution({'n': 1,'m': 2,'s': 2, '1': 2})\"\n)\nassert solution(stdin) == \"0\"\nprint(\"Example 3:\")\nprint(\"solution({'n': 1,'m': 2,'s': 2, '1': 3})\"\n)\nassert solution(stdin) == \"0\"\nprint(\"Example 4:\")\nprint(\"solution({'n': 1,'m': 2,'s': 3, '1': 1})\"\n)\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5 4 5\", \"1 2\", \"1 3\", \"2 3\", \"3 4\", \"4 1\", \"5 6\", \"6 1\"]) == \"3\"\nassert solution([\"1 1\", \"3 4\", \"4 2\", \"5 7\", \"7 1\"]) == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3 4 5) == 0\n\n\n-----Constraints-----\n\n0 <= n <= 5000, s <= n, 1 <= m <= 5000, 1 <= s <= n\n\n\n-----Time complexity-----\n\nO(n + m + s + n)\n\nO(n + m + s)\n\nO(n + m)\n\n2^32\n\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 4 1 1\") == \"5\"\nassert solution(\"1 1 1 4 1 4\") == \"4\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n\n\"\"\"\n\nclass Solution:\n    def boxers(self, boxers: int, weight: int) -> int:\n        max_weight = 0\n        \n        # \u5b9f\u884c\u3055\u308c\u305f\u6642\u70b9\u3067\u5272\u308a\u5207\u308c\u308b\u4eba\u306e\u9023\u7d9a\u3057\u3066\u3044\u305f\u5834\u5408\n        if max_weight < weight:\n            return max_weight\n        \n        # \u5272\u308a\u5207\u308c\u306a\u304b\u3063\u305f\u5834\u5408\n        if weight == 0:\n            return 0\n        \n        # \u5272\u308a\u5207\u308c\u3057\u305f\u5834\u5408\u306e\u6700\u5927\u5024\n        if weight > max_weight:\n            max_weight = weight\n        \n        # \u95a2\u4fc2\u306a\u3044\u5834\u5408\n        if weight < 0:\n            return 0\n        \n        return (weight - max_weight) // boxers\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 3 4 1\") == 5\nassert solution(\"6 1 1 4 4 4\") == 5\nassert solution(\"6 1 1 1 4 4\") == 4\nassert solution(\"6 1 1 1 1 4\") == 1\nassert solution(\"4 1 2 4 1 1 4 1 1 1 2 4\") == 1\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 4 4 4\") == \"5\"\nassert solution(\"2 1 1 1 4 4 4\") == \"3\"\nassert solution(\"1 2 1 1 4 4 4\") == \"3\"\nassert solution(\"2 1 2 1 4 4 4\") == \"4\"\nassert solution(\"1 3 1 1 4 4 4\") == \"4\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 4 4 2 4 1\") == \"4\"\n\nassert solution(\"1 1 1 4 4 4\") == \"4\"\n\nassert solution(\"3 1 2 1 2 2\") == \"2\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\n\nstdin\nInput\n3\n1 2 4 1\nOutput\n3\n\nInput\n6\n1 1 1 4 4 4\nOutput\n3\n\nInput\n6\n1 1 1 4 4 4\nOutput\n5\n\nInput\n6\n1 1 1 4 4 4\nOutput\n5\n\nInput\n6\n1 1 1 4 4 4\nOutput\n5\n\nInput\n6\n1 1 1 4 4 4\nOutput\n3\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n3\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n3\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n3\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n2\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6\n1 1 1 4 4 4\nOutput\n1\n\nInput\n6"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 3 1 4 1\") == \"4\"\nassert solution(\"1 2 4 1\") == \"3\"\nassert solution(\"1 1 1 4 4 4\") == \"5\"\n\n\n-----Explanation-----\n\nstdin represents the input of the program.\n\nThe program will be executed as follows:\n\nstdin contains the values of the following input:\n\n3\n3\n1\n1\n1\n1\n\nThe boxes will not change.\nThe boxers change their weights.\nThe boxer with a weight of $1$ can be increased by two, and the other can be increased by two.\nThe team consisting of boxers with weights of $1, 4, 3, 2, 1$.\n\nThe program will print the maximum possible number of people in a team.\n\n-----Guidelines-----\n\n1. The weight of the boxers cannot be lower than 1, that is, it cannot be higher than 15.\n2. The boxers cannot change their weight.\n3. If a boxer with a weight of $1$ and a weight of $3$ can be increased by two, the team consisting of boxers with weights of $3, 2, 1, 4, 3, 5$, is the result.\n\nInput\n4\n1\n1\n1\n2\n4\n\nOutput\n5\n\n------Solution-----\n\nSample Input\n\n1\n2\n3\n4\n5\n\nSample Output\n\n5\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 2 4 1') == '1'\nassert solution('6 3 1') == '1'\nassert solution('6 4 3') == '4'\nassert solution('3 1 4 1') == '1'\nassert solution('1 1 1 4 4 4') == '5'\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"6 2 1\") == \"5\"\nassert solution(\"3 1 2\") == \"2\"\nassert solution(\"6 4 3 4 4\") == \"0\"\nassert solution(\"6 4 1\") == \"0\"\nassert solution(\"6 2 2\") == \"0\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"000002000001\"\nassert solution(inp) == \"000002000000\"\nassert solution(inp) == \"0000020000000\"\nassert solution(inp) == \"000001000002\"\nassert solution(inp) == \"000001000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 3') == '0000000100000'\nassert solution('1 32') == '000002000001'\nassert solution('2 63') == '000001000001'"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == [\"000001000002\", \"000002000001\", \"000001000001\"]\nassert solution(inp) == [\"000002000001\", \"000001000002\", \"000002000001\"]\nassert solution(inp) == [\"000001000002\", \"000002000001\", \"000001000001\"]\nassert solution(inp) == [\"000002000001\", \"000001000002\", \"000002000001\"]\n\n--Easy Solution--\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2 3\\n1 32\\n1 63\\n1 12\\n\") == \"0000020001\\n000001000001\"\nassert solution(\n    \"2 4\\n1 3\\n1 2\\n1 6\\n1 1\\n\") == \"00010100020\\n00000100020\"\nassert solution(\n    \"2 4\\n1 3\\n1 2\\n1 6\\n1 1\\n\") == \"00010100020\\n00000100020\"\nassert solution(\n    \"2 3\\n2 32\\n1 33\\n1 12\\n\") == \"0000020001\\n0000020001\"\nassert solution(\n    \"2 3\\n2 32\\n1 33\\n1 12\\n\") == \"0000020001\\n0000020001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 5 1 2 3 1 2 0 0 0 0 2 0 0\") == \"000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001000001\""
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"010001000101\"\nassert solution(\"1\") == \"010001000101\"\nassert solution(\"1\") == \"010001000101\"\nassert solution(\"3\") == \"010100010001\"\nassert solution(\"3\") == \"010100010001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '0000020001'\nassert solution(input()) == '000002000001'\nassert solution(input()) == '000002000000'\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 2 10 20 15') == '000000000001'\nassert solution('5 3 4 10') == '000000000101'\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"2 3\\n1 32\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12\\n1 12"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 3') == '000001000002'\nassert solution('1 32') == '000002000001'\nassert solution('1 12') == '000002000000'\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 10 8 40\") == \"2\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"1 1 2\") == \"0\"\nassert solution(\"1 1 3\") == \"0\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n\nOutput:\nMinimum possible final health of last monster: 2\n\nExplanation:\nInitially the health of the last monster is A_1 and the remaining health of each alive monster is A_2.\nThe two remaining alive monsters are A_0, A_1 and A_2.\nThe only remaining alive monster is A_2.\nThe next alive monster is A_2, which is minimum.\n\nclass Solution:\n    def min_health(self, A: List[int]) -> str:\n        from collections import deque\n        q = deque()\n        max_health = 0\n        for i in A:\n            if max_health < i:\n                max_health = i\n            if q:\n                if max_health - q[0] > i:\n                    q.append(i)\n                else:\n                    while q:\n                        if max_health - q[0] > i:\n                            q.popleft()\n                        else:\n                            q.append(i)\n            else:\n                q.append(i)\n        return str(max_health)\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"4\n    10 8 40\"\n) == \"2\"\nassert solution(\n    \"6\"\n) == \"2\"\nassert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"2\"\n) == \"1\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"2 2 2 2\") == \"2\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n'''\nNumber of Monsters\n'''\n) == ''\nassert solution(\n'''\nNumber of Monsters\n'''\n) == '1'\nassert solution(\n'''\nNumber of Monsters\n'''\n) == '5'\nassert solution(\n'''\nNumber of Monsters\n'''\n) == '10'\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"2 1 10 8 40\") == 1\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n\n'''"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\n\\\"\\\"\\\"\n8\n2 10 8 40\n\\\"\\\"\\\"\\\"\n\\\"\\\"\\\"\n\n2 1 2 10\n'''\n\nimport random\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '2'"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"false\""
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"false\"\nassert solution(input()) == \"false\"\nassert solution(input()) == \"false\"\nassert solution(input()) == \"false\"\nassert solution(input()) == \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"false\"\n\n\n------Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^7\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import log\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 'false'\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"______________________\") == \"false\"\nassert solution(\"?(__-_+_/_____):-__<___,___<____,____<_____,_____<______,______<_______.__\") == \"false\"\nassert solution(\"?(__+___+__-___):-___>__.__\") == \"false\"\nassert solution(\"?(__________+___)\") == \"false\"\nassert solution(\"?\") == \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 'false'\nassert solution(input) == '010101'\n\n\n-----Sample Input-----\n\ninput:!?\n\noutput:010101\n\n\n-----Sample Output-----\n\noutput:010101\n\n\n-----Constraints-----\n1 <= stdin.length <= 5 * 10^5\n0 <= stdin[i] <= 9\n\n-----Time Limit-----\n3 seconds\n\n\n-----Sample Execution-----\n$ python3 solution.py $\n'false'\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'false'"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(?) == ['false']\nassert solution(?(/-_-)/____)<____\nassert solution(?(/-_-)/____)<_____\nassert solution(?(/-_-)/____)<______\nassert solution(?(/-_-)/____)<_______\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0250341\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 4 2\") == \"3\"\nassert solution(\"3 4 1000000000000000000\") == \"5\""
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\") == \"3\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\nassert solution('3 4 1000000000000000000') == '0'"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '0'\nassert solution('3 4 1000000000000000000') == '0'\nassert solution('3 4 1000000000000000000') == '1'\nassert solution('3 4 1000000000000000000') == '2'\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n        [\"3 3 11\", \"2 1 5\", \"7 10 0\", \"12 6 4\", \"3 4 2\", \"1 3 3 3\", \"0 3 3 2\", \"3 0 1 1\", \"3 4 1 3\", \"5 3 4 5\", \"6 2 3 2\"]) == \"3\"\nassert solution(\n        [\"3 4 2\", \"1 3 3 3\", \"0 3 3 2\", \"3 0 1 1\", \"3 4 1 3\", \"5 3 4 5\", \"6 2 3 2\"]) == \"5\"\nassert solution(\n        [\"3 4\", \"1 3 3\", \"0 3 3\", \"3 0 1 1\", \"3 4 1 3\", \"5 3 4 5\", \"6 2 3 2\"]) == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 4 2\") == \"0\"\nassert solution(\"3 4 1000000000000000000\") == \"5\"\nassert solution
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 3 1000000000000000000\") == \"3\"\nassert solution(\"4 4 2000000000000000000\") == \"1\"\nassert solution(\"4 4 1000000000000000000\") == \"0\"\nassert solution(\"4 4 2000000000000000000\") == \"1\"\nassert solution(\"4 4 2000000000000000000\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"codeforces\", \"stdin is not correct\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('codeforces') =='secrofedoc'\nassert solution('rocesfedoc') == 'orcesfedoc'\nassert solution('plmaetwoxesisiht') == 'plmaetwoxes'\nassert solution('z') == 'z'\nassert solution('1') == '1'"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"The solution to this problem must be a string.\"\n\nassert solution(stdin), \"The solution to this problem must be a string.\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"thisisexampletwo\""
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'thisisexampletwo', \"Error\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('codeforces') =='secrofedoc'"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'codeforces'\n\n>>> def solution(stdin: str) -> str:\n    pass\n\nassert solution(stdin) =='secrofedoc'\n\n>>> def solution(stdin: str) -> str:\n    pass\n\nassert solution(stdin) == 'orcesfedoc'\n\n>>> def solution(stdin: str) -> str:\n    pass\n\nassert solution(stdin) == 'rocesfedoc'\n\n>>> def solution(stdin: str) -> str:\n    pass\n\nassert solution(stdin) == 'rocesfedoc'\n\n>>> def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'codeforces', \"incorrect solution\"\nassert solution(stdin) =='secrofedoc', \"incorrect solution\"\nassert solution(stdin) == 'orcesfedoc', \"incorrect solution\"\nassert solution(stdin) == 'rocesfedoc', \"incorrect solution\"\nassert solution(stdin) == 'rocesfedoc', \"incorrect solution\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'thisisexampletwo'\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"thisisexampletwo\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"9 6 9 8 6\") == \"13\"\nassert solution(\"9 5 9 3 1\") == \"11\"\nassert solution(\"9 6 9 7 9\") == \"21\"\nassert solution(\"3 7\") == \"22\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('a + b') == 'A + B'\nassert solution('a + b + c') == 'A + B + C'\nassert solution('a + b + c + d') == 'A + B + C + D'\nassert solution('a + b + c + d + e') == 'A + B + C + D + E'\nassert solution('a + b + c + d + e + f') == 'A + B + C + D + E + F'\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\nassert solution(\"0 1\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 7\") == \"7\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"873\"\nassert solution(stdin) == \"19\"\nassert solution(stdin) == \"561\"\nassert solution(stdin) == \"65\"\nassert solution(stdin) == \"43\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"15\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"25\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 201 202 203 204 205 206 207 208 209 210 211 211 212 213 214 215 216 217 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 238 239 240 241 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"12\", \"2\"]) == \"12\"\nassert solution([\"12\", \"2\", \"3\"]) == \"5\"\nassert solution([\"12\", \"2\", \"3\", \"4\"]) == \"9\"\nassert solution([\"1\", \"3\", \"1\"]) == \"1\"\nassert solution([\"1\", \"3\", \"2\"]) == \"4\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"15\") == \"5\"\nassert solution(\"381\") == \"381\"\nassert solution(\"1234\") == \"1234\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"873\"\nassert solution(stdin) == \"1113\"\nassert solution(stdin) == \"3638\"\nassert solution(stdin) == \"1067\"\nassert solution(stdin) == \"19\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"873\"\n\n-----Constraints-----\n1 <= a <= 10^3\n1 <= b <= 10^3\n'''\nclass Solution:\n    def solution(self,stdin:str)->str:\n        a,b=map(int,stdin.split())\n        \n        ans=a+b\n        return str(ans)\n        \n    def __init__(self) -> None:\n        pass\n    "
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"873\"\nassert solution(stdin) == \"19\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"+++++++++>++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++<++++++++++"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"++++>+++>\"\n\nassert solution(input) == \"++++<+++>\"\n\nassert solution(input) == \"+++<+++\"\n\nassert solution(input) == \"+++<+++\"\n\nassert solution(input) == \"+++<+++\""
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('10') == '+>'\nassert solution('11') == '++>'\nassert solution('101') == '+++>'\nassert solution('11100') == '<[<+>-]<'\nassert solution('1111111') == '<[<->-]<'\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(Input) == Output\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 2 * 10^4\n\nstdin.length <= 1 * 10^4\n\nstdin.length <= 100\n\nstdin contains only digits, the operators (+) and (-) and/or the spaces \" \".\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1+3') == '+>'\nassert solution('+2') == '++>'\nassert solution('-8') == '<[<+>-]<'\nassert solution('3-7') == '+++>'\nassert solution('3+5') == '++++>'\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3+3\") == \"++>\"\nassert solution(\"2+3\") == \"+++>\"\nassert solution(\"9-7\") == \"<[<+>-]<\"\nassert solution(\"9+9\") == \"+++++>\"\nassert solution(\"9+0\") == \"++++<\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2+3) == '++>'\nassert solution(9-7) == '+++++++++>'\nassert solution(9-7) == '+++++++>'\nassert solution(9-7) == '<[<+>-]<'\nassert solution(9-7) == '++++++++++++++++++++++++++++++++++++++++++++++++.\\n'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(50000) == '++++++++++++++++++++++++++++++++++++++++++++++++'"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(30000) == '9000'\nassert solution(10) == '9000'\nassert solution('+') == '-++'\nassert solution('-') == '+'\nassert solution('-') == '-++'\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(test) == '+++>+++++++++>-->>+++>><<+<->><<->>+++>><[<->-]<<<-----'\n\ntest_input = '+9+7+3-4-3+4+4+5+5-3+6-3+4-3+5-4-5+6+5+8-6+3+4-3+5-4+6-3+4-3+5-4-6+4-3+8-3+4-3+5+6+5+8+4+6+5+8+4+3-3+5-4-5+6-3+4+4+5+6+5+8-3+4+5-3+6-3+4+5+6+8-3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8-3+4+5+6+8-3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6+8+3+4+5+6"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1') == '1', '1'\nassert solution('2') == '2', '2'\nassert solution('3') == '5', '5'\nassert solution('4') == '2', '2'\nassert solution('4') == '0', '0'\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]) == \"8\"\nassert solution([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]) == \"2\"\nassert solution([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]) == \"0\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]) == \"2\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"5\n    1\n    3\n    20\n    38\n    56\n    ) == [1, 2, 5, 2, 0]\nassert solution(\n    \"1\n    3\n    20\n    38\n    56\n    ) == [1, 3, 2, 5, 2]\nassert solution(\n    \"2132\"\n    ) == [1, 2, 3, 2, 0]\nassert solution(\"506\") == [1, 2, 3, 2, 0]\nassert solution(\"999999999999999999\") == [1, 2, 3, 2, 0]\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 1) == \"2\"\nassert solution(2, 1) == \"2\"\nassert solution(3, 1) == \"5\"\nassert solution(4, 1) == \"2\"\nassert solution(5, 1) == \"8\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2132') == '2'\nassert solution('506') == '5'\nassert solution('999999999999999999') == '2'\nassert solution('1000000000000000000') == '1'\n\n\n-----IMPORTS-----\nimport sys\n\n\n-----FUNCTIONS-----\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), 'The input is not valid.'\nassert solution(stdin) == '8', 'The output is not correct.'\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\n\n\n-----Done-----\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1000000000000000000\"\nassert solution(stdin) == \"1000000000000000000\"\n\n\n-----Constraints-----\n0 < stdin.length < 5000\n0 < k_i < 10^18\n\n------Time complexity-----\nO(N) where $N$ is the number of lines\n\n------Space complexity-----\nO(N)\n\n-----Discussion-----\nFor $i$-th query, we add one line of code. We create a set of all possible combinations of $k_i$ elements and print the result.\n\n-----General information-----\nThe input data is read in from stdin, and does not need to be read in before being processed.\n\nThe input data is in the first line.\n\nThe first line contains a single integer $q$ \u2014 the number of queries.\n\nThe $i$-th of the following $q$ lines contains one integer $k_i$ $(1 \\le k_i \\le 10^{18})$ \u2014 the description of the corresponding query.\n\nConstraints:\n\n1 <= k_i <= 10^18\n\nTime limit: 1 second\n\nExample 1:\n\nInput\n\n5\n4\n3\n6\n5\n\nOutput\n\n2\n1\n3\n3\n3\n\n1\n\nExplanation:\n\nWe add two lines to the set of all possible combinations: \n$k_i$ = 3, and $x_i$ = 1$. \n$x_i$ = 1. Thus, we get 3, 1, 3, and 1.\nWe remove $x_i$ since it is already removed by the set operation.\n\nExample 2:\n\nInput\n\n5\n4\n3\n6\n5\n\nOutput\n\n6\n3\n2\n3\n1\n3\n1\n\nExample 3:\n\nInput\n\n5\n4\n3\n6\n5\n\nOutput\n\n1\n2\n3\n4\n2\n\n------------------\n\nimport sys\n\ninput = sys.stdin.readline"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 4\n\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '4'\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('7') == '0'\nassert solution('13') == '0'\nassert solution('1') == '1'\nassert solution('3') == '0'\nassert solution('500') == '2'\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"4\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 1\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0) == \"\", \"0 is not possible\"\nassert solution(1) == \"\", \"1 is not possible\"\nassert solution(2) == \"\", \"2 is not possible\"\nassert solution(3) == \"\", \"3 is not possible\"\nassert solution(4) == \"\", \"4 is not possible\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"7\"\n\nfor t in range(int(input())):\n    a = int(input())\n    num = 7*a\n    if num <= 575:\n        print(num)\n    else:\n        print(0)\n    "
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 4\nassert solution(4) == 0\nassert solution(0) == 1\nassert solution(1) == 1\nassert solution(12) == 3\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0) == 0, '0'\nassert solution(1) == 0, '1'\nassert solution(2) == 1, '2'\nassert solution(3) == 2, '3'\nassert solution(4) == 4, '4'\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"0\", \"0\"]) == 1\nassert solution([\"0\", \"1\"]) == 1\nassert solution([\"1\", \"0\"]) == 1\nassert solution([\"1\", \"1\"]) == 1\nassert solution([\"1\", \"1\", \"1\"]) == 1\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 1\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\u2018000\u2019) == 1\nassert solution(\u2018000\u2019) == 0\nassert solution(\u2018111\u2019) == 2\nassert solution(\u2018111\u2019) == 2\nassert solution(\u2018010\u2019) == 2\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"000\"\n) == 1\nassert solution(\n    \"001\"\n) == 0\nassert solution(\n    \"010\"\n) == 3\nassert solution(\n    \"011\"\n) == 3\nassert solution(\n    \"100\"\n) == 0\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(s) == 3, \"Invalid Case\"\nassert solution(s) == 3, \"Invalid Case\"\nassert solution(s) == 3, \"Invalid Case\"\nassert solution(s) == 3, \"Invalid Case\"\nassert solution(s) == 3, \"Invalid Case\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"000\") == 1, \"test\"\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == \"1\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"000\") == 1\nassert solution(\"010\") == 2\nassert solution(\"011\") == 2\nassert solution(\"011000000\") == 3\nassert solution(\"101010101\") == 4\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == 2\n\nprint(solution(\"000\"))\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0) == 1\nassert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 1\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"DENIED\"\nassert solution(\"4\") == \"DENIED\"\nassert solution(\"10\") == \"DENIED\"\nassert solution(\"4\") == \"APPROVED\"\nassert solution(\"3\") == \"APPROVED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input()\n) == \"APPROVED\"\n\nassert solution(\n    input()\n) == \"DENIED\"\n\n\n-----Sample Input-----\n1\n\n-----Sample Output-----\nYour immigrant should be allowed entry according to the regulations.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 'DENIED'\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(str) == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 'APPROVED'\nassert solution(2) == 'DENIED'\nassert solution(3) == 'APPROVED'\nassert solution(4) == 'APPROVED'\nassert solution(5) == 'DENIED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 7 9 10 31\") == \"APPROVED\"\nassert solution(\"5 7 9 10 31\") == \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 4 1 4 2 4 1\") == \"DENIED\"\nassert solution(\"1 2 2 4 4 4 4\") == \"DENIED\"\nassert solution(\"4 6 10\") == \"APPROVED\"\nassert solution(\"5 5 6 6 5 5 5 5 5\") == \"APPROVED\"\nassert solution(\"5 7 10 4 7 5 4\") == \"APPROVED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 'APPROVED'\nassert solution(2) == 'DENIED'\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'Yes'\n\"\"\"\nfrom sys import stdin\n\nline_s = stdin.readline().rstrip()"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(Takahashi) == 'Yes'\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\nassert solution(\"SUDLUDR\") == \"No\"\n\nassert solution(\"RUDLU\") == \"Yes\"\n\nassert solution(\"SUDLU\") == \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 'Yes'\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"RUDLUDR\"]) == \"Yes\"\nassert solution([\"RUDFRULU\", \"UDRFRULU\", \"DFRULRU\"]) == \"No\"\nassert solution([\"RUDFRULU\", \"UDRFRULU\", \"DFRULRU\"]) == \"No\"\nassert solution([\"RUDFRULU\", \"UDRFRULU\", \"DFRULRU\"]) == \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"RUDLUDR\"]) == \"Yes\"\nassert solution([\"RUL\"]) == \"No\"\nassert solution([\"RULDD\"]) == \"No\"\nassert solution([\"RULU\"]) == \"No\"\nassert solution([\"RULUD\"]) == \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"RUDLUDR\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'Yes'\n'''"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(RUDLUDR) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '7'"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"./test_input/test_1.txt\"), \"No solution\"\nassert solution(\"./test_input/test_2.txt\"), \"No solution\"\nassert solution(\"./test_input/test_3.txt\"), \"No solution\"\nassert solution(\"./test_input/test_4.txt\"), \"No solution\"\nassert solution(\"./test_input/test_5.txt\"), \"No solution\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"7\"\nassert solution(inp) == \"7\"\nassert solution(inp) == \"7\"\nassert solution(inp) == \"7\"\nassert solution(inp) == \"7\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \n    \n    ) == 7, 'Incorrect solution.'\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"7\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5,3) == 7\nassert solution(5,2) == 7\nassert solution(5,4) == 7\nassert solution(5,3) == 7\nassert solution(5,5) == 7\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\") == 7\nassert solution(\"5\\n3\\n5\") == 6\nassert solution(\"5\\n4\\n5\\n5\\n6\") == 3\nassert solution(\"5\\n5\\n6\") == 2\nassert solution(\"5\\n1\\n5\\n6\") == 1\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(4, 5) == 7"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\\n\") == 7\nassert solution(\"5\\n4\\n3\\n5\\n6\\n\") == 4\nassert solution(\"5\\n5\\n5\\n6\\n\") == 4\nassert solution(\"5\\n5\\n6\\n\") == 5\nassert solution(\"5\\n4\\n2\\n4\\n5\\n5\\n\") == 5\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('2 1') == '1'\nassert solution('2 1 2') == '3'\nassert solution('2 1 2 3') == '6'\nassert solution('2 1 3') == '7'\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\")\") == \"9\"\nassert solution(\"\") == \"\"\nassert solution(\"(\") == \"\"\nassert solution(\"(())\") == \"\"\nassert solution(\"(())()\") == \"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1A\") == \"1\"\nassert solution(\"2A\") == \"2\"\nassert solution(\"3A\") == \"3\"\nassert solution(\"4A\") == \"4\"\nassert solution(\"5A\") == \"5\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(N: int) == str(9)\nassert solution(N: int) == \"0\"\nassert solution(N: int) == \"9\"\nassert solution(N: int) == \"0 9\"\nassert solution(N: int) == \"0 9 9\"\n\"\"\"\nfrom math import factorial"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"2\"\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"9\") == \"0\"\nassert solution(\"0\") == \"2\"\nassert solution(\"1\") == \"3\"\nassert solution(\"8\") == \"0\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('0000001') == '2'\nassert solution('0001') == '1'\nassert solution('00100') == '1'\nassert solution('01101') == '2'\nassert solution('01') == '2'\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '2'\nassert solution(input) == '2'\nassert solution(input) == '3'\nassert solution(input) == '3'\nassert solution(input) == '4'\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\",\"4\",\"2\"]) == \"1\"\nassert solution([\"2\",\"0\",\"3\"]) == \"1\"\nassert solution([\"5\",\"3\",\"6\",\"7\",\"8\",\"9\",\"0\"]) == \"2\"\nassert solution
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(a) == '23'\nassert solution(a, 1) == '23'\nassert solution(a, 3) == '23'\nassert solution(a, 5) == '23'\nassert solution(a, 10) == '23'\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == '1'\nassert solution(3) == '3'\nassert solution(10) == '10'\nassert solution(100) == '100'\nassert solution(1000) == '1000'\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"23\"\nassert solution(input) == \"20\""
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == 23\nassert solution(10) == 23\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 23\nassert solution(input()) == 23\nassert solution(input()) == 23\nassert solution(input()) == 23\nassert solution(input()) == 23\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(23)\n\n-----Quick Method-----\n\nimport math\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5') == '5', \"The answer is not 5.\"\nassert solution('4') == '4', \"The answer is not 4.\"\nassert solution('4') == '4', \"The answer is not 4.\"\nassert solution('1') == '1', \"The answer is not 1.\"\nassert solution('2') == '2', \"The answer is not 2.\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2,2) == 2\nassert solution(0,0) == 1\nassert solution(2,3) == 2\nassert solution(4,6) == 3\nassert solution(4,10) == 1\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"23\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(Solution) == 23\n\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 1 3 2\"), \"a sequence is not /\\/\\/\\/\"\nassert solution(\"3 1 1 1\"), \"a sequence is not /\\/\\/\\/\\/\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 3 5 6 7\") == \"9\"\nassert solution(\"2 3 2\") == \"3\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"10 1 12 -12\") == \"5\"\nassert solution(\"4 1 2 -1\") == \"1\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 4 2\") == \"1\"\nassert solution(\"5 6 3 4 5 6 5 6 3 6\") == \"6\"\nassert solution(\"1 2 1 2 1 2 2\") == \"1\"\nassert solution
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 1 3 2\") == \"1\"\nassert solution(\"3 1 1 2\") == \"1\"\nassert solution(\"3 1 1 2 3 4 5\") == \"1\"\nassert solution(\"3 1 1 3 2\") == \"1\"\nassert solution(\"3 1 1 4 5 6\") == \"1\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n-----Bonus-----\nprint(\"The sequence 5,10,5,10 is correct.\")\nprint(\"This sequence is the correct one.\")\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4) == 1\nassert solution(3) == 1\nassert solution(2) == 1\nassert solution(1) == 0\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 4 5 6 8 9 4 10 5\") == 7\nassert solution(\"5 2 3 1 4 5 4 4 3 3\") == 3\nassert solution(\"5 3 3 2 3 3 3 2 3 2 3 3\") == 3\nassert solution(\"3 5 3 3 3 2 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3\") == 3\nassert solution(\"4 5 5 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 5 3 7\") == \"4 7\"\nassert solution(\"4 3 7\") == \"7\"\nassert solution(\"4 3\") == \"4\"\nassert solution(\"4 4 2\") == \"4 2\"\nassert solution(\"4 3 2\") == \"3 2\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 3 2 1\") == \"1\"\nassert solution(\"2 1 4 3\") == \"2\"\nassert solution(\"1 2 4 3\") == \"2\"\nassert solution(\"1 1 2 3\") == \"2\"\nassert solution(\"1 3 3 2\") == \"3\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\"5 100 90 80\",\"98\",\"40\",\"30\",\"21\",\"80\"]\n) == \"23\"\nassert solution(\n    [\"5 100 90 80\",\"98\",\"40\",\"30\",\"21\",\"80\",\"40\",\"30\",\"21\",\"80\"]\n) == \"23\"\nassert solution(\n    [\"5 100 90 80\",\"98\",\"40\",\"30\",\"21\",\"80\",\"40\",\"30\",\"21\",\"80\",\"40\",\"30\",\"21\",\"80\"]\n) == \"23\"\nassert solution(\n    [\"5 100 90 80\",\"98\",\"40\",\"30\",\"21\",\"80\",\"40\",\"30\",\"21\",\"80\",\"40\",\"30\",\"21\",\"80\",\"40\",\"30\",\"21\",\"80\"]\n) == \"23\"\nassert solution(\n    [\"5 100 90 80\",\"98\",\"40\",\"30\",\"21\",\"80\",\"40\",\"30\",\"21\",\"80\",\"40\",\"30\",\"21\",\"80\",\"40\",\"30\",\"21\",\"80\",\"40\",\"30\",\"21\",\"80\"]\n) == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '23'\n\n-----Discussion-----\n - We are using the code that comes with Python 3.9. It's already been cleaned up. We are using the only magic here that comes with Python 3.9. But Python 3.9 can be reused as many more magic functions on other python versions.\n - We can also use Python 2.7.\n - We are using Python 3.7.\n - We use the same magic functions as Python 3.7.\n - We use the only magic functions on both Python 2 and Python 3.7.\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '23'\n\n------------------\nimport math"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"23\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"23\"\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '23'\n\n'''\nfrom collections import deque"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5 100 90 80\") == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '23'\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '23'\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"ABCXYZ\"\n    ) == \"CDEZAB\"\nassert solution(\n    \"ABCXYZ\"\n    ) == \"CDEZAB\"\nassert solution(\n    \"ABCXYZ\"\n    ) == \"CDEZAB\"\nassert solution(\n    \"ABCXYZ\"\n    ) == \"CDEZAB\"\nassert solution(\n    \"ABCXYZ\"\n    ) == \"CDEZAB\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"ABCXYYZ\") == \"BCDEFZAB\"\nassert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"ABCYZZY\") == \"BCDEFZAB\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == \"CDEZAB\"\nassert solution(5) == \"BADEZ\"\nassert solution(9) == \"ACEZ\"\n\nprint(\"CODE DONE\")\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"CDEZAB\"\n'''\nimport math\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"A\", \"B\", \"C\", \"D\", \"E\"]) == \"CDEDAZ\"\nassert solution([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]) == \"CDEDAZFGHJKLRMNOPVXYZABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n'''"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"ABCXYZ\"), \"No solution\"\nassert solution(\"ABCXYZ\"), \"No solution\"\nassert solution(\"ABCXYZ\"), \"No solution\"\nassert solution(\"ABCXYZ\"), \"No solution\"\nassert solution(\"ABCXYZ\"), \"No solution\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(s) == \"CDEZAB\", \"should be CDEZAB\"\n\n\n_________________________________________________________________________________________________________________________"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]) == \"CDEZAB\"\nassert solution([\"A\",\"E\",\"I\",\"K\",\"M\",\"N\",\"O\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]) == \"MZYXWY\"\nassert solution([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]) == \"ABCXYZ\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"AB\") == \"CDEZAB\"\nassert solution(\"ABC\") == \"CDEZAB\"\nassert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"ABXYZ\") == \"CDEZAB\"\nassert solution(\"ABZZY\") == \"CDEZAB\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 4 2 3 2 4') == '3 4 2 3 2'\nassert solution('1 2') == '1'\nassert solution('3 4 2 3 2 4') == '4'\nassert solution('1 2') == '1'\nassert solution('1 6') == '6'\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3 4 2\"\nassert solution(stdin) == \"3 4 2\"\nassert solution(stdin) == \"3 2 2\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 2\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"17\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3 4 2 3 2 4\"\n\nstdin: \"1 5 2 3 2 4\"\nInput:\n1\n5\n2\n3\n4\n\nOutput:\n1 3 2 4 5\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"199999\"\nassert solution(stdin) == \"199999\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3 5 2 3 4\") == \"2 3 5 2 3 4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 1 3 5 2 3 4\") == \"1234\"\nassert solution(\"4\") == \"12\"\nassert solution(\"4 5\") == \"12\"\nassert solution(\"3 4 2\") == \"1234\"\nassert solution(\"3 4 3 2 1\") == \"1234\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2750131\"\nassert solution(stdin) == \"199999\"\nassert solution(stdin) == \"2750131\"\nassert solution(stdin) == \"199999\"\nassert solution(stdin) == \"2750131\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"3 4 2 3 2 4\"\nassert solution(input()) == \"3 4 2 3 2 4\"\nassert solution(input()) == \"3 4 2 3 2 4\"\nassert solution(input()) == \"3 4 2 3 2 4\"\nassert solution(input()) == \"3 4 2 3 2 4\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 4 2 3 2 4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"3 4 2 3 2 4\"\nassert solution(stdin) == \"3 4 2 3 2 4\"\nassert solution(stdin) == \"3 4 2 3 2 4\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"11111\"\nassert solution(stdin) == \"22111\"\nassert solution(stdin) == \"1121122\"\nassert solution(stdin) == \"21112\"\n\"\"\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 3' ) == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\nassert solution('7 2') == '11122221'\nassert solution('7 3') == '112122221'\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"11111\"\nassert solution(stdin) == \"22111\"\nassert solution(stdin) == \"111111\"\nassert solution(stdin) == \"222222\"\nassert solution(stdin
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '21112'\nassert solution(stdin) == '22111'\nassert solution(stdin) == '1'\nassert solution(stdin) == '7'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 2') == '1111'\nassert solution('1 3') == '2211'\nassert solution('2 1 3 5 4') == '21112'\nassert solution('2 1') == '2'\nassert solution('5 2') == '22111'\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1121122\"\nassert solution(stdin) == \"21112\"\n\n'''"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"22111\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"7 2\") == \"21112\"\nassert solution(\"7 3\") == \"22113\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"11111\"\nassert solution(stdin) == \"22111\"\nassert solution(stdin) == \"111111\"\nassert solution(stdin) == \"222222\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 2 3 5 4') == '22111'\nassert solution('7 3 1 5 4') == '111111'\nassert solution('1 1 1 1 1') == '11111111'\nassert solution('6 6 5 4 5 6') == '21112'"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '11111'\nassert solution(stdin) == '22111'\nassert solution(stdin) == '21112'\n\n\n-----Constraints-----\n0 <= n, a_i <= 10^4\n\n-----Time Limit=3 min (1h)-----\nYou can modify the input lines of the problem only once per minute.\n\n\n\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\"\"1 2 1 2 3\n1 2 3 2\n3 2 2 2\n7 3 7 7\"\"\") == \"2\"\nassert solution(\"\"\"1 2 1 2 3\n1 2 1 2\n3 2 1 2\n7 3 2 3\n9 6 6 6\n13 7 6 6\n14 7 6 7\n\"\"\") == \"3\"\nassert solution(\"\"\"1 1 1 2\n2 2 2 2\n3 2 3 3\n4 4 4 4\n5 6 5 5\n\"\"\") == \"1\"\nassert solution(\"\"\"1 1 1 2\n2 2 2 2\n3 2 3 3\n4 4 4 4\n5 6 5 5\n\"\"\") == \"3\"\nassert solution(\"\"\"1 3 1 2\n1 1 3 2\n2 1 2 3\n2 1 1 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), 'No solution'\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2, [1, 2, 1, 2, 3]) == 2\nassert solution(4, [1, 2, 1, 2, 3]) == 4"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2 3\") == \"2\"\nassert solution(\"100 1\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"2 2 3 3 4\") == \"4\"\nassert solution(\"2 3 3 3 4\") == \"3\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 8\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n\n>>> \n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n-----Constraints-----\n1 <= n <= 10^4\n0 <= a_i <= 10^9\n\nTime Limit: 1 sec\nMemory Limit: 32 MB\n\n-----Examples-----\nInput\n4\n4 7 1 5 4 9\n\nOutput\n2\n\nInput\n5\n1 2 3 4 5\n\nOutput\n0\n\nInput\n4\n1 2 3 4 5\n\nOutput\n1\n\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 1\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, [4, 7, 1, 4, 9]) == 1\n\n\n\nassert solution(5, [1, 1, 1, 1023, 0]) == 2\n\n\nassert solution(5, [1, 1, 1, 1023, 0, 1]) == 2\n\n\nassert solution(5, [1, 1, 1, 1023, 0, 1, 1]) == 2\n\nassert solution(5, [1, 1, 1, 1023, 0, 1, 1, 1, 1, 1]) == 0"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1',['4', '7', '1', '4', '9']) == '1'"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n\n-----Time Limit Exceeded Error Message=Memory Limit Exceeded\n\nTime Limit: 10 seconds\n\n\n-----Space Limit Exceeded Error Message=Memory Limit Exceeded\n\nTime Limit: 10 seconds\n\nclass Solution:\n    def sum_pairs(self, arr: List[int]) -> int:\n        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return arr[0]\n        dp = [0 for i in range(n)]\n        dp[0] = arr[0]\n        dp[1] = arr[0] + arr[1]\n        for i in range(2, n):\n            dp[i] = arr[i] + dp[i - 1] + dp[i - 2]\n        return dp[-1]\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\nstdin,\n    \"4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"0011\",\"0111\",\"1101\",\"1101\",\"0011\"]) == 2\nassert solution([\"0111\",\"1101\",\"1101\",\"0001\"]) == 0\nassert solution([\"0111\",\"0111\",\"1111\"]) == 4\nassert solution([\"0011\",\"0111\",\"1101\",\"1101\",\"0011\"]) == 3\nassert solution([\"0011\",\"0111\",\"1101\",\"1101\",\"0011\"]) == 1\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(0) == 4, \"Should be 4\"\nassert solution(1) == 1, \"Should be 1\"\nassert solution(2) == 0, \"Should be 0\"\nassert solution(3) == 0, \"Should be 0\"\nassert solution(4) == 0, \"Should be 0\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == max(3, 4)\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0011\"), 4\nassert solution(\"1111\"), 1\nassert solution(\"0111\"), 1"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"011101\",\"111010\",\"110001\",\"110001\"]) == \"4\""
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0000\") == \"4\"\nassert solution(\"0110\") == \"4\"\nassert solution(\"00001\") == \"4\"\nassert solution(\"001001\") == \"0\"\nassert solution(\"00010001\") == \"0\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(a) == 4\nassert solution(a) == 4\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1101') == 4, \"The solution is incorrect\"\nassert solution('0111') == 1, \"The solution is incorrect\"\nassert solution('0000') == 0, \"The solution is incorrect\"\nassert solution('01110001') == 4, \"The solution is incorrect\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\"011100110\", \"001100110\", \"110010101\", \"100100100\"],\n    3\n) == 4\n\"\"\"\n\n\"\"\"\nSubmission has taken much more time than previous solution and is a bit dynamic. \nSubmitted was for first attempt. \nTests were written using the following example:\n\n1\n0011\n10\n0110\n011\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('4 3') == '2', \"First ID card is not allowed to pass second gate.\"\nassert solution('1 3') == '2', \"Second ID card is not allowed to pass first gate.\"\nassert solution('1 2') == '2', \"Third ID card is not allowed to pass first gate.\"\nassert solution('2 4') == '2', \"Fourth ID card is not allowed to pass first gate.\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5 1\", \"6 2\", \"6 3\", \"6 4\", \"4 2\"]) == \"5\"\nassert solution([\"5 3\", \"1 3\", \"1 4\", \"2 4\"]) == \"4\"\nassert solution([\"1 1\", \"1 2\", \"2 3\", \"3 4\", \"4 2\"]) == \"2\"\nassert solution([\"1 1\", \"1 2\", \"1 3\", \"2 3\", \"2 4\"]) == \"2\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"2\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().rstrip().split(' '))\nL, R = [int(x) for x in input().rstrip().split(' ')]\n\nfor i in range(L, R + 1):\n    if i == L:\n        print('0')\n    elif i == R:\n        print('1')\n    else:\n        print(str(2 * i) +'' + str(2 * (i + 1) - 2))\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"4 2\\n1 3\\n2 4\\n3 4\\n4 5\\n3 6\\n4 7\\n4 8\\n5 9\\n6 10\\n7 11\\n8 12\\n9 13\\n10 14\\n11 15\\n12 16\\n13 17\\n14 18\\n15 19\\n16 20\\n17 21\\n18 22\\n19 23\\n20 24\\n20 25\\n20 26\\n20 27\\n20 28\\n20 29\\n20 30\\n20 31\\n20 32\\n20 33\\n20 34\\n20 35\\n20 36\\n20 37\\n20 38\\n20 39\\n20 40\\n20 41\\n20 42\\n20 43\\n20 44\\n20 45\\n20 46\\n20 47\\n20 48\\n20 49\\n20 50\\n20 51\\n20 52\\n20 53\\n20 54\\n20 55\\n20 56\\n20 57\\n20 58\\n20 59\\n20 60\\n20 61\\n20 62\\n20 63\\n20 64\\n20 65\\n20 66\\n20 67\\n20 68\\n20 69\\n20 70\\n20 71\\n20 72\\n20 73\\n20 74\\n20 75\\n20 76\\n20 77\\n20 78\\n20 79\\n20 80\\n20 81\\n20 82\\n20 83\\n20 84\\n20 85\\n20 86\\n20 87\\n20 88\\n20 89\\n20 90\\n20 91\\n20 92\\n20 93\\n20 94\\n20 95\\n20 96\\n20 97\\n20 98\\n20 99\\n20 100\\n20 101\\n20 102\\n20 103\\n20 104\\n20 105\\n20 106\\n20 107\\n20 108\\n20 109\\n20 110\\n20 111\\n20 112\\n20 113\\n20 114\\n20 115\\n20 116\\n20 117\\n20 118\\n20 119\\n20 120\\n20 121\\n20 122\\n20 123\\n20 124\\n20 125\\n20 126\\n20 127\\n20 128\\n20 129\\n20 130\\n20 131\\n20 132\\n20 133\\n20 134\\n20 135\\n20 136\\n20 137\\n20 138\\n20 139\\n20 140\\n20 141\\n20 142\\n20 143\\n20 144\\n20 145\\n20 146\\n20 147\\n20 148\\n20 149\\n20 150\\n20 151\\n20 152\\n20 153\\n20 154\\n20 155\\n20 156\\n20 157\\n20 158\\n20 159\\n20 160\\n20 161\\n20 162\\n20 163\\n20 164\\n20 165\\n20 166\\n20 167\\n20 168\\n20 169\\n20 170\\n20 171\\n20 172\\n20 173\\n20 174\\n20 175\\n20 176\\n20 177\\n20 178\\n20 179\\n20 180\\n20 181\\n20 182\\n20 183\\n20 184\\n20 185\\n20 186\\n20 187\\n20 188\\n20 189\\n20 190\\n20 191\\n20 192\\n20 193\\n20 194\\n20 195\\n20 196\\n20 197\\n20 198\\n20 199\\n20 200\\n20 201\\n20 202\\n20 203\\n20 204\\n20 205\\n20 206\\n20 207\\n20 208\\n20 209\\n20 210\\n20 211\\n20 212\\n20 213\\n20 214\\n20 215\\n20 216\\n20 217\\n20 218\\n20 219\\n20 220\\n20 221\\n20 222\\n20 223\\n20 224\\n20 225\\n20 226\\n20 227\\n20 228\\n20 229\\n20 230\\n20 231\\n20 232\\n20 233\\n20 234\\n20 235\\n20 236\\n20 237\\n20 238\\n20 239\\n20 240\\n20 241\\n20 242\\n20 243\\n20 244\\n20 245\\n20 246\\n20 247\\n20 248\\n20 249\\n20 250\\n20 251\\n20 252\\n20 253\\n20 254\\n20 255\\n20 256\\n20 257\\n20 258\\n20 259\\n20 260\\n20 261\\n20 262\\n20 263\\n20 264\\n20 265\\n20 266\\n20 267\\n20 268\\n20 269\\n20 270\\n20 271\\n20 272\\n20 273\\n20 274\\n20 275\\n20 276\\n20 277\\n20 278\\n20 279\\n20 280\\n20 281\\n20 282\\n20 283\\n20 284\\n20 285\\n20 286\\n20 287\\n20 288\\n20 289\\n20 290\\n20 291\\n20 292\\n20 293\\n20 294\\n20 295\\n20 296\\n20 297\\n20 298\\n20 299\\n20 300\\n20 301\\n20 302\\n20 303\\n20 304\\n20 305\\n20 306\\n20 307\\n20 308\\n20 309\\n20 310\\n20 311\\n20 312\\n20 313\\n20 314\\n20 315\\n20 316\\n20 317\\n20 318\\n20 319\\n20 320\\n20 321\\n20 322\\n20 323\\n20 324\\n20 325\\n20 326\\n20 327\\n20 328\\n20 329\\n20 330\\n20 331\\n20 332\\n20 333\\n20 334\\n20 335\\n20 336\\n20 337\\n20 338\\n20 339\\n20 340\\n20 341\\n20 342\\n20 343\\n20 344\\n20 345\\n20 346\\n20 347\\n20 348\\n20 349\\n20 350\\n20 351\\n20 352\\n20 353\\n20 354\\n20 355\\n20 356\\n20 357\\n20 358\\n20 359\\n20 360\\n20 361\\n20 362\\n20 363\\n20 364\\n20 365\\n20 366\\n20 367\\n20 368\\n20 369\\n20 370\\n20 371\\n20 372\\n20 373\\n20 374\\n20 375\\n20 376\\n20 377\\n20 378\\n20 379\\n20 380\\n20 381\\n20 382\\n20 383\\n20 384\\n20 385\\n20 386\\n20 387\\n20 388\\n20 389\\n20 390\\n20 391\\n20 392\\n20 393\\n20 394\\n20 395\\n20 396\\n20 397\\n20 398\\n20 399\\n20 400\\n20 401\\n20 402\\n20 403\\n20 404\\n20 405\\n20 406\\n20 407\\n20 408\\n20 409\\n20 410\\n20 411\\n20 412\\n20 413\\n20 414\\n20 415\\n20 416\\n20 417\\n20 418\\n20 419\\n20 420\\n20 421\\n20 422\\n20 423\\n20 424\\n20 425\\n20 426\\"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"3\"\nassert solution(input) == \"2\"\nassert solution(input) == \"4\"\nassert solution(input) == \"3\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"2\"\n\n\"\"\"\n\nN, M = map(int, input().split())\nL_1, R_1 = map(int, input().split())\nL_2, R_2 = map(int, input().split())\n\ngate = []\nfor _ in range(N):\n    gate.append(list(map(int, input().split())))\n\ngate.append([L_1, R_1])\ngate.append([L_2, R_2])\n\nresult = 0\n\nfor i in range(2):\n    gate[i][0] -= 1\n    gate[i][1] -= 1\n\nfor i in range(M):\n    if gate[0][i] > 0:\n        result += 1\n    elif gate[1][i] > 0:\n        result += 1\n    elif gate[0][i] < 0:\n        result += 1\n    elif gate[1][i] < 0:\n        result += 1\n\nprint(result)"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\"1 3\", \"2 4\", \"3 4\"]\n) == \"2\"\nassert solution(\n    [\"1 3\", \"2 4\", \"4 4\"]\n) == \"2\"\nassert solution(\n    [\"1 3\", \"2 4\", \"3 4\"]\n) == \"2\"\nassert solution(\n    [\"1 3\", \"2 4\", \"4 4\"]\n) == \"3\"\nassert solution(\n    [\"1 3\", \"2 4\", \"3 4\"]\n) == \"2\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"2\"\n\n\"\"\"\n\nN, M = map(int, stdin.split())\nL = list(map(int, stdin.split()))\nR = list(map(int, stdin.split()))\n\nL.sort()\nR.sort()"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '2'\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(4) == 2\nassert solution(3) == 2\nassert solution(6) == 3\nassert solution(8) == 4\nassert solution(4) == 2\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 7\n'''\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"25\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '1'\nassert solution(input) == '1'\nassert solution(input) == '2'\nassert solution(input) == '1'\nassert solution(input) == '1'\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['1 2 2 1', '1 2 3', '1 3 2', '1 4', '2 2 3', '2 4', '2 5', '2 6']), \"watering problem\"\n\n------Wrong Answer!------"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1 1 1 1 1\"]) == \"1\"\nassert solution([\"1 1 1 1 1\", \"1 1 1 1 1\", \"1 1 1 1 1\"]) == \"1\"\nassert solution([\"1 1 1 1 1\", \"1 1 1 1 1\", \"1 1 1 1 1\", \"1 1 1 1 1\", \"1 1 1 1 1\"]) == \"1\"\nassert solution([\"1 1 1 1 1\", \"1 1 1 1 1\", \"1 1 1 1 1\", \"1 1 1 1 1\", \"1 1 1 1 1\"]) == \"1\"\nassert solution([\"1 1 1 1 1\", \"1 1 1 1 1\", \"1 1 1 1 1\"]) == \"1\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '3'"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"4 5\") == \"1\"\nassert solution(\"5 2\") == \"1\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 5') == '3'\nassert solution('2 4 -3') == '4'\nassert solution('4 10') == '2'\n\nassert solution('4 10 2 -1') == '2'\nassert solution('1 0') == 0"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\n\nInput\n2 4\n-1 1\n\nOutput\n3\n\nInput\n2 4\n-1 1\n\nOutput\n4\n\nInput\n4 10\n2 4 1 2\n\nOutput\n2\n\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n0 < n, w < 10^9\n\n-----Time Limit: 1 minute -----\n\nSample Input 1:\n\n2 4\n2 -1 1\nSample Output 1:\n\n2\n\n-----Explanation-----\n\nIn this example, when the bus stops are $1$, $2$, $3$ and $4$ the system has a capacity of $10^6$. So the number of possible ways would be $2$, $0$, $1$, $2$ or $0$ with $0\\le w\\le 10^9$.\n\nIn this example, the bus stops are $1$, $2$, $3$ and $4$ the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\n\n-----Sample Input 2:\n\n2 2\n-1 -1\nSample Output 2:\n\n0\n\n\n-----Explanation-----\n\nIn this case, $2\\le n \\le 1\\,000\\,000, \\,$ and $-1\\le y \\le n\\,000\\,000$, so the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\nIn this case, the bus stops are $1$, $2$, $3$ and $4$ the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\n-----Sample Input 3:\n\n4 4\n-1 1 2\nSample Output 3:\n\n2\n\n-----Explanation-----\n\nIn this example, $2\\le n \\le 1,000,000, \\,$ and $-1\\le y \\le n\\,000,000$, so the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\nIn this case, the bus stops are $1$, $2$, $3$ and $4$ the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\n-----Sample Input 4:\n\n1 10\n-1 1\nSample Output 4:\n\n0\n\n-----Explanation-----\n\nIn this case, $1\\le n \\le 10^6$ and $-1\\le y \\le n\\,000$, so the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\nIn this case, the bus stops are $1$, $2$, $3$ and $4$ the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\n-----Sample Input 5:\n\n1 10\n1 3 -1\nSample Output 5:\n\n1\n\n-----Explanation-----\n\nIn this case, $1\\le n \\le 10^6$, $-1\\le y \\le n\\,000$, so the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\nIn this case, the bus stops are $1$, $2$, $3$ and $4$ the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\n-----Sample Input 6:\n\n1 10\n1 3 1 1\nSample Output 6:\n\n1\n\n-----Explanation-----\n\nIn this case, $1\\le n \\le 10^6$, $-1\\le y \\le n\\,000$, so the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\nIn this case, the bus stops are $1$, $2$, $3$ and $4$ the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\n-----Sample Input 7:\n\n2 3\n1 1 1\nSample Output 7:\n\n0\n\n-----Explanation-----\n\nIn this case, $1\\le n \\le 10^6$, $-1\\le y \\le n\\,000$, so the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\nIn this case, the bus stops are $1$, $2$, $3$ and $4$ the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\n-----Sample Input 8:\n\n2 4\n-1 -1 1\nSample Output 8:\n\n0\n\n-----Explanation-----\n\nIn this case, $2\\le n \\le 1,000,000, \\,$ and $-1\\le y \\le n\\,000$, so the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\nIn this case, the bus stops are $1$, $2$, $3$ and $4$ the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\n-----Sample Input 9:\n\n2 4\n1 2 1 2\nSample Output 9:\n\n0\n\n-----Explanation-----\n\nIn this case, $1\\le n \\le 1,000,000, \\,$ and $-1\\le y \\le n\\,000$, so the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\nIn this case, the bus stops are $1$, $2$, $3$ and $4$ the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\n-----Sample Input 10:\n\n1 4\n-1 -1 2\nSample Output 10:\n\n0\n\n-----Explanation-----\n\nIn this case, $1\\le n \\le 1,000,000, \\,$ and $-1\\le y \\le n\\,000$, so the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\nIn this case, the bus stops are $1$, $2$, $3$ and $4$ the system has a capacity of $10^6$. So the number of possible ways would be $0$\n\n-----Sample Input 11:\n\n1 2\n1 1 1\nSample Output 11:\n\n0\n\n-----Explanation-----\n\nIn this case, $1\\le n \\le 1,000,000, \\,$ and $-1\\le y \\le n\\,000$, so the system has a capacity of $10^6$. So the number"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 2 1 2 3 3\") == \"3\"\nassert solution(\"1 3 2 1 4\") == \"3\"\nassert solution(\"2 0 0\") == \"1\"\nassert solution(\"2 1 1\") == \"0\"\nassert solution(\"2 4 1\") == \"0\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"2 4 -3\") == \"3\"\nassert solution(\"4 10\") == \"0\"\nassert solution(\"4 2 4 1 2\") == \"1\"\nassert solution(\"4 2 4 1 1\") == \"0\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"9 3 6 12 4 8\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"1000000000000000000\"\nassert solution(input()) == \"3000000000000000000\"\nassert solution(input()) == \"1000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"123456789\"\n'''\n\n\nimport re\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        \n        return \"\".join(sorted(re.split(\"[^\\d]\", stdin)))\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '33 11 48 15'\n\nassert solution(stdin) == '9 46 29'\n\nassert solution(stdin) == '9'\n\nassert solution(stdin) == '9'\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"126 42 84 28\"\n\nfor _ in range(int(stdin.strip().split(\" \")[0]))\n    new_seq = [int(i) for i in stdin.strip().split(\" \")]\n    print(new_seq)\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"13\"\nassert solution(stdin) == \"125\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1000000000000000000\"\nassert solution(stdin) == \"3000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"9 3 6 12 4 8\"\n\nassert solution(stdin) == \"3000000000000000000 1000000000000000000\"\n\nassert solution(stdin) == \"3000000000000000000 1000000000000000000\"\n\nassert solution(stdin) == \"3000000000000000000 1000000000000000000\"\n\nassert solution(stdin) == \"3000000000000000000 1000000000000000000\""
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '9 3 6 12 4 8'"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n42 28 84 126\n\"\"\") == \"90 42 84 28 \nassert solution(\"\"\"\n42\n\"\"\") == \"84 42 42 \nassert solution(\"\"\"\n42\n\"\"\") == \"100 42 42 \nassert solution(\"\"\"\n3000000000000000000 1000000000000000000 \n\"\"\") == \"100 3000000000000000000 1000000000000000000 \nassert solution(\"\"\"\n3000000000000000000 1000000000000000000 \n\"\"\") == \"100 3000000000000000000 1000000000000000000 \n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('[9, 3, 6, 12, 4, 8]') == '[12, 8, 6, 4, 3, 9]'\nassert solution('[42, 28, 84, 126, 1000000000000000000, 3000000000000000000, 1000000000000000000]') == '[1000000000000000000, 8428282828842828282828282828282828282828]''',\n'''\nTest Cases\n\n1\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '100'\nassert solution(stdin) == '3'\nassert solution(stdin) == '6'\nassert solution(stdin) == '12'\nassert solution(stdin) == '42'\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= x_1, x_2,..., x_n <= 10^9\n\nConstraints\n2 <= n <= 100\n-10^9 <= x_i <= 10^9\n-10^9 <= x_j <= 10^9\n\n----------------------------------------\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"8\"\n\"\"\""
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"6 1 5 7 10 12\"\n) == \"3 7 5\"\nassert solution(\n    \"5 -1 2 5 8 11\"\n) == \"8\"\nassert solution(\n    \"5 -1 2 5 -1\"\n) == \"1\"\nassert solution(\n    \"5 -1 2 5 -1 2\"\n) == \"2\"\nassert solution(\n    \"5 -1 2 5 -1 2 3\"\n) == \"2 3\"\n\nprint(\"Correct\")"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3 5 4 7 10 12\"]) == \"3\"\nassert solution([\"3 5 4 7 10 12\", \"-1 2 5 -1 -1\"]) == \"3\"\nassert solution([\"1 2 3 2 2\"]) == \"3\"\nassert solution([\"1 3 1 3\"]) == \"3\"\nassert solution([\"2 2 2\"]) == \"1\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 2 0 0\") == \"3\"\nassert solution(\"2 2 0\") == \"3\"\nassert solution(\"2 2 0 2 3\") == \"3\"\nassert solution(\"2 2 2 4 5\") == \"3\"\nassert solution(\"4 4 7 3 0\") == \"3\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3 7 5\"\nassert solution(\"5\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"23\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, [5, -1, -2]) == [7, 3, 5]\nassert solution(5, [3, 2, -1, 6, 8, 10, 11]) == [7, 3, 5, 8, 10, 11]\nassert solution(3, [1, 2, -1, 2, 3, 4]) == [7, 3, 5, 8, 10, 11]\nassert solution(5, [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [7, 3, 5, 8, 10, 11]\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 5 4 7 10 12\") == [\"3\", \"5\", \"7\", \"10\", \"12\"]\nassert solution(\"5 -1 2 5 8 11\") == [\"1\", \"5\", \"-1\", \"2\", \"5\", \"8\", \"11\"]"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"2 3 3\"\n), \"Hello\"\nassert solution(\"2 3 3\"), \"One\"\nassert solution(\"1 2 1\"), \"Two\"\nassert solution(\"1 3 1\"), \"Three\"\nassert solution(\"1 3 3\"), \"Three\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"3\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"3\"\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"1 5\") == \"2\"\nassert solution(\"1 6\") == \"2\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n\"\"\\\"\\\"\\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 3 3') == '1'\nassert solution('2 2') == '1'\nassert solution('2 2 1') == '3'\nassert solution('2 3') == '2'\nassert solution('2 2 2') == '2'\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n  \"2 3 3\",\n  \"2\",\n  \"3\",\n  \"3\",\n  \"0\"\n) == \"0 2\"\n\nassert solution(\n  \"2 3 3\",\n  \"2\",\n  \"3\",\n  \"3\",\n  \"0\"\n) == \"0 2\"\n\nassert solution(\n  \"2 3 3\",\n  \"2\",\n  \"3\",\n  \"2\",\n  \"0\"\n) == \"0 2\"\n\nassert solution(\n  \"2 3 3\",\n  \"2\",\n  \"3\",\n  \"1\",\n  \"0\"\n) == \"0 2\"\n\nassert solution(\n  \"2 3 3\",\n  \"2\",\n  \"3\",\n  \"1\",\n  \"0\"\n) == \"0 2\""
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"2 3 3\"\n) == 1\nassert solution(\n    \"2 2\"\n) == 0\nassert solution(\n    \"2 2\"\n) == 1\nassert solution(\n    \"2 2\"\n) == 0\nassert solution(\n    \"2\"\n) == 1\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(test_cases[1]) == '2'\nassert solution(test_cases[2]) == '1'"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 3\nassert solution(2) == 3\nassert solution(3) == 2\nassert solution(4) == 1\nassert solution(5) == 0\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"111\") == \"3\"\nassert solution(\"222\") == \"3\"\nassert solution(\"333\") == \"2\"\nassert solution(\"444\") == \"2\"\nassert solution(\"555\") == \"1\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"103\"]) == \"3\"\nassert solution([\"103\", \"101\"]) == \"3\"\nassert solution([\"103\", \"101\", \"102\"]) == \"2\"\nassert solution([\"103\", \"101\", \"102\", \"103\"]) == \"2\"\nassert solution([\"103\", \"101\", \"102\", \"103\", \"101\", \"102\", \"103\"]) == \"2\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"100\") == \"3\"\nassert solution(\"5\") == \"1\"\nassert solution(\"100000\") == \"0\"\nassert solution(\"1000000\") == \"0\"\nassert solution(\"1000000000\") == \"0\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(123) == 3\nassert solution(80) == 2\nassert solution(1620) == 5\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"3\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"3\"\nassert solution(\"102\") == \"3\"\nassert solution(\"103\") == \"3\"\nassert solution(\"100\") == \"2\"\nassert solution(\"10101\") == \"2\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"100\") == \"3\"\nassert solution(\"101\") == \"4\"\nassert solution(\"102\") == \"5\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"100\") == 3\nassert solution(\"109\") == 1\nassert solution(\"101\") == 1\nassert solution(\"10011\") == 1\nassert solution(\"100101\") == 1\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(9)\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"33\"\nassert solution(\"2\") == \"5\"\nassert solution(\"1000\") == \"9\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4') == 9\nassert solution('7') == 42\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2\"\n) == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"9\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"15\"\nassert solution(\"2\") == \"10\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == '9'\n\"\"\"\nfrom utils import prefix\nfrom math import gcd\nfrom itertools import combinations\n\nK = int(inp)\n\n@prefix(\"\")\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"2\n    \") == \"9\"\nassert solution(\n    \"3\") == \"81\"\nassert solution(\n    \"2\") == \"9\"\nassert solution(\n    \"1\") == \"9\"\nassert solution(\n    \"6\") == \"81\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"1 2 1\") == \"1\"\nassert solution(\"2 2 2\") == \"3\"\nassert solution(\"5 4 5\") == \"5\"\nassert solution(\"2 3 3\") == \"1\"\nassert solution(\"4 4 4\") == \"3\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 4 6\") == 10\nassert solution(\"3 4 6\") == 10\n\nassert solution(\"1 2 3\") == 4\nassert solution(\"1 3\") == 3\n\nassert solution(\"1 3 4 6 9 7 8 10\") == 4\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 10\n-----Problem statement-----\nThe problem statement in the question is to calculate the maximum value of f.\nIn this problem, we will get 10 from the input.\n\nThe input consists of N integers a_1, a_2,..., a_N.\n\nFor a non-negative integer m, let f(m) = (m\\ mod\\ a_1) + (m\\ mod\\ a_2) +... + (m\\ mod\\ a_N).\nHere, X\\ mod\\ Y denotes the remainder of the division of X by Y.\nFind the maximum value of f.\n\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 3000\n - 2 \\leq a_i \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2... a_N\n\n-----Output-----\nPrint the maximum value of f.\n\n-----Sample Input-----\n3\n3 4 6\n\n-----Sample Output-----\n10\n\nf(11) = (11\\ mod\\ 3) + (11\\ mod\\ 4) + (11\\ mod\\ 6) = 10 is the maximum value of f.\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"3 4 6\"\n) == \"10\"\nassert solution(\n    \"1 1 0 0 1 2 0 0 1 2 2 2 0 0 2 2 2 2\"\n) == \"2\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4 6\") == \"10\"\nassert solution(\"3 4 3\") == \"11\"\nassert solution(\"3 4 2\") == \"14\"\nassert solution(\"3 4 1\") == \"15\"\nassert solution(\"5 6 7\") == \"5\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 2\") == \"10\"\nassert solution(\"2 4 6\") == \"15\"\nassert solution(\"3 3 5\") == \"17\"\nassert solution(\"3 3 4\") == \"18\"\nassert solution(\"3 3 3\") == \"25\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 10"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"10\"\nassert solution(input) == \"13\"\nassert solution(input) == \"14\"\nassert solution(input) == \"16\"\nassert solution(input) == \"17\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(f(3) + f(4) + f(5)) == 10\nassert solution(f(6) + f(7) + f(8)) == 9\nassert solution(f(9) + f(10) + f(11)) == 11\nassert solution(f(12) + f(13) + f(14)) == 12\nassert solution(f(15) + f(16) + f(17)) == 15\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 5 6\") == 10\nassert solution(\"1 3 4\") == 11\nassert solution(\"3 3 3\") == 10\nassert solution(\"5 4 4\") == 10\nassert solution(\"3 6 5\") == 10\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 4 6\") == 10, \"answer is not correct\"\n\"\"\"\nn = int(input())\na = list(map(int, input().split()))\na.sort()"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"6 6 6 4 4 4 4\") == \"Yes\"\nassert solution(\"2 2 2 3 2 2 2\") == \"No\"\nassert solution(\"1 2 3\") == \"No\"\nassert solution(\"1 2 4\") == \"No\"\n\n-----Explanation-----\n1. To check whether this simple algorithm is valid or not.\n2. After rolling two dice, two doublets occur.\n3. The result of the roll is D_{i,j} and D_{i,1}.\n4. If doublets occurred at least three times in a row, this can be denoted by True.\n5. To check whether this simple algorithm is valid or not.\n6. The result of the roll is D_{i,j} and D_{i+1,j} and D_{i+2,j} and D_{i+3,j} and D_{i+4,j} and D_{i+5,j}\nand D_{i+6,j}.\n7. Since D_{i,j}=D_{i,1} and D_{i,2}=D_{i+1,2} and D_{i+3,1}=D_{i+1,3} and D_{i+4,2}=D_{i+1,4}\nand D_{i+5,3}=D_{i+1,5} and D_{i+6,1}=D_{i+1,6} and D_{i+7,2}=D_{i+1,7} and D_{i+8,3}=D_{i+2,3}\nand D_{i+9,1}=D_{i+2,4} and D_{i+10,2}=D_{i+2,5} and D_{i+11,1}=D_{i+2,6}\nand D_{i+12,2}=D_{i+2,7} and D_{i+13,3}=D_{i+2,8} and D_{i+14,1}=D_{i+2,9} and D_{i+15,2}=D_{i+2,10}\nand D_{i+16,3}=D_{i+2,11} and D_{i+17,1}=D_{i+2,12} and D_{i+18,2}=D_{i+2,13} and D_{i+19,3}=D_{i+2,14}\nand D_{i+20,1}=D_{i+2,15} and D_{i+21,2}=D_{i+2,16} and D_{i+22,3}=D_{i+2,17}\nand D_{i+23,1}=D_{i+2,18} and D_{i+24,2}=D_{i+2,19} and D_{i+25,3}=D_{i+2,20} and D_{i+26,1}=D_{i+2,21}\nand D_{i+27,2}=D_{i+2,22} and D_{i+28,3}=D_{i+2,23} and D_{i+29,1}=D_{i+2,24} and D_{i+30,2}=D_{i+2,25}\nand D_{i+31,3}=D_{i+2,26} and D_{i+32,1}=D_{i+2,27} and D_{i+33,2}=D_{i+2,28} and D_{i+34,3}=D_{i+2,29}\nand D_{i+35,1}=D_{i+2,30} and D_{i+36,2}=D_{i+2,31} and D_{i+37,3}=D_{i+2,32} and D_{i+38,1}=D_{i+2,33}\nand D_{i+39,2}=D_{i+2,34} and D_{i+40,3}=D_{i+2,35} and D_{i+41,1}=D_{i+2,36} and D_{i+42,2}=D_{i+2,37}\nand D_{i+43,3}=D_{i+2,38} and D_{i+44,1}=D_{i+2,39} and D_{i+45,2}=D_{i+2,40} and D_{i+46,3}=D_{i+2,41}\nand D_{i+47,1}=D_{i+2,42} and D_{i+48,2}=D_{i+2,43} and D_{i+49,3}=D_{i+2,44} and D_{i+50,1}=D_{i+2,45}\nand D_{i+51,2}=D_{i+2,46} and D_{i+52,3}=D_{i+2,47} and D_{i+53,1}=D_{i+2,48} and D_{i+54,2}=D_{i+2,49}\nand D_{i+55,3}=D_{i+2,50} and D_{i+56,1}=D_{i+2,51} and D_{i+57,2}=D_{i+2,52} and D_{i+58,3}=D_{i+2,53}\nand D_{i+59,1}=D_{i+2,54} and D_{i+60,2}=D_{i+2,55} and D_{i+61,3}=D_{i+2,56} and D_{i+62,1}=D_{i+2,57}\nand D_{i+63,2}=D_{i+2,58} and D_{i+64,3}=D_{i+2,59} and D_{i+65,1}=D_{i+2,60} and D_{i+66,2}=D_{i+2,61}\nand D_{i+67,3}=D_{i+2,62} and D_{i+68,1}=D_{i+2,63} and D_{i+69,2}=D_{i+2,64} and D_{i+70,3}=D_{i+2,65}\nand D_{i+71,1}=D_{i+2,66} and D_{i+72,2}=D_{i+2,67} and D_{i+73,3}=D_{i+2,68} and D_{i+74,1}=D_{i+2,69}\nand D_{i+75,2}=D_{i+2,70} and D_{i+76,3}=D_{i+2,71} and D_{i+77,1}=D_{i+2,72} and D_{i+78,2}=D_{i+2,73}\nand D_{i+79,3}=D_{i+2,74} and D_{i+80,1}=D_{i+2,75} and D_{i+81,2}=D_{i+2,76} and D_{i+82,3}=D_{i+2,77}\nand D_{i+83,1}=D_{i+2,78} and D_{i+84,2}"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"Yes\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = [0]*n\n\nfor i in range(n):\n    if a[i]==1:\n        d[i] = 1\n    elif a[i]==2:\n        d[i] = 2\n    else:\n        d[i] = 0\n\nfor i in range(n-2):\n    if d[i+1]==d[i+2] and d[i+1]!=0:\n        d[i+1] = 1\n    elif d[i+1]==d[i+2] and d[i+1]!=0:\n        d[i+1] = 2\n    else:\n        d[i+1] = 0\n\nfor i in range(3):\n    if d[i+1]!=0:\n        print(\"Yes\")\n        exit()\n\nprint(\"No\")\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"6 6\") == \"No\"\n\n---Accepted ---\n14"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5\",\"6\",\"6\",\"6\",\"6\",\"6\"]) == \"Yes\"\nassert solution([\"5\",\"6\",\"6\",\"6\",\"6\",\"6\",\"6\",\"6\",\"6\",\"6\"]) == \"No\"\n'''"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    input:\n    \"5\"\n    \"5 4\"\n    \"6 6\"\n    \"6 6\"\n    \"3 3\"\n    \"3 3\"\n    ) == \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(string) == Yes\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 1') == 'Yes'\nassert solution('5 3') == 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"6 6\") == \"No\"\nassert solution(\"4 4\") == \"Yes\"\nassert solution(\"3 3\") == \"No\"\nassert solution(\"3 2\") == \"No\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(r = 2) == 4\nassert solution(r = 1) == 2\nassert solution(r = 0) == 1\nassert solution(r = 3) == 0\nassert solution(r = 5) == 4\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2) == 4\nassert solution(3) == 4.0\nassert solution(4) == 4\nassert solution(5) == 4.0\nassert solution(6) == 4.0\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\n'''\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '4'\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"4\"\nassert input == \"4\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"4\"\nassert solution(\"1\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"4\"\nassert solution(\"0\") == \"0\"\nassert solution(\"2.2\") == \"8\"\nassert solution(\"2-1\") == \"3\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(a) == 5\nassert solution(b) == 4\nassert solution(c) == 0\nassert solution(d) == 0\nassert solution(e) == 0\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"No\"\n\nassert solution(inp) == \"Yes\""
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"Yes\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n\"\"\"\nimport math\nn, l = map(int, input().split())\np = [list(map(int, input().split())) for i in range(n)]\nA = [[0 for i in range(n)] for i in range(n)]\nfor i in range(n):\n    for j in range(i + 1):\n        A[i][j] = math.sqrt((p[i][0] - p[j][0]) ** 2 + (p[i][1] - p[j][1]) ** 2)"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 3 2') == 'Yes'\nassert solution('3 8 5 1') == 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"4\", \"3\", \"8\", \"5\", \"1\"]) == \"Yes\"\nassert solution([\"4\", \"3\", \"8\", \"5\", \"1\", \"9\", \"2\", \"6\", \"4\", \"5\"]) == \"Yes\"\nassert solution([\"4\", \"3\", \"8\", \"5\", \"1\", \"9\", \"2\", \"6\", \"4\", \"5\"]) == \"No\"\nassert solution([\"4\", \"3\", \"8\", \"5\", \"1\", \"9\", \"2\", \"6\", \"4\", \"5\"]) == \"No\"\nassert solution([\"4\", \"3\", \"8\", \"5\", \"1\", \"9\", \"2\", \"6\", \"4\", \"5\"]) == \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2') == 'Yes'\nassert solution('1') == 'No'\nassert solution('3') == 'No'\nassert solution('4') == 'Yes'\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    inp\n    ) == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input: \"5 4 4\"\n    ) == \"9\"\n    #assert solution(\n    #    input: \"123456\"\n    #    ) == \"123\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(s_1 c_1) == 1\nassert solution(s_2 c_2) == 7\nassert solution(s_3 c_3) == 2\nassert solution(s_4 c_4) == 7\nassert solution(s_5 c_5) == -1\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"N M\") == \"702\"\nassert solution(\"1 7\") == \"702\"\nassert solution(\"1 1\") == \"-1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"3 2\") == \"-1\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"702\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == '702'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input:\n    12\n    6\n    27\n    1\n    27\n    1\n    ) == '701'\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '702'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"702\"\nassert solution(\"1 7\") == \"702\"\nassert solution(\"3 2\") == \"7\"\nassert solution(\"1 7\") == \"7\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, 1, 3, 1) == \"1\"\nassert solution(5, 2, 3, 1) == \"-1\"\nassert solution(5, 4, 3, 1) == \"23\"\nassert solution(5, 1, 1, 3) == \"23\"\nassert solution(5, 4, 1, 3) == \"23\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"702\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2') == '9'\nassert solution('3') == '9'\nassert solution('1 3') == '9'\nassert solution('3 2') == '4'\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 2') == '9'\nassert solution('5 3') == '4'\nassert solution('1 2') == '1'\nassert solution('1 3') == '2'\nassert solution('1 4') == '2'\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '6'\nassert solution(input()) == '4'\nassert solution(input()) == '7'\nassert solution(input()) == '5'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"9\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3 4\") == \"13\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 3 4\") == \"2\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5,2) == 9\nassert solution(8,3) == 27\nassert solution(7,2) == 1\nassert solution(7,3) == 27\nassert solution(7,4) == 14\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"4\", \"3\", \"2\", \"1\"]) == \"9\"\nassert solution([\"3\", \"2\", \"1\"]) == \"6\"\nassert solution([\"3\", \"3\", \"1\"]) == \"6\"\nassert solution([\"1\", \"2\", \"2\"]) == \"5\"\nassert solution([\"1\", \"3\", \"3\"]) == \"9\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 2) == 1\nassert solution(2, 1) == 2\nassert solution(1, 3) == 4\nassert solution(2, 4) == 6\nassert solution(3, 2) == 6\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(solution(open(\"input_10000.txt\").read())) == \"1011\"\nassert solution(solution(open(\"input_10001.txt\").read())) == \"1011\"\nassert solution(solution(open(\"input_10010.txt\").read())) == \"1011\"\nassert solution(solution(open(\"input_10011.txt\").read())) == \"1011\"\nassert solution(solution(open(\"input_10012.txt\").read())) == \"1011\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3) == \"1011\"\nassert solution(3) == \"1101\"\nassert solution(2) == \"101\"\nassert solution(2) == \"111\"\nassert solution(6) == \"10101\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5\") == 5\nassert solution(\"1\") == 0\nassert solution(\"13\") == 12\nassert solution(\"10000000\") == 4\nassert solution(\"100000\") == 10\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '1011'\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"101\") == \"101\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"10\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\", \"Empty String\"\nassert solution(\"1\") == \"-2\", \"Only one character\"\nassert solution(\"1123\") == \"-2\", \"Only one character\"\nassert solution(\"112345678\") == \"-2\", \"Only one character\"\nassert solution(\"1123456789\") == \"-2\", \"Only one character\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"1011\""
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '1011'\nassert solution(input()) == '10100'\nassert solution(input()) == '10'\nassert solution(input()) == '0001'\nassert solution(input()) == '11'\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"-2\"\nassert solution(\"10\") == \"1011\"\nassert solution(\"100\") == \"1011\"\nassert solution(\"10000\") == \"1011\"\nassert solution(\"100000\") == \"1011\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1011\"\nassert solution(\"-1\") == \"1\"\nassert solution(\"-10^9\") == \"-9\"\nassert solution(\"-10^-5\") == \"-5\"\nassert solution(\"-10^-5\") == \"10\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"24\"\nassert solution(stdin) == \"31\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"7 5\", \"4 9\", \"2 4\", \"5 6\", \"7 5\", \"4 9\", \"2 4\", \"5 6\", \"7 5\") == \"14\""
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,2,3,4) == 12\nassert solution(1,1,4,5) == 12\nassert solution(3,6,2,2,5) == 12\nassert solution(1,1,3,3,4,2,3) == 12\nassert solution(1,4,5,3,3,5,3) == 12\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"10\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(INPUT) == '12'\nassert solution(INPUT) == 12\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n        [\"2\", \"5\", \"2\", \"3\", \"5\"],\n        [\"5\", \"2\", \"4\", \"1\", \"4\"],\n        [\"3\", \"1\", \"3\", \"2\", \"3\"],\n        [\"5\", \"4\", \"1\", \"3\", \"1\"],\n    ]\n) == \"12\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 3') == '2'\nassert solution('1 2 1 2') == '2'\nassert solution('2 2 2') == '1'\nassert solution('2 2 3') == '2'\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"15\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '20'\n\n-----Tutorial-----\nYou are given an array of strings where each string represents a single truck. You need to return the minimum price of one of the truck using some means.\n\nTack your head down to the left. Your head should have left the truck at the rightmost location, following the truck's directions. The price of the truck will be the sum of all of the prices of the other trucks it drives, and the head should move to the right.\n\nFor example, given the array [\"A\", \"C\", \"A\", \"B\", \"A\"] you can buy one truck and return 3, as shown in the example.\n\nA truck is represented by a list of strings, where each string represents a single truck.\n\nA truck at index i has a list of possible truck prices, represented as a list of strings, where each string represents a single truck.\n\nGiven the input, you need to return the minimum price of one truck from the input.\n\nIf there is no truck left, you need to return -1.\n\n\"\"\"\n\n\"\"\"\nLet's create an array.\nFor example, array = [\"A\", \"C\", \"A\", \"B\", \"A\"]\nWe need to buy two trucks.\nThe first truck costs $3.\nThe second truck costs $3.\nSo, if the price of the first truck is 3 then we can buy the second truck.\n\nNow, let's call our function!\nWe need to find the minimum price of the array which we have that represents the total cost of the truck.\nWe need to call the function on the array to get the total cost of the truck.\n\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == 12\nassert solution(\"4 9\") == 13\nassert solution(\"2 4\") == 10\nassert solution(\"5 4\") == 11\nassert solution(\"2 2\") == 4\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == 2\nassert solution(\"3 4 8 7 3\") == 2\nassert solution(\"4 4 8 7 3\") == 3\nassert solution(\"3 4 8 7 3\") == 4\n\nassert solution(\"10 4 4 3 1 1\") == 8\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 3') == 2\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()), \"The input must be a string\"\nassert len(input()) == N, \"the input does not match the length of the array\"\nassert 0 <= H_i < 10 ** 9, \"the input does not match the range of H_i\""
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"8 4 8 7 3\") == \"2\"\nassert solution(\"9 4 8 7 3\") == \"5\"\nassert solution(\"15 4 5 9 7\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(solution) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == 2\nassert solution(4) == 2\nassert solution(8) == 2\nassert solution(7) == 3\nassert solution(3) == 3\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 5\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n  stdin: str = \"5 3 8 7 3\") == \"3\"\nassert solution(\n  stdin: str = \"2 4 9 6 2\") == \"5\"\nassert solution(\n  stdin: str = \"1 4 5 2 2\") == \"1\"\nassert solution(\n  stdin: str = \"0\") == \"0\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 10 4 8 7 3\") == \"2\"\nassert solution(\"5 10 4 8 7 2\") == \"3\"\nassert solution(\"5 10 4 5 2\") == \"3\"\nassert solution(\"10 6 2\") == \"3\"\nassert solution(\"10 7 3\") == \"3\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n-----Time Complexity-----\n1. Space: O(1)\n2. Time: O(n)\n3. Auxiliary Space: O(n)\n4. Auxiliary Time: O(n)\n-----Constraints-----\n0 \u2264 n \u2264 100, 1 \u2264 k \u2264 n\n\n------Solution---------\nn = int(input())\na = list(map(int, input().split()))\nk = int(input())\nprint(len(set(a)))\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= a_i < 2*10^5\n\n------SAMPLE CASES------\n\nn = 5\na = [1, 2, 2, 4, 5]\nk = 3\n\nInput\n3\n1 2 2 4 5\nOutput\n2\nExplanation\n\nAfter one move you can set $a_i = \\lfloor\\frac{a_i}{2}\\rfloor$ and perform any number of operations with a_i.\n\nFor example, if $a_i$ = 1 and $a_i$ = 2, then you have a minimum number of operations required to obtain the array with integers in the range 1 to 2, 2 operations, which is given by 2.\n\n\n-----OUTPUT-----\n\nFor example, if $a_i$ = 1 and $a_i$ = 2, then you have a minimum number of operations required to obtain the array with integers in the range 1 to 2, 2 operations, which is given by 2.\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1, 'output is not as expected'\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 4\n'''"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5,3) == 1\nassert solution(5,3) == 1\nassert solution(5,3) == 2\nassert solution(5,3) == 0\nassert solution(5,3) == 0\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\n\n\"\"\"\n\nimport math\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 2\nassert solution(input()) == 0\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    stdin=input,\n    )\n\"\"\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 2 5 6 7 8 9 10\") == \"3\"\nassert solution(\"3 3 2 1 1 1 3\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2 3 4 2 5 6 7 8 9 10\") == \"3\"\nassert solution(\"2 2 3 2 4 3 3 4 3 4\") == \"2\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4\n\n'''"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"5 4 3 2 1 1 3\"\n) == 3\nassert solution(\n    \"5 4 2 3 1 1 2\"\n) == 2\nassert solution(\n    \"5 3 2 4 2 1 3\"\n) == 2\nassert solution(\n    \"6 4 2 3 4 3 5\"\n) == 5\nassert solution(\n    \"5 3 2 1 1 1 5\"\n) == 3\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n'''"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n\nInput\n5\n1 2 2 4 2 3\n\nOutput\n4\n\nExplanation\nThe minimum number of moves required to obtain at least $k$ equal elements in the array is 4.\n\n'''\n\nfrom collections import deque\n\nclass Solution:\n    def minimumMoves(self, a: List[int]) -> int:\n        \n        def update(q: deque, i: int, j: int) -> None:\n            q.append(max(j + i, j - i))\n            q.append(min(i + j, i - j))\n            \n        q = deque(a)\n        \n        # update\n        while q:\n            update(q, q.popleft(), q.popleft())\n        \n        return len(q)"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\n\"\"\"\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nn = len(a)"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin=\"6 5\"\n) == 3\nassert solution(\n    stdin=\"7 5\"\n) == 4"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10 10 10 1\") == \"10\"\nassert solution(\"10 10 10 1\") == \"10\"\nassert solution(\"10 10 10 1\") == \"10\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1000'\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 13\nassert solution(stdin) == 15\nassert solution(stdin) == 17\nassert solution(stdin) == 19\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == \"1\"\nassert solution(\"3\\n\\n\") == \"3\"\nassert solution(\"3\\n\\n\\n\") == \"3\"\nassert solution(\"3\\n\\n\\n\\n\") == \"1\"\nassert solution(\"3\\n\\n\\n\\n\\n\") == \"3\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 2 3') == '3'\nassert solution('2 4 2') == '6'\nassert solution('1 2 1') == '5'\nassert solution('2 1 1') == '2'\nassert solution('3 1 1') == '2'\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 2\") == \"1\"\nassert solution(\"2 5 2\") == \"2\"\nassert solution(\"2 6 3\") == \"3\"\nassert solution(\"2 7 4\") == \"4\"\nassert solution(\"3 2 1\") == \"1\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 11\n\n\"\"\"\nfrom __future__ import annotations\n\nfrom itertools import combinations"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '7'\nassert solution(stdin) == '1000'\nassert solution(stdin) == '1000000000000'\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 1 5 3 7 1 10000 1\") == \"1000\"\nassert solution(\"4 1 5 3 7 1 10000 1\") == \"1000\"\nassert solution(\"4 1 5 3 7 1 10000 1\") == \"1000\"\nassert solution(\"4 1 5 3 7 1 10000 1\") == \"1000\"\nassert solution(\"4 1 5 3 7 1 10000 1\") == \"1000\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 5, \"Failed to solve\"\n'''"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 4\n1 2\"\"\" ) == 2\nassert solution(\"\"\"5 6\n4 5\"\"\" ) == 2\nassert solution(\"\"\"2 5\n7 4\"\"\" ) == 2\nassert solution(\"\"\"1 6\n2 4\"\"\" ) == 2\nassert solution(\"\"\"1 2\n1 4\"\"\" ) == 2\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 4\nassert solution(stdin) == 4\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(solution) == 2\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 7\") == 2\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"9 8 3 7 6\") == 7, \"The ball will make a bounce at the coordinates 9, 8, 3 and 7.\"\nassert solution(\"5 5 1\") == 2, \"The ball will make a bounce at the coordinates 5, 5, 1.\"\nassert solution(\"1 6\") == 0, \"The ball will make a bounce at the coordinates 1, 6.\"\nassert solution(\"10\") == 0, \"The ball will make a bounce at the coordinates 10.\"\nassert solution(\"99 100\") == 0, \"The ball will make a bounce at the coordinates 99, 100.\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"3 5\"\nassert solution(input) == \"0 3\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"0\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1,3,5,7,12,13,15) == 2\nassert solution(5,3,4,3,5,2,8,9,13) == 4\nassert solution(5,4,2,1,2,1,2,2,2) == 2\n\n-----Sample Input-----\n5 3\n2 4\n\n-----Sample Output-----\n4\n\nThe ball will make a bounce at the coordinates 2, 2, 1, 1 and 2, 2, 1, 2.\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"No\"\n\ninput=input('\\nInput: ')\nN=input.split('\\n')\nN=len(N)\nW_1=N+2\nW_2=N+1\nW_N=N\n\nfor i in range(0,W_1):\n    if(i==0):\n        print('Yes')\n    else:\n        print('No')\n\nprint(solution(input))\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('hoge hoge') == 'Yes'\nassert solution('english english') == 'No'\nassert solution('hoge hoge') == 'No'\nassert solution('english english') == 'Yes'\n\"\"\"\nfrom collections import defaultdict\nfrom collections import deque\n\nN, W = map(int, stdin.split())\nW_list = deque([i for i in range(1, 11)])\nrule_dict = defaultdict(lambda: 0)\nfor i in range(N):\n    word = list(input())\n    for w in word:\n        rule_dict[w] += 1\n    if len(set(word))!= len(word):\n        print('No')\n        exit(0)\nfor w in sorted(rule_dict):\n    if rule_dict[w] == 0:\n        print('No')\n        exit(0)\n    elif rule_dict[w] == len(word):\n        print('Yes')\n        exit(0)\nfor i in range(N - 1, -1, -1):\n    word = list(W_list[i])\n    if len(set(word))!= len(word):\n        print('No')\n        exit(0)\n    else:\n        for j in range(len(W_list[i])):\n            if rule_dict[W_list[i][j]] == 0:\n                print('No')\n                exit(0)\n            else:\n                rule_dict[W_list[i][j]] -= 1\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"hoge\",\"english\",\"hoge\",\"enigma\",\"enigma\",\"enigma\"]) == \"Yes\"\nassert solution([\"hoge\",\"english\",\"hoge\",\"enigma\",\"enigma\",\"enigma\",\"enigma\"]) == \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([]), \"No\"\nassert solution([5, \"Takahashi\", \"Shiritori\", \"Takahashi\", \"Yoshi\", \"Hoge\", \"English\"]) == \"Yes\", \"No\"\nassert solution([5, \"Takahashi\", \"Shiritori\", \"Takahashi\", \"Yoshi\", \"Hoge\", \"Enigma\"]) == \"Yes\", \"No\"\nassert solution([5, \"Takahashi\", \"Shiritori\", \"Takahashi\", \"Yoshi\", \"Hoge\", \"English\", \"Takahashi\"]) == \"Yes\", \"No\"\nassert solution([5, \"Takahashi\", \"Shiritori\", \"Takahashi\", \"Yoshi\", \"Hoge\", \"Enigma\", \"Takahashi\"]) == \"Yes\", \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == 'Yes'\n\n\n\"\"\"\nExample 1:\nInput\n\nInput is given from STDIN. It contains a single line of input.\n\nConstraints\n\nOutput Format\n\nOutput is a single line of one of the following.\n\"Yes\" or \"No\".\n\nSample Input\n\n6\nkaisatou\nhint\n\nSample Output\n\nNo\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"hoge\") == \"Yes\"\nassert solution(\"hg\") == \"No\"\nassert solution(\"english\") == \"Yes\"\nassert solution(\"eng\") == \"No\"\nassert solution(\"na\") == \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"No\"\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 4\") == \"3\"\nassert solution(\"2 4 6\") == \"3\"\nassert solution(\"2 4 4\") == \"3\"\nassert solution(\"2 4 2\") == \"3\"\nassert solution(\"2 4 1\") == \"1\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"1 3\") == \"6\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"4 5\") == \"1\"\nassert solution(\"4 4\") == \"3\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"4\", \"2\", \"1\"]) == \"2\"\nassert solution([\"1\", \"2\", \"1\"]) == \"1\"\nassert solution([\"2\", \"1\", \"3\", \"1\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"1\", \"2\", \"2\", \"2\"]) == \"1\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == str(6)\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"6\"\n\nassert solution(\"2 3\") == \"5\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 3 1\") == \"1\"\nassert solution(\"1 2 1 2\") == \"1\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"5\", \"1\", \"2\", \"3\", \"4\", \"6\"]) == \"10\"\nassert solution([\"1\", \"1\", \"2\", \"2\", \"3\", \"3\"]) == \"10\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == \"6\"\nassert solution([\"2\", \"2\", \"3\", \"3\", \"4\", \"4\"]) == \"6\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution( \"5 5\" ) == 6\nassert solution( \"3 3\" ) == 4\nassert solution( \"1 1\" ) == 1\nassert solution( \"1 7\" ) == 1\nassert solution( \"1 3\" ) == 2\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0) == 0\nassert solution(2) == 0\nassert solution(3) == 1\nassert solution(4) == 0\nassert solution(5) == 0\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '6'\nassert solution(stdin) == '6'\nassert solution(stdin) == '6'\nassert solution(stdin) == '6'\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"Sardine\") == \"Sardinexxx\""
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('sardine') == 'xxxxxx'\nassert solution('sara') == 'xara'\nassert solution('arara') == 'arara'\nassert solution('qqqqq') == 'qqqqq'"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"aabbccddeeffggggbbbaabccdfbbaaaabbcdeebbbbbbbccddbbbccddeababbbbaa\") == \"bbaaabbccddeeffggbbbbaaabccdb\"\nassert solution(\"abccdeebbbbccbbaaabbccdbdeebbbbbbaaabbccdeebbbbbccddbbbbbccdeeababbbbaa\") == \"aaaaabccdeebbbbccbbaaabbccdb\"\nassert solution(\"aabbccdeeffgbbbbbcaabbccdeebbbbbcaabbccdeebbbbbccddbbbbbccdeeababbbbaa\") == \"aaaabbccdeeffgbbbbbcaabbccdb\"\nassert solution(\"aabbccddeeffggggbbbcaabbccdeebbbbbcaabbccdeebbbbbccddbbbbbccdeeababbbbaa\") == \"aaabbccddeeffggggbbbcaabbccdb\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\nassert solution(\"sardine\") == \"xxxxxxx\"\nassert solution(\"sardine\") == \"xxxxxxx\"\nassert solution(\"sardine\") == \"xxxxxxx\"\nassert solution(\"sardine\") == \"xxxxxxx\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sardine) == \"x\""
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"sardine\") == \"xxxxx\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('sardine') == 'xxx'\nassert solution('sardine') == 'xxx'\nassert solution('sardine') == 'x'\nassert solution('sardine') == 'x'\nassert solution('sardine') == 'xx'\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"baa\"\n) == \"xxxxx\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin=input,\n    stdout=lambda x,y: x.replace(y, 'x')\n    ) == 'xxxxxxx', \"First\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == 'x'\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 1 3\"), \"1 3 1 1 2\"\nassert solution(\"1 2 1 2 3\"), \"1 2 2 3 1\"\nassert solution(\"1 1 1 1 3\"), \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"7 1\") == \"Yes\"\nassert solution(\"5 5\") == \"Yes\"\nassert solution(\"9 9\") == \"No\"\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 'Yes'\nassert solution(input) == 'No'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(string) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 1 3\\n2 3 1 1\\n') == 'Yes'\nassert solution('5\\n3 1 3 3\\n3\\n2 2 2 2\\n1\\n3 3\\n4 3\\n5 1\\n') == 'No'\nassert solution('4\\n3 1 3 3\\n1 2 3\\n2 3 1\\n1 2 3\\n4 3\\n5 1\\n') == 'No'\nassert solution('4\\n5\\n2 3 3\\n1 3 1\\n4 3\\n5\\n2 2 2\\n3 2 2\\n4 2\\n5 1\\n') == 'Yes'\nassert solution('1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500\\n501\\n502\\n503\\n504\\n505\\n506\\n507\\n508\\n509\\n510\\n511\\n512\\n513\\n514\\n515\\n516\\n517\\n518\\n519\\n520\\n521\\n522\\n523\\n524\\n525\\n526\\n527\\n528\\n529\\n530\\n531\\n532\\n533\\n534\\n535\\n536\\"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"No\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == '1'\n\n-----Sample Output-----\n2\n3\n\nOnly the third code correctly solves this problem, as follows:\n - Since 3 \\times 1 + 2 \\times 2 + 1 \\times 3 + (-10) = 0 \\leq 0, the first code does not solve this problem.\n - 1 \\times 1 + 2 \\times 2 + 2 \\times 3 + (-10) = 1 > 0, the second code solves this problem.\nassert solution(inp) == '1'\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n\n\nInput:\n3 3 -10\n1 2 3\n3 2 1\n1 2 2\n\nOutput:\n1\n\n\nExplanation:\nThe solution is:\n- For example, consider the following code:\n    3 3 -10\n    1 2 3\n    3 2 1\n    1 2 2\nThe numbers in the code are:\n- 10\n- 3\n- -10\n- 3\n- 2\n- 2\n- 3\n- 1\n- 1\n\nSo, the solution is:\n- for example:\n    1\n   1 3\n    1 2 3\n    1 2 2\n    1 2 2\n    1 2 1\n    1 1 1\nThe numbers in the solution are:\n- 3\n- 3\n- -10\n- 3\n- 2\n- 2\n- 3\n- 1\n- 1\n\nSo, the code:\n- for example:\n    3\n   1 3\n    1 2 3\n    1 2 2\n    1 2 2\n    1 2 1\n    1 1 1\n\n- does not solve:\n    1\n    1 3\n    1 2 3\n    1 2 2\n    1 2 1\n    1 1 1\n\n=> 1\n\nNote:\nThe input to your solution is guaranteed to be in the form of an integer array.\nYou may assume that the input has only digits, and it is guaranteed that it is a valid input.\nThe given code will be valid but has some digits at the end of the input.\nIt can be proved that all the valid codes obtained from the problem are correct.\n'''"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"0\"\n-----Sample Output-----\nSample input:\n2 3 -10\n1 2 3\n3 2 1\n1 2 2\n\nSample output:\n1\n\"\"\"\n\nfrom itertools import combinations\n\nn, m, c = map(int, input().split())\narr = []\nfor i in range(n):\n    arr.append(list(map(int, input().split())))\n\ndic = {}\nfor i in range(n):\n    for j in range(n):\n        for k in combinations(arr[j], i):\n            tmp = ''.join(map(str, k))\n            if tmp not in dic:\n                dic[tmp] = 1\n            else:\n                dic[tmp] += 1\n\nprint(len(list(dic.values())))"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2 3 -10\"\n) == \"1\"\nassert solution(\n    \"1 2 3\"\n) == \"1\"\nassert solution(\n    \"1 2 2\"\n) == \"0\"\nassert solution(\n    \"1 2 2\"\n) == \"0\"\nassert solution(\n    \"3 2 1\"\n) == \"1\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"0\"\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n  \"2 3 -10\") == 1\nassert solution(\n  \"1 2 3\") == 1\nassert solution(\n  \"1 2 2\") == 0\nassert solution(\n  \"1 2 2 1\") == 0\nassert solution(\n  \"1 2 2 1 2\") == 0\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2,3,-10) == 1, \"The first code correctly solves this problem.\"\nassert solution(2,3,-10,1) == 1, \"The second code correctly solves this problem.\"\nassert solution(3,1,2,1) == 1, \"The third code correctly solves this problem.\"\nassert solution(3,1,2,1,1) == 1, \"The fourth code correctly solves this problem.\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 100\nassert solution(stdin) == 100\nassert solution(stdin) == 100\nassert solution(stdin) == 100\nassert solution(stdin) == 100\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 100\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 100\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 100\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 100\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == 5\nassert solution(3) == 2\nassert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 1\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"N\", \"2000\"]) == 100\nassert solution([\"N\", \"100\"]) == 100\nassert solution([\"N\", \"100\"]) == 100\nassert solution([\"N\", \"1000\"]) == 100\nassert solution([\"N\", \"1000\"]) == 100\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"200\") == 100\nassert solution(\"2000\") == 100\nassert solution(\"16000\") == 100\nassert solution(\"5000\") == 100\nassert solution(\"20500\") == 100\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 100\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == 10\nassert solution(\"5,5\") == 10\nassert solution(\"1000,10\") == 20\nassert solution(\"5,5,1,10\") == 40\nassert solution(\"1000,10,5\") == 60\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 5 2 4 6 7 8 9\") == \"9\"\nassert solution(\n    \"4 5 2 4 6 7 8 9\") == \"10\"\nassert solution(\n    \"4 5 2 4 6 7 8 9\") == \"10\"\nassert solution(\n    \"5 5 3\") == \"6\"\nassert solution(\n    \"5 5 5\") == \"8\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 9"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == str(9)\nassert solution(inp) == str(15)\nassert solution(inp) == str(45)\nassert solution(inp) == str(28)"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 5 2\\n5 5\\n6 6\\n\") == \"9\"\nassert solution(\"2 5\\n5 2\\n6 6\\n\") == \"9\"\nassert solution(\"4 5\\n5 4\\n6 5\\n\") == \"9\"\nassert solution(\"4 5\\n5 1\\n5 2\\n5 3\\n\") == \"3\"\nassert solution(\"3 6\\n5 4\\n5 5\\n6 6\\n\") == \"5\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('aabbbccccaa') == '7'\nassert solution('baab') == '8'\nassert solution('aab') == '0'\nassert solution('aabb') == '0'\nassert solution('aaabb') == '3'\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 9\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 9\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 7 4 5\") == \"15\"\nassert solution(\"2 3 5\") == \"6\"\nassert solution(\"1 7 2\") == \"1\"\nassert solution(\"2 2 5\") == \"1\"\nassert solution(\"1 3 2\") == \"3\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 5 2 4\") == \"9\"\nassert solution(\"3 6 2\") == \"6\"\nassert solution(\"3 5 3\") == \"8\"\nassert solution(\"3 2 3\") == \"6\"\nassert solution(\"4 2\") == \"5\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"9\"\n\n\n\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 10 20\") == \"No War\"\nassert solution(\"4 5 8 10\") == \"No War\"\nassert solution(\"3 6 13\") == \"War\"\n\n-----Constraints-----\n - 1 \\leq N, M \\leq 100\n - -100 \\leq X < Y < 100\n - -100 \\leq x_i, y_i \\leq 100\n - x_1, x_2,..., x_N \\neq X\n - y_1, y_2,..., y_M \\neq Y\n - y_i are all different.\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\") == \"No War\"\nassert solution(\"2 2 2\") == \"No War\"\nassert solution(\"3 3 3\") == \"No War\"\nassert solution(\"4 4 4\") == \"No War\"\nassert solution(\"5 5 5\") == \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"No War\"\nassert solution(input()) == \"War\""
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    input()) == 'No War'\nassert solution(\n    input().split(' ')) == 'No War'\nassert solution(\n    input().split(' ')) == 'War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 2 10 20\") == \"War\"\nassert solution(\"8 15 13\") == \"No War\"\nassert solution(\"16 22\") == \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 20 10\") == \"Yes\"\nassert solution(\"10 20 8\") == \"Yes\"\nassert solution(\"10 20 15\") == \"No\"\nassert solution(\"10 20 13\") == \"No\"\nassert solution(\"10 20 16\") == \"No\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 9 10 11 12\") == \"War\"\nassert solution(\"2 4 7\") == \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '10'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '1'\nassert solution('8 15 13') == '13'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '2'\nassert solution('4 13 16') == '16'\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2') == 6\nassert solution('2') == 0\nassert solution('2') == 0\nassert solution('3') == 0\nassert solution('4') == 0\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 6, \"Soln failed.\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"5\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"9\"\nassert solution(\"1 2 3\") == \"0\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2\\n2\\n3\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n\\n\")\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 6"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"6\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"5\"\n'''\n\nfrom itertools import permutations"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"6\""
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\nN, T_1, T_N, T_2, T_3, T_4, T_5, T_6, T_7, T_8, T_9, T_10, T_11, T_12\\\".splitlines()) == \\\"6\\\".format\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input =\n    \"2\"\n) == \"6\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '0'\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"0\""
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 0, 'Invalid input'\n\"\"\"\nN = int(input())\nW = list(map(int, input().split()))\nT = int(input())\nfor i in range(N):\n    print(sum(W[:i+1]))\n    print(sum(W[i+1:]))\n    pass\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1\",\"2\",\"3\"]) == \"0\"\nassert solution([\"1\",\"5\",\"9\"]) == \"3\"\nassert solution([\"1\",\"4\",\"7\",\"4\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"5\",\"5\"]) == \"3\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"3\"]) == \"0\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '0'\nassert input == '5'\nassert input == '1 2 3 4 5 6 7 8 9'\n\nassert solution(input) == '0'\nassert input == '5'\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, \"0\") == \"0\"\nassert solution(1, \"2\") == \"3\"\nassert solution(1, \"1\") == \"3\"\nassert solution(0, \"3\") == \"1\"\nassert solution(2, \"3\") == \"0\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2') == '0'\nassert solution('2 1 3') == '0'\nassert solution('2 2 4') == '3'\nassert solution('2 2 1') == '2'\nassert solution('2 1 3 2') == '2'\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"0\"\nassert solution(\"4 5 6 7\") == \"12\"\nassert solution(\"2 3 4 5\") == \"2\"\nassert solution(\"1 3 7\") == \"0\"\nassert solution(\"3 1 5\") == \"1\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input().split(\" \")) == \"0\"\n'''\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"3 4\") == \"0\"\nassert solution(\"4 5 6\") == \"6\"\nassert solution(\"4 4\") == \"0\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"3 4\") == \"1\"\nassert solution(\"4 5 6\") == \"2\"\nassert solution(\"3 4\") == \"1\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(n, m) == \"0\""
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '2'\nassert solution(input()) == '0'\nassert solution(input()) == '2'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"4 3\") == \"6\"\nassert solution(\"5 5 6\") == \"0\"\nassert solution(\"4 4 4\") == \"2\"\nassert solution(\"5 5 5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 2\nassert solution(stdin) == 4\nassert solution(stdin) == 8\nassert solution(stdin) == 9\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin = input()\n)\n\n'''\nclass Solution:\n    def minimumMoves(self, matrix: List[List[int]]) -> int:\n        '''\n        \u72b6\u6001\u538b\u7f29\n        for i in range(1, len(matrix[0])):\n            for j in range(1, len(matrix)):\n                if matrix[i][j]!= matrix[i - 1][j] or matrix[i][j - 1]!= matrix[i - 1][j - 1]:\n                    return 0\n        return 1\n\n        '''\n        n = len(matrix)\n        m = len(matrix[0])\n        dp = [[0] * m for _ in range(n)]\n        dp[0][0] = 1\n        for i in range(1, n):\n            for j in range(m):\n                if matrix[i][j]!= matrix[i - 1][j] or matrix[i][j - 1]!= matrix[i - 1][j - 1]:\n                    dp[i][j] = dp[i - 1][j] + 1\n        \n        for i in range(n - 2, -1, -1):\n            for j in range(m - 2, -1, -1):\n                if matrix[i][j]!= matrix[i + 1][j] or matrix[i][j + 1]!= matrix[i + 1][j + 1]:\n                    dp[i][j] = dp[i + 1][j] + 1\n        \n        return dp[0][0]\n        '''\n        # \u72b6\u6001\u538b\u7f29\n        n = len(matrix)\n        m = len(matrix[0])\n        dp = [0] * n\n        dp[0] = matrix[0][0]\n        for i in range(1, n):\n            for j in range(m):\n                if matrix[i][j]!= matrix[i][j - 1] or matrix[i][j - 1]!= matrix[i - 1][j - 1]:\n                    dp[i] = dp[i] + 1\n        \n        return dp[0]\n\n        \n        # \u4e8c\u5206\u67e5\u627e\n        # n = len(matrix)\n        # m = len(matrix[0])\n        # n1, n2 = 0, n - 1\n        # m1, m2 = 0, m - 1\n        # while n1 <= n and m1 <= m and n2 <= n and m2 <= m:\n        #     if matrix[n1][m1] == matrix[n2][m2]:\n        #         return 1 + min(n1 + 1, n2 + 1)\n        #     if matrix[n1][m1] > matrix[n2][m2]:\n        #         n1 += 1\n        #     else:\n        #         n2 += 1\n        #     if n1 > n - 1:\n        #         n1 -= 1\n        #     if n2 > n - 1:\n        #         n2 -= 1\n        # return min(n1 + 1, n2 + 1)\n        \n        # \u4e09\u6b21\u67e5\u627e\n        n = len(matrix)\n        m = len(matrix[0])\n        n1, n2, n3 = 0, n - 1, 0\n        m1, m2, m3 = 0, m - 1, 0\n        while n1 <= n and m1 <= m and n2 <= n and m2 <= m and n3 <= n and m3 <= m:\n            if matrix[n1][m1] == matrix[n2][m2]:\n                return 2 + min(n1 + 1, n2 + 1, n3 + 1)\n            if matrix[n1][m1] > matrix[n2][m2]:\n                n1 += 1\n            else:\n                n2 += 1\n            if n1 > n - 1:\n                n1 -= 1\n            if n2 > n - 1:\n                n2 -= 1\n            if n3 > n - 1:\n                n3 -= 1\n            if n1 > n - 1 and n2 > n - 1:\n                n1 -= 1\n                n2 -= 1\n            if n3 > n - 1 and n2 > n - 1:\n                n3 -= 1\n        return min(n1 + 1, n2 + 1, n3 + 1)\n        \n        # \u51fd\u6570\u4e00\uff1a\u9012\u5f52\u6c42\u89e3\n        # 1. \u4ece\u5de6\u5f80\u53f3\u6c42\u89e3\n        # \u4e3a\u6c42\u89e3\u7ed3\u675f\uff0c\u8bb0\u5f55\u7b2c\u4e00\u884c\u5230\u6700\u540e\u4e00\u884c\u6bcf\u884c\u6700\u540e\u4e00\ufffd"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 3') == '0'\nassert solution('4 4') == '0'\nassert solution('3 3') == '1'\nassert solution('3 3') == '2'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '99'\n\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, [3, 2, 4, 1, 5]) == '99'\nassert solution(5, [2, 1, 4, 3, 5]) == '5'\nassert solution(5, [3, 3, 2, 1, 5]) == '5'\nassert solution(5, [3, 5, 2, 1, 5]) == '5'\nassert solution(5, [1, 2, 3, 4, 5]) == '5'\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5\""
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 0\") == \"1\"\nassert solution(\"0 0 1 0 0\") == \"2\"\nassert solution(\"0 1 0 1 0\") == \"0\"\nassert solution(\"1 1 1 1 1\") == \"0\"\nassert solution(\"0 1 1 0 1 0 0\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 0 0 0\\n\") == \"2\"\nassert solution(\"7\\n0 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 1 0 0 1 0 0 0 1 1 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 1 0 0 1 0 0 1 0 1 0 1 0 0 0 0 1 1 0 0 0 1 1 0 0 1 1 0 0 0 0 1 1 0 0 0 0 1 1 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('6') == '2'\nassert solution('5') == '3'\nassert solution('7') == '0'\nassert solution('3') == '0'\nassert solution('1') == '2'\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"2\"\nassert solution(\"6 7\") == \"3\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"0 0 1\") == \"2\"\nassert solution(\"0 0 0\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 2, 'Correct answer'\nassert solution(6) == 3, 'Correct answer'\nassert solution(7) == 0, 'Correct answer'\nassert solution(3) == 0, 'Correct answer'\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer stdin\n\n[output] integer\n\n\n[explanation]\n\nPrint the maximal number of continuous hours during which Polycarp rests.\n\n\n\"\"\""
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3, \"Polycarp doesn't have maximal rest\"\n\nassert solution(stdin) == 2, \"Polycarp doesn't have maximal rest\"\n\nassert solution(stdin) == 0, \"Polycarp doesn't have maximal rest\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(123) == 123\nassert solution(0) == 0\nassert solution(7) == 7\nassert solution(3) == 3\nassert solution(5) == 5\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == '0'\nassert solution(2) == '1'\nassert solution(3) == '1'\nassert solution(4) == '1'\nassert solution(5) == '1'\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 7\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == '1'\nassert solution(7) == '0'\nassert solution(6) == '1'\nassert solution(3) == '0'\nassert solution(2) == '1'\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 7\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    '1'\n) == '1'\nassert solution(\n    '2'\n) == '2'\nassert solution(\n    '3'\n) == '3'\nassert solution(\n    '4'\n) == '4'\nassert solution(\n    '5'\n) == '5'\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == '1'\nassert solution(7) == '0'\nassert solution(9) == '0'\nassert solution(16) == '1'\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 100"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"1\"\nassert solution(\"7\") == \"0\"\nassert solution(\"8\") == \"0\"\nassert solution(\"9\") == \"1\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 1\nassert solution(4) == 0\nassert solution(6) == 1\nassert solution(8) == 0\nassert solution(0) == 1\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"9\") == \"brie soft\"\nassert solution(\"6\") == \"camembert soft\"\nassert solution(\"3\") == \"feta soft\"\nassert solution(\"1\") == \"goat soft\"\nassert solution(\"5\") == \"muenster soft\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 5\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"soft\"\n\n\n-----Incomplete-----\n\nSolution: "
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('brie soft') == 'brie soft'\nassert solution('camembert soft') == 'camembert soft'\nassert solution('feta soft') == 'feta soft'\nassert solution('goat soft') == 'goat soft'\nassert solution('muenster soft') =='muenster soft'\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 5 3 3\") == \"1\"\nassert solution(\"1 5 2 3\") == \"3\"\nassert solution(\"2 3 3 3\") == \"3\"\nassert solution(\"3 3 3 3 3\") == \"3\"\nassert solution(\"1 1 4 1\") == \"1\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"9\") == \"9\"\nassert solution(\"6\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"brie soft\",\n    \"camembert soft\",\n    \"feta soft\",\n    \"goat soft\",\n    \"muenster soft\",\n    \"asiago hard\",\n    \"cheddar hard\",\n    \"gouda hard\",\n    \"swiss hard\",\n) == \"3\"\nassert solution(\n    \"parmesan hard\",\n    \"emmental hard\",\n    \"edam hard\",\n    \"colby hard\",\n    \"gruyere hard\",\n    \"asiago hard\",\n    \"cheddar hard\",\n    \"gouda hard\",\n    \"swiss hard\",\n) == \"4\"\nassert solution(\n    \"parmesan hard\",\n    \"emmental hard\",\n    \"edam hard\",\n    \"colby hard\",\n    \"gruyere hard\",\n    \"asiago hard\",\n    \"cheddar hard\",\n    \"gouda hard\",\n    \"swiss hard\",\n) == \"7\"\nassert solution(\n    \"parmesan hard\",\n    \"emmental hard\",\n    \"edam hard\",\n    \"colby hard\",\n    \"gruyere hard\",\n    \"asiago hard\",\n    \"cheddar hard\",\n    \"gouda hard\",\n    \"swiss hard\",\n) == \"9\"\nassert solution(\n    \"parmesan hard\",\n    \"emmental hard\",\n    \"edam hard\",\n    \"colby hard\",\n    \"gruyere hard\",\n    \"asiago hard\",\n    \"cheddar hard\",\n    \"gouda hard\",\n    \"swiss hard\",\n) == \"def solution\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 0 0 2\"\nassert solution(stdin) == \"0 0 0 2\"\nassert solution(stdin) == \"1 0 0 2\"\nassert solution(stdin) == \"0 0 0 2\"\nassert solution(stdin) == \"1 0 0 2\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"1 0 0 2 \"\nassert solution(inp) == \"1 0 0 2 \"\nassert solution(inp) == \"0 0 0 2 \"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 0 0 2\"\nassert solution(stdin) == \"0 0 0 1 0 2\"\nassert solution(stdin) == \"0 0 0 1 0 2 0\"\nassert solution(stdin) == \"0 0 0 1 0 2 0\"\nassert solution(stdin) == \"0 0 0 1 0 2 0\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1 0 0 2'\nassert solution(stdin) == '1 0 0 0'\nassert solution(stdin) == '0 0 1 0'\nassert solution(stdin) == '0 0 0 0'\nassert solution(stdin) == '0 0 0 0'\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0 0 0 1\"\nassert solution(stdin) == \"0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 0 0 2\""
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 0 0 2\"\nassert solution(stdin) == \"0 0 0 2\"\nassert solution(stdin) == \"0 0 0 1\"\nassert solution(stdin) == \"0 0 0 1 0\"\nassert solution(stdin) == \"0 0 0 1\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0 0 0 2\"\nassert solution(stdin) == \"0 0 0 1\"\nassert solution(stdin) == \"1 0 0 2\"\nassert solution(stdin) == \"1 0 0 1\"\nassert solution(stdin) == \"0 0 0 2\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 1 1\"\n\nExplanation\n1\n0 1 2 1\n3 2 1 1\n3\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\nassert solution(\"0\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\n\n\n------SAMPLE INPUT------\n\n0\n1\n1\n0\n\n------SAMPLE OUTPUT------\n\n1\n0\n\n------DO NOT TOUCH OR REMINDERS OF THIS FILE!-------\n'''\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"0\"\n\n-----Constraints-----\n1 <= stdin.length <= 5\n\n0 <= stdin[i] <= 9\n\ntips:\n    We've already provided a solution to this problem.\n    We have a solution to it, and you may find it helpful to take a look at the implementation of the solution in question.\n\n\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"1\") == 1\nassert solution(\"0\") == 0\nassert solution(\"0\") == 0\nassert solution(\"1\") == 1\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0) == \"0\"\nassert solution(1) == \"1\"\nassert solution(0) == \"0\"\nassert solution(1) == \"1\"\n\n\"\"\"\n\nimport sys\nimport io\nimport math\n\nsys.stdin = io.StringIO(input())\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\"\nfrom collections import deque\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        # parse\n        n = deque([int(x) for x in stdin[0].split()])\n        m = deque([int(x) for x in stdin[1].split()])\n        \n        # filter\n        for i in range(len(n)):\n            n[i] = n[i] if n[i] >= 0 else 0\n        for i in range(len(m)):\n            m[i] = m[i] if m[i] >= 0 else 0\n        \n        # sum\n        ans = 0\n        for i in range(len(n)):\n            ans += n[i]*m[i]\n        \n        return str(ans)"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n\n\n-----Discussion-----\nThe input consists of four lines, each line containing a single digit 0 or 1.\n\n\"0\" means that the digit is 0, and the number is 0.\n\n\"1\" means that the digit is 1, and the number is 1.\n\n\"1\" means that the digit is 0, and the number is 1.\n\nThe problem is solved in O(n) time.\n\nA binary tree is represented by an array of binary digits, each binary digit\nrepresenting a single digit.\n\n\n\n-----To get started-----\n\nYou are given two lines, each containing a single number 0 or 1. The first line of\nthis file contains an integer n.\nThe second line contains n space separated integers.\n\n\n\nExample 1:\n\nInput:\nn = 5\n1 0 1 0 0\n1 0 0 0 0\n0 1 0 1 1\n0 1 0 0 0\n0 0 1 1 1\n1 0 0 0 0\nOutput:\n2\n5\n5\n1 0 0 0 0\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 0 1\n1 0 0 0 1\n\nExplanation:"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution(\"1\")) == \"1\"\nassert solution(solution(\"0\")) == \"0\"\nassert solution(solution(\"1000000000000\")) == \"1\"\nassert solution(solution(\"1234\")) == \"0\"\nassert solution(solution(\"12341234\")) == \"1\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1000 5 80\") == \"Yes\"\nassert solution(\"1000 15 80\") == \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 2 3 4 2') == 'Yes'\nassert solution('1 1 3 5') == 'No'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"5 3 10 100 100\") == \"Yes\"\nassert solution(\n    \"6 6 3 10 100\") == \"No\"\nassert solution(\n    \"1 10 3\") == \"Yes\""
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0) == \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 7 10\") == \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 7\") == \"Yes\"\nassert solution(\"5 7\") == \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"7 4\") == \"Yes\"\nassert solution(\"9 3\") == \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10050\") == \"Yes\"\nassert solution(\"10050\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"15\", \"80\"]) == \"Yes\"\nassert solution([\"16\", \"80\"]) == \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"84 97 66\") == \"Yes\", \"84 97 66\"\nassert solution(\"79 89 11\") == \"Yes\", \"79 89 11\"\nassert solution(\"61 59 7\") == \"No\", \"61 59 7\"\nassert solution(\"7\") == \"No\", \"7\"\nassert solution(\"7\") == \"No\", \"7\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"Yes\"\nassert solution(\"61 59 7\") == \"Yes\"\nassert solution(\"7\") == \"No\"\nassert solution(\"89\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"No\"\nassert solution(\"61 59 7\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"7\") == \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\"\"84 97 66\n79 89 11\n61 59 7\n7\"\"\") == \"Yes\", \"Boolean expression did not work.\"\n\nassert solution(\"\"\"79 89 11\n61 59 7\n7\"\"\") == \"No\", \"Boolean expression did not work.\"\n\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\nprint(\"Yes\")"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"No\"\nassert solution(\"61 59 7\") == \"No\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"89\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\" or solution(stdin) == \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"No\"\nassert solution(\"61 59 7\") == \"Yes\"\nassert solution(\"7\") == \"No\"\nassert solution(\"7\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('84 97 66') == 'No'\nassert solution('79 89 11') == 'Yes'\nassert solution('61 59 7') == 'No'\nassert solution('7') == 'No'\nassert solution('89') == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['5','3','2']) == '90'\nassert solution(['5','2','3','4']) == '-1'\nassert solution(['1','5','3','2']) == '90'\nassert solution(['5','2','3']) == '-1'\nassert solution(['5','2','3','4']) == '90'\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"30\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 30\n\n-----Sample Input-----\n3 5\n3 2\n\n-----Sample Output-----\n2\n\nInput is given from STDIN and using the input() function.\nYou do not need to read any input from STDIN.\nYou do not need to use any additional stdout or a timer.\n\n-----Sample Input-----\n3 1\n1 2\n\n-----Sample Output-----\n1\n\n-----Constraints-----\n1 <= N <= 10^4\n1 <= M <= 10^4\n1 <= A_i <= 10^4\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '30'\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 30\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '30'\n\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 3') == '30'\nassert solution('5 2') == '0'\nassert solution('5 1') == '1'\nassert solution('2 2') == '0'\nassert solution('2 5') == '2'\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 30\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('10 5 6') == 30\n\nassert solution('6') == -1\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '10'\n\"\"\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 5\n\nSample Output\n4\n\nExplanation\nThe digits that can be divided by 100 exactly are 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12.\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 5\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"5\"\n\"\"\"\nfrom typing import Union\n\nD, N = [int(i) for i in input().split()]"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(string) == string"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '5'\n\nExplanation\nThe 5-th smallest integer that can be divided by 100 exactly 0 times is 5.\n\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0, 5) == 5\n\n\n-----Other Solutions-----\n- We could also do this without using the function definition:\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5') == 5\nassert solution('2') == 2\nassert solution('5') == 4\nassert solution('2') == 2\nassert solution('1') == 1\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n'''\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(''), print('The answer is an empty string')\nassert solution('13579'), print('The answer is 13579')\nassert solution('12345'), print('The answer is 12345')\nassert solution('1234'), print('The answer is 1234')\nassert solution('123'), print('The answer is 123')\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 2\nassert solution(4) == 1\nassert solution(5) == 2\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 2\nassert solution(5) == 3\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2\") == 4\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"7\", \"6\"]) == 2\nassert solution([\"5\", \"4\", \"3\", \"2\", \"4\", \"1\", \"5\"]) == 7\nassert solution([\"1\", \"1\", \"1\"]) == 1\nassert solution([\"1\", \"1\", \"1\"]) == 1\nassert solution([\"1\", \"1\", \"1\"]) == 1\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"7 6 8\") == 2\nassert solution(\"4 7 4\") == 2\nassert solution(\"1 2 1\") == 1\nassert solution(\"1 1 1\") == 1\nassert solution(\"4 2 2\") == 2\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\") == 2\nassert solution(\"1\") == 1\nassert solution(\"1 1\") == 1\nassert solution(\"5 7 4 8 9 10 10\") == 2\nassert solution(\"123 45 2\") == 6\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(123) == 2\nassert solution(125) == 2\nassert solution(0) == 1\nassert solution(111111111) == 2\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('{7, 6, 8}') == str(2)\nassert solution('{7, 6, 8, 4}') == str(4)\nassert solution('{2, 1, 6, 7}') == str(7)\nassert solution('{2, 1, 6, 7, 9}') == str(8)\nassert solution('{4, 2, 1, 3}') == str(3)\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 7 6 8') == '2'\nassert solution('3 6 7 8') == '3'\nassert solution('3 8 6 7') == '5'\n\nassert solution('4 5 6') == '6'\nassert solution('4 7 6') == '7'"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == [\"1\", \"2\", \"3\"]\n\nInput:\nN = 3\nA_1 A_2 \\ldots A_N\n\nOutput:\n[\"1\", \"2\", \"3\"]\n\nExplanation:\nGiven the following N students, there are at most 3 possible valid orders:\n1. [1, 2, 3], [1, 3], [2, 3], [2, 1], [2, 3], [3, 1], [3, 2]\nThe order in which these orders are generated depends on the arrangement of the students.\n\"\"\"\n\n\"\"\"\n1. Hard : O(N * N)\n2. Concise : O(N^2)\n\nimport sys"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 3 1\") == \"3 1 2\"\nassert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"1 2\") == \"2 1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4 5\") == \"4 5\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"5 3 1 2\"\nassert solution(\"9 7\") == \"9 7 1 2 3 4 5\"\nassert solution(\"10 2\") == \"10 2 1 2\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"2 3 1\"\nassert solution(\"4 2 4\") == \"2 1 3\"\nassert solution(\"3 4\") == \"1 3\"\nassert solution(\"5 4\") == \"3 4\"\nassert solution(\"4 4\") == \"4 4\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"2 3 4\") == \"2 3 4\"\nassert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"1 4 5\") == \"1 4 5\"\nassert solution(\"1 6 7\") == \"1 6 7\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == \"1 1 2\"\nassert solution(\"3 5 2\") == \"2 1 3\"\nassert solution(\"3 3 2\") == \"1 2 3\"\nassert solution(\"3 3 3\") == \"1 2 3\"\nassert solution(\"1 2 3 4\") == \"2 1 3 4\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"4 5 2\") == \"5 4 2\"\nassert solution(\"3 5 1\") == \"5 3 1\"\nassert solution(\"3 5 4\") == \"5 4 3\"\nassert solution(\"2 1 4\") == \"2 1 4\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3 1 2\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 2 3 4 5 6 7 8 9\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 2\nassert solution(3) == 2\nassert solution(10) == 3\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(INPUT) == solution(OUTPUT)\nassert solution(INPUT) == 0\nassert solution(INPUT) == 0\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"12345\"\nassert solution(input) == \"9\"\nassert solution(input) == \"10\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('10 1 100') == '10'\nassert solution('10 1 11') == '10'\nassert solution('12345') == '12345'\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(int(input())) == 9\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"9\"\nassert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 12345\") == \"9\"\nassert solution(\"10 9 1\") == \"9\"\nassert solution(\"9\") == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '9'\nassert solution(input()) == '9'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(9)\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 7 100\") == \"0\"\nassert solution(\"10 7 100\") == \"0\"\nassert solution(\"10 7 100\") == \"0\"\nassert solution(\"10 7 100\") == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin=\"10 7 100\") == \"9\"\nassert solution(stdin=\"10 7 12345\") == \"12345\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"2\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \n    )\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 1\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '2'"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"1 2 3 4 4 1 5 4 3\") == 2\nassert solution(\n    \"2 2 4 1 3 5 3 2\") == 1\nassert solution(\n    \"2 4 5 2 4 2 5 2 3\") == 1\nassert solution(\n    \"2 2 4 2 3 2 5 2 5\") == 2\nassert solution(\n    \"3 1 2 3 3 3 3 1\") == 2\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6\") == 2\nassert solution(\"1 1 1 1 1 1\") == 1\nassert solution(\"2 2 2 2 2 2\") == 1\nassert solution(\"2 2 2 2 2 2 3\") == 2\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == 1\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\\\"\\\"\\\"\n    N K\n    h_1 h_2 \\ldots h_N\n    \\\"\\\"\\\") == [4, 2]\n\nassert solution(\\\"\\\"\\\"\n    N K\n    h_1 h_2 \\ldots h_N\n    \\\"\\\"\\\") == [4]\n\nassert solution(\\\"\\\"\\\"\n    N K\n    h_1 h_2 \\ldots h_N\n    \\\"\\\"\\\") == [2]\n\nassert solution(\\\"\\\"\\\"\n    N K\n    h_1 h_2 \\ldots h_N\n    \\\"\\\"\\\") == [3]\n\nassert solution(\\\"\\\"\\\"\n    N K\n    h_1 h_2 \\ldots h_N\n    \\\"\\\"\\\") == [3, 2]\n\n\"\"\")"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1,5) == \"Yes\"\nassert solution(3,4) == \"No\"\nassert solution(3,1) == \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 4') == 'Yes'\nassert solution('3 2') == 'No'"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"3 2\") == \"No\"\nassert solution(\"4 3\") == \"No\"\nassert solution(\"5 4 2 1\") == \"No\"\nassert solution(\"4 5\") == \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"4 1\"\n) == \"Yes\"\n\nassert solution(\n    \"5 4 2 1\"\n) == \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1 2\", \"1 3\", \"1 4\", \"2 3\", \"2 4\", \"3 4\", \"3 5\", \"4 5\", \"5 5\"]) == \"Yes\"\nassert solution([\"1 5\", \"1 6\", \"2 3\", \"3 4\", \"3 5\", \"4 4\", \"4 5\", \"5 6\"]) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"Yes\"\nassert solution(inp) == \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2 3 4 5 5 6 7 8 9 10\") == \"Yes\"\nassert solution(\n    \"3 4 5 4 5 3 4 3 4 3 2\") == \"No\"\nassert solution(\n    \"6 7 8 9 10 7 6 5 4 3 2\") == \"Yes\"\nassert solution(\n    \"2 2 3 3 3 3 3 3 3 3 2\") == \"Yes\"\nassert solution(\n    \"2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1 1 2 2 2 2 2 2 1 2 2 1 2 1 2 2 1 2 2 2 1 2 1 1 2 2 1 2 1 2 2 2 1 2 2 2 1 2 1 2 2 2 1 2 1 2 2 1 2 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 2 1 2 1 2 2 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 2 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(['1','1','1','2','1','1','1','3','3']) == 'No'\nassert solution(['1','1','1','2','1','1','1','3','3']) == 'No'\nassert solution(['1','1','1','2','1','1','1','3','3']) == 'Yes'\nassert solution(['3','1','1','1','1','1','1','1','1']) == 'Yes'\nassert solution(['1','1','1','2','1','1','1','3','3']) == 'No'\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"Five choices below satisfy the condition\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 6, \"Solution not found\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\",\"1\",\"2\",\"3\",\"4\",\"5\",\"5\"]) == \"5\"\nassert solution([\"3\",\"1\",\"2\",\"1\",\"2\",\"3\",\"4\"]) == \"4\"\nassert solution([\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]) == \"1\"\nassert solution([\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"2\"]) == \"1\"\nassert solution([\"1\",\"1\",\"1\",\"1\",\"1\",\"2\",\"2\"]) == \"1\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '5'\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\""
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"5\""
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('2') == 2\nassert solution('2 1') == 1\nassert solution('1 1 1 1 1') == 3\nassert solution('1 1 1 2 1') == 4\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 5, \"Not 5\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\",\"1\",\"1\",\"1\",\"1\"]) == 5\nassert solution
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(solution) == \"2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"2019\", \"2040\"]) == \"2\"\nassert solution([\"2020\", \"2041\"]) == \"2\"\nassert solution([\"2020\", \"2042\"]) == \"2\"\nassert solution([\"2020\", \"2043\"]) == \"2\"\nassert solution([\"2020\", \"2044\"]) == \"2\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2020 2040\") == 2\nassert solution(\"2041 000\") == 1\nassert solution(\"2019 2020\") == 1\nassert solution(\"2019 2021\") == 0\nassert solution(\"2041 000\") == 1\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2041\") == \"2\"\nassert solution(\"2040\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2020\") == \"1\"\nassert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['2020 2040', '2041']) == '2'\nassert solution(['2020 2040', '2042']) == '4'\nassert solution(['2042', '2041']) == '6'\nassert solution(['2041', '2042']) == '6'\nassert solution(['2041', '2044']) == '6'\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2040 2040\") == \"2020\"\nassert solution(\"2000 5678\") == \"2\""
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2020 2040\") == 2\nassert solution(\"2020 2021\") == 2.0\nassert solution(\"2020 2021.00\") == 2.0\nassert solution(\"2020 2021.01\") == 2.0\nassert solution(\"2020 2021.02\") == 2.0\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"WA\"\nassert solution(\"AA\") == \"WA\"\nassert solution(\"AACCC\") == \"WA\"\nassert solution(\"aCc\") == \"WA\"\nassert solution(\"aCcC\") == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"a\", \"c\", \"b\"]) == \"WA\"\nassert solution([\"A\", \"C\", \"B\"]) == \"WA\"\nassert solution([\"a\", \"c\", \"b\", \"Z\", \"A\", \"C\", \"B\"]) == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('atcoder') == 'WA'\nassert solution('apple') == 'WA'\nassert solution('aecor') == 'AC'\nassert solution('cor') == 'AC'\nassert solution('ac') == 'AC'\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"A\",\"C\"]) == \"WA\"\nassert solution([\"A\",\"C\",\"E\",\"D\",\"A\",\"E\"]) == \"AC\"\nassert solution([\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"A\"]) == \"AC\"\nassert solution([\"B\",\"C\",\"C\",\"B\"]) == \"WA\"\nassert solution([\"A\",\"B\",\"C\",\"B\"]) == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"AC\"\nassert solution(\"AABC\") == \"AC\"\nassert solution(\"AAAAAA\") == \"WA\"\nassert solution(\"AAABBA\") == \"WA\"\nassert solution(\"AAABBBAABAABA\") == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ATCoder\") == \"WA\"\n\n\n\"\"\"\nDefinition of a character and its frequency\n\"\"\"\nclass char:\n    def __init__(self, c: str, f: int):\n        self.c = c\n        self.f = f\n\nclass frequency:\n    def __init__(self, c: str, f: int):\n        self.c = c\n        self.f = f\n\n    def __str__(self):\n        return self.c + \" \" + str(self.f)\n\n\"\"\"\nDefinition of a string\n\"\"\"\nclass string:\n    def __init__(self, S: str):\n        self.S = S\n        self.S = self.S.upper()\n\n    def __str__(self):\n        return self.S\n\n    def __hash__(self):\n        return hash(self.S)\n\n    def __eq__(self, S):\n        return self.S == S\n\n\"\"\"\nThe end.\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 'WA'\nassert solution(input()) == 'AC'\nassert solution(input()) == 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(Solution) == \"WA\"\nassert solution(Solution) == \"AC\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(st) == \"AC\"\nassert solution(st) == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"AACDA\") == \"WA\"\nassert solution(\"AACD\") == \"WA\"\nassert solution(\"AACDCA\") == \"WA\"\nassert solution(\"AACDDCA\") == \"WA\"\nassert solution(\"AACDD\") == \"WA\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(string) == \"2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"2\"\nassert solution([\"1\", \"3\", \"5\", \"7\", \"9\", \"11\"]) == \"3\"\nassert solution([\"1\", \"3\", \"5\", \"7\", \"9\", \"11\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\"]) == \"13\"\nassert solution([\"6\", \"5\", \"4\", \"3\", \"2\", \"1\", \"0\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"]) == \"6\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2', 'Wrong answer'\nassert solution(stdin) == '22', 'Wrong answer'\nassert solution(stdin) == '3333', 'Wrong answer'\nassert solution(stdin) == '4444', 'Wrong answer'\nassert solution(stdin) == '55555', 'Wrong answer'\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2, \"The solution is not correct\""
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \n)"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '2'\nassert solution(input) == '2'\nassert solution(input) == '2'\nassert solution(input) == '2'\nassert solution(input) == '2'\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('11224') == '2'\nassert solution('11212') == '2'\nassert solution('1214') == '2'\nassert solution('1211') == '1'\nassert solution('1211') == '3'\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n        inputs=\"6\".rjust(4,\"0\")\n        ), \"the string 6 has been changed.\""
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1123\") == \"2\"\nassert solution(\"1224\") == \"2\"\nassert solution(\"112345\") == \"2\"\nassert solution(\"1123456789\") == \"2\"\nassert solution(\"123\") == \"2\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == YES\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"5 5 3 4 1\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 5 3 4 2\") == \"YES\"\nassert solution(\"5 5 3 4 1\") == \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stderr) == \"YES\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"YES\"\n'''"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"p_1 p_2 p_3 p_4 p_5\") == \"NO\"\nassert solution(\"p_1 p_2 p_3 p_4 p_5\") == \"YES\""
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"p_1\", \"p_2\", \"p_3\", \"p_4\", \"p_5\"]) == \"YES\"\nassert solution([\"p_1\", \"p_2\", \"p_4\", \"p_3\", \"p_5\", \"p_6\"]) == \"NO\"\n\nInput\n: String input from stdin.\nOutput\n: String output from stdin.\nConstraints\n1 <= N <= 10^4\n0 <= p_i < p_j < N\n\nSample Input\n:\n3\np_1\np_2\np_3\np_4\np_5\np_6\n\nSample Output\n:\nYES\nYES\nNO\n\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5,5,3,5,4,2,1) == \"YES\", \"solution() should return YES\"\nassert solution(5,5,3,5,4,2,2) == \"NO\", \"solution() should return NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 4 6 1 3 2\") == \"YES\"\nassert solution(\"5 3 4 2 1\") == \"NO\"\nassert solution(\"5 3 4 5 1 2\") == \"NO\"\nassert solution(\"5 3 4 6 5 1\") == \"NO\"\nassert solution(\"5 3 4 6 5 2\") == \"NO\"\n\ninput = [5,5,3,4,5,1,2,5,5]\noutput = [\"YES\", \"NO\", \"NO\", \"YES\", \"NO\", \"NO\", \"NO\", \"NO\", \"YES\"]"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5,5) == 'YES'\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3121) == 3\nassert solution(6) == 33\nassert solution(1000000000000000000000000000000000) == 4\nassert solution(201920181) == 33\nassert solution(1) == 0\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3121) == 2\nassert solution(6) == 1\nassert solution(1000000000000000000000000000000000) == 33\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('00000') == '1'\nassert solution('00001') == '1'\nassert solution('010000') == '1'\nassert solution('01100') == '3'\nassert solution
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '33'\nassert solution(stdin) == '33'\nassert solution(stdin) == '33'\nassert solution(stdin) == '33'\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3121) == 2\nassert solution(6) == 1\nassert solution(1000000000000000000000000000000000) == 33\nassert solution(201920181) == 4"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '33'\n\nassert solution(stdin) == '4'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^4\n0 <= s <= 10^4\n\nO(n)\n\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('0') == 0\nassert solution('9') == 9\nassert solution('201') == 201\nassert solution('81') == 81\nassert solution('100000000') == 1301"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\nassert solution(\"201920181\") == \"33\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \n    \n    \n    stdin = open(\"./files/inp.txt\", \"r\").read()\n    pass\n    \n    \n    ) == \"10\"\n    \n    \n    pass\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]) == \"0\"\nassert solution([\"1\",\"0\",\"2\",\"4\",\"7\"]) == \"2\"\nassert solution([\"1\",\"2\",\"3\",\"0\",\"5\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]) == \"3\"\nassert solution([\"1\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"]) == \"3\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, [-2, -1]) == 2\nassert solution(1, [-2, -1, -1]) == 0\nassert solution(1, [-2, -1, -1, -1]) == 2\nassert solution(1, [-2, -1, -1, -1, -1]) == 0\nassert solution(1, [-2, -1, -1, -1, -1, -1]) == 0\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, [1, 2, 3, 4, 5]) == 2\nassert solution(4, [1, 2, 3, 4, 5]) == 0\nassert solution(3, [1, 2, 3, 4, 5]) == 2\nassert solution(2, [1, 2, -1]) == 0\nassert solution(1, []) == 0\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n\n-----Constraints-----\n1 <= n <= 10^5\n-10^9 <= a_i,b_i \\le 10^9\na_i, b_i \\neq 0\n-10^9 <= c_i,d_i \\le 10^9\n-10^9 <= c_i,d_i \\le 10^9\n-10^9 <= c_i,d_i \\le 10^9\n\n-----Bug Fixes-----\n-10^9 <= a_i,b_i \\le 10^9\n-10^9 <= c_i,d_i \\le 10^9\n-10^9 <= a_i,b_i \\le 10^9\n\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"1 2 3 4 5\") == \"2\"\nassert solution(\n    \"2 4 7 11 3\") == \"0\"\nassert solution(\n    \"3 0 0 0 0\") == \"3\"\nassert solution(\n    \"3 0 0 0 0 1\") == \"0\"\nassert solution(\n    \"3 2 7 11 3\") == \"1\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '2'\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= a_i <= 10^9\n0 <= b_i <= 10^9\n\n-----Time Complexity-----\nBest Case: O(n)\nWorst Case: O(n)"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"2 5\") == \"1\"\nassert solution(\"3 1\") == \"0\"\nassert solution(\"3 -1 -1\") == \"1\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\"\n\nassert solution(input()) == \"3\"\n\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"1\"\n\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2 -1 -6 6\") == \"3\"\nassert solution(\"3 2 3 4 -2 -12 -6\") == \"3\"\nassert solution(\"3 2 3 4 -2\") == \"0\"\nassert solution(\"3 2 3 4 -2 2\") == \"2\"\nassert solution(\"3 2 3 4 -2 2 2\") == \"0\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"7\") == \"5\"\nassert solution(\"9\") == \"5\"\nassert solution(\"10\") == \"5\"\nassert solution(\"11\") == \"5\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7'\nassert solution('abaca?b') == '5'\nassert solution('hellocode') == '0'\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3 9\"\n\nassert solution(input().split(\"?\")) == \"5 4\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('10') == 5\nassert solution('7') == 7\nassert solution('9') == 9\nassert solution('10') == 10\nassert solution('3') == 3\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1') == '5'\nassert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '2'\nassert solution('5') == '7'\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '10'\nassert solution(stdin) == '7'\nassert solution(stdin) == '5'\nassert solution(stdin) == '6'\nassert solution(stdin) == '7'\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"7\") == \"7\"\nassert solution(\"9\") == \"3\"\nassert solution(\"10\") == \"0\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 5\nassert solution(stdin) == 3\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 1 1\") == '1'\nassert solution(\"4 1 2 2 1 5 3\") == '4'\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2'\nassert solution(\"4 1 2 2 1 5 3\") == '4'\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == '1'\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2) == 4\nassert solution(6) == 10"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n(\n(\n1\n),\n(\n)\n)\n\nExplanation\nGiven the sequence:\n,\n\nThe problem is solved by adding the five elements from the sequence one by one. The two smallest elements are 1, 2, and 3, and the four smallest elements are 4, 5, 6, and 7. The three smallest elements are 1, 2, and 3. The four smallest elements are 4, 5, 6, and 7.\nThe two smallest elements of the sequence are: 1, 2, and 3. However, the two smallest elements are: 4, 5, 6, and 7. Therefore, we need to add the five elements from the sequence one by one to obtain the seven smallest elements.\n\nExample\n\nFor n = 8, the sequence is:\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n\nIn order to add the five elements from the sequence one by one, we need to take the first four elements of the sequence.\n\nFor example:\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"7\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3\\n\"\n    \"5\\n\"\n    \"4 1 2 2 1 5 3"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"-5\", \"4\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"2\"\nassert solution([\"-5\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"3\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"4\"\nassert solution([\"-5\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"4\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"4\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '4'\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 4) == 5\nassert solution(1, 1) == 1\nassert solution(1, 2) == 3\nassert solution(2, 1) == 2\nassert solution(2, 1) == 3\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3 1 5 3 2 1 4\"\n\"\"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"2 3 4\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4 5\n4 8 1 5 6\n3 7 6 9\n7 8 3 4\n8 2 3 8 5\n2 1 6 3 2\n6 2 3 6 5\n\"\"\") == 12\n\"\"\"\n\nsolution(\"\"\"\n4 5\n4 8 1 5 6\n3 7 6 9\n7 8 3 4\n8 2 3 8 5\n2 1 6 3 2\n6 2 3 6 5\n\"\"\") == 3\n\"\"\"\n\nsolution(\"\"\"\n4 5\n4 8 1 5 6\n3 7 6 9\n7 8 3 4\n8 2 3 8 5\n2 1 6 3 2\n6 2 3 6 5\n\"\"\") == 0\n\"\"\"\n\nsolution(\"\"\"\n3 4\n3 5\n3 6\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n3 12\n3 13\n3 14\n3 15\n3 16\n3 17\n3 18\n3 19\n3 20\n3 21\n3 22\n3 23\n3 24\n3 25\n3 26\n3 27\n3 28\n3 29\n3 30\n3 31\n3 32\n3 33\n3 34\n3 35\n3 36\n3 37\n3 38\n3 39\n3 40\n3 41\n3 42\n3 43\n3 44\n3 45\n3 46\n3 47\n3 48\n3 49\n3 50\n3 51\n3 52\n3 53\n3 54\n3 55\n3 56\n3 57\n3 58\n3 59\n3 60\n3 61\n3 62\n3 63\n3 64\n3 65\n3 66\n3 67\n3 68\n3 69\n3 70\n3 71\n3 72\n3 73\n3 74\n3 75\n3 76\n3 77\n3 78\n3 79\n3 80\n3 81\n3 82\n3 83\n3 84\n3 85\n3 86\n3 87\n3 88\n3 89\n3 90\n3 91\n3 92\n3 93\n3 94\n3 95\n3 96\n3 97\n3 98\n3 99\n3 100\n3 101\n3 102\n3 103\n3 104\n3 105\n3 106\n3 107\n3 108\n3 109\n3 110\n3 111\n3 112\n3 113\n3 114\n3 115\n3 116\n3 117\n3 118\n3 119\n3 120\n3 121\n3 122\n3 123\n3 124\n3 125\n3 126\n3 127\n3 128\n3 129\n3 130\n3 131\n3 132\n3 133\n3 134\n3 135\n3 136\n3 137\n3 138\n3 139\n3 140\n3 141\n3 142\n3 143\n3 144\n3 145\n3 146\n3 147\n3 148\n3 149\n3 150\n3 151\n3 152\n3 153\n3 154\n3 155\n3 156\n3 157\n3 158\n3 159\n3 160\n3 161\n3 162\n3 163\n3 164\n3 165\n3 166\n3 167\n3 168\n3 169\n3 170\n3 171\n3 172\n3 173\n3 174\n3 175\n3 176\n3 177\n3 178\n3 179\n3 180\n3 181\n3 182\n3 183\n3 184\n3 185\n3 186\n3 187\n3 188\n3 189\n3 190\n3 191\n3 192\n3 193\n3 194\n3 195\n3 196\n3 197\n3 198\n3 199\n3 200\n3 201\n3 202\n3 203\n3 204\n3 205\n3 206\n3 207\n3 208\n3 209\n3 210\n3 211\n3 212\n3 213\n3 214\n3 215\n3 216\n3 217\n3 218\n3 219\n3 220\n3 221\n3 222\n3 223\n3 224\n3 225\n3 226\n3 227\n3 228\n3 229\n3 230\n3 231\n3 232\n3 233\n3 234\n3 235\n3 236\n3 237\n3 238\n3 239\n3 240\n3 241\n3 242\n3 243\n3 244\n3 245\n3 246\n3 247\n3 248\n3 249\n3 250\n3 251\n3 252\n3 253\n3 254\n3 255\n3 256\n3 257\n3 258\n3 259\n3 260\n3 261\n3 262\n3 263\n3 264\n3 265\n3 266\n3 267\n3 268\n3 269\n3 270\n3 271\n3 272\n3 273\n3 274\n3 275\n3 276\n3 277\n3 278\n3 279\n3 280\n3 281\n3 282\n3 283\n3 284\n3 285\n3 286\n3 287\n3 288\n3 289\n3 290\n3 291\n3 292\n3 293\n3 294\n3 295\n3 296\n3 297\n3 298\n3 299\n3 300\n3 301\n3 302\n3 303\n3 304\n3 305\n3 306\n3 307\n3 308\n3 309\n3 310\n3 311\n3 312\n3 313\n3 314\n3 315\n3 316\n3 317\n3 318\n3 319\n3 320\n3 321\n3 322\n3 323\n3 324\n3 325\n3 326\n3 327\n3 328\n3 329\n3 330\n3 331\n3 332\n3 333\n3 334\n3 335\n3 336\n3 337\n3 338\n3 339\n3 340\n3 341\n3 342\n3 343\n3 344\n3 345\n3 346\n3 347\n3 348\n3 349\n3 350\n3 351\n3 352\n3 353\n3 354\n3 355\n3 356\n3 357\n3 358\n3 359\n3 360\n3 361\n3 362\n3 363\n3 364\n3 365\n3 366\n3 367\n3 368\n3 369\n3 370\n3 371\n3 372\n3 373\n3 374\n3 375\n3 376\n3 377\n3 378\n3 379\n3 380\n3 381\n3 382\n3 383\n3 384\n3 385\n3 386\n3 387\n3 388\n3 389\n3 390\n3 391\n3 392\n3 393\n3 394\n3 395\n3 396\n3 397\n3 398\n3 399\n3 400\n3 401\n3 402\n3 403\n3 404\n3 405\n3 406\n3 407\n3 408\n3 409\n3 410\n3 411\n3 412\n3 413\n3 414\n3 415\n3 416\n3 417\n3 418\n3 419\n3 420\n3 421\n3 422\n3 423\n3 424\n3 425\n3 426\n3 427\n3 428\n3 429\n3 430\n3 431\n3 432\n3 433\n3 434\n3 435\n3 436\n3 437\n3 438\n3 439\n3 440\n3 441\n3 442\n3 443\n3 444\n3 445\n3 446\n3 447\n3 448\n3 449\n3 450\n3 451\n3 452\n3 453\n3 454\n3 455\n3 456\n3 457\n3 458\n3 459\n3"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 11\nassert solution(stdin) == 10\nassert solution(stdin) == 12\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"4 2\"\n    ), 7\nassert solution(\n    \"5 2\"\n    ), 12\nassert solution(\n    \"4 2\"\n    ), 0\nassert solution(\n    \"5 2\"\n    ), 1\nassert solution(\n    \"3 7 19 3 3\"\n    ) == \"12\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '7'\n\n\n------Code------\n\nimport itertools"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('''\n4 2\n2 78 4 10\n\n''') == 7\nassert solution('''\n2 3\n4 3\n\n''') == 0\nassert solution('''\n3 7\n7\n\n''') == 1\nassert solution('''\n3 5\n3 2\n\n''') == 0\nassert solution('''\n1 3\n1 4\n1 2\n\n''') == 0\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1, \"the answer is wrong\"\nassert solution(stdin) == 5, \"the answer is wrong\"\nassert solution(stdin) == 0, \"the answer is wrong\"\nassert solution(stdin) == 12, \"the answer is wrong\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input() == \"57\") == \"5\"\nassert solution(input() == \"7\") == \"12\"\nassert solution(input() == \"0\") == \"0\"\nassert solution(input() == \"2\") == \"0\"\nassert solution(input() == \"3\") == \"0\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"12\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, 2) == 7\nassert solution(3, 2) == 0\nassert solution(2, 3) == 0\nassert solution(1, 1) == 0\nassert solution(4, 4) == 0\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"7\"\nassert solution(\"3 3 7 4\") == \"0\"\nassert solution(\"5 2\") == \"12\"\nassert solution(\"4 2\") == \"0\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '9', 'Expected 9. For example, input is \"{}\"'.format(input)"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 5') == 9, \"No valid candidate\"\nassert solution('2 5 1') == 7, \"Invalid candidate\"\nassert solution('2 2 1') == 2, \"Invalid candidate\"\nassert solution('-1 -2 -3') == 4, \"Invalid candidate\"\nassert solution('2 -5 2') == -2, \"Invalid candidate\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 5 4\") == \"5\"\nassert solution(\"4 5 -1\") == \"3\"\nassert solution(\"4 6 -1 -1\") == \"2\"\nassert solution(\"4 7 -1 -1 -1\") == \"0\""
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 9\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution( \"2 5\" ) == 5\nassert solution( \"1 2 -1 -1\" ) == -1\nassert solution( \"2 -1\" ) == 2\nassert solution( \"2\" ) == 2\nassert solution( \"1 -2 2 2\" ) == -1\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"9\""
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 5\") == \"9\"\nassert solution(\"1 -3 5\") == \"4\"\nassert solution(\"-2 -5 -4 -3 -5\") == \"7\""
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \n    \n) == '9'"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('{1, 3, 4}') == 110\nassert solution('{1, 2, 3}') == 110\nassert solution('{1, 2, 3, 4}') == 110\nassert solution('{1, 2, 3, 4, 5}') == 110\nassert solution('{1, 2, 3, 4, 5, 6}') == 110\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"No solution\"\nprint(solution(\"{1, 3, 4, 100}\"))\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 110, \"Expected answer 110 but got {} instead.\".format(110)\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '110'\nassert solution(inp) == '110'\nassert solution(inp) == '110'\nassert solution(inp) == '110'\nassert solution(inp) == '110'\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1 3 3 100\", \"1 2 2 10\", \"2 3 2 10\", \"3 4 2 10\", \"3 3 2 10\", \"3 1 2 10\", \"3 2 2 10\", \"3 2 2 10\"]) == \"110\"\nassert solution([\"1 3 4\", \"1 1 2 3\", \"1 3 2 3\", \"2 3 4 3\", \"1 1 2 3\", \"2 2 2 4 3\", \"3 2 4 3\"]) == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '110'\n\n-----Sample Input-----\n3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10\n\n-----Sample Output-----\n9\n\nWhen A = \\{1, 3, 4\\}, its score is 9. Under these conditions, no sequence has a score greater than 9, so the answer is 9.\n\nWhen A = \\{1, 2, 3\\}, its score is 14. Under these conditions, no sequence has a score greater than 14, so the answer is 14.\n\nWhen A = \\{1, 2, 3\\}, its score is 19. Under these conditions, no sequence has a score greater than 19, so the answer is 19.\n\nWhen A = \\{2, 3, 4\\}, its score is 28. Under these conditions, no sequence has a score greater than 28, so the answer is 28.\n\nWhen A = \\{2, 3, 4\\}, its score is 35. Under these conditions, no sequence has a score greater than 35, so the answer is 35.\n\nWhen A = \\{2, 3, 4, 5\\}, its score is 39. Under these conditions, no sequence has a score greater than 39, so the answer is 39.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 41. Under these conditions, no sequence has a score greater than 41, so the answer is 41.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 45. Under these conditions, no sequence has a score greater than 45, so the answer is 45.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 49. Under these conditions, no sequence has a score greater than 49, so the answer is 49.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 51. Under these conditions, no sequence has a score greater than 51, so the answer is 51.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 55. Under these conditions, no sequence has a score greater than 55, so the answer is 55.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 57. Under these conditions, no sequence has a score greater than 57, so the answer is 57.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 59. Under these conditions, no sequence has a score greater than 59, so the answer is 59.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 61. Under these conditions, no sequence has a score greater than 61, so the answer is 61.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 65. Under these conditions, no sequence has a score greater than 65, so the answer is 65.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 69. Under these conditions, no sequence has a score greater than 69, so the answer is 69.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 71. Under these conditions, no sequence has a score greater than 71, so the answer is 71.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 75. Under these conditions, no sequence has a score greater than 75, so the answer is 75.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 79. Under these conditions, no sequence has a score greater than 79, so the answer is 79.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 81. Under these conditions, no sequence has a score greater than 81, so the answer is 81.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 85. Under these conditions, no sequence has a score greater than 85, so the answer is 85.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 89. Under these conditions, no sequence has a score greater than 89, so the answer is 89.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 91. Under these conditions, no sequence has a score greater than 91, so the answer is 91.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 95. Under these conditions, no sequence has a score greater than 95, so the answer is 95.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 99. Under these conditions, no sequence has a score greater than 99, so the answer is 99.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 101. Under these conditions, no sequence has a score greater than 101, so the answer is 101.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 105. Under these conditions, no sequence has a score greater than 105, so the answer is 105.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 109. Under these conditions, no sequence has a score greater than 109, so the answer is 109.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 111. Under these conditions, no sequence has a score greater than 111, so the answer is 111.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 115. Under these conditions, no sequence has a score greater than 115, so the answer is 115.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 119. Under these conditions, no sequence has a score greater than 119, so the answer is 119.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 121. Under these conditions, no sequence has a score greater than 121, so the answer is 121.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 125. Under these conditions, no sequence has a score greater than 125, so the answer is 125.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 129. Under these conditions, no sequence has a score greater than 129, so the answer is 129.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 131. Under these conditions, no sequence has a score greater than 131, so the answer is 131.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 135. Under these conditions, no sequence has a score greater than 135, so the answer is 135.\n\nWhen A = \\{1, 2, 3, 4, 5\\}, its score is 139. Under these conditions, no sequence has a score greater"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin=\"3 4 3\"\n) == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 110, \"Failed\"\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 131 132 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 169 170 171 171 172 173 174 175 176 178 179 180 182 183 184 185 186 187 188 189 190 191 190 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 219 220 221 222 223 224 225 226 227 228 229 229 230 231 231 232 233 234 235 236 237 238 238 239 240 240 241 242 243 244 245 245 246 247 248 249 250 251 252 253 254 255 255 256 257 258 259 259 260 261 261 262 263 264 265 266 267 268 269 270 271 270 272 271 273 274 275 275 277 276 278 279 280 281 282 283 284 285 286 287 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 303 304 305 306 308 308 309 310 311 310 312 313 314 315 316 317 318 319 320 320 321 321 322 323 324 325 326 327 328 329 330 330 331 332 332 333 333 334 333 334 334 335 336 337 337 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3 4 3\", \"1 3 3\", \"1 2 2\", \"2 3 2\", \"2 2 3\", \"3 3 2\", \"3 2 2\", \"3 1 3\", \"4 3 2\"]) == \"110\"\nassert solution([\"1\", \"3\", \"4\", \"3\", \"1\", \"1\", \"1\", \"1\", \"2\", \"1\"]) == \"110\"\nassert solution([\"2\", \"3\", \"2\", \"3\", \"3\", \"2\", \"2\", \"1\", \"2\", \"1\"]) == \"110\"\nassert solution([\"3\", \"3\", \"2\", \"3\", \"2\", \"1\", \"1\", \"1\", \"2\", \"1\"]) == \"110\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 5"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('aabbaccc') == 'b'\nassert solution('ababcdcdababcdcd') == 'd'\nassert solution('ababcdcdabcdcdab') == 'c'\nassert solution('abcabcabcabcabc') == 'a'\nassert solution('abcabcabcabcabcd') == 'b'\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 7, \"Solution Failed\"\n\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0,0) == 0\nassert solution(1,0) == 0\nassert solution(2,1) == 1\nassert solution(2,2) == 1\nassert solution(1,1) == 4\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 4 6 3') == 5\nassert solution('4 6 3') == 5\nassert solution('1 4 5') == 5\nassert solution('2 4 6 3') == 5\nassert solution('2 4 6 4') == 5\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 5\n\n------IMPORTANT------\nDo not use any built-in function or library.\nIf you want to use another library, please send your message to me.\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '5'\nassert solution(input) == '1'\nassert solution(input) == '1'\nassert solution(input) == '3'\nassert solution(input) == '2'\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == '5'\nassert solution(inp) == '3'\nassert solution(inp) == '0'\nassert solution(inp) == '1'\nassert solution(inp) == '1'\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '5'\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution(stderr)\n) == \"5\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2.276142\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == '2.276142...'\n\"\"\"\nfrom heapq import *\n\nN = int(input())\nh = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    h.append((x, y))\n    heappush(h, (abs(x-y), x, y))\nans = 0\nfor i in range(N):\n    x, y = h[0]\n    c = 0\n    for i in range(1, N):\n        if h[i][2] < y:\n            c += 1\n        elif h[i][2] == y:\n            c += 1\n            if x < h[i][0] < h[i+1][0]:\n                c += 1\n            elif h[i][0] > h[i+1][0]:\n                c -= 1\n            if y < h[i][1] < h[i+1][1]:\n                c += 1\n            elif h[i][1] > h[i+1][1]:\n                c -= 1\n    ans += min(c, N-c)\nprint(ans/N)\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0\\n0 1 0\\n0 0 1\") == \"2.2761423749\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2.276142...\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"2.2761423749\"\nassert solution(input) == \"2.276142\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2.276142\"\nassert solution(input) == \"2.276142\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2.276142...\n\n-----Sample Input-----\n3\n1 1 1\n1 1 1\n2 1 2\n2 2 2\n3 1 2\n3 1 1\n\n-----Sample Output-----\n2.276142...\n\nThere are two paths to visit the towns: 1 \u2192 2 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 3 \u2192 2 \u2192 1"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2.2761423749\"\nassert solution(input().rstrip()) == \"2.276142...\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '2.2761423749'\n\"\"\""
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2.276142...\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2.276142...\"\nassert solution(\"5\") == \"2.276142...\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(a) == b\nassert solution(b) == c\nassert solution(c) == d\nassert solution(d) == e\nassert solution(e) == f\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['2','5','2']) == '5'\nassert solution(['5','5','5','5','5']) == '1'\nassert solution(['5','5','5','5','5']) == '2'\nassert solution(['2','2','2','2']) == '2'\nassert solution(['3','1','2']) == '4'\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '0'\nassert solution('4') == '3'\nassert solution('5') == '0'\nassert solution('6') == '3'\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4\n\n-----Sample Output-----\nTest cases\nSample Input\n2\n2\n3\nSample Output\n2\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        A, B = map(int, stdin.split())\n        if (A % B!= 0):\n            return 0\n        print(A % B)\n        return A % B"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"2\",\"1\",\"2\",\"1\",\"2\",\"2\"]) == \"5\"\nassert solution([\"3\",\"4\",\"3\",\"1\",\"3\",\"1\",\"2\",\"2\",\"1\",\"1\",\"4\",\"4\",\"2\"]) == \"10\"\nassert solution([\"2\",\"1\",\"2\",\"1\",\"2\",\"2\"]) == \"10\"\nassert solution([\"1\",\"2\",\"1\",\"1\",\"1\",\"1\"]) == \"8\"\nassert solution([\"1\",\"2\",\"1\",\"2\",\"1\",\"2\"]) == \"8\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(test) == \"8\"\ntest = \"a\"\nassert solution(stdin) == \"4\"\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0,0,5,4) == 4\nassert solution(1,1,1,1) == 4\nassert solution(1,2,1,2) == 5\nassert solution(1,3,1,3) == 6\nassert solution(2,2,2,2) == 7\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"4\"\n\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"3\""
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('') == '', \"Empty string\"\nassert solution(\"3\") == '', \"Only integer number\"\nassert solution(\"4\") == '', \"Only integer number\"\nassert solution(\"1\") == '1', \"Only integer number\"\nassert solution(\"99\") == '99', \"Only integer number\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"100\") == \"1\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"F(A,B) has a minimum value of 3 at (A,B)=(100,100).\\nF(A,B) should be (100,100).\\n\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(f) == \"3\"\nassert solution(f) == \"3\"\nassert solution(f) == \"3\"\nassert solution(f) == \"3\"\nassert solution(f) == \"3\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5') == '0'\nassert solution('7') == '0'\nassert solution('9') == '0'\nassert solution('1111') == '0'\nassert solution('10000') == '1'\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\")(\") == 3\nassert solution(\")()\") == 1\nassert solution(\"))(\") == 2\nassert solution(\")(\") == 2\nassert solution(\")()(\") == 1\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\n\"\"\"\nimport collections\nimport sys\n\nN, M = map(int, input().split())\nK = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nc = collections.Counter(A)\n\nprint(c.most_common(len(K))[-1][1])"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"1\""
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"3 1\"\n\n\n-----Sample Input-----\n2 5\n3 2 1\n3 3 2\n2 2 2 3\n3 3 3 3\n2 3 3\n\n-----Sample Output-----\n2\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"1\"\nprint(\"Success\")\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"1\"\nassert solution(\"2 1 3\") == \"1\"\nassert solution(\"2 3 2 3\") == \"2\"\nassert solution(\"2 3 2\") == \"2\"\nassert solution(\"2 3\") == \"1\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 4\"), \"1\"\nassert solution(\"2 1 3\"), \"2\"\nassert solution(\"3 1 2 3\"), \"3\"\nassert solution(\"2 3 2\"), \"2\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"3 4\"\n) == \"1\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"1\"\nassert solution(\"2 1 3\") == \"1\"\nassert solution(\"3 1 2 3\") == \"2\"\nassert solution(\"2 3 2\") == \"1\"\nassert solution(\"2 3\") == \"1\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '3 4'\nassert solution(inp) == '1 2 3'\nassert solution(inp) == '1 3'\n\n-----Sample Output-----\n0\n\"\"\""
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1\", \"3\", \"2\"]) == \"0.25\"\nassert solution([\"1\", \"2\"]) == \"0\"\nassert solution([\"1\", \"4\", \"2\"]) == \"0.75\"\nassert solution([\"1\", \"2\", \"3\", \"4\"]) == \"0.5\"\nassert solution([\"1\", \"3\", \"4\", \"2\", \"3\"]) == \"1\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"0.5\"\nassert solution(input) == \"1.0\"\nassert solution(input) == \"1.5\"\nassert solution(input) == \"0.25\"\nassert solution(input) == \"0.5\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['1', '2', '3', '4']) == '0.5'\nassert solution(['3', '1', '4', '2']) == '0.5'\nassert solution(['1', '3', '4', '5']) == '1.5'\nassert solution(['5', '3', '5', '4']) == '0.5'\nassert solution(['10', '2', '10']) == '1.5'\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4\") == str(0.5)\nassert solution(\"5\") == str(0.5)\nassert solution(\"6\") == str(0.5)\nassert solution(\"7\") == str(0.5)\nassert solution(\"8\") == str(0.5)\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0) == \"0\"\nassert solution(1) == \"0.5\"\nassert solution(2) == \"0.333333333333333333333333333333\"\nassert solution(3) == \"0.3333333333333333333333333333333\"\nassert solution(4) == \"0.25\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(int(input())) == \"0.5\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['4']) == '0.5'\nassert solution(['1']) == '0'\nassert solution(['3']) == '1'\nassert solution(['4']) == '0.5'\nassert solution(['2']) == '1'\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 0.5\nassert solution(3) == 0.5\nassert solution(4) == 0.25\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"5\") == \"0.5\"\nassert solution(\n
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 0.5\nassert solution(2) == 0.666666666666666666667\nassert solution(3) == 0.75\nassert solution(4) == 0.5\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"N1\") == 2\n\nassert solution(\"A1\") == 1\n\nassert solution(\"A2\") == 1\n\nassert solution(\"A3\") == 1\n\nassert solution(\"1A1\") == 2"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(sample_input) == 11\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n\nhttps://www.geeksforgeeks.org/two-lists-divisible-by-k-using-the-built-in-python-numbers-list/"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([]), 0\nassert solution([\"A1\"]), 1\nassert solution([\"A2\",\"A3\"]), 2\nassert solution([\"A1\",\"A2\",\"A3\"]), 3\nassert solution([\"A1\",\"A2\",\"A3\",\"A4\"]), 3\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3' == '2') == '2'\nassert solution('3') == '2'\nassert solution('3 1') == '2'\nassert solution('3 1 1') == '3'\nassert solution('3 1 2') == '3'\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(sample_input()) == \"2\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\", \"2\", \"1\", \"1\", \"1\", \"1\", \"2\", \"1\"]) == \"2\"\nassert solution([\"2\", \"1\", \"1\", \"1\", \"1\", \"2\", \"1\", \"1\"]) == \"2\"\nassert solution([\"1\", \"2\", \"1\", \"1\", \"1\", \"1\", \"2\", \"1\"]) == \"2\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"nikoandsolstice\", \"nikoand...\"]) == \"nikoand...\"\nassert solution([\"nikoandsolstice\", \"nikoand...\", \"nikoandsolstice\"]) == \"nikoand...\"\nassert solution([\"nikoandsolstice\", \"nikoand...\", \"nikoandsolstice\", \"nikoand...\"]) == \"nikoand...\"\nassert solution([\"nikoandsolstice\", \"nikoand...\", \"nikoandsolstice\", \"nikoand...\", \"nikoand...\"]) == \"nikoand...\"\nassert solution([\"nikoandsolstice\", \"nikoand...\", \"nikoandsolstice\", \"nikoand...\", \"nikoand...\", \"nikoand...\"]) == \"nikoand...\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"nikoand... \"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"nikoand...nikoand\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...SIcElEstHNcDqWOoL\"\nassert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"nikoandsolstice\") == \"nikoand...\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(7) == \"nikoand...\"\n\nTest Example 1\nInput\n\nK = 6\nS = \"nikoandsolstice\"\n\nOutput\n\n\"nikoand...\n\nTest Example 2\nInput\n\nK = 10\nS = \"nikoansolstice\"\n\nOutput\n\n\"nikoand...\"\n\nTest Example 3\nInput\n\nK = 1000\nS = \"nikoansolstices\"\n\nOutput\n\n\"nikoand...\"\n\"\"\"\nclass Solution:\n    def getString(self, len: int, s: str, k: int) -> str:\n        result = \"\"\n        \n        for i in range(k):\n            result = s[i:len] + result\n        return result"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'nikoand...', \"First character of solution should be 'nikoand...'\""
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\", \"solution() should return nikoand..., but returned {}\".format(solution(\"nikoandsolstice\"))\nassert solution(\"nkod\") == \"nkod\", \"solution() should return nkod, but returned {}\".format(solution(\"nkod\"))\nassert solution(\"\") == \"\", \"solution() should return an empty string, but returned {}\".format(solution(\"\"))\nassert solution(\"a\") == \"a\", \"solution() should return a, but returned {}\".format(solution(\"a\"))\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...nikoand...nikoand....\"\nassert solution(\"nikoandsolstice\") == \"nikoand...nikoand...\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(7) == \"nikoand...\""
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n\"1abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n) == \"1234\"\n\nassert solution(\n\"nikoandsolstice\") == \"niko\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"apple\") == \"apples\", \"solution('apple')\"\nassert solution(\"apples\") == \"apples\", \"solution('apples')\"\nassert solution(\"apples\") == \"apples\", \"solution('apples')\"\nassert solution(\"apples\") == \"apples\", \"solution('apples')\"\nassert solution(\"apples\") == \"apples\", \"solution('apples')\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"appl\") == \"apples\"\nassert solution(\"ap\") == \"apples\"\nassert solution(\"o\") == \"apples\"\nassert solution(\"oost\") == \"apples\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 'apples'\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"apple\") == \"apples\", \"Expected 'apples' but got 'apple'\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"app\") == \"apples\"\nassert solution(\"appell\") == \"apples\"\nassert solution(\"appella\") == \"apples\"\nassert solution(\"apple\") == \"apples\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"app\") == \"apples\"\nassert solution(\"apple\") == \"apples\"\nassert solution(\"app\") == \"apples\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"apples\"\n\n-----Explanation-----\nIn the sample input, the words are \"apples\" and \"apples\" ends with \"e\".\nThus, the plural form of a Taknese word is \"apples\".\nIn the sample output, \"apples\" and \"apples\" end with \"es\".\n\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\\\"apple\\\") == \\\"apples\\\"\nassert solution(\\\"applesapple\\\") == \\\"applesapple\\\"\nassert solution(\\\"applesapplesap\\\") == \\\"applesapplesap\\\"\nassert solution(\\\"apple\\\") == \\\"apples\\\"\nassert solution(\\\"apple\\sapple\\\") == \\\"apples\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('apple') == 'apples'\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'apples'\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\n\"\"\"\nimport sys\ninput = sys.stdin.readline\n\nN, K, d_1, A_1, d_2, A_2, d_3, A_3 = map(int, input().rstrip().split())"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 2') == '1'\nassert solution('2 3') == '3'\nassert solution('3 2') == '1'\nassert solution('3 2') == '1'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\\n\") == \"1\"\nassert solution(\"3\\n2\\n3\\n1\\n\") == \"1\"\nassert solution(\"2\\n3\\n\") == \"1\"\nassert solution(\"1\\n3\\n\") == \"1\"\nassert solution(\"1\\n3\\n3\") == \"1\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"6 6\") == \"3\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"1\"\nprint('\\nTest:')\nassert solution(\"3 2\") == \"1\"\nprint('Passed!')\n\n'''\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\n\n-----Sample Output-----\nOutput:\nOutput:\n1\n'''"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"1\"\n\n-----My Answer-----\n5"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 4\") == \"0\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"3 4\") == \"0\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5,\n          [\"aa\", \"bb\", \"bb\", \"b\", \"a\"]) == 5\nassert solution(5,\n          [\"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]) == 5\nassert solution(5,\n          [\"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"]) == 5\nassert solution(10,\n          [\"aabbbbaaab\", \"babaababaa\", \"abaabaaabaa\", \"baabaabaaab\"]) == 7\nassert solution(10,\n          [\"aabbbbaaab\", \"babaababaa\", \"abaabaaabaa\", \"baabaabaaab\", \"baabaabaaab\"]) == 7\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\nassert solution(\"abbba\") == \"4\"\n\nassert solution(\"ab\") == \"2\"\n\nassert solution(\"aaa\") == \"2\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 5"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('aabbbbaaca') == '5'"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"aabbbbaaca\"]) == 5\nassert solution([\"ababaaab\", \"aabbbbaaca\"]) == 3\nassert solution([\"ababaaab\", \"aabbbbaac\", \"aabbbbaaca\"]) == 4\nassert solution([\"abab\", \"a\", \"abab\"]) == 1\nassert solution([\"abab\", \"a\", \"abaaab\"]) == 3\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"5\"\n'''\n\nN = int(input())\n\nS = list(input())"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(solution) == 5, \"Not possible\"\n\n\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"aabbba\") == \"5\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n'''\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 5\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5 2 4\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"6 2 4 3\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"7,8,9\") == \"6\"\nassert solution(\"1,1,1\") == \"1\"\nassert solution(\"1,1,2,2\") == \"4\"\nassert solution(\"1,2,3,3\") == \"3\"\nassert solution(\"1,2,3,4\") == \"7\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\n\nTime complexity: O(NlogN)\nSpace Complexity: O(N)\n\n'''"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5 2 4') == 3\nassert solution('5 2 4') == 3\nassert solution('5 2 4') == 3\nassert solution('5 2 4') == 3\nassert solution('5 2 4') == 3\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 2 4 5 6 7 8 9\") == \"3\"\nassert solution(\n    \"2 3 4 5 6 7 8 9\") == \"6\"\nassert solution(\n    \"5 2 4 7 6 8 9\") == \"1\"\nassert solution(\n    \"6 2 4 5 7 8 9\") == \"1\"\nassert solution(\n    \"7 2 4 5 6 8 9\") == \"3\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 2 4') == '3'\nassert solution('5 4 2') == '3'\nassert solution('5 7 3') == '3'\nassert solution('5 1 4') == '4'\nassert solution('5 6 4') == '3'\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"8\"\nassert solution(inp) == \"25\"\nassert solution(inp) == \"30\"\nassert solution(inp) == \"35\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\n\n---Time complexity---\nBest: O(N^2)\nAverage: O(N^2)\nWorst: O(N^2)\n\n---Space Complexity---\nBest: O(1)\nAverage: O(N)\nWorst: O(N)\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"1\"\nassert solution(input) == \"0\""
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nExplanation\nIn this case, the maximum possible sum of the numbers written on the cards is 2, which is the answer.\n\n'''\n\nclass Solution:\n    def maxSum(self, A, B, C, K):\n        def count_to_zero(n):\n            count = 0\n            while n:\n                count += 1\n                n &= n - 1\n            return count\n\n        # A\n        n = 0\n        for i in A:\n            if i == 0:\n                continue\n            else:\n                n += count_to_zero(i)\n        return n + C + B + K\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 0 0 0 0') == '2'\nassert solution('2 1 1 3') == '2'\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"11121110\") == 2\nassert solution(\"10\") == 2\nassert solution(\"10\") == 1\nassert solution(\"10\") == 1\nassert solution(\"10\") == 0\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"6 5 4\") == \"11\"\nassert solution(\"9 3 6\") == \"50\"\nassert solution(\"1 2 3 4\") == \"0\"\nassert solution(\"1 3 2\") == \"1\"\nassert solution(\"1 4 2 3\") == \"1\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 3\") == \"3\"\nassert solution(\"2 1 1 -1\") == \"0\"\nassert solution(\"2 2 -1 -1\") == \"0\"\nassert solution(\"2 2 1 0\") == \"1\"\nassert solution(\"2 2 2\") == \"1\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    '2 1 1 3'\n) == '2'\nassert solution(\n    '2 1 1 -1'\n) == '2'\nassert solution(\n    '2 1 1 -1'\n) == '2'\nassert solution(\n    '2 1 -1 3'\n) == '3'\nassert solution(\n    '2 1 -1 -1'\n) == '-1'\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"1 1 1 0\") == \"0\"\nassert solution(\"1 0 0 0\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3 1\") == \"5\"\nassert solution(\"5 2 1\") == \"10\"\nassert solution(\"10 4\") == \"10\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"3 4\") == \"10\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\")\\n(\") == \"2\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 1 1 3\"\n) == \"2\"\nassert solution(\n    \"2 5 4\"\n) == \"4\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"4 7\") == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"3\", \"5\", \"4\", \"1\", \"3\"]) == \"Yes\"\nassert solution([\"3\", \"5\", \"1\", \"1\", \"2\", \"3\", \"1\"]) == \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 190 191 192 193 194 195 196 197 198 199 200 201 201 202 203 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 219 220 220 221 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 241 242 243 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 8\"), \"No\"\nassert solution(\"1 2\"), \"No\"\nassert solution(\"2 3\"), \"Yes\"\nassert solution(\"3 4\"), \"No\"\nassert solution(\"3 5\"), \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 1\") == \"Yes\"\nassert solution(\"5 3\") == \"Yes\"\nassert solution(\"5 7\") == \"No\"\nassert solution(\"5 1\") == \"No\"\nassert solution(\"1 2\") == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 'Yes'\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"4\") == \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 8\"), \"there is a combination of numbers of cranes and turtles in which the statement is correct\"\nassert solution(\"4\"), \"there is not a combination of numbers of cranes and turtles in which the statement is correct\"\nassert solution(\"\"), \"there is no combination of numbers of cranes and turtles in which the statement is correct\"\nassert solution
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    input: \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 184 185 186 187 188 189 190 192 192 193 194 195 196 196 197 198 199 200 201 201 202 202 203 204 205 206 207 208 208 209 210 210 211 212 213 214 215 216 217 218 219 219 220 221 222 223 224 225 226 227 228 229 229 230 231 231 232 233 234 235 236 237 238 239 240 241 240 251 252 253 254 255 256 257 259 260 261 261 262 263 265 265 266 267 268 269 270 271 270 271 272 275 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 291 292 293 294 295 295 296 297 298 299 299 300 300 301 301 302 301 303 303 304 305 306 308 309 310 311 310 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 329 330 331 332 333 333 334 334 335 336 337 336 338 339 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(n,m,a,b) == 2\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4\n\n------HINT 1-----\nThis solution is quite straightforward because we have to count the number of visited vertices.\nThe only way we could find it is to use a set to find out which vertices are visited.\n\nWe can use a set to know which vertices are visited, since we will only need to visit one vertex after another vertex.\nWe need to note that we start from vertex 1.\n\nWe need to use the following algorithm:\n1. Create a set of all vertices.\n2. In the set, check whether vertex \"a\" is in the set.\n3. In the set, check whether vertex \"b\" is in the set.\n4. If not, add it to the set.\n5. Check whether vertex \"a\" is in the set and if it is, we move to the next vertex.\n6. If not, we continue to the next vertex.\n7. Check whether vertex \"b\" is in the set and if it is, we move to the next vertex.\n8. If not, we continue to the next vertex.\n9. Check whether vertex \"a\" is in the set and if it is, we move to the next vertex.\n10. If not, we continue to the next vertex.\n11. Check whether vertex \"b\" is in the set and if it is, we move to the next vertex.\n12. If not, we continue to the next vertex.\n\nSOLUTION:\nInstead of creating a set, we could use a set of all vertices and check whether vertex \"a\" is in the set.\nIf it is, we move to the next vertex.\nIf it is not, we continue to the next vertex.\nIf it is, we continue to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is, we continue to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we continue to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex.\nIf it is not, we move to the next vertex"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n\"\"\"\nfrom collections import deque\n\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"2\"\n    \n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\") == 0\nassert solution(\"a\") == 1\nassert solution(\"b\") == 2\nassert solution(\"ab\") == 2\nassert solution(\"abc\") == 2\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 2') == '18'\n\n'''"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"18\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2\"), \"2\"\nassert solution(\"1 1 2\"), \"2\"\nassert solution(\"1 1 3\"), \"1\"\nassert solution(\"1 2 2\"), \"3\"\nassert solution(\"1 1 6\"), \"3\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"18\"\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3+4+5+6=18\""
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 1\") == \"5\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 3 4 5\") == \"6\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 1') == 1\nassert solution('9 1') == 1\nassert solution('4 2') == 4\nassert solution('9 2') == 9\nassert solution('3 4') == 6\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"2\", \"3\", \"4\", \"5\", \"2\"]) == \"18\"\nassert solution([\"6\", \"7\", \"8\", \"9\", \"6\", \"7\"]) == \"13\"\nassert solution([\"4\", \"2\", \"5\"]) == \"13\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"18\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2') == '18'\nassert solution('1 2 3 4 5 6') == '18'\nassert solution('1 3') == '18'\nassert solution('1 3 4') == '18'\nassert solution('1 3 4 6') == '18'\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"60\"\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 60, \"stdout: \\n%s\" % input()\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"15\") == \"60\"\nassert solution(\n    \"1\") == \"1\"\nassert solution(\n    \"2\") == \"2\"\nassert solution(\n    \"3\") == \"3\"\nassert solution(\n    \"4\") == \"4\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == \"60\"\nassert solution(5) == \"52\"\nassert solution(15) == \"14\"\n\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('15') == '60'\nassert solution('15') == '85'\nassert solution('15') == '95'\nassert solution('15') == '1'\nassert solution('15') == '1'\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"15\") == 60\nassert solution(\"5\") == 11\nassert solution(\"2\") == 4\nassert solution(\"3\") == 2\nassert solution(\"0\") == 1\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == 60\n'''"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 60\n'''\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\")\") == \"60\"\nassert solution(\"(\") == \"14\"\nassert solution(\"(()\") == \"14\"\nassert solution(\"((()\") == \"28\"\nassert solution(\"((()((((((()()()()()()((()())()()()()()()(()()()()()(())()()())()()()()()()()()()()()())()()()()())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5) == 60, \"The sum of all numbers among the first N terms of the FizzBuzz sequence is 60\"\nassert solution(10) == 60, \"The sum of all numbers among the first N terms of the FizzBuzz sequence is 60\"\nassert solution(15) == 60, \"The sum of all numbers among the first N terms of the FizzBuzz sequence is 60\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\n\"\"\"\nclass Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        res = []\n        i = 0\n        for j in range(len(nums2)-1):\n            while i < len(nums1) and nums2[j] > nums1[i]:\n                i += 1\n            res.append(nums1[i])\n            i += 1\n        return res"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 7 10 6 5\") == 8\nassert solution(\"4 7 10 6 3 5\") == 8\nassert solution(\"5 7 10 5\") == 5\nassert solution(\"5 7 10 6 3 5\") == 5\nassert solution(\"3 5 5 6 7\") == 5\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5 6') == '8'\nassert solution('5 3') == '5'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n        \"1 2 3 4 5 6\"\n        ) == \"5\"\nassert solution(\n        \"1 2 4\"\n        ) == \"5\"\nassert solution(\n        \"1 2 4 3 5 6\"\n        ) == \"3\"\nassert solution(\n        \"1 2 5\"\n        ) == \"5\"\nassert solution(\n        \"1 2 6 4 5 8\"\n        ) == \"6\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(6,4,5,7,10,6,5,7,10) == 8\nassert solution(3,4,5,6,7,8,9,10) == 8\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\", \"2\", \"3\"]) == \"1\"\nassert solution([\"4\", \"5\", \"6\"]) == \"6\"\nassert solution([\"1\", \"3\", \"5\", \"7\", \"9\", \"10\"]) == \"3\"\nassert solution([\"4\", \"1\"]) == \"1\"\nassert solution([\"1\"]) == \"1\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2 3 4') == '2'\nassert solution('1 2 3 4 5') == '3'\nassert solution('1 2 3 4 5 6 7 8 9') == '5'\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"8\""
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('4 7 10 6 5') == '8'\nassert solution('4 6 5 7 9 10') == '8'\nassert solution('4 7 5 8 9 10') == '8'\nassert solution('4 6 5 8 9 10') == '6'\nassert solution('4 7 5 8 10') == '6'\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution((\"4\", \"7\", \"10\", \"6\", \"5\", \"15\", \"30\", \"50\", \"60\")) == \"8\"\nassert solution((\"1\", \"4\", \"2\", \"3\", \"2\", \"3\", \"2\", \"3\", \"4\")) == \"4\"\nassert solution((\"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\")) == \"3\"\nassert solution((\"1\", \"1\", \"2\", \"2\", \"3\", \"4\", \"1\", \"4\", \"2\", \"3\")) == \"1\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 2') == '1'\nassert solution('2 1') == '1'\nassert solution('2 1') == '1'\nassert solution('2 1') == '1'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '1'\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 2 3') == '2'\nassert solution('2 2') == '1'\nassert solution('2 2 3') == '2'\nassert solution('2 2 4') == '3'\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(a) == \"1\""
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(INPUT) == \"1\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"2 2 3\") == \"3\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"2 3 4 5\") == \"5\"\nassert solution(\"2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 238 239 240 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 2') == '1'\nassert solution('2 1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 1') == '1'\nassert solution('2 3') == '1'\nassert solution('2 2') == '1'\nassert solution('1 4') == '1'\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 1\n\nNotes\nInput is always valid in the range 1..20 inclusive.\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5\",\"3\",\"4\",\"6\"]) == \"6\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"-1\"\nassert solution([\"2\",\"5\",\"1\",\"4\",\"3\"]) == \"-1\"\nassert solution([\"1\",\"4\",\"2\",\"5\",\"7\",\"8\",\"9\"]) == \"6\"\nassert solution([\"1\",\"2\",\"3\"]) == \"3\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"3 6\"\nassert solution(\"1 2 3 4 1 5\") == \"1 5\"\nassert solution(\"1 2 3 4 5\") == \"-1\"\nassert solution(\"1 2 3 4 3\") == \"5\"\nassert solution(\"1 2 3 4 2\") == \"3\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '-1'\n\"\"\"\n\nclass Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        \n        n = len(nums2)\n        \n        for i in range(n):\n            for j in range(i, n):\n                if nums2[j] < nums1[i]:\n                    nums1[i], nums1[j] = nums1[j], nums1[i]\n                    break\n                \n        return nums1[:n]\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(6)\n\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"7 4\",\n    \"3 7 5 1 10 3 20\"\n) == \"-1\"\nassert solution(\n    \"7\",\n    \"3 7 5 1 10 3 20\"\n) == \"-1\"\nassert solution(\n    \"3 5 4 6 10\",\n
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"7\",\"4\",\"7\",\"5\",\"1\",\"10\",\"3\",\"20\"]) == \"6\"\nassert solution([\"3\",\"2\",\"7\",\"1\",\"10\",\"3\",\"20\"]) == \"-1\"\n\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 10 1 10 3 20\") == \"6\"\nassert solution(\"10 3 2 1 4 10\") == \"1\"\nassert solution(\"20 1 10 3 2 1 4 10\") == \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"7 4\\n3 7 5 1 10 3 20\\n\\n7 2\\n3 7 5 1 10 3 20\\n\\n10 10\\n\\n10 2\\n3 7 5 1 10 3 20\"\n) == \"6\"\n\nassert solution(\n    \"7 4\\n3 7 5 1 10 3 20\\n\\n7 2\\n3 7 5 1 10 3 20\\n\\n10 10\\n\\n10 2\\n3 7 5 1 10 3 20\"\n) == \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '6'\n\nprint('Success')"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '-1'\n\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= k <= 10^9\n0 <= a_i <= 10^9\n\nTime Limit: 10^9 seconds\nSpace Limit: 10^6 characters\n\n-----Advanced-----\nYou can use any possible integer $i$ to identify $a_i$ in the given sequence.\n\ntime limit: 2 seconds\nmemory limit: 1 megabytes\n\n\"\"\""
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3 4 1'\nassert solution(stdin) == '3 5 2'\nassert solution(stdin) == '3 5 1'\nassert solution(stdin) == '3 4 1'\nassert solution(stdin) == '3 4 1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3 4 1'\n\nNote:\n-Input will always be valid.\n-Input and Output will always be valid.\n-Input format:\n\nThe first line contains a single integer $n$, the number of rows of the grid.\n\nThe next $n$ lines contains $m$ characters each, the $i$-th line describes the $i$-th row of the grid.\n\nThe next $m$ lines contains $i$ characters each, the $i$-th line describes the $i$-th column of the grid.\n\nThe next $n$ lines contains $i$ characters each, the $i$-th line describes the $i$-th star in the grid.\n\nOutput\nfor the given grid:\n1 4 2\n3 5 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3 4 1\n3 5 1\n3"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, 5) == 3\nassert solution(5, 5) == -1\nassert solution(5, 5) == 3\nassert solution(5, 5) == 3\nassert solution(5, 5) == 3\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5 5 1\", \"*.*\"]) == \"3 4 1\"\nassert solution([\"5 5\", \"*.*\"]) == \"3 2 1\"\nassert solution([\"5 5\", \"*.*\", \"..*\"]) == \"3 2 1\"\nassert solution([\"5 5\", \"*.*\", \"..*\", \"..*\"]) == \"3 2 1\"\nassert solution([\"5 5\", \"*.*\", \"..*\", \"..*\", \"..*\"]) == \"3 2 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3 4 1\"\nassert solution(stdin) == \"3 5 2\"\nassert solution(stdin) == \"3 5 1\"\n\nInput\n3 3\n*.*\n.*.\n*.*\n\nOutput\n-1\n\n\n\n------Explanation------\n\nIn this example, if we draw the grid with stars 1, 3, and 4 stars, then stars 2, 4, and 5, and 4 and 5 stars will overlap.\n\nIf we draw the grid with stars 1, 2, 3 and 4, then it will be impossible to draw the grid with stars 1, 2, 3 and 4.\n\nIn this example, if we draw the grid with stars 1, 2, 3 and 4, then it will be impossible to draw the grid with stars 1, 2, 3 and 4.\n\nIn this case the stars are not drawn at all.\n\nAs a result, we have no solution.\n\n\n\n\n\n-----Ideas-----\n-1\n1. Copy the array to the left or the right.\n-2. If we have to draw the grid with stars 1, 3, and 4, then we do not have any stars to draw.\n-3. Start from the right side of the grid and visit every square in a star.\n-4. Start from the left side of the grid and visit every square in a star.\n-5. if we have to draw the grid with stars 1, 2, 3 and 4, then we need to draw the grid with stars 1, 2, 3 and 4.\n-6. otherwise we have to draw the grid with stars 1, 2, 3 and 4, so we need to draw the grid with stars 1, 2, 3 and 4.\n-7. Otherwise we have to draw the grid with stars 1, 2, 3 and 4, so we need to draw the grid with stars 1, 2, 3 and 4.\n-8. Otherwise we have to draw the grid with stars 1, 2, 3 and 4, so we need to draw the grid with stars 1, 2, 3 and 4.\n-9. Otherwise we have to draw the grid with stars 1, 2, 3 and 4, so we need to draw the grid with stars 1, 2, 3 and 4.\n\n\n\n\n\n-----Solution-----\n\nIn this problem, we use two arrays to store the first and second squares to represent the grid. The array will be a 3x3 matrix. Each element of the matrix will be the index of the square.\n\nIn the first square, there will be three stars.\n\nIn the second square, there will be three stars.\n\nIn the third square, there will be three stars.\n\nIn the fourth square, there will be three stars.\n\nIn the fifth square, there will be three stars.\n\nIn the sixth square, there will be three stars.\n\nIn the seventh square, there will be three stars.\n\nIn the eighth square, there will be three stars.\n\nIn the ninth square, there will be three stars.\n\nIn the tenth square, there will be three stars.\n\nIn the eleven square, there will be three stars.\n\nIn the 12th square, there will be three stars.\n\nIn the 13th square, there will be three stars.\n\n\n------Marks-----\n\nIn this problem, we have four square grids, where the i-th square of the grid contains stars. You need to find the index of the square that the i-th square contains stars.\n\nThis is the correct answer.\n\nIn the first square, there will be three stars.\nIn the second square, there will be three stars.\nIn the third square, there will be three stars.\nIn the fourth square, there will be three stars.\nIn the fifth square, there will be three stars.\nIn the sixth square, there will be three stars.\nIn the seventh square, there will be three stars.\nIn the eighth square, there will be three stars.\nIn the ninth square, there will be three stars.\nIn the tenth square, there will be three stars.\n\n\n------Original-----\n\nIn this problem, we have four square grids, where the i-th square of the grid contains stars. You need to find the index of the square that the i-th square contains stars.\n\nThis is the correct answer.\n\nIn the first square, there will be three stars.\nIn the second square, there will be three stars.\nIn the third square, there will be three stars.\nIn the fourth square, there will be three stars.\nIn the fifth square, there will be three stars.\nIn the sixth square, there will be three stars.\nIn the seventh square, there will be three stars.\nIn the eighth square, there will be three stars.\nIn the ninth square, there will be three stars.\nIn the tenth square, there will be three stars.\n\n\n------The Answer-----\n\nIn this problem, we have four square grids, where the i-th square of the grid contains stars. You need to find the index of the square that the i-th square contains stars.\n\nThis is the correct answer.\n\nIn the first square, there will be three stars.\nIn the second square, there will be three stars.\nIn the third square, there will be three stars.\nIn the fourth square, there will be three stars.\nIn the fifth square, there will be three stars.\nIn the sixth square, there will be three stars.\nIn the seventh square, there will be three stars.\nIn the eighth square, there will be three stars.\nIn the ninth square, there will be three stars.\nIn the tenth square, there will be three stars.\n\n\n------Second Answer-----\n\nIn this problem, we have four square grids, where the i-th square of the grid contains stars. You need to find the index of the square that the i-th square contains stars.\n\nThis is the correct answer.\n\nIn the first square, there will be three stars.\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"4\", \"*\", \"*\", \"*\", \"*\"]) == \"*\"\nassert solution([\"**\", \"*\", \"*\", \"*\", \"*\"]) == \"*\"\nassert solution([\"*\", \"*\", \"*\", \"*\", \"*\"]) == \"*\"\nassert solution([\"*\", \"*\", \"*\", \"*\", \"*\"]) == \"*\"\nassert solution([\"*\", \"*\", \"*\", \"*\", \"*\"]) == \"*\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == '-1'\nassert solution(\"3 3\") == '0'\nassert solution(\"3 5\") == '1'\nassert solution(\"3 3\") == '0'\nassert solution(\"3 5\") == '1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(6,8) == 3\nassert solution(5,5) == 3\nassert solution(5,5) == -1\nassert solution(5,5) == -1\nassert solution(4,4) == -1\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"3 3 1\"\nassert solution(input) == \"3 5 2\"\nassert solution(input) == \"3 5 1\"\nassert solution(input) == \"-1\"\nassert solution(input) == \"0 1\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n  stdin := input()\n) == 'def solution(s: str) -> str:\n  pass\n\nassert solution(\n  stdin := input()\n) =='solution(good: str) = def solution(s: str) -> str:\n  pass\n\n\n------------------- Part Two -------------------\n\nAfter deleting the minimum number of characters from this string, you might create another string $s$ of this length, and this time you are allowed to delete some characters. Let $n$ be the length of the string $s$, the minimum number of characters you have to delete to make this string good.\n\nIf you delete the minimum number of characters from this string, you should keep the string $s$ intact. For example, if you delete 4 characters, you should keep the string after deleting them 4 characters. If you delete the minimum number of characters from this string, you will leave the string unchanged.\n\nFor example, if you delete 4 characters, you should keep the string after deleting them.\n\nGiven input, the string $s$ is considered good if it's length is even and every character of this string is different from the next character.\n\nFor example, if $s$ is deleted, it should be made by deleting exactly 2 characters and every character should be different from the next character.\n\nGiven input, the string $s$ is considered bad if it's length is odd and every character of this string is different from the next character.\n\nFor example, if $s$ is deleted, it should be made by deleting exactly 1 character and every character should be different from the next character.\n\nGiven input, the string $s$ is considered bad if it's length is equal to or bigger than $10^4$ (including the case of all characters).\n\nFor example, if $s$ is deleted, it should be made by deleting exactly 2 characters and every character should be different from the next character.\n\nGiven input, the string $s$ is considered good if it's length is at most $10^9$ (including the case of all characters).\n\nFor example, if $s$ is deleted, it should be made by deleting all characters and every character should be different from the next character.\n\n\n-----Example 1-----\n\nInput\n3\naabc\nab\nabc\n\nOutput\n2\naabc\n\nInput\n3\na\nabc\nabc\n\nOutput\n1\nab\n\nInput\n3\na\nabc\nabc\nabc\n\nOutput\n0\na\n\nInput\n1\na\n\nOutput\n0\na\n\n------------------\n\n\n------------------- Test Cases -----------------\n\nSample test case:\n\nInput:\n\n2\nab\nabc\n\nOutput:\n\n2\nabc\n\nExplanation:\n\nSample input:\n\n4\naab\nabb\nabca\n\nSample output:\n\n2\naa\n\nExplanation:\n\nSample input:\n\n3\nab\nabc\nabc\n\nSample output:\n\n1\naab\n\nExplanation:\n\nSample input:\n\n2\na\n\nSample output:\n\n1\na\n\nExplanation:\n\nSample input:\n\n3\nab\nabc\nabc\n\nSample output:\n\n2\na\nb\nc\nSample input:\n\n5\naabc\nabcabc\nabcabc\nabcabc\n\nSample output:\n\n2\na\nb\na\nc\n\n-----------------------------\n\n\n------------------- Example 2 -------------------\n\nInput\n3\naab\naba\naba\n\nOutput\n3\nab\n\nSample Input:\n\n5\naab\nabca\nabcd\n\nSample Output:\n\n3\nabc\nabca\nabcd\n\nSample Input:\n\n1\nabc\n\nSample Output:\n\n1\nab\n\n-----------------------------\n\n\n----------------------------- Example 3 -----------------------------\n\nInput\n3\nab\nac\na\n\nOutput\n2\na\n\nSample Input:\n\n2\nab\nac\na\n\nOutput\n0\na\n\n-----------------------------\n\n\n----------------------------- Example 4 -----------------------------\n\nInput\n3\nabc\nbca\ncba\n\nOutput\n3\nabc\nbca\ncba\n\nSample Input:\n\n1\nabc\n\nSample Output:\n\n2\nabc\n\n-----------------------------\n\n\n----------------------------- Example 5 -----------------------------\n\nInput\n3\naabc\na\nb\na\n\nOutput\n2\nab\na\n\n-----------------------------\n\n\n----------------------------- Example 6 -----------------------------\n\nInput\n3\nabc\na\nb\na\n\nOutput\n1\na\nb\na\n\n-----------------------------\n\n\n----------------------------- Example 7 -----------------------------\n\nInput\n3\naabc\na\nb\na\n\nOutput\n0\na\n\n-----------------------------\n\n\n----------------------------- Example 8 -----------------------------\n\nInput\n3\naabc\na\nb\na\n\nOutput\n0\na\nb\na\n\n-----------------------------\n\n\n----------------------------- Example 9 -----------------------------\n\nInput\n2\naab\naab\na\n\nOutput\n0\na\n\n-----------------------------\n\n\n----------------------------- Example 10 -----------------------------\n\nInput\n1\na\n\nOutput\n0\na\n\n-----------------------------\n\n\n----------------------------- Example 11 -----------------------------\n\nInput\n1\na\n\nOutput\n0\na\n\n-----------------------------\n\n\n----------------------------- Example 12 -----------------------------\n\nInput\n1\nabc\na\n\nOutput\n0\na\n\n-----------------------------\n\n\n----------------------------- Example 13 -----------------------------\n\nInput\n1\na\na\na\na\na\n\nOutput\n0\na\na\na\na\n\n-----------------------------\n\n\n----------------------------- Example 14 -----------------------------\n\nInput\n1\nab\na\na\na\n\nOutput\n0\na\n\n-----------------------------\n\n\n----------------------------- Example 15 -----------------------------\n\nInput\n1\naab\na\na\na\na\na\na\na\n\nOutput\n2\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 0\nassert solution(input()) == 1\nassert solution(input()) == 2\nassert solution(input()) == 3\nassert solution(input()) == 4\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nlist_str = sys.stdin.readline().strip()\n\nstr_list = list(set(list_str))\n\nanswer = len(list_str) - len(str_list)\n\nfor i in range(1, len(str_list)):\n    if list_str[i] == list_str[i - 1]:\n        answer -= 1\n\nprint(answer)\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(4) == 0\nassert solution(4) == 1\nassert solution(3) == 3\nassert solution(4) == 2\nassert solution(3) == 1\n\n\n-----Constraints-----\n1 <= n <= 10^5\nstdin.length <= n\ns.length <= 10^5\ns[i] is a lowercase Latin letter\ns is an even length string\ns is a string with odd number of lowercase letters\ns.length <= 10^5\n\"\"\"\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        def isPalindrome(s):\n            if len(s) == 0: return False\n            if s[0]!= s[-1]: return False\n            i = 0\n            j = 0\n            while i < len(s) and j < len(s):\n                if s[i] == s[j]:\n                    i += 1\n                    j += 1\n                    continue\n                else:\n                    return False\n            return True\n\n        n = len(s)\n        if n == 0: return 0\n        if n == 1:\n            return 1\n        max_len = 0\n        freq = {}\n        for i in range(n):\n            if s[i] in freq:\n                freq[s[i]] += 1\n            else:\n                freq[s[i]] = 1\n        res = 0\n        for i in range(n):\n            if s[i] in freq and freq[s[i]] > 0:\n                if res == 0 or freq[s[i]] < freq[s[i - 1]]:\n                    res = freq[s[i]]\n                else:\n                    res += freq[s[i]]\n        return res"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 'good'\nassert solution(input()) == 'good'\nassert solution(input()) == 'good'\nassert solution(input()) == 'good'\nassert solution(input()) == 'good'\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('good') == 'good'\nassert solution('abc') == 'abc'\nassert solution('aaa') == 'def'\nassert solution('good') == 'good'\nassert solution('def') == 'def'\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == \"abc\"\nassert solution(10) == \"abcd\"\nassert solution(0) == \"\"\nassert solution(1) == \"a\"\nassert solution(\"abc\") == \"bad\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    inp := input()\n)\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 0\nassert solution(input('7')) == 0\nassert solution('7') == '7'\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\n\"\"\"\n    # BFS \ud574\uacb0\ubc29\ubc95\n    import sys\n    from collections import deque\n    from itertools import combinations\n    n, m = map(int, stdin.split())\n    graph = []\n    for i in range(n):\n        graph.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(m):\n            if graph[i][j] == 1:\n                graph[i][j] = graph[j][i]\n                graph[j][i] = 0\n    \n    # BFS \ud574\uacb0\n    def bfs(x):\n        q = deque()\n        q.append(x)\n        visited = [x]\n        while q:\n            x = q.popleft()\n            print(x, end=' ')\n            if x == 0:\n                return\n            for i in graph[x]:\n                if i not in visited:\n                    q.append(i)\n                    visited.append(i)\n        print()\n    \n    # BFS \ud1b5\uacfc \ud6c4, \uc774\uc804\uc5d0 visited\uc774 \uc0c8\ub85c\uc6b4 \uc0c1\uc790\uc774\uba74\uc11c \uac19\uc740 \uc218\ub97c \ubaa8\ub450 \ud0d0\uc0c9\ud558\ub294 \uac83\uc774 \ubaa9\uc801\n    def BFS(x):\n        count = 0\n        visited = []\n        while x not in visited:\n            x = graph[x][0]\n            visited.append(x)\n            for i in graph[x]:\n                if i in visited:\n                    continue\n                if x == 0:\n                    return count\n                count += 1\n                BFS(i)\n    \n    print(BFS(0))\n    \n    \n    # BFS \ud1b5\uacfc \ud6c4, \uc774\uc804\uc5d0 visited\uc774 \uc0c8\ub85c\uc6b4 \uc0c1\uc790\uc774\uba74\uc11c \uac19\uc740 \uc218\ub97c \ubaa8\ub450 \ud0d0\uc0c9\ud558\ub294 \uac83\uc774 \ubaa9\uc801\n    # \uc774\uc804\uc774\ub77c\ub3c4 \ud0d0\uc0c9 \uac00\ub2a5\ud55c\uc9c0 \ubaa8\ub450 \ud0d0\uc0c9 \ud574\ubcf4\uba74 \uc548\ub418\ubbc0\ub85c, \uac00\uc7a5 \uc774\uc804\uc5d0 \uc9c1\uc811 \ud0d0\uc0c9\uc744 \ud574\ubd10\uc57c \ud568\n    # \uadf8\ub798\uc11c \ud30c\uc545\ud558\uba74 \ub41c\ub2e4.\n    # \ud30c\uc545\ud560 \uc218 \uc788\ub294 \uc218\uac00 \uc5ec\ub7ec\uac1c\ub77c\uba74, \uac01 \uc218\ub97c \ud30c\uc545\ud558\uba74 \ub41c\ub2e4.\n    def BFS(x):\n        count = 0\n        visited = []\n        while x not in visited:\n            x = graph[x][0]\n            visited.append(x)\n            for i in graph[x]:\n                if i in visited:\n                    continue\n                if x == 0:\n                    return count\n                BFS(i)\n                count += 1\n    \n    print(BFS(0))\n    \n    \n    # BFS \ud1b5\uacfc \ud6c4, \uc774\uc804\uc5d0 visited\uc774 \uc0c8\ub85c\uc6b4 \uc0c1\uc790\uc774\uba74\uc11c \uac19\uc740 \uc218\ub97c \ubaa8\ub450 \ud0d0\uc0c9\ud558\ub294 \uac83\uc774 \ubaa9\uc801\n    # \uc774\uc804\uc774\ub77c\ub3c4 \ud0d0\uc0c9 \uac00\ub2a5\ud55c\uc9c0 \ubaa8\ub450 \ud0d0\uc0c9 \ud574\ubcf4\uba74 \uc548\ub418\ubbc0\ub85c, \uac00\uc7a5 \uc774\uc804\uc5d0 \uc9c1\uc811 \ud0d0\uc0c9\uc744 \ud574\ubd10\uc57c \ud568\n    # \uadf8\ub798\uc11c \ud30c\uc545\ud558\uba74 \ub41c\ub2e4.\n    # \ud30c\uc545\ud560 \uc218 \uc788\ub294 \uc218\uac00 \uc5ec\ub7ec\uac1c\ub77c\uba74, \uac01 \uc218\ub97c \ud30c\uc545\ud558\uba74 \ub41c\ub2e4.\n    def BFS(x):\n        count = 0\n        visited = []\n        while x not in visited:\n            x = graph[x][0]\n            visited.append(x)\n            for i in graph[x]:\n                if i in visited:\n                    continue\n                if x == 0:\n                    return count\n                BFS(i)\n                count += 1\n    \n    print(BFS(0))\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"YES\"\n\n\n------Examples------\nInput\n3 5\n1 5\n1 4\n3 1\n6 1\n\nOutput\nYES\n10101\n\n\n------Example------\nInput\n3 6\n1 4\n2 3\n2 1\n3 1\n6 1\n\nOutput\nYES\n101100\n\n\n------Expected output------\nOutput\nYES\n10101\n10111\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^4\n1 <= m <= 10^5\n\n\n-----Time Limit (Cached)-----\nComplexity: Time O(n * m); Space O(1)\n\n----Time---\nTime O(n*m)\n\n----Space---\nTime O(n)\n\n----Description---\nwe need to track the 'direct' edges to calculate the shortest path, \nthat is, we need to find a path that connect all vertices to the vertices and get a directed graph with only one directed edge.\n\nWe need to consider the simple bi-directional graph.\n\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u_i, v_i <= n\nedges[i] = (u_i, v_i)\n0 <= u_i < n and 0 <= v_i < n\n\n------Time Complexity-------\n\nO(N)\n\nO(N * m)\n\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin):\n        pass\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"YES\"\nassert solution(input) == \"NO\"\nassert solution(input) == \"NO\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 2') == '0'\nassert solution('2 1') == '1'\nassert solution('2 0') == '0'\nassert solution('0 0') == '0'\nassert solution('0 1') == '1'\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 7\") == \"3 4\"\nassert solution(\"5 5\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 7\") == \"3 4\"\nassert solution(\"2 2\") == \"1 3\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"5 6\") == \"0\"\nassert solution(\"1 2\") == \"1 1\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"\"\n\nassert solution(stdin) == \"\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"\""
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(0)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(4)\nassert solution(stdin) == str(5)\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\\\"\\\"\\\"\n3 2\n1 2\n5 5\n\n\\\"\\\"\\\")\n\nassert solution(\\\"\\\"\\\"\n1 7\n1 7\n\n\\\"\\\"\\\")\n\nassert solution(\\\"\\\"\\\"\n5 4\n5 3\n5 2\n5 1\n\n\\\"\\\"\\\")\n\nassert solution(\\\"\\\"\\\"\n4 4\n1 3\n2 4\n3 4\n4 4\n\n\\\"\\\"\\\")\n\nassert solution(\\\"\\\"\\\"\n3 5\n1 3\n\n\\\"\\\"\\\")"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 5') == '2', '1'\nassert solution('3 7') == '2 3 4', '0'"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n\n0 <= stdin[i] <= 1000\n\n1 <= l_i < r_i < m\n\n0 <= k <= 100000\n\n\n-----Time complexity-----\n\nO(n log(n+m)) = O(n log(n+m)) = O(n log(n+m)) = O(log(n+m))\n\nO(n) = O(n) = O(n)\n\n\n-----Space complexity-----\n\nO(n)\n\nO(1)\n\n\n-----Submissions-----\n\nTime: 32 ms, faster than 95.59% of Python online submissions for All Points That Don't Belong to Any Segment.\nMemory: 39.5 MB, less than 76.53% of Python online submissions for All Points That Don't Belong to Any Segment.\n\nclass Solution:\n    def __init__(self, n: int, m: int, l_i: int, r_i: int):\n        self.n = n\n        self.m = m\n        self.l_i = l_i\n        self.r_i = r_i\n        self.check = set()\n        self.check.add(l_i)\n        self.check.add(r_i)\n        self.check = sorted(self.check)\n        self.check = list(self.check)\n    def __str__(self):\n        return str(self.check)\n    def print(self):\n        for i in range(len(self.check)):\n            print(self.check[i])\n        return '0'\n    def __len__(self):\n        return len(self.check)\n    def __getitem__(self, index: int):\n        return self.check[index]\n    def __setitem__(self, index: int, value: int):\n        self.check[index] = value\n        self.check = sorted(self.check)\n    def __eq__(self, other):\n        return self.check == other.check\n    def __iter__(self):\n        return iter(self.check)\n    def __contains__(self, item):\n        return item in self.check\n    def __delitem__(self, index: int):\n        del self.check[index]\n    def __add__(self, other):\n        return other.check | self.check\n    def __or__(self, other):\n        return other.check & self.check\n    def __sub__(self, other):\n        return other.check - self.check\n    def __and__(self, other):\n        return self.check & other.check\n    def __xor__(self, other):\n        return self.check ^ other.check\n    def __lt__(self, other):\n        return self.check < other.check\n    def __le__(self, other):\n        return self.check <= other.check\n    def __gt__(self, other):\n        return self.check > other.check\n    def __ge__(self, other):\n        return self.check >= other.check\n    def __iand__(self, other):\n        return self.check & other.check\n    def __ior__(self, other):\n        return self.check | other.check\n    def __isub__(self, other):\n        return self.check -= other.check\n    def __isub__(self, other):\n        return self.check - other.check\n    def __ior__(self, other):\n        return self.check | other.check\n    def __isub__(self, other):\n        return self.check -= other.check\n    def __ixor__(self, other):\n        return self.check ^ other.check\n    def __isub__(self, other):\n        return self.check - other.check\n    def __ior__(self, other):\n        return self.check | other.check\n    def __isub__(self, other):\n        return self.check -= other.check\n    def __invert__(self):\n        return ~self.check\n    def __str__(self):\n        return str(self.check)\n    def __iter__(self):\n        return iter(self.check)\n    def __getitem__(self, index: int):\n        return self.check[index]\n    def __contains__(self, item):\n        return item in self.check\n    def __len__(self):\n        return len(self.check)\n    def __getitem__(self, index: int):\n        return self.check[index]\n    def __setitem__(self, index: int, value: int):\n        self.check[index] = value\n        self.check = sorted(self.check)\n    def __delitem__(self, index: int):\n        del self.check[index]\n    def __add__(self, other):\n        return other.check | self.check\n    def __or__(self, other):\n        return self.check | other.check\n    def __sub__(self, other):\n        return self.check - other.check\n    def __and__(self, other):\n        return self.check & other.check\n    def __xor__(self, other):\n        return self.check ^ other.check\n    def __eq__(self, other):\n        return self.check == other.check\n    def __contains__(self, item):\n        return item in self.check\n    def __and__(self, other):\n        return self.check & other.check\n    def __or__(self, other):\n        return other.check | self.check\n    def __ge__(self, other):\n        return self.check >= other.check\n    def __gt__(self, other):\n        return self.check > other.check\n    def __le__(self, other):\n        return self.check <= other.check\n    def __lt__(self, other):\n        return self.check < other.check\n    def __ne__(self, other):\n        return self.check!= other.check\n    def __contains__(self, item):\n        return item in self.check\n    def __len__(self):\n        return len(self.check)\n    def __"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"1\"\nassert solution(input) == \"0\"\nassert solution(input) == \"3\"\nassert solution(input) == \"4\"\nassert solution(input) == \"5\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 0\n\nTime complexity: O(n^2)\nSpace complexity: O(n^2)\n'''"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\nassert solution(\"4 6 5\") == \"5\"\nassert solution(\"3 2 3 2\") == \"3\"\nassert solution(\"3 3 3 3\") == \"3\"\nassert solution(\"1 2 1\") == \"1\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"7\"\n\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('0') == ''\nassert solution('1') == ''\nassert solution('1') == '1'\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 0\n\nSample Input\n5 5\n5 2 3\n\nSample Output\n0\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"7\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 7"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '2'"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5 and solution(stdin) == 7"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"2\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"7\"\nassert solution(inp) == \"3\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(123456789) == 'Yes'"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == \"Yes\"\nassert solution(2) == \"No\"\nassert solution(123456789) == \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"123456789\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"12345678910\") == \"No\"\nassert solution(\"12345678\") == \"Yes\"\nassert solution(\"11\") == \"Yes\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == 'Yes'\nassert solution(9) == 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0) == \"Yes\"\nassert solution(1) == \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == 'No'\nassert solution(88) == 'Yes'\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\\\"3\\\") == \\\"Yes\\\", \\\"3 is a multiple of 9\\\"\nassert solution(\\\"3.0\\\") == \\\"No\\\", \\\"3.0 is not a multiple of 9\\\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"0\") == \"No\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"100\") == \"No\"\nassert solution(\"10000000000000\") == \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('1') == 'No'\nassert solution('112') == 'No'\nassert solution('123321') == 'No'\nassert solution('0') == 'No'\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4, \"Your answer is incorrect.\"\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(7) == 4\nassert solution(25) == 7\nassert solution(25) == 25\nassert solution(64) == 64\nassert solution(144) == 4\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 4\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\n\n-----Sample Input-----\n11\n\n-----Sample Output-----\n2\n\nBy withdrawing 2 yen, 4 yen, 6^2 yen and 6^3 yen, we can withdraw 11 yen in eight operations.\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\n\nExample 2:\n\nInput:\n2\n\nOutput:\n0\n\nExplanation:\nFor all operations, we need to withdraw exactly one of the following amounts:\n - 1 yen, 6^2(=36) yen, 6^3(=216) yen,...\n - 9 yen, 9^2(=81) yen, 9^3(=729) yen,...\nFor the same operations, we need to withdraw exactly one of the following amounts:\n - 1 yen, 36(=6^2) yen, 9^2(=81) yen, 9^3(=729) yen,...\n  \n\nExample 3:\n\nInput:\n3\n\nOutput:\n2\n\nExplanation:\nFor all operations, we need to withdraw exactly one of the following amounts:\n - 1 yen, 36(=6^2) yen, 9^2(=81) yen, 9^3(=729) yen,...\n - 1 yen, 36(=6^2) yen, 9^2(=81) yen, 9^3(=729) yen,...\nNote that when we take 1 of the following amounts out of N, we need to withdraw exactly one of the following amounts.\n\nInput:\n7\n\nOutput:\n2\n\nExplanation:\nFor all operations, we need to withdraw exactly one of the following amounts:\n - 1 yen, 36(=6^2) yen, 9^2(=81) yen, 9^3(=729) yen,...\n - 1 yen, 36(=6^2) yen, 9^2(=81) yen, 9^3(=729) yen,...\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"5\"\nassert solution(\"5\") == \"7\"\nassert solution(\"7\") == \"1\"\nassert solution(\"9\") == \"3\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '4'\n'''"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"7\"\nassert solution(\"8\") == \"6\"\nassert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == str(127)"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('kyoto') == 'Yes'\nassert solution('tokyo') == 'No'"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\n\n - In the first operation, tokyo becomes kyoto.\n - In the second operation, kyoto becomes tokyo.\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\nassert solution(\"koko\") == \"No\"\nassert solution(\"k\" * 5) == \"Yes\"\nassert solution(\"ab\") == \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(kyoto) == \"Yes\"\nassert solution(tokyo) == \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"No\"\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp := \"kyoto\") == \"Yes\", \"Not Yes\"\nassert solution(inp := \"tokyo\") == \"No\", \"Not No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution( \"kyoto\" ) == \"okayo\"\nassert solution( \"tokyo\" ) == \"no\"\nassert solution( \"kyoto\" ) == \"no\"\nassert solution( \"kyoto\" ) == \"no\"\nassert solution( \"kyoto\" ) == \"no\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 'Yes'\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(cabacc) == 1\nassert solution(cabacc) == 1\nassert solution(cabacc) == 1\nassert solution(cabacc) == 1\nassert solution(cabacc) == 1\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['a','c','c','b']) == 1\nassert solution(['a','a','c','b']) == 1\nassert solution(['c','a','c','c']) == 1\nassert solution(['c','a','b']) == 2\nassert solution(['a','a','c','a']) == 1\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(s) == 2\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(cabacc) == 1, '1'\nassert solution(abc) == 1, '2'\nassert solution(cab) == 2, '2'\nassert solution(c) == 3, '3'\nassert solution(a) == 3, '4'\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(cabacc) == 1, \"One character does not need to be changed\"\nassert solution(abc) == 3, \"Three characters need to be changed\"\nassert solution(aa) == 2, \"Three characters need to be changed\"\nassert solution(cx) == 3, \"Three characters need to be changed\"\nassert solution(cz) == 2, \"Three characters need to be changed\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('aab') == 1, \"Incorrect\"\n\n\n'''"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2) == 1\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 1, \"An error occured\"\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"abca\",\n    \"cadbac\") == 1\nassert solution(\"\", \"\") == 0\nassert solution(\"abc\", \"c\") == 1\nassert solution(\"abc\", \"def\") == 2\nassert solution(\"abcd\", \"abcd\") == 2\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"1\") == \"2\"\nassert solution(\"0\") == \"2\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"8\", \"12\", \"2\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\"]) == \"3\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp := input()) == 2\n\n\n\n\n-----Sample Input-----\nInput is given from STDIN.\nA B K\n\n-----Output-----\nPrint the K-th largest positive integer that divides both A and B.\n\nassert solution(inp := input()) == 2\n\n\n\n\n\n\ninput)\nInput:\n2 4\nOutput:\n4\n\nInput:\n2 5\nOutput:\n2\n\ninput)\nInput:\n2 6\nOutput:\n3\n\ninput)\nInput:\n2 9\nOutput:\n3\n\nInput:\n3 7\nOutput:\n7\n\nInput:\n3 2\nOutput:\n3\n\nInput:\n4 5\nOutput:\n5\n\nInput:\n2\nOutput:\n4\n\nInput:\n3 3\nOutput:\n3\n\nInput:\n2\nOutput:\n4\n\nInput:\n3\nOutput:\n2\n\nInput:\n1\nOutput:\n1\n\nn, k = map(int, input().split())\nprint(solution(n, k))\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(in_) == \"2\"\nassert solution(in_) == \"4\"\nassert solution(in_) == \"2\"\nassert solution(in_) == \"4\"\nassert solution(in_) == \"2\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\n---A = [8, 12]\n---B = [2, 4]\n\n---explanation:\n8 / 4 = 2\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"2\"\n\"\"\"\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 2' ) == '2'\nassert solution('10 10' ) == '10'\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"Error\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(X) == 2020\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2020\n\n\n-----Sample Output-----\n2\n\nBy exchanging his money so that he gets two 500-yen coins and four 5-yen coins, he gains 2020 happiness points, which is the maximum number of happiness points that can be earned.\n\n-----Constraints-----\n - 0 \\leq X \\leq 10^9\n - X is an integer.\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 2020\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1020\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"500-yen\") == \"2020\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 5) == 10\nassert solution(3, 1) == 1\nassert solution(0, 0) == 0\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(f_str) == \"5\"\nassert solution(g_str) == \"50\"\nassert solution(h_str) == \"0\"\nassert solution(i_str) == \"5\"\nassert solution(j_str) == \"10\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 3\nassert solution(\"3\") == 3\nassert solution(\"4\") == 6\nassert solution(\"5\") == 5\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"1\")\nassert solution(stdin), \"0\")\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 4\") == \"5\"\nassert solution(\"1 1\") == \"5\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 3\") == \"0\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"10\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2 4\") == \"5\"\n\n\n---------------------------------------------------------\n\nTest Case:\n\nInput:\n2 3\n\nOutput:\n4\n\nExplanation:\nThe meeting is held at coordinate 2 and the first person has to spend (2 - 1)^2 points of stamina, while the second person has to spend (4 - 2)^2."
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, 2, 4) == 5\nassert solution(3, 2, 4) == 3\nassert solution(2, 1, 4) == 1\nassert solution(1, 2, 4) == 1"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '5'\nassert solution(input().split()) == '5'\nassert solution(input().split()) == '5'\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 4\") == \"7\"\nassert solution(\"4 4 5\") == \"20\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 5\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\", \"Test failed\"\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 10\"), \"No solution\"\nassert solution(\"4 11\"), \"No solution\"\nassert solution(\"4 1\"), \"No solution\"\nassert solution(\"4 9\"), \"No solution\"\nassert solution(\"4 15\"), \"No solution\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('10 2') == '3'\nassert solution('5 20') == '2'\nassert solution('3 4') == '2'\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '3'\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '3'\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('10 10') == '3'\nassert solution('5 6') == '2'\nassert solution('9 9') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n'''\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution(input())) == 4\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('CSS') == 2\nassert solution('CSR') == 2\nassert solution('CSS') == 0\nassert solution('CSS') == 0\nassert solution('CSS') == 0\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"CSSCSR\") == 2\nassert solution(\"CSR\") == 2\nassert solution(\"CSS\") == 2\nassert solution(\"CSRCSR\") == 1\nassert solution(\"CSRCCS\") == 2\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"CSS\",\n    \"CSR\"\n) == 2\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('CSS') == 2\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('CSS') == 2\nassert solution('CSR') == 2\nassert solution('CSC') == 2\nassert solution('CSR') == 2\nassert solution('CSC') == 2\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"CSR\") == \"2\"\nassert solution(\"CSS\") == \"2\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"CSS\"\n) == 2\nassert solution(\n    \"CSR\"\n) == 2\nassert solution(\n    \"CSLL\"\n) == 3\nassert solution(\n    \"CSLLR\"\n) == 3\nassert solution(\n    \"CSLLRLLRRRRRR\"\n) == 3\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\n\n\"\"\"\n\nimport sys\nimport os\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('CSS') == 2\nassert solution('CSR') == 2\nassert solution('CSS') == 1\nassert solution('CSR') == 1\nassert solution('CSS') == 0\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"p_1 p_2\") == \"2\"\nassert solution(\"p_1 p_2 5\") == \"2\"\nassert solution(\"p_2 5 4 2\") == \"2\"\nassert solution(\"p_2 p_3\") == \"2\"\nassert solution(\"p_2 4 p_5\") == \"1\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == 2\nassert solution(6) == 3\nassert solution(6) == 3\nassert solution(3) == 2\nassert solution(4) == 1\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3 5 4 2\") == \"2\"\nassert solution(\"1 3 5 5 4\") == \"3\"\nassert solution(\"1 3 5 5 6\") == \"2\"\nassert solution(\"1 3 5 5 7\") == \"3\"\nassert solution(\"1 3 5 6 9\") == \"3\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1,1,4,5,4,1) == 2\nassert solution(1,3,5,4,1,2) == 1\nassert solution(1,4,5,4,1,2) == 3\nassert solution(1,4,5,4,1,3) == 4\nassert solution(1,4,5,4,1,4) == 5\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n[5, 1, 3, 5, 4, 2]) == 2\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 1 3 5 4 2\") == \"2\"\nassert solution(\"4 1 3 5 4 2\") == \"2\"\nassert solution(\"5 1 3 5 4 2\") == \"3\"\nassert solution(\"4 1 3 5 4 2\") == \"3\"\nassert solution(\"5 1 3 5 4 2\") == \"4\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3 5 4 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 2\nassert solution(4) == 2\nassert solution(3) == 2\nassert solution(1) == 2\nassert solution(4) == 2\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"5 3 4 2\"\n) == \"2\"\nassert solution(\n    \"3 5 1 4 2\"\n) == \"2\"\nassert solution(\n    \"3 1 5 4 2\"\n) == \"2\"\nassert solution(\n    \"1 3 5 4 2\"\n) == \"2\"\nassert solution(\n    \"3 4 1 2\"\n) == \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 3 5 4 2\") == \"2\"\nassert solution(\"4 4 4\") == \"2\"\nassert solution(\"4 4 4\") == \"2\"\nassert solution(\"4 4 4\") == \"1\"\nassert solution(\"4 4 4\") == \"1\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5.410'\nassert solution(stdin) == '5.620'\nassert solution(stdin) == '6.040'"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['8', '-2.14 2.06', '-1.14 2.04', '-2.16 1.46', '-2.14 0.70', '-1.42 0.40', '-0.94 -0.48', '-1.42 -1.28', '-2.16 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2.14 -1.62', '-2."
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '5.410'\nassert solution(stdin) == '5.320'\nassert solution(stdin) == '5.350'\nassert solution(stdin) == '5.360'\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1.74\", '\"2\" should be a solution'\nassert solution(\"3\") == \"2.01\", '\"3\" should be a solution'\nassert solution(\"4\") == \"3.32\", '\"4\" should be a solution'\nassert solution(\"5\") == \"4.90\", '\"5\" should be a solution'\nassert solution(\"6\") == \"4.74\", '\"6\" should be a solution'\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"5.620\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5.410\"\nassert solution(stdin) == \"5.620\"\nassert solution(stdin) == \"5.480\""
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5.410\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == \"2.14\"\nassert solution(2) == \"2.06\"\nassert solution(3) == \"2.08\"\nassert solution(4) == \"2.13\"\nassert solution(5) == \"2.08\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5') == '5.410'\nassert solution('5') == '5.490'\nassert solution('8') == '5.410'\nassert solution('8') == '5.490'\nassert solution('8') == '5.590'\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\"8\", \"2.26\", \"2.28\", \"2.30\", \"1.58\", \"3.24\", \"2.06\", \"1.12\", \"0.24\", \"5.98\", \"5.54\", \"7.16\", \"7.82\", \"8.34\", \"8.74\", \"9.24\", \"9.62\", \"10.48\", \"10.80\", \"11.48\", \"12.06\", \"12.54\", \"13.76\", \"14.82\", \"15.72\", \"16.86\", \"17.00\", \"16.40\", \"18.00\", \"17.49\", \"18.12\", \"18.62\", \"19.54\", \"20.00\", \"21.06\", \"22.14\", \"22.56\", \"23.16\", \"23.58\", \"24.52\", \"25.70\", \"26.76\", \"27.80\", \"28.80\", \"29.52\", \"30.90\", \"31.52\", \"32.00\", \"32.56\", \"33.64\", \"34.50\"]) == \"5.410\"\nassert solution(\n    [\"8\", \"2.26\", \"2.28\", \"2.30\", \"1.58\", \"3.24\", \"2.06\", \"1.12\", \"0.24\", \"5.98\", \"5.54\", \"7.16\", \"7.82\", \"8.34\", \"8.74\", \"9.24\", \"9.62\", \"10.48\", \"10.80\", \"11.48\", \"12.06\", \"12.54\", \"13.76\", \"14.82\", \"15.72\", \"16.86\", \"17.00\", \"16.40\", \"18.00\", \"17.49\", \"18.12\", \"18.62\", \"19.54\", \"20.00\", \"21.06\", \"22.14\", \"22.56\", \"23.16\", \"23.58\", \"24.52\", \"25.70\", \"26.76\", \"27.80\", \"28.80\", \"29.52\", \"30.90\", \"31.52\", \"32.00\", \"32.56\", \"33.64\", \"34.50\"]) == \"6.040\"\nassert solution(\n    [\"8\", \"2.26\", \"2.28\", \"2.30\", \"1.58\", \"3.24\", \"2.06\", \"1.12\", \"0.24\", \"5.98\", \"5.54\", \"7.16\", \"7.82\", \"8.34\", \"8.74\", \"9.24\", \"9.62\", \"10.48\", \"10.80\", \"11.48\", \"12.06\", \"12.54\", \"13.76\", \"14.82\", \"15.72\", \"16.86\", \"17.00\", \"16.40\", \"18.00\", \"17.49\", \"18.12\", \"18.62\", \"19.54\", \"20.00\", \"21.06\", \"22.14\", \"22.56\", \"23.16\", \"23.58\", \"24.52\", \"25.70\", \"26.76\", \"27.80\", \"28.80\", \"29.52\", \"30.90\", \"31.52\", \"32.00\", \"32.56\", \"33.64\", \"34.50\"]) == \"6.720\"\nassert solution(\n    [\"8\", \"2.26\", \"2.28\", \"2.30\", \"1.58\", \"3.24\", \"2.06\", \"1.12\", \"0.24\", \"5.98\", \"5.54\", \"7.16\", \"7.82\", \"8.34\", \"8.74\", \"9.24\", \"9.62\", \"10.48\", \"10.80\", \"11.48\", \"12.06\", \"12.54\", \"13.76\", \"14.82\", \"15.72\", \"16.86\", \"17.00\", \"16.40\", \"18.00\", \"17.49\", \"18.12\", \"18.62\", \"19.54\", \"20.00\", \"21.06\", \"22.14\", \"22.56\", \"23.16\", \"23.58\", \"24.52\", \"25.70\", \"26.76\", \"27.80\", \"28.80\", \"29.52\", \"30.90\", \"31.52\", \"32.00\", \"32.56\", \"33.64\", \"34.50\"]) == \"5.620\"\nassert solution(\n    [\"8\", \"2.26\", \"2.28\", \"2.30\", \"1.58\", \"3.24\", \"2.06\", \"1.12\", \"0.24\", \"5.98\", \"5.54\", \"7.16\", \"7.82\", \"8.34\", \"8.74\", \"9.24\", \"9.62\", \"10.48\", \"10.80\", \"11.48\", \"12.06\", \"12.54\", \"13.76\", \"14.82\", \"15.72\", \"16.86\", \"17.00\", \"16.40\", \"18.00\", \"17.49\", \"18.12\", \"18.62\", \"19.54\", \"20.00\", \"21.06\", \"22.14\", \"22.56\", \"23.16\", \"23.58\", \"24.52\", \"25.70\", \"26.76\", \"27.80\", \"28.80\", \"29.52\", \"30.90\", \"31.52\", \"32.00\", \"32.56\", \"33.64\", \"34.50\"]) == \"6.720\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^9\n\nSample Input 1:\n\n5 8\n2 3 1 1 2\n\nSample Output 1:\n\n4\n\nSample Input 2:\n\n5 15\n5 5 5 5 5\n\nSample Output 2:\n\n2\n\nSample Input 3:\n\n5 16\n5 5 5 5 5\n\nSample Output 3:\n\n2\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 8') == '2'\nassert solution('5 16') == '1'\nassert solution('5 26') == '2'\nassert solution('5 26') == '1'\nassert solution('5 26') == '2'\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^9\n1 <= a_i <= 10^9\na_1, a_2, \\dots, a_i \\le 10^9\n\nExample 1:\n\nInput\n5 8\n2 3 1 1 2\n\nOutput\n4\n\nExample 2:\n\nInput\n7 10\n5 5 5 5 5\n\nOutput\n2\n\nExample 3:\n\nInput\n5 16\n5 5 5 5 5\n\nOutput\n1\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == -1"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"16\"\n\nassert solution(stdin) == \"26\"\n\nassert solution(stdin) == \"12\""
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"5\"\n\nassert solution(inp) == \"4\"\n\nassert solution(inp) == \"3\"\n\nassert solution(inp) == \"1\"\n\n\n-----Note-----\n\nThe second example is described in the problem statement.\n\nIn the first example, you have to make sure that there are no duplicates in the array $t$. Therefore, you cannot choose any other array such that the maximum number of copies you can cut out would be equal to $2$.\n\nIn the second example, you have to make sure that the array $t$ can be cut out using the same elements.\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 2 3\""
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 190 191 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 226 227 228 229 230 231 231 232 233 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"stdin is not correct\"\nassert solution(stdin), \"stdin is not correct\"\nassert solution(stdin), \"stdin is not correct\"\nassert solution(stdin), \"stdin is not correct\"\nassert solution(stdin), \"stdin is not correct\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input: \"7 3\"\n    ) == \"1 2 3 2 4 3 1\"\nassert solution(\n    input: \"10 4\"\n    ) == \"1 3 1 3 10 3 7 7 12 3\"\nassert solution(\n    input: \"15 2\"\n    ) == \"1 1 1 1 1 2 1 1 2 1 2 1 1 1 1\"\nassert solution(\n    input: \"0\"\n    ) == \"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 4 1 2 1 1') == '1 3 4'\nassert solution('1 2 3 4 5 3 4 5 1 2 1') == '1 1 1 1'\nassert solution('1 2 3 4 5 3 4 5 1 2 2') == '1 1 1 2'\nassert solution('1 2 3 4 5 3 4 5 1 2 2 1') == '1 1 1 2 3 4 5'\nassert solution('1 2 3 4 5 3 4 5 1 2 2 1 1') == '1 1 1 2 3 4 5 1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('', '', [1, 3, 2, 4, 5]) == '1'\nassert solution('', '', [1, 2, 3, 2, 4, 3, 1]) == '1'\nassert solution('', '', [1, 2, 3, 2, 4, 1, 3, 1]) == '1'\nassert solution('', '', [1, 2, 3, 2, 4, 1, 3, 1, 5]) == '5'\nassert solution('', '', [1, 2, 3, 2, 4, 1, 5, 3, 1]) == '5'\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 2 3\"\n\n\n-----Constraints-----\n1 <= k <= n <= 10^5\n\n---[input]---\n\nThe first line contains a single integer $n$ denoting the number of elements in the input array.\n\nThe second line contains $k$ integers $s_1, s_2, \\dots, s_n$ denoting the elements of the array $s$.\n\n--[output]--\n\nPrint the elements of array $s$ such that you can cut out maximum possible number of copies of this array from $s$. If there are multiple answers, print any of them.\n\n[input]\n3 3 2 4 3 1\n\n[output]\n1 2 3\n\n[input]\n10 4\n\n[output]\n7 3 1 3\n\n[input]\n15 2\n\n[output]\n7 3 1 3\n\n[input]\n10 6\n\n[output]\n7 6\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 2 3 1 3 4\"\nassert solution(stdin) == \"2 1 1 1 1 2 1 2 1 1 1 2 1 1 2 1\"\nassert solution(stdin) == \"4\""
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\npass\n\nassert solution(stdin) == \"0\"\n\npass\n\nassert solution(stdin) == \"3\"\n\npass\n\nassert solution(stdin) == \"3\"\n\npass\n\npass\n\nassert solution(stdin) == \"0\"\n\npass\n\npass\n\npass"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution == \"5\"\n\nInput\n2 4\n1 2 3 4\n10 3 7 3\n\nOutput\n3\n\nInput\n6 1\n3\n6\n2\n5\n1\n4\n\nOutput\n3\n\n\n------Expected output------\n\n5\n\n------Your Input------\n4 2\n1 2 3 4\n10 3 7 3\n\n5\n\n------Your Output------\n\n0\n\n\"\"\"\n\nn, m = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\nd = [[0 for _ in range(m)] for _ in range(n)]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0) == \"3\"\nassert solution(1) == \"5\"\nassert solution(2) == \"8\"\nassert solution(3) == \"3\"\nassert solution(4) == \"6\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 219 220 221 223 224 225 226 227 228 229 229 230 231 231 232 233 234 235 236 237 237 238 239 240 241 242 243 244 245 245 246 247 248 249 251 252 253 254 255 255 256 257 259 259 260 261 261 262 263 264 265 266 267 268 269 271 272 274 275 275 277 276 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 308 309 311 311 313 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 329 330 330 331 332 333 333 334 334 335 336 337 337 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '5'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^4\n1 <= a[i][j] <= 10^9\n\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"9 9\") == \"5\"\nassert solution(\"2 4\") == \"0\"\nassert solution(\"6 1\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '5'\n\nassert solution(input()) == '0'\n\nassert solution(input()) == '3'\n\n\"\"\"\n\nfrom math import ceil\n\nn, m = map(int, input().split())\n\narr = [[int(n) for n in input().split()] for _ in range(n)]"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"9 3\n5 7\"\"\"\n) == \"5\"\n\nassert solution(\n    \"\"\"3 7\n1 7\"\"\"\n) == \"3\"\n\nassert solution(\n    \"\"\"1 3\n1 2 2\"\"\"\n) == \"0\"\n\nassert solution(\n    \"\"\"2 7\n3 1 2\"\"\"\n) == \"0\"\n\nassert solution(\n    \"\"\"3 9\n1 1 4 3 4 4\"\"\"\n) == \"3\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"Stdout does not contain an exit message\"\nassert solution(stdin), \"Stderr does not contain an exit message\"\n\nassert solution(stdin), \"Stdout does not contain an exit message\"\nassert solution(stdin), \"Stderr does not contain an exit message\"\n\n\n-----Sample Input-----\n\n1\nxxxiiiii\n\nOutput\n1\n\n-----Sample Output-----\n\nPrint 0 if the file name does not initially contain a forbidden substring \"xxx\".\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"Empty input\"\nassert solution(\"foobar\"), \"xxx\"\nassert solution(\"aabb\"), \"xx\"\nassert solution(\"xxxxx\"), \"xx\"\nassert solution(\"aaaaaa\"), \"a\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(6) == '0'\nassert solution(5) == '1'\nassert solution(10) == '1'\nassert solution(33) == '1'\nassert solution(0) == '0'\n\n'''"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"exxxii\") == \"exxxii\""
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, 2, 1) == 1\nassert solution(3, 2, 0) == 0\nassert solution(5, 2, 0) == 0\nassert solution(3, 2, 0) == 0\nassert solution(6, 2, 0) == 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\n'''\nclass Solution:\n    def fileReader(self, filename: str) -> str:\n        with open(filename, 'r') as f:\n            return f.read().replace('\\n', '')\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"04\") == \"0\", \"Test Case Failed.\"\nassert solution(\"01\") == \"0\", \"Test Case Failed.\"\nassert solution(\"01234\") == \"1\", \"Test Case Failed.\"\nassert solution(\"test\") == \"0\", \"Test Case Failed.\"\nassert solution(\"hello\") == \"0\", \"Test Case Failed.\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"xxxxxxxxxx\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xx\" + \"xxxxxx\" + \"xxxx\" + \"xxxx\" + \"xxxx\") == \"0\"\nassert solution(\"xxo\" * 30) == \"0\"\nassert solution(\"xx\" * (30 + 1)) == \"0\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 0, \"not found\"\n\n\n\n-----Problem-----\n\nPolycarp tried to send a file with name contains number $33$. Given it is a file that contains \"x\", check whether the file name contains only three letters. If not, print the error message.\n\nInput\n6\nxxxiii\n\nOutput\n0\n\nInput\n5\nxxoxx\n\nOutput\n1\n\nInput\n10\nxxxxxxxxxx\n\nOutput\n8\n\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"xzx\") == \"xzx\"\nassert solution(\"xxxx\") == 0\n\n\n-----Constraints-----\n1 <= $n$ <= 10^6\n\nAccepted\n4\n\nSubmissions\n2\n\nSubmissions\n2\n\nAccepted\n3\n\nSubmissions\n1\n\nAccepted\n3\n\nSubmissions\n3\n\nAccepted\n3\n\nSubmissions\n5\n\nAccepted\n4\n\nSubmissions\n4\n\nAccepted\n6\n\nSubmissions\n4\n\nAccepted\n6\n\nSubmissions\n4\n\nAccepted\n6\n\nSubmissions\n3\n\nAccepted\n6\n\nSubmissions\n4\n\nAccepted\n6\n\nSubmissions\n5\n\nAccepted\n6\n\nSubmissions\n3\n\nAccepted\n6\n\nSubmissions\n3\n\nAccepted\n6\n\nSubmissions\n5\n\nAccepted\n6\n\nSubmissions\n3\n\nAccepted\n6\n\nSubmissions\n4\n\nAccepted\n6\n\nSubmissions\n3\n\nAccepted\n6\n\nSubmissions\n5\n\nAccepted\n6\n\nSubmissions\n4\n\nAccepted\n6\n\nSubmissions\n3\n\nAccepted\n6\n\nSubmissions\n4\n\nAccepted\n6\n\nSubmissions\n4\n\nAccepted\n6\n\nSubmissions\n3\n\nAccepted\n6\n\nSubmissions\n5\n\nAccepted\n6\n\nSubmissions\n4\n\nAccepted\n6\n\nSubmissions\n4\n\nAccepted\n6\n\nSubmissions\n4\n\nAccepted\n6\n\nSubmissions\n3\n\nAccepted\n6\n\nSubmissions\n3\n\nAccepted\n6\n\nSubmissions\n3\n\nAccepted\n6\n\nSubmissions\n4\n\nAccepted\n6\n\nSubmissions\n3\n\nAccepted\n6\n\nSubmissions\n3\n\nAccepted\n6\n\nSubmissions\n3\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n2\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions\n1\n\nAccepted\n6\n\nSubmissions"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(a=int(input())) == str(48)\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(4) == 48\nassert solution(3) == 6\nassert solution(5) == 110\nassert solution(2) == 27\nassert solution(1) == 1\n\n-----Time complexity----\nO(4)\n\nO(1)\n\nO(4)\n\nO(2^n)\n\nO(n)\n\nO(n)\n\nO(2^n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(2^n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(2^n)\n\nO(n)\n\nO(2^n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n        \"4\"\n    ) == \"48\"\nassert solution(\n        \"2\"\n    ) == \"4\"\nassert solution(\n        \"4\"\n    ) == \"5\"\nassert solution(\n        \"2\"\n    ) == \"5\"\nassert solution(\n        \"1\"\n    ) == \"10\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"48\""
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 1\nassert solution(2) == 4\nassert solution(3) == 64\nassert solution(4) == 96\nassert solution(5) == 512\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"48\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"0\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1' == '1') == '1', \"Your solution does not match the input\"\nassert solution('5') == '9', \"Your solution does not match the input\"\nassert solution('-10') == '5', \"Your solution does not match the input\"\nassert solution('2') == '4', \"Your solution does not match the input\"\nassert solution('1.8') == '1.8', \"Your solution does not match the input\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"48\"\n\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"48\""
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"48\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"unsafe\") == \"safe\"\nassert solution(\"unsafe\") == \"unsafe\"\nassert solution(\"unsafe\") == \"safe\"\nassert solution(\"safe\") == \"safe\"\nassert solution(\"safe\") == \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5,3) == \"unsafe\"\nassert solution(5,4) == \"safe\"\nassert solution(5,2) == \"safe\"\nassert solution(5,1) == \"safe\"\nassert solution(5,0) == \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 1\") == \"unsafe\"\nassert solution(\"5 2\") == \"safe\"\nassert solution(\"4 3\") == \"unsafe\"\nassert solution(\"4 4\") == \"safe\"\nassert solution(\"5 5\") == \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"The correct implementation of the sheep's attack check\"\nassert solution(stdin), \"The correct implementation of the wolves' attack check\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == \"unsafe\"\nassert solution(s) == \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1 1\"]) == \"unsafe\"\nassert solution([\"1 1\", \"1 0\", \"1 1\"]) == \"unsafe\"\nassert solution([\"1 1\", \"1 1\", \"1 1\"]) == \"safe\"\nassert solution([\"1 1\", \"1 1\", \"1 1\", \"1 1\"]) == \"safe\"\nassert solution([\"1 1\", \"1 1\", \"1 1\", \"1 1\"]) == \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 4 2 2\") == \"unsafe\"\nassert solution(\"3 3 3 3\") == \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"unsafe\"\n\n\n\"\"\"\n\nimport math\nfrom collections import deque"
    }
]